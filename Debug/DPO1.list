
DPO1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014714  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  080148f8  080148f8  000158f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014e48  08014e48  00016354  2**0
                  CONTENTS
  4 .ARM          00000008  08014e48  08014e48  00015e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014e50  08014e50  00016354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014e50  08014e50  00015e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014e54  08014e54  00015e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000354  20000000  08014e58  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002864  20000354  080151ac  00016354  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002bb8  080151ac  00016bb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016354  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029864  00000000  00000000  00016384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000578d  00000000  00000000  0003fbe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002360  00000000  00000000  00045378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b56  00000000  00000000  000476d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000096d9  00000000  00000000  0004922e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e544  00000000  00000000  00052907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012a1e8  00000000  00000000  00080e4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ab033  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ac04  00000000  00000000  001ab078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  001b5c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000354 	.word	0x20000354
 80001fc:	00000000 	.word	0x00000000
 8000200:	080148dc 	.word	0x080148dc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000358 	.word	0x20000358
 800021c:	080148dc 	.word	0x080148dc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <FT6336_ReadRegister>:

HAL_StatusTypeDef FT6336_WriteRegister( uint8_t RegAddress, uint8_t *pData, uint16_t Size) {
    return HAL_I2C_Mem_Write(&FT6336_I2C_PORT, FT6X36_ADDR, RegAddress, I2C_MEMADD_SIZE_8BIT, pData, Size, HAL_MAX_DELAY);
}

HAL_StatusTypeDef FT6336_ReadRegister( uint8_t RegAddress, uint8_t *pData, uint16_t Size) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af04      	add	r7, sp, #16
 800103a:	4603      	mov	r3, r0
 800103c:	6039      	str	r1, [r7, #0]
 800103e:	71fb      	strb	r3, [r7, #7]
 8001040:	4613      	mov	r3, r2
 8001042:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Read(&FT6336_I2C_PORT, FT6X36_ADDR, RegAddress, I2C_MEMADD_SIZE_8BIT, pData, Size, HAL_MAX_DELAY);
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	b29a      	uxth	r2, r3
 8001048:	f04f 33ff 	mov.w	r3, #4294967295
 800104c:	9302      	str	r3, [sp, #8]
 800104e:	88bb      	ldrh	r3, [r7, #4]
 8001050:	9301      	str	r3, [sp, #4]
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	2301      	movs	r3, #1
 8001058:	2170      	movs	r1, #112	@ 0x70
 800105a:	4804      	ldr	r0, [pc, #16]	@ (800106c <FT6336_ReadRegister+0x38>)
 800105c:	f004 fd3a 	bl	8005ad4 <HAL_I2C_Mem_Read>
 8001060:	4603      	mov	r3, r0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000468 	.word	0x20000468

08001070 <FT6336_Init>:

void FT6336_Init(void) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
    FT6336_RST_L;
 8001076:	2200      	movs	r2, #0
 8001078:	2104      	movs	r1, #4
 800107a:	480f      	ldr	r0, [pc, #60]	@ (80010b8 <FT6336_Init+0x48>)
 800107c:	f004 fc54 	bl	8005928 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001080:	200a      	movs	r0, #10
 8001082:	f002 fa6f 	bl	8003564 <HAL_Delay>
    FT6336_RST_H;
 8001086:	2201      	movs	r2, #1
 8001088:	2104      	movs	r1, #4
 800108a:	480b      	ldr	r0, [pc, #44]	@ (80010b8 <FT6336_Init+0x48>)
 800108c:	f004 fc4c 	bl	8005928 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8001090:	2032      	movs	r0, #50	@ 0x32
 8001092:	f002 fa67 	bl	8003564 <HAL_Delay>
//    FT6336_WriteRegister(0x00, 0x00,1);
//
//    // 设置 ID_G_MODE 为 0x00（启用中断输出）
//    FT6336_WriteRegister(0xA4, 0x00,1);

    uint8_t id = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	71fb      	strb	r3, [r7, #7]
    FT6336_ReadRegister(FT6336_FOCALTECH_ID, &id, 1);
 800109a:	1dfb      	adds	r3, r7, #7
 800109c:	2201      	movs	r2, #1
 800109e:	4619      	mov	r1, r3
 80010a0:	20a8      	movs	r0, #168	@ 0xa8
 80010a2:	f7ff ffc7 	bl	8001034 <FT6336_ReadRegister>
    HAL_Delay(1000);
 80010a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010aa:	f002 fa5b 	bl	8003564 <HAL_Delay>
//    HAL_Delay(1000);
    //used to debug IIC



}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	48000c00 	.word	0x48000c00

080010bc <AdjustTouchCoordinates>:

static void AdjustTouchCoordinates(uint16_t *x, uint16_t *y) {
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
    uint16_t rawX = *x;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	81fb      	strh	r3, [r7, #14]
    uint16_t rawY = *y;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	81bb      	strh	r3, [r7, #12]
//
//    *x = (*x * SCREEN_WIDTH) / TOUCH_WIDTH;
//    *y = (*y * SCREEN_HEIGHT) / TOUCH_HEIGHT;

    // 情况 X：特殊处理
    *x = rawY;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	89ba      	ldrh	r2, [r7, #12]
 80010d6:	801a      	strh	r2, [r3, #0]
    *y = SCREEN_HEIGHT-rawX;
 80010d8:	89fb      	ldrh	r3, [r7, #14]
 80010da:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80010de:	b29a      	uxth	r2, r3
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	801a      	strh	r2, [r3, #0]
}
 80010e4:	bf00      	nop
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <FT6336_GetTouchPoint>:





void FT6336_GetTouchPoint(TouchPoints_HandleTypeDef *touchPoints) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
    uint8_t touchStatus = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	73bb      	strb	r3, [r7, #14]
    uint8_t touchData[4];  // 存储两个点的坐标数据 (每个点4个字节)

    // 读取触摸状态寄存器
    FT6336_ReadRegister(FT6336_TD_STATUS, &touchStatus, 1);
 80010fc:	f107 030e 	add.w	r3, r7, #14
 8001100:	2201      	movs	r2, #1
 8001102:	4619      	mov	r1, r3
 8001104:	2002      	movs	r0, #2
 8001106:	f7ff ff95 	bl	8001034 <FT6336_ReadRegister>
    uint8_t touchCount = touchStatus & 0x0F;  // 获取触摸点数量
 800110a:	7bbb      	ldrb	r3, [r7, #14]
 800110c:	f003 030f 	and.w	r3, r3, #15
 8001110:	73fb      	strb	r3, [r7, #15]

    if (touchCount > 0) {
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d054      	beq.n	80011c2 <FT6336_GetTouchPoint+0xd2>
        // 读取第一个触摸点的坐标 (4个字节)
    	FT6336_ReadRegister(FT6336_P1_XH, touchData, 4);
 8001118:	f107 0308 	add.w	r3, r7, #8
 800111c:	2204      	movs	r2, #4
 800111e:	4619      	mov	r1, r3
 8001120:	2003      	movs	r0, #3
 8001122:	f7ff ff87 	bl	8001034 <FT6336_ReadRegister>
        touchPoints->point1_x = ((touchData[0] & 0x0F) << 8) | touchData[1];
 8001126:	7a3b      	ldrb	r3, [r7, #8]
 8001128:	021b      	lsls	r3, r3, #8
 800112a:	b21b      	sxth	r3, r3
 800112c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001130:	b21a      	sxth	r2, r3
 8001132:	7a7b      	ldrb	r3, [r7, #9]
 8001134:	b21b      	sxth	r3, r3
 8001136:	4313      	orrs	r3, r2
 8001138:	b21b      	sxth	r3, r3
 800113a:	b29a      	uxth	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	801a      	strh	r2, [r3, #0]
        touchPoints->point1_y = ((touchData[2] & 0x0F) << 8) | touchData[3];
 8001140:	7abb      	ldrb	r3, [r7, #10]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	b21b      	sxth	r3, r3
 8001146:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800114a:	b21a      	sxth	r2, r3
 800114c:	7afb      	ldrb	r3, [r7, #11]
 800114e:	b21b      	sxth	r3, r3
 8001150:	4313      	orrs	r3, r2
 8001152:	b21b      	sxth	r3, r3
 8001154:	b29a      	uxth	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	805a      	strh	r2, [r3, #2]
        AdjustTouchCoordinates(&touchPoints->point1_x, &touchPoints->point1_y);  // 调整第一个触摸点坐标
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3302      	adds	r3, #2
 8001160:	4619      	mov	r1, r3
 8001162:	4610      	mov	r0, r2
 8001164:	f7ff ffaa 	bl	80010bc <AdjustTouchCoordinates>

        if (touchCount > 1) {
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d929      	bls.n	80011c2 <FT6336_GetTouchPoint+0xd2>
            // 读取第二个触摸点的坐标 (4个字节)
        	FT6336_ReadRegister(FT6336_P2_XH, &touchData[4], 4);
 800116e:	f107 0308 	add.w	r3, r7, #8
 8001172:	3304      	adds	r3, #4
 8001174:	2204      	movs	r2, #4
 8001176:	4619      	mov	r1, r3
 8001178:	2009      	movs	r0, #9
 800117a:	f7ff ff5b 	bl	8001034 <FT6336_ReadRegister>
            touchPoints->point2_x = ((touchData[4] & 0x0F) << 8) | touchData[5];
 800117e:	7b3b      	ldrb	r3, [r7, #12]
 8001180:	021b      	lsls	r3, r3, #8
 8001182:	b21b      	sxth	r3, r3
 8001184:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001188:	b21a      	sxth	r2, r3
 800118a:	7b7b      	ldrb	r3, [r7, #13]
 800118c:	b21b      	sxth	r3, r3
 800118e:	4313      	orrs	r3, r2
 8001190:	b21b      	sxth	r3, r3
 8001192:	b29a      	uxth	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	809a      	strh	r2, [r3, #4]
            touchPoints->point2_y = ((touchData[6] & 0x0F) << 8) | touchData[7];
 8001198:	7bbb      	ldrb	r3, [r7, #14]
 800119a:	021b      	lsls	r3, r3, #8
 800119c:	b21b      	sxth	r3, r3
 800119e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b21b      	sxth	r3, r3
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	80da      	strh	r2, [r3, #6]
            AdjustTouchCoordinates(&touchPoints->point2_x, &touchPoints->point2_y);  // 调整第二个触摸点坐标
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	1d1a      	adds	r2, r3, #4
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3306      	adds	r3, #6
 80011ba:	4619      	mov	r1, r3
 80011bc:	4610      	mov	r0, r2
 80011be:	f7ff ff7d 	bl	80010bc <AdjustTouchCoordinates>
        }
    }
}
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d0:	f002 f957 	bl	8003482 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d4:	f000 f884 	bl	80012e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d8:	f000 fef8 	bl	8001fcc <MX_GPIO_Init>
  MX_DMA_Init();
 80011dc:	f000 febc 	bl	8001f58 <MX_DMA_Init>
  MX_USB_Device_Init();
 80011e0:	f00e fb30 	bl	800f844 <MX_USB_Device_Init>
  MX_COMP2_Init();
 80011e4:	f000 f930 	bl	8001448 <MX_COMP2_Init>
  MX_COMP5_Init();
 80011e8:	f000 f954 	bl	8001494 <MX_COMP5_Init>
  MX_DAC1_Init();
 80011ec:	f000 f978 	bl	80014e0 <MX_DAC1_Init>
  MX_DAC2_Init();
 80011f0:	f000 f9c0 	bl	8001574 <MX_DAC2_Init>
  MX_OPAMP1_Init();
 80011f4:	f000 fabc 	bl	8001770 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 80011f8:	f000 fae6 	bl	80017c8 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 80011fc:	f000 fb0a 	bl	8001814 <MX_OPAMP3_Init>
  MX_OPAMP6_Init();
 8001200:	f000 fb7a 	bl	80018f8 <MX_OPAMP6_Init>
  MX_TIM1_Init();
 8001204:	f000 fbe2 	bl	80019cc <MX_TIM1_Init>
  MX_TIM4_Init();
 8001208:	f000 fc90 	bl	8001b2c <MX_TIM4_Init>
  MX_TIM20_Init();
 800120c:	f000 fe4a 	bl	8001ea4 <MX_TIM20_Init>
  MX_TIM3_Init();
 8001210:	f000 fc36 	bl	8001a80 <MX_TIM3_Init>
  MX_ADC5_Init();
 8001214:	f000 f8b2 	bl	800137c <MX_ADC5_Init>
  MX_TIM15_Init();
 8001218:	f000 fda0 	bl	8001d5c <MX_TIM15_Init>
  MX_TIM8_Init();
 800121c:	f000 fcdc 	bl	8001bd8 <MX_TIM8_Init>
  MX_SPI3_Init();
 8001220:	f000 fb96 	bl	8001950 <MX_SPI3_Init>
  MX_I2C3_Init();
 8001224:	f000 fa1a 	bl	800165c <MX_I2C3_Init>
  MX_DAC4_Init();
 8001228:	f000 f9de 	bl	80015e8 <MX_DAC4_Init>
  MX_LPUART1_UART_Init();
 800122c:	f000 fa56 	bl	80016dc <MX_LPUART1_UART_Init>
  MX_OPAMP4_Init();
 8001230:	f000 fb16 	bl	8001860 <MX_OPAMP4_Init>
  MX_OPAMP5_Init();
 8001234:	f000 fb3a 	bl	80018ac <MX_OPAMP5_Init>
  /* USER CODE BEGIN 2 */




  HAL_OPAMP_Start(&hopamp1);
 8001238:	481c      	ldr	r0, [pc, #112]	@ (80012ac <main+0xe0>)
 800123a:	f005 f93b 	bl	80064b4 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp2);
 800123e:	481c      	ldr	r0, [pc, #112]	@ (80012b0 <main+0xe4>)
 8001240:	f005 f938 	bl	80064b4 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp3);
 8001244:	481b      	ldr	r0, [pc, #108]	@ (80012b4 <main+0xe8>)
 8001246:	f005 f935 	bl	80064b4 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp4);
 800124a:	481b      	ldr	r0, [pc, #108]	@ (80012b8 <main+0xec>)
 800124c:	f005 f932 	bl	80064b4 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp5);
 8001250:	481a      	ldr	r0, [pc, #104]	@ (80012bc <main+0xf0>)
 8001252:	f005 f92f 	bl	80064b4 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp6);
 8001256:	481a      	ldr	r0, [pc, #104]	@ (80012c0 <main+0xf4>)
 8001258:	f005 f92c 	bl	80064b4 <HAL_OPAMP_Start>


  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800125c:	213c      	movs	r1, #60	@ 0x3c
 800125e:	4819      	ldr	r0, [pc, #100]	@ (80012c4 <main+0xf8>)
 8001260:	f009 f866 	bl	800a330 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001264:	213c      	movs	r1, #60	@ 0x3c
 8001266:	4818      	ldr	r0, [pc, #96]	@ (80012c8 <main+0xfc>)
 8001268:	f009 f862 	bl	800a330 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800126c:	213c      	movs	r1, #60	@ 0x3c
 800126e:	4817      	ldr	r0, [pc, #92]	@ (80012cc <main+0x100>)
 8001270:	f009 f85e 	bl	800a330 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim20, TIM_CHANNEL_ALL);
 8001274:	213c      	movs	r1, #60	@ 0x3c
 8001276:	4816      	ldr	r0, [pc, #88]	@ (80012d0 <main+0x104>)
 8001278:	f009 f85a 	bl	800a330 <HAL_TIM_Encoder_Start>


  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 800127c:	2100      	movs	r1, #0
 800127e:	4815      	ldr	r0, [pc, #84]	@ (80012d4 <main+0x108>)
 8001280:	f008 fc72 	bl	8009b68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001284:	2100      	movs	r1, #0
 8001286:	4814      	ldr	r0, [pc, #80]	@ (80012d8 <main+0x10c>)
 8001288:	f008 fc6e 	bl	8009b68 <HAL_TIM_PWM_Start>
  FT6336_Init();
 800128c:	f7ff fef0 	bl	8001070 <FT6336_Init>
  ST7789_Init();
 8001290:	f001 f8b8 	bl	8002404 <ST7789_Init>
//	    TLC5952_WriteLED();  // 发送数据
//	    TLC5952_WriteControl();



	   WS2812_Set_All(color);
 8001294:	4b11      	ldr	r3, [pc, #68]	@ (80012dc <main+0x110>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f002 f8a1 	bl	80033e0 <WS2812_Set_All>
	   WS2812_Update();
 800129e:	f002 f8b7 	bl	8003410 <WS2812_Update>


//	  Analog_FE_Update();


	    HAL_Delay(100);
 80012a2:	2064      	movs	r0, #100	@ 0x64
 80012a4:	f002 f95e 	bl	8003564 <HAL_Delay>
	   WS2812_Set_All(color);
 80012a8:	bf00      	nop
 80012aa:	e7f3      	b.n	8001294 <main+0xc8>
 80012ac:	20000550 	.word	0x20000550
 80012b0:	2000058c 	.word	0x2000058c
 80012b4:	200005c8 	.word	0x200005c8
 80012b8:	20000604 	.word	0x20000604
 80012bc:	20000640 	.word	0x20000640
 80012c0:	2000067c 	.word	0x2000067c
 80012c4:	2000077c 	.word	0x2000077c
 80012c8:	200007c8 	.word	0x200007c8
 80012cc:	20000814 	.word	0x20000814
 80012d0:	200008f8 	.word	0x200008f8
 80012d4:	200008ac 	.word	0x200008ac
 80012d8:	20000860 	.word	0x20000860
 80012dc:	20000000 	.word	0x20000000

080012e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b094      	sub	sp, #80	@ 0x50
 80012e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e6:	f107 0318 	add.w	r3, r7, #24
 80012ea:	2238      	movs	r2, #56	@ 0x38
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f00f ff1d 	bl	801112e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001302:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001306:	f006 fe07 	bl	8007f18 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800130a:	2321      	movs	r3, #33	@ 0x21
 800130c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800130e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001312:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001314:	2301      	movs	r3, #1
 8001316:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001318:	2302      	movs	r3, #2
 800131a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800131c:	2303      	movs	r3, #3
 800131e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001320:	2302      	movs	r3, #2
 8001322:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001324:	234b      	movs	r3, #75	@ 0x4b
 8001326:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001328:	2306      	movs	r3, #6
 800132a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800132c:	2302      	movs	r3, #2
 800132e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001330:	2302      	movs	r3, #2
 8001332:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001334:	f107 0318 	add.w	r3, r7, #24
 8001338:	4618      	mov	r0, r3
 800133a:	f006 fea1 	bl	8008080 <HAL_RCC_OscConfig>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001344:	f000 ff5c 	bl	8002200 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001348:	230f      	movs	r3, #15
 800134a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800134c:	2303      	movs	r3, #3
 800134e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001354:	2300      	movs	r3, #0
 8001356:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	2104      	movs	r1, #4
 8001360:	4618      	mov	r0, r3
 8001362:	f007 f99f 	bl	80086a4 <HAL_RCC_ClockConfig>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800136c:	f000 ff48 	bl	8002200 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001370:	f007 fb6e 	bl	8008a50 <HAL_RCC_EnableCSS>
}
 8001374:	bf00      	nop
 8001376:	3750      	adds	r7, #80	@ 0x50
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001382:	463b      	mov	r3, r7
 8001384:	2220      	movs	r2, #32
 8001386:	2100      	movs	r1, #0
 8001388:	4618      	mov	r0, r3
 800138a:	f00f fed0 	bl	801112e <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 800138e:	4b2b      	ldr	r3, [pc, #172]	@ (800143c <MX_ADC5_Init+0xc0>)
 8001390:	4a2b      	ldr	r2, [pc, #172]	@ (8001440 <MX_ADC5_Init+0xc4>)
 8001392:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001394:	4b29      	ldr	r3, [pc, #164]	@ (800143c <MX_ADC5_Init+0xc0>)
 8001396:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800139a:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 800139c:	4b27      	ldr	r3, [pc, #156]	@ (800143c <MX_ADC5_Init+0xc0>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013a2:	4b26      	ldr	r3, [pc, #152]	@ (800143c <MX_ADC5_Init+0xc0>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 80013a8:	4b24      	ldr	r3, [pc, #144]	@ (800143c <MX_ADC5_Init+0xc0>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013ae:	4b23      	ldr	r3, [pc, #140]	@ (800143c <MX_ADC5_Init+0xc0>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013b4:	4b21      	ldr	r3, [pc, #132]	@ (800143c <MX_ADC5_Init+0xc0>)
 80013b6:	2204      	movs	r2, #4
 80013b8:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80013ba:	4b20      	ldr	r3, [pc, #128]	@ (800143c <MX_ADC5_Init+0xc0>)
 80013bc:	2200      	movs	r2, #0
 80013be:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 80013c0:	4b1e      	ldr	r3, [pc, #120]	@ (800143c <MX_ADC5_Init+0xc0>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 80013c6:	4b1d      	ldr	r3, [pc, #116]	@ (800143c <MX_ADC5_Init+0xc0>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 80013cc:	4b1b      	ldr	r3, [pc, #108]	@ (800143c <MX_ADC5_Init+0xc0>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013d4:	4b19      	ldr	r3, [pc, #100]	@ (800143c <MX_ADC5_Init+0xc0>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013da:	4b18      	ldr	r3, [pc, #96]	@ (800143c <MX_ADC5_Init+0xc0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 80013e0:	4b16      	ldr	r3, [pc, #88]	@ (800143c <MX_ADC5_Init+0xc0>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013e8:	4b14      	ldr	r3, [pc, #80]	@ (800143c <MX_ADC5_Init+0xc0>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 80013ee:	4b13      	ldr	r3, [pc, #76]	@ (800143c <MX_ADC5_Init+0xc0>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 80013f6:	4811      	ldr	r0, [pc, #68]	@ (800143c <MX_ADC5_Init+0xc0>)
 80013f8:	f002 fad0 	bl	800399c <HAL_ADC_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8001402:	f000 fefd 	bl	8002200 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001406:	4b0f      	ldr	r3, [pc, #60]	@ (8001444 <MX_ADC5_Init+0xc8>)
 8001408:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800140a:	2306      	movs	r3, #6
 800140c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001412:	237f      	movs	r3, #127	@ 0x7f
 8001414:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001416:	2304      	movs	r3, #4
 8001418:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 800141e:	463b      	mov	r3, r7
 8001420:	4619      	mov	r1, r3
 8001422:	4806      	ldr	r0, [pc, #24]	@ (800143c <MX_ADC5_Init+0xc0>)
 8001424:	f002 fc76 	bl	8003d14 <HAL_ADC_ConfigChannel>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 800142e:	f000 fee7 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8001432:	bf00      	nop
 8001434:	3720      	adds	r7, #32
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000378 	.word	0x20000378
 8001440:	50000600 	.word	0x50000600
 8001444:	08600004 	.word	0x08600004

08001448 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 800144c:	4b0f      	ldr	r3, [pc, #60]	@ (800148c <MX_COMP2_Init+0x44>)
 800144e:	4a10      	ldr	r2, [pc, #64]	@ (8001490 <MX_COMP2_Init+0x48>)
 8001450:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001452:	4b0e      	ldr	r3, [pc, #56]	@ (800148c <MX_COMP2_Init+0x44>)
 8001454:	2200      	movs	r2, #0
 8001456:	605a      	str	r2, [r3, #4]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 8001458:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <MX_COMP2_Init+0x44>)
 800145a:	2250      	movs	r2, #80	@ 0x50
 800145c:	609a      	str	r2, [r3, #8]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800145e:	4b0b      	ldr	r3, [pc, #44]	@ (800148c <MX_COMP2_Init+0x44>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001464:	4b09      	ldr	r3, [pc, #36]	@ (800148c <MX_COMP2_Init+0x44>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800146a:	4b08      	ldr	r3, [pc, #32]	@ (800148c <MX_COMP2_Init+0x44>)
 800146c:	2200      	movs	r2, #0
 800146e:	615a      	str	r2, [r3, #20]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001470:	4b06      	ldr	r3, [pc, #24]	@ (800148c <MX_COMP2_Init+0x44>)
 8001472:	2200      	movs	r2, #0
 8001474:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8001476:	4805      	ldr	r0, [pc, #20]	@ (800148c <MX_COMP2_Init+0x44>)
 8001478:	f003 f9dc 	bl	8004834 <HAL_COMP_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_COMP2_Init+0x3e>
  {
    Error_Handler();
 8001482:	f000 febd 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	200003e4 	.word	0x200003e4
 8001490:	40010204 	.word	0x40010204

08001494 <MX_COMP5_Init>:
  * @brief COMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP5_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END COMP5_Init 0 */

  /* USER CODE BEGIN COMP5_Init 1 */

  /* USER CODE END COMP5_Init 1 */
  hcomp5.Instance = COMP5;
 8001498:	4b0f      	ldr	r3, [pc, #60]	@ (80014d8 <MX_COMP5_Init+0x44>)
 800149a:	4a10      	ldr	r2, [pc, #64]	@ (80014dc <MX_COMP5_Init+0x48>)
 800149c:	601a      	str	r2, [r3, #0]
  hcomp5.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800149e:	4b0e      	ldr	r3, [pc, #56]	@ (80014d8 <MX_COMP5_Init+0x44>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	605a      	str	r2, [r3, #4]
  hcomp5.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 80014a4:	4b0c      	ldr	r3, [pc, #48]	@ (80014d8 <MX_COMP5_Init+0x44>)
 80014a6:	2250      	movs	r2, #80	@ 0x50
 80014a8:	609a      	str	r2, [r3, #8]
  hcomp5.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80014aa:	4b0b      	ldr	r3, [pc, #44]	@ (80014d8 <MX_COMP5_Init+0x44>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  hcomp5.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80014b0:	4b09      	ldr	r3, [pc, #36]	@ (80014d8 <MX_COMP5_Init+0x44>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	60da      	str	r2, [r3, #12]
  hcomp5.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80014b6:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <MX_COMP5_Init+0x44>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	615a      	str	r2, [r3, #20]
  hcomp5.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80014bc:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <MX_COMP5_Init+0x44>)
 80014be:	2200      	movs	r2, #0
 80014c0:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp5) != HAL_OK)
 80014c2:	4805      	ldr	r0, [pc, #20]	@ (80014d8 <MX_COMP5_Init+0x44>)
 80014c4:	f003 f9b6 	bl	8004834 <HAL_COMP_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_COMP5_Init+0x3e>
  {
    Error_Handler();
 80014ce:	f000 fe97 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN COMP5_Init 2 */

  /* USER CODE END COMP5_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000408 	.word	0x20000408
 80014dc:	40010210 	.word	0x40010210

080014e0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08c      	sub	sp, #48	@ 0x30
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80014e6:	463b      	mov	r3, r7
 80014e8:	2230      	movs	r2, #48	@ 0x30
 80014ea:	2100      	movs	r1, #0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f00f fe1e 	bl	801112e <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80014f2:	4b1e      	ldr	r3, [pc, #120]	@ (800156c <MX_DAC1_Init+0x8c>)
 80014f4:	4a1e      	ldr	r2, [pc, #120]	@ (8001570 <MX_DAC1_Init+0x90>)
 80014f6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80014f8:	481c      	ldr	r0, [pc, #112]	@ (800156c <MX_DAC1_Init+0x8c>)
 80014fa:	f003 fc44 	bl	8004d86 <HAL_DAC_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001504:	f000 fe7c 	bl	8002200 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001508:	2302      	movs	r3, #2
 800150a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001510:	2300      	movs	r3, #0
 8001512:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001518:	2302      	movs	r3, #2
 800151a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800151c:	2300      	movs	r3, #0
 800151e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 8001524:	2304      	movs	r3, #4
 8001526:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001528:	2300      	movs	r3, #0
 800152a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800152c:	463b      	mov	r3, r7
 800152e:	2200      	movs	r2, #0
 8001530:	4619      	mov	r1, r3
 8001532:	480e      	ldr	r0, [pc, #56]	@ (800156c <MX_DAC1_Init+0x8c>)
 8001534:	f003 fc4a 	bl	8004dcc <HAL_DAC_ConfigChannel>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800153e:	f000 fe5f 	bl	8002200 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001546:	2302      	movs	r3, #2
 8001548:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 800154a:	2302      	movs	r3, #2
 800154c:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800154e:	463b      	mov	r3, r7
 8001550:	2210      	movs	r2, #16
 8001552:	4619      	mov	r1, r3
 8001554:	4805      	ldr	r0, [pc, #20]	@ (800156c <MX_DAC1_Init+0x8c>)
 8001556:	f003 fc39 	bl	8004dcc <HAL_DAC_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_DAC1_Init+0x84>
  {
    Error_Handler();
 8001560:	f000 fe4e 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	3730      	adds	r7, #48	@ 0x30
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	2000042c 	.word	0x2000042c
 8001570:	50000800 	.word	0x50000800

08001574 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08c      	sub	sp, #48	@ 0x30
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800157a:	463b      	mov	r3, r7
 800157c:	2230      	movs	r2, #48	@ 0x30
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f00f fdd4 	bl	801112e <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8001586:	4b16      	ldr	r3, [pc, #88]	@ (80015e0 <MX_DAC2_Init+0x6c>)
 8001588:	4a16      	ldr	r2, [pc, #88]	@ (80015e4 <MX_DAC2_Init+0x70>)
 800158a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 800158c:	4814      	ldr	r0, [pc, #80]	@ (80015e0 <MX_DAC2_Init+0x6c>)
 800158e:	f003 fbfa 	bl	8004d86 <HAL_DAC_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8001598:	f000 fe32 	bl	8002200 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800159c:	2302      	movs	r3, #2
 800159e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 80015ac:	2302      	movs	r3, #2
 80015ae:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 80015b8:	2304      	movs	r3, #4
 80015ba:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015c0:	463b      	mov	r3, r7
 80015c2:	2200      	movs	r2, #0
 80015c4:	4619      	mov	r1, r3
 80015c6:	4806      	ldr	r0, [pc, #24]	@ (80015e0 <MX_DAC2_Init+0x6c>)
 80015c8:	f003 fc00 	bl	8004dcc <HAL_DAC_ConfigChannel>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 80015d2:	f000 fe15 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 80015d6:	bf00      	nop
 80015d8:	3730      	adds	r7, #48	@ 0x30
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000440 	.word	0x20000440
 80015e4:	50000c00 	.word	0x50000c00

080015e8 <MX_DAC4_Init>:
  * @brief DAC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC4_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08c      	sub	sp, #48	@ 0x30
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC4_Init 0 */

  /* USER CODE END DAC4_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015ee:	463b      	mov	r3, r7
 80015f0:	2230      	movs	r2, #48	@ 0x30
 80015f2:	2100      	movs	r1, #0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f00f fd9a 	bl	801112e <memset>

  /* USER CODE END DAC4_Init 1 */

  /** DAC Initialization
  */
  hdac4.Instance = DAC4;
 80015fa:	4b16      	ldr	r3, [pc, #88]	@ (8001654 <MX_DAC4_Init+0x6c>)
 80015fc:	4a16      	ldr	r2, [pc, #88]	@ (8001658 <MX_DAC4_Init+0x70>)
 80015fe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac4) != HAL_OK)
 8001600:	4814      	ldr	r0, [pc, #80]	@ (8001654 <MX_DAC4_Init+0x6c>)
 8001602:	f003 fbc0 	bl	8004d86 <HAL_DAC_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_DAC4_Init+0x28>
  {
    Error_Handler();
 800160c:	f000 fdf8 	bl	8002200 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001610:	2302      	movs	r3, #2
 8001612:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001618:	2300      	movs	r3, #0
 800161a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001620:	2302      	movs	r3, #2
 8001622:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001624:	2300      	movs	r3, #0
 8001626:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001628:	2302      	movs	r3, #2
 800162a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 800162c:	2302      	movs	r3, #2
 800162e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac4, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001634:	463b      	mov	r3, r7
 8001636:	2200      	movs	r2, #0
 8001638:	4619      	mov	r1, r3
 800163a:	4806      	ldr	r0, [pc, #24]	@ (8001654 <MX_DAC4_Init+0x6c>)
 800163c:	f003 fbc6 	bl	8004dcc <HAL_DAC_ConfigChannel>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_DAC4_Init+0x62>
  {
    Error_Handler();
 8001646:	f000 fddb 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN DAC4_Init 2 */

  /* USER CODE END DAC4_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	3730      	adds	r7, #48	@ 0x30
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000454 	.word	0x20000454
 8001658:	50001400 	.word	0x50001400

0800165c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001660:	4b1b      	ldr	r3, [pc, #108]	@ (80016d0 <MX_I2C3_Init+0x74>)
 8001662:	4a1c      	ldr	r2, [pc, #112]	@ (80016d4 <MX_I2C3_Init+0x78>)
 8001664:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30D293D6;
 8001666:	4b1a      	ldr	r3, [pc, #104]	@ (80016d0 <MX_I2C3_Init+0x74>)
 8001668:	4a1b      	ldr	r2, [pc, #108]	@ (80016d8 <MX_I2C3_Init+0x7c>)
 800166a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800166c:	4b18      	ldr	r3, [pc, #96]	@ (80016d0 <MX_I2C3_Init+0x74>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001672:	4b17      	ldr	r3, [pc, #92]	@ (80016d0 <MX_I2C3_Init+0x74>)
 8001674:	2201      	movs	r2, #1
 8001676:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001678:	4b15      	ldr	r3, [pc, #84]	@ (80016d0 <MX_I2C3_Init+0x74>)
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800167e:	4b14      	ldr	r3, [pc, #80]	@ (80016d0 <MX_I2C3_Init+0x74>)
 8001680:	2200      	movs	r2, #0
 8001682:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001684:	4b12      	ldr	r3, [pc, #72]	@ (80016d0 <MX_I2C3_Init+0x74>)
 8001686:	2200      	movs	r2, #0
 8001688:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800168a:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <MX_I2C3_Init+0x74>)
 800168c:	2200      	movs	r2, #0
 800168e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001690:	4b0f      	ldr	r3, [pc, #60]	@ (80016d0 <MX_I2C3_Init+0x74>)
 8001692:	2200      	movs	r2, #0
 8001694:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001696:	480e      	ldr	r0, [pc, #56]	@ (80016d0 <MX_I2C3_Init+0x74>)
 8001698:	f004 f981 	bl	800599e <HAL_I2C_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80016a2:	f000 fdad 	bl	8002200 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016a6:	2100      	movs	r1, #0
 80016a8:	4809      	ldr	r0, [pc, #36]	@ (80016d0 <MX_I2C3_Init+0x74>)
 80016aa:	f004 fd9b 	bl	80061e4 <HAL_I2CEx_ConfigAnalogFilter>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80016b4:	f000 fda4 	bl	8002200 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80016b8:	2100      	movs	r1, #0
 80016ba:	4805      	ldr	r0, [pc, #20]	@ (80016d0 <MX_I2C3_Init+0x74>)
 80016bc:	f004 fddd 	bl	800627a <HAL_I2CEx_ConfigDigitalFilter>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80016c6:	f000 fd9b 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000468 	.word	0x20000468
 80016d4:	40007800 	.word	0x40007800
 80016d8:	30d293d6 	.word	0x30d293d6

080016dc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80016e0:	4b21      	ldr	r3, [pc, #132]	@ (8001768 <MX_LPUART1_UART_Init+0x8c>)
 80016e2:	4a22      	ldr	r2, [pc, #136]	@ (800176c <MX_LPUART1_UART_Init+0x90>)
 80016e4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 921600;
 80016e6:	4b20      	ldr	r3, [pc, #128]	@ (8001768 <MX_LPUART1_UART_Init+0x8c>)
 80016e8:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80016ec:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001768 <MX_LPUART1_UART_Init+0x8c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80016f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001768 <MX_LPUART1_UART_Init+0x8c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80016fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001768 <MX_LPUART1_UART_Init+0x8c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001700:	4b19      	ldr	r3, [pc, #100]	@ (8001768 <MX_LPUART1_UART_Init+0x8c>)
 8001702:	220c      	movs	r2, #12
 8001704:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001706:	4b18      	ldr	r3, [pc, #96]	@ (8001768 <MX_LPUART1_UART_Init+0x8c>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800170c:	4b16      	ldr	r3, [pc, #88]	@ (8001768 <MX_LPUART1_UART_Init+0x8c>)
 800170e:	2200      	movs	r2, #0
 8001710:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001712:	4b15      	ldr	r3, [pc, #84]	@ (8001768 <MX_LPUART1_UART_Init+0x8c>)
 8001714:	2200      	movs	r2, #0
 8001716:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001718:	4b13      	ldr	r3, [pc, #76]	@ (8001768 <MX_LPUART1_UART_Init+0x8c>)
 800171a:	2200      	movs	r2, #0
 800171c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800171e:	4812      	ldr	r0, [pc, #72]	@ (8001768 <MX_LPUART1_UART_Init+0x8c>)
 8001720:	f009 ff78 	bl	800b614 <HAL_UART_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800172a:	f000 fd69 	bl	8002200 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800172e:	2100      	movs	r1, #0
 8001730:	480d      	ldr	r0, [pc, #52]	@ (8001768 <MX_LPUART1_UART_Init+0x8c>)
 8001732:	f00a fd13 	bl	800c15c <HAL_UARTEx_SetTxFifoThreshold>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800173c:	f000 fd60 	bl	8002200 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001740:	2100      	movs	r1, #0
 8001742:	4809      	ldr	r0, [pc, #36]	@ (8001768 <MX_LPUART1_UART_Init+0x8c>)
 8001744:	f00a fd48 	bl	800c1d8 <HAL_UARTEx_SetRxFifoThreshold>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800174e:	f000 fd57 	bl	8002200 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001752:	4805      	ldr	r0, [pc, #20]	@ (8001768 <MX_LPUART1_UART_Init+0x8c>)
 8001754:	f00a fcc9 	bl	800c0ea <HAL_UARTEx_DisableFifoMode>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800175e:	f000 fd4f 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200004bc 	.word	0x200004bc
 800176c:	40008000 	.word	0x40008000

08001770 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001774:	4b12      	ldr	r3, [pc, #72]	@ (80017c0 <MX_OPAMP1_Init+0x50>)
 8001776:	4a13      	ldr	r2, [pc, #76]	@ (80017c4 <MX_OPAMP1_Init+0x54>)
 8001778:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800177a:	4b11      	ldr	r3, [pc, #68]	@ (80017c0 <MX_OPAMP1_Init+0x50>)
 800177c:	2200      	movs	r2, #0
 800177e:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8001780:	4b0f      	ldr	r3, [pc, #60]	@ (80017c0 <MX_OPAMP1_Init+0x50>)
 8001782:	2240      	movs	r2, #64	@ 0x40
 8001784:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8001786:	4b0e      	ldr	r3, [pc, #56]	@ (80017c0 <MX_OPAMP1_Init+0x50>)
 8001788:	2208      	movs	r2, #8
 800178a:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 800178c:	4b0c      	ldr	r3, [pc, #48]	@ (80017c0 <MX_OPAMP1_Init+0x50>)
 800178e:	2201      	movs	r2, #1
 8001790:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001792:	4b0b      	ldr	r3, [pc, #44]	@ (80017c0 <MX_OPAMP1_Init+0x50>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8001798:	4b09      	ldr	r3, [pc, #36]	@ (80017c0 <MX_OPAMP1_Init+0x50>)
 800179a:	2200      	movs	r2, #0
 800179c:	625a      	str	r2, [r3, #36]	@ 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 800179e:	4b08      	ldr	r3, [pc, #32]	@ (80017c0 <MX_OPAMP1_Init+0x50>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80017a4:	4b06      	ldr	r3, [pc, #24]	@ (80017c0 <MX_OPAMP1_Init+0x50>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80017aa:	4805      	ldr	r0, [pc, #20]	@ (80017c0 <MX_OPAMP1_Init+0x50>)
 80017ac:	f004 fdb2 	bl	8006314 <HAL_OPAMP_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_OPAMP1_Init+0x4a>
  {
    Error_Handler();
 80017b6:	f000 fd23 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000550 	.word	0x20000550
 80017c4:	40010300 	.word	0x40010300

080017c8 <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	@ (800180c <MX_OPAMP2_Init+0x44>)
 80017ce:	4a10      	ldr	r2, [pc, #64]	@ (8001810 <MX_OPAMP2_Init+0x48>)
 80017d0:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	@ (800180c <MX_OPAMP2_Init+0x44>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_FOLLOWER_MODE;
 80017d8:	4b0c      	ldr	r3, [pc, #48]	@ (800180c <MX_OPAMP2_Init+0x44>)
 80017da:	2260      	movs	r2, #96	@ 0x60
 80017dc:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80017de:	4b0b      	ldr	r3, [pc, #44]	@ (800180c <MX_OPAMP2_Init+0x44>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = ENABLE;
 80017e4:	4b09      	ldr	r3, [pc, #36]	@ (800180c <MX_OPAMP2_Init+0x44>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80017ea:	4b08      	ldr	r3, [pc, #32]	@ (800180c <MX_OPAMP2_Init+0x44>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80017f0:	4b06      	ldr	r3, [pc, #24]	@ (800180c <MX_OPAMP2_Init+0x44>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 80017f6:	4805      	ldr	r0, [pc, #20]	@ (800180c <MX_OPAMP2_Init+0x44>)
 80017f8:	f004 fd8c 	bl	8006314 <HAL_OPAMP_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_OPAMP2_Init+0x3e>
  {
    Error_Handler();
 8001802:	f000 fcfd 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	2000058c 	.word	0x2000058c
 8001810:	40010304 	.word	0x40010304

08001814 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8001818:	4b0f      	ldr	r3, [pc, #60]	@ (8001858 <MX_OPAMP3_Init+0x44>)
 800181a:	4a10      	ldr	r2, [pc, #64]	@ (800185c <MX_OPAMP3_Init+0x48>)
 800181c:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800181e:	4b0e      	ldr	r3, [pc, #56]	@ (8001858 <MX_OPAMP3_Init+0x44>)
 8001820:	2200      	movs	r2, #0
 8001822:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001824:	4b0c      	ldr	r3, [pc, #48]	@ (8001858 <MX_OPAMP3_Init+0x44>)
 8001826:	2260      	movs	r2, #96	@ 0x60
 8001828:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO1;
 800182a:	4b0b      	ldr	r3, [pc, #44]	@ (8001858 <MX_OPAMP3_Init+0x44>)
 800182c:	2204      	movs	r2, #4
 800182e:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8001830:	4b09      	ldr	r3, [pc, #36]	@ (8001858 <MX_OPAMP3_Init+0x44>)
 8001832:	2201      	movs	r2, #1
 8001834:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001836:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <MX_OPAMP3_Init+0x44>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800183c:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <MX_OPAMP3_Init+0x44>)
 800183e:	2200      	movs	r2, #0
 8001840:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8001842:	4805      	ldr	r0, [pc, #20]	@ (8001858 <MX_OPAMP3_Init+0x44>)
 8001844:	f004 fd66 	bl	8006314 <HAL_OPAMP_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 800184e:	f000 fcd7 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200005c8 	.word	0x200005c8
 800185c:	40010308 	.word	0x40010308

08001860 <MX_OPAMP4_Init>:
  * @brief OPAMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP4_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP4_Init 0 */

  /* USER CODE BEGIN OPAMP4_Init 1 */

  /* USER CODE END OPAMP4_Init 1 */
  hopamp4.Instance = OPAMP4;
 8001864:	4b0f      	ldr	r3, [pc, #60]	@ (80018a4 <MX_OPAMP4_Init+0x44>)
 8001866:	4a10      	ldr	r2, [pc, #64]	@ (80018a8 <MX_OPAMP4_Init+0x48>)
 8001868:	601a      	str	r2, [r3, #0]
  hopamp4.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 800186a:	4b0e      	ldr	r3, [pc, #56]	@ (80018a4 <MX_OPAMP4_Init+0x44>)
 800186c:	2280      	movs	r2, #128	@ 0x80
 800186e:	605a      	str	r2, [r3, #4]
  hopamp4.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001870:	4b0c      	ldr	r3, [pc, #48]	@ (80018a4 <MX_OPAMP4_Init+0x44>)
 8001872:	2260      	movs	r2, #96	@ 0x60
 8001874:	609a      	str	r2, [r3, #8]
  hopamp4.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8001876:	4b0b      	ldr	r3, [pc, #44]	@ (80018a4 <MX_OPAMP4_Init+0x44>)
 8001878:	220c      	movs	r2, #12
 800187a:	611a      	str	r2, [r3, #16]
  hopamp4.Init.InternalOutput = DISABLE;
 800187c:	4b09      	ldr	r3, [pc, #36]	@ (80018a4 <MX_OPAMP4_Init+0x44>)
 800187e:	2200      	movs	r2, #0
 8001880:	751a      	strb	r2, [r3, #20]
  hopamp4.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001882:	4b08      	ldr	r3, [pc, #32]	@ (80018a4 <MX_OPAMP4_Init+0x44>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
  hopamp4.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001888:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <MX_OPAMP4_Init+0x44>)
 800188a:	2200      	movs	r2, #0
 800188c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp4) != HAL_OK)
 800188e:	4805      	ldr	r0, [pc, #20]	@ (80018a4 <MX_OPAMP4_Init+0x44>)
 8001890:	f004 fd40 	bl	8006314 <HAL_OPAMP_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_OPAMP4_Init+0x3e>
  {
    Error_Handler();
 800189a:	f000 fcb1 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP4_Init 2 */

  /* USER CODE END OPAMP4_Init 2 */

}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000604 	.word	0x20000604
 80018a8:	4001030c 	.word	0x4001030c

080018ac <MX_OPAMP5_Init>:
  * @brief OPAMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP5_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP5_Init 0 */

  /* USER CODE BEGIN OPAMP5_Init 1 */

  /* USER CODE END OPAMP5_Init 1 */
  hopamp5.Instance = OPAMP5;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	@ (80018f0 <MX_OPAMP5_Init+0x44>)
 80018b2:	4a10      	ldr	r2, [pc, #64]	@ (80018f4 <MX_OPAMP5_Init+0x48>)
 80018b4:	601a      	str	r2, [r3, #0]
  hopamp5.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	@ (80018f0 <MX_OPAMP5_Init+0x44>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	605a      	str	r2, [r3, #4]
  hopamp5.Init.Mode = OPAMP_FOLLOWER_MODE;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <MX_OPAMP5_Init+0x44>)
 80018be:	2260      	movs	r2, #96	@ 0x60
 80018c0:	609a      	str	r2, [r3, #8]
  hopamp5.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	@ (80018f0 <MX_OPAMP5_Init+0x44>)
 80018c4:	2208      	movs	r2, #8
 80018c6:	611a      	str	r2, [r3, #16]
  hopamp5.Init.InternalOutput = ENABLE;
 80018c8:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <MX_OPAMP5_Init+0x44>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	751a      	strb	r2, [r3, #20]
  hopamp5.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80018ce:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <MX_OPAMP5_Init+0x44>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]
  hopamp5.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80018d4:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <MX_OPAMP5_Init+0x44>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp5) != HAL_OK)
 80018da:	4805      	ldr	r0, [pc, #20]	@ (80018f0 <MX_OPAMP5_Init+0x44>)
 80018dc:	f004 fd1a 	bl	8006314 <HAL_OPAMP_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_OPAMP5_Init+0x3e>
  {
    Error_Handler();
 80018e6:	f000 fc8b 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP5_Init 2 */

  /* USER CODE END OPAMP5_Init 2 */

}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000640 	.word	0x20000640
 80018f4:	40010310 	.word	0x40010310

080018f8 <MX_OPAMP6_Init>:
  * @brief OPAMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP6_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 80018fc:	4b12      	ldr	r3, [pc, #72]	@ (8001948 <MX_OPAMP6_Init+0x50>)
 80018fe:	4a13      	ldr	r2, [pc, #76]	@ (800194c <MX_OPAMP6_Init+0x54>)
 8001900:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001902:	4b11      	ldr	r3, [pc, #68]	@ (8001948 <MX_OPAMP6_Init+0x50>)
 8001904:	2200      	movs	r2, #0
 8001906:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_PGA_MODE;
 8001908:	4b0f      	ldr	r3, [pc, #60]	@ (8001948 <MX_OPAMP6_Init+0x50>)
 800190a:	2240      	movs	r2, #64	@ 0x40
 800190c:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 800190e:	4b0e      	ldr	r3, [pc, #56]	@ (8001948 <MX_OPAMP6_Init+0x50>)
 8001910:	2208      	movs	r2, #8
 8001912:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = ENABLE;
 8001914:	4b0c      	ldr	r3, [pc, #48]	@ (8001948 <MX_OPAMP6_Init+0x50>)
 8001916:	2201      	movs	r2, #1
 8001918:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800191a:	4b0b      	ldr	r3, [pc, #44]	@ (8001948 <MX_OPAMP6_Init+0x50>)
 800191c:	2200      	movs	r2, #0
 800191e:	619a      	str	r2, [r3, #24]
  hopamp6.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8001920:	4b09      	ldr	r3, [pc, #36]	@ (8001948 <MX_OPAMP6_Init+0x50>)
 8001922:	2200      	movs	r2, #0
 8001924:	625a      	str	r2, [r3, #36]	@ 0x24
  hopamp6.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8001926:	4b08      	ldr	r3, [pc, #32]	@ (8001948 <MX_OPAMP6_Init+0x50>)
 8001928:	2200      	movs	r2, #0
 800192a:	629a      	str	r2, [r3, #40]	@ 0x28
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800192c:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <MX_OPAMP6_Init+0x50>)
 800192e:	2200      	movs	r2, #0
 8001930:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 8001932:	4805      	ldr	r0, [pc, #20]	@ (8001948 <MX_OPAMP6_Init+0x50>)
 8001934:	f004 fcee 	bl	8006314 <HAL_OPAMP_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_OPAMP6_Init+0x4a>
  {
    Error_Handler();
 800193e:	f000 fc5f 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	2000067c 	.word	0x2000067c
 800194c:	40010314 	.word	0x40010314

08001950 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001954:	4b1b      	ldr	r3, [pc, #108]	@ (80019c4 <MX_SPI3_Init+0x74>)
 8001956:	4a1c      	ldr	r2, [pc, #112]	@ (80019c8 <MX_SPI3_Init+0x78>)
 8001958:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800195a:	4b1a      	ldr	r3, [pc, #104]	@ (80019c4 <MX_SPI3_Init+0x74>)
 800195c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001960:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8001962:	4b18      	ldr	r3, [pc, #96]	@ (80019c4 <MX_SPI3_Init+0x74>)
 8001964:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001968:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800196a:	4b16      	ldr	r3, [pc, #88]	@ (80019c4 <MX_SPI3_Init+0x74>)
 800196c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001970:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001972:	4b14      	ldr	r3, [pc, #80]	@ (80019c4 <MX_SPI3_Init+0x74>)
 8001974:	2202      	movs	r2, #2
 8001976:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001978:	4b12      	ldr	r3, [pc, #72]	@ (80019c4 <MX_SPI3_Init+0x74>)
 800197a:	2200      	movs	r2, #0
 800197c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800197e:	4b11      	ldr	r3, [pc, #68]	@ (80019c4 <MX_SPI3_Init+0x74>)
 8001980:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001984:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001986:	4b0f      	ldr	r3, [pc, #60]	@ (80019c4 <MX_SPI3_Init+0x74>)
 8001988:	2210      	movs	r2, #16
 800198a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800198c:	4b0d      	ldr	r3, [pc, #52]	@ (80019c4 <MX_SPI3_Init+0x74>)
 800198e:	2200      	movs	r2, #0
 8001990:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001992:	4b0c      	ldr	r3, [pc, #48]	@ (80019c4 <MX_SPI3_Init+0x74>)
 8001994:	2200      	movs	r2, #0
 8001996:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001998:	4b0a      	ldr	r3, [pc, #40]	@ (80019c4 <MX_SPI3_Init+0x74>)
 800199a:	2200      	movs	r2, #0
 800199c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800199e:	4b09      	ldr	r3, [pc, #36]	@ (80019c4 <MX_SPI3_Init+0x74>)
 80019a0:	2207      	movs	r2, #7
 80019a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019a4:	4b07      	ldr	r3, [pc, #28]	@ (80019c4 <MX_SPI3_Init+0x74>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019aa:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <MX_SPI3_Init+0x74>)
 80019ac:	2208      	movs	r2, #8
 80019ae:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80019b0:	4804      	ldr	r0, [pc, #16]	@ (80019c4 <MX_SPI3_Init+0x74>)
 80019b2:	f007 fb0d 	bl	8008fd0 <HAL_SPI_Init>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_SPI3_Init+0x70>
  {
    Error_Handler();
 80019bc:	f000 fc20 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	200006b8 	.word	0x200006b8
 80019c8:	40003c00 	.word	0x40003c00

080019cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08c      	sub	sp, #48	@ 0x30
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019d2:	f107 030c 	add.w	r3, r7, #12
 80019d6:	2224      	movs	r2, #36	@ 0x24
 80019d8:	2100      	movs	r1, #0
 80019da:	4618      	mov	r0, r3
 80019dc:	f00f fba7 	bl	801112e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e0:	463b      	mov	r3, r7
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019ea:	4b23      	ldr	r3, [pc, #140]	@ (8001a78 <MX_TIM1_Init+0xac>)
 80019ec:	4a23      	ldr	r2, [pc, #140]	@ (8001a7c <MX_TIM1_Init+0xb0>)
 80019ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019f0:	4b21      	ldr	r3, [pc, #132]	@ (8001a78 <MX_TIM1_Init+0xac>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f6:	4b20      	ldr	r3, [pc, #128]	@ (8001a78 <MX_TIM1_Init+0xac>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80019fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001a78 <MX_TIM1_Init+0xac>)
 80019fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a02:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a04:	4b1c      	ldr	r3, [pc, #112]	@ (8001a78 <MX_TIM1_Init+0xac>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a0a:	4b1b      	ldr	r3, [pc, #108]	@ (8001a78 <MX_TIM1_Init+0xac>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a10:	4b19      	ldr	r3, [pc, #100]	@ (8001a78 <MX_TIM1_Init+0xac>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001a16:	2301      	movs	r3, #1
 8001a18:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001a26:	230f      	movs	r3, #15
 8001a28:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a32:	2300      	movs	r3, #0
 8001a34:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001a36:	230f      	movs	r3, #15
 8001a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001a3a:	f107 030c 	add.w	r3, r7, #12
 8001a3e:	4619      	mov	r1, r3
 8001a40:	480d      	ldr	r0, [pc, #52]	@ (8001a78 <MX_TIM1_Init+0xac>)
 8001a42:	f008 fbcf 	bl	800a1e4 <HAL_TIM_Encoder_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001a4c:	f000 fbd8 	bl	8002200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a50:	2300      	movs	r3, #0
 8001a52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a54:	2300      	movs	r3, #0
 8001a56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a5c:	463b      	mov	r3, r7
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4805      	ldr	r0, [pc, #20]	@ (8001a78 <MX_TIM1_Init+0xac>)
 8001a62:	f009 fcad 	bl	800b3c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001a6c:	f000 fbc8 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a70:	bf00      	nop
 8001a72:	3730      	adds	r7, #48	@ 0x30
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	2000077c 	.word	0x2000077c
 8001a7c:	40012c00 	.word	0x40012c00

08001a80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08c      	sub	sp, #48	@ 0x30
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a86:	f107 030c 	add.w	r3, r7, #12
 8001a8a:	2224      	movs	r2, #36	@ 0x24
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f00f fb4d 	bl	801112e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a94:	463b      	mov	r3, r7
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a9e:	4b21      	ldr	r3, [pc, #132]	@ (8001b24 <MX_TIM3_Init+0xa4>)
 8001aa0:	4a21      	ldr	r2, [pc, #132]	@ (8001b28 <MX_TIM3_Init+0xa8>)
 8001aa2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b24 <MX_TIM3_Init+0xa4>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8001b24 <MX_TIM3_Init+0xa4>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ab0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b24 <MX_TIM3_Init+0xa4>)
 8001ab2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ab6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b24 <MX_TIM3_Init+0xa4>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001abe:	4b19      	ldr	r3, [pc, #100]	@ (8001b24 <MX_TIM3_Init+0xa4>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001acc:	2301      	movs	r3, #1
 8001ace:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001ad4:	230f      	movs	r3, #15
 8001ad6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001adc:	2301      	movs	r3, #1
 8001ade:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001ae4:	230f      	movs	r3, #15
 8001ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	4619      	mov	r1, r3
 8001aee:	480d      	ldr	r0, [pc, #52]	@ (8001b24 <MX_TIM3_Init+0xa4>)
 8001af0:	f008 fb78 	bl	800a1e4 <HAL_TIM_Encoder_Init>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001afa:	f000 fb81 	bl	8002200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001afe:	2300      	movs	r3, #0
 8001b00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b06:	463b      	mov	r3, r7
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4806      	ldr	r0, [pc, #24]	@ (8001b24 <MX_TIM3_Init+0xa4>)
 8001b0c:	f009 fc58 	bl	800b3c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001b16:	f000 fb73 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b1a:	bf00      	nop
 8001b1c:	3730      	adds	r7, #48	@ 0x30
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200007c8 	.word	0x200007c8
 8001b28:	40000400 	.word	0x40000400

08001b2c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08c      	sub	sp, #48	@ 0x30
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b32:	f107 030c 	add.w	r3, r7, #12
 8001b36:	2224      	movs	r2, #36	@ 0x24
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f00f faf7 	bl	801112e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b40:	463b      	mov	r3, r7
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b4a:	4b21      	ldr	r3, [pc, #132]	@ (8001bd0 <MX_TIM4_Init+0xa4>)
 8001b4c:	4a21      	ldr	r2, [pc, #132]	@ (8001bd4 <MX_TIM4_Init+0xa8>)
 8001b4e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001b50:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd0 <MX_TIM4_Init+0xa4>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b56:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd0 <MX_TIM4_Init+0xa4>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001b5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd0 <MX_TIM4_Init+0xa4>)
 8001b5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b62:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b64:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd0 <MX_TIM4_Init+0xa4>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6a:	4b19      	ldr	r3, [pc, #100]	@ (8001bd0 <MX_TIM4_Init+0xa4>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b70:	2301      	movs	r3, #1
 8001b72:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b74:	2300      	movs	r3, #0
 8001b76:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001b80:	230f      	movs	r3, #15
 8001b82:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b84:	2300      	movs	r3, #0
 8001b86:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001b90:	230f      	movs	r3, #15
 8001b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001b94:	f107 030c 	add.w	r3, r7, #12
 8001b98:	4619      	mov	r1, r3
 8001b9a:	480d      	ldr	r0, [pc, #52]	@ (8001bd0 <MX_TIM4_Init+0xa4>)
 8001b9c:	f008 fb22 	bl	800a1e4 <HAL_TIM_Encoder_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001ba6:	f000 fb2b 	bl	8002200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001baa:	2300      	movs	r3, #0
 8001bac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bb2:	463b      	mov	r3, r7
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4806      	ldr	r0, [pc, #24]	@ (8001bd0 <MX_TIM4_Init+0xa4>)
 8001bb8:	f009 fc02 	bl	800b3c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001bc2:	f000 fb1d 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001bc6:	bf00      	nop
 8001bc8:	3730      	adds	r7, #48	@ 0x30
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000814 	.word	0x20000814
 8001bd4:	40000800 	.word	0x40000800

08001bd8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b09c      	sub	sp, #112	@ 0x70
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bde:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bf8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
 8001c08:	615a      	str	r2, [r3, #20]
 8001c0a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c0c:	1d3b      	adds	r3, r7, #4
 8001c0e:	2234      	movs	r2, #52	@ 0x34
 8001c10:	2100      	movs	r1, #0
 8001c12:	4618      	mov	r0, r3
 8001c14:	f00f fa8b 	bl	801112e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001c18:	4b4e      	ldr	r3, [pc, #312]	@ (8001d54 <MX_TIM8_Init+0x17c>)
 8001c1a:	4a4f      	ldr	r2, [pc, #316]	@ (8001d58 <MX_TIM8_Init+0x180>)
 8001c1c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001c1e:	4b4d      	ldr	r3, [pc, #308]	@ (8001d54 <MX_TIM8_Init+0x17c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c24:	4b4b      	ldr	r3, [pc, #300]	@ (8001d54 <MX_TIM8_Init+0x17c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 179;
 8001c2a:	4b4a      	ldr	r3, [pc, #296]	@ (8001d54 <MX_TIM8_Init+0x17c>)
 8001c2c:	22b3      	movs	r2, #179	@ 0xb3
 8001c2e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c30:	4b48      	ldr	r3, [pc, #288]	@ (8001d54 <MX_TIM8_Init+0x17c>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001c36:	4b47      	ldr	r3, [pc, #284]	@ (8001d54 <MX_TIM8_Init+0x17c>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c3c:	4b45      	ldr	r3, [pc, #276]	@ (8001d54 <MX_TIM8_Init+0x17c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001c42:	4844      	ldr	r0, [pc, #272]	@ (8001d54 <MX_TIM8_Init+0x17c>)
 8001c44:	f007 fed8 	bl	80099f8 <HAL_TIM_Base_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001c4e:	f000 fad7 	bl	8002200 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c56:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001c58:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	483d      	ldr	r0, [pc, #244]	@ (8001d54 <MX_TIM8_Init+0x17c>)
 8001c60:	f008 fd08 	bl	800a674 <HAL_TIM_ConfigClockSource>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001c6a:	f000 fac9 	bl	8002200 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001c6e:	4839      	ldr	r0, [pc, #228]	@ (8001d54 <MX_TIM8_Init+0x17c>)
 8001c70:	f007 ff19 	bl	8009aa6 <HAL_TIM_PWM_Init>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001c7a:	f000 fac1 	bl	8002200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c82:	2300      	movs	r3, #0
 8001c84:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001c8a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4830      	ldr	r0, [pc, #192]	@ (8001d54 <MX_TIM8_Init+0x17c>)
 8001c92:	f009 fb95 	bl	800b3c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8001c9c:	f000 fab0 	bl	8002200 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001ca0:	2370      	movs	r3, #112	@ 0x70
 8001ca2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 90;
 8001ca4:	235a      	movs	r3, #90	@ 0x5a
 8001ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cac:	2300      	movs	r3, #0
 8001cae:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cbc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4823      	ldr	r0, [pc, #140]	@ (8001d54 <MX_TIM8_Init+0x17c>)
 8001cc6:	f008 fbc1 	bl	800a44c <HAL_TIM_PWM_ConfigChannel>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 8001cd0:	f000 fa96 	bl	8002200 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cd4:	2360      	movs	r3, #96	@ 0x60
 8001cd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8001cdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ce0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ce2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ce6:	2208      	movs	r2, #8
 8001ce8:	4619      	mov	r1, r3
 8001cea:	481a      	ldr	r0, [pc, #104]	@ (8001d54 <MX_TIM8_Init+0x17c>)
 8001cec:	f008 fbae 	bl	800a44c <HAL_TIM_PWM_ConfigChannel>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM8_Init+0x122>
  {
    Error_Handler();
 8001cf6:	f000 fa83 	bl	8002200 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d12:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d20:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d24:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001d32:	1d3b      	adds	r3, r7, #4
 8001d34:	4619      	mov	r1, r3
 8001d36:	4807      	ldr	r0, [pc, #28]	@ (8001d54 <MX_TIM8_Init+0x17c>)
 8001d38:	f009 fbd8 	bl	800b4ec <HAL_TIMEx_ConfigBreakDeadTime>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM8_Init+0x16e>
  {
    Error_Handler();
 8001d42:	f000 fa5d 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001d46:	4803      	ldr	r0, [pc, #12]	@ (8001d54 <MX_TIM8_Init+0x17c>)
 8001d48:	f001 f92e 	bl	8002fa8 <HAL_TIM_MspPostInit>

}
 8001d4c:	bf00      	nop
 8001d4e:	3770      	adds	r7, #112	@ 0x70
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20000860 	.word	0x20000860
 8001d58:	40013400 	.word	0x40013400

08001d5c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b09c      	sub	sp, #112	@ 0x70
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d62:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d70:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d7c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]
 8001d8c:	615a      	str	r2, [r3, #20]
 8001d8e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d90:	1d3b      	adds	r3, r7, #4
 8001d92:	2234      	movs	r2, #52	@ 0x34
 8001d94:	2100      	movs	r1, #0
 8001d96:	4618      	mov	r0, r3
 8001d98:	f00f f9c9 	bl	801112e <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001d9c:	4b3f      	ldr	r3, [pc, #252]	@ (8001e9c <MX_TIM15_Init+0x140>)
 8001d9e:	4a40      	ldr	r2, [pc, #256]	@ (8001ea0 <MX_TIM15_Init+0x144>)
 8001da0:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 150;
 8001da2:	4b3e      	ldr	r3, [pc, #248]	@ (8001e9c <MX_TIM15_Init+0x140>)
 8001da4:	2296      	movs	r2, #150	@ 0x96
 8001da6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da8:	4b3c      	ldr	r3, [pc, #240]	@ (8001e9c <MX_TIM15_Init+0x140>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8001dae:	4b3b      	ldr	r3, [pc, #236]	@ (8001e9c <MX_TIM15_Init+0x140>)
 8001db0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001db4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db6:	4b39      	ldr	r3, [pc, #228]	@ (8001e9c <MX_TIM15_Init+0x140>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001dbc:	4b37      	ldr	r3, [pc, #220]	@ (8001e9c <MX_TIM15_Init+0x140>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc2:	4b36      	ldr	r3, [pc, #216]	@ (8001e9c <MX_TIM15_Init+0x140>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001dc8:	4834      	ldr	r0, [pc, #208]	@ (8001e9c <MX_TIM15_Init+0x140>)
 8001dca:	f007 fe15 	bl	80099f8 <HAL_TIM_Base_Init>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001dd4:	f000 fa14 	bl	8002200 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ddc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001dde:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001de2:	4619      	mov	r1, r3
 8001de4:	482d      	ldr	r0, [pc, #180]	@ (8001e9c <MX_TIM15_Init+0x140>)
 8001de6:	f008 fc45 	bl	800a674 <HAL_TIM_ConfigClockSource>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8001df0:	f000 fa06 	bl	8002200 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001df4:	4829      	ldr	r0, [pc, #164]	@ (8001e9c <MX_TIM15_Init+0x140>)
 8001df6:	f007 fe56 	bl	8009aa6 <HAL_TIM_PWM_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8001e00:	f000 f9fe 	bl	8002200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e04:	2300      	movs	r3, #0
 8001e06:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001e0c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e10:	4619      	mov	r1, r3
 8001e12:	4822      	ldr	r0, [pc, #136]	@ (8001e9c <MX_TIM15_Init+0x140>)
 8001e14:	f009 fad4 	bl	800b3c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8001e1e:	f000 f9ef 	bl	8002200 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e22:	2360      	movs	r3, #96	@ 0x60
 8001e24:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 499;
 8001e26:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8001e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e30:	2300      	movs	r3, #0
 8001e32:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e34:	2300      	movs	r3, #0
 8001e36:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e40:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e44:	2200      	movs	r2, #0
 8001e46:	4619      	mov	r1, r3
 8001e48:	4814      	ldr	r0, [pc, #80]	@ (8001e9c <MX_TIM15_Init+0x140>)
 8001e4a:	f008 faff 	bl	800a44c <HAL_TIM_PWM_ConfigChannel>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8001e54:	f000 f9d4 	bl	8002200 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e70:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e76:	2300      	movs	r3, #0
 8001e78:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4807      	ldr	r0, [pc, #28]	@ (8001e9c <MX_TIM15_Init+0x140>)
 8001e80:	f009 fb34 	bl	800b4ec <HAL_TIMEx_ConfigBreakDeadTime>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8001e8a:	f000 f9b9 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001e8e:	4803      	ldr	r0, [pc, #12]	@ (8001e9c <MX_TIM15_Init+0x140>)
 8001e90:	f001 f88a 	bl	8002fa8 <HAL_TIM_MspPostInit>

}
 8001e94:	bf00      	nop
 8001e96:	3770      	adds	r7, #112	@ 0x70
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	200008ac 	.word	0x200008ac
 8001ea0:	40014000 	.word	0x40014000

08001ea4 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08c      	sub	sp, #48	@ 0x30
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001eaa:	f107 030c 	add.w	r3, r7, #12
 8001eae:	2224      	movs	r2, #36	@ 0x24
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f00f f93b 	bl	801112e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb8:	463b      	mov	r3, r7
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	605a      	str	r2, [r3, #4]
 8001ec0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8001ec2:	4b23      	ldr	r3, [pc, #140]	@ (8001f50 <MX_TIM20_Init+0xac>)
 8001ec4:	4a23      	ldr	r2, [pc, #140]	@ (8001f54 <MX_TIM20_Init+0xb0>)
 8001ec6:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8001ec8:	4b21      	ldr	r3, [pc, #132]	@ (8001f50 <MX_TIM20_Init+0xac>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ece:	4b20      	ldr	r3, [pc, #128]	@ (8001f50 <MX_TIM20_Init+0xac>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8001ed4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f50 <MX_TIM20_Init+0xac>)
 8001ed6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001eda:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001edc:	4b1c      	ldr	r3, [pc, #112]	@ (8001f50 <MX_TIM20_Init+0xac>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8001ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f50 <MX_TIM20_Init+0xac>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee8:	4b19      	ldr	r3, [pc, #100]	@ (8001f50 <MX_TIM20_Init+0xac>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001efa:	2300      	movs	r3, #0
 8001efc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001efe:	230f      	movs	r3, #15
 8001f00:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f02:	2300      	movs	r3, #0
 8001f04:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f06:	2301      	movs	r3, #1
 8001f08:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001f0e:	230f      	movs	r3, #15
 8001f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim20, &sConfig) != HAL_OK)
 8001f12:	f107 030c 	add.w	r3, r7, #12
 8001f16:	4619      	mov	r1, r3
 8001f18:	480d      	ldr	r0, [pc, #52]	@ (8001f50 <MX_TIM20_Init+0xac>)
 8001f1a:	f008 f963 	bl	800a1e4 <HAL_TIM_Encoder_Init>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM20_Init+0x84>
  {
    Error_Handler();
 8001f24:	f000 f96c 	bl	8002200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f30:	2300      	movs	r3, #0
 8001f32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8001f34:	463b      	mov	r3, r7
 8001f36:	4619      	mov	r1, r3
 8001f38:	4805      	ldr	r0, [pc, #20]	@ (8001f50 <MX_TIM20_Init+0xac>)
 8001f3a:	f009 fa41 	bl	800b3c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM20_Init+0xa4>
  {
    Error_Handler();
 8001f44:	f000 f95c 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 8001f48:	bf00      	nop
 8001f4a:	3730      	adds	r7, #48	@ 0x30
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	200008f8 	.word	0x200008f8
 8001f54:	40015000 	.word	0x40015000

08001f58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc8 <MX_DMA_Init+0x70>)
 8001f60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f62:	4a19      	ldr	r2, [pc, #100]	@ (8001fc8 <MX_DMA_Init+0x70>)
 8001f64:	f043 0304 	orr.w	r3, r3, #4
 8001f68:	6493      	str	r3, [r2, #72]	@ 0x48
 8001f6a:	4b17      	ldr	r3, [pc, #92]	@ (8001fc8 <MX_DMA_Init+0x70>)
 8001f6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	607b      	str	r3, [r7, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f76:	4b14      	ldr	r3, [pc, #80]	@ (8001fc8 <MX_DMA_Init+0x70>)
 8001f78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f7a:	4a13      	ldr	r2, [pc, #76]	@ (8001fc8 <MX_DMA_Init+0x70>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6493      	str	r3, [r2, #72]	@ 0x48
 8001f82:	4b11      	ldr	r3, [pc, #68]	@ (8001fc8 <MX_DMA_Init+0x70>)
 8001f84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	603b      	str	r3, [r7, #0]
 8001f8c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2100      	movs	r1, #0
 8001f92:	200b      	movs	r0, #11
 8001f94:	f002 fec3 	bl	8004d1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f98:	200b      	movs	r0, #11
 8001f9a:	f002 feda 	bl	8004d52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	200c      	movs	r0, #12
 8001fa4:	f002 febb 	bl	8004d1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001fa8:	200c      	movs	r0, #12
 8001faa:	f002 fed2 	bl	8004d52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	200d      	movs	r0, #13
 8001fb4:	f002 feb3 	bl	8004d1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001fb8:	200d      	movs	r0, #13
 8001fba:	f002 feca 	bl	8004d52 <HAL_NVIC_EnableIRQ>

}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40021000 	.word	0x40021000

08001fcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08a      	sub	sp, #40	@ 0x28
 8001fd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd2:	f107 0314 	add.w	r3, r7, #20
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
 8001fde:	60da      	str	r2, [r3, #12]
 8001fe0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe2:	4b83      	ldr	r3, [pc, #524]	@ (80021f0 <MX_GPIO_Init+0x224>)
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe6:	4a82      	ldr	r2, [pc, #520]	@ (80021f0 <MX_GPIO_Init+0x224>)
 8001fe8:	f043 0304 	orr.w	r3, r3, #4
 8001fec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fee:	4b80      	ldr	r3, [pc, #512]	@ (80021f0 <MX_GPIO_Init+0x224>)
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ffa:	4b7d      	ldr	r3, [pc, #500]	@ (80021f0 <MX_GPIO_Init+0x224>)
 8001ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ffe:	4a7c      	ldr	r2, [pc, #496]	@ (80021f0 <MX_GPIO_Init+0x224>)
 8002000:	f043 0320 	orr.w	r3, r3, #32
 8002004:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002006:	4b7a      	ldr	r3, [pc, #488]	@ (80021f0 <MX_GPIO_Init+0x224>)
 8002008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800200a:	f003 0320 	and.w	r3, r3, #32
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002012:	4b77      	ldr	r3, [pc, #476]	@ (80021f0 <MX_GPIO_Init+0x224>)
 8002014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002016:	4a76      	ldr	r2, [pc, #472]	@ (80021f0 <MX_GPIO_Init+0x224>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800201e:	4b74      	ldr	r3, [pc, #464]	@ (80021f0 <MX_GPIO_Init+0x224>)
 8002020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800202a:	4b71      	ldr	r3, [pc, #452]	@ (80021f0 <MX_GPIO_Init+0x224>)
 800202c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800202e:	4a70      	ldr	r2, [pc, #448]	@ (80021f0 <MX_GPIO_Init+0x224>)
 8002030:	f043 0302 	orr.w	r3, r3, #2
 8002034:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002036:	4b6e      	ldr	r3, [pc, #440]	@ (80021f0 <MX_GPIO_Init+0x224>)
 8002038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	607b      	str	r3, [r7, #4]
 8002040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002042:	4b6b      	ldr	r3, [pc, #428]	@ (80021f0 <MX_GPIO_Init+0x224>)
 8002044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002046:	4a6a      	ldr	r2, [pc, #424]	@ (80021f0 <MX_GPIO_Init+0x224>)
 8002048:	f043 0308 	orr.w	r3, r3, #8
 800204c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800204e:	4b68      	ldr	r3, [pc, #416]	@ (80021f0 <MX_GPIO_Init+0x224>)
 8002050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	603b      	str	r3, [r7, #0]
 8002058:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AC_DC_CH2_Pin|CD_CH2_A_Pin|CD_CH2_B_Pin|CD_CH1_A_Pin
 800205a:	2200      	movs	r2, #0
 800205c:	f64e 0120 	movw	r1, #59424	@ 0xe820
 8002060:	4864      	ldr	r0, [pc, #400]	@ (80021f4 <MX_GPIO_Init+0x228>)
 8002062:	f003 fc61 	bl	8005928 <HAL_GPIO_WritePin>
                          |ST7789_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CD_CH2_C_Pin|AC_DC_CH1_Pin|CD_CH1_C_Pin, GPIO_PIN_RESET);
 8002066:	2200      	movs	r2, #0
 8002068:	f44f 7191 	mov.w	r1, #290	@ 0x122
 800206c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002070:	f003 fc5a 	bl	8005928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CD_CH1_B_Pin|TLC5952_SCLK_Pin|TLC5952_LAT_Pin|TLC5952_SIN_Pin, GPIO_PIN_RESET);
 8002074:	2200      	movs	r2, #0
 8002076:	f248 0138 	movw	r1, #32824	@ 0x8038
 800207a:	485f      	ldr	r0, [pc, #380]	@ (80021f8 <MX_GPIO_Init+0x22c>)
 800207c:	f003 fc54 	bl	8005928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FT6336_RST_GPIO_Port, FT6336_RST_Pin, GPIO_PIN_RESET);
 8002080:	2200      	movs	r2, #0
 8002082:	2104      	movs	r1, #4
 8002084:	485d      	ldr	r0, [pc, #372]	@ (80021fc <MX_GPIO_Init+0x230>)
 8002086:	f003 fc4f 	bl	8005928 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AC_DC_CH2_Pin CD_CH2_A_Pin CD_CH2_B_Pin CD_CH1_A_Pin
                           ST7789_DC_Pin */
  GPIO_InitStruct.Pin = AC_DC_CH2_Pin|CD_CH2_A_Pin|CD_CH2_B_Pin|CD_CH1_A_Pin
 800208a:	f64e 0320 	movw	r3, #59424	@ 0xe820
 800208e:	617b      	str	r3, [r7, #20]
                          |ST7789_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002090:	2301      	movs	r3, #1
 8002092:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002098:	2300      	movs	r3, #0
 800209a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800209c:	f107 0314 	add.w	r3, r7, #20
 80020a0:	4619      	mov	r1, r3
 80020a2:	4854      	ldr	r0, [pc, #336]	@ (80021f4 <MX_GPIO_Init+0x228>)
 80020a4:	f003 fabe 	bl	8005624 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020a8:	2301      	movs	r3, #1
 80020aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ac:	2302      	movs	r3, #2
 80020ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b4:	2300      	movs	r3, #0
 80020b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 80020b8:	230e      	movs	r3, #14
 80020ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020bc:	f107 0314 	add.w	r3, r7, #20
 80020c0:	4619      	mov	r1, r3
 80020c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020c6:	f003 faad 	bl	8005624 <HAL_GPIO_Init>

  /*Configure GPIO pins : CD_CH2_C_Pin AC_DC_CH1_Pin CD_CH1_C_Pin */
  GPIO_InitStruct.Pin = CD_CH2_C_Pin|AC_DC_CH1_Pin|CD_CH1_C_Pin;
 80020ca:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80020ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d0:	2301      	movs	r3, #1
 80020d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d8:	2300      	movs	r3, #0
 80020da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	4619      	mov	r1, r3
 80020e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020e6:	f003 fa9d 	bl	8005624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10;
 80020ea:	f240 430c 	movw	r3, #1036	@ 0x40c
 80020ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020f0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80020f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fa:	f107 0314 	add.w	r3, r7, #20
 80020fe:	4619      	mov	r1, r3
 8002100:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002104:	f003 fa8e 	bl	8005624 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002108:	2310      	movs	r3, #16
 800210a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800210c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002110:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002116:	f107 0314 	add.w	r3, r7, #20
 800211a:	4619      	mov	r1, r3
 800211c:	4835      	ldr	r0, [pc, #212]	@ (80021f4 <MX_GPIO_Init+0x228>)
 800211e:	f003 fa81 	bl	8005624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8;
 8002122:	f240 1303 	movw	r3, #259	@ 0x103
 8002126:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002128:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800212c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002132:	f107 0314 	add.w	r3, r7, #20
 8002136:	4619      	mov	r1, r3
 8002138:	482f      	ldr	r0, [pc, #188]	@ (80021f8 <MX_GPIO_Init+0x22c>)
 800213a:	f003 fa73 	bl	8005624 <HAL_GPIO_Init>

  /*Configure GPIO pins : CD_CH1_B_Pin TLC5952_SCLK_Pin TLC5952_LAT_Pin TLC5952_SIN_Pin */
  GPIO_InitStruct.Pin = CD_CH1_B_Pin|TLC5952_SCLK_Pin|TLC5952_LAT_Pin|TLC5952_SIN_Pin;
 800213e:	f248 0338 	movw	r3, #32824	@ 0x8038
 8002142:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002144:	2301      	movs	r3, #1
 8002146:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214c:	2300      	movs	r3, #0
 800214e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	4619      	mov	r1, r3
 8002156:	4828      	ldr	r0, [pc, #160]	@ (80021f8 <MX_GPIO_Init+0x22c>)
 8002158:	f003 fa64 	bl	8005624 <HAL_GPIO_Init>

  /*Configure GPIO pin : FT6336_RST_Pin */
  GPIO_InitStruct.Pin = FT6336_RST_Pin;
 800215c:	2304      	movs	r3, #4
 800215e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002160:	2301      	movs	r3, #1
 8002162:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002168:	2300      	movs	r3, #0
 800216a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FT6336_RST_GPIO_Port, &GPIO_InitStruct);
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	4619      	mov	r1, r3
 8002172:	4822      	ldr	r0, [pc, #136]	@ (80021fc <MX_GPIO_Init+0x230>)
 8002174:	f003 fa56 	bl	8005624 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002178:	2200      	movs	r2, #0
 800217a:	2100      	movs	r1, #0
 800217c:	2006      	movs	r0, #6
 800217e:	f002 fdce 	bl	8004d1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002182:	2006      	movs	r0, #6
 8002184:	f002 fde5 	bl	8004d52 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002188:	2200      	movs	r2, #0
 800218a:	2100      	movs	r1, #0
 800218c:	2007      	movs	r0, #7
 800218e:	f002 fdc6 	bl	8004d1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002192:	2007      	movs	r0, #7
 8002194:	f002 fddd 	bl	8004d52 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002198:	2200      	movs	r2, #0
 800219a:	2100      	movs	r1, #0
 800219c:	2008      	movs	r0, #8
 800219e:	f002 fdbe 	bl	8004d1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80021a2:	2008      	movs	r0, #8
 80021a4:	f002 fdd5 	bl	8004d52 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80021a8:	2200      	movs	r2, #0
 80021aa:	2100      	movs	r1, #0
 80021ac:	2009      	movs	r0, #9
 80021ae:	f002 fdb6 	bl	8004d1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80021b2:	2009      	movs	r0, #9
 80021b4:	f002 fdcd 	bl	8004d52 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80021b8:	2200      	movs	r2, #0
 80021ba:	2100      	movs	r1, #0
 80021bc:	200a      	movs	r0, #10
 80021be:	f002 fdae 	bl	8004d1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80021c2:	200a      	movs	r0, #10
 80021c4:	f002 fdc5 	bl	8004d52 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80021c8:	2200      	movs	r2, #0
 80021ca:	2100      	movs	r1, #0
 80021cc:	2017      	movs	r0, #23
 80021ce:	f002 fda6 	bl	8004d1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80021d2:	2017      	movs	r0, #23
 80021d4:	f002 fdbd 	bl	8004d52 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80021d8:	2200      	movs	r2, #0
 80021da:	2100      	movs	r1, #0
 80021dc:	2028      	movs	r0, #40	@ 0x28
 80021de:	f002 fd9e 	bl	8004d1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80021e2:	2028      	movs	r0, #40	@ 0x28
 80021e4:	f002 fdb5 	bl	8004d52 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021e8:	bf00      	nop
 80021ea:	3728      	adds	r7, #40	@ 0x28
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40021000 	.word	0x40021000
 80021f4:	48000800 	.word	0x48000800
 80021f8:	48000400 	.word	0x48000400
 80021fc:	48000c00 	.word	0x48000c00

08002200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002204:	b672      	cpsid	i
}
 8002206:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002208:	bf00      	nop
 800220a:	e7fd      	b.n	8002208 <Error_Handler+0x8>

0800220c <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8002216:	bf00      	nop
	ST7789_DC_Clr();
 8002218:	2200      	movs	r2, #0
 800221a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800221e:	4807      	ldr	r0, [pc, #28]	@ (800223c <ST7789_WriteCommand+0x30>)
 8002220:	f003 fb82 	bl	8005928 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8002224:	1df9      	adds	r1, r7, #7
 8002226:	f04f 33ff 	mov.w	r3, #4294967295
 800222a:	2201      	movs	r2, #1
 800222c:	4804      	ldr	r0, [pc, #16]	@ (8002240 <ST7789_WriteCommand+0x34>)
 800222e:	f006 ff7a 	bl	8009126 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8002232:	bf00      	nop
}
 8002234:	bf00      	nop
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	48000800 	.word	0x48000800
 8002240:	200006b8 	.word	0x200006b8

08002244 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 800224e:	bf00      	nop
	ST7789_DC_Set();
 8002250:	2201      	movs	r2, #1
 8002252:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002256:	481b      	ldr	r0, [pc, #108]	@ (80022c4 <ST7789_WriteData+0x80>)
 8002258:	f003 fb66 	bl	8005928 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 800225c:	e02a      	b.n	80022b4 <ST7789_WriteData+0x70>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002264:	4293      	cmp	r3, r2
 8002266:	bf28      	it	cs
 8002268:	4613      	movcs	r3, r2
 800226a:	81fb      	strh	r3, [r7, #14]
		#ifdef USE_DMA
			if (DMA_MIN_SIZE <= buff_size)
 800226c:	4b16      	ldr	r3, [pc, #88]	@ (80022c8 <ST7789_WriteData+0x84>)
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	461a      	mov	r2, r3
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	4293      	cmp	r3, r2
 8002276:	d30e      	bcc.n	8002296 <ST7789_WriteData+0x52>
			{
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 8002278:	89fb      	ldrh	r3, [r7, #14]
 800227a:	461a      	mov	r2, r3
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	4813      	ldr	r0, [pc, #76]	@ (80022cc <ST7789_WriteData+0x88>)
 8002280:	f007 f8c8 	bl	8009414 <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 8002284:	bf00      	nop
 8002286:	4b11      	ldr	r3, [pc, #68]	@ (80022cc <ST7789_WriteData+0x88>)
 8002288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800228a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b01      	cmp	r3, #1
 8002292:	d1f8      	bne.n	8002286 <ST7789_WriteData+0x42>
 8002294:	e006      	b.n	80022a4 <ST7789_WriteData+0x60>
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8002296:	89fa      	ldrh	r2, [r7, #14]
 8002298:	f04f 33ff 	mov.w	r3, #4294967295
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	480b      	ldr	r0, [pc, #44]	@ (80022cc <ST7789_WriteData+0x88>)
 80022a0:	f006 ff41 	bl	8009126 <HAL_SPI_Transmit>
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#endif
		buff += chunk_size;
 80022a4:	89fb      	ldrh	r3, [r7, #14]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 80022ac:	89fb      	ldrh	r3, [r7, #14]
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1d1      	bne.n	800225e <ST7789_WriteData+0x1a>
	}

	ST7789_UnSelect();
 80022ba:	bf00      	nop
}
 80022bc:	bf00      	nop
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	48000800 	.word	0x48000800
 80022c8:	20000004 	.word	0x20000004
 80022cc:	200006b8 	.word	0x200006b8

080022d0 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 80022da:	bf00      	nop
	ST7789_DC_Set();
 80022dc:	2201      	movs	r2, #1
 80022de:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80022e2:	4807      	ldr	r0, [pc, #28]	@ (8002300 <ST7789_WriteSmallData+0x30>)
 80022e4:	f003 fb20 	bl	8005928 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 80022e8:	1df9      	adds	r1, r7, #7
 80022ea:	f04f 33ff 	mov.w	r3, #4294967295
 80022ee:	2201      	movs	r2, #1
 80022f0:	4804      	ldr	r0, [pc, #16]	@ (8002304 <ST7789_WriteSmallData+0x34>)
 80022f2:	f006 ff18 	bl	8009126 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 80022f6:	bf00      	nop
}
 80022f8:	bf00      	nop
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	48000800 	.word	0x48000800
 8002304:	200006b8 	.word	0x200006b8

08002308 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8002312:	2036      	movs	r0, #54	@ 0x36
 8002314:	f7ff ff7a 	bl	800220c <ST7789_WriteCommand>
	switch (m) {
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	2b03      	cmp	r3, #3
 800231c:	d81a      	bhi.n	8002354 <ST7789_SetRotation+0x4c>
 800231e:	a201      	add	r2, pc, #4	@ (adr r2, 8002324 <ST7789_SetRotation+0x1c>)
 8002320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002324:	08002335 	.word	0x08002335
 8002328:	0800233d 	.word	0x0800233d
 800232c:	08002345 	.word	0x08002345
 8002330:	0800234d 	.word	0x0800234d
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8002334:	20c0      	movs	r0, #192	@ 0xc0
 8002336:	f7ff ffcb 	bl	80022d0 <ST7789_WriteSmallData>
		break;
 800233a:	e00c      	b.n	8002356 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 800233c:	20a0      	movs	r0, #160	@ 0xa0
 800233e:	f7ff ffc7 	bl	80022d0 <ST7789_WriteSmallData>
		break;
 8002342:	e008      	b.n	8002356 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8002344:	2000      	movs	r0, #0
 8002346:	f7ff ffc3 	bl	80022d0 <ST7789_WriteSmallData>
		break;
 800234a:	e004      	b.n	8002356 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 800234c:	2060      	movs	r0, #96	@ 0x60
 800234e:	f7ff ffbf 	bl	80022d0 <ST7789_WriteSmallData>
		break;
 8002352:	e000      	b.n	8002356 <ST7789_SetRotation+0x4e>
	default:
		break;
 8002354:	bf00      	nop
	}
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop

08002360 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8002360:	b590      	push	{r4, r7, lr}
 8002362:	b087      	sub	sp, #28
 8002364:	af00      	add	r7, sp, #0
 8002366:	4604      	mov	r4, r0
 8002368:	4608      	mov	r0, r1
 800236a:	4611      	mov	r1, r2
 800236c:	461a      	mov	r2, r3
 800236e:	4623      	mov	r3, r4
 8002370:	80fb      	strh	r3, [r7, #6]
 8002372:	4603      	mov	r3, r0
 8002374:	80bb      	strh	r3, [r7, #4]
 8002376:	460b      	mov	r3, r1
 8002378:	807b      	strh	r3, [r7, #2]
 800237a:	4613      	mov	r3, r2
 800237c:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 800237e:	bf00      	nop
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8002380:	88fb      	ldrh	r3, [r7, #6]
 8002382:	82fb      	strh	r3, [r7, #22]
 8002384:	887b      	ldrh	r3, [r7, #2]
 8002386:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8002388:	88bb      	ldrh	r3, [r7, #4]
 800238a:	827b      	strh	r3, [r7, #18]
 800238c:	883b      	ldrh	r3, [r7, #0]
 800238e:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8002390:	202a      	movs	r0, #42	@ 0x2a
 8002392:	f7ff ff3b 	bl	800220c <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8002396:	8afb      	ldrh	r3, [r7, #22]
 8002398:	0a1b      	lsrs	r3, r3, #8
 800239a:	b29b      	uxth	r3, r3
 800239c:	b2db      	uxtb	r3, r3
 800239e:	733b      	strb	r3, [r7, #12]
 80023a0:	8afb      	ldrh	r3, [r7, #22]
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	737b      	strb	r3, [r7, #13]
 80023a6:	8abb      	ldrh	r3, [r7, #20]
 80023a8:	0a1b      	lsrs	r3, r3, #8
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	73bb      	strb	r3, [r7, #14]
 80023b0:	8abb      	ldrh	r3, [r7, #20]
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 80023b6:	f107 030c 	add.w	r3, r7, #12
 80023ba:	2104      	movs	r1, #4
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ff41 	bl	8002244 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 80023c2:	202b      	movs	r0, #43	@ 0x2b
 80023c4:	f7ff ff22 	bl	800220c <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 80023c8:	8a7b      	ldrh	r3, [r7, #18]
 80023ca:	0a1b      	lsrs	r3, r3, #8
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	723b      	strb	r3, [r7, #8]
 80023d2:	8a7b      	ldrh	r3, [r7, #18]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	727b      	strb	r3, [r7, #9]
 80023d8:	8a3b      	ldrh	r3, [r7, #16]
 80023da:	0a1b      	lsrs	r3, r3, #8
 80023dc:	b29b      	uxth	r3, r3
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	72bb      	strb	r3, [r7, #10]
 80023e2:	8a3b      	ldrh	r3, [r7, #16]
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 80023e8:	f107 0308 	add.w	r3, r7, #8
 80023ec:	2104      	movs	r1, #4
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff ff28 	bl	8002244 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 80023f4:	202c      	movs	r0, #44	@ 0x2c
 80023f6:	f7ff ff09 	bl	800220c <ST7789_WriteCommand>
	ST7789_UnSelect();
 80023fa:	bf00      	nop
}
 80023fc:	bf00      	nop
 80023fe:	371c      	adds	r7, #28
 8002400:	46bd      	mov	sp, r7
 8002402:	bd90      	pop	{r4, r7, pc}

08002404 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8002404:	b590      	push	{r4, r7, lr}
 8002406:	b08b      	sub	sp, #44	@ 0x2c
 8002408:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
 800240a:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 800240e:	2100      	movs	r1, #0
 8002410:	484a      	ldr	r0, [pc, #296]	@ (800253c <ST7789_Init+0x138>)
 8002412:	f00e fe8c 	bl	801112e <memset>
	#endif
	HAL_Delay(10);
 8002416:	200a      	movs	r0, #10
 8002418:	f001 f8a4 	bl	8003564 <HAL_Delay>
    ST7789_RST_Clr();
 800241c:	2200      	movs	r2, #0
 800241e:	2104      	movs	r1, #4
 8002420:	4847      	ldr	r0, [pc, #284]	@ (8002540 <ST7789_Init+0x13c>)
 8002422:	f003 fa81 	bl	8005928 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8002426:	200a      	movs	r0, #10
 8002428:	f001 f89c 	bl	8003564 <HAL_Delay>
    ST7789_RST_Set();
 800242c:	2201      	movs	r2, #1
 800242e:	2104      	movs	r1, #4
 8002430:	4843      	ldr	r0, [pc, #268]	@ (8002540 <ST7789_Init+0x13c>)
 8002432:	f003 fa79 	bl	8005928 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8002436:	2014      	movs	r0, #20
 8002438:	f001 f894 	bl	8003564 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 800243c:	203a      	movs	r0, #58	@ 0x3a
 800243e:	f7ff fee5 	bl	800220c <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8002442:	2055      	movs	r0, #85	@ 0x55
 8002444:	f7ff ff44 	bl	80022d0 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8002448:	20b2      	movs	r0, #178	@ 0xb2
 800244a:	f7ff fedf 	bl	800220c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 800244e:	4a3d      	ldr	r2, [pc, #244]	@ (8002544 <ST7789_Init+0x140>)
 8002450:	f107 0320 	add.w	r3, r7, #32
 8002454:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002458:	6018      	str	r0, [r3, #0]
 800245a:	3304      	adds	r3, #4
 800245c:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 800245e:	f107 0320 	add.w	r3, r7, #32
 8002462:	2105      	movs	r1, #5
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff feed 	bl	8002244 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 800246a:	2003      	movs	r0, #3
 800246c:	f7ff ff4c 	bl	8002308 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8002470:	20b7      	movs	r0, #183	@ 0xb7
 8002472:	f7ff fecb 	bl	800220c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8002476:	2035      	movs	r0, #53	@ 0x35
 8002478:	f7ff ff2a 	bl	80022d0 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 800247c:	20bb      	movs	r0, #187	@ 0xbb
 800247e:	f7ff fec5 	bl	800220c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8002482:	2019      	movs	r0, #25
 8002484:	f7ff ff24 	bl	80022d0 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8002488:	20c0      	movs	r0, #192	@ 0xc0
 800248a:	f7ff febf 	bl	800220c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 800248e:	202c      	movs	r0, #44	@ 0x2c
 8002490:	f7ff ff1e 	bl	80022d0 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8002494:	20c2      	movs	r0, #194	@ 0xc2
 8002496:	f7ff feb9 	bl	800220c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 800249a:	2001      	movs	r0, #1
 800249c:	f7ff ff18 	bl	80022d0 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 80024a0:	20c3      	movs	r0, #195	@ 0xc3
 80024a2:	f7ff feb3 	bl	800220c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 80024a6:	2012      	movs	r0, #18
 80024a8:	f7ff ff12 	bl	80022d0 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 80024ac:	20c4      	movs	r0, #196	@ 0xc4
 80024ae:	f7ff fead 	bl	800220c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 80024b2:	2020      	movs	r0, #32
 80024b4:	f7ff ff0c 	bl	80022d0 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 80024b8:	20c6      	movs	r0, #198	@ 0xc6
 80024ba:	f7ff fea7 	bl	800220c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 80024be:	200f      	movs	r0, #15
 80024c0:	f7ff ff06 	bl	80022d0 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 80024c4:	20d0      	movs	r0, #208	@ 0xd0
 80024c6:	f7ff fea1 	bl	800220c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 80024ca:	20a4      	movs	r0, #164	@ 0xa4
 80024cc:	f7ff ff00 	bl	80022d0 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 80024d0:	20a1      	movs	r0, #161	@ 0xa1
 80024d2:	f7ff fefd 	bl	80022d0 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 80024d6:	20e0      	movs	r0, #224	@ 0xe0
 80024d8:	f7ff fe98 	bl	800220c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 80024dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002548 <ST7789_Init+0x144>)
 80024de:	f107 0410 	add.w	r4, r7, #16
 80024e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024e4:	c407      	stmia	r4!, {r0, r1, r2}
 80024e6:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 80024e8:	f107 0310 	add.w	r3, r7, #16
 80024ec:	210e      	movs	r1, #14
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff fea8 	bl	8002244 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 80024f4:	20e1      	movs	r0, #225	@ 0xe1
 80024f6:	f7ff fe89 	bl	800220c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 80024fa:	4b14      	ldr	r3, [pc, #80]	@ (800254c <ST7789_Init+0x148>)
 80024fc:	463c      	mov	r4, r7
 80024fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002500:	c407      	stmia	r4!, {r0, r1, r2}
 8002502:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8002504:	463b      	mov	r3, r7
 8002506:	210e      	movs	r1, #14
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fe9b 	bl	8002244 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 800250e:	2021      	movs	r0, #33	@ 0x21
 8002510:	f7ff fe7c 	bl	800220c <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8002514:	2011      	movs	r0, #17
 8002516:	f7ff fe79 	bl	800220c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 800251a:	2013      	movs	r0, #19
 800251c:	f7ff fe76 	bl	800220c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8002520:	2029      	movs	r0, #41	@ 0x29
 8002522:	f7ff fe73 	bl	800220c <ST7789_WriteCommand>

	HAL_Delay(50);
 8002526:	2032      	movs	r0, #50	@ 0x32
 8002528:	f001 f81c 	bl	8003564 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 800252c:	2000      	movs	r0, #0
 800252e:	f000 f80f 	bl	8002550 <ST7789_Fill_Color>
}
 8002532:	bf00      	nop
 8002534:	372c      	adds	r7, #44	@ 0x2c
 8002536:	46bd      	mov	sp, r7
 8002538:	bd90      	pop	{r4, r7, pc}
 800253a:	bf00      	nop
 800253c:	20000a04 	.word	0x20000a04
 8002540:	48000c00 	.word	0x48000c00
 8002544:	080148f8 	.word	0x080148f8
 8002548:	08014900 	.word	0x08014900
 800254c:	08014910 	.word	0x08014910

08002550 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 800255a:	23ef      	movs	r3, #239	@ 0xef
 800255c:	f240 123f 	movw	r2, #319	@ 0x13f
 8002560:	2100      	movs	r1, #0
 8002562:	2000      	movs	r0, #0
 8002564:	f7ff fefc 	bl	8002360 <ST7789_SetAddressWindow>
	ST7789_Select();
 8002568:	bf00      	nop

	#ifdef USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 800256a:	2300      	movs	r3, #0
 800256c:	81fb      	strh	r3, [r7, #14]
 800256e:	e00e      	b.n	800258e <ST7789_Fill_Color+0x3e>
		{
			memset(disp_buf, color, sizeof(disp_buf));
 8002570:	88fb      	ldrh	r3, [r7, #6]
 8002572:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8002576:	4619      	mov	r1, r3
 8002578:	4809      	ldr	r0, [pc, #36]	@ (80025a0 <ST7789_Fill_Color+0x50>)
 800257a:	f00e fdd8 	bl	801112e <memset>
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
 800257e:	f44f 6148 	mov.w	r1, #3200	@ 0xc80
 8002582:	4807      	ldr	r0, [pc, #28]	@ (80025a0 <ST7789_Fill_Color+0x50>)
 8002584:	f7ff fe5e 	bl	8002244 <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8002588:	89fb      	ldrh	r3, [r7, #14]
 800258a:	3301      	adds	r3, #1
 800258c:	81fb      	strh	r3, [r7, #14]
 800258e:	89fb      	ldrh	r3, [r7, #14]
 8002590:	2b2f      	cmp	r3, #47	@ 0x2f
 8002592:	d9ed      	bls.n	8002570 <ST7789_Fill_Color+0x20>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 8002594:	bf00      	nop
}
 8002596:	bf00      	nop
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20000a04 	.word	0x20000a04

080025a4 <ST7789_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	80fb      	strh	r3, [r7, #6]
 80025ae:	460b      	mov	r3, r1
 80025b0:	80bb      	strh	r3, [r7, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 80025b6:	88fb      	ldrh	r3, [r7, #6]
 80025b8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80025bc:	d219      	bcs.n	80025f2 <ST7789_DrawPixel+0x4e>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 80025be:	88bb      	ldrh	r3, [r7, #4]
 80025c0:	2bef      	cmp	r3, #239	@ 0xef
 80025c2:	d816      	bhi.n	80025f2 <ST7789_DrawPixel+0x4e>
	
	ST7789_SetAddressWindow(x, y, x, y);
 80025c4:	88bb      	ldrh	r3, [r7, #4]
 80025c6:	88fa      	ldrh	r2, [r7, #6]
 80025c8:	88b9      	ldrh	r1, [r7, #4]
 80025ca:	88f8      	ldrh	r0, [r7, #6]
 80025cc:	f7ff fec8 	bl	8002360 <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 80025d0:	887b      	ldrh	r3, [r7, #2]
 80025d2:	0a1b      	lsrs	r3, r3, #8
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	733b      	strb	r3, [r7, #12]
 80025da:	887b      	ldrh	r3, [r7, #2]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	737b      	strb	r3, [r7, #13]
	ST7789_Select();
 80025e0:	bf00      	nop
	ST7789_WriteData(data, sizeof(data));
 80025e2:	f107 030c 	add.w	r3, r7, #12
 80025e6:	2102      	movs	r1, #2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fe2b 	bl	8002244 <ST7789_WriteData>
	ST7789_UnSelect();
 80025ee:	bf00      	nop
 80025f0:	e000      	b.n	80025f4 <ST7789_DrawPixel+0x50>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 80025f2:	bf00      	nop
}
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002602:	4b11      	ldr	r3, [pc, #68]	@ (8002648 <HAL_MspInit+0x4c>)
 8002604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002606:	4a10      	ldr	r2, [pc, #64]	@ (8002648 <HAL_MspInit+0x4c>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	6613      	str	r3, [r2, #96]	@ 0x60
 800260e:	4b0e      	ldr	r3, [pc, #56]	@ (8002648 <HAL_MspInit+0x4c>)
 8002610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	607b      	str	r3, [r7, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800261a:	4b0b      	ldr	r3, [pc, #44]	@ (8002648 <HAL_MspInit+0x4c>)
 800261c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800261e:	4a0a      	ldr	r2, [pc, #40]	@ (8002648 <HAL_MspInit+0x4c>)
 8002620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002624:	6593      	str	r3, [r2, #88]	@ 0x58
 8002626:	4b08      	ldr	r3, [pc, #32]	@ (8002648 <HAL_MspInit+0x4c>)
 8002628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800262a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800262e:	603b      	str	r3, [r7, #0]
 8002630:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8002632:	f000 ffcd 	bl	80035d0 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8002636:	2002      	movs	r0, #2
 8002638:	f000 ffb6 	bl	80035a8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800263c:	f005 fd10 	bl	8008060 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002640:	bf00      	nop
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40021000 	.word	0x40021000

0800264c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b09e      	sub	sp, #120	@ 0x78
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002654:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	60da      	str	r2, [r3, #12]
 8002662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002664:	f107 0310 	add.w	r3, r7, #16
 8002668:	2254      	movs	r2, #84	@ 0x54
 800266a:	2100      	movs	r1, #0
 800266c:	4618      	mov	r0, r3
 800266e:	f00e fd5e 	bl	801112e <memset>
  if(hadc->Instance==ADC5)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a1e      	ldr	r2, [pc, #120]	@ (80026f0 <HAL_ADC_MspInit+0xa4>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d135      	bne.n	80026e8 <HAL_ADC_MspInit+0x9c>

  /* USER CODE END ADC5_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800267c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002680:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8002682:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002686:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002688:	f107 0310 	add.w	r3, r7, #16
 800268c:	4618      	mov	r0, r3
 800268e:	f006 fa51 	bl	8008b34 <HAL_RCCEx_PeriphCLKConfig>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002698:	f7ff fdb2 	bl	8002200 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC345_CLK_ENABLE();
 800269c:	4b15      	ldr	r3, [pc, #84]	@ (80026f4 <HAL_ADC_MspInit+0xa8>)
 800269e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026a0:	4a14      	ldr	r2, [pc, #80]	@ (80026f4 <HAL_ADC_MspInit+0xa8>)
 80026a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026a8:	4b12      	ldr	r3, [pc, #72]	@ (80026f4 <HAL_ADC_MspInit+0xa8>)
 80026aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b4:	4b0f      	ldr	r3, [pc, #60]	@ (80026f4 <HAL_ADC_MspInit+0xa8>)
 80026b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b8:	4a0e      	ldr	r2, [pc, #56]	@ (80026f4 <HAL_ADC_MspInit+0xa8>)
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026c0:	4b0c      	ldr	r3, [pc, #48]	@ (80026f4 <HAL_ADC_MspInit+0xa8>)
 80026c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	68bb      	ldr	r3, [r7, #8]
    /**ADC5 GPIO Configuration
    PA9     ------> ADC5_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026d0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026d2:	2303      	movs	r3, #3
 80026d4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026da:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80026de:	4619      	mov	r1, r3
 80026e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026e4:	f002 ff9e 	bl	8005624 <HAL_GPIO_Init>

  /* USER CODE END ADC5_MspInit 1 */

  }

}
 80026e8:	bf00      	nop
 80026ea:	3778      	adds	r7, #120	@ 0x78
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	50000600 	.word	0x50000600
 80026f4:	40021000 	.word	0x40021000

080026f8 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08a      	sub	sp, #40	@ 0x28
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002700:	f107 0314 	add.w	r3, r7, #20
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	60da      	str	r2, [r3, #12]
 800270e:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a1f      	ldr	r2, [pc, #124]	@ (8002794 <HAL_COMP_MspInit+0x9c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d119      	bne.n	800274e <HAL_COMP_MspInit+0x56>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800271a:	4b1f      	ldr	r3, [pc, #124]	@ (8002798 <HAL_COMP_MspInit+0xa0>)
 800271c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800271e:	4a1e      	ldr	r2, [pc, #120]	@ (8002798 <HAL_COMP_MspInit+0xa0>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002726:	4b1c      	ldr	r3, [pc, #112]	@ (8002798 <HAL_COMP_MspInit+0xa0>)
 8002728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	693b      	ldr	r3, [r7, #16]
    /**COMP2 GPIO Configuration
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002732:	2380      	movs	r3, #128	@ 0x80
 8002734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002736:	2303      	movs	r3, #3
 8002738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273a:	2300      	movs	r3, #0
 800273c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273e:	f107 0314 	add.w	r3, r7, #20
 8002742:	4619      	mov	r1, r3
 8002744:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002748:	f002 ff6c 	bl	8005624 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP5_MspInit 1 */

  /* USER CODE END COMP5_MspInit 1 */
  }

}
 800274c:	e01d      	b.n	800278a <HAL_COMP_MspInit+0x92>
  else if(hcomp->Instance==COMP5)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a12      	ldr	r2, [pc, #72]	@ (800279c <HAL_COMP_MspInit+0xa4>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d118      	bne.n	800278a <HAL_COMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002758:	4b0f      	ldr	r3, [pc, #60]	@ (8002798 <HAL_COMP_MspInit+0xa0>)
 800275a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800275c:	4a0e      	ldr	r2, [pc, #56]	@ (8002798 <HAL_COMP_MspInit+0xa0>)
 800275e:	f043 0302 	orr.w	r3, r3, #2
 8002762:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002764:	4b0c      	ldr	r3, [pc, #48]	@ (8002798 <HAL_COMP_MspInit+0xa0>)
 8002766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002770:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002776:	2303      	movs	r3, #3
 8002778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277a:	2300      	movs	r3, #0
 800277c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800277e:	f107 0314 	add.w	r3, r7, #20
 8002782:	4619      	mov	r1, r3
 8002784:	4806      	ldr	r0, [pc, #24]	@ (80027a0 <HAL_COMP_MspInit+0xa8>)
 8002786:	f002 ff4d 	bl	8005624 <HAL_GPIO_Init>
}
 800278a:	bf00      	nop
 800278c:	3728      	adds	r7, #40	@ 0x28
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40010204 	.word	0x40010204
 8002798:	40021000 	.word	0x40021000
 800279c:	40010210 	.word	0x40010210
 80027a0:	48000400 	.word	0x48000400

080027a4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08c      	sub	sp, #48	@ 0x30
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ac:	f107 031c 	add.w	r3, r7, #28
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a34      	ldr	r2, [pc, #208]	@ (8002894 <HAL_DAC_MspInit+0xf0>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d125      	bne.n	8002812 <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80027c6:	4b34      	ldr	r3, [pc, #208]	@ (8002898 <HAL_DAC_MspInit+0xf4>)
 80027c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ca:	4a33      	ldr	r2, [pc, #204]	@ (8002898 <HAL_DAC_MspInit+0xf4>)
 80027cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027d2:	4b31      	ldr	r3, [pc, #196]	@ (8002898 <HAL_DAC_MspInit+0xf4>)
 80027d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027da:	61bb      	str	r3, [r7, #24]
 80027dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027de:	4b2e      	ldr	r3, [pc, #184]	@ (8002898 <HAL_DAC_MspInit+0xf4>)
 80027e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027e2:	4a2d      	ldr	r2, [pc, #180]	@ (8002898 <HAL_DAC_MspInit+0xf4>)
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002898 <HAL_DAC_MspInit+0xf4>)
 80027ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80027f6:	2310      	movs	r3, #16
 80027f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027fa:	2303      	movs	r3, #3
 80027fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002802:	f107 031c 	add.w	r3, r7, #28
 8002806:	4619      	mov	r1, r3
 8002808:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800280c:	f002 ff0a 	bl	8005624 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC4_MspInit 1 */

  /* USER CODE END DAC4_MspInit 1 */
  }

}
 8002810:	e03b      	b.n	800288a <HAL_DAC_MspInit+0xe6>
  else if(hdac->Instance==DAC2)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a21      	ldr	r2, [pc, #132]	@ (800289c <HAL_DAC_MspInit+0xf8>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d125      	bne.n	8002868 <HAL_DAC_MspInit+0xc4>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800281c:	4b1e      	ldr	r3, [pc, #120]	@ (8002898 <HAL_DAC_MspInit+0xf4>)
 800281e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002820:	4a1d      	ldr	r2, [pc, #116]	@ (8002898 <HAL_DAC_MspInit+0xf4>)
 8002822:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002826:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002828:	4b1b      	ldr	r3, [pc, #108]	@ (8002898 <HAL_DAC_MspInit+0xf4>)
 800282a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800282c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002830:	613b      	str	r3, [r7, #16]
 8002832:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002834:	4b18      	ldr	r3, [pc, #96]	@ (8002898 <HAL_DAC_MspInit+0xf4>)
 8002836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002838:	4a17      	ldr	r2, [pc, #92]	@ (8002898 <HAL_DAC_MspInit+0xf4>)
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002840:	4b15      	ldr	r3, [pc, #84]	@ (8002898 <HAL_DAC_MspInit+0xf4>)
 8002842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800284c:	2340      	movs	r3, #64	@ 0x40
 800284e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002850:	2303      	movs	r3, #3
 8002852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002858:	f107 031c 	add.w	r3, r7, #28
 800285c:	4619      	mov	r1, r3
 800285e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002862:	f002 fedf 	bl	8005624 <HAL_GPIO_Init>
}
 8002866:	e010      	b.n	800288a <HAL_DAC_MspInit+0xe6>
  else if(hdac->Instance==DAC4)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a0c      	ldr	r2, [pc, #48]	@ (80028a0 <HAL_DAC_MspInit+0xfc>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d10b      	bne.n	800288a <HAL_DAC_MspInit+0xe6>
    __HAL_RCC_DAC4_CLK_ENABLE();
 8002872:	4b09      	ldr	r3, [pc, #36]	@ (8002898 <HAL_DAC_MspInit+0xf4>)
 8002874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002876:	4a08      	ldr	r2, [pc, #32]	@ (8002898 <HAL_DAC_MspInit+0xf4>)
 8002878:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800287c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800287e:	4b06      	ldr	r3, [pc, #24]	@ (8002898 <HAL_DAC_MspInit+0xf4>)
 8002880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002882:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	68bb      	ldr	r3, [r7, #8]
}
 800288a:	bf00      	nop
 800288c:	3730      	adds	r7, #48	@ 0x30
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	50000800 	.word	0x50000800
 8002898:	40021000 	.word	0x40021000
 800289c:	50000c00 	.word	0x50000c00
 80028a0:	50001400 	.word	0x50001400

080028a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b09e      	sub	sp, #120	@ 0x78
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	605a      	str	r2, [r3, #4]
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	60da      	str	r2, [r3, #12]
 80028ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028bc:	f107 0310 	add.w	r3, r7, #16
 80028c0:	2254      	movs	r2, #84	@ 0x54
 80028c2:	2100      	movs	r1, #0
 80028c4:	4618      	mov	r0, r3
 80028c6:	f00e fc32 	bl	801112e <memset>
  if(hi2c->Instance==I2C3)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a1f      	ldr	r2, [pc, #124]	@ (800294c <HAL_I2C_MspInit+0xa8>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d137      	bne.n	8002944 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80028d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028d8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80028da:	2300      	movs	r3, #0
 80028dc:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028de:	f107 0310 	add.w	r3, r7, #16
 80028e2:	4618      	mov	r0, r3
 80028e4:	f006 f926 	bl	8008b34 <HAL_RCCEx_PeriphCLKConfig>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80028ee:	f7ff fc87 	bl	8002200 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028f2:	4b17      	ldr	r3, [pc, #92]	@ (8002950 <HAL_I2C_MspInit+0xac>)
 80028f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028f6:	4a16      	ldr	r2, [pc, #88]	@ (8002950 <HAL_I2C_MspInit+0xac>)
 80028f8:	f043 0304 	orr.w	r3, r3, #4
 80028fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028fe:	4b14      	ldr	r3, [pc, #80]	@ (8002950 <HAL_I2C_MspInit+0xac>)
 8002900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002902:	f003 0304 	and.w	r3, r3, #4
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800290a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800290e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002910:	2312      	movs	r3, #18
 8002912:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002914:	2300      	movs	r3, #0
 8002916:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002918:	2300      	movs	r3, #0
 800291a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 800291c:	2308      	movs	r3, #8
 800291e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002920:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002924:	4619      	mov	r1, r3
 8002926:	480b      	ldr	r0, [pc, #44]	@ (8002954 <HAL_I2C_MspInit+0xb0>)
 8002928:	f002 fe7c 	bl	8005624 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800292c:	4b08      	ldr	r3, [pc, #32]	@ (8002950 <HAL_I2C_MspInit+0xac>)
 800292e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002930:	4a07      	ldr	r2, [pc, #28]	@ (8002950 <HAL_I2C_MspInit+0xac>)
 8002932:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002936:	6593      	str	r3, [r2, #88]	@ 0x58
 8002938:	4b05      	ldr	r3, [pc, #20]	@ (8002950 <HAL_I2C_MspInit+0xac>)
 800293a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800293c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002944:	bf00      	nop
 8002946:	3778      	adds	r7, #120	@ 0x78
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40007800 	.word	0x40007800
 8002950:	40021000 	.word	0x40021000
 8002954:	48000800 	.word	0x48000800

08002958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b09e      	sub	sp, #120	@ 0x78
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002970:	f107 0310 	add.w	r3, r7, #16
 8002974:	2254      	movs	r2, #84	@ 0x54
 8002976:	2100      	movs	r1, #0
 8002978:	4618      	mov	r0, r3
 800297a:	f00e fbd8 	bl	801112e <memset>
  if(huart->Instance==LPUART1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a1f      	ldr	r2, [pc, #124]	@ (8002a00 <HAL_UART_MspInit+0xa8>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d136      	bne.n	80029f6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002988:	2320      	movs	r3, #32
 800298a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800298c:	2300      	movs	r3, #0
 800298e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002990:	f107 0310 	add.w	r3, r7, #16
 8002994:	4618      	mov	r0, r3
 8002996:	f006 f8cd 	bl	8008b34 <HAL_RCCEx_PeriphCLKConfig>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80029a0:	f7ff fc2e 	bl	8002200 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80029a4:	4b17      	ldr	r3, [pc, #92]	@ (8002a04 <HAL_UART_MspInit+0xac>)
 80029a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a8:	4a16      	ldr	r2, [pc, #88]	@ (8002a04 <HAL_UART_MspInit+0xac>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80029b0:	4b14      	ldr	r3, [pc, #80]	@ (8002a04 <HAL_UART_MspInit+0xac>)
 80029b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029bc:	4b11      	ldr	r3, [pc, #68]	@ (8002a04 <HAL_UART_MspInit+0xac>)
 80029be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c0:	4a10      	ldr	r2, [pc, #64]	@ (8002a04 <HAL_UART_MspInit+0xac>)
 80029c2:	f043 0302 	orr.w	r3, r3, #2
 80029c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002a04 <HAL_UART_MspInit+0xac>)
 80029ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80029d4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80029d8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029da:	2302      	movs	r3, #2
 80029dc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e2:	2300      	movs	r3, #0
 80029e4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80029e6:	2308      	movs	r3, #8
 80029e8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ea:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80029ee:	4619      	mov	r1, r3
 80029f0:	4805      	ldr	r0, [pc, #20]	@ (8002a08 <HAL_UART_MspInit+0xb0>)
 80029f2:	f002 fe17 	bl	8005624 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 80029f6:	bf00      	nop
 80029f8:	3778      	adds	r7, #120	@ 0x78
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40008000 	.word	0x40008000
 8002a04:	40021000 	.word	0x40021000
 8002a08:	48000400 	.word	0x48000400

08002a0c <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b08e      	sub	sp, #56	@ 0x38
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	60da      	str	r2, [r3, #12]
 8002a22:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a5c      	ldr	r2, [pc, #368]	@ (8002b9c <HAL_OPAMP_MspInit+0x190>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d119      	bne.n	8002a62 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2e:	4b5c      	ldr	r3, [pc, #368]	@ (8002ba0 <HAL_OPAMP_MspInit+0x194>)
 8002a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a32:	4a5b      	ldr	r2, [pc, #364]	@ (8002ba0 <HAL_OPAMP_MspInit+0x194>)
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a3a:	4b59      	ldr	r3, [pc, #356]	@ (8002ba0 <HAL_OPAMP_MspInit+0x194>)
 8002a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	623b      	str	r3, [r7, #32]
 8002a44:	6a3b      	ldr	r3, [r7, #32]
    /**OPAMP1 GPIO Configuration
    PA7     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002a46:	2380      	movs	r3, #128	@ 0x80
 8002a48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a56:	4619      	mov	r1, r3
 8002a58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a5c:	f002 fde2 	bl	8005624 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }

}
 8002a60:	e098      	b.n	8002b94 <HAL_OPAMP_MspInit+0x188>
  else if(hopamp->Instance==OPAMP2)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a4f      	ldr	r2, [pc, #316]	@ (8002ba4 <HAL_OPAMP_MspInit+0x198>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d119      	bne.n	8002aa0 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a6c:	4b4c      	ldr	r3, [pc, #304]	@ (8002ba0 <HAL_OPAMP_MspInit+0x194>)
 8002a6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a70:	4a4b      	ldr	r2, [pc, #300]	@ (8002ba0 <HAL_OPAMP_MspInit+0x194>)
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a78:	4b49      	ldr	r3, [pc, #292]	@ (8002ba0 <HAL_OPAMP_MspInit+0x194>)
 8002a7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	61fb      	str	r3, [r7, #28]
 8002a82:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002a84:	2380      	movs	r3, #128	@ 0x80
 8002a86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a94:	4619      	mov	r1, r3
 8002a96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a9a:	f002 fdc3 	bl	8005624 <HAL_GPIO_Init>
}
 8002a9e:	e079      	b.n	8002b94 <HAL_OPAMP_MspInit+0x188>
  else if(hopamp->Instance==OPAMP3)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a40      	ldr	r2, [pc, #256]	@ (8002ba8 <HAL_OPAMP_MspInit+0x19c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d119      	bne.n	8002ade <HAL_OPAMP_MspInit+0xd2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aaa:	4b3d      	ldr	r3, [pc, #244]	@ (8002ba0 <HAL_OPAMP_MspInit+0x194>)
 8002aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aae:	4a3c      	ldr	r2, [pc, #240]	@ (8002ba0 <HAL_OPAMP_MspInit+0x194>)
 8002ab0:	f043 0302 	orr.w	r3, r3, #2
 8002ab4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ab6:	4b3a      	ldr	r3, [pc, #232]	@ (8002ba0 <HAL_OPAMP_MspInit+0x194>)
 8002ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	61bb      	str	r3, [r7, #24]
 8002ac0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002ac2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ac6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ad0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4835      	ldr	r0, [pc, #212]	@ (8002bac <HAL_OPAMP_MspInit+0x1a0>)
 8002ad8:	f002 fda4 	bl	8005624 <HAL_GPIO_Init>
}
 8002adc:	e05a      	b.n	8002b94 <HAL_OPAMP_MspInit+0x188>
  else if(hopamp->Instance==OPAMP4)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a33      	ldr	r2, [pc, #204]	@ (8002bb0 <HAL_OPAMP_MspInit+0x1a4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d119      	bne.n	8002b1c <HAL_OPAMP_MspInit+0x110>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae8:	4b2d      	ldr	r3, [pc, #180]	@ (8002ba0 <HAL_OPAMP_MspInit+0x194>)
 8002aea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aec:	4a2c      	ldr	r2, [pc, #176]	@ (8002ba0 <HAL_OPAMP_MspInit+0x194>)
 8002aee:	f043 0302 	orr.w	r3, r3, #2
 8002af2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002af4:	4b2a      	ldr	r3, [pc, #168]	@ (8002ba0 <HAL_OPAMP_MspInit+0x194>)
 8002af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002b00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b06:	2303      	movs	r3, #3
 8002b08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b12:	4619      	mov	r1, r3
 8002b14:	4825      	ldr	r0, [pc, #148]	@ (8002bac <HAL_OPAMP_MspInit+0x1a0>)
 8002b16:	f002 fd85 	bl	8005624 <HAL_GPIO_Init>
}
 8002b1a:	e03b      	b.n	8002b94 <HAL_OPAMP_MspInit+0x188>
  else if(hopamp->Instance==OPAMP5)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a24      	ldr	r2, [pc, #144]	@ (8002bb4 <HAL_OPAMP_MspInit+0x1a8>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d118      	bne.n	8002b58 <HAL_OPAMP_MspInit+0x14c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b26:	4b1e      	ldr	r3, [pc, #120]	@ (8002ba0 <HAL_OPAMP_MspInit+0x194>)
 8002b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b2a:	4a1d      	ldr	r2, [pc, #116]	@ (8002ba0 <HAL_OPAMP_MspInit+0x194>)
 8002b2c:	f043 0304 	orr.w	r3, r3, #4
 8002b30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b32:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba0 <HAL_OPAMP_MspInit+0x194>)
 8002b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b36:	f003 0304 	and.w	r3, r3, #4
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b3e:	2308      	movs	r3, #8
 8002b40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b42:	2303      	movs	r3, #3
 8002b44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4819      	ldr	r0, [pc, #100]	@ (8002bb8 <HAL_OPAMP_MspInit+0x1ac>)
 8002b52:	f002 fd67 	bl	8005624 <HAL_GPIO_Init>
}
 8002b56:	e01d      	b.n	8002b94 <HAL_OPAMP_MspInit+0x188>
  else if(hopamp->Instance==OPAMP6)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a17      	ldr	r2, [pc, #92]	@ (8002bbc <HAL_OPAMP_MspInit+0x1b0>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d118      	bne.n	8002b94 <HAL_OPAMP_MspInit+0x188>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b62:	4b0f      	ldr	r3, [pc, #60]	@ (8002ba0 <HAL_OPAMP_MspInit+0x194>)
 8002b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b66:	4a0e      	ldr	r2, [pc, #56]	@ (8002ba0 <HAL_OPAMP_MspInit+0x194>)
 8002b68:	f043 0302 	orr.w	r3, r3, #2
 8002b6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba0 <HAL_OPAMP_MspInit+0x194>)
 8002b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002b7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b80:	2303      	movs	r3, #3
 8002b82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4807      	ldr	r0, [pc, #28]	@ (8002bac <HAL_OPAMP_MspInit+0x1a0>)
 8002b90:	f002 fd48 	bl	8005624 <HAL_GPIO_Init>
}
 8002b94:	bf00      	nop
 8002b96:	3738      	adds	r7, #56	@ 0x38
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40010300 	.word	0x40010300
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	40010304 	.word	0x40010304
 8002ba8:	40010308 	.word	0x40010308
 8002bac:	48000400 	.word	0x48000400
 8002bb0:	4001030c 	.word	0x4001030c
 8002bb4:	40010310 	.word	0x40010310
 8002bb8:	48000800 	.word	0x48000800
 8002bbc:	40010314 	.word	0x40010314

08002bc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08a      	sub	sp, #40	@ 0x28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc8:	f107 0314 	add.w	r3, r7, #20
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	605a      	str	r2, [r3, #4]
 8002bd2:	609a      	str	r2, [r3, #8]
 8002bd4:	60da      	str	r2, [r3, #12]
 8002bd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a2c      	ldr	r2, [pc, #176]	@ (8002c90 <HAL_SPI_MspInit+0xd0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d151      	bne.n	8002c86 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002be2:	4b2c      	ldr	r3, [pc, #176]	@ (8002c94 <HAL_SPI_MspInit+0xd4>)
 8002be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be6:	4a2b      	ldr	r2, [pc, #172]	@ (8002c94 <HAL_SPI_MspInit+0xd4>)
 8002be8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bec:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bee:	4b29      	ldr	r3, [pc, #164]	@ (8002c94 <HAL_SPI_MspInit+0xd4>)
 8002bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bf6:	613b      	str	r3, [r7, #16]
 8002bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bfa:	4b26      	ldr	r3, [pc, #152]	@ (8002c94 <HAL_SPI_MspInit+0xd4>)
 8002bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bfe:	4a25      	ldr	r2, [pc, #148]	@ (8002c94 <HAL_SPI_MspInit+0xd4>)
 8002c00:	f043 0304 	orr.w	r3, r3, #4
 8002c04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c06:	4b23      	ldr	r3, [pc, #140]	@ (8002c94 <HAL_SPI_MspInit+0xd4>)
 8002c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c0a:	f003 0304 	and.w	r3, r3, #4
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002c12:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c20:	2300      	movs	r3, #0
 8002c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002c24:	2306      	movs	r3, #6
 8002c26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c28:	f107 0314 	add.w	r3, r7, #20
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	481a      	ldr	r0, [pc, #104]	@ (8002c98 <HAL_SPI_MspInit+0xd8>)
 8002c30:	f002 fcf8 	bl	8005624 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Channel3;
 8002c34:	4b19      	ldr	r3, [pc, #100]	@ (8002c9c <HAL_SPI_MspInit+0xdc>)
 8002c36:	4a1a      	ldr	r2, [pc, #104]	@ (8002ca0 <HAL_SPI_MspInit+0xe0>)
 8002c38:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8002c3a:	4b18      	ldr	r3, [pc, #96]	@ (8002c9c <HAL_SPI_MspInit+0xdc>)
 8002c3c:	220f      	movs	r2, #15
 8002c3e:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c40:	4b16      	ldr	r3, [pc, #88]	@ (8002c9c <HAL_SPI_MspInit+0xdc>)
 8002c42:	2210      	movs	r2, #16
 8002c44:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c46:	4b15      	ldr	r3, [pc, #84]	@ (8002c9c <HAL_SPI_MspInit+0xdc>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c4c:	4b13      	ldr	r3, [pc, #76]	@ (8002c9c <HAL_SPI_MspInit+0xdc>)
 8002c4e:	2280      	movs	r2, #128	@ 0x80
 8002c50:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c52:	4b12      	ldr	r3, [pc, #72]	@ (8002c9c <HAL_SPI_MspInit+0xdc>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c58:	4b10      	ldr	r3, [pc, #64]	@ (8002c9c <HAL_SPI_MspInit+0xdc>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8002c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8002c9c <HAL_SPI_MspInit+0xdc>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c64:	4b0d      	ldr	r3, [pc, #52]	@ (8002c9c <HAL_SPI_MspInit+0xdc>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8002c6a:	480c      	ldr	r0, [pc, #48]	@ (8002c9c <HAL_SPI_MspInit+0xdc>)
 8002c6c:	f002 fa68 	bl	8005140 <HAL_DMA_Init>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8002c76:	f7ff fac3 	bl	8002200 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a07      	ldr	r2, [pc, #28]	@ (8002c9c <HAL_SPI_MspInit+0xdc>)
 8002c7e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002c80:	4a06      	ldr	r2, [pc, #24]	@ (8002c9c <HAL_SPI_MspInit+0xdc>)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8002c86:	bf00      	nop
 8002c88:	3728      	adds	r7, #40	@ 0x28
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40003c00 	.word	0x40003c00
 8002c94:	40021000 	.word	0x40021000
 8002c98:	48000800 	.word	0x48000800
 8002c9c:	2000071c 	.word	0x2000071c
 8002ca0:	40020030 	.word	0x40020030

08002ca4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b090      	sub	sp, #64	@ 0x40
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	60da      	str	r2, [r3, #12]
 8002cba:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a6a      	ldr	r2, [pc, #424]	@ (8002e6c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d128      	bne.n	8002d18 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cc6:	4b6a      	ldr	r3, [pc, #424]	@ (8002e70 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002cc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cca:	4a69      	ldr	r2, [pc, #420]	@ (8002e70 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002ccc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002cd0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002cd2:	4b67      	ldr	r3, [pc, #412]	@ (8002e70 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002cd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cde:	4b64      	ldr	r3, [pc, #400]	@ (8002e70 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ce2:	4a63      	ldr	r2, [pc, #396]	@ (8002e70 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002ce4:	f043 0304 	orr.w	r3, r3, #4
 8002ce8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cea:	4b61      	ldr	r3, [pc, #388]	@ (8002e70 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cee:	f003 0304 	and.w	r3, r3, #4
 8002cf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d02:	2303      	movs	r3, #3
 8002d04:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002d06:	2302      	movs	r3, #2
 8002d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4858      	ldr	r0, [pc, #352]	@ (8002e74 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002d12:	f002 fc87 	bl	8005624 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 8002d16:	e0a4      	b.n	8002e62 <HAL_TIM_Encoder_MspInit+0x1be>
  else if(htim_encoder->Instance==TIM3)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a56      	ldr	r2, [pc, #344]	@ (8002e78 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d128      	bne.n	8002d74 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d22:	4b53      	ldr	r3, [pc, #332]	@ (8002e70 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d26:	4a52      	ldr	r2, [pc, #328]	@ (8002e70 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002d28:	f043 0302 	orr.w	r3, r3, #2
 8002d2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d2e:	4b50      	ldr	r3, [pc, #320]	@ (8002e70 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	623b      	str	r3, [r7, #32]
 8002d38:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d3a:	4b4d      	ldr	r3, [pc, #308]	@ (8002e70 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d3e:	4a4c      	ldr	r2, [pc, #304]	@ (8002e70 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002d40:	f043 0304 	orr.w	r3, r3, #4
 8002d44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d46:	4b4a      	ldr	r3, [pc, #296]	@ (8002e70 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d4a:	f003 0304 	and.w	r3, r3, #4
 8002d4e:	61fb      	str	r3, [r7, #28]
 8002d50:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d52:	23c0      	movs	r3, #192	@ 0xc0
 8002d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d56:	2302      	movs	r3, #2
 8002d58:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d62:	2302      	movs	r3, #2
 8002d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4841      	ldr	r0, [pc, #260]	@ (8002e74 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002d6e:	f002 fc59 	bl	8005624 <HAL_GPIO_Init>
}
 8002d72:	e076      	b.n	8002e62 <HAL_TIM_Encoder_MspInit+0x1be>
  else if(htim_encoder->Instance==TIM4)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a40      	ldr	r2, [pc, #256]	@ (8002e7c <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d128      	bne.n	8002dd0 <HAL_TIM_Encoder_MspInit+0x12c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d7e:	4b3c      	ldr	r3, [pc, #240]	@ (8002e70 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d82:	4a3b      	ldr	r2, [pc, #236]	@ (8002e70 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002d84:	f043 0304 	orr.w	r3, r3, #4
 8002d88:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d8a:	4b39      	ldr	r3, [pc, #228]	@ (8002e70 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d8e:	f003 0304 	and.w	r3, r3, #4
 8002d92:	61bb      	str	r3, [r7, #24]
 8002d94:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d96:	4b36      	ldr	r3, [pc, #216]	@ (8002e70 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d9a:	4a35      	ldr	r2, [pc, #212]	@ (8002e70 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002d9c:	f043 0302 	orr.w	r3, r3, #2
 8002da0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002da2:	4b33      	ldr	r3, [pc, #204]	@ (8002e70 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002dae:	23c0      	movs	r3, #192	@ 0xc0
 8002db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db2:	2302      	movs	r3, #2
 8002db4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002db6:	2301      	movs	r3, #1
 8002db8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	482d      	ldr	r0, [pc, #180]	@ (8002e80 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8002dca:	f002 fc2b 	bl	8005624 <HAL_GPIO_Init>
}
 8002dce:	e048      	b.n	8002e62 <HAL_TIM_Encoder_MspInit+0x1be>
  else if(htim_encoder->Instance==TIM20)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a2b      	ldr	r2, [pc, #172]	@ (8002e84 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d143      	bne.n	8002e62 <HAL_TIM_Encoder_MspInit+0x1be>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8002dda:	4b25      	ldr	r3, [pc, #148]	@ (8002e70 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002ddc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dde:	4a24      	ldr	r2, [pc, #144]	@ (8002e70 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002de0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002de4:	6613      	str	r3, [r2, #96]	@ 0x60
 8002de6:	4b22      	ldr	r3, [pc, #136]	@ (8002e70 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002df2:	4b1f      	ldr	r3, [pc, #124]	@ (8002e70 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002df6:	4a1e      	ldr	r2, [pc, #120]	@ (8002e70 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002df8:	f043 0304 	orr.w	r3, r3, #4
 8002dfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8002e70 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e0a:	4b19      	ldr	r3, [pc, #100]	@ (8002e70 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e0e:	4a18      	ldr	r2, [pc, #96]	@ (8002e70 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002e10:	f043 0302 	orr.w	r3, r3, #2
 8002e14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e16:	4b16      	ldr	r3, [pc, #88]	@ (8002e70 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	60bb      	str	r3, [r7, #8]
 8002e20:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e22:	2304      	movs	r3, #4
 8002e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e26:	2302      	movs	r3, #2
 8002e28:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8002e32:	2306      	movs	r3, #6
 8002e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	480d      	ldr	r0, [pc, #52]	@ (8002e74 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002e3e:	f002 fbf1 	bl	8005624 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e42:	2304      	movs	r3, #4
 8002e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e46:	2302      	movs	r3, #2
 8002e48:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8002e52:	2303      	movs	r3, #3
 8002e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4808      	ldr	r0, [pc, #32]	@ (8002e80 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8002e5e:	f002 fbe1 	bl	8005624 <HAL_GPIO_Init>
}
 8002e62:	bf00      	nop
 8002e64:	3740      	adds	r7, #64	@ 0x40
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40012c00 	.word	0x40012c00
 8002e70:	40021000 	.word	0x40021000
 8002e74:	48000800 	.word	0x48000800
 8002e78:	40000400 	.word	0x40000400
 8002e7c:	40000800 	.word	0x40000800
 8002e80:	48000400 	.word	0x48000400
 8002e84:	40015000 	.word	0x40015000

08002e88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a3d      	ldr	r2, [pc, #244]	@ (8002f8c <HAL_TIM_Base_MspInit+0x104>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d137      	bne.n	8002f0a <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002e9a:	4b3d      	ldr	r3, [pc, #244]	@ (8002f90 <HAL_TIM_Base_MspInit+0x108>)
 8002e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e9e:	4a3c      	ldr	r2, [pc, #240]	@ (8002f90 <HAL_TIM_Base_MspInit+0x108>)
 8002ea0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002ea4:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ea6:	4b3a      	ldr	r3, [pc, #232]	@ (8002f90 <HAL_TIM_Base_MspInit+0x108>)
 8002ea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 DMA Init */
    /* TIM8_CH3 Init */
    hdma_tim8_ch3.Instance = DMA1_Channel1;
 8002eb2:	4b38      	ldr	r3, [pc, #224]	@ (8002f94 <HAL_TIM_Base_MspInit+0x10c>)
 8002eb4:	4a38      	ldr	r2, [pc, #224]	@ (8002f98 <HAL_TIM_Base_MspInit+0x110>)
 8002eb6:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch3.Init.Request = DMA_REQUEST_TIM8_CH3;
 8002eb8:	4b36      	ldr	r3, [pc, #216]	@ (8002f94 <HAL_TIM_Base_MspInit+0x10c>)
 8002eba:	2233      	movs	r2, #51	@ 0x33
 8002ebc:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ebe:	4b35      	ldr	r3, [pc, #212]	@ (8002f94 <HAL_TIM_Base_MspInit+0x10c>)
 8002ec0:	2210      	movs	r2, #16
 8002ec2:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ec4:	4b33      	ldr	r3, [pc, #204]	@ (8002f94 <HAL_TIM_Base_MspInit+0x10c>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002eca:	4b32      	ldr	r3, [pc, #200]	@ (8002f94 <HAL_TIM_Base_MspInit+0x10c>)
 8002ecc:	2280      	movs	r2, #128	@ 0x80
 8002ece:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ed0:	4b30      	ldr	r3, [pc, #192]	@ (8002f94 <HAL_TIM_Base_MspInit+0x10c>)
 8002ed2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ed6:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ed8:	4b2e      	ldr	r3, [pc, #184]	@ (8002f94 <HAL_TIM_Base_MspInit+0x10c>)
 8002eda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ede:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch3.Init.Mode = DMA_NORMAL;
 8002ee0:	4b2c      	ldr	r3, [pc, #176]	@ (8002f94 <HAL_TIM_Base_MspInit+0x10c>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002ee6:	4b2b      	ldr	r3, [pc, #172]	@ (8002f94 <HAL_TIM_Base_MspInit+0x10c>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim8_ch3) != HAL_OK)
 8002eec:	4829      	ldr	r0, [pc, #164]	@ (8002f94 <HAL_TIM_Base_MspInit+0x10c>)
 8002eee:	f002 f927 	bl	8005140 <HAL_DMA_Init>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8002ef8:	f7ff f982 	bl	8002200 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim8_ch3);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a25      	ldr	r2, [pc, #148]	@ (8002f94 <HAL_TIM_Base_MspInit+0x10c>)
 8002f00:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002f02:	4a24      	ldr	r2, [pc, #144]	@ (8002f94 <HAL_TIM_Base_MspInit+0x10c>)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002f08:	e03b      	b.n	8002f82 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM15)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a23      	ldr	r2, [pc, #140]	@ (8002f9c <HAL_TIM_Base_MspInit+0x114>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d136      	bne.n	8002f82 <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002f14:	4b1e      	ldr	r3, [pc, #120]	@ (8002f90 <HAL_TIM_Base_MspInit+0x108>)
 8002f16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f18:	4a1d      	ldr	r2, [pc, #116]	@ (8002f90 <HAL_TIM_Base_MspInit+0x108>)
 8002f1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f1e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f20:	4b1b      	ldr	r3, [pc, #108]	@ (8002f90 <HAL_TIM_Base_MspInit+0x108>)
 8002f22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f28:	60bb      	str	r3, [r7, #8]
 8002f2a:	68bb      	ldr	r3, [r7, #8]
    hdma_tim15_ch1.Instance = DMA1_Channel2;
 8002f2c:	4b1c      	ldr	r3, [pc, #112]	@ (8002fa0 <HAL_TIM_Base_MspInit+0x118>)
 8002f2e:	4a1d      	ldr	r2, [pc, #116]	@ (8002fa4 <HAL_TIM_Base_MspInit+0x11c>)
 8002f30:	601a      	str	r2, [r3, #0]
    hdma_tim15_ch1.Init.Request = DMA_REQUEST_TIM15_CH1;
 8002f32:	4b1b      	ldr	r3, [pc, #108]	@ (8002fa0 <HAL_TIM_Base_MspInit+0x118>)
 8002f34:	224e      	movs	r2, #78	@ 0x4e
 8002f36:	605a      	str	r2, [r3, #4]
    hdma_tim15_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f38:	4b19      	ldr	r3, [pc, #100]	@ (8002fa0 <HAL_TIM_Base_MspInit+0x118>)
 8002f3a:	2210      	movs	r2, #16
 8002f3c:	609a      	str	r2, [r3, #8]
    hdma_tim15_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f3e:	4b18      	ldr	r3, [pc, #96]	@ (8002fa0 <HAL_TIM_Base_MspInit+0x118>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	60da      	str	r2, [r3, #12]
    hdma_tim15_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002f44:	4b16      	ldr	r3, [pc, #88]	@ (8002fa0 <HAL_TIM_Base_MspInit+0x118>)
 8002f46:	2280      	movs	r2, #128	@ 0x80
 8002f48:	611a      	str	r2, [r3, #16]
    hdma_tim15_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f4a:	4b15      	ldr	r3, [pc, #84]	@ (8002fa0 <HAL_TIM_Base_MspInit+0x118>)
 8002f4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f50:	615a      	str	r2, [r3, #20]
    hdma_tim15_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f52:	4b13      	ldr	r3, [pc, #76]	@ (8002fa0 <HAL_TIM_Base_MspInit+0x118>)
 8002f54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f58:	619a      	str	r2, [r3, #24]
    hdma_tim15_ch1.Init.Mode = DMA_NORMAL;
 8002f5a:	4b11      	ldr	r3, [pc, #68]	@ (8002fa0 <HAL_TIM_Base_MspInit+0x118>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	61da      	str	r2, [r3, #28]
    hdma_tim15_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002f60:	4b0f      	ldr	r3, [pc, #60]	@ (8002fa0 <HAL_TIM_Base_MspInit+0x118>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim15_ch1) != HAL_OK)
 8002f66:	480e      	ldr	r0, [pc, #56]	@ (8002fa0 <HAL_TIM_Base_MspInit+0x118>)
 8002f68:	f002 f8ea 	bl	8005140 <HAL_DMA_Init>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_TIM_Base_MspInit+0xee>
      Error_Handler();
 8002f72:	f7ff f945 	bl	8002200 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a09      	ldr	r2, [pc, #36]	@ (8002fa0 <HAL_TIM_Base_MspInit+0x118>)
 8002f7a:	625a      	str	r2, [r3, #36]	@ 0x24
 8002f7c:	4a08      	ldr	r2, [pc, #32]	@ (8002fa0 <HAL_TIM_Base_MspInit+0x118>)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8002f82:	bf00      	nop
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40013400 	.word	0x40013400
 8002f90:	40021000 	.word	0x40021000
 8002f94:	20000944 	.word	0x20000944
 8002f98:	40020008 	.word	0x40020008
 8002f9c:	40014000 	.word	0x40014000
 8002fa0:	200009a4 	.word	0x200009a4
 8002fa4:	4002001c 	.word	0x4002001c

08002fa8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08a      	sub	sp, #40	@ 0x28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb0:	f107 0314 	add.w	r3, r7, #20
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	605a      	str	r2, [r3, #4]
 8002fba:	609a      	str	r2, [r3, #8]
 8002fbc:	60da      	str	r2, [r3, #12]
 8002fbe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a32      	ldr	r2, [pc, #200]	@ (8003090 <HAL_TIM_MspPostInit+0xe8>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d13b      	bne.n	8003042 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fca:	4b32      	ldr	r3, [pc, #200]	@ (8003094 <HAL_TIM_MspPostInit+0xec>)
 8002fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fce:	4a31      	ldr	r2, [pc, #196]	@ (8003094 <HAL_TIM_MspPostInit+0xec>)
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fd6:	4b2f      	ldr	r3, [pc, #188]	@ (8003094 <HAL_TIM_MspPostInit+0xec>)
 8002fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	613b      	str	r3, [r7, #16]
 8002fe0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fe2:	4b2c      	ldr	r3, [pc, #176]	@ (8003094 <HAL_TIM_MspPostInit+0xec>)
 8002fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fe6:	4a2b      	ldr	r2, [pc, #172]	@ (8003094 <HAL_TIM_MspPostInit+0xec>)
 8002fe8:	f043 0302 	orr.w	r3, r3, #2
 8002fec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fee:	4b29      	ldr	r3, [pc, #164]	@ (8003094 <HAL_TIM_MspPostInit+0xec>)
 8002ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PA15     ------> TIM8_CH1
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002ffa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003000:	2302      	movs	r3, #2
 8003002:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003004:	2302      	movs	r3, #2
 8003006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003008:	2303      	movs	r3, #3
 800300a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 800300c:	2302      	movs	r3, #2
 800300e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003010:	f107 0314 	add.w	r3, r7, #20
 8003014:	4619      	mov	r1, r3
 8003016:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800301a:	f002 fb03 	bl	8005624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800301e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003024:	2302      	movs	r3, #2
 8003026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003028:	2302      	movs	r3, #2
 800302a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800302c:	2303      	movs	r3, #3
 800302e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8003030:	230a      	movs	r3, #10
 8003032:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003034:	f107 0314 	add.w	r3, r7, #20
 8003038:	4619      	mov	r1, r3
 800303a:	4817      	ldr	r0, [pc, #92]	@ (8003098 <HAL_TIM_MspPostInit+0xf0>)
 800303c:	f002 faf2 	bl	8005624 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8003040:	e021      	b.n	8003086 <HAL_TIM_MspPostInit+0xde>
  else if(htim->Instance==TIM15)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a15      	ldr	r2, [pc, #84]	@ (800309c <HAL_TIM_MspPostInit+0xf4>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d11c      	bne.n	8003086 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800304c:	4b11      	ldr	r3, [pc, #68]	@ (8003094 <HAL_TIM_MspPostInit+0xec>)
 800304e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003050:	4a10      	ldr	r2, [pc, #64]	@ (8003094 <HAL_TIM_MspPostInit+0xec>)
 8003052:	f043 0302 	orr.w	r3, r3, #2
 8003056:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003058:	4b0e      	ldr	r3, [pc, #56]	@ (8003094 <HAL_TIM_MspPostInit+0xec>)
 800305a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	60bb      	str	r3, [r7, #8]
 8003062:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003064:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306a:	2302      	movs	r3, #2
 800306c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800306e:	2301      	movs	r3, #1
 8003070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003072:	2303      	movs	r3, #3
 8003074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8003076:	2301      	movs	r3, #1
 8003078:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800307a:	f107 0314 	add.w	r3, r7, #20
 800307e:	4619      	mov	r1, r3
 8003080:	4805      	ldr	r0, [pc, #20]	@ (8003098 <HAL_TIM_MspPostInit+0xf0>)
 8003082:	f002 facf 	bl	8005624 <HAL_GPIO_Init>
}
 8003086:	bf00      	nop
 8003088:	3728      	adds	r7, #40	@ 0x28
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40013400 	.word	0x40013400
 8003094:	40021000 	.word	0x40021000
 8003098:	48000400 	.word	0x48000400
 800309c:	40014000 	.word	0x40014000

080030a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80030a4:	f005 fce4 	bl	8008a70 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80030a8:	bf00      	nop
 80030aa:	e7fd      	b.n	80030a8 <NMI_Handler+0x8>

080030ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030b0:	bf00      	nop
 80030b2:	e7fd      	b.n	80030b0 <HardFault_Handler+0x4>

080030b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030b8:	bf00      	nop
 80030ba:	e7fd      	b.n	80030b8 <MemManage_Handler+0x4>

080030bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030c0:	bf00      	nop
 80030c2:	e7fd      	b.n	80030c0 <BusFault_Handler+0x4>

080030c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030c8:	bf00      	nop
 80030ca:	e7fd      	b.n	80030c8 <UsageFault_Handler+0x4>

080030cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030d0:	bf00      	nop
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030da:	b480      	push	{r7}
 80030dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030de:	bf00      	nop
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030ec:	bf00      	nop
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030fa:	f000 fa15 	bl	8003528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}

08003102 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003106:	2001      	movs	r0, #1
 8003108:	f002 fc26 	bl	8005958 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800310c:	bf00      	nop
 800310e:	bd80      	pop	{r7, pc}

08003110 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003114:	2002      	movs	r0, #2
 8003116:	f002 fc1f 	bl	8005958 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800311a:	bf00      	nop
 800311c:	bd80      	pop	{r7, pc}

0800311e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003122:	2004      	movs	r0, #4
 8003124:	f002 fc18 	bl	8005958 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003128:	bf00      	nop
 800312a:	bd80      	pop	{r7, pc}

0800312c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003130:	2008      	movs	r0, #8
 8003132:	f002 fc11 	bl	8005958 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003136:	bf00      	nop
 8003138:	bd80      	pop	{r7, pc}

0800313a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800313e:	2010      	movs	r0, #16
 8003140:	f002 fc0a 	bl	8005958 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003144:	bf00      	nop
 8003146:	bd80      	pop	{r7, pc}

08003148 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch3);
 800314c:	4802      	ldr	r0, [pc, #8]	@ (8003158 <DMA1_Channel1_IRQHandler+0x10>)
 800314e:	f002 f91a 	bl	8005386 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003152:	bf00      	nop
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	20000944 	.word	0x20000944

0800315c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim15_ch1);
 8003160:	4802      	ldr	r0, [pc, #8]	@ (800316c <DMA1_Channel2_IRQHandler+0x10>)
 8003162:	f002 f910 	bl	8005386 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003166:	bf00      	nop
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	200009a4 	.word	0x200009a4

08003170 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8003174:	4802      	ldr	r0, [pc, #8]	@ (8003180 <DMA1_Channel3_IRQHandler+0x10>)
 8003176:	f002 f906 	bl	8005386 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800317a:	bf00      	nop
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	2000071c 	.word	0x2000071c

08003184 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003188:	4802      	ldr	r0, [pc, #8]	@ (8003194 <USB_LP_IRQHandler+0x10>)
 800318a:	f003 fab4 	bl	80066f6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800318e:	bf00      	nop
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20002570 	.word	0x20002570

08003198 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800319c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80031a0:	f002 fbda 	bl	8005958 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80031a4:	bf00      	nop
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	  FT6336_GetTouchPoint(&TouchPoints);
 80031ac:	4808      	ldr	r0, [pc, #32]	@ (80031d0 <EXTI15_10_IRQHandler+0x28>)
 80031ae:	f7fd ff9f 	bl	80010f0 <FT6336_GetTouchPoint>

	  ST7789_DrawPixel(TouchPoints.point1_x, TouchPoints.point1_y, 0xffffff);
 80031b2:	4b07      	ldr	r3, [pc, #28]	@ (80031d0 <EXTI15_10_IRQHandler+0x28>)
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	4a06      	ldr	r2, [pc, #24]	@ (80031d0 <EXTI15_10_IRQHandler+0x28>)
 80031b8:	8851      	ldrh	r1, [r2, #2]
 80031ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff f9f0 	bl	80025a4 <ST7789_DrawPixel>


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80031c4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80031c8:	f002 fbc6 	bl	8005958 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80031cc:	bf00      	nop
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	20000370 	.word	0x20000370

080031d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  return 1;
 80031d8:	2301      	movs	r3, #1
}
 80031da:	4618      	mov	r0, r3
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <_kill>:

int _kill(int pid, int sig)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031ee:	f00d fff1 	bl	80111d4 <__errno>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2216      	movs	r2, #22
 80031f6:	601a      	str	r2, [r3, #0]
  return -1;
 80031f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <_exit>:

void _exit (int status)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800320c:	f04f 31ff 	mov.w	r1, #4294967295
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7ff ffe7 	bl	80031e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003216:	bf00      	nop
 8003218:	e7fd      	b.n	8003216 <_exit+0x12>

0800321a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b086      	sub	sp, #24
 800321e:	af00      	add	r7, sp, #0
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	60b9      	str	r1, [r7, #8]
 8003224:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
 800322a:	e00a      	b.n	8003242 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800322c:	f3af 8000 	nop.w
 8003230:	4601      	mov	r1, r0
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	60ba      	str	r2, [r7, #8]
 8003238:	b2ca      	uxtb	r2, r1
 800323a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	3301      	adds	r3, #1
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	429a      	cmp	r2, r3
 8003248:	dbf0      	blt.n	800322c <_read+0x12>
  }

  return len;
 800324a:	687b      	ldr	r3, [r7, #4]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	e009      	b.n	800327a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	1c5a      	adds	r2, r3, #1
 800326a:	60ba      	str	r2, [r7, #8]
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	3301      	adds	r3, #1
 8003278:	617b      	str	r3, [r7, #20]
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	429a      	cmp	r2, r3
 8003280:	dbf1      	blt.n	8003266 <_write+0x12>
  }
  return len;
 8003282:	687b      	ldr	r3, [r7, #4]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <_close>:

int _close(int file)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003294:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003298:	4618      	mov	r0, r3
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80032b4:	605a      	str	r2, [r3, #4]
  return 0;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <_isatty>:

int _isatty(int file)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80032cc:	2301      	movs	r3, #1
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032da:	b480      	push	{r7}
 80032dc:	b085      	sub	sp, #20
 80032de:	af00      	add	r7, sp, #0
 80032e0:	60f8      	str	r0, [r7, #12]
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032fc:	4a14      	ldr	r2, [pc, #80]	@ (8003350 <_sbrk+0x5c>)
 80032fe:	4b15      	ldr	r3, [pc, #84]	@ (8003354 <_sbrk+0x60>)
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003308:	4b13      	ldr	r3, [pc, #76]	@ (8003358 <_sbrk+0x64>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d102      	bne.n	8003316 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003310:	4b11      	ldr	r3, [pc, #68]	@ (8003358 <_sbrk+0x64>)
 8003312:	4a12      	ldr	r2, [pc, #72]	@ (800335c <_sbrk+0x68>)
 8003314:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003316:	4b10      	ldr	r3, [pc, #64]	@ (8003358 <_sbrk+0x64>)
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4413      	add	r3, r2
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	429a      	cmp	r2, r3
 8003322:	d207      	bcs.n	8003334 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003324:	f00d ff56 	bl	80111d4 <__errno>
 8003328:	4603      	mov	r3, r0
 800332a:	220c      	movs	r2, #12
 800332c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800332e:	f04f 33ff 	mov.w	r3, #4294967295
 8003332:	e009      	b.n	8003348 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003334:	4b08      	ldr	r3, [pc, #32]	@ (8003358 <_sbrk+0x64>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800333a:	4b07      	ldr	r3, [pc, #28]	@ (8003358 <_sbrk+0x64>)
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4413      	add	r3, r2
 8003342:	4a05      	ldr	r2, [pc, #20]	@ (8003358 <_sbrk+0x64>)
 8003344:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003346:	68fb      	ldr	r3, [r7, #12]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	20020000 	.word	0x20020000
 8003354:	00000400 	.word	0x00000400
 8003358:	20001684 	.word	0x20001684
 800335c:	20002bb8 	.word	0x20002bb8

08003360 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003364:	4b06      	ldr	r3, [pc, #24]	@ (8003380 <SystemInit+0x20>)
 8003366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800336a:	4a05      	ldr	r2, [pc, #20]	@ (8003380 <SystemInit+0x20>)
 800336c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003370:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003374:	bf00      	nop
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	e000ed00 	.word	0xe000ed00

08003384 <WS2812_Write_Data>:
 * @param  Color:颜色24bit of RGB888
 * @param  index:灯的标号
 * @return None
 */
void WS2812_Write_Data(uint32_t Color, uint8_t index)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < 24; i++)
 8003390:	2300      	movs	r3, #0
 8003392:	73fb      	strb	r3, [r7, #15]
 8003394:	e018      	b.n	80033c8 <WS2812_Write_Data+0x44>
		WS2812_Buf[24 * index + i] = (((Color << i) & 0X800000) ? High_Code : Low_Code);
 8003396:	7bfb      	ldrb	r3, [r7, #15]
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <WS2812_Write_Data+0x26>
 80033a6:	215a      	movs	r1, #90	@ 0x5a
 80033a8:	e000      	b.n	80033ac <WS2812_Write_Data+0x28>
 80033aa:	212d      	movs	r1, #45	@ 0x2d
 80033ac:	78fa      	ldrb	r2, [r7, #3]
 80033ae:	4613      	mov	r3, r2
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	4413      	add	r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	461a      	mov	r2, r3
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
 80033ba:	4413      	add	r3, r2
 80033bc:	4a07      	ldr	r2, [pc, #28]	@ (80033dc <WS2812_Write_Data+0x58>)
 80033be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < 24; i++)
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
 80033c4:	3301      	adds	r3, #1
 80033c6:	73fb      	strb	r3, [r7, #15]
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
 80033ca:	2b17      	cmp	r3, #23
 80033cc:	d9e3      	bls.n	8003396 <WS2812_Write_Data+0x12>
}
 80033ce:	bf00      	nop
 80033d0:	bf00      	nop
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	20001688 	.word	0x20001688

080033e0 <WS2812_Set_All>:
 * @brief  所有灯数据更新
 * @param  Color:颜色24bit of RGB888
 * @return None
 */
void WS2812_Set_All(uint32_t Color)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
	/*循环写入所有灯珠数组*/
	for(uint8_t index = 0; index < WS2812_NUM; index++)
 80033e8:	2300      	movs	r3, #0
 80033ea:	73fb      	strb	r3, [r7, #15]
 80033ec:	e007      	b.n	80033fe <WS2812_Set_All+0x1e>
		WS2812_Write_Data(Color,index);
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
 80033f0:	4619      	mov	r1, r3
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7ff ffc6 	bl	8003384 <WS2812_Write_Data>
	for(uint8_t index = 0; index < WS2812_NUM; index++)
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
 80033fa:	3301      	adds	r3, #1
 80033fc:	73fb      	strb	r3, [r7, #15]
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
 8003400:	2b09      	cmp	r3, #9
 8003402:	d9f4      	bls.n	80033ee <WS2812_Set_All+0xe>
}
 8003404:	bf00      	nop
 8003406:	bf00      	nop
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
	...

08003410 <WS2812_Update>:
 * @brief  WS2812更新指令
 * @param  None
 * @return None
 */
void WS2812_Update(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&WS2812_TIM,WS2812_CHANNEL,(uint32_t *)WS2812_Buf,WS2812_BUF_SIZE);
 8003414:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8003418:	4a03      	ldr	r2, [pc, #12]	@ (8003428 <WS2812_Update+0x18>)
 800341a:	2108      	movs	r1, #8
 800341c:	4803      	ldr	r0, [pc, #12]	@ (800342c <WS2812_Update+0x1c>)
 800341e:	f006 fcb5 	bl	8009d8c <HAL_TIM_PWM_Start_DMA>
}
 8003422:	bf00      	nop
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	20001688 	.word	0x20001688
 800342c:	20000860 	.word	0x20000860

08003430 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003430:	480d      	ldr	r0, [pc, #52]	@ (8003468 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003432:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003434:	f7ff ff94 	bl	8003360 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003438:	480c      	ldr	r0, [pc, #48]	@ (800346c <LoopForever+0x6>)
  ldr r1, =_edata
 800343a:	490d      	ldr	r1, [pc, #52]	@ (8003470 <LoopForever+0xa>)
  ldr r2, =_sidata
 800343c:	4a0d      	ldr	r2, [pc, #52]	@ (8003474 <LoopForever+0xe>)
  movs r3, #0
 800343e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003440:	e002      	b.n	8003448 <LoopCopyDataInit>

08003442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003446:	3304      	adds	r3, #4

08003448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800344a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800344c:	d3f9      	bcc.n	8003442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800344e:	4a0a      	ldr	r2, [pc, #40]	@ (8003478 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003450:	4c0a      	ldr	r4, [pc, #40]	@ (800347c <LoopForever+0x16>)
  movs r3, #0
 8003452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003454:	e001      	b.n	800345a <LoopFillZerobss>

08003456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003458:	3204      	adds	r2, #4

0800345a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800345a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800345c:	d3fb      	bcc.n	8003456 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800345e:	f00d febf 	bl	80111e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003462:	f7fd feb3 	bl	80011cc <main>

08003466 <LoopForever>:

LoopForever:
    b LoopForever
 8003466:	e7fe      	b.n	8003466 <LoopForever>
  ldr   r0, =_estack
 8003468:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800346c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003470:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8003474:	08014e58 	.word	0x08014e58
  ldr r2, =_sbss
 8003478:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 800347c:	20002bb8 	.word	0x20002bb8

08003480 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003480:	e7fe      	b.n	8003480 <ADC1_2_IRQHandler>

08003482 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003488:	2300      	movs	r3, #0
 800348a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800348c:	2003      	movs	r0, #3
 800348e:	f001 fc3b 	bl	8004d08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003492:	200f      	movs	r0, #15
 8003494:	f000 f80e 	bl	80034b4 <HAL_InitTick>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	71fb      	strb	r3, [r7, #7]
 80034a2:	e001      	b.n	80034a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80034a4:	f7ff f8aa 	bl	80025fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80034a8:	79fb      	ldrb	r3, [r7, #7]

}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80034bc:	2300      	movs	r3, #0
 80034be:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80034c0:	4b16      	ldr	r3, [pc, #88]	@ (800351c <HAL_InitTick+0x68>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d022      	beq.n	800350e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80034c8:	4b15      	ldr	r3, [pc, #84]	@ (8003520 <HAL_InitTick+0x6c>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4b13      	ldr	r3, [pc, #76]	@ (800351c <HAL_InitTick+0x68>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80034d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80034d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034dc:	4618      	mov	r0, r3
 80034de:	f001 fc46 	bl	8004d6e <HAL_SYSTICK_Config>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10f      	bne.n	8003508 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b0f      	cmp	r3, #15
 80034ec:	d809      	bhi.n	8003502 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034ee:	2200      	movs	r2, #0
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	f04f 30ff 	mov.w	r0, #4294967295
 80034f6:	f001 fc12 	bl	8004d1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003524 <HAL_InitTick+0x70>)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6013      	str	r3, [r2, #0]
 8003500:	e007      	b.n	8003512 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	73fb      	strb	r3, [r7, #15]
 8003506:	e004      	b.n	8003512 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	73fb      	strb	r3, [r7, #15]
 800350c:	e001      	b.n	8003512 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003512:	7bfb      	ldrb	r3, [r7, #15]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	20000010 	.word	0x20000010
 8003520:	20000008 	.word	0x20000008
 8003524:	2000000c 	.word	0x2000000c

08003528 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800352c:	4b05      	ldr	r3, [pc, #20]	@ (8003544 <HAL_IncTick+0x1c>)
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	4b05      	ldr	r3, [pc, #20]	@ (8003548 <HAL_IncTick+0x20>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4413      	add	r3, r2
 8003536:	4a03      	ldr	r2, [pc, #12]	@ (8003544 <HAL_IncTick+0x1c>)
 8003538:	6013      	str	r3, [r2, #0]
}
 800353a:	bf00      	nop
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	20001898 	.word	0x20001898
 8003548:	20000010 	.word	0x20000010

0800354c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  return uwTick;
 8003550:	4b03      	ldr	r3, [pc, #12]	@ (8003560 <HAL_GetTick+0x14>)
 8003552:	681b      	ldr	r3, [r3, #0]
}
 8003554:	4618      	mov	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	20001898 	.word	0x20001898

08003564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800356c:	f7ff ffee 	bl	800354c <HAL_GetTick>
 8003570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357c:	d004      	beq.n	8003588 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800357e:	4b09      	ldr	r3, [pc, #36]	@ (80035a4 <HAL_Delay+0x40>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	4413      	add	r3, r2
 8003586:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003588:	bf00      	nop
 800358a:	f7ff ffdf 	bl	800354c <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	429a      	cmp	r2, r3
 8003598:	d8f7      	bhi.n	800358a <HAL_Delay+0x26>
  {
  }
}
 800359a:	bf00      	nop
 800359c:	bf00      	nop
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	20000010 	.word	0x20000010

080035a8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80035b0:	4b06      	ldr	r3, [pc, #24]	@ (80035cc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f023 0202 	bic.w	r2, r3, #2
 80035b8:	4904      	ldr	r1, [pc, #16]	@ (80035cc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4313      	orrs	r3, r2
 80035be:	600b      	str	r3, [r1, #0]
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr
 80035cc:	40010030 	.word	0x40010030

080035d0 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80035d4:	4b05      	ldr	r3, [pc, #20]	@ (80035ec <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a04      	ldr	r2, [pc, #16]	@ (80035ec <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80035da:	f023 0301 	bic.w	r3, r3, #1
 80035de:	6013      	str	r3, [r2, #0]
}
 80035e0:	bf00      	nop
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	40010030 	.word	0x40010030

080035f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	431a      	orrs	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	609a      	str	r2, [r3, #8]
}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
 800361e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	609a      	str	r2, [r3, #8]
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800364c:	4618      	mov	r0, r3
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003658:	b480      	push	{r7}
 800365a:	b087      	sub	sp, #28
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
 8003664:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	3360      	adds	r3, #96	@ 0x60
 800366a:	461a      	mov	r2, r3
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	4b08      	ldr	r3, [pc, #32]	@ (800369c <LL_ADC_SetOffset+0x44>)
 800367a:	4013      	ands	r3, r2
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	4313      	orrs	r3, r2
 8003688:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003690:	bf00      	nop
 8003692:	371c      	adds	r7, #28
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	03fff000 	.word	0x03fff000

080036a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	3360      	adds	r3, #96	@ 0x60
 80036ae:	461a      	mov	r2, r3
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3714      	adds	r7, #20
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	3360      	adds	r3, #96	@ 0x60
 80036dc:	461a      	mov	r2, r3
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4413      	add	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	431a      	orrs	r2, r3
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80036f6:	bf00      	nop
 80036f8:	371c      	adds	r7, #28
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003702:	b480      	push	{r7}
 8003704:	b087      	sub	sp, #28
 8003706:	af00      	add	r7, sp, #0
 8003708:	60f8      	str	r0, [r7, #12]
 800370a:	60b9      	str	r1, [r7, #8]
 800370c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	3360      	adds	r3, #96	@ 0x60
 8003712:	461a      	mov	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	431a      	orrs	r2, r3
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800372c:	bf00      	nop
 800372e:	371c      	adds	r7, #28
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003738:	b480      	push	{r7}
 800373a:	b087      	sub	sp, #28
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	3360      	adds	r3, #96	@ 0x60
 8003748:	461a      	mov	r2, r3
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	431a      	orrs	r2, r3
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003762:	bf00      	nop
 8003764:	371c      	adds	r7, #28
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800376e:	b480      	push	{r7}
 8003770:	b083      	sub	sp, #12
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	431a      	orrs	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	615a      	str	r2, [r3, #20]
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	3330      	adds	r3, #48	@ 0x30
 80037a4:	461a      	mov	r2, r3
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	0a1b      	lsrs	r3, r3, #8
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	f003 030c 	and.w	r3, r3, #12
 80037b0:	4413      	add	r3, r2
 80037b2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	f003 031f 	and.w	r3, r3, #31
 80037be:	211f      	movs	r1, #31
 80037c0:	fa01 f303 	lsl.w	r3, r1, r3
 80037c4:	43db      	mvns	r3, r3
 80037c6:	401a      	ands	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	0e9b      	lsrs	r3, r3, #26
 80037cc:	f003 011f 	and.w	r1, r3, #31
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f003 031f 	and.w	r3, r3, #31
 80037d6:	fa01 f303 	lsl.w	r3, r1, r3
 80037da:	431a      	orrs	r2, r3
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80037e0:	bf00      	nop
 80037e2:	371c      	adds	r7, #28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	3314      	adds	r3, #20
 80037fc:	461a      	mov	r2, r3
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	0e5b      	lsrs	r3, r3, #25
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	4413      	add	r3, r2
 800380a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	0d1b      	lsrs	r3, r3, #20
 8003814:	f003 031f 	and.w	r3, r3, #31
 8003818:	2107      	movs	r1, #7
 800381a:	fa01 f303 	lsl.w	r3, r1, r3
 800381e:	43db      	mvns	r3, r3
 8003820:	401a      	ands	r2, r3
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	0d1b      	lsrs	r3, r3, #20
 8003826:	f003 031f 	and.w	r3, r3, #31
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	fa01 f303 	lsl.w	r3, r1, r3
 8003830:	431a      	orrs	r2, r3
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003836:	bf00      	nop
 8003838:	371c      	adds	r7, #28
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
	...

08003844 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800385c:	43db      	mvns	r3, r3
 800385e:	401a      	ands	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f003 0318 	and.w	r3, r3, #24
 8003866:	4908      	ldr	r1, [pc, #32]	@ (8003888 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003868:	40d9      	lsrs	r1, r3
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	400b      	ands	r3, r1
 800386e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003872:	431a      	orrs	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800387a:	bf00      	nop
 800387c:	3714      	adds	r7, #20
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	0007ffff 	.word	0x0007ffff

0800388c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800389c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6093      	str	r3, [r2, #8]
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038c4:	d101      	bne.n	80038ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80038c6:	2301      	movs	r3, #1
 80038c8:	e000      	b.n	80038cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80038e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80038ec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003910:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003914:	d101      	bne.n	800391a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b01      	cmp	r3, #1
 800393a:	d101      	bne.n	8003940 <LL_ADC_IsEnabled+0x18>
 800393c:	2301      	movs	r3, #1
 800393e:	e000      	b.n	8003942 <LL_ADC_IsEnabled+0x1a>
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 0304 	and.w	r3, r3, #4
 800395e:	2b04      	cmp	r3, #4
 8003960:	d101      	bne.n	8003966 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	2b08      	cmp	r3, #8
 8003986:	d101      	bne.n	800398c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
	...

0800399c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800399c:	b590      	push	{r4, r7, lr}
 800399e:	b089      	sub	sp, #36	@ 0x24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80039a8:	2300      	movs	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e1a9      	b.n	8003d0a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d109      	bne.n	80039d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7fe fe41 	bl	800264c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff ff67 	bl	80038b0 <LL_ADC_IsDeepPowerDownEnabled>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d004      	beq.n	80039f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7ff ff4d 	bl	800388c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff ff82 	bl	8003900 <LL_ADC_IsInternalRegulatorEnabled>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d115      	bne.n	8003a2e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff ff66 	bl	80038d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a0c:	4b9c      	ldr	r3, [pc, #624]	@ (8003c80 <HAL_ADC_Init+0x2e4>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	099b      	lsrs	r3, r3, #6
 8003a12:	4a9c      	ldr	r2, [pc, #624]	@ (8003c84 <HAL_ADC_Init+0x2e8>)
 8003a14:	fba2 2303 	umull	r2, r3, r2, r3
 8003a18:	099b      	lsrs	r3, r3, #6
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003a20:	e002      	b.n	8003a28 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	3b01      	subs	r3, #1
 8003a26:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f9      	bne.n	8003a22 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff ff64 	bl	8003900 <LL_ADC_IsInternalRegulatorEnabled>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10d      	bne.n	8003a5a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a42:	f043 0210 	orr.w	r2, r3, #16
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a4e:	f043 0201 	orr.w	r2, r3, #1
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7ff ff75 	bl	800394e <LL_ADC_REG_IsConversionOngoing>
 8003a64:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a6a:	f003 0310 	and.w	r3, r3, #16
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f040 8142 	bne.w	8003cf8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f040 813e 	bne.w	8003cf8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a80:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003a84:	f043 0202 	orr.w	r2, r3, #2
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff ff49 	bl	8003928 <LL_ADC_IsEnabled>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d141      	bne.n	8003b20 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003aa4:	d004      	beq.n	8003ab0 <HAL_ADC_Init+0x114>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a77      	ldr	r2, [pc, #476]	@ (8003c88 <HAL_ADC_Init+0x2ec>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d10f      	bne.n	8003ad0 <HAL_ADC_Init+0x134>
 8003ab0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003ab4:	f7ff ff38 	bl	8003928 <LL_ADC_IsEnabled>
 8003ab8:	4604      	mov	r4, r0
 8003aba:	4873      	ldr	r0, [pc, #460]	@ (8003c88 <HAL_ADC_Init+0x2ec>)
 8003abc:	f7ff ff34 	bl	8003928 <LL_ADC_IsEnabled>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	4323      	orrs	r3, r4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	bf0c      	ite	eq
 8003ac8:	2301      	moveq	r3, #1
 8003aca:	2300      	movne	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	e012      	b.n	8003af6 <HAL_ADC_Init+0x15a>
 8003ad0:	486e      	ldr	r0, [pc, #440]	@ (8003c8c <HAL_ADC_Init+0x2f0>)
 8003ad2:	f7ff ff29 	bl	8003928 <LL_ADC_IsEnabled>
 8003ad6:	4604      	mov	r4, r0
 8003ad8:	486d      	ldr	r0, [pc, #436]	@ (8003c90 <HAL_ADC_Init+0x2f4>)
 8003ada:	f7ff ff25 	bl	8003928 <LL_ADC_IsEnabled>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	431c      	orrs	r4, r3
 8003ae2:	486c      	ldr	r0, [pc, #432]	@ (8003c94 <HAL_ADC_Init+0x2f8>)
 8003ae4:	f7ff ff20 	bl	8003928 <LL_ADC_IsEnabled>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	4323      	orrs	r3, r4
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	bf0c      	ite	eq
 8003af0:	2301      	moveq	r3, #1
 8003af2:	2300      	movne	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d012      	beq.n	8003b20 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b02:	d004      	beq.n	8003b0e <HAL_ADC_Init+0x172>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a5f      	ldr	r2, [pc, #380]	@ (8003c88 <HAL_ADC_Init+0x2ec>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d101      	bne.n	8003b12 <HAL_ADC_Init+0x176>
 8003b0e:	4a62      	ldr	r2, [pc, #392]	@ (8003c98 <HAL_ADC_Init+0x2fc>)
 8003b10:	e000      	b.n	8003b14 <HAL_ADC_Init+0x178>
 8003b12:	4a62      	ldr	r2, [pc, #392]	@ (8003c9c <HAL_ADC_Init+0x300>)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	4619      	mov	r1, r3
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	f7ff fd68 	bl	80035f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	7f5b      	ldrb	r3, [r3, #29]
 8003b24:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b2a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003b30:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003b36:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b3e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b40:	4313      	orrs	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d106      	bne.n	8003b5c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b52:	3b01      	subs	r3, #1
 8003b54:	045b      	lsls	r3, r3, #17
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d009      	beq.n	8003b78 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b68:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b70:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68da      	ldr	r2, [r3, #12]
 8003b7e:	4b48      	ldr	r3, [pc, #288]	@ (8003ca0 <HAL_ADC_Init+0x304>)
 8003b80:	4013      	ands	r3, r2
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6812      	ldr	r2, [r2, #0]
 8003b86:	69b9      	ldr	r1, [r7, #24]
 8003b88:	430b      	orrs	r3, r1
 8003b8a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7ff fee4 	bl	8003974 <LL_ADC_INJ_IsConversionOngoing>
 8003bac:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d17f      	bne.n	8003cb4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d17c      	bne.n	8003cb4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003bbe:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003bc6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003bd6:	f023 0302 	bic.w	r3, r3, #2
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6812      	ldr	r2, [r2, #0]
 8003bde:	69b9      	ldr	r1, [r7, #24]
 8003be0:	430b      	orrs	r3, r1
 8003be2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d017      	beq.n	8003c1c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	691a      	ldr	r2, [r3, #16]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003bfa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003c04:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003c08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6911      	ldr	r1, [r2, #16]
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6812      	ldr	r2, [r2, #0]
 8003c14:	430b      	orrs	r3, r1
 8003c16:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003c1a:	e013      	b.n	8003c44 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691a      	ldr	r2, [r3, #16]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003c2a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6812      	ldr	r2, [r2, #0]
 8003c38:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003c3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c40:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d12a      	bne.n	8003ca4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003c58:	f023 0304 	bic.w	r3, r3, #4
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003c64:	4311      	orrs	r1, r2
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003c6a:	4311      	orrs	r1, r2
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c70:	430a      	orrs	r2, r1
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f042 0201 	orr.w	r2, r2, #1
 8003c7c:	611a      	str	r2, [r3, #16]
 8003c7e:	e019      	b.n	8003cb4 <HAL_ADC_Init+0x318>
 8003c80:	20000008 	.word	0x20000008
 8003c84:	053e2d63 	.word	0x053e2d63
 8003c88:	50000100 	.word	0x50000100
 8003c8c:	50000400 	.word	0x50000400
 8003c90:	50000500 	.word	0x50000500
 8003c94:	50000600 	.word	0x50000600
 8003c98:	50000300 	.word	0x50000300
 8003c9c:	50000700 	.word	0x50000700
 8003ca0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	691a      	ldr	r2, [r3, #16]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0201 	bic.w	r2, r2, #1
 8003cb2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d10c      	bne.n	8003cd6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc2:	f023 010f 	bic.w	r1, r3, #15
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	1e5a      	subs	r2, r3, #1
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	631a      	str	r2, [r3, #48]	@ 0x30
 8003cd4:	e007      	b.n	8003ce6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 020f 	bic.w	r2, r2, #15
 8003ce4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cea:	f023 0303 	bic.w	r3, r3, #3
 8003cee:	f043 0201 	orr.w	r2, r3, #1
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003cf6:	e007      	b.n	8003d08 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cfc:	f043 0210 	orr.w	r2, r3, #16
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d08:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3724      	adds	r7, #36	@ 0x24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd90      	pop	{r4, r7, pc}
 8003d12:	bf00      	nop

08003d14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b0b6      	sub	sp, #216	@ 0xd8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003d24:	2300      	movs	r3, #0
 8003d26:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d102      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x24>
 8003d32:	2302      	movs	r3, #2
 8003d34:	f000 bc13 	b.w	800455e <HAL_ADC_ConfigChannel+0x84a>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff fe02 	bl	800394e <LL_ADC_REG_IsConversionOngoing>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f040 83f3 	bne.w	8004538 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6818      	ldr	r0, [r3, #0]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	6859      	ldr	r1, [r3, #4]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	f7ff fd18 	bl	8003794 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff fdf0 	bl	800394e <LL_ADC_REG_IsConversionOngoing>
 8003d6e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff fdfc 	bl	8003974 <LL_ADC_INJ_IsConversionOngoing>
 8003d7c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d80:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f040 81d9 	bne.w	800413c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f040 81d4 	bne.w	800413c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d9c:	d10f      	bne.n	8003dbe <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6818      	ldr	r0, [r3, #0]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2200      	movs	r2, #0
 8003da8:	4619      	mov	r1, r3
 8003daa:	f7ff fd1f 	bl	80037ec <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff fcd9 	bl	800376e <LL_ADC_SetSamplingTimeCommonConfig>
 8003dbc:	e00e      	b.n	8003ddc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6818      	ldr	r0, [r3, #0]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	6819      	ldr	r1, [r3, #0]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	f7ff fd0e 	bl	80037ec <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7ff fcc9 	bl	800376e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	695a      	ldr	r2, [r3, #20]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	08db      	lsrs	r3, r3, #3
 8003de8:	f003 0303 	and.w	r3, r3, #3
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	fa02 f303 	lsl.w	r3, r2, r3
 8003df2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d022      	beq.n	8003e44 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6818      	ldr	r0, [r3, #0]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	6919      	ldr	r1, [r3, #16]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003e0e:	f7ff fc23 	bl	8003658 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6818      	ldr	r0, [r3, #0]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	6919      	ldr	r1, [r3, #16]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	f7ff fc6f 	bl	8003702 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6818      	ldr	r0, [r3, #0]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d102      	bne.n	8003e3a <HAL_ADC_ConfigChannel+0x126>
 8003e34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e38:	e000      	b.n	8003e3c <HAL_ADC_ConfigChannel+0x128>
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	f7ff fc7b 	bl	8003738 <LL_ADC_SetOffsetSaturation>
 8003e42:	e17b      	b.n	800413c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2100      	movs	r1, #0
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff fc28 	bl	80036a0 <LL_ADC_GetOffsetChannel>
 8003e50:	4603      	mov	r3, r0
 8003e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10a      	bne.n	8003e70 <HAL_ADC_ConfigChannel+0x15c>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2100      	movs	r1, #0
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff fc1d 	bl	80036a0 <LL_ADC_GetOffsetChannel>
 8003e66:	4603      	mov	r3, r0
 8003e68:	0e9b      	lsrs	r3, r3, #26
 8003e6a:	f003 021f 	and.w	r2, r3, #31
 8003e6e:	e01e      	b.n	8003eae <HAL_ADC_ConfigChannel+0x19a>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2100      	movs	r1, #0
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7ff fc12 	bl	80036a0 <LL_ADC_GetOffsetChannel>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e82:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003e86:	fa93 f3a3 	rbit	r3, r3
 8003e8a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003e92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003e96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003e9e:	2320      	movs	r3, #32
 8003ea0:	e004      	b.n	8003eac <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003ea2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ea6:	fab3 f383 	clz	r3, r3
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d105      	bne.n	8003ec6 <HAL_ADC_ConfigChannel+0x1b2>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	0e9b      	lsrs	r3, r3, #26
 8003ec0:	f003 031f 	and.w	r3, r3, #31
 8003ec4:	e018      	b.n	8003ef8 <HAL_ADC_ConfigChannel+0x1e4>
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ece:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003ed2:	fa93 f3a3 	rbit	r3, r3
 8003ed6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003eda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ede:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003ee2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003eea:	2320      	movs	r3, #32
 8003eec:	e004      	b.n	8003ef8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003eee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003ef2:	fab3 f383 	clz	r3, r3
 8003ef6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d106      	bne.n	8003f0a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2200      	movs	r2, #0
 8003f02:	2100      	movs	r1, #0
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7ff fbe1 	bl	80036cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2101      	movs	r1, #1
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff fbc5 	bl	80036a0 <LL_ADC_GetOffsetChannel>
 8003f16:	4603      	mov	r3, r0
 8003f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10a      	bne.n	8003f36 <HAL_ADC_ConfigChannel+0x222>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2101      	movs	r1, #1
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7ff fbba 	bl	80036a0 <LL_ADC_GetOffsetChannel>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	0e9b      	lsrs	r3, r3, #26
 8003f30:	f003 021f 	and.w	r2, r3, #31
 8003f34:	e01e      	b.n	8003f74 <HAL_ADC_ConfigChannel+0x260>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7ff fbaf 	bl	80036a0 <LL_ADC_GetOffsetChannel>
 8003f42:	4603      	mov	r3, r0
 8003f44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f48:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003f4c:	fa93 f3a3 	rbit	r3, r3
 8003f50:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003f54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003f5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003f64:	2320      	movs	r3, #32
 8003f66:	e004      	b.n	8003f72 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003f68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f6c:	fab3 f383 	clz	r3, r3
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d105      	bne.n	8003f8c <HAL_ADC_ConfigChannel+0x278>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	0e9b      	lsrs	r3, r3, #26
 8003f86:	f003 031f 	and.w	r3, r3, #31
 8003f8a:	e018      	b.n	8003fbe <HAL_ADC_ConfigChannel+0x2aa>
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f98:	fa93 f3a3 	rbit	r3, r3
 8003f9c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003fa0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003fa4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003fa8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003fb0:	2320      	movs	r3, #32
 8003fb2:	e004      	b.n	8003fbe <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003fb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003fb8:	fab3 f383 	clz	r3, r3
 8003fbc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d106      	bne.n	8003fd0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	2101      	movs	r1, #1
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7ff fb7e 	bl	80036cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2102      	movs	r1, #2
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7ff fb62 	bl	80036a0 <LL_ADC_GetOffsetChannel>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10a      	bne.n	8003ffc <HAL_ADC_ConfigChannel+0x2e8>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2102      	movs	r1, #2
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff fb57 	bl	80036a0 <LL_ADC_GetOffsetChannel>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	0e9b      	lsrs	r3, r3, #26
 8003ff6:	f003 021f 	and.w	r2, r3, #31
 8003ffa:	e01e      	b.n	800403a <HAL_ADC_ConfigChannel+0x326>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2102      	movs	r1, #2
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff fb4c 	bl	80036a0 <LL_ADC_GetOffsetChannel>
 8004008:	4603      	mov	r3, r0
 800400a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004012:	fa93 f3a3 	rbit	r3, r3
 8004016:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800401a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800401e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004022:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800402a:	2320      	movs	r3, #32
 800402c:	e004      	b.n	8004038 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800402e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004032:	fab3 f383 	clz	r3, r3
 8004036:	b2db      	uxtb	r3, r3
 8004038:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004042:	2b00      	cmp	r3, #0
 8004044:	d105      	bne.n	8004052 <HAL_ADC_ConfigChannel+0x33e>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	0e9b      	lsrs	r3, r3, #26
 800404c:	f003 031f 	and.w	r3, r3, #31
 8004050:	e016      	b.n	8004080 <HAL_ADC_ConfigChannel+0x36c>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800405e:	fa93 f3a3 	rbit	r3, r3
 8004062:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004064:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004066:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800406a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004072:	2320      	movs	r3, #32
 8004074:	e004      	b.n	8004080 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004076:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800407a:	fab3 f383 	clz	r3, r3
 800407e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004080:	429a      	cmp	r2, r3
 8004082:	d106      	bne.n	8004092 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2200      	movs	r2, #0
 800408a:	2102      	movs	r1, #2
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff fb1d 	bl	80036cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2103      	movs	r1, #3
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff fb01 	bl	80036a0 <LL_ADC_GetOffsetChannel>
 800409e:	4603      	mov	r3, r0
 80040a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10a      	bne.n	80040be <HAL_ADC_ConfigChannel+0x3aa>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2103      	movs	r1, #3
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7ff faf6 	bl	80036a0 <LL_ADC_GetOffsetChannel>
 80040b4:	4603      	mov	r3, r0
 80040b6:	0e9b      	lsrs	r3, r3, #26
 80040b8:	f003 021f 	and.w	r2, r3, #31
 80040bc:	e017      	b.n	80040ee <HAL_ADC_ConfigChannel+0x3da>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2103      	movs	r1, #3
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7ff faeb 	bl	80036a0 <LL_ADC_GetOffsetChannel>
 80040ca:	4603      	mov	r3, r0
 80040cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040d0:	fa93 f3a3 	rbit	r3, r3
 80040d4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80040d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040d8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80040da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80040e0:	2320      	movs	r3, #32
 80040e2:	e003      	b.n	80040ec <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80040e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040e6:	fab3 f383 	clz	r3, r3
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d105      	bne.n	8004106 <HAL_ADC_ConfigChannel+0x3f2>
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	0e9b      	lsrs	r3, r3, #26
 8004100:	f003 031f 	and.w	r3, r3, #31
 8004104:	e011      	b.n	800412a <HAL_ADC_ConfigChannel+0x416>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800410e:	fa93 f3a3 	rbit	r3, r3
 8004112:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004114:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004116:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004118:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800411e:	2320      	movs	r3, #32
 8004120:	e003      	b.n	800412a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004122:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004124:	fab3 f383 	clz	r3, r3
 8004128:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800412a:	429a      	cmp	r2, r3
 800412c:	d106      	bne.n	800413c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2200      	movs	r2, #0
 8004134:	2103      	movs	r1, #3
 8004136:	4618      	mov	r0, r3
 8004138:	f7ff fac8 	bl	80036cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4618      	mov	r0, r3
 8004142:	f7ff fbf1 	bl	8003928 <LL_ADC_IsEnabled>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	f040 813d 	bne.w	80043c8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6818      	ldr	r0, [r3, #0]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	6819      	ldr	r1, [r3, #0]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	461a      	mov	r2, r3
 800415c:	f7ff fb72 	bl	8003844 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	4aa2      	ldr	r2, [pc, #648]	@ (80043f0 <HAL_ADC_ConfigChannel+0x6dc>)
 8004166:	4293      	cmp	r3, r2
 8004168:	f040 812e 	bne.w	80043c8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10b      	bne.n	8004194 <HAL_ADC_ConfigChannel+0x480>
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	0e9b      	lsrs	r3, r3, #26
 8004182:	3301      	adds	r3, #1
 8004184:	f003 031f 	and.w	r3, r3, #31
 8004188:	2b09      	cmp	r3, #9
 800418a:	bf94      	ite	ls
 800418c:	2301      	movls	r3, #1
 800418e:	2300      	movhi	r3, #0
 8004190:	b2db      	uxtb	r3, r3
 8004192:	e019      	b.n	80041c8 <HAL_ADC_ConfigChannel+0x4b4>
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800419c:	fa93 f3a3 	rbit	r3, r3
 80041a0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80041a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041a4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80041a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80041ac:	2320      	movs	r3, #32
 80041ae:	e003      	b.n	80041b8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80041b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041b2:	fab3 f383 	clz	r3, r3
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	3301      	adds	r3, #1
 80041ba:	f003 031f 	and.w	r3, r3, #31
 80041be:	2b09      	cmp	r3, #9
 80041c0:	bf94      	ite	ls
 80041c2:	2301      	movls	r3, #1
 80041c4:	2300      	movhi	r3, #0
 80041c6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d079      	beq.n	80042c0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d107      	bne.n	80041e8 <HAL_ADC_ConfigChannel+0x4d4>
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	0e9b      	lsrs	r3, r3, #26
 80041de:	3301      	adds	r3, #1
 80041e0:	069b      	lsls	r3, r3, #26
 80041e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041e6:	e015      	b.n	8004214 <HAL_ADC_ConfigChannel+0x500>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041f0:	fa93 f3a3 	rbit	r3, r3
 80041f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80041f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041f8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80041fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004200:	2320      	movs	r3, #32
 8004202:	e003      	b.n	800420c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004206:	fab3 f383 	clz	r3, r3
 800420a:	b2db      	uxtb	r3, r3
 800420c:	3301      	adds	r3, #1
 800420e:	069b      	lsls	r3, r3, #26
 8004210:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800421c:	2b00      	cmp	r3, #0
 800421e:	d109      	bne.n	8004234 <HAL_ADC_ConfigChannel+0x520>
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	0e9b      	lsrs	r3, r3, #26
 8004226:	3301      	adds	r3, #1
 8004228:	f003 031f 	and.w	r3, r3, #31
 800422c:	2101      	movs	r1, #1
 800422e:	fa01 f303 	lsl.w	r3, r1, r3
 8004232:	e017      	b.n	8004264 <HAL_ADC_ConfigChannel+0x550>
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800423c:	fa93 f3a3 	rbit	r3, r3
 8004240:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004242:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004244:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004246:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800424c:	2320      	movs	r3, #32
 800424e:	e003      	b.n	8004258 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004250:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004252:	fab3 f383 	clz	r3, r3
 8004256:	b2db      	uxtb	r3, r3
 8004258:	3301      	adds	r3, #1
 800425a:	f003 031f 	and.w	r3, r3, #31
 800425e:	2101      	movs	r1, #1
 8004260:	fa01 f303 	lsl.w	r3, r1, r3
 8004264:	ea42 0103 	orr.w	r1, r2, r3
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10a      	bne.n	800428a <HAL_ADC_ConfigChannel+0x576>
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	0e9b      	lsrs	r3, r3, #26
 800427a:	3301      	adds	r3, #1
 800427c:	f003 021f 	and.w	r2, r3, #31
 8004280:	4613      	mov	r3, r2
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	4413      	add	r3, r2
 8004286:	051b      	lsls	r3, r3, #20
 8004288:	e018      	b.n	80042bc <HAL_ADC_ConfigChannel+0x5a8>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004292:	fa93 f3a3 	rbit	r3, r3
 8004296:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800429a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800429c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80042a2:	2320      	movs	r3, #32
 80042a4:	e003      	b.n	80042ae <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80042a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042a8:	fab3 f383 	clz	r3, r3
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	3301      	adds	r3, #1
 80042b0:	f003 021f 	and.w	r2, r3, #31
 80042b4:	4613      	mov	r3, r2
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	4413      	add	r3, r2
 80042ba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042bc:	430b      	orrs	r3, r1
 80042be:	e07e      	b.n	80043be <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d107      	bne.n	80042dc <HAL_ADC_ConfigChannel+0x5c8>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	0e9b      	lsrs	r3, r3, #26
 80042d2:	3301      	adds	r3, #1
 80042d4:	069b      	lsls	r3, r3, #26
 80042d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042da:	e015      	b.n	8004308 <HAL_ADC_ConfigChannel+0x5f4>
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042e4:	fa93 f3a3 	rbit	r3, r3
 80042e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80042ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ec:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80042ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80042f4:	2320      	movs	r3, #32
 80042f6:	e003      	b.n	8004300 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80042f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042fa:	fab3 f383 	clz	r3, r3
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	3301      	adds	r3, #1
 8004302:	069b      	lsls	r3, r3, #26
 8004304:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004310:	2b00      	cmp	r3, #0
 8004312:	d109      	bne.n	8004328 <HAL_ADC_ConfigChannel+0x614>
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	0e9b      	lsrs	r3, r3, #26
 800431a:	3301      	adds	r3, #1
 800431c:	f003 031f 	and.w	r3, r3, #31
 8004320:	2101      	movs	r1, #1
 8004322:	fa01 f303 	lsl.w	r3, r1, r3
 8004326:	e017      	b.n	8004358 <HAL_ADC_ConfigChannel+0x644>
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	fa93 f3a3 	rbit	r3, r3
 8004334:	61fb      	str	r3, [r7, #28]
  return result;
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800433a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004340:	2320      	movs	r3, #32
 8004342:	e003      	b.n	800434c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004346:	fab3 f383 	clz	r3, r3
 800434a:	b2db      	uxtb	r3, r3
 800434c:	3301      	adds	r3, #1
 800434e:	f003 031f 	and.w	r3, r3, #31
 8004352:	2101      	movs	r1, #1
 8004354:	fa01 f303 	lsl.w	r3, r1, r3
 8004358:	ea42 0103 	orr.w	r1, r2, r3
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10d      	bne.n	8004384 <HAL_ADC_ConfigChannel+0x670>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	0e9b      	lsrs	r3, r3, #26
 800436e:	3301      	adds	r3, #1
 8004370:	f003 021f 	and.w	r2, r3, #31
 8004374:	4613      	mov	r3, r2
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	4413      	add	r3, r2
 800437a:	3b1e      	subs	r3, #30
 800437c:	051b      	lsls	r3, r3, #20
 800437e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004382:	e01b      	b.n	80043bc <HAL_ADC_ConfigChannel+0x6a8>
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	fa93 f3a3 	rbit	r3, r3
 8004390:	613b      	str	r3, [r7, #16]
  return result;
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d101      	bne.n	80043a0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800439c:	2320      	movs	r3, #32
 800439e:	e003      	b.n	80043a8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	fab3 f383 	clz	r3, r3
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	3301      	adds	r3, #1
 80043aa:	f003 021f 	and.w	r2, r3, #31
 80043ae:	4613      	mov	r3, r2
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	4413      	add	r3, r2
 80043b4:	3b1e      	subs	r3, #30
 80043b6:	051b      	lsls	r3, r3, #20
 80043b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043bc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043c2:	4619      	mov	r1, r3
 80043c4:	f7ff fa12 	bl	80037ec <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	4b09      	ldr	r3, [pc, #36]	@ (80043f4 <HAL_ADC_ConfigChannel+0x6e0>)
 80043ce:	4013      	ands	r3, r2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 80be 	beq.w	8004552 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043de:	d004      	beq.n	80043ea <HAL_ADC_ConfigChannel+0x6d6>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a04      	ldr	r2, [pc, #16]	@ (80043f8 <HAL_ADC_ConfigChannel+0x6e4>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d10a      	bne.n	8004400 <HAL_ADC_ConfigChannel+0x6ec>
 80043ea:	4b04      	ldr	r3, [pc, #16]	@ (80043fc <HAL_ADC_ConfigChannel+0x6e8>)
 80043ec:	e009      	b.n	8004402 <HAL_ADC_ConfigChannel+0x6ee>
 80043ee:	bf00      	nop
 80043f0:	407f0000 	.word	0x407f0000
 80043f4:	80080000 	.word	0x80080000
 80043f8:	50000100 	.word	0x50000100
 80043fc:	50000300 	.word	0x50000300
 8004400:	4b59      	ldr	r3, [pc, #356]	@ (8004568 <HAL_ADC_ConfigChannel+0x854>)
 8004402:	4618      	mov	r0, r3
 8004404:	f7ff f91a 	bl	800363c <LL_ADC_GetCommonPathInternalCh>
 8004408:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a56      	ldr	r2, [pc, #344]	@ (800456c <HAL_ADC_ConfigChannel+0x858>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d004      	beq.n	8004420 <HAL_ADC_ConfigChannel+0x70c>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a55      	ldr	r2, [pc, #340]	@ (8004570 <HAL_ADC_ConfigChannel+0x85c>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d13a      	bne.n	8004496 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004420:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004424:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d134      	bne.n	8004496 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004434:	d005      	beq.n	8004442 <HAL_ADC_ConfigChannel+0x72e>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a4e      	ldr	r2, [pc, #312]	@ (8004574 <HAL_ADC_ConfigChannel+0x860>)
 800443c:	4293      	cmp	r3, r2
 800443e:	f040 8085 	bne.w	800454c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800444a:	d004      	beq.n	8004456 <HAL_ADC_ConfigChannel+0x742>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a49      	ldr	r2, [pc, #292]	@ (8004578 <HAL_ADC_ConfigChannel+0x864>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d101      	bne.n	800445a <HAL_ADC_ConfigChannel+0x746>
 8004456:	4a49      	ldr	r2, [pc, #292]	@ (800457c <HAL_ADC_ConfigChannel+0x868>)
 8004458:	e000      	b.n	800445c <HAL_ADC_ConfigChannel+0x748>
 800445a:	4a43      	ldr	r2, [pc, #268]	@ (8004568 <HAL_ADC_ConfigChannel+0x854>)
 800445c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004460:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004464:	4619      	mov	r1, r3
 8004466:	4610      	mov	r0, r2
 8004468:	f7ff f8d5 	bl	8003616 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800446c:	4b44      	ldr	r3, [pc, #272]	@ (8004580 <HAL_ADC_ConfigChannel+0x86c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	099b      	lsrs	r3, r3, #6
 8004472:	4a44      	ldr	r2, [pc, #272]	@ (8004584 <HAL_ADC_ConfigChannel+0x870>)
 8004474:	fba2 2303 	umull	r2, r3, r2, r3
 8004478:	099b      	lsrs	r3, r3, #6
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	4613      	mov	r3, r2
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	4413      	add	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004486:	e002      	b.n	800448e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	3b01      	subs	r3, #1
 800448c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1f9      	bne.n	8004488 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004494:	e05a      	b.n	800454c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a3b      	ldr	r2, [pc, #236]	@ (8004588 <HAL_ADC_ConfigChannel+0x874>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d125      	bne.n	80044ec <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80044a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d11f      	bne.n	80044ec <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a31      	ldr	r2, [pc, #196]	@ (8004578 <HAL_ADC_ConfigChannel+0x864>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d104      	bne.n	80044c0 <HAL_ADC_ConfigChannel+0x7ac>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a34      	ldr	r2, [pc, #208]	@ (800458c <HAL_ADC_ConfigChannel+0x878>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d047      	beq.n	8004550 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044c8:	d004      	beq.n	80044d4 <HAL_ADC_ConfigChannel+0x7c0>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a2a      	ldr	r2, [pc, #168]	@ (8004578 <HAL_ADC_ConfigChannel+0x864>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d101      	bne.n	80044d8 <HAL_ADC_ConfigChannel+0x7c4>
 80044d4:	4a29      	ldr	r2, [pc, #164]	@ (800457c <HAL_ADC_ConfigChannel+0x868>)
 80044d6:	e000      	b.n	80044da <HAL_ADC_ConfigChannel+0x7c6>
 80044d8:	4a23      	ldr	r2, [pc, #140]	@ (8004568 <HAL_ADC_ConfigChannel+0x854>)
 80044da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044e2:	4619      	mov	r1, r3
 80044e4:	4610      	mov	r0, r2
 80044e6:	f7ff f896 	bl	8003616 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044ea:	e031      	b.n	8004550 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a27      	ldr	r2, [pc, #156]	@ (8004590 <HAL_ADC_ConfigChannel+0x87c>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d12d      	bne.n	8004552 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80044f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d127      	bne.n	8004552 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a1c      	ldr	r2, [pc, #112]	@ (8004578 <HAL_ADC_ConfigChannel+0x864>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d022      	beq.n	8004552 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004514:	d004      	beq.n	8004520 <HAL_ADC_ConfigChannel+0x80c>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a17      	ldr	r2, [pc, #92]	@ (8004578 <HAL_ADC_ConfigChannel+0x864>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d101      	bne.n	8004524 <HAL_ADC_ConfigChannel+0x810>
 8004520:	4a16      	ldr	r2, [pc, #88]	@ (800457c <HAL_ADC_ConfigChannel+0x868>)
 8004522:	e000      	b.n	8004526 <HAL_ADC_ConfigChannel+0x812>
 8004524:	4a10      	ldr	r2, [pc, #64]	@ (8004568 <HAL_ADC_ConfigChannel+0x854>)
 8004526:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800452a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800452e:	4619      	mov	r1, r3
 8004530:	4610      	mov	r0, r2
 8004532:	f7ff f870 	bl	8003616 <LL_ADC_SetCommonPathInternalCh>
 8004536:	e00c      	b.n	8004552 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800453c:	f043 0220 	orr.w	r2, r3, #32
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800454a:	e002      	b.n	8004552 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800454c:	bf00      	nop
 800454e:	e000      	b.n	8004552 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004550:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800455a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800455e:	4618      	mov	r0, r3
 8004560:	37d8      	adds	r7, #216	@ 0xd8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	50000700 	.word	0x50000700
 800456c:	c3210000 	.word	0xc3210000
 8004570:	90c00010 	.word	0x90c00010
 8004574:	50000600 	.word	0x50000600
 8004578:	50000100 	.word	0x50000100
 800457c:	50000300 	.word	0x50000300
 8004580:	20000008 	.word	0x20000008
 8004584:	053e2d63 	.word	0x053e2d63
 8004588:	c7520000 	.word	0xc7520000
 800458c:	50000500 	.word	0x50000500
 8004590:	cb840000 	.word	0xcb840000

08004594 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800459c:	4b05      	ldr	r3, [pc, #20]	@ (80045b4 <LL_EXTI_EnableIT_0_31+0x20>)
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	4904      	ldr	r1, [pc, #16]	@ (80045b4 <LL_EXTI_EnableIT_0_31+0x20>)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	600b      	str	r3, [r1, #0]
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	40010400 	.word	0x40010400

080045b8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80045c0:	4b05      	ldr	r3, [pc, #20]	@ (80045d8 <LL_EXTI_EnableIT_32_63+0x20>)
 80045c2:	6a1a      	ldr	r2, [r3, #32]
 80045c4:	4904      	ldr	r1, [pc, #16]	@ (80045d8 <LL_EXTI_EnableIT_32_63+0x20>)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	620b      	str	r3, [r1, #32]
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	40010400 	.word	0x40010400

080045dc <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80045e4:	4b06      	ldr	r3, [pc, #24]	@ (8004600 <LL_EXTI_DisableIT_0_31+0x24>)
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	43db      	mvns	r3, r3
 80045ec:	4904      	ldr	r1, [pc, #16]	@ (8004600 <LL_EXTI_DisableIT_0_31+0x24>)
 80045ee:	4013      	ands	r3, r2
 80045f0:	600b      	str	r3, [r1, #0]
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40010400 	.word	0x40010400

08004604 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800460c:	4b06      	ldr	r3, [pc, #24]	@ (8004628 <LL_EXTI_DisableIT_32_63+0x24>)
 800460e:	6a1a      	ldr	r2, [r3, #32]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	43db      	mvns	r3, r3
 8004614:	4904      	ldr	r1, [pc, #16]	@ (8004628 <LL_EXTI_DisableIT_32_63+0x24>)
 8004616:	4013      	ands	r3, r2
 8004618:	620b      	str	r3, [r1, #32]
}
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	40010400 	.word	0x40010400

0800462c <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004634:	4b05      	ldr	r3, [pc, #20]	@ (800464c <LL_EXTI_EnableEvent_0_31+0x20>)
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	4904      	ldr	r1, [pc, #16]	@ (800464c <LL_EXTI_EnableEvent_0_31+0x20>)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4313      	orrs	r3, r2
 800463e:	604b      	str	r3, [r1, #4]

}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr
 800464c:	40010400 	.word	0x40010400

08004650 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8004658:	4b05      	ldr	r3, [pc, #20]	@ (8004670 <LL_EXTI_EnableEvent_32_63+0x20>)
 800465a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800465c:	4904      	ldr	r1, [pc, #16]	@ (8004670 <LL_EXTI_EnableEvent_32_63+0x20>)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4313      	orrs	r3, r2
 8004662:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	40010400 	.word	0x40010400

08004674 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800467c:	4b06      	ldr	r3, [pc, #24]	@ (8004698 <LL_EXTI_DisableEvent_0_31+0x24>)
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	43db      	mvns	r3, r3
 8004684:	4904      	ldr	r1, [pc, #16]	@ (8004698 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004686:	4013      	ands	r3, r2
 8004688:	604b      	str	r3, [r1, #4]
}
 800468a:	bf00      	nop
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	40010400 	.word	0x40010400

0800469c <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80046a4:	4b06      	ldr	r3, [pc, #24]	@ (80046c0 <LL_EXTI_DisableEvent_32_63+0x24>)
 80046a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	43db      	mvns	r3, r3
 80046ac:	4904      	ldr	r1, [pc, #16]	@ (80046c0 <LL_EXTI_DisableEvent_32_63+0x24>)
 80046ae:	4013      	ands	r3, r2
 80046b0:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80046b2:	bf00      	nop
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	40010400 	.word	0x40010400

080046c4 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80046cc:	4b05      	ldr	r3, [pc, #20]	@ (80046e4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	4904      	ldr	r1, [pc, #16]	@ (80046e4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	608b      	str	r3, [r1, #8]

}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr
 80046e4:	40010400 	.word	0x40010400

080046e8 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80046f0:	4b05      	ldr	r3, [pc, #20]	@ (8004708 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80046f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80046f4:	4904      	ldr	r1, [pc, #16]	@ (8004708 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	628b      	str	r3, [r1, #40]	@ 0x28
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	40010400 	.word	0x40010400

0800470c <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004714:	4b06      	ldr	r3, [pc, #24]	@ (8004730 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	43db      	mvns	r3, r3
 800471c:	4904      	ldr	r1, [pc, #16]	@ (8004730 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800471e:	4013      	ands	r3, r2
 8004720:	608b      	str	r3, [r1, #8]

}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	40010400 	.word	0x40010400

08004734 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800473c:	4b06      	ldr	r3, [pc, #24]	@ (8004758 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800473e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	43db      	mvns	r3, r3
 8004744:	4904      	ldr	r1, [pc, #16]	@ (8004758 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8004746:	4013      	ands	r3, r2
 8004748:	628b      	str	r3, [r1, #40]	@ 0x28
}
 800474a:	bf00      	nop
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	40010400 	.word	0x40010400

0800475c <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004764:	4b05      	ldr	r3, [pc, #20]	@ (800477c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	4904      	ldr	r1, [pc, #16]	@ (800477c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4313      	orrs	r3, r2
 800476e:	60cb      	str	r3, [r1, #12]
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	40010400 	.word	0x40010400

08004780 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8004788:	4b05      	ldr	r3, [pc, #20]	@ (80047a0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800478a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800478c:	4904      	ldr	r1, [pc, #16]	@ (80047a0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4313      	orrs	r3, r2
 8004792:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	40010400 	.word	0x40010400

080047a4 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80047ac:	4b06      	ldr	r3, [pc, #24]	@ (80047c8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80047ae:	68da      	ldr	r2, [r3, #12]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	43db      	mvns	r3, r3
 80047b4:	4904      	ldr	r1, [pc, #16]	@ (80047c8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80047b6:	4013      	ands	r3, r2
 80047b8:	60cb      	str	r3, [r1, #12]
}
 80047ba:	bf00      	nop
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	40010400 	.word	0x40010400

080047cc <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80047d4:	4b06      	ldr	r3, [pc, #24]	@ (80047f0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80047d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	43db      	mvns	r3, r3
 80047dc:	4904      	ldr	r1, [pc, #16]	@ (80047f0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80047de:	4013      	ands	r3, r2
 80047e0:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 80047e2:	bf00      	nop
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	40010400 	.word	0x40010400

080047f4 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80047fc:	4a04      	ldr	r2, [pc, #16]	@ (8004810 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6153      	str	r3, [r2, #20]
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	40010400 	.word	0x40010400

08004814 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 800481c:	4a04      	ldr	r2, [pc, #16]	@ (8004830 <LL_EXTI_ClearFlag_32_63+0x1c>)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8004822:	bf00      	nop
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	40010400 	.word	0x40010400

08004834 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b088      	sub	sp, #32
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800483c:	2300      	movs	r3, #0
 800483e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004840:	2300      	movs	r3, #0
 8004842:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d102      	bne.n	8004850 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	77fb      	strb	r3, [r7, #31]
 800484e:	e181      	b.n	8004b54 <HAL_COMP_Init+0x320>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800485a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800485e:	d102      	bne.n	8004866 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	77fb      	strb	r3, [r7, #31]
 8004864:	e176      	b.n	8004b54 <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	7f5b      	ldrb	r3, [r3, #29]
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b00      	cmp	r3, #0
 800486e:	d108      	bne.n	8004882 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f7fd ff3b 	bl	80026f8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800488c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 80048a8:	4313      	orrs	r3, r2
 80048aa:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	4b90      	ldr	r3, [pc, #576]	@ (8004af4 <HAL_COMP_Init+0x2c0>)
 80048b4:	4013      	ands	r3, r2
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	6812      	ldr	r2, [r2, #0]
 80048ba:	6979      	ldr	r1, [r7, #20]
 80048bc:	430b      	orrs	r3, r1
 80048be:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d016      	beq.n	80048fc <HAL_COMP_Init+0xc8>
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d113      	bne.n	80048fc <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80048d4:	4b88      	ldr	r3, [pc, #544]	@ (8004af8 <HAL_COMP_Init+0x2c4>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	099b      	lsrs	r3, r3, #6
 80048da:	4a88      	ldr	r2, [pc, #544]	@ (8004afc <HAL_COMP_Init+0x2c8>)
 80048dc:	fba2 2303 	umull	r2, r3, r2, r3
 80048e0:	099b      	lsrs	r3, r3, #6
 80048e2:	1c5a      	adds	r2, r3, #1
 80048e4:	4613      	mov	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80048ee:	e002      	b.n	80048f6 <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	3b01      	subs	r3, #1
 80048f4:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1f9      	bne.n	80048f0 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a7f      	ldr	r2, [pc, #508]	@ (8004b00 <HAL_COMP_Init+0x2cc>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d028      	beq.n	8004958 <HAL_COMP_Init+0x124>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a7e      	ldr	r2, [pc, #504]	@ (8004b04 <HAL_COMP_Init+0x2d0>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d020      	beq.n	8004952 <HAL_COMP_Init+0x11e>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a7c      	ldr	r2, [pc, #496]	@ (8004b08 <HAL_COMP_Init+0x2d4>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d018      	beq.n	800494c <HAL_COMP_Init+0x118>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a7b      	ldr	r2, [pc, #492]	@ (8004b0c <HAL_COMP_Init+0x2d8>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d010      	beq.n	8004946 <HAL_COMP_Init+0x112>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a79      	ldr	r2, [pc, #484]	@ (8004b10 <HAL_COMP_Init+0x2dc>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d008      	beq.n	8004940 <HAL_COMP_Init+0x10c>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a78      	ldr	r2, [pc, #480]	@ (8004b14 <HAL_COMP_Init+0x2e0>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d101      	bne.n	800493c <HAL_COMP_Init+0x108>
 8004938:	2301      	movs	r3, #1
 800493a:	e00f      	b.n	800495c <HAL_COMP_Init+0x128>
 800493c:	2302      	movs	r3, #2
 800493e:	e00d      	b.n	800495c <HAL_COMP_Init+0x128>
 8004940:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004944:	e00a      	b.n	800495c <HAL_COMP_Init+0x128>
 8004946:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800494a:	e007      	b.n	800495c <HAL_COMP_Init+0x128>
 800494c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004950:	e004      	b.n	800495c <HAL_COMP_Init+0x128>
 8004952:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004956:	e001      	b.n	800495c <HAL_COMP_Init+0x128>
 8004958:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800495c:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	2b00      	cmp	r3, #0
 8004968:	f000 80b6 	beq.w	8004ad8 <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	f003 0310 	and.w	r3, r3, #16
 8004974:	2b00      	cmp	r3, #0
 8004976:	d011      	beq.n	800499c <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a65      	ldr	r2, [pc, #404]	@ (8004b14 <HAL_COMP_Init+0x2e0>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d004      	beq.n	800498c <HAL_COMP_Init+0x158>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a64      	ldr	r2, [pc, #400]	@ (8004b18 <HAL_COMP_Init+0x2e4>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d103      	bne.n	8004994 <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 800498c:	6938      	ldr	r0, [r7, #16]
 800498e:	f7ff feab 	bl	80046e8 <LL_EXTI_EnableRisingTrig_32_63>
 8004992:	e014      	b.n	80049be <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8004994:	6938      	ldr	r0, [r7, #16]
 8004996:	f7ff fe95 	bl	80046c4 <LL_EXTI_EnableRisingTrig_0_31>
 800499a:	e010      	b.n	80049be <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a5c      	ldr	r2, [pc, #368]	@ (8004b14 <HAL_COMP_Init+0x2e0>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d004      	beq.n	80049b0 <HAL_COMP_Init+0x17c>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a5b      	ldr	r2, [pc, #364]	@ (8004b18 <HAL_COMP_Init+0x2e4>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d103      	bne.n	80049b8 <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 80049b0:	6938      	ldr	r0, [r7, #16]
 80049b2:	f7ff febf 	bl	8004734 <LL_EXTI_DisableRisingTrig_32_63>
 80049b6:	e002      	b.n	80049be <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80049b8:	6938      	ldr	r0, [r7, #16]
 80049ba:	f7ff fea7 	bl	800470c <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	f003 0320 	and.w	r3, r3, #32
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d011      	beq.n	80049ee <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a51      	ldr	r2, [pc, #324]	@ (8004b14 <HAL_COMP_Init+0x2e0>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d004      	beq.n	80049de <HAL_COMP_Init+0x1aa>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a4f      	ldr	r2, [pc, #316]	@ (8004b18 <HAL_COMP_Init+0x2e4>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d103      	bne.n	80049e6 <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 80049de:	6938      	ldr	r0, [r7, #16]
 80049e0:	f7ff fece 	bl	8004780 <LL_EXTI_EnableFallingTrig_32_63>
 80049e4:	e014      	b.n	8004a10 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80049e6:	6938      	ldr	r0, [r7, #16]
 80049e8:	f7ff feb8 	bl	800475c <LL_EXTI_EnableFallingTrig_0_31>
 80049ec:	e010      	b.n	8004a10 <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a48      	ldr	r2, [pc, #288]	@ (8004b14 <HAL_COMP_Init+0x2e0>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d004      	beq.n	8004a02 <HAL_COMP_Init+0x1ce>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a46      	ldr	r2, [pc, #280]	@ (8004b18 <HAL_COMP_Init+0x2e4>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d103      	bne.n	8004a0a <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8004a02:	6938      	ldr	r0, [r7, #16]
 8004a04:	f7ff fee2 	bl	80047cc <LL_EXTI_DisableFallingTrig_32_63>
 8004a08:	e002      	b.n	8004a10 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8004a0a:	6938      	ldr	r0, [r7, #16]
 8004a0c:	f7ff feca 	bl	80047a4 <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a3f      	ldr	r2, [pc, #252]	@ (8004b14 <HAL_COMP_Init+0x2e0>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d004      	beq.n	8004a24 <HAL_COMP_Init+0x1f0>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a3e      	ldr	r2, [pc, #248]	@ (8004b18 <HAL_COMP_Init+0x2e4>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d103      	bne.n	8004a2c <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8004a24:	6938      	ldr	r0, [r7, #16]
 8004a26:	f7ff fef5 	bl	8004814 <LL_EXTI_ClearFlag_32_63>
 8004a2a:	e002      	b.n	8004a32 <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8004a2c:	6938      	ldr	r0, [r7, #16]
 8004a2e:	f7ff fee1 	bl	80047f4 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d011      	beq.n	8004a62 <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a34      	ldr	r2, [pc, #208]	@ (8004b14 <HAL_COMP_Init+0x2e0>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d004      	beq.n	8004a52 <HAL_COMP_Init+0x21e>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a32      	ldr	r2, [pc, #200]	@ (8004b18 <HAL_COMP_Init+0x2e4>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d103      	bne.n	8004a5a <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8004a52:	6938      	ldr	r0, [r7, #16]
 8004a54:	f7ff fdfc 	bl	8004650 <LL_EXTI_EnableEvent_32_63>
 8004a58:	e014      	b.n	8004a84 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8004a5a:	6938      	ldr	r0, [r7, #16]
 8004a5c:	f7ff fde6 	bl	800462c <LL_EXTI_EnableEvent_0_31>
 8004a60:	e010      	b.n	8004a84 <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a2b      	ldr	r2, [pc, #172]	@ (8004b14 <HAL_COMP_Init+0x2e0>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d004      	beq.n	8004a76 <HAL_COMP_Init+0x242>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a29      	ldr	r2, [pc, #164]	@ (8004b18 <HAL_COMP_Init+0x2e4>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d103      	bne.n	8004a7e <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8004a76:	6938      	ldr	r0, [r7, #16]
 8004a78:	f7ff fe10 	bl	800469c <LL_EXTI_DisableEvent_32_63>
 8004a7c:	e002      	b.n	8004a84 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8004a7e:	6938      	ldr	r0, [r7, #16]
 8004a80:	f7ff fdf8 	bl	8004674 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d011      	beq.n	8004ab4 <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a1f      	ldr	r2, [pc, #124]	@ (8004b14 <HAL_COMP_Init+0x2e0>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d004      	beq.n	8004aa4 <HAL_COMP_Init+0x270>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a1e      	ldr	r2, [pc, #120]	@ (8004b18 <HAL_COMP_Init+0x2e4>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d103      	bne.n	8004aac <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8004aa4:	6938      	ldr	r0, [r7, #16]
 8004aa6:	f7ff fd87 	bl	80045b8 <LL_EXTI_EnableIT_32_63>
 8004aaa:	e04b      	b.n	8004b44 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8004aac:	6938      	ldr	r0, [r7, #16]
 8004aae:	f7ff fd71 	bl	8004594 <LL_EXTI_EnableIT_0_31>
 8004ab2:	e047      	b.n	8004b44 <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a16      	ldr	r2, [pc, #88]	@ (8004b14 <HAL_COMP_Init+0x2e0>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d004      	beq.n	8004ac8 <HAL_COMP_Init+0x294>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a15      	ldr	r2, [pc, #84]	@ (8004b18 <HAL_COMP_Init+0x2e4>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d103      	bne.n	8004ad0 <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8004ac8:	6938      	ldr	r0, [r7, #16]
 8004aca:	f7ff fd9b 	bl	8004604 <LL_EXTI_DisableIT_32_63>
 8004ace:	e039      	b.n	8004b44 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8004ad0:	6938      	ldr	r0, [r7, #16]
 8004ad2:	f7ff fd83 	bl	80045dc <LL_EXTI_DisableIT_0_31>
 8004ad6:	e035      	b.n	8004b44 <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a0d      	ldr	r2, [pc, #52]	@ (8004b14 <HAL_COMP_Init+0x2e0>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d004      	beq.n	8004aec <HAL_COMP_Init+0x2b8>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a0c      	ldr	r2, [pc, #48]	@ (8004b18 <HAL_COMP_Init+0x2e4>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d117      	bne.n	8004b1c <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8004aec:	6938      	ldr	r0, [r7, #16]
 8004aee:	f7ff fdd5 	bl	800469c <LL_EXTI_DisableEvent_32_63>
 8004af2:	e016      	b.n	8004b22 <HAL_COMP_Init+0x2ee>
 8004af4:	ff007e0f 	.word	0xff007e0f
 8004af8:	20000008 	.word	0x20000008
 8004afc:	053e2d63 	.word	0x053e2d63
 8004b00:	40010200 	.word	0x40010200
 8004b04:	40010204 	.word	0x40010204
 8004b08:	40010208 	.word	0x40010208
 8004b0c:	4001020c 	.word	0x4001020c
 8004b10:	40010210 	.word	0x40010210
 8004b14:	40010214 	.word	0x40010214
 8004b18:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8004b1c:	6938      	ldr	r0, [r7, #16]
 8004b1e:	f7ff fda9 	bl	8004674 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a0e      	ldr	r2, [pc, #56]	@ (8004b60 <HAL_COMP_Init+0x32c>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d004      	beq.n	8004b36 <HAL_COMP_Init+0x302>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a0c      	ldr	r2, [pc, #48]	@ (8004b64 <HAL_COMP_Init+0x330>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d103      	bne.n	8004b3e <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8004b36:	6938      	ldr	r0, [r7, #16]
 8004b38:	f7ff fd64 	bl	8004604 <LL_EXTI_DisableIT_32_63>
 8004b3c:	e002      	b.n	8004b44 <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8004b3e:	6938      	ldr	r0, [r7, #16]
 8004b40:	f7ff fd4c 	bl	80045dc <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	7f5b      	ldrb	r3, [r3, #29]
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d102      	bne.n	8004b54 <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8004b54:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3720      	adds	r7, #32
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	40010214 	.word	0x40010214
 8004b64:	40010218 	.word	0x40010218

08004b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f003 0307 	and.w	r3, r3, #7
 8004b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b78:	4b0c      	ldr	r3, [pc, #48]	@ (8004bac <__NVIC_SetPriorityGrouping+0x44>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b84:	4013      	ands	r3, r2
 8004b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b9a:	4a04      	ldr	r2, [pc, #16]	@ (8004bac <__NVIC_SetPriorityGrouping+0x44>)
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	60d3      	str	r3, [r2, #12]
}
 8004ba0:	bf00      	nop
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	e000ed00 	.word	0xe000ed00

08004bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bb4:	4b04      	ldr	r3, [pc, #16]	@ (8004bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	0a1b      	lsrs	r3, r3, #8
 8004bba:	f003 0307 	and.w	r3, r3, #7
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	e000ed00 	.word	0xe000ed00

08004bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	db0b      	blt.n	8004bf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bde:	79fb      	ldrb	r3, [r7, #7]
 8004be0:	f003 021f 	and.w	r2, r3, #31
 8004be4:	4907      	ldr	r1, [pc, #28]	@ (8004c04 <__NVIC_EnableIRQ+0x38>)
 8004be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	2001      	movs	r0, #1
 8004bee:	fa00 f202 	lsl.w	r2, r0, r2
 8004bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	e000e100 	.word	0xe000e100

08004c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	4603      	mov	r3, r0
 8004c10:	6039      	str	r1, [r7, #0]
 8004c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	db0a      	blt.n	8004c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	490c      	ldr	r1, [pc, #48]	@ (8004c54 <__NVIC_SetPriority+0x4c>)
 8004c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c26:	0112      	lsls	r2, r2, #4
 8004c28:	b2d2      	uxtb	r2, r2
 8004c2a:	440b      	add	r3, r1
 8004c2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c30:	e00a      	b.n	8004c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	4908      	ldr	r1, [pc, #32]	@ (8004c58 <__NVIC_SetPriority+0x50>)
 8004c38:	79fb      	ldrb	r3, [r7, #7]
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	3b04      	subs	r3, #4
 8004c40:	0112      	lsls	r2, r2, #4
 8004c42:	b2d2      	uxtb	r2, r2
 8004c44:	440b      	add	r3, r1
 8004c46:	761a      	strb	r2, [r3, #24]
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	e000e100 	.word	0xe000e100
 8004c58:	e000ed00 	.word	0xe000ed00

08004c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b089      	sub	sp, #36	@ 0x24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f003 0307 	and.w	r3, r3, #7
 8004c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	f1c3 0307 	rsb	r3, r3, #7
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	bf28      	it	cs
 8004c7a:	2304      	movcs	r3, #4
 8004c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	3304      	adds	r3, #4
 8004c82:	2b06      	cmp	r3, #6
 8004c84:	d902      	bls.n	8004c8c <NVIC_EncodePriority+0x30>
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	3b03      	subs	r3, #3
 8004c8a:	e000      	b.n	8004c8e <NVIC_EncodePriority+0x32>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c90:	f04f 32ff 	mov.w	r2, #4294967295
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9a:	43da      	mvns	r2, r3
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	401a      	ands	r2, r3
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	fa01 f303 	lsl.w	r3, r1, r3
 8004cae:	43d9      	mvns	r1, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cb4:	4313      	orrs	r3, r2
         );
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3724      	adds	r7, #36	@ 0x24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
	...

08004cc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cd4:	d301      	bcc.n	8004cda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e00f      	b.n	8004cfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cda:	4a0a      	ldr	r2, [pc, #40]	@ (8004d04 <SysTick_Config+0x40>)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ce2:	210f      	movs	r1, #15
 8004ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce8:	f7ff ff8e 	bl	8004c08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cec:	4b05      	ldr	r3, [pc, #20]	@ (8004d04 <SysTick_Config+0x40>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cf2:	4b04      	ldr	r3, [pc, #16]	@ (8004d04 <SysTick_Config+0x40>)
 8004cf4:	2207      	movs	r2, #7
 8004cf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	e000e010 	.word	0xe000e010

08004d08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7ff ff29 	bl	8004b68 <__NVIC_SetPriorityGrouping>
}
 8004d16:	bf00      	nop
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b086      	sub	sp, #24
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	4603      	mov	r3, r0
 8004d26:	60b9      	str	r1, [r7, #8]
 8004d28:	607a      	str	r2, [r7, #4]
 8004d2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d2c:	f7ff ff40 	bl	8004bb0 <__NVIC_GetPriorityGrouping>
 8004d30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	68b9      	ldr	r1, [r7, #8]
 8004d36:	6978      	ldr	r0, [r7, #20]
 8004d38:	f7ff ff90 	bl	8004c5c <NVIC_EncodePriority>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d42:	4611      	mov	r1, r2
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff ff5f 	bl	8004c08 <__NVIC_SetPriority>
}
 8004d4a:	bf00      	nop
 8004d4c:	3718      	adds	r7, #24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b082      	sub	sp, #8
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	4603      	mov	r3, r0
 8004d5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7ff ff33 	bl	8004bcc <__NVIC_EnableIRQ>
}
 8004d66:	bf00      	nop
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b082      	sub	sp, #8
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7ff ffa4 	bl	8004cc4 <SysTick_Config>
 8004d7c:	4603      	mov	r3, r0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b082      	sub	sp, #8
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e014      	b.n	8004dc2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	791b      	ldrb	r3, [r3, #4]
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d105      	bne.n	8004dae <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f7fd fcfb 	bl	80027a4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2202      	movs	r2, #2
 8004db2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
	...

08004dcc <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b08a      	sub	sp, #40	@ 0x28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d002      	beq.n	8004de8 <HAL_DAC_ConfigChannel+0x1c>
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e1a1      	b.n	8005130 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	795b      	ldrb	r3, [r3, #5]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d101      	bne.n	8004dfe <HAL_DAC_ConfigChannel+0x32>
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	e198      	b.n	8005130 <HAL_DAC_ConfigChannel+0x364>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2201      	movs	r2, #1
 8004e02:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2202      	movs	r2, #2
 8004e08:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	2b04      	cmp	r3, #4
 8004e10:	d17a      	bne.n	8004f08 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004e12:	f7fe fb9b 	bl	800354c <HAL_GetTick>
 8004e16:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d13d      	bne.n	8004e9a <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004e1e:	e018      	b.n	8004e52 <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004e20:	f7fe fb94 	bl	800354c <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d911      	bls.n	8004e52 <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00a      	beq.n	8004e52 <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	f043 0208 	orr.w	r2, r3, #8
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2203      	movs	r2, #3
 8004e4c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e16e      	b.n	8005130 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1df      	bne.n	8004e20 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e68:	641a      	str	r2, [r3, #64]	@ 0x40
 8004e6a:	e020      	b.n	8004eae <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004e6c:	f7fe fb6e 	bl	800354c <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d90f      	bls.n	8004e9a <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	da0a      	bge.n	8004e9a <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	f043 0208 	orr.w	r2, r3, #8
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2203      	movs	r2, #3
 8004e94:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e14a      	b.n	8005130 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	dbe3      	blt.n	8004e6c <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004eac:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f003 0310 	and.w	r3, r3, #16
 8004eba:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec2:	43db      	mvns	r3, r3
 8004ec4:	ea02 0103 	and.w	r1, r2, r3
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f003 0310 	and.w	r3, r3, #16
 8004ed2:	409a      	lsls	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f003 0310 	and.w	r3, r3, #16
 8004ee8:	21ff      	movs	r1, #255	@ 0xff
 8004eea:	fa01 f303 	lsl.w	r3, r1, r3
 8004eee:	43db      	mvns	r3, r3
 8004ef0:	ea02 0103 	and.w	r1, r2, r3
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f003 0310 	and.w	r3, r3, #16
 8004efe:	409a      	lsls	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	69db      	ldr	r3, [r3, #28]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d11d      	bne.n	8004f4c <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f16:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f003 0310 	and.w	r3, r3, #16
 8004f1e:	221f      	movs	r2, #31
 8004f20:	fa02 f303 	lsl.w	r3, r2, r3
 8004f24:	43db      	mvns	r3, r3
 8004f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f28:	4013      	ands	r3, r2
 8004f2a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f003 0310 	and.w	r3, r3, #16
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f40:	4313      	orrs	r3, r2
 8004f42:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f4a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f52:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f003 0310 	and.w	r3, r3, #16
 8004f5a:	2207      	movs	r2, #7
 8004f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f60:	43db      	mvns	r3, r3
 8004f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f64:	4013      	ands	r3, r2
 8004f66:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d102      	bne.n	8004f76 <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8004f70:	2300      	movs	r3, #0
 8004f72:	623b      	str	r3, [r7, #32]
 8004f74:	e00f      	b.n	8004f96 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d102      	bne.n	8004f84 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	623b      	str	r3, [r7, #32]
 8004f82:	e008      	b.n	8004f96 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d102      	bne.n	8004f92 <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	623b      	str	r3, [r7, #32]
 8004f90:	e001      	b.n	8004f96 <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004f92:	2300      	movs	r3, #0
 8004f94:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	689a      	ldr	r2, [r3, #8]
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	6a3a      	ldr	r2, [r7, #32]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f003 0310 	and.w	r3, r3, #16
 8004fac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb4:	43db      	mvns	r3, r3
 8004fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fb8:	4013      	ands	r3, r2
 8004fba:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	791b      	ldrb	r3, [r3, #4]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d102      	bne.n	8004fca <HAL_DAC_ConfigChannel+0x1fe>
 8004fc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004fc8:	e000      	b.n	8004fcc <HAL_DAC_ConfigChannel+0x200>
 8004fca:	2300      	movs	r3, #0
 8004fcc:	697a      	ldr	r2, [r7, #20]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f003 0310 	and.w	r3, r3, #16
 8004fd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe0:	43db      	mvns	r3, r3
 8004fe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	795b      	ldrb	r3, [r3, #5]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d102      	bne.n	8004ff6 <HAL_DAC_ConfigChannel+0x22a>
 8004ff0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ff4:	e000      	b.n	8004ff8 <HAL_DAC_ConfigChannel+0x22c>
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005000:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005004:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2b02      	cmp	r3, #2
 800500c:	d114      	bne.n	8005038 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800500e:	f003 fce7 	bl	80089e0 <HAL_RCC_GetHCLKFreq>
 8005012:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	4a48      	ldr	r2, [pc, #288]	@ (8005138 <HAL_DAC_ConfigChannel+0x36c>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d904      	bls.n	8005026 <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800501c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005022:	627b      	str	r3, [r7, #36]	@ 0x24
 8005024:	e00f      	b.n	8005046 <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	4a44      	ldr	r2, [pc, #272]	@ (800513c <HAL_DAC_ConfigChannel+0x370>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d90a      	bls.n	8005044 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800502e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005030:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005034:	627b      	str	r3, [r7, #36]	@ 0x24
 8005036:	e006      	b.n	8005046 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800503e:	4313      	orrs	r3, r2
 8005040:	627b      	str	r3, [r7, #36]	@ 0x24
 8005042:	e000      	b.n	8005046 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005044:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f003 0310 	and.w	r3, r3, #16
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	fa02 f303 	lsl.w	r3, r2, r3
 8005052:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005054:	4313      	orrs	r3, r2
 8005056:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800505e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6819      	ldr	r1, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f003 0310 	and.w	r3, r3, #16
 800506c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005070:	fa02 f303 	lsl.w	r3, r2, r3
 8005074:	43da      	mvns	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	400a      	ands	r2, r1
 800507c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f003 0310 	and.w	r3, r3, #16
 800508c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005090:	fa02 f303 	lsl.w	r3, r2, r3
 8005094:	43db      	mvns	r3, r3
 8005096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005098:	4013      	ands	r3, r2
 800509a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f003 0310 	and.w	r3, r3, #16
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	fa02 f303 	lsl.w	r3, r2, r3
 80050ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050b0:	4313      	orrs	r3, r2
 80050b2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050ba:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6819      	ldr	r1, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f003 0310 	and.w	r3, r3, #16
 80050c8:	22c0      	movs	r2, #192	@ 0xc0
 80050ca:	fa02 f303 	lsl.w	r3, r2, r3
 80050ce:	43da      	mvns	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	400a      	ands	r2, r1
 80050d6:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	089b      	lsrs	r3, r3, #2
 80050de:	f003 030f 	and.w	r3, r3, #15
 80050e2:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	089b      	lsrs	r3, r3, #2
 80050ea:	021b      	lsls	r3, r3, #8
 80050ec:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f003 0310 	and.w	r3, r3, #16
 8005102:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8005106:	fa01 f303 	lsl.w	r3, r1, r3
 800510a:	43db      	mvns	r3, r3
 800510c:	ea02 0103 	and.w	r1, r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f003 0310 	and.w	r3, r3, #16
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	409a      	lsls	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2201      	movs	r2, #1
 8005126:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800512e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005130:	4618      	mov	r0, r3
 8005132:	3728      	adds	r7, #40	@ 0x28
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	09896800 	.word	0x09896800
 800513c:	04c4b400 	.word	0x04c4b400

08005140 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e08d      	b.n	800526e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	461a      	mov	r2, r3
 8005158:	4b47      	ldr	r3, [pc, #284]	@ (8005278 <HAL_DMA_Init+0x138>)
 800515a:	429a      	cmp	r2, r3
 800515c:	d80f      	bhi.n	800517e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	461a      	mov	r2, r3
 8005164:	4b45      	ldr	r3, [pc, #276]	@ (800527c <HAL_DMA_Init+0x13c>)
 8005166:	4413      	add	r3, r2
 8005168:	4a45      	ldr	r2, [pc, #276]	@ (8005280 <HAL_DMA_Init+0x140>)
 800516a:	fba2 2303 	umull	r2, r3, r2, r3
 800516e:	091b      	lsrs	r3, r3, #4
 8005170:	009a      	lsls	r2, r3, #2
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a42      	ldr	r2, [pc, #264]	@ (8005284 <HAL_DMA_Init+0x144>)
 800517a:	641a      	str	r2, [r3, #64]	@ 0x40
 800517c:	e00e      	b.n	800519c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	461a      	mov	r2, r3
 8005184:	4b40      	ldr	r3, [pc, #256]	@ (8005288 <HAL_DMA_Init+0x148>)
 8005186:	4413      	add	r3, r2
 8005188:	4a3d      	ldr	r2, [pc, #244]	@ (8005280 <HAL_DMA_Init+0x140>)
 800518a:	fba2 2303 	umull	r2, r3, r2, r3
 800518e:	091b      	lsrs	r3, r3, #4
 8005190:	009a      	lsls	r2, r3, #2
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a3c      	ldr	r2, [pc, #240]	@ (800528c <HAL_DMA_Init+0x14c>)
 800519a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2202      	movs	r2, #2
 80051a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80051b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80051c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f9b6 	bl	8005560 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051fc:	d102      	bne.n	8005204 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685a      	ldr	r2, [r3, #4]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800520c:	b2d2      	uxtb	r2, r2
 800520e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005218:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d010      	beq.n	8005244 <HAL_DMA_Init+0x104>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	2b04      	cmp	r3, #4
 8005228:	d80c      	bhi.n	8005244 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f9d6 	bl	80055dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005234:	2200      	movs	r2, #0
 8005236:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005240:	605a      	str	r2, [r3, #4]
 8005242:	e008      	b.n	8005256 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	40020407 	.word	0x40020407
 800527c:	bffdfff8 	.word	0xbffdfff8
 8005280:	cccccccd 	.word	0xcccccccd
 8005284:	40020000 	.word	0x40020000
 8005288:	bffdfbf8 	.word	0xbffdfbf8
 800528c:	40020400 	.word	0x40020400

08005290 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
 800529c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800529e:	2300      	movs	r3, #0
 80052a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d101      	bne.n	80052b0 <HAL_DMA_Start_IT+0x20>
 80052ac:	2302      	movs	r3, #2
 80052ae:	e066      	b.n	800537e <HAL_DMA_Start_IT+0xee>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d155      	bne.n	8005370 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2202      	movs	r2, #2
 80052c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 0201 	bic.w	r2, r2, #1
 80052e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	68b9      	ldr	r1, [r7, #8]
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f000 f8fb 	bl	80054e4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d008      	beq.n	8005308 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f042 020e 	orr.w	r2, r2, #14
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	e00f      	b.n	8005328 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f022 0204 	bic.w	r2, r2, #4
 8005316:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 020a 	orr.w	r2, r2, #10
 8005326:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d007      	beq.n	8005346 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005340:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005344:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800534a:	2b00      	cmp	r3, #0
 800534c:	d007      	beq.n	800535e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005358:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800535c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f042 0201 	orr.w	r2, r2, #1
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	e005      	b.n	800537c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005378:	2302      	movs	r3, #2
 800537a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800537c:	7dfb      	ldrb	r3, [r7, #23]
}
 800537e:	4618      	mov	r0, r3
 8005380:	3718      	adds	r7, #24
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b084      	sub	sp, #16
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053a2:	f003 031f 	and.w	r3, r3, #31
 80053a6:	2204      	movs	r2, #4
 80053a8:	409a      	lsls	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	4013      	ands	r3, r2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d026      	beq.n	8005400 <HAL_DMA_IRQHandler+0x7a>
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	f003 0304 	and.w	r3, r3, #4
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d021      	beq.n	8005400 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0320 	and.w	r3, r3, #32
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d107      	bne.n	80053da <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 0204 	bic.w	r2, r2, #4
 80053d8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053de:	f003 021f 	and.w	r2, r3, #31
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e6:	2104      	movs	r1, #4
 80053e8:	fa01 f202 	lsl.w	r2, r1, r2
 80053ec:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d071      	beq.n	80054da <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80053fe:	e06c      	b.n	80054da <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005404:	f003 031f 	and.w	r3, r3, #31
 8005408:	2202      	movs	r2, #2
 800540a:	409a      	lsls	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	4013      	ands	r3, r2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d02e      	beq.n	8005472 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d029      	beq.n	8005472 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0320 	and.w	r3, r3, #32
 8005428:	2b00      	cmp	r3, #0
 800542a:	d10b      	bne.n	8005444 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 020a 	bic.w	r2, r2, #10
 800543a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005448:	f003 021f 	and.w	r2, r3, #31
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005450:	2102      	movs	r1, #2
 8005452:	fa01 f202 	lsl.w	r2, r1, r2
 8005456:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005464:	2b00      	cmp	r3, #0
 8005466:	d038      	beq.n	80054da <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005470:	e033      	b.n	80054da <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005476:	f003 031f 	and.w	r3, r3, #31
 800547a:	2208      	movs	r2, #8
 800547c:	409a      	lsls	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	4013      	ands	r3, r2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d02a      	beq.n	80054dc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	f003 0308 	and.w	r3, r3, #8
 800548c:	2b00      	cmp	r3, #0
 800548e:	d025      	beq.n	80054dc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f022 020e 	bic.w	r2, r2, #14
 800549e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a4:	f003 021f 	and.w	r2, r3, #31
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ac:	2101      	movs	r1, #1
 80054ae:	fa01 f202 	lsl.w	r2, r1, r2
 80054b2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d004      	beq.n	80054dc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80054da:	bf00      	nop
 80054dc:	bf00      	nop
}
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
 80054f0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80054fa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005500:	2b00      	cmp	r3, #0
 8005502:	d004      	beq.n	800550e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800550c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005512:	f003 021f 	and.w	r2, r3, #31
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800551a:	2101      	movs	r1, #1
 800551c:	fa01 f202 	lsl.w	r2, r1, r2
 8005520:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	683a      	ldr	r2, [r7, #0]
 8005528:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	2b10      	cmp	r3, #16
 8005530:	d108      	bne.n	8005544 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005542:	e007      	b.n	8005554 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68ba      	ldr	r2, [r7, #8]
 800554a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	60da      	str	r2, [r3, #12]
}
 8005554:	bf00      	nop
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005560:	b480      	push	{r7}
 8005562:	b087      	sub	sp, #28
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	461a      	mov	r2, r3
 800556e:	4b16      	ldr	r3, [pc, #88]	@ (80055c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005570:	429a      	cmp	r2, r3
 8005572:	d802      	bhi.n	800557a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005574:	4b15      	ldr	r3, [pc, #84]	@ (80055cc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005576:	617b      	str	r3, [r7, #20]
 8005578:	e001      	b.n	800557e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800557a:	4b15      	ldr	r3, [pc, #84]	@ (80055d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800557c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	b2db      	uxtb	r3, r3
 8005588:	3b08      	subs	r3, #8
 800558a:	4a12      	ldr	r2, [pc, #72]	@ (80055d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800558c:	fba2 2303 	umull	r2, r3, r2, r3
 8005590:	091b      	lsrs	r3, r3, #4
 8005592:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005598:	089b      	lsrs	r3, r3, #2
 800559a:	009a      	lsls	r2, r3, #2
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	4413      	add	r3, r2
 80055a0:	461a      	mov	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a0b      	ldr	r2, [pc, #44]	@ (80055d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80055aa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f003 031f 	and.w	r3, r3, #31
 80055b2:	2201      	movs	r2, #1
 80055b4:	409a      	lsls	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80055ba:	bf00      	nop
 80055bc:	371c      	adds	r7, #28
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	40020407 	.word	0x40020407
 80055cc:	40020800 	.word	0x40020800
 80055d0:	40020820 	.word	0x40020820
 80055d4:	cccccccd 	.word	0xcccccccd
 80055d8:	40020880 	.word	0x40020880

080055dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	4b0b      	ldr	r3, [pc, #44]	@ (800561c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80055f0:	4413      	add	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	461a      	mov	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a08      	ldr	r2, [pc, #32]	@ (8005620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80055fe:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	3b01      	subs	r3, #1
 8005604:	f003 031f 	and.w	r3, r3, #31
 8005608:	2201      	movs	r2, #1
 800560a:	409a      	lsls	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005610:	bf00      	nop
 8005612:	3714      	adds	r7, #20
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	1000823f 	.word	0x1000823f
 8005620:	40020940 	.word	0x40020940

08005624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005624:	b480      	push	{r7}
 8005626:	b087      	sub	sp, #28
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800562e:	2300      	movs	r3, #0
 8005630:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005632:	e15a      	b.n	80058ea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	2101      	movs	r1, #1
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	fa01 f303 	lsl.w	r3, r1, r3
 8005640:	4013      	ands	r3, r2
 8005642:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 814c 	beq.w	80058e4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f003 0303 	and.w	r3, r3, #3
 8005654:	2b01      	cmp	r3, #1
 8005656:	d005      	beq.n	8005664 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005660:	2b02      	cmp	r3, #2
 8005662:	d130      	bne.n	80056c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	2203      	movs	r2, #3
 8005670:	fa02 f303 	lsl.w	r3, r2, r3
 8005674:	43db      	mvns	r3, r3
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	4013      	ands	r3, r2
 800567a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	68da      	ldr	r2, [r3, #12]
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	005b      	lsls	r3, r3, #1
 8005684:	fa02 f303 	lsl.w	r3, r2, r3
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	4313      	orrs	r3, r2
 800568c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800569a:	2201      	movs	r2, #1
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	fa02 f303 	lsl.w	r3, r2, r3
 80056a2:	43db      	mvns	r3, r3
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	4013      	ands	r3, r2
 80056a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	091b      	lsrs	r3, r3, #4
 80056b0:	f003 0201 	and.w	r2, r3, #1
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	4313      	orrs	r3, r2
 80056be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f003 0303 	and.w	r3, r3, #3
 80056ce:	2b03      	cmp	r3, #3
 80056d0:	d017      	beq.n	8005702 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	2203      	movs	r2, #3
 80056de:	fa02 f303 	lsl.w	r3, r2, r3
 80056e2:	43db      	mvns	r3, r3
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	4013      	ands	r3, r2
 80056e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	689a      	ldr	r2, [r3, #8]
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	005b      	lsls	r3, r3, #1
 80056f2:	fa02 f303 	lsl.w	r3, r2, r3
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f003 0303 	and.w	r3, r3, #3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d123      	bne.n	8005756 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	08da      	lsrs	r2, r3, #3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	3208      	adds	r2, #8
 8005716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800571a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	220f      	movs	r2, #15
 8005726:	fa02 f303 	lsl.w	r3, r2, r3
 800572a:	43db      	mvns	r3, r3
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4013      	ands	r3, r2
 8005730:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	691a      	ldr	r2, [r3, #16]
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f003 0307 	and.w	r3, r3, #7
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	fa02 f303 	lsl.w	r3, r2, r3
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	4313      	orrs	r3, r2
 8005746:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	08da      	lsrs	r2, r3, #3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	3208      	adds	r2, #8
 8005750:	6939      	ldr	r1, [r7, #16]
 8005752:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	005b      	lsls	r3, r3, #1
 8005760:	2203      	movs	r2, #3
 8005762:	fa02 f303 	lsl.w	r3, r2, r3
 8005766:	43db      	mvns	r3, r3
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	4013      	ands	r3, r2
 800576c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f003 0203 	and.w	r2, r3, #3
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	fa02 f303 	lsl.w	r3, r2, r3
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	4313      	orrs	r3, r2
 8005782:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 80a6 	beq.w	80058e4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005798:	4b5b      	ldr	r3, [pc, #364]	@ (8005908 <HAL_GPIO_Init+0x2e4>)
 800579a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800579c:	4a5a      	ldr	r2, [pc, #360]	@ (8005908 <HAL_GPIO_Init+0x2e4>)
 800579e:	f043 0301 	orr.w	r3, r3, #1
 80057a2:	6613      	str	r3, [r2, #96]	@ 0x60
 80057a4:	4b58      	ldr	r3, [pc, #352]	@ (8005908 <HAL_GPIO_Init+0x2e4>)
 80057a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	60bb      	str	r3, [r7, #8]
 80057ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057b0:	4a56      	ldr	r2, [pc, #344]	@ (800590c <HAL_GPIO_Init+0x2e8>)
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	089b      	lsrs	r3, r3, #2
 80057b6:	3302      	adds	r3, #2
 80057b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f003 0303 	and.w	r3, r3, #3
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	220f      	movs	r2, #15
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	43db      	mvns	r3, r3
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	4013      	ands	r3, r2
 80057d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80057da:	d01f      	beq.n	800581c <HAL_GPIO_Init+0x1f8>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a4c      	ldr	r2, [pc, #304]	@ (8005910 <HAL_GPIO_Init+0x2ec>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d019      	beq.n	8005818 <HAL_GPIO_Init+0x1f4>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a4b      	ldr	r2, [pc, #300]	@ (8005914 <HAL_GPIO_Init+0x2f0>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d013      	beq.n	8005814 <HAL_GPIO_Init+0x1f0>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a4a      	ldr	r2, [pc, #296]	@ (8005918 <HAL_GPIO_Init+0x2f4>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d00d      	beq.n	8005810 <HAL_GPIO_Init+0x1ec>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a49      	ldr	r2, [pc, #292]	@ (800591c <HAL_GPIO_Init+0x2f8>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d007      	beq.n	800580c <HAL_GPIO_Init+0x1e8>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a48      	ldr	r2, [pc, #288]	@ (8005920 <HAL_GPIO_Init+0x2fc>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d101      	bne.n	8005808 <HAL_GPIO_Init+0x1e4>
 8005804:	2305      	movs	r3, #5
 8005806:	e00a      	b.n	800581e <HAL_GPIO_Init+0x1fa>
 8005808:	2306      	movs	r3, #6
 800580a:	e008      	b.n	800581e <HAL_GPIO_Init+0x1fa>
 800580c:	2304      	movs	r3, #4
 800580e:	e006      	b.n	800581e <HAL_GPIO_Init+0x1fa>
 8005810:	2303      	movs	r3, #3
 8005812:	e004      	b.n	800581e <HAL_GPIO_Init+0x1fa>
 8005814:	2302      	movs	r3, #2
 8005816:	e002      	b.n	800581e <HAL_GPIO_Init+0x1fa>
 8005818:	2301      	movs	r3, #1
 800581a:	e000      	b.n	800581e <HAL_GPIO_Init+0x1fa>
 800581c:	2300      	movs	r3, #0
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	f002 0203 	and.w	r2, r2, #3
 8005824:	0092      	lsls	r2, r2, #2
 8005826:	4093      	lsls	r3, r2
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	4313      	orrs	r3, r2
 800582c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800582e:	4937      	ldr	r1, [pc, #220]	@ (800590c <HAL_GPIO_Init+0x2e8>)
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	089b      	lsrs	r3, r3, #2
 8005834:	3302      	adds	r3, #2
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800583c:	4b39      	ldr	r3, [pc, #228]	@ (8005924 <HAL_GPIO_Init+0x300>)
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	43db      	mvns	r3, r3
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	4013      	ands	r3, r2
 800584a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d003      	beq.n	8005860 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	4313      	orrs	r3, r2
 800585e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005860:	4a30      	ldr	r2, [pc, #192]	@ (8005924 <HAL_GPIO_Init+0x300>)
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005866:	4b2f      	ldr	r3, [pc, #188]	@ (8005924 <HAL_GPIO_Init+0x300>)
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	43db      	mvns	r3, r3
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	4013      	ands	r3, r2
 8005874:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	4313      	orrs	r3, r2
 8005888:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800588a:	4a26      	ldr	r2, [pc, #152]	@ (8005924 <HAL_GPIO_Init+0x300>)
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005890:	4b24      	ldr	r3, [pc, #144]	@ (8005924 <HAL_GPIO_Init+0x300>)
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	43db      	mvns	r3, r3
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	4013      	ands	r3, r2
 800589e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d003      	beq.n	80058b4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80058b4:	4a1b      	ldr	r2, [pc, #108]	@ (8005924 <HAL_GPIO_Init+0x300>)
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80058ba:	4b1a      	ldr	r3, [pc, #104]	@ (8005924 <HAL_GPIO_Init+0x300>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	43db      	mvns	r3, r3
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	4013      	ands	r3, r2
 80058c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d003      	beq.n	80058de <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	4313      	orrs	r3, r2
 80058dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80058de:	4a11      	ldr	r2, [pc, #68]	@ (8005924 <HAL_GPIO_Init+0x300>)
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	3301      	adds	r3, #1
 80058e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	fa22 f303 	lsr.w	r3, r2, r3
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f47f ae9d 	bne.w	8005634 <HAL_GPIO_Init+0x10>
  }
}
 80058fa:	bf00      	nop
 80058fc:	bf00      	nop
 80058fe:	371c      	adds	r7, #28
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	40021000 	.word	0x40021000
 800590c:	40010000 	.word	0x40010000
 8005910:	48000400 	.word	0x48000400
 8005914:	48000800 	.word	0x48000800
 8005918:	48000c00 	.word	0x48000c00
 800591c:	48001000 	.word	0x48001000
 8005920:	48001400 	.word	0x48001400
 8005924:	40010400 	.word	0x40010400

08005928 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	460b      	mov	r3, r1
 8005932:	807b      	strh	r3, [r7, #2]
 8005934:	4613      	mov	r3, r2
 8005936:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005938:	787b      	ldrb	r3, [r7, #1]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800593e:	887a      	ldrh	r2, [r7, #2]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005944:	e002      	b.n	800594c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005946:	887a      	ldrh	r2, [r7, #2]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	4603      	mov	r3, r0
 8005960:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005962:	4b08      	ldr	r3, [pc, #32]	@ (8005984 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005964:	695a      	ldr	r2, [r3, #20]
 8005966:	88fb      	ldrh	r3, [r7, #6]
 8005968:	4013      	ands	r3, r2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d006      	beq.n	800597c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800596e:	4a05      	ldr	r2, [pc, #20]	@ (8005984 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005970:	88fb      	ldrh	r3, [r7, #6]
 8005972:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005974:	88fb      	ldrh	r3, [r7, #6]
 8005976:	4618      	mov	r0, r3
 8005978:	f000 f806 	bl	8005988 <HAL_GPIO_EXTI_Callback>
  }
}
 800597c:	bf00      	nop
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	40010400 	.word	0x40010400

08005988 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	4603      	mov	r3, r0
 8005990:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005992:	bf00      	nop
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b082      	sub	sp, #8
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e08d      	b.n	8005acc <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d106      	bne.n	80059ca <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f7fc ff6d 	bl	80028a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2224      	movs	r2, #36	@ 0x24
 80059ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f022 0201 	bic.w	r2, r2, #1
 80059e0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80059ee:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059fe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d107      	bne.n	8005a18 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	689a      	ldr	r2, [r3, #8]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a14:	609a      	str	r2, [r3, #8]
 8005a16:	e006      	b.n	8005a26 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005a24:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d108      	bne.n	8005a40 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a3c:	605a      	str	r2, [r3, #4]
 8005a3e:	e007      	b.n	8005a50 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a4e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	6812      	ldr	r2, [r2, #0]
 8005a5a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005a5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a62:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68da      	ldr	r2, [r3, #12]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a72:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691a      	ldr	r2, [r3, #16]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	69d9      	ldr	r1, [r3, #28]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1a      	ldr	r2, [r3, #32]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f042 0201 	orr.w	r2, r2, #1
 8005aac:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b088      	sub	sp, #32
 8005ad8:	af02      	add	r7, sp, #8
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	4608      	mov	r0, r1
 8005ade:	4611      	mov	r1, r2
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	817b      	strh	r3, [r7, #10]
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	813b      	strh	r3, [r7, #8]
 8005aea:	4613      	mov	r3, r2
 8005aec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b20      	cmp	r3, #32
 8005af8:	f040 80fd 	bne.w	8005cf6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005afc:	6a3b      	ldr	r3, [r7, #32]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d002      	beq.n	8005b08 <HAL_I2C_Mem_Read+0x34>
 8005b02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d105      	bne.n	8005b14 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b0e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e0f1      	b.n	8005cf8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d101      	bne.n	8005b22 <HAL_I2C_Mem_Read+0x4e>
 8005b1e:	2302      	movs	r3, #2
 8005b20:	e0ea      	b.n	8005cf8 <HAL_I2C_Mem_Read+0x224>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005b2a:	f7fd fd0f 	bl	800354c <HAL_GetTick>
 8005b2e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	2319      	movs	r3, #25
 8005b36:	2201      	movs	r2, #1
 8005b38:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f000 f95b 	bl	8005df8 <I2C_WaitOnFlagUntilTimeout>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d001      	beq.n	8005b4c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e0d5      	b.n	8005cf8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2222      	movs	r2, #34	@ 0x22
 8005b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2240      	movs	r2, #64	@ 0x40
 8005b58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6a3a      	ldr	r2, [r7, #32]
 8005b66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005b6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b74:	88f8      	ldrh	r0, [r7, #6]
 8005b76:	893a      	ldrh	r2, [r7, #8]
 8005b78:	8979      	ldrh	r1, [r7, #10]
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	9301      	str	r3, [sp, #4]
 8005b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b80:	9300      	str	r3, [sp, #0]
 8005b82:	4603      	mov	r3, r0
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f000 f8bf 	bl	8005d08 <I2C_RequestMemoryRead>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d005      	beq.n	8005b9c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e0ad      	b.n	8005cf8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	2bff      	cmp	r3, #255	@ 0xff
 8005ba4:	d90e      	bls.n	8005bc4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	22ff      	movs	r2, #255	@ 0xff
 8005baa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	8979      	ldrh	r1, [r7, #10]
 8005bb4:	4b52      	ldr	r3, [pc, #328]	@ (8005d00 <HAL_I2C_Mem_Read+0x22c>)
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f000 fadf 	bl	8006180 <I2C_TransferConfig>
 8005bc2:	e00f      	b.n	8005be4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bd2:	b2da      	uxtb	r2, r3
 8005bd4:	8979      	ldrh	r1, [r7, #10]
 8005bd6:	4b4a      	ldr	r3, [pc, #296]	@ (8005d00 <HAL_I2C_Mem_Read+0x22c>)
 8005bd8:	9300      	str	r3, [sp, #0]
 8005bda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 face 	bl	8006180 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bea:	2200      	movs	r2, #0
 8005bec:	2104      	movs	r1, #4
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 f902 	bl	8005df8 <I2C_WaitOnFlagUntilTimeout>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e07c      	b.n	8005cf8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c08:	b2d2      	uxtb	r2, r2
 8005c0a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c10:	1c5a      	adds	r2, r3, #1
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d034      	beq.n	8005ca4 <HAL_I2C_Mem_Read+0x1d0>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d130      	bne.n	8005ca4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c48:	2200      	movs	r2, #0
 8005c4a:	2180      	movs	r1, #128	@ 0x80
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 f8d3 	bl	8005df8 <I2C_WaitOnFlagUntilTimeout>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e04d      	b.n	8005cf8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	2bff      	cmp	r3, #255	@ 0xff
 8005c64:	d90e      	bls.n	8005c84 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	22ff      	movs	r2, #255	@ 0xff
 8005c6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c70:	b2da      	uxtb	r2, r3
 8005c72:	8979      	ldrh	r1, [r7, #10]
 8005c74:	2300      	movs	r3, #0
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f000 fa7f 	bl	8006180 <I2C_TransferConfig>
 8005c82:	e00f      	b.n	8005ca4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c92:	b2da      	uxtb	r2, r3
 8005c94:	8979      	ldrh	r1, [r7, #10]
 8005c96:	2300      	movs	r3, #0
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f000 fa6e 	bl	8006180 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d19a      	bne.n	8005be4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f000 f940 	bl	8005f38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d001      	beq.n	8005cc2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e01a      	b.n	8005cf8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	6859      	ldr	r1, [r3, #4]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8005d04 <HAL_I2C_Mem_Read+0x230>)
 8005cd6:	400b      	ands	r3, r1
 8005cd8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	e000      	b.n	8005cf8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005cf6:	2302      	movs	r3, #2
  }
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3718      	adds	r7, #24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	80002400 	.word	0x80002400
 8005d04:	fe00e800 	.word	0xfe00e800

08005d08 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af02      	add	r7, sp, #8
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	4608      	mov	r0, r1
 8005d12:	4611      	mov	r1, r2
 8005d14:	461a      	mov	r2, r3
 8005d16:	4603      	mov	r3, r0
 8005d18:	817b      	strh	r3, [r7, #10]
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	813b      	strh	r3, [r7, #8]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005d22:	88fb      	ldrh	r3, [r7, #6]
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	8979      	ldrh	r1, [r7, #10]
 8005d28:	4b20      	ldr	r3, [pc, #128]	@ (8005dac <I2C_RequestMemoryRead+0xa4>)
 8005d2a:	9300      	str	r3, [sp, #0]
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f000 fa26 	bl	8006180 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d34:	69fa      	ldr	r2, [r7, #28]
 8005d36:	69b9      	ldr	r1, [r7, #24]
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f000 f8b6 	bl	8005eaa <I2C_WaitOnTXISFlagUntilTimeout>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d001      	beq.n	8005d48 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e02c      	b.n	8005da2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d48:	88fb      	ldrh	r3, [r7, #6]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d105      	bne.n	8005d5a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d4e:	893b      	ldrh	r3, [r7, #8]
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d58:	e015      	b.n	8005d86 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d5a:	893b      	ldrh	r3, [r7, #8]
 8005d5c:	0a1b      	lsrs	r3, r3, #8
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	b2da      	uxtb	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d68:	69fa      	ldr	r2, [r7, #28]
 8005d6a:	69b9      	ldr	r1, [r7, #24]
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f000 f89c 	bl	8005eaa <I2C_WaitOnTXISFlagUntilTimeout>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d001      	beq.n	8005d7c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e012      	b.n	8005da2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d7c:	893b      	ldrh	r3, [r7, #8]
 8005d7e:	b2da      	uxtb	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	9300      	str	r3, [sp, #0]
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	2140      	movs	r1, #64	@ 0x40
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f000 f831 	bl	8005df8 <I2C_WaitOnFlagUntilTimeout>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d001      	beq.n	8005da0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e000      	b.n	8005da2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	80002000 	.word	0x80002000

08005db0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d103      	bne.n	8005dce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d007      	beq.n	8005dec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	699a      	ldr	r2, [r3, #24]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f042 0201 	orr.w	r2, r2, #1
 8005dea:	619a      	str	r2, [r3, #24]
  }
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	603b      	str	r3, [r7, #0]
 8005e04:	4613      	mov	r3, r2
 8005e06:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e08:	e03b      	b.n	8005e82 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	6839      	ldr	r1, [r7, #0]
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f000 f8d6 	bl	8005fc0 <I2C_IsErrorOccurred>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d001      	beq.n	8005e1e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e041      	b.n	8005ea2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e24:	d02d      	beq.n	8005e82 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e26:	f7fd fb91 	bl	800354c <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	683a      	ldr	r2, [r7, #0]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d302      	bcc.n	8005e3c <I2C_WaitOnFlagUntilTimeout+0x44>
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d122      	bne.n	8005e82 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	699a      	ldr	r2, [r3, #24]
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	4013      	ands	r3, r2
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	bf0c      	ite	eq
 8005e4c:	2301      	moveq	r3, #1
 8005e4e:	2300      	movne	r3, #0
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	461a      	mov	r2, r3
 8005e54:	79fb      	ldrb	r3, [r7, #7]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d113      	bne.n	8005e82 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e5e:	f043 0220 	orr.w	r2, r3, #32
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2220      	movs	r2, #32
 8005e6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e00f      	b.n	8005ea2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	699a      	ldr	r2, [r3, #24]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	bf0c      	ite	eq
 8005e92:	2301      	moveq	r3, #1
 8005e94:	2300      	movne	r3, #0
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	461a      	mov	r2, r3
 8005e9a:	79fb      	ldrb	r3, [r7, #7]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d0b4      	beq.n	8005e0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b084      	sub	sp, #16
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	60f8      	str	r0, [r7, #12]
 8005eb2:	60b9      	str	r1, [r7, #8]
 8005eb4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005eb6:	e033      	b.n	8005f20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	68b9      	ldr	r1, [r7, #8]
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f000 f87f 	bl	8005fc0 <I2C_IsErrorOccurred>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e031      	b.n	8005f30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed2:	d025      	beq.n	8005f20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ed4:	f7fd fb3a 	bl	800354c <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d302      	bcc.n	8005eea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d11a      	bne.n	8005f20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	f003 0302 	and.w	r3, r3, #2
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d013      	beq.n	8005f20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005efc:	f043 0220 	orr.w	r2, r3, #32
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2220      	movs	r2, #32
 8005f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e007      	b.n	8005f30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d1c4      	bne.n	8005eb8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f44:	e02f      	b.n	8005fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	68b9      	ldr	r1, [r7, #8]
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 f838 	bl	8005fc0 <I2C_IsErrorOccurred>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e02d      	b.n	8005fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f5a:	f7fd faf7 	bl	800354c <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d302      	bcc.n	8005f70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d11a      	bne.n	8005fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	f003 0320 	and.w	r3, r3, #32
 8005f7a:	2b20      	cmp	r3, #32
 8005f7c:	d013      	beq.n	8005fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f82:	f043 0220 	orr.w	r2, r3, #32
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e007      	b.n	8005fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	f003 0320 	and.w	r3, r3, #32
 8005fb0:	2b20      	cmp	r3, #32
 8005fb2:	d1c8      	bne.n	8005f46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3710      	adds	r7, #16
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
	...

08005fc0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b08a      	sub	sp, #40	@ 0x28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	f003 0310 	and.w	r3, r3, #16
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d068      	beq.n	80060be <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2210      	movs	r2, #16
 8005ff2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005ff4:	e049      	b.n	800608a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ffc:	d045      	beq.n	800608a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005ffe:	f7fd faa5 	bl	800354c <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	68ba      	ldr	r2, [r7, #8]
 800600a:	429a      	cmp	r2, r3
 800600c:	d302      	bcc.n	8006014 <I2C_IsErrorOccurred+0x54>
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d13a      	bne.n	800608a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800601e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006026:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006032:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006036:	d121      	bne.n	800607c <I2C_IsErrorOccurred+0xbc>
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800603e:	d01d      	beq.n	800607c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006040:	7cfb      	ldrb	r3, [r7, #19]
 8006042:	2b20      	cmp	r3, #32
 8006044:	d01a      	beq.n	800607c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006054:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006056:	f7fd fa79 	bl	800354c <HAL_GetTick>
 800605a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800605c:	e00e      	b.n	800607c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800605e:	f7fd fa75 	bl	800354c <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	2b19      	cmp	r3, #25
 800606a:	d907      	bls.n	800607c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	f043 0320 	orr.w	r3, r3, #32
 8006072:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800607a:	e006      	b.n	800608a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	f003 0320 	and.w	r3, r3, #32
 8006086:	2b20      	cmp	r3, #32
 8006088:	d1e9      	bne.n	800605e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	f003 0320 	and.w	r3, r3, #32
 8006094:	2b20      	cmp	r3, #32
 8006096:	d003      	beq.n	80060a0 <I2C_IsErrorOccurred+0xe0>
 8006098:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800609c:	2b00      	cmp	r3, #0
 800609e:	d0aa      	beq.n	8005ff6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80060a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d103      	bne.n	80060b0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2220      	movs	r2, #32
 80060ae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80060b0:	6a3b      	ldr	r3, [r7, #32]
 80060b2:	f043 0304 	orr.w	r3, r3, #4
 80060b6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00b      	beq.n	80060e8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80060d0:	6a3b      	ldr	r3, [r7, #32]
 80060d2:	f043 0301 	orr.w	r3, r3, #1
 80060d6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80060e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00b      	beq.n	800610a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80060f2:	6a3b      	ldr	r3, [r7, #32]
 80060f4:	f043 0308 	orr.w	r3, r3, #8
 80060f8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006102:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00b      	beq.n	800612c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006114:	6a3b      	ldr	r3, [r7, #32]
 8006116:	f043 0302 	orr.w	r3, r3, #2
 800611a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006124:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800612c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006130:	2b00      	cmp	r3, #0
 8006132:	d01c      	beq.n	800616e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f7ff fe3b 	bl	8005db0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	6859      	ldr	r1, [r3, #4]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	4b0d      	ldr	r3, [pc, #52]	@ (800617c <I2C_IsErrorOccurred+0x1bc>)
 8006146:	400b      	ands	r3, r1
 8006148:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800614e:	6a3b      	ldr	r3, [r7, #32]
 8006150:	431a      	orrs	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2220      	movs	r2, #32
 800615a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800616e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006172:	4618      	mov	r0, r3
 8006174:	3728      	adds	r7, #40	@ 0x28
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	fe00e800 	.word	0xfe00e800

08006180 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006180:	b480      	push	{r7}
 8006182:	b087      	sub	sp, #28
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	607b      	str	r3, [r7, #4]
 800618a:	460b      	mov	r3, r1
 800618c:	817b      	strh	r3, [r7, #10]
 800618e:	4613      	mov	r3, r2
 8006190:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006192:	897b      	ldrh	r3, [r7, #10]
 8006194:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006198:	7a7b      	ldrb	r3, [r7, #9]
 800619a:	041b      	lsls	r3, r3, #16
 800619c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80061a0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80061a6:	6a3b      	ldr	r3, [r7, #32]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80061ae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	6a3b      	ldr	r3, [r7, #32]
 80061b8:	0d5b      	lsrs	r3, r3, #21
 80061ba:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80061be:	4b08      	ldr	r3, [pc, #32]	@ (80061e0 <I2C_TransferConfig+0x60>)
 80061c0:	430b      	orrs	r3, r1
 80061c2:	43db      	mvns	r3, r3
 80061c4:	ea02 0103 	and.w	r1, r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80061d2:	bf00      	nop
 80061d4:	371c      	adds	r7, #28
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	03ff63ff 	.word	0x03ff63ff

080061e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b20      	cmp	r3, #32
 80061f8:	d138      	bne.n	800626c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006200:	2b01      	cmp	r3, #1
 8006202:	d101      	bne.n	8006208 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006204:	2302      	movs	r3, #2
 8006206:	e032      	b.n	800626e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2224      	movs	r2, #36	@ 0x24
 8006214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 0201 	bic.w	r2, r2, #1
 8006226:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006236:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6819      	ldr	r1, [r3, #0]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	430a      	orrs	r2, r1
 8006246:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f042 0201 	orr.w	r2, r2, #1
 8006256:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2220      	movs	r2, #32
 800625c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006268:	2300      	movs	r3, #0
 800626a:	e000      	b.n	800626e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800626c:	2302      	movs	r3, #2
  }
}
 800626e:	4618      	mov	r0, r3
 8006270:	370c      	adds	r7, #12
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800627a:	b480      	push	{r7}
 800627c:	b085      	sub	sp, #20
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
 8006282:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800628a:	b2db      	uxtb	r3, r3
 800628c:	2b20      	cmp	r3, #32
 800628e:	d139      	bne.n	8006304 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006296:	2b01      	cmp	r3, #1
 8006298:	d101      	bne.n	800629e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800629a:	2302      	movs	r3, #2
 800629c:	e033      	b.n	8006306 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2224      	movs	r2, #36	@ 0x24
 80062aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 0201 	bic.w	r2, r2, #1
 80062bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80062cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	021b      	lsls	r3, r3, #8
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0201 	orr.w	r2, r2, #1
 80062ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2220      	movs	r2, #32
 80062f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006300:	2300      	movs	r3, #0
 8006302:	e000      	b.n	8006306 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006304:	2302      	movs	r3, #2
  }
}
 8006306:	4618      	mov	r0, r3
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
	...

08006314 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800631c:	2300      	movs	r3, #0
 800631e:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d101      	bne.n	800632a <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e0bb      	b.n	80064a2 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b05      	cmp	r3, #5
 8006334:	d101      	bne.n	800633a <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e0b3      	b.n	80064a2 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006340:	b2db      	uxtb	r3, r3
 8006342:	2b02      	cmp	r3, #2
 8006344:	d101      	bne.n	800634a <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e0ab      	b.n	80064a2 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800634a:	4b58      	ldr	r3, [pc, #352]	@ (80064ac <HAL_OPAMP_Init+0x198>)
 800634c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800634e:	4a57      	ldr	r2, [pc, #348]	@ (80064ac <HAL_OPAMP_Init+0x198>)
 8006350:	f043 0301 	orr.w	r3, r3, #1
 8006354:	6613      	str	r3, [r2, #96]	@ 0x60
 8006356:	4b55      	ldr	r3, [pc, #340]	@ (80064ac <HAL_OPAMP_Init+0x198>)
 8006358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	60bb      	str	r3, [r7, #8]
 8006360:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	d103      	bne.n	8006376 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f7fc fb48 	bl	8002a0c <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	2b40      	cmp	r3, #64	@ 0x40
 8006382:	d003      	beq.n	800638c <HAL_OPAMP_Init+0x78>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	2b60      	cmp	r3, #96	@ 0x60
 800638a:	d133      	bne.n	80063f4 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f023 0110 	bic.w	r1, r3, #16
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	4b41      	ldr	r3, [pc, #260]	@ (80064b0 <HAL_OPAMP_Init+0x19c>)
 80063aa:	4013      	ands	r3, r2
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	6851      	ldr	r1, [r2, #4]
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	6892      	ldr	r2, [r2, #8]
 80063b4:	4311      	orrs	r1, r2
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	6912      	ldr	r2, [r2, #16]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	6879      	ldr	r1, [r7, #4]
 80063be:	7d09      	ldrb	r1, [r1, #20]
 80063c0:	2901      	cmp	r1, #1
 80063c2:	d102      	bne.n	80063ca <HAL_OPAMP_Init+0xb6>
 80063c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80063c8:	e000      	b.n	80063cc <HAL_OPAMP_Init+0xb8>
 80063ca:	2100      	movs	r1, #0
 80063cc:	4311      	orrs	r1, r2
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80063d2:	4311      	orrs	r1, r2
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80063d8:	4311      	orrs	r1, r2
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80063de:	04d2      	lsls	r2, r2, #19
 80063e0:	4311      	orrs	r1, r2
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80063e6:	0612      	lsls	r2, r2, #24
 80063e8:	4311      	orrs	r1, r2
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	6812      	ldr	r2, [r2, #0]
 80063ee:	430b      	orrs	r3, r1
 80063f0:	6013      	str	r3, [r2, #0]
 80063f2:	e035      	b.n	8006460 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f023 0110 	bic.w	r1, r3, #16
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	430a      	orrs	r2, r1
 8006408:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	4b27      	ldr	r3, [pc, #156]	@ (80064b0 <HAL_OPAMP_Init+0x19c>)
 8006412:	4013      	ands	r3, r2
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	6851      	ldr	r1, [r2, #4]
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	6892      	ldr	r2, [r2, #8]
 800641c:	4311      	orrs	r1, r2
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	68d2      	ldr	r2, [r2, #12]
 8006422:	4311      	orrs	r1, r2
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	6912      	ldr	r2, [r2, #16]
 8006428:	430a      	orrs	r2, r1
 800642a:	6879      	ldr	r1, [r7, #4]
 800642c:	7d09      	ldrb	r1, [r1, #20]
 800642e:	2901      	cmp	r1, #1
 8006430:	d102      	bne.n	8006438 <HAL_OPAMP_Init+0x124>
 8006432:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006436:	e000      	b.n	800643a <HAL_OPAMP_Init+0x126>
 8006438:	2100      	movs	r1, #0
 800643a:	4311      	orrs	r1, r2
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006440:	4311      	orrs	r1, r2
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006446:	4311      	orrs	r1, r2
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800644c:	04d2      	lsls	r2, r2, #19
 800644e:	4311      	orrs	r1, r2
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006454:	0612      	lsls	r2, r2, #24
 8006456:	4311      	orrs	r1, r2
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	6812      	ldr	r2, [r2, #0]
 800645c:	430b      	orrs	r3, r1
 800645e:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	2b00      	cmp	r3, #0
 8006468:	db10      	blt.n	800648c <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	699a      	ldr	r2, [r3, #24]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	69db      	ldr	r3, [r3, #28]
 800647c:	431a      	orrs	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	431a      	orrs	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	430a      	orrs	r2, r1
 800648a:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b00      	cmp	r3, #0
 8006496:	d103      	bne.n	80064a0 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80064a0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	40021000 	.word	0x40021000
 80064b0:	e0003e11 	.word	0xe0003e11

080064b4 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064bc:	2300      	movs	r3, #0
 80064be:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d102      	bne.n	80064cc <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	73fb      	strb	r3, [r7, #15]
 80064ca:	e01d      	b.n	8006508 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b05      	cmp	r3, #5
 80064d6:	d102      	bne.n	80064de <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	73fb      	strb	r3, [r7, #15]
 80064dc:	e014      	b.n	8006508 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d10c      	bne.n	8006504 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f042 0201 	orr.w	r2, r2, #1
 80064f8:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2204      	movs	r2, #4
 80064fe:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8006502:	e001      	b.n	8006508 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8006508:	7bfb      	ldrb	r3, [r7, #15]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3714      	adds	r7, #20
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b084      	sub	sp, #16
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e0c0      	b.n	80066aa <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800652e:	b2db      	uxtb	r3, r3
 8006530:	2b00      	cmp	r3, #0
 8006532:	d106      	bne.n	8006542 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f009 fb61 	bl	800fc04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2203      	movs	r2, #3
 8006546:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4618      	mov	r0, r3
 8006550:	f005 fee5 	bl	800c31e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006554:	2300      	movs	r3, #0
 8006556:	73fb      	strb	r3, [r7, #15]
 8006558:	e03e      	b.n	80065d8 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800655a:	7bfa      	ldrb	r2, [r7, #15]
 800655c:	6879      	ldr	r1, [r7, #4]
 800655e:	4613      	mov	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4413      	add	r3, r2
 8006564:	00db      	lsls	r3, r3, #3
 8006566:	440b      	add	r3, r1
 8006568:	3311      	adds	r3, #17
 800656a:	2201      	movs	r2, #1
 800656c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800656e:	7bfa      	ldrb	r2, [r7, #15]
 8006570:	6879      	ldr	r1, [r7, #4]
 8006572:	4613      	mov	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4413      	add	r3, r2
 8006578:	00db      	lsls	r3, r3, #3
 800657a:	440b      	add	r3, r1
 800657c:	3310      	adds	r3, #16
 800657e:	7bfa      	ldrb	r2, [r7, #15]
 8006580:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006582:	7bfa      	ldrb	r2, [r7, #15]
 8006584:	6879      	ldr	r1, [r7, #4]
 8006586:	4613      	mov	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	00db      	lsls	r3, r3, #3
 800658e:	440b      	add	r3, r1
 8006590:	3313      	adds	r3, #19
 8006592:	2200      	movs	r2, #0
 8006594:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006596:	7bfa      	ldrb	r2, [r7, #15]
 8006598:	6879      	ldr	r1, [r7, #4]
 800659a:	4613      	mov	r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	4413      	add	r3, r2
 80065a0:	00db      	lsls	r3, r3, #3
 80065a2:	440b      	add	r3, r1
 80065a4:	3320      	adds	r3, #32
 80065a6:	2200      	movs	r2, #0
 80065a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80065aa:	7bfa      	ldrb	r2, [r7, #15]
 80065ac:	6879      	ldr	r1, [r7, #4]
 80065ae:	4613      	mov	r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4413      	add	r3, r2
 80065b4:	00db      	lsls	r3, r3, #3
 80065b6:	440b      	add	r3, r1
 80065b8:	3324      	adds	r3, #36	@ 0x24
 80065ba:	2200      	movs	r2, #0
 80065bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80065be:	7bfb      	ldrb	r3, [r7, #15]
 80065c0:	6879      	ldr	r1, [r7, #4]
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	4613      	mov	r3, r2
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	4413      	add	r3, r2
 80065ca:	00db      	lsls	r3, r3, #3
 80065cc:	440b      	add	r3, r1
 80065ce:	2200      	movs	r2, #0
 80065d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065d2:	7bfb      	ldrb	r3, [r7, #15]
 80065d4:	3301      	adds	r3, #1
 80065d6:	73fb      	strb	r3, [r7, #15]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	791b      	ldrb	r3, [r3, #4]
 80065dc:	7bfa      	ldrb	r2, [r7, #15]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d3bb      	bcc.n	800655a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065e2:	2300      	movs	r3, #0
 80065e4:	73fb      	strb	r3, [r7, #15]
 80065e6:	e044      	b.n	8006672 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80065e8:	7bfa      	ldrb	r2, [r7, #15]
 80065ea:	6879      	ldr	r1, [r7, #4]
 80065ec:	4613      	mov	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4413      	add	r3, r2
 80065f2:	00db      	lsls	r3, r3, #3
 80065f4:	440b      	add	r3, r1
 80065f6:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80065fa:	2200      	movs	r2, #0
 80065fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80065fe:	7bfa      	ldrb	r2, [r7, #15]
 8006600:	6879      	ldr	r1, [r7, #4]
 8006602:	4613      	mov	r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4413      	add	r3, r2
 8006608:	00db      	lsls	r3, r3, #3
 800660a:	440b      	add	r3, r1
 800660c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006610:	7bfa      	ldrb	r2, [r7, #15]
 8006612:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006614:	7bfa      	ldrb	r2, [r7, #15]
 8006616:	6879      	ldr	r1, [r7, #4]
 8006618:	4613      	mov	r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4413      	add	r3, r2
 800661e:	00db      	lsls	r3, r3, #3
 8006620:	440b      	add	r3, r1
 8006622:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8006626:	2200      	movs	r2, #0
 8006628:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800662a:	7bfa      	ldrb	r2, [r7, #15]
 800662c:	6879      	ldr	r1, [r7, #4]
 800662e:	4613      	mov	r3, r2
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	4413      	add	r3, r2
 8006634:	00db      	lsls	r3, r3, #3
 8006636:	440b      	add	r3, r1
 8006638:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800663c:	2200      	movs	r2, #0
 800663e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006640:	7bfa      	ldrb	r2, [r7, #15]
 8006642:	6879      	ldr	r1, [r7, #4]
 8006644:	4613      	mov	r3, r2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4413      	add	r3, r2
 800664a:	00db      	lsls	r3, r3, #3
 800664c:	440b      	add	r3, r1
 800664e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006652:	2200      	movs	r2, #0
 8006654:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006656:	7bfa      	ldrb	r2, [r7, #15]
 8006658:	6879      	ldr	r1, [r7, #4]
 800665a:	4613      	mov	r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4413      	add	r3, r2
 8006660:	00db      	lsls	r3, r3, #3
 8006662:	440b      	add	r3, r1
 8006664:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006668:	2200      	movs	r2, #0
 800666a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800666c:	7bfb      	ldrb	r3, [r7, #15]
 800666e:	3301      	adds	r3, #1
 8006670:	73fb      	strb	r3, [r7, #15]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	791b      	ldrb	r3, [r3, #4]
 8006676:	7bfa      	ldrb	r2, [r7, #15]
 8006678:	429a      	cmp	r2, r3
 800667a:	d3b5      	bcc.n	80065e8 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6818      	ldr	r0, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	3304      	adds	r3, #4
 8006684:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006688:	f005 fe64 	bl	800c354 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	7a9b      	ldrb	r3, [r3, #10]
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d102      	bne.n	80066a8 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f001 fc0e 	bl	8007ec4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b082      	sub	sp, #8
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d101      	bne.n	80066c8 <HAL_PCD_Start+0x16>
 80066c4:	2302      	movs	r3, #2
 80066c6:	e012      	b.n	80066ee <HAL_PCD_Start+0x3c>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4618      	mov	r0, r3
 80066d6:	f005 fe0b 	bl	800c2f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4618      	mov	r0, r3
 80066e0:	f007 fbe8 	bl	800deb4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3708      	adds	r7, #8
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b084      	sub	sp, #16
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4618      	mov	r0, r3
 8006704:	f007 fbed 	bl	800dee2 <USB_ReadInterrupts>
 8006708:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d003      	beq.n	800671c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 fb06 	bl	8006d26 <PCD_EP_ISR_Handler>

    return;
 800671a:	e110      	b.n	800693e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006722:	2b00      	cmp	r3, #0
 8006724:	d013      	beq.n	800674e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800672e:	b29a      	uxth	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006738:	b292      	uxth	r2, r2
 800673a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f009 faf1 	bl	800fd26 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006744:	2100      	movs	r1, #0
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f8fc 	bl	8006944 <HAL_PCD_SetAddress>

    return;
 800674c:	e0f7      	b.n	800693e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00c      	beq.n	8006772 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006760:	b29a      	uxth	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800676a:	b292      	uxth	r2, r2
 800676c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006770:	e0e5      	b.n	800693e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00c      	beq.n	8006796 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006784:	b29a      	uxth	r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800678e:	b292      	uxth	r2, r2
 8006790:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006794:	e0d3      	b.n	800693e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800679c:	2b00      	cmp	r3, #0
 800679e:	d034      	beq.n	800680a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f022 0204 	bic.w	r2, r2, #4
 80067b2:	b292      	uxth	r2, r2
 80067b4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f022 0208 	bic.w	r2, r2, #8
 80067ca:	b292      	uxth	r2, r2
 80067cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d107      	bne.n	80067ea <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80067e2:	2100      	movs	r1, #0
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f009 fc91 	bl	801010c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f009 fad4 	bl	800fd98 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006802:	b292      	uxth	r2, r2
 8006804:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006808:	e099      	b.n	800693e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006810:	2b00      	cmp	r3, #0
 8006812:	d027      	beq.n	8006864 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800681c:	b29a      	uxth	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f042 0208 	orr.w	r2, r2, #8
 8006826:	b292      	uxth	r2, r2
 8006828:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006834:	b29a      	uxth	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800683e:	b292      	uxth	r2, r2
 8006840:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800684c:	b29a      	uxth	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f042 0204 	orr.w	r2, r2, #4
 8006856:	b292      	uxth	r2, r2
 8006858:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f009 fa81 	bl	800fd64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006862:	e06c      	b.n	800693e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800686a:	2b00      	cmp	r3, #0
 800686c:	d040      	beq.n	80068f0 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006876:	b29a      	uxth	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006880:	b292      	uxth	r2, r2
 8006882:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800688c:	2b00      	cmp	r3, #0
 800688e:	d12b      	bne.n	80068e8 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006898:	b29a      	uxth	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f042 0204 	orr.w	r2, r2, #4
 80068a2:	b292      	uxth	r2, r2
 80068a4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f042 0208 	orr.w	r2, r2, #8
 80068ba:	b292      	uxth	r2, r2
 80068bc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	089b      	lsrs	r3, r3, #2
 80068d4:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80068de:	2101      	movs	r1, #1
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f009 fc13 	bl	801010c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80068e6:	e02a      	b.n	800693e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f009 fa3b 	bl	800fd64 <HAL_PCD_SuspendCallback>
    return;
 80068ee:	e026      	b.n	800693e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00f      	beq.n	800691a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006902:	b29a      	uxth	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800690c:	b292      	uxth	r2, r2
 800690e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f009 f9f9 	bl	800fd0a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006918:	e011      	b.n	800693e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00c      	beq.n	800693e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800692c:	b29a      	uxth	r2, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006936:	b292      	uxth	r2, r2
 8006938:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800693c:	bf00      	nop
  }
}
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	460b      	mov	r3, r1
 800694e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006956:	2b01      	cmp	r3, #1
 8006958:	d101      	bne.n	800695e <HAL_PCD_SetAddress+0x1a>
 800695a:	2302      	movs	r3, #2
 800695c:	e012      	b.n	8006984 <HAL_PCD_SetAddress+0x40>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	78fa      	ldrb	r2, [r7, #3]
 800696a:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	78fa      	ldrb	r2, [r7, #3]
 8006972:	4611      	mov	r1, r2
 8006974:	4618      	mov	r0, r3
 8006976:	f007 fa89 	bl	800de8c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3708      	adds	r7, #8
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	4608      	mov	r0, r1
 8006996:	4611      	mov	r1, r2
 8006998:	461a      	mov	r2, r3
 800699a:	4603      	mov	r3, r0
 800699c:	70fb      	strb	r3, [r7, #3]
 800699e:	460b      	mov	r3, r1
 80069a0:	803b      	strh	r3, [r7, #0]
 80069a2:	4613      	mov	r3, r2
 80069a4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80069a6:	2300      	movs	r3, #0
 80069a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80069aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	da0e      	bge.n	80069d0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069b2:	78fb      	ldrb	r3, [r7, #3]
 80069b4:	f003 0207 	and.w	r2, r3, #7
 80069b8:	4613      	mov	r3, r2
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	4413      	add	r3, r2
 80069be:	00db      	lsls	r3, r3, #3
 80069c0:	3310      	adds	r3, #16
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	4413      	add	r3, r2
 80069c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2201      	movs	r2, #1
 80069cc:	705a      	strb	r2, [r3, #1]
 80069ce:	e00e      	b.n	80069ee <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069d0:	78fb      	ldrb	r3, [r7, #3]
 80069d2:	f003 0207 	and.w	r2, r3, #7
 80069d6:	4613      	mov	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4413      	add	r3, r2
 80069dc:	00db      	lsls	r3, r3, #3
 80069de:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	4413      	add	r3, r2
 80069e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80069ee:	78fb      	ldrb	r3, [r7, #3]
 80069f0:	f003 0307 	and.w	r3, r3, #7
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80069fa:	883b      	ldrh	r3, [r7, #0]
 80069fc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	78ba      	ldrb	r2, [r7, #2]
 8006a08:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006a0a:	78bb      	ldrb	r3, [r7, #2]
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d102      	bne.n	8006a16 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d101      	bne.n	8006a24 <HAL_PCD_EP_Open+0x98>
 8006a20:	2302      	movs	r3, #2
 8006a22:	e00e      	b.n	8006a42 <HAL_PCD_EP_Open+0xb6>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68f9      	ldr	r1, [r7, #12]
 8006a32:	4618      	mov	r0, r3
 8006a34:	f005 fcac 	bl	800c390 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8006a40:	7afb      	ldrb	r3, [r7, #11]
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b084      	sub	sp, #16
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
 8006a52:	460b      	mov	r3, r1
 8006a54:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006a56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	da0e      	bge.n	8006a7c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a5e:	78fb      	ldrb	r3, [r7, #3]
 8006a60:	f003 0207 	and.w	r2, r3, #7
 8006a64:	4613      	mov	r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	00db      	lsls	r3, r3, #3
 8006a6c:	3310      	adds	r3, #16
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	4413      	add	r3, r2
 8006a72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2201      	movs	r2, #1
 8006a78:	705a      	strb	r2, [r3, #1]
 8006a7a:	e00e      	b.n	8006a9a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a7c:	78fb      	ldrb	r3, [r7, #3]
 8006a7e:	f003 0207 	and.w	r2, r3, #7
 8006a82:	4613      	mov	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4413      	add	r3, r2
 8006a88:	00db      	lsls	r3, r3, #3
 8006a8a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	4413      	add	r3, r2
 8006a92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a9a:	78fb      	ldrb	r3, [r7, #3]
 8006a9c:	f003 0307 	and.w	r3, r3, #7
 8006aa0:	b2da      	uxtb	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d101      	bne.n	8006ab4 <HAL_PCD_EP_Close+0x6a>
 8006ab0:	2302      	movs	r3, #2
 8006ab2:	e00e      	b.n	8006ad2 <HAL_PCD_EP_Close+0x88>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68f9      	ldr	r1, [r7, #12]
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f006 f94c 	bl	800cd60 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b086      	sub	sp, #24
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	60f8      	str	r0, [r7, #12]
 8006ae2:	607a      	str	r2, [r7, #4]
 8006ae4:	603b      	str	r3, [r7, #0]
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006aea:	7afb      	ldrb	r3, [r7, #11]
 8006aec:	f003 0207 	and.w	r2, r3, #7
 8006af0:	4613      	mov	r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	00db      	lsls	r3, r3, #3
 8006af8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	4413      	add	r3, r2
 8006b00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	683a      	ldr	r2, [r7, #0]
 8006b0c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	2200      	movs	r2, #0
 8006b12:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	2200      	movs	r2, #0
 8006b18:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b1a:	7afb      	ldrb	r3, [r7, #11]
 8006b1c:	f003 0307 	and.w	r3, r3, #7
 8006b20:	b2da      	uxtb	r2, r3
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	6979      	ldr	r1, [r7, #20]
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f006 fb04 	bl	800d13a <USB_EPStartXfer>

  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3718      	adds	r7, #24
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	460b      	mov	r3, r1
 8006b46:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006b48:	78fb      	ldrb	r3, [r7, #3]
 8006b4a:	f003 0207 	and.w	r2, r3, #7
 8006b4e:	6879      	ldr	r1, [r7, #4]
 8006b50:	4613      	mov	r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	00db      	lsls	r3, r3, #3
 8006b58:	440b      	add	r3, r1
 8006b5a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8006b5e:	681b      	ldr	r3, [r3, #0]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b086      	sub	sp, #24
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	607a      	str	r2, [r7, #4]
 8006b76:	603b      	str	r3, [r7, #0]
 8006b78:	460b      	mov	r3, r1
 8006b7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b7c:	7afb      	ldrb	r3, [r7, #11]
 8006b7e:	f003 0207 	and.w	r2, r3, #7
 8006b82:	4613      	mov	r3, r2
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	4413      	add	r3, r2
 8006b88:	00db      	lsls	r3, r3, #3
 8006b8a:	3310      	adds	r3, #16
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	4413      	add	r3, r2
 8006b90:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	683a      	ldr	r2, [r7, #0]
 8006b9c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	683a      	ldr	r2, [r7, #0]
 8006baa:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006bb8:	7afb      	ldrb	r3, [r7, #11]
 8006bba:	f003 0307 	and.w	r3, r3, #7
 8006bbe:	b2da      	uxtb	r2, r3
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	6979      	ldr	r1, [r7, #20]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f006 fab5 	bl	800d13a <USB_EPStartXfer>

  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3718      	adds	r7, #24
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b084      	sub	sp, #16
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
 8006be2:	460b      	mov	r3, r1
 8006be4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006be6:	78fb      	ldrb	r3, [r7, #3]
 8006be8:	f003 0307 	and.w	r3, r3, #7
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	7912      	ldrb	r2, [r2, #4]
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d901      	bls.n	8006bf8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e03e      	b.n	8006c76 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006bf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	da0e      	bge.n	8006c1e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c00:	78fb      	ldrb	r3, [r7, #3]
 8006c02:	f003 0207 	and.w	r2, r3, #7
 8006c06:	4613      	mov	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	4413      	add	r3, r2
 8006c0c:	00db      	lsls	r3, r3, #3
 8006c0e:	3310      	adds	r3, #16
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	4413      	add	r3, r2
 8006c14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	705a      	strb	r2, [r3, #1]
 8006c1c:	e00c      	b.n	8006c38 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006c1e:	78fa      	ldrb	r2, [r7, #3]
 8006c20:	4613      	mov	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	00db      	lsls	r3, r3, #3
 8006c28:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	4413      	add	r3, r2
 8006c30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c3e:	78fb      	ldrb	r3, [r7, #3]
 8006c40:	f003 0307 	and.w	r3, r3, #7
 8006c44:	b2da      	uxtb	r2, r3
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d101      	bne.n	8006c58 <HAL_PCD_EP_SetStall+0x7e>
 8006c54:	2302      	movs	r3, #2
 8006c56:	e00e      	b.n	8006c76 <HAL_PCD_EP_SetStall+0x9c>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68f9      	ldr	r1, [r7, #12]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f007 f816 	bl	800dc98 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b084      	sub	sp, #16
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
 8006c86:	460b      	mov	r3, r1
 8006c88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006c8a:	78fb      	ldrb	r3, [r7, #3]
 8006c8c:	f003 030f 	and.w	r3, r3, #15
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	7912      	ldrb	r2, [r2, #4]
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d901      	bls.n	8006c9c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e040      	b.n	8006d1e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006c9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	da0e      	bge.n	8006cc2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ca4:	78fb      	ldrb	r3, [r7, #3]
 8006ca6:	f003 0207 	and.w	r2, r3, #7
 8006caa:	4613      	mov	r3, r2
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	4413      	add	r3, r2
 8006cb0:	00db      	lsls	r3, r3, #3
 8006cb2:	3310      	adds	r3, #16
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	705a      	strb	r2, [r3, #1]
 8006cc0:	e00e      	b.n	8006ce0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006cc2:	78fb      	ldrb	r3, [r7, #3]
 8006cc4:	f003 0207 	and.w	r2, r3, #7
 8006cc8:	4613      	mov	r3, r2
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	4413      	add	r3, r2
 8006cce:	00db      	lsls	r3, r3, #3
 8006cd0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ce6:	78fb      	ldrb	r3, [r7, #3]
 8006ce8:	f003 0307 	and.w	r3, r3, #7
 8006cec:	b2da      	uxtb	r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d101      	bne.n	8006d00 <HAL_PCD_EP_ClrStall+0x82>
 8006cfc:	2302      	movs	r3, #2
 8006cfe:	e00e      	b.n	8006d1e <HAL_PCD_EP_ClrStall+0xa0>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68f9      	ldr	r1, [r7, #12]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f007 f813 	bl	800dd3a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b092      	sub	sp, #72	@ 0x48
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006d2e:	e333      	b.n	8007398 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006d38:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006d3a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	f003 030f 	and.w	r3, r3, #15
 8006d42:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8006d46:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f040 8108 	bne.w	8006f60 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006d50:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006d52:	f003 0310 	and.w	r3, r3, #16
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d14c      	bne.n	8006df4 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	881b      	ldrh	r3, [r3, #0]
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006d66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d6a:	813b      	strh	r3, [r7, #8]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	893b      	ldrh	r3, [r7, #8]
 8006d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	3310      	adds	r3, #16
 8006d82:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	461a      	mov	r2, r3
 8006d90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	00db      	lsls	r3, r3, #3
 8006d96:	4413      	add	r3, r2
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	6812      	ldr	r2, [r2, #0]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006da2:	881b      	ldrh	r3, [r3, #0]
 8006da4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006da8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006daa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006dac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dae:	695a      	ldr	r2, [r3, #20]
 8006db0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006db2:	69db      	ldr	r3, [r3, #28]
 8006db4:	441a      	add	r2, r3
 8006db6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006db8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006dba:	2100      	movs	r1, #0
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f008 ff8a 	bl	800fcd6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	7b1b      	ldrb	r3, [r3, #12]
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f000 82e5 	beq.w	8007398 <PCD_EP_ISR_Handler+0x672>
 8006dce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dd0:	699b      	ldr	r3, [r3, #24]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f040 82e0 	bne.w	8007398 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	7b1b      	ldrb	r3, [r3, #12]
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006de2:	b2da      	uxtb	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	731a      	strb	r2, [r3, #12]
 8006df2:	e2d1      	b.n	8007398 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006dfa:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	881b      	ldrh	r3, [r3, #0]
 8006e02:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006e04:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006e06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d032      	beq.n	8006e74 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	461a      	mov	r2, r3
 8006e1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	00db      	lsls	r3, r3, #3
 8006e20:	4413      	add	r3, r2
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	6812      	ldr	r2, [r2, #0]
 8006e26:	4413      	add	r3, r2
 8006e28:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006e2c:	881b      	ldrh	r3, [r3, #0]
 8006e2e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006e32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e34:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6818      	ldr	r0, [r3, #0]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8006e40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e42:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006e44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e46:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	f007 f89c 	bl	800df86 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	881b      	ldrh	r3, [r3, #0]
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	817b      	strh	r3, [r7, #10]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	897a      	ldrh	r2, [r7, #10]
 8006e64:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006e68:	b292      	uxth	r2, r2
 8006e6a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f008 ff05 	bl	800fc7c <HAL_PCD_SetupStageCallback>
 8006e72:	e291      	b.n	8007398 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006e74:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f280 828d 	bge.w	8007398 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	881b      	ldrh	r3, [r3, #0]
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	81fb      	strh	r3, [r7, #14]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	89fa      	ldrh	r2, [r7, #14]
 8006e94:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006e98:	b292      	uxth	r2, r2
 8006e9a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	00db      	lsls	r3, r3, #3
 8006eae:	4413      	add	r3, r2
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	6812      	ldr	r2, [r2, #0]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006eba:	881b      	ldrh	r3, [r3, #0]
 8006ebc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006ec0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ec2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006ec4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ec6:	69db      	ldr	r3, [r3, #28]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d019      	beq.n	8006f00 <PCD_EP_ISR_Handler+0x1da>
 8006ecc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ece:	695b      	ldr	r3, [r3, #20]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d015      	beq.n	8006f00 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6818      	ldr	r0, [r3, #0]
 8006ed8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006eda:	6959      	ldr	r1, [r3, #20]
 8006edc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ede:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006ee0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ee2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	f007 f84e 	bl	800df86 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006eea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006eec:	695a      	ldr	r2, [r3, #20]
 8006eee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ef0:	69db      	ldr	r3, [r3, #28]
 8006ef2:	441a      	add	r2, r3
 8006ef4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ef6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006ef8:	2100      	movs	r1, #0
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f008 fed0 	bl	800fca0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	881b      	ldrh	r3, [r3, #0]
 8006f06:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006f08:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006f0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f040 8242 	bne.w	8007398 <PCD_EP_ISR_Handler+0x672>
 8006f14:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006f16:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006f1a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006f1e:	f000 823b 	beq.w	8007398 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	881b      	ldrh	r3, [r3, #0]
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f32:	81bb      	strh	r3, [r7, #12]
 8006f34:	89bb      	ldrh	r3, [r7, #12]
 8006f36:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006f3a:	81bb      	strh	r3, [r7, #12]
 8006f3c:	89bb      	ldrh	r3, [r7, #12]
 8006f3e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006f42:	81bb      	strh	r3, [r7, #12]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	89bb      	ldrh	r3, [r7, #12]
 8006f4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	8013      	strh	r3, [r2, #0]
 8006f5e:	e21b      	b.n	8007398 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	461a      	mov	r2, r3
 8006f66:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4413      	add	r3, r2
 8006f6e:	881b      	ldrh	r3, [r3, #0]
 8006f70:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006f72:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f280 80f1 	bge.w	800715e <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	461a      	mov	r2, r3
 8006f82:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	4413      	add	r3, r2
 8006f8a:	881b      	ldrh	r3, [r3, #0]
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006f92:	4013      	ands	r3, r2
 8006f94:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4413      	add	r3, r2
 8006fa4:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006fa6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006faa:	b292      	uxth	r2, r2
 8006fac:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006fae:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	4413      	add	r3, r2
 8006fb8:	00db      	lsls	r3, r3, #3
 8006fba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006fc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fc6:	7b1b      	ldrb	r3, [r3, #12]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d123      	bne.n	8007014 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	00db      	lsls	r3, r3, #3
 8006fde:	4413      	add	r3, r2
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	6812      	ldr	r2, [r2, #0]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006fea:	881b      	ldrh	r3, [r3, #0]
 8006fec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ff0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8006ff4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f000 808b 	beq.w	8007114 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6818      	ldr	r0, [r3, #0]
 8007002:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007004:	6959      	ldr	r1, [r3, #20]
 8007006:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007008:	88da      	ldrh	r2, [r3, #6]
 800700a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800700e:	f006 ffba 	bl	800df86 <USB_ReadPMA>
 8007012:	e07f      	b.n	8007114 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007014:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007016:	78db      	ldrb	r3, [r3, #3]
 8007018:	2b02      	cmp	r3, #2
 800701a:	d109      	bne.n	8007030 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800701c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800701e:	461a      	mov	r2, r3
 8007020:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 f9c6 	bl	80073b4 <HAL_PCD_EP_DB_Receive>
 8007028:	4603      	mov	r3, r0
 800702a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800702e:	e071      	b.n	8007114 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	461a      	mov	r2, r3
 8007036:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	4413      	add	r3, r2
 800703e:	881b      	ldrh	r3, [r3, #0]
 8007040:	b29b      	uxth	r3, r3
 8007042:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007046:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800704a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	461a      	mov	r2, r3
 8007052:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	441a      	add	r2, r3
 800705a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800705c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007060:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007064:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007068:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800706c:	b29b      	uxth	r3, r3
 800706e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	461a      	mov	r2, r3
 8007076:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	4413      	add	r3, r2
 800707e:	881b      	ldrh	r3, [r3, #0]
 8007080:	b29b      	uxth	r3, r3
 8007082:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d022      	beq.n	80070d0 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007092:	b29b      	uxth	r3, r3
 8007094:	461a      	mov	r2, r3
 8007096:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	00db      	lsls	r3, r3, #3
 800709c:	4413      	add	r3, r2
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	6812      	ldr	r2, [r2, #0]
 80070a2:	4413      	add	r3, r2
 80070a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80070a8:	881b      	ldrh	r3, [r3, #0]
 80070aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070ae:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80070b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d02c      	beq.n	8007114 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6818      	ldr	r0, [r3, #0]
 80070be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070c0:	6959      	ldr	r1, [r3, #20]
 80070c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070c4:	891a      	ldrh	r2, [r3, #8]
 80070c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80070ca:	f006 ff5c 	bl	800df86 <USB_ReadPMA>
 80070ce:	e021      	b.n	8007114 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070d8:	b29b      	uxth	r3, r3
 80070da:	461a      	mov	r2, r3
 80070dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	00db      	lsls	r3, r3, #3
 80070e2:	4413      	add	r3, r2
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	6812      	ldr	r2, [r2, #0]
 80070e8:	4413      	add	r3, r2
 80070ea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80070ee:	881b      	ldrh	r3, [r3, #0]
 80070f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070f4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80070f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d009      	beq.n	8007114 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6818      	ldr	r0, [r3, #0]
 8007104:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007106:	6959      	ldr	r1, [r3, #20]
 8007108:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800710a:	895a      	ldrh	r2, [r3, #10]
 800710c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007110:	f006 ff39 	bl	800df86 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007114:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007116:	69da      	ldr	r2, [r3, #28]
 8007118:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800711c:	441a      	add	r2, r3
 800711e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007120:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8007122:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007124:	695a      	ldr	r2, [r3, #20]
 8007126:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800712a:	441a      	add	r2, r3
 800712c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800712e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007130:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d005      	beq.n	8007144 <PCD_EP_ISR_Handler+0x41e>
 8007138:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800713c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	429a      	cmp	r2, r3
 8007142:	d206      	bcs.n	8007152 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007144:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	4619      	mov	r1, r3
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f008 fda8 	bl	800fca0 <HAL_PCD_DataOutStageCallback>
 8007150:	e005      	b.n	800715e <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007158:	4618      	mov	r0, r3
 800715a:	f005 ffee 	bl	800d13a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800715e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007160:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007164:	2b00      	cmp	r3, #0
 8007166:	f000 8117 	beq.w	8007398 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800716a:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800716e:	4613      	mov	r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	4413      	add	r3, r2
 8007174:	00db      	lsls	r3, r3, #3
 8007176:	3310      	adds	r3, #16
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	4413      	add	r3, r2
 800717c:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	461a      	mov	r2, r3
 8007184:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4413      	add	r3, r2
 800718c:	881b      	ldrh	r3, [r3, #0]
 800718e:	b29b      	uxth	r3, r3
 8007190:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8007194:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007198:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	461a      	mov	r2, r3
 80071a0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	441a      	add	r2, r3
 80071a8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80071aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80071b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071b8:	78db      	ldrb	r3, [r3, #3]
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	f040 80a1 	bne.w	8007302 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80071c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071c2:	2200      	movs	r2, #0
 80071c4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80071c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071c8:	7b1b      	ldrb	r3, [r3, #12]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f000 8092 	beq.w	80072f4 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80071d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80071d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d046      	beq.n	8007268 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80071da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071dc:	785b      	ldrb	r3, [r3, #1]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d126      	bne.n	8007230 <PCD_EP_ISR_Handler+0x50a>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	617b      	str	r3, [r7, #20]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	461a      	mov	r2, r3
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	4413      	add	r3, r2
 80071f8:	617b      	str	r3, [r7, #20]
 80071fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	00da      	lsls	r2, r3, #3
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	4413      	add	r3, r2
 8007204:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007208:	613b      	str	r3, [r7, #16]
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	881b      	ldrh	r3, [r3, #0]
 800720e:	b29b      	uxth	r3, r3
 8007210:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007214:	b29a      	uxth	r2, r3
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	801a      	strh	r2, [r3, #0]
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	881b      	ldrh	r3, [r3, #0]
 800721e:	b29b      	uxth	r3, r3
 8007220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007228:	b29a      	uxth	r2, r3
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	801a      	strh	r2, [r3, #0]
 800722e:	e061      	b.n	80072f4 <PCD_EP_ISR_Handler+0x5ce>
 8007230:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007232:	785b      	ldrb	r3, [r3, #1]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d15d      	bne.n	80072f4 <PCD_EP_ISR_Handler+0x5ce>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	61fb      	str	r3, [r7, #28]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007246:	b29b      	uxth	r3, r3
 8007248:	461a      	mov	r2, r3
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	4413      	add	r3, r2
 800724e:	61fb      	str	r3, [r7, #28]
 8007250:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	00da      	lsls	r2, r3, #3
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	4413      	add	r3, r2
 800725a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800725e:	61bb      	str	r3, [r7, #24]
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	2200      	movs	r2, #0
 8007264:	801a      	strh	r2, [r3, #0]
 8007266:	e045      	b.n	80072f4 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800726e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007270:	785b      	ldrb	r3, [r3, #1]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d126      	bne.n	80072c4 <PCD_EP_ISR_Handler+0x59e>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	627b      	str	r3, [r7, #36]	@ 0x24
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007284:	b29b      	uxth	r3, r3
 8007286:	461a      	mov	r2, r3
 8007288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728a:	4413      	add	r3, r2
 800728c:	627b      	str	r3, [r7, #36]	@ 0x24
 800728e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	00da      	lsls	r2, r3, #3
 8007294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007296:	4413      	add	r3, r2
 8007298:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800729c:	623b      	str	r3, [r7, #32]
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	881b      	ldrh	r3, [r3, #0]
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	6a3b      	ldr	r3, [r7, #32]
 80072ac:	801a      	strh	r2, [r3, #0]
 80072ae:	6a3b      	ldr	r3, [r7, #32]
 80072b0:	881b      	ldrh	r3, [r3, #0]
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072bc:	b29a      	uxth	r2, r3
 80072be:	6a3b      	ldr	r3, [r7, #32]
 80072c0:	801a      	strh	r2, [r3, #0]
 80072c2:	e017      	b.n	80072f4 <PCD_EP_ISR_Handler+0x5ce>
 80072c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072c6:	785b      	ldrb	r3, [r3, #1]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d113      	bne.n	80072f4 <PCD_EP_ISR_Handler+0x5ce>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	461a      	mov	r2, r3
 80072d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072da:	4413      	add	r3, r2
 80072dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	00da      	lsls	r2, r3, #3
 80072e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e6:	4413      	add	r3, r2
 80072e8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80072ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f0:	2200      	movs	r2, #0
 80072f2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80072f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	4619      	mov	r1, r3
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f008 fceb 	bl	800fcd6 <HAL_PCD_DataInStageCallback>
 8007300:	e04a      	b.n	8007398 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007302:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007308:	2b00      	cmp	r3, #0
 800730a:	d13f      	bne.n	800738c <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007314:	b29b      	uxth	r3, r3
 8007316:	461a      	mov	r2, r3
 8007318:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	00db      	lsls	r3, r3, #3
 800731e:	4413      	add	r3, r2
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	6812      	ldr	r2, [r2, #0]
 8007324:	4413      	add	r3, r2
 8007326:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800732a:	881b      	ldrh	r3, [r3, #0]
 800732c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007330:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8007332:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007334:	699a      	ldr	r2, [r3, #24]
 8007336:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007338:	429a      	cmp	r2, r3
 800733a:	d906      	bls.n	800734a <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800733c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800733e:	699a      	ldr	r2, [r3, #24]
 8007340:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007342:	1ad2      	subs	r2, r2, r3
 8007344:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007346:	619a      	str	r2, [r3, #24]
 8007348:	e002      	b.n	8007350 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800734a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800734c:	2200      	movs	r2, #0
 800734e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007350:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d106      	bne.n	8007366 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007358:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	4619      	mov	r1, r3
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f008 fcb9 	bl	800fcd6 <HAL_PCD_DataInStageCallback>
 8007364:	e018      	b.n	8007398 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007366:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007368:	695a      	ldr	r2, [r3, #20]
 800736a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800736c:	441a      	add	r2, r3
 800736e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007370:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007372:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007374:	69da      	ldr	r2, [r3, #28]
 8007376:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007378:	441a      	add	r2, r3
 800737a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800737c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007384:	4618      	mov	r0, r3
 8007386:	f005 fed8 	bl	800d13a <USB_EPStartXfer>
 800738a:	e005      	b.n	8007398 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800738c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800738e:	461a      	mov	r2, r3
 8007390:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f917 	bl	80075c6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	b21b      	sxth	r3, r3
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f6ff acc3 	blt.w	8006d30 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3748      	adds	r7, #72	@ 0x48
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b088      	sub	sp, #32
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	4613      	mov	r3, r2
 80073c0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80073c2:	88fb      	ldrh	r3, [r7, #6]
 80073c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d07c      	beq.n	80074c6 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	461a      	mov	r2, r3
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	00db      	lsls	r3, r3, #3
 80073de:	4413      	add	r3, r2
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	6812      	ldr	r2, [r2, #0]
 80073e4:	4413      	add	r3, r2
 80073e6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80073ea:	881b      	ldrh	r3, [r3, #0]
 80073ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073f0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	699a      	ldr	r2, [r3, #24]
 80073f6:	8b7b      	ldrh	r3, [r7, #26]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d306      	bcc.n	800740a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	699a      	ldr	r2, [r3, #24]
 8007400:	8b7b      	ldrh	r3, [r7, #26]
 8007402:	1ad2      	subs	r2, r2, r3
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	619a      	str	r2, [r3, #24]
 8007408:	e002      	b.n	8007410 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	2200      	movs	r2, #0
 800740e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d123      	bne.n	8007460 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	461a      	mov	r2, r3
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	4413      	add	r3, r2
 8007426:	881b      	ldrh	r3, [r3, #0]
 8007428:	b29b      	uxth	r3, r3
 800742a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800742e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007432:	833b      	strh	r3, [r7, #24]
 8007434:	8b3b      	ldrh	r3, [r7, #24]
 8007436:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800743a:	833b      	strh	r3, [r7, #24]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	461a      	mov	r2, r3
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	441a      	add	r2, r3
 800744a:	8b3b      	ldrh	r3, [r7, #24]
 800744c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007450:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007454:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007458:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800745c:	b29b      	uxth	r3, r3
 800745e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007460:	88fb      	ldrh	r3, [r7, #6]
 8007462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007466:	2b00      	cmp	r3, #0
 8007468:	d01f      	beq.n	80074aa <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	461a      	mov	r2, r3
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	881b      	ldrh	r3, [r3, #0]
 800747a:	b29b      	uxth	r3, r3
 800747c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007480:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007484:	82fb      	strh	r3, [r7, #22]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	461a      	mov	r2, r3
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	441a      	add	r2, r3
 8007494:	8afb      	ldrh	r3, [r7, #22]
 8007496:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800749a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800749e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074a2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80074aa:	8b7b      	ldrh	r3, [r7, #26]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f000 8085 	beq.w	80075bc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6818      	ldr	r0, [r3, #0]
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	6959      	ldr	r1, [r3, #20]
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	891a      	ldrh	r2, [r3, #8]
 80074be:	8b7b      	ldrh	r3, [r7, #26]
 80074c0:	f006 fd61 	bl	800df86 <USB_ReadPMA>
 80074c4:	e07a      	b.n	80075bc <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	461a      	mov	r2, r3
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	00db      	lsls	r3, r3, #3
 80074d8:	4413      	add	r3, r2
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	6812      	ldr	r2, [r2, #0]
 80074de:	4413      	add	r3, r2
 80074e0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80074e4:	881b      	ldrh	r3, [r3, #0]
 80074e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074ea:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	699a      	ldr	r2, [r3, #24]
 80074f0:	8b7b      	ldrh	r3, [r7, #26]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d306      	bcc.n	8007504 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	699a      	ldr	r2, [r3, #24]
 80074fa:	8b7b      	ldrh	r3, [r7, #26]
 80074fc:	1ad2      	subs	r2, r2, r3
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	619a      	str	r2, [r3, #24]
 8007502:	e002      	b.n	800750a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	2200      	movs	r2, #0
 8007508:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d123      	bne.n	800755a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	461a      	mov	r2, r3
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	4413      	add	r3, r2
 8007520:	881b      	ldrh	r3, [r3, #0]
 8007522:	b29b      	uxth	r3, r3
 8007524:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007528:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800752c:	83fb      	strh	r3, [r7, #30]
 800752e:	8bfb      	ldrh	r3, [r7, #30]
 8007530:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007534:	83fb      	strh	r3, [r7, #30]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	461a      	mov	r2, r3
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	441a      	add	r2, r3
 8007544:	8bfb      	ldrh	r3, [r7, #30]
 8007546:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800754a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800754e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007552:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007556:	b29b      	uxth	r3, r3
 8007558:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800755a:	88fb      	ldrh	r3, [r7, #6]
 800755c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007560:	2b00      	cmp	r3, #0
 8007562:	d11f      	bne.n	80075a4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	461a      	mov	r2, r3
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	4413      	add	r3, r2
 8007572:	881b      	ldrh	r3, [r3, #0]
 8007574:	b29b      	uxth	r3, r3
 8007576:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800757a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800757e:	83bb      	strh	r3, [r7, #28]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	461a      	mov	r2, r3
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	441a      	add	r2, r3
 800758e:	8bbb      	ldrh	r3, [r7, #28]
 8007590:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007594:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007598:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800759c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80075a4:	8b7b      	ldrh	r3, [r7, #26]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d008      	beq.n	80075bc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6818      	ldr	r0, [r3, #0]
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	6959      	ldr	r1, [r3, #20]
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	895a      	ldrh	r2, [r3, #10]
 80075b6:	8b7b      	ldrh	r3, [r7, #26]
 80075b8:	f006 fce5 	bl	800df86 <USB_ReadPMA>
    }
  }

  return count;
 80075bc:	8b7b      	ldrh	r3, [r7, #26]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3720      	adds	r7, #32
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b0a6      	sub	sp, #152	@ 0x98
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	60f8      	str	r0, [r7, #12]
 80075ce:	60b9      	str	r1, [r7, #8]
 80075d0:	4613      	mov	r3, r2
 80075d2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80075d4:	88fb      	ldrh	r3, [r7, #6]
 80075d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075da:	2b00      	cmp	r3, #0
 80075dc:	f000 81f7 	beq.w	80079ce <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	461a      	mov	r2, r3
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	00db      	lsls	r3, r3, #3
 80075f2:	4413      	add	r3, r2
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	6812      	ldr	r2, [r2, #0]
 80075f8:	4413      	add	r3, r2
 80075fa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80075fe:	881b      	ldrh	r3, [r3, #0]
 8007600:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007604:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	699a      	ldr	r2, [r3, #24]
 800760c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007610:	429a      	cmp	r2, r3
 8007612:	d907      	bls.n	8007624 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	699a      	ldr	r2, [r3, #24]
 8007618:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800761c:	1ad2      	subs	r2, r2, r3
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	619a      	str	r2, [r3, #24]
 8007622:	e002      	b.n	800762a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	2200      	movs	r2, #0
 8007628:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	699b      	ldr	r3, [r3, #24]
 800762e:	2b00      	cmp	r3, #0
 8007630:	f040 80e1 	bne.w	80077f6 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	785b      	ldrb	r3, [r3, #1]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d126      	bne.n	800768a <HAL_PCD_EP_DB_Transmit+0xc4>
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	633b      	str	r3, [r7, #48]	@ 0x30
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800764a:	b29b      	uxth	r3, r3
 800764c:	461a      	mov	r2, r3
 800764e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007650:	4413      	add	r3, r2
 8007652:	633b      	str	r3, [r7, #48]	@ 0x30
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	00da      	lsls	r2, r3, #3
 800765a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800765c:	4413      	add	r3, r2
 800765e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007662:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007666:	881b      	ldrh	r3, [r3, #0]
 8007668:	b29b      	uxth	r3, r3
 800766a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800766e:	b29a      	uxth	r2, r3
 8007670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007672:	801a      	strh	r2, [r3, #0]
 8007674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007676:	881b      	ldrh	r3, [r3, #0]
 8007678:	b29b      	uxth	r3, r3
 800767a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800767e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007682:	b29a      	uxth	r2, r3
 8007684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007686:	801a      	strh	r2, [r3, #0]
 8007688:	e01a      	b.n	80076c0 <HAL_PCD_EP_DB_Transmit+0xfa>
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	785b      	ldrb	r3, [r3, #1]
 800768e:	2b01      	cmp	r3, #1
 8007690:	d116      	bne.n	80076c0 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	461a      	mov	r2, r3
 80076a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a6:	4413      	add	r3, r2
 80076a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	00da      	lsls	r2, r3, #3
 80076b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b2:	4413      	add	r3, r2
 80076b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80076b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80076ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076bc:	2200      	movs	r2, #0
 80076be:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	785b      	ldrb	r3, [r3, #1]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d126      	bne.n	800771c <HAL_PCD_EP_DB_Transmit+0x156>
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	623b      	str	r3, [r7, #32]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076dc:	b29b      	uxth	r3, r3
 80076de:	461a      	mov	r2, r3
 80076e0:	6a3b      	ldr	r3, [r7, #32]
 80076e2:	4413      	add	r3, r2
 80076e4:	623b      	str	r3, [r7, #32]
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	00da      	lsls	r2, r3, #3
 80076ec:	6a3b      	ldr	r3, [r7, #32]
 80076ee:	4413      	add	r3, r2
 80076f0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80076f4:	61fb      	str	r3, [r7, #28]
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	881b      	ldrh	r3, [r3, #0]
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007700:	b29a      	uxth	r2, r3
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	801a      	strh	r2, [r3, #0]
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	881b      	ldrh	r3, [r3, #0]
 800770a:	b29b      	uxth	r3, r3
 800770c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007710:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007714:	b29a      	uxth	r2, r3
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	801a      	strh	r2, [r3, #0]
 800771a:	e017      	b.n	800774c <HAL_PCD_EP_DB_Transmit+0x186>
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	785b      	ldrb	r3, [r3, #1]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d113      	bne.n	800774c <HAL_PCD_EP_DB_Transmit+0x186>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800772c:	b29b      	uxth	r3, r3
 800772e:	461a      	mov	r2, r3
 8007730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007732:	4413      	add	r3, r2
 8007734:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	00da      	lsls	r2, r3, #3
 800773c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800773e:	4413      	add	r3, r2
 8007740:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007744:	627b      	str	r3, [r7, #36]	@ 0x24
 8007746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007748:	2200      	movs	r2, #0
 800774a:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	78db      	ldrb	r3, [r3, #3]
 8007750:	2b02      	cmp	r3, #2
 8007752:	d123      	bne.n	800779c <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	461a      	mov	r2, r3
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	4413      	add	r3, r2
 8007762:	881b      	ldrh	r3, [r3, #0]
 8007764:	b29b      	uxth	r3, r3
 8007766:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800776a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800776e:	837b      	strh	r3, [r7, #26]
 8007770:	8b7b      	ldrh	r3, [r7, #26]
 8007772:	f083 0320 	eor.w	r3, r3, #32
 8007776:	837b      	strh	r3, [r7, #26]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	461a      	mov	r2, r3
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	441a      	add	r2, r3
 8007786:	8b7b      	ldrh	r3, [r7, #26]
 8007788:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800778c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007790:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007798:	b29b      	uxth	r3, r3
 800779a:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	4619      	mov	r1, r3
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f008 fa97 	bl	800fcd6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80077a8:	88fb      	ldrh	r3, [r7, #6]
 80077aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d01f      	beq.n	80077f2 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	461a      	mov	r2, r3
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	4413      	add	r3, r2
 80077c0:	881b      	ldrh	r3, [r3, #0]
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077cc:	833b      	strh	r3, [r7, #24]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	461a      	mov	r2, r3
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	441a      	add	r2, r3
 80077dc:	8b3b      	ldrh	r3, [r7, #24]
 80077de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80077ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80077f2:	2300      	movs	r3, #0
 80077f4:	e31f      	b.n	8007e36 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80077f6:	88fb      	ldrh	r3, [r7, #6]
 80077f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d021      	beq.n	8007844 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	461a      	mov	r2, r3
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	4413      	add	r3, r2
 800780e:	881b      	ldrh	r3, [r3, #0]
 8007810:	b29b      	uxth	r3, r3
 8007812:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800781a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	461a      	mov	r2, r3
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	441a      	add	r2, r3
 800782c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007830:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007834:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007838:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800783c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007840:	b29b      	uxth	r3, r3
 8007842:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800784a:	2b01      	cmp	r3, #1
 800784c:	f040 82ca 	bne.w	8007de4 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	695a      	ldr	r2, [r3, #20]
 8007854:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007858:	441a      	add	r2, r3
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	69da      	ldr	r2, [r3, #28]
 8007862:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007866:	441a      	add	r2, r3
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	6a1a      	ldr	r2, [r3, #32]
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	429a      	cmp	r2, r3
 8007876:	d309      	bcc.n	800788c <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	6a1a      	ldr	r2, [r3, #32]
 8007882:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007884:	1ad2      	subs	r2, r2, r3
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	621a      	str	r2, [r3, #32]
 800788a:	e015      	b.n	80078b8 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	6a1b      	ldr	r3, [r3, #32]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d107      	bne.n	80078a4 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8007894:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007898:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80078a2:	e009      	b.n	80078b8 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	6a1b      	ldr	r3, [r3, #32]
 80078b0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	2200      	movs	r2, #0
 80078b6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	785b      	ldrb	r3, [r3, #1]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d15f      	bne.n	8007980 <HAL_PCD_EP_DB_Transmit+0x3ba>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	461a      	mov	r2, r3
 80078d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078d4:	4413      	add	r3, r2
 80078d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	00da      	lsls	r2, r3, #3
 80078de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078e0:	4413      	add	r3, r2
 80078e2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80078e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078ea:	881b      	ldrh	r3, [r3, #0]
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078f6:	801a      	strh	r2, [r3, #0]
 80078f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d10a      	bne.n	8007914 <HAL_PCD_EP_DB_Transmit+0x34e>
 80078fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007900:	881b      	ldrh	r3, [r3, #0]
 8007902:	b29b      	uxth	r3, r3
 8007904:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007908:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800790c:	b29a      	uxth	r2, r3
 800790e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007910:	801a      	strh	r2, [r3, #0]
 8007912:	e051      	b.n	80079b8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8007914:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007916:	2b3e      	cmp	r3, #62	@ 0x3e
 8007918:	d816      	bhi.n	8007948 <HAL_PCD_EP_DB_Transmit+0x382>
 800791a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800791c:	085b      	lsrs	r3, r3, #1
 800791e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007920:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007922:	f003 0301 	and.w	r3, r3, #1
 8007926:	2b00      	cmp	r3, #0
 8007928:	d002      	beq.n	8007930 <HAL_PCD_EP_DB_Transmit+0x36a>
 800792a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800792c:	3301      	adds	r3, #1
 800792e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007930:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007932:	881b      	ldrh	r3, [r3, #0]
 8007934:	b29a      	uxth	r2, r3
 8007936:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007938:	b29b      	uxth	r3, r3
 800793a:	029b      	lsls	r3, r3, #10
 800793c:	b29b      	uxth	r3, r3
 800793e:	4313      	orrs	r3, r2
 8007940:	b29a      	uxth	r2, r3
 8007942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007944:	801a      	strh	r2, [r3, #0]
 8007946:	e037      	b.n	80079b8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8007948:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800794a:	095b      	lsrs	r3, r3, #5
 800794c:	653b      	str	r3, [r7, #80]	@ 0x50
 800794e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007950:	f003 031f 	and.w	r3, r3, #31
 8007954:	2b00      	cmp	r3, #0
 8007956:	d102      	bne.n	800795e <HAL_PCD_EP_DB_Transmit+0x398>
 8007958:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800795a:	3b01      	subs	r3, #1
 800795c:	653b      	str	r3, [r7, #80]	@ 0x50
 800795e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007960:	881b      	ldrh	r3, [r3, #0]
 8007962:	b29a      	uxth	r2, r3
 8007964:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007966:	b29b      	uxth	r3, r3
 8007968:	029b      	lsls	r3, r3, #10
 800796a:	b29b      	uxth	r3, r3
 800796c:	4313      	orrs	r3, r2
 800796e:	b29b      	uxth	r3, r3
 8007970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007978:	b29a      	uxth	r2, r3
 800797a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800797c:	801a      	strh	r2, [r3, #0]
 800797e:	e01b      	b.n	80079b8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	785b      	ldrb	r3, [r3, #1]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d117      	bne.n	80079b8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007996:	b29b      	uxth	r3, r3
 8007998:	461a      	mov	r2, r3
 800799a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800799c:	4413      	add	r3, r2
 800799e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	00da      	lsls	r2, r3, #3
 80079a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079a8:	4413      	add	r3, r2
 80079aa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80079ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80079b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079b6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6818      	ldr	r0, [r3, #0]
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	6959      	ldr	r1, [r3, #20]
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	891a      	ldrh	r2, [r3, #8]
 80079c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	f006 fa9b 	bl	800df02 <USB_WritePMA>
 80079cc:	e20a      	b.n	8007de4 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	461a      	mov	r2, r3
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	00db      	lsls	r3, r3, #3
 80079e0:	4413      	add	r3, r2
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	6812      	ldr	r2, [r2, #0]
 80079e6:	4413      	add	r3, r2
 80079e8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80079ec:	881b      	ldrh	r3, [r3, #0]
 80079ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079f2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	699a      	ldr	r2, [r3, #24]
 80079fa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d307      	bcc.n	8007a12 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	699a      	ldr	r2, [r3, #24]
 8007a06:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007a0a:	1ad2      	subs	r2, r2, r3
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	619a      	str	r2, [r3, #24]
 8007a10:	e002      	b.n	8007a18 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	2200      	movs	r2, #0
 8007a16:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	699b      	ldr	r3, [r3, #24]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f040 80f6 	bne.w	8007c0e <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	785b      	ldrb	r3, [r3, #1]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d126      	bne.n	8007a78 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a3e:	4413      	add	r3, r2
 8007a40:	677b      	str	r3, [r7, #116]	@ 0x74
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	00da      	lsls	r2, r3, #3
 8007a48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a50:	673b      	str	r3, [r7, #112]	@ 0x70
 8007a52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a54:	881b      	ldrh	r3, [r3, #0]
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a60:	801a      	strh	r2, [r3, #0]
 8007a62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a64:	881b      	ldrh	r3, [r3, #0]
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a74:	801a      	strh	r2, [r3, #0]
 8007a76:	e01a      	b.n	8007aae <HAL_PCD_EP_DB_Transmit+0x4e8>
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	785b      	ldrb	r3, [r3, #1]
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d116      	bne.n	8007aae <HAL_PCD_EP_DB_Transmit+0x4e8>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	461a      	mov	r2, r3
 8007a92:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007a94:	4413      	add	r3, r2
 8007a96:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	00da      	lsls	r2, r3, #3
 8007a9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007aa0:	4413      	add	r3, r2
 8007aa2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007aa6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007aa8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007aaa:	2200      	movs	r2, #0
 8007aac:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	785b      	ldrb	r3, [r3, #1]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d12f      	bne.n	8007b1e <HAL_PCD_EP_DB_Transmit+0x558>
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	00da      	lsls	r2, r3, #3
 8007ae2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007aec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007af0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007af4:	881b      	ldrh	r3, [r3, #0]
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b02:	801a      	strh	r2, [r3, #0]
 8007b04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b08:	881b      	ldrh	r3, [r3, #0]
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b1a:	801a      	strh	r2, [r3, #0]
 8007b1c:	e01c      	b.n	8007b58 <HAL_PCD_EP_DB_Transmit+0x592>
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	785b      	ldrb	r3, [r3, #1]
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d118      	bne.n	8007b58 <HAL_PCD_EP_DB_Transmit+0x592>
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	461a      	mov	r2, r3
 8007b32:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b36:	4413      	add	r3, r2
 8007b38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	00da      	lsls	r2, r3, #3
 8007b42:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b46:	4413      	add	r3, r2
 8007b48:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007b4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007b50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007b54:	2200      	movs	r2, #0
 8007b56:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	78db      	ldrb	r3, [r3, #3]
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d127      	bne.n	8007bb0 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	461a      	mov	r2, r3
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4413      	add	r3, r2
 8007b6e:	881b      	ldrh	r3, [r3, #0]
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b7a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007b7e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007b82:	f083 0320 	eor.w	r3, r3, #32
 8007b86:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	461a      	mov	r2, r3
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	441a      	add	r2, r3
 8007b98:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007b9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ba0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ba4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ba8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	68f8      	ldr	r0, [r7, #12]
 8007bb8:	f008 f88d 	bl	800fcd6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007bbc:	88fb      	ldrh	r3, [r7, #6]
 8007bbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d121      	bne.n	8007c0a <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	461a      	mov	r2, r3
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	4413      	add	r3, r2
 8007bd4:	881b      	ldrh	r3, [r3, #0]
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007be0:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	461a      	mov	r2, r3
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	441a      	add	r2, r3
 8007bf2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007bf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bfe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007c02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	e113      	b.n	8007e36 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007c0e:	88fb      	ldrh	r3, [r7, #6]
 8007c10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d121      	bne.n	8007c5c <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	881b      	ldrh	r3, [r3, #0]
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c32:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	441a      	add	r2, r3
 8007c44:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007c48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007c54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	f040 80be 	bne.w	8007de4 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	695a      	ldr	r2, [r3, #20]
 8007c6c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007c70:	441a      	add	r2, r3
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	69da      	ldr	r2, [r3, #28]
 8007c7a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007c7e:	441a      	add	r2, r3
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	6a1a      	ldr	r2, [r3, #32]
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	691b      	ldr	r3, [r3, #16]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d309      	bcc.n	8007ca4 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	6a1a      	ldr	r2, [r3, #32]
 8007c9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c9c:	1ad2      	subs	r2, r2, r3
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	621a      	str	r2, [r3, #32]
 8007ca2:	e015      	b.n	8007cd0 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	6a1b      	ldr	r3, [r3, #32]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d107      	bne.n	8007cbc <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8007cac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007cb0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8007cba:	e009      	b.n	8007cd0 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	6a1b      	ldr	r3, [r3, #32]
 8007cc0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	785b      	ldrb	r3, [r3, #1]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d15f      	bne.n	8007d9e <HAL_PCD_EP_DB_Transmit+0x7d8>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	461a      	mov	r2, r3
 8007cf0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007cf2:	4413      	add	r3, r2
 8007cf4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	00da      	lsls	r2, r3, #3
 8007cfc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007cfe:	4413      	add	r3, r2
 8007d00:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007d04:	667b      	str	r3, [r7, #100]	@ 0x64
 8007d06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d08:	881b      	ldrh	r3, [r3, #0]
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d14:	801a      	strh	r2, [r3, #0]
 8007d16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d10a      	bne.n	8007d32 <HAL_PCD_EP_DB_Transmit+0x76c>
 8007d1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d1e:	881b      	ldrh	r3, [r3, #0]
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d2e:	801a      	strh	r2, [r3, #0]
 8007d30:	e04e      	b.n	8007dd0 <HAL_PCD_EP_DB_Transmit+0x80a>
 8007d32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d34:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d36:	d816      	bhi.n	8007d66 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8007d38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d3a:	085b      	lsrs	r3, r3, #1
 8007d3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d40:	f003 0301 	and.w	r3, r3, #1
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d002      	beq.n	8007d4e <HAL_PCD_EP_DB_Transmit+0x788>
 8007d48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d50:	881b      	ldrh	r3, [r3, #0]
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	029b      	lsls	r3, r3, #10
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d62:	801a      	strh	r2, [r3, #0]
 8007d64:	e034      	b.n	8007dd0 <HAL_PCD_EP_DB_Transmit+0x80a>
 8007d66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d68:	095b      	lsrs	r3, r3, #5
 8007d6a:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d6e:	f003 031f 	and.w	r3, r3, #31
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d102      	bne.n	8007d7c <HAL_PCD_EP_DB_Transmit+0x7b6>
 8007d76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d78:	3b01      	subs	r3, #1
 8007d7a:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d7e:	881b      	ldrh	r3, [r3, #0]
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	029b      	lsls	r3, r3, #10
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d96:	b29a      	uxth	r2, r3
 8007d98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d9a:	801a      	strh	r2, [r3, #0]
 8007d9c:	e018      	b.n	8007dd0 <HAL_PCD_EP_DB_Transmit+0x80a>
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	785b      	ldrb	r3, [r3, #1]
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d114      	bne.n	8007dd0 <HAL_PCD_EP_DB_Transmit+0x80a>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	461a      	mov	r2, r3
 8007db2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007db4:	4413      	add	r3, r2
 8007db6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	00da      	lsls	r2, r3, #3
 8007dbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007dc0:	4413      	add	r3, r2
 8007dc2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007dc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007dc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007dca:	b29a      	uxth	r2, r3
 8007dcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007dce:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6818      	ldr	r0, [r3, #0]
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	6959      	ldr	r1, [r3, #20]
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	895a      	ldrh	r2, [r3, #10]
 8007ddc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	f006 f88f 	bl	800df02 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	461a      	mov	r2, r3
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	4413      	add	r3, r2
 8007df2:	881b      	ldrh	r3, [r3, #0]
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dfe:	82fb      	strh	r3, [r7, #22]
 8007e00:	8afb      	ldrh	r3, [r7, #22]
 8007e02:	f083 0310 	eor.w	r3, r3, #16
 8007e06:	82fb      	strh	r3, [r7, #22]
 8007e08:	8afb      	ldrh	r3, [r7, #22]
 8007e0a:	f083 0320 	eor.w	r3, r3, #32
 8007e0e:	82fb      	strh	r3, [r7, #22]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	461a      	mov	r2, r3
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	441a      	add	r2, r3
 8007e1e:	8afb      	ldrh	r3, [r7, #22]
 8007e20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3798      	adds	r7, #152	@ 0x98
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007e3e:	b480      	push	{r7}
 8007e40:	b087      	sub	sp, #28
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	60f8      	str	r0, [r7, #12]
 8007e46:	607b      	str	r3, [r7, #4]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	817b      	strh	r3, [r7, #10]
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007e50:	897b      	ldrh	r3, [r7, #10]
 8007e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00b      	beq.n	8007e74 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e5c:	897b      	ldrh	r3, [r7, #10]
 8007e5e:	f003 0207 	and.w	r2, r3, #7
 8007e62:	4613      	mov	r3, r2
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	4413      	add	r3, r2
 8007e68:	00db      	lsls	r3, r3, #3
 8007e6a:	3310      	adds	r3, #16
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	4413      	add	r3, r2
 8007e70:	617b      	str	r3, [r7, #20]
 8007e72:	e009      	b.n	8007e88 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007e74:	897a      	ldrh	r2, [r7, #10]
 8007e76:	4613      	mov	r3, r2
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	4413      	add	r3, r2
 8007e7c:	00db      	lsls	r3, r3, #3
 8007e7e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	4413      	add	r3, r2
 8007e86:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007e88:	893b      	ldrh	r3, [r7, #8]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d107      	bne.n	8007e9e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	2200      	movs	r2, #0
 8007e92:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	b29a      	uxth	r2, r3
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	80da      	strh	r2, [r3, #6]
 8007e9c:	e00b      	b.n	8007eb6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	0c1b      	lsrs	r3, r3, #16
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007eb6:	2300      	movs	r3, #0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	371c      	adds	r7, #28
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	f043 0301 	orr.w	r3, r3, #1
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	f043 0302 	orr.w	r3, r3, #2
 8007f02:	b29a      	uxth	r2, r3
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3714      	adds	r7, #20
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d141      	bne.n	8007faa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007f26:	4b4b      	ldr	r3, [pc, #300]	@ (8008054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007f2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f32:	d131      	bne.n	8007f98 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007f34:	4b47      	ldr	r3, [pc, #284]	@ (8008054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f3a:	4a46      	ldr	r2, [pc, #280]	@ (8008054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007f44:	4b43      	ldr	r3, [pc, #268]	@ (8008054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007f4c:	4a41      	ldr	r2, [pc, #260]	@ (8008054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007f52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007f54:	4b40      	ldr	r3, [pc, #256]	@ (8008058 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2232      	movs	r2, #50	@ 0x32
 8007f5a:	fb02 f303 	mul.w	r3, r2, r3
 8007f5e:	4a3f      	ldr	r2, [pc, #252]	@ (800805c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007f60:	fba2 2303 	umull	r2, r3, r2, r3
 8007f64:	0c9b      	lsrs	r3, r3, #18
 8007f66:	3301      	adds	r3, #1
 8007f68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007f6a:	e002      	b.n	8007f72 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007f72:	4b38      	ldr	r3, [pc, #224]	@ (8008054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f74:	695b      	ldr	r3, [r3, #20]
 8007f76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f7e:	d102      	bne.n	8007f86 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1f2      	bne.n	8007f6c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007f86:	4b33      	ldr	r3, [pc, #204]	@ (8008054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f88:	695b      	ldr	r3, [r3, #20]
 8007f8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f92:	d158      	bne.n	8008046 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007f94:	2303      	movs	r3, #3
 8007f96:	e057      	b.n	8008048 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007f98:	4b2e      	ldr	r3, [pc, #184]	@ (8008054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f9e:	4a2d      	ldr	r2, [pc, #180]	@ (8008054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fa0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fa4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007fa8:	e04d      	b.n	8008046 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fb0:	d141      	bne.n	8008036 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007fb2:	4b28      	ldr	r3, [pc, #160]	@ (8008054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007fba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fbe:	d131      	bne.n	8008024 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007fc0:	4b24      	ldr	r3, [pc, #144]	@ (8008054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fc6:	4a23      	ldr	r2, [pc, #140]	@ (8008054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fcc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007fd0:	4b20      	ldr	r3, [pc, #128]	@ (8008054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007fd8:	4a1e      	ldr	r2, [pc, #120]	@ (8008054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007fde:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8008058 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2232      	movs	r2, #50	@ 0x32
 8007fe6:	fb02 f303 	mul.w	r3, r2, r3
 8007fea:	4a1c      	ldr	r2, [pc, #112]	@ (800805c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007fec:	fba2 2303 	umull	r2, r3, r2, r3
 8007ff0:	0c9b      	lsrs	r3, r3, #18
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007ff6:	e002      	b.n	8007ffe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	3b01      	subs	r3, #1
 8007ffc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007ffe:	4b15      	ldr	r3, [pc, #84]	@ (8008054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008000:	695b      	ldr	r3, [r3, #20]
 8008002:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008006:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800800a:	d102      	bne.n	8008012 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d1f2      	bne.n	8007ff8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008012:	4b10      	ldr	r3, [pc, #64]	@ (8008054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008014:	695b      	ldr	r3, [r3, #20]
 8008016:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800801a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800801e:	d112      	bne.n	8008046 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008020:	2303      	movs	r3, #3
 8008022:	e011      	b.n	8008048 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008024:	4b0b      	ldr	r3, [pc, #44]	@ (8008054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008026:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800802a:	4a0a      	ldr	r2, [pc, #40]	@ (8008054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800802c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008030:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008034:	e007      	b.n	8008046 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008036:	4b07      	ldr	r3, [pc, #28]	@ (8008054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800803e:	4a05      	ldr	r2, [pc, #20]	@ (8008054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008040:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008044:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008046:	2300      	movs	r3, #0
}
 8008048:	4618      	mov	r0, r3
 800804a:	3714      	adds	r7, #20
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr
 8008054:	40007000 	.word	0x40007000
 8008058:	20000008 	.word	0x20000008
 800805c:	431bde83 	.word	0x431bde83

08008060 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008060:	b480      	push	{r7}
 8008062:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008064:	4b05      	ldr	r3, [pc, #20]	@ (800807c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	4a04      	ldr	r2, [pc, #16]	@ (800807c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800806a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800806e:	6093      	str	r3, [r2, #8]
}
 8008070:	bf00      	nop
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop
 800807c:	40007000 	.word	0x40007000

08008080 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b088      	sub	sp, #32
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d101      	bne.n	8008092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	e2fe      	b.n	8008690 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 0301 	and.w	r3, r3, #1
 800809a:	2b00      	cmp	r3, #0
 800809c:	d075      	beq.n	800818a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800809e:	4b97      	ldr	r3, [pc, #604]	@ (80082fc <HAL_RCC_OscConfig+0x27c>)
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f003 030c 	and.w	r3, r3, #12
 80080a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80080a8:	4b94      	ldr	r3, [pc, #592]	@ (80082fc <HAL_RCC_OscConfig+0x27c>)
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	f003 0303 	and.w	r3, r3, #3
 80080b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	2b0c      	cmp	r3, #12
 80080b6:	d102      	bne.n	80080be <HAL_RCC_OscConfig+0x3e>
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	2b03      	cmp	r3, #3
 80080bc:	d002      	beq.n	80080c4 <HAL_RCC_OscConfig+0x44>
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	2b08      	cmp	r3, #8
 80080c2:	d10b      	bne.n	80080dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080c4:	4b8d      	ldr	r3, [pc, #564]	@ (80082fc <HAL_RCC_OscConfig+0x27c>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d05b      	beq.n	8008188 <HAL_RCC_OscConfig+0x108>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d157      	bne.n	8008188 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	e2d9      	b.n	8008690 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080e4:	d106      	bne.n	80080f4 <HAL_RCC_OscConfig+0x74>
 80080e6:	4b85      	ldr	r3, [pc, #532]	@ (80082fc <HAL_RCC_OscConfig+0x27c>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a84      	ldr	r2, [pc, #528]	@ (80082fc <HAL_RCC_OscConfig+0x27c>)
 80080ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080f0:	6013      	str	r3, [r2, #0]
 80080f2:	e01d      	b.n	8008130 <HAL_RCC_OscConfig+0xb0>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80080fc:	d10c      	bne.n	8008118 <HAL_RCC_OscConfig+0x98>
 80080fe:	4b7f      	ldr	r3, [pc, #508]	@ (80082fc <HAL_RCC_OscConfig+0x27c>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a7e      	ldr	r2, [pc, #504]	@ (80082fc <HAL_RCC_OscConfig+0x27c>)
 8008104:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008108:	6013      	str	r3, [r2, #0]
 800810a:	4b7c      	ldr	r3, [pc, #496]	@ (80082fc <HAL_RCC_OscConfig+0x27c>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a7b      	ldr	r2, [pc, #492]	@ (80082fc <HAL_RCC_OscConfig+0x27c>)
 8008110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008114:	6013      	str	r3, [r2, #0]
 8008116:	e00b      	b.n	8008130 <HAL_RCC_OscConfig+0xb0>
 8008118:	4b78      	ldr	r3, [pc, #480]	@ (80082fc <HAL_RCC_OscConfig+0x27c>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a77      	ldr	r2, [pc, #476]	@ (80082fc <HAL_RCC_OscConfig+0x27c>)
 800811e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008122:	6013      	str	r3, [r2, #0]
 8008124:	4b75      	ldr	r3, [pc, #468]	@ (80082fc <HAL_RCC_OscConfig+0x27c>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a74      	ldr	r2, [pc, #464]	@ (80082fc <HAL_RCC_OscConfig+0x27c>)
 800812a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800812e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d013      	beq.n	8008160 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008138:	f7fb fa08 	bl	800354c <HAL_GetTick>
 800813c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800813e:	e008      	b.n	8008152 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008140:	f7fb fa04 	bl	800354c <HAL_GetTick>
 8008144:	4602      	mov	r2, r0
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	2b64      	cmp	r3, #100	@ 0x64
 800814c:	d901      	bls.n	8008152 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800814e:	2303      	movs	r3, #3
 8008150:	e29e      	b.n	8008690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008152:	4b6a      	ldr	r3, [pc, #424]	@ (80082fc <HAL_RCC_OscConfig+0x27c>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800815a:	2b00      	cmp	r3, #0
 800815c:	d0f0      	beq.n	8008140 <HAL_RCC_OscConfig+0xc0>
 800815e:	e014      	b.n	800818a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008160:	f7fb f9f4 	bl	800354c <HAL_GetTick>
 8008164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008166:	e008      	b.n	800817a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008168:	f7fb f9f0 	bl	800354c <HAL_GetTick>
 800816c:	4602      	mov	r2, r0
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	2b64      	cmp	r3, #100	@ 0x64
 8008174:	d901      	bls.n	800817a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008176:	2303      	movs	r3, #3
 8008178:	e28a      	b.n	8008690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800817a:	4b60      	ldr	r3, [pc, #384]	@ (80082fc <HAL_RCC_OscConfig+0x27c>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008182:	2b00      	cmp	r3, #0
 8008184:	d1f0      	bne.n	8008168 <HAL_RCC_OscConfig+0xe8>
 8008186:	e000      	b.n	800818a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f003 0302 	and.w	r3, r3, #2
 8008192:	2b00      	cmp	r3, #0
 8008194:	d075      	beq.n	8008282 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008196:	4b59      	ldr	r3, [pc, #356]	@ (80082fc <HAL_RCC_OscConfig+0x27c>)
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	f003 030c 	and.w	r3, r3, #12
 800819e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80081a0:	4b56      	ldr	r3, [pc, #344]	@ (80082fc <HAL_RCC_OscConfig+0x27c>)
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	f003 0303 	and.w	r3, r3, #3
 80081a8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	2b0c      	cmp	r3, #12
 80081ae:	d102      	bne.n	80081b6 <HAL_RCC_OscConfig+0x136>
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d002      	beq.n	80081bc <HAL_RCC_OscConfig+0x13c>
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	2b04      	cmp	r3, #4
 80081ba:	d11f      	bne.n	80081fc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80081bc:	4b4f      	ldr	r3, [pc, #316]	@ (80082fc <HAL_RCC_OscConfig+0x27c>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d005      	beq.n	80081d4 <HAL_RCC_OscConfig+0x154>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d101      	bne.n	80081d4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e25d      	b.n	8008690 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081d4:	4b49      	ldr	r3, [pc, #292]	@ (80082fc <HAL_RCC_OscConfig+0x27c>)
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	061b      	lsls	r3, r3, #24
 80081e2:	4946      	ldr	r1, [pc, #280]	@ (80082fc <HAL_RCC_OscConfig+0x27c>)
 80081e4:	4313      	orrs	r3, r2
 80081e6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80081e8:	4b45      	ldr	r3, [pc, #276]	@ (8008300 <HAL_RCC_OscConfig+0x280>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7fb f961 	bl	80034b4 <HAL_InitTick>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d043      	beq.n	8008280 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	e249      	b.n	8008690 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d023      	beq.n	800824c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008204:	4b3d      	ldr	r3, [pc, #244]	@ (80082fc <HAL_RCC_OscConfig+0x27c>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a3c      	ldr	r2, [pc, #240]	@ (80082fc <HAL_RCC_OscConfig+0x27c>)
 800820a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800820e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008210:	f7fb f99c 	bl	800354c <HAL_GetTick>
 8008214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008216:	e008      	b.n	800822a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008218:	f7fb f998 	bl	800354c <HAL_GetTick>
 800821c:	4602      	mov	r2, r0
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	2b02      	cmp	r3, #2
 8008224:	d901      	bls.n	800822a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008226:	2303      	movs	r3, #3
 8008228:	e232      	b.n	8008690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800822a:	4b34      	ldr	r3, [pc, #208]	@ (80082fc <HAL_RCC_OscConfig+0x27c>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008232:	2b00      	cmp	r3, #0
 8008234:	d0f0      	beq.n	8008218 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008236:	4b31      	ldr	r3, [pc, #196]	@ (80082fc <HAL_RCC_OscConfig+0x27c>)
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	061b      	lsls	r3, r3, #24
 8008244:	492d      	ldr	r1, [pc, #180]	@ (80082fc <HAL_RCC_OscConfig+0x27c>)
 8008246:	4313      	orrs	r3, r2
 8008248:	604b      	str	r3, [r1, #4]
 800824a:	e01a      	b.n	8008282 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800824c:	4b2b      	ldr	r3, [pc, #172]	@ (80082fc <HAL_RCC_OscConfig+0x27c>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a2a      	ldr	r2, [pc, #168]	@ (80082fc <HAL_RCC_OscConfig+0x27c>)
 8008252:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008256:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008258:	f7fb f978 	bl	800354c <HAL_GetTick>
 800825c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800825e:	e008      	b.n	8008272 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008260:	f7fb f974 	bl	800354c <HAL_GetTick>
 8008264:	4602      	mov	r2, r0
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	1ad3      	subs	r3, r2, r3
 800826a:	2b02      	cmp	r3, #2
 800826c:	d901      	bls.n	8008272 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800826e:	2303      	movs	r3, #3
 8008270:	e20e      	b.n	8008690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008272:	4b22      	ldr	r3, [pc, #136]	@ (80082fc <HAL_RCC_OscConfig+0x27c>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800827a:	2b00      	cmp	r3, #0
 800827c:	d1f0      	bne.n	8008260 <HAL_RCC_OscConfig+0x1e0>
 800827e:	e000      	b.n	8008282 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008280:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f003 0308 	and.w	r3, r3, #8
 800828a:	2b00      	cmp	r3, #0
 800828c:	d041      	beq.n	8008312 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	695b      	ldr	r3, [r3, #20]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d01c      	beq.n	80082d0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008296:	4b19      	ldr	r3, [pc, #100]	@ (80082fc <HAL_RCC_OscConfig+0x27c>)
 8008298:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800829c:	4a17      	ldr	r2, [pc, #92]	@ (80082fc <HAL_RCC_OscConfig+0x27c>)
 800829e:	f043 0301 	orr.w	r3, r3, #1
 80082a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082a6:	f7fb f951 	bl	800354c <HAL_GetTick>
 80082aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80082ac:	e008      	b.n	80082c0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082ae:	f7fb f94d 	bl	800354c <HAL_GetTick>
 80082b2:	4602      	mov	r2, r0
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d901      	bls.n	80082c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80082bc:	2303      	movs	r3, #3
 80082be:	e1e7      	b.n	8008690 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80082c0:	4b0e      	ldr	r3, [pc, #56]	@ (80082fc <HAL_RCC_OscConfig+0x27c>)
 80082c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80082c6:	f003 0302 	and.w	r3, r3, #2
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d0ef      	beq.n	80082ae <HAL_RCC_OscConfig+0x22e>
 80082ce:	e020      	b.n	8008312 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80082d0:	4b0a      	ldr	r3, [pc, #40]	@ (80082fc <HAL_RCC_OscConfig+0x27c>)
 80082d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80082d6:	4a09      	ldr	r2, [pc, #36]	@ (80082fc <HAL_RCC_OscConfig+0x27c>)
 80082d8:	f023 0301 	bic.w	r3, r3, #1
 80082dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082e0:	f7fb f934 	bl	800354c <HAL_GetTick>
 80082e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80082e6:	e00d      	b.n	8008304 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082e8:	f7fb f930 	bl	800354c <HAL_GetTick>
 80082ec:	4602      	mov	r2, r0
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	d906      	bls.n	8008304 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80082f6:	2303      	movs	r3, #3
 80082f8:	e1ca      	b.n	8008690 <HAL_RCC_OscConfig+0x610>
 80082fa:	bf00      	nop
 80082fc:	40021000 	.word	0x40021000
 8008300:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008304:	4b8c      	ldr	r3, [pc, #560]	@ (8008538 <HAL_RCC_OscConfig+0x4b8>)
 8008306:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800830a:	f003 0302 	and.w	r3, r3, #2
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1ea      	bne.n	80082e8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 0304 	and.w	r3, r3, #4
 800831a:	2b00      	cmp	r3, #0
 800831c:	f000 80a6 	beq.w	800846c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008320:	2300      	movs	r3, #0
 8008322:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008324:	4b84      	ldr	r3, [pc, #528]	@ (8008538 <HAL_RCC_OscConfig+0x4b8>)
 8008326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800832c:	2b00      	cmp	r3, #0
 800832e:	d101      	bne.n	8008334 <HAL_RCC_OscConfig+0x2b4>
 8008330:	2301      	movs	r3, #1
 8008332:	e000      	b.n	8008336 <HAL_RCC_OscConfig+0x2b6>
 8008334:	2300      	movs	r3, #0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00d      	beq.n	8008356 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800833a:	4b7f      	ldr	r3, [pc, #508]	@ (8008538 <HAL_RCC_OscConfig+0x4b8>)
 800833c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800833e:	4a7e      	ldr	r2, [pc, #504]	@ (8008538 <HAL_RCC_OscConfig+0x4b8>)
 8008340:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008344:	6593      	str	r3, [r2, #88]	@ 0x58
 8008346:	4b7c      	ldr	r3, [pc, #496]	@ (8008538 <HAL_RCC_OscConfig+0x4b8>)
 8008348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800834a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800834e:	60fb      	str	r3, [r7, #12]
 8008350:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008352:	2301      	movs	r3, #1
 8008354:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008356:	4b79      	ldr	r3, [pc, #484]	@ (800853c <HAL_RCC_OscConfig+0x4bc>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800835e:	2b00      	cmp	r3, #0
 8008360:	d118      	bne.n	8008394 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008362:	4b76      	ldr	r3, [pc, #472]	@ (800853c <HAL_RCC_OscConfig+0x4bc>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a75      	ldr	r2, [pc, #468]	@ (800853c <HAL_RCC_OscConfig+0x4bc>)
 8008368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800836c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800836e:	f7fb f8ed 	bl	800354c <HAL_GetTick>
 8008372:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008374:	e008      	b.n	8008388 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008376:	f7fb f8e9 	bl	800354c <HAL_GetTick>
 800837a:	4602      	mov	r2, r0
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	1ad3      	subs	r3, r2, r3
 8008380:	2b02      	cmp	r3, #2
 8008382:	d901      	bls.n	8008388 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008384:	2303      	movs	r3, #3
 8008386:	e183      	b.n	8008690 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008388:	4b6c      	ldr	r3, [pc, #432]	@ (800853c <HAL_RCC_OscConfig+0x4bc>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008390:	2b00      	cmp	r3, #0
 8008392:	d0f0      	beq.n	8008376 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	2b01      	cmp	r3, #1
 800839a:	d108      	bne.n	80083ae <HAL_RCC_OscConfig+0x32e>
 800839c:	4b66      	ldr	r3, [pc, #408]	@ (8008538 <HAL_RCC_OscConfig+0x4b8>)
 800839e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083a2:	4a65      	ldr	r2, [pc, #404]	@ (8008538 <HAL_RCC_OscConfig+0x4b8>)
 80083a4:	f043 0301 	orr.w	r3, r3, #1
 80083a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80083ac:	e024      	b.n	80083f8 <HAL_RCC_OscConfig+0x378>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	2b05      	cmp	r3, #5
 80083b4:	d110      	bne.n	80083d8 <HAL_RCC_OscConfig+0x358>
 80083b6:	4b60      	ldr	r3, [pc, #384]	@ (8008538 <HAL_RCC_OscConfig+0x4b8>)
 80083b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083bc:	4a5e      	ldr	r2, [pc, #376]	@ (8008538 <HAL_RCC_OscConfig+0x4b8>)
 80083be:	f043 0304 	orr.w	r3, r3, #4
 80083c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80083c6:	4b5c      	ldr	r3, [pc, #368]	@ (8008538 <HAL_RCC_OscConfig+0x4b8>)
 80083c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083cc:	4a5a      	ldr	r2, [pc, #360]	@ (8008538 <HAL_RCC_OscConfig+0x4b8>)
 80083ce:	f043 0301 	orr.w	r3, r3, #1
 80083d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80083d6:	e00f      	b.n	80083f8 <HAL_RCC_OscConfig+0x378>
 80083d8:	4b57      	ldr	r3, [pc, #348]	@ (8008538 <HAL_RCC_OscConfig+0x4b8>)
 80083da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083de:	4a56      	ldr	r2, [pc, #344]	@ (8008538 <HAL_RCC_OscConfig+0x4b8>)
 80083e0:	f023 0301 	bic.w	r3, r3, #1
 80083e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80083e8:	4b53      	ldr	r3, [pc, #332]	@ (8008538 <HAL_RCC_OscConfig+0x4b8>)
 80083ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083ee:	4a52      	ldr	r2, [pc, #328]	@ (8008538 <HAL_RCC_OscConfig+0x4b8>)
 80083f0:	f023 0304 	bic.w	r3, r3, #4
 80083f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d016      	beq.n	800842e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008400:	f7fb f8a4 	bl	800354c <HAL_GetTick>
 8008404:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008406:	e00a      	b.n	800841e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008408:	f7fb f8a0 	bl	800354c <HAL_GetTick>
 800840c:	4602      	mov	r2, r0
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	1ad3      	subs	r3, r2, r3
 8008412:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008416:	4293      	cmp	r3, r2
 8008418:	d901      	bls.n	800841e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800841a:	2303      	movs	r3, #3
 800841c:	e138      	b.n	8008690 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800841e:	4b46      	ldr	r3, [pc, #280]	@ (8008538 <HAL_RCC_OscConfig+0x4b8>)
 8008420:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008424:	f003 0302 	and.w	r3, r3, #2
 8008428:	2b00      	cmp	r3, #0
 800842a:	d0ed      	beq.n	8008408 <HAL_RCC_OscConfig+0x388>
 800842c:	e015      	b.n	800845a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800842e:	f7fb f88d 	bl	800354c <HAL_GetTick>
 8008432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008434:	e00a      	b.n	800844c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008436:	f7fb f889 	bl	800354c <HAL_GetTick>
 800843a:	4602      	mov	r2, r0
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008444:	4293      	cmp	r3, r2
 8008446:	d901      	bls.n	800844c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008448:	2303      	movs	r3, #3
 800844a:	e121      	b.n	8008690 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800844c:	4b3a      	ldr	r3, [pc, #232]	@ (8008538 <HAL_RCC_OscConfig+0x4b8>)
 800844e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008452:	f003 0302 	and.w	r3, r3, #2
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1ed      	bne.n	8008436 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800845a:	7ffb      	ldrb	r3, [r7, #31]
 800845c:	2b01      	cmp	r3, #1
 800845e:	d105      	bne.n	800846c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008460:	4b35      	ldr	r3, [pc, #212]	@ (8008538 <HAL_RCC_OscConfig+0x4b8>)
 8008462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008464:	4a34      	ldr	r2, [pc, #208]	@ (8008538 <HAL_RCC_OscConfig+0x4b8>)
 8008466:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800846a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 0320 	and.w	r3, r3, #32
 8008474:	2b00      	cmp	r3, #0
 8008476:	d03c      	beq.n	80084f2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	699b      	ldr	r3, [r3, #24]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d01c      	beq.n	80084ba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008480:	4b2d      	ldr	r3, [pc, #180]	@ (8008538 <HAL_RCC_OscConfig+0x4b8>)
 8008482:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008486:	4a2c      	ldr	r2, [pc, #176]	@ (8008538 <HAL_RCC_OscConfig+0x4b8>)
 8008488:	f043 0301 	orr.w	r3, r3, #1
 800848c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008490:	f7fb f85c 	bl	800354c <HAL_GetTick>
 8008494:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008496:	e008      	b.n	80084aa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008498:	f7fb f858 	bl	800354c <HAL_GetTick>
 800849c:	4602      	mov	r2, r0
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	1ad3      	subs	r3, r2, r3
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	d901      	bls.n	80084aa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80084a6:	2303      	movs	r3, #3
 80084a8:	e0f2      	b.n	8008690 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80084aa:	4b23      	ldr	r3, [pc, #140]	@ (8008538 <HAL_RCC_OscConfig+0x4b8>)
 80084ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80084b0:	f003 0302 	and.w	r3, r3, #2
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d0ef      	beq.n	8008498 <HAL_RCC_OscConfig+0x418>
 80084b8:	e01b      	b.n	80084f2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80084ba:	4b1f      	ldr	r3, [pc, #124]	@ (8008538 <HAL_RCC_OscConfig+0x4b8>)
 80084bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80084c0:	4a1d      	ldr	r2, [pc, #116]	@ (8008538 <HAL_RCC_OscConfig+0x4b8>)
 80084c2:	f023 0301 	bic.w	r3, r3, #1
 80084c6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084ca:	f7fb f83f 	bl	800354c <HAL_GetTick>
 80084ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80084d0:	e008      	b.n	80084e4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80084d2:	f7fb f83b 	bl	800354c <HAL_GetTick>
 80084d6:	4602      	mov	r2, r0
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d901      	bls.n	80084e4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80084e0:	2303      	movs	r3, #3
 80084e2:	e0d5      	b.n	8008690 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80084e4:	4b14      	ldr	r3, [pc, #80]	@ (8008538 <HAL_RCC_OscConfig+0x4b8>)
 80084e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80084ea:	f003 0302 	and.w	r3, r3, #2
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1ef      	bne.n	80084d2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	69db      	ldr	r3, [r3, #28]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	f000 80c9 	beq.w	800868e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80084fc:	4b0e      	ldr	r3, [pc, #56]	@ (8008538 <HAL_RCC_OscConfig+0x4b8>)
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	f003 030c 	and.w	r3, r3, #12
 8008504:	2b0c      	cmp	r3, #12
 8008506:	f000 8083 	beq.w	8008610 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	69db      	ldr	r3, [r3, #28]
 800850e:	2b02      	cmp	r3, #2
 8008510:	d15e      	bne.n	80085d0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008512:	4b09      	ldr	r3, [pc, #36]	@ (8008538 <HAL_RCC_OscConfig+0x4b8>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a08      	ldr	r2, [pc, #32]	@ (8008538 <HAL_RCC_OscConfig+0x4b8>)
 8008518:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800851c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800851e:	f7fb f815 	bl	800354c <HAL_GetTick>
 8008522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008524:	e00c      	b.n	8008540 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008526:	f7fb f811 	bl	800354c <HAL_GetTick>
 800852a:	4602      	mov	r2, r0
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	1ad3      	subs	r3, r2, r3
 8008530:	2b02      	cmp	r3, #2
 8008532:	d905      	bls.n	8008540 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008534:	2303      	movs	r3, #3
 8008536:	e0ab      	b.n	8008690 <HAL_RCC_OscConfig+0x610>
 8008538:	40021000 	.word	0x40021000
 800853c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008540:	4b55      	ldr	r3, [pc, #340]	@ (8008698 <HAL_RCC_OscConfig+0x618>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1ec      	bne.n	8008526 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800854c:	4b52      	ldr	r3, [pc, #328]	@ (8008698 <HAL_RCC_OscConfig+0x618>)
 800854e:	68da      	ldr	r2, [r3, #12]
 8008550:	4b52      	ldr	r3, [pc, #328]	@ (800869c <HAL_RCC_OscConfig+0x61c>)
 8008552:	4013      	ands	r3, r2
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	6a11      	ldr	r1, [r2, #32]
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800855c:	3a01      	subs	r2, #1
 800855e:	0112      	lsls	r2, r2, #4
 8008560:	4311      	orrs	r1, r2
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008566:	0212      	lsls	r2, r2, #8
 8008568:	4311      	orrs	r1, r2
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800856e:	0852      	lsrs	r2, r2, #1
 8008570:	3a01      	subs	r2, #1
 8008572:	0552      	lsls	r2, r2, #21
 8008574:	4311      	orrs	r1, r2
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800857a:	0852      	lsrs	r2, r2, #1
 800857c:	3a01      	subs	r2, #1
 800857e:	0652      	lsls	r2, r2, #25
 8008580:	4311      	orrs	r1, r2
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008586:	06d2      	lsls	r2, r2, #27
 8008588:	430a      	orrs	r2, r1
 800858a:	4943      	ldr	r1, [pc, #268]	@ (8008698 <HAL_RCC_OscConfig+0x618>)
 800858c:	4313      	orrs	r3, r2
 800858e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008590:	4b41      	ldr	r3, [pc, #260]	@ (8008698 <HAL_RCC_OscConfig+0x618>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a40      	ldr	r2, [pc, #256]	@ (8008698 <HAL_RCC_OscConfig+0x618>)
 8008596:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800859a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800859c:	4b3e      	ldr	r3, [pc, #248]	@ (8008698 <HAL_RCC_OscConfig+0x618>)
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	4a3d      	ldr	r2, [pc, #244]	@ (8008698 <HAL_RCC_OscConfig+0x618>)
 80085a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80085a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085a8:	f7fa ffd0 	bl	800354c <HAL_GetTick>
 80085ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80085ae:	e008      	b.n	80085c2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085b0:	f7fa ffcc 	bl	800354c <HAL_GetTick>
 80085b4:	4602      	mov	r2, r0
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d901      	bls.n	80085c2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80085be:	2303      	movs	r3, #3
 80085c0:	e066      	b.n	8008690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80085c2:	4b35      	ldr	r3, [pc, #212]	@ (8008698 <HAL_RCC_OscConfig+0x618>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d0f0      	beq.n	80085b0 <HAL_RCC_OscConfig+0x530>
 80085ce:	e05e      	b.n	800868e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085d0:	4b31      	ldr	r3, [pc, #196]	@ (8008698 <HAL_RCC_OscConfig+0x618>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a30      	ldr	r2, [pc, #192]	@ (8008698 <HAL_RCC_OscConfig+0x618>)
 80085d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80085da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085dc:	f7fa ffb6 	bl	800354c <HAL_GetTick>
 80085e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80085e2:	e008      	b.n	80085f6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085e4:	f7fa ffb2 	bl	800354c <HAL_GetTick>
 80085e8:	4602      	mov	r2, r0
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	1ad3      	subs	r3, r2, r3
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	d901      	bls.n	80085f6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80085f2:	2303      	movs	r3, #3
 80085f4:	e04c      	b.n	8008690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80085f6:	4b28      	ldr	r3, [pc, #160]	@ (8008698 <HAL_RCC_OscConfig+0x618>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d1f0      	bne.n	80085e4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008602:	4b25      	ldr	r3, [pc, #148]	@ (8008698 <HAL_RCC_OscConfig+0x618>)
 8008604:	68da      	ldr	r2, [r3, #12]
 8008606:	4924      	ldr	r1, [pc, #144]	@ (8008698 <HAL_RCC_OscConfig+0x618>)
 8008608:	4b25      	ldr	r3, [pc, #148]	@ (80086a0 <HAL_RCC_OscConfig+0x620>)
 800860a:	4013      	ands	r3, r2
 800860c:	60cb      	str	r3, [r1, #12]
 800860e:	e03e      	b.n	800868e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	69db      	ldr	r3, [r3, #28]
 8008614:	2b01      	cmp	r3, #1
 8008616:	d101      	bne.n	800861c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	e039      	b.n	8008690 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800861c:	4b1e      	ldr	r3, [pc, #120]	@ (8008698 <HAL_RCC_OscConfig+0x618>)
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	f003 0203 	and.w	r2, r3, #3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6a1b      	ldr	r3, [r3, #32]
 800862c:	429a      	cmp	r2, r3
 800862e:	d12c      	bne.n	800868a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800863a:	3b01      	subs	r3, #1
 800863c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800863e:	429a      	cmp	r2, r3
 8008640:	d123      	bne.n	800868a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800864c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800864e:	429a      	cmp	r2, r3
 8008650:	d11b      	bne.n	800868a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800865c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800865e:	429a      	cmp	r2, r3
 8008660:	d113      	bne.n	800868a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800866c:	085b      	lsrs	r3, r3, #1
 800866e:	3b01      	subs	r3, #1
 8008670:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008672:	429a      	cmp	r2, r3
 8008674:	d109      	bne.n	800868a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008680:	085b      	lsrs	r3, r3, #1
 8008682:	3b01      	subs	r3, #1
 8008684:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008686:	429a      	cmp	r2, r3
 8008688:	d001      	beq.n	800868e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	e000      	b.n	8008690 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	3720      	adds	r7, #32
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	40021000 	.word	0x40021000
 800869c:	019f800c 	.word	0x019f800c
 80086a0:	feeefffc 	.word	0xfeeefffc

080086a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b086      	sub	sp, #24
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80086ae:	2300      	movs	r3, #0
 80086b0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d101      	bne.n	80086bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	e11e      	b.n	80088fa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80086bc:	4b91      	ldr	r3, [pc, #580]	@ (8008904 <HAL_RCC_ClockConfig+0x260>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f003 030f 	and.w	r3, r3, #15
 80086c4:	683a      	ldr	r2, [r7, #0]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d910      	bls.n	80086ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086ca:	4b8e      	ldr	r3, [pc, #568]	@ (8008904 <HAL_RCC_ClockConfig+0x260>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f023 020f 	bic.w	r2, r3, #15
 80086d2:	498c      	ldr	r1, [pc, #560]	@ (8008904 <HAL_RCC_ClockConfig+0x260>)
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80086da:	4b8a      	ldr	r3, [pc, #552]	@ (8008904 <HAL_RCC_ClockConfig+0x260>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f003 030f 	and.w	r3, r3, #15
 80086e2:	683a      	ldr	r2, [r7, #0]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d001      	beq.n	80086ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80086e8:	2301      	movs	r3, #1
 80086ea:	e106      	b.n	80088fa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f003 0301 	and.w	r3, r3, #1
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d073      	beq.n	80087e0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	2b03      	cmp	r3, #3
 80086fe:	d129      	bne.n	8008754 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008700:	4b81      	ldr	r3, [pc, #516]	@ (8008908 <HAL_RCC_ClockConfig+0x264>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008708:	2b00      	cmp	r3, #0
 800870a:	d101      	bne.n	8008710 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	e0f4      	b.n	80088fa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008710:	f000 f9ca 	bl	8008aa8 <RCC_GetSysClockFreqFromPLLSource>
 8008714:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	4a7c      	ldr	r2, [pc, #496]	@ (800890c <HAL_RCC_ClockConfig+0x268>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d93f      	bls.n	800879e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800871e:	4b7a      	ldr	r3, [pc, #488]	@ (8008908 <HAL_RCC_ClockConfig+0x264>)
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d009      	beq.n	800873e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008732:	2b00      	cmp	r3, #0
 8008734:	d033      	beq.n	800879e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800873a:	2b00      	cmp	r3, #0
 800873c:	d12f      	bne.n	800879e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800873e:	4b72      	ldr	r3, [pc, #456]	@ (8008908 <HAL_RCC_ClockConfig+0x264>)
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008746:	4a70      	ldr	r2, [pc, #448]	@ (8008908 <HAL_RCC_ClockConfig+0x264>)
 8008748:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800874c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800874e:	2380      	movs	r3, #128	@ 0x80
 8008750:	617b      	str	r3, [r7, #20]
 8008752:	e024      	b.n	800879e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	2b02      	cmp	r3, #2
 800875a:	d107      	bne.n	800876c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800875c:	4b6a      	ldr	r3, [pc, #424]	@ (8008908 <HAL_RCC_ClockConfig+0x264>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008764:	2b00      	cmp	r3, #0
 8008766:	d109      	bne.n	800877c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008768:	2301      	movs	r3, #1
 800876a:	e0c6      	b.n	80088fa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800876c:	4b66      	ldr	r3, [pc, #408]	@ (8008908 <HAL_RCC_ClockConfig+0x264>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008774:	2b00      	cmp	r3, #0
 8008776:	d101      	bne.n	800877c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	e0be      	b.n	80088fa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800877c:	f000 f8ce 	bl	800891c <HAL_RCC_GetSysClockFreq>
 8008780:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	4a61      	ldr	r2, [pc, #388]	@ (800890c <HAL_RCC_ClockConfig+0x268>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d909      	bls.n	800879e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800878a:	4b5f      	ldr	r3, [pc, #380]	@ (8008908 <HAL_RCC_ClockConfig+0x264>)
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008792:	4a5d      	ldr	r2, [pc, #372]	@ (8008908 <HAL_RCC_ClockConfig+0x264>)
 8008794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008798:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800879a:	2380      	movs	r3, #128	@ 0x80
 800879c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800879e:	4b5a      	ldr	r3, [pc, #360]	@ (8008908 <HAL_RCC_ClockConfig+0x264>)
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	f023 0203 	bic.w	r2, r3, #3
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	4957      	ldr	r1, [pc, #348]	@ (8008908 <HAL_RCC_ClockConfig+0x264>)
 80087ac:	4313      	orrs	r3, r2
 80087ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087b0:	f7fa fecc 	bl	800354c <HAL_GetTick>
 80087b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087b6:	e00a      	b.n	80087ce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087b8:	f7fa fec8 	bl	800354c <HAL_GetTick>
 80087bc:	4602      	mov	r2, r0
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d901      	bls.n	80087ce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80087ca:	2303      	movs	r3, #3
 80087cc:	e095      	b.n	80088fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087ce:	4b4e      	ldr	r3, [pc, #312]	@ (8008908 <HAL_RCC_ClockConfig+0x264>)
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	f003 020c 	and.w	r2, r3, #12
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	429a      	cmp	r2, r3
 80087de:	d1eb      	bne.n	80087b8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 0302 	and.w	r3, r3, #2
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d023      	beq.n	8008834 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f003 0304 	and.w	r3, r3, #4
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d005      	beq.n	8008804 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80087f8:	4b43      	ldr	r3, [pc, #268]	@ (8008908 <HAL_RCC_ClockConfig+0x264>)
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	4a42      	ldr	r2, [pc, #264]	@ (8008908 <HAL_RCC_ClockConfig+0x264>)
 80087fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008802:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 0308 	and.w	r3, r3, #8
 800880c:	2b00      	cmp	r3, #0
 800880e:	d007      	beq.n	8008820 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008810:	4b3d      	ldr	r3, [pc, #244]	@ (8008908 <HAL_RCC_ClockConfig+0x264>)
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008818:	4a3b      	ldr	r2, [pc, #236]	@ (8008908 <HAL_RCC_ClockConfig+0x264>)
 800881a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800881e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008820:	4b39      	ldr	r3, [pc, #228]	@ (8008908 <HAL_RCC_ClockConfig+0x264>)
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	4936      	ldr	r1, [pc, #216]	@ (8008908 <HAL_RCC_ClockConfig+0x264>)
 800882e:	4313      	orrs	r3, r2
 8008830:	608b      	str	r3, [r1, #8]
 8008832:	e008      	b.n	8008846 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	2b80      	cmp	r3, #128	@ 0x80
 8008838:	d105      	bne.n	8008846 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800883a:	4b33      	ldr	r3, [pc, #204]	@ (8008908 <HAL_RCC_ClockConfig+0x264>)
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	4a32      	ldr	r2, [pc, #200]	@ (8008908 <HAL_RCC_ClockConfig+0x264>)
 8008840:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008844:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008846:	4b2f      	ldr	r3, [pc, #188]	@ (8008904 <HAL_RCC_ClockConfig+0x260>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f003 030f 	and.w	r3, r3, #15
 800884e:	683a      	ldr	r2, [r7, #0]
 8008850:	429a      	cmp	r2, r3
 8008852:	d21d      	bcs.n	8008890 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008854:	4b2b      	ldr	r3, [pc, #172]	@ (8008904 <HAL_RCC_ClockConfig+0x260>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f023 020f 	bic.w	r2, r3, #15
 800885c:	4929      	ldr	r1, [pc, #164]	@ (8008904 <HAL_RCC_ClockConfig+0x260>)
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	4313      	orrs	r3, r2
 8008862:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008864:	f7fa fe72 	bl	800354c <HAL_GetTick>
 8008868:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800886a:	e00a      	b.n	8008882 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800886c:	f7fa fe6e 	bl	800354c <HAL_GetTick>
 8008870:	4602      	mov	r2, r0
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	1ad3      	subs	r3, r2, r3
 8008876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800887a:	4293      	cmp	r3, r2
 800887c:	d901      	bls.n	8008882 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800887e:	2303      	movs	r3, #3
 8008880:	e03b      	b.n	80088fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008882:	4b20      	ldr	r3, [pc, #128]	@ (8008904 <HAL_RCC_ClockConfig+0x260>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f003 030f 	and.w	r3, r3, #15
 800888a:	683a      	ldr	r2, [r7, #0]
 800888c:	429a      	cmp	r2, r3
 800888e:	d1ed      	bne.n	800886c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f003 0304 	and.w	r3, r3, #4
 8008898:	2b00      	cmp	r3, #0
 800889a:	d008      	beq.n	80088ae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800889c:	4b1a      	ldr	r3, [pc, #104]	@ (8008908 <HAL_RCC_ClockConfig+0x264>)
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	4917      	ldr	r1, [pc, #92]	@ (8008908 <HAL_RCC_ClockConfig+0x264>)
 80088aa:	4313      	orrs	r3, r2
 80088ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 0308 	and.w	r3, r3, #8
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d009      	beq.n	80088ce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80088ba:	4b13      	ldr	r3, [pc, #76]	@ (8008908 <HAL_RCC_ClockConfig+0x264>)
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	00db      	lsls	r3, r3, #3
 80088c8:	490f      	ldr	r1, [pc, #60]	@ (8008908 <HAL_RCC_ClockConfig+0x264>)
 80088ca:	4313      	orrs	r3, r2
 80088cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80088ce:	f000 f825 	bl	800891c <HAL_RCC_GetSysClockFreq>
 80088d2:	4602      	mov	r2, r0
 80088d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008908 <HAL_RCC_ClockConfig+0x264>)
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	091b      	lsrs	r3, r3, #4
 80088da:	f003 030f 	and.w	r3, r3, #15
 80088de:	490c      	ldr	r1, [pc, #48]	@ (8008910 <HAL_RCC_ClockConfig+0x26c>)
 80088e0:	5ccb      	ldrb	r3, [r1, r3]
 80088e2:	f003 031f 	and.w	r3, r3, #31
 80088e6:	fa22 f303 	lsr.w	r3, r2, r3
 80088ea:	4a0a      	ldr	r2, [pc, #40]	@ (8008914 <HAL_RCC_ClockConfig+0x270>)
 80088ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80088ee:	4b0a      	ldr	r3, [pc, #40]	@ (8008918 <HAL_RCC_ClockConfig+0x274>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7fa fdde 	bl	80034b4 <HAL_InitTick>
 80088f8:	4603      	mov	r3, r0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3718      	adds	r7, #24
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	40022000 	.word	0x40022000
 8008908:	40021000 	.word	0x40021000
 800890c:	04c4b400 	.word	0x04c4b400
 8008910:	080149d8 	.word	0x080149d8
 8008914:	20000008 	.word	0x20000008
 8008918:	2000000c 	.word	0x2000000c

0800891c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800891c:	b480      	push	{r7}
 800891e:	b087      	sub	sp, #28
 8008920:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008922:	4b2c      	ldr	r3, [pc, #176]	@ (80089d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	f003 030c 	and.w	r3, r3, #12
 800892a:	2b04      	cmp	r3, #4
 800892c:	d102      	bne.n	8008934 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800892e:	4b2a      	ldr	r3, [pc, #168]	@ (80089d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008930:	613b      	str	r3, [r7, #16]
 8008932:	e047      	b.n	80089c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008934:	4b27      	ldr	r3, [pc, #156]	@ (80089d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	f003 030c 	and.w	r3, r3, #12
 800893c:	2b08      	cmp	r3, #8
 800893e:	d102      	bne.n	8008946 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008940:	4b26      	ldr	r3, [pc, #152]	@ (80089dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8008942:	613b      	str	r3, [r7, #16]
 8008944:	e03e      	b.n	80089c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008946:	4b23      	ldr	r3, [pc, #140]	@ (80089d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	f003 030c 	and.w	r3, r3, #12
 800894e:	2b0c      	cmp	r3, #12
 8008950:	d136      	bne.n	80089c0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008952:	4b20      	ldr	r3, [pc, #128]	@ (80089d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	f003 0303 	and.w	r3, r3, #3
 800895a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800895c:	4b1d      	ldr	r3, [pc, #116]	@ (80089d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	091b      	lsrs	r3, r3, #4
 8008962:	f003 030f 	and.w	r3, r3, #15
 8008966:	3301      	adds	r3, #1
 8008968:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2b03      	cmp	r3, #3
 800896e:	d10c      	bne.n	800898a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008970:	4a1a      	ldr	r2, [pc, #104]	@ (80089dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	fbb2 f3f3 	udiv	r3, r2, r3
 8008978:	4a16      	ldr	r2, [pc, #88]	@ (80089d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800897a:	68d2      	ldr	r2, [r2, #12]
 800897c:	0a12      	lsrs	r2, r2, #8
 800897e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008982:	fb02 f303 	mul.w	r3, r2, r3
 8008986:	617b      	str	r3, [r7, #20]
      break;
 8008988:	e00c      	b.n	80089a4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800898a:	4a13      	ldr	r2, [pc, #76]	@ (80089d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008992:	4a10      	ldr	r2, [pc, #64]	@ (80089d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008994:	68d2      	ldr	r2, [r2, #12]
 8008996:	0a12      	lsrs	r2, r2, #8
 8008998:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800899c:	fb02 f303 	mul.w	r3, r2, r3
 80089a0:	617b      	str	r3, [r7, #20]
      break;
 80089a2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80089a4:	4b0b      	ldr	r3, [pc, #44]	@ (80089d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	0e5b      	lsrs	r3, r3, #25
 80089aa:	f003 0303 	and.w	r3, r3, #3
 80089ae:	3301      	adds	r3, #1
 80089b0:	005b      	lsls	r3, r3, #1
 80089b2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80089b4:	697a      	ldr	r2, [r7, #20]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80089bc:	613b      	str	r3, [r7, #16]
 80089be:	e001      	b.n	80089c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80089c0:	2300      	movs	r3, #0
 80089c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80089c4:	693b      	ldr	r3, [r7, #16]
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	371c      	adds	r7, #28
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	40021000 	.word	0x40021000
 80089d8:	00f42400 	.word	0x00f42400
 80089dc:	007a1200 	.word	0x007a1200

080089e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80089e0:	b480      	push	{r7}
 80089e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80089e4:	4b03      	ldr	r3, [pc, #12]	@ (80089f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80089e6:	681b      	ldr	r3, [r3, #0]
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	20000008 	.word	0x20000008

080089f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80089fc:	f7ff fff0 	bl	80089e0 <HAL_RCC_GetHCLKFreq>
 8008a00:	4602      	mov	r2, r0
 8008a02:	4b06      	ldr	r3, [pc, #24]	@ (8008a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	0a1b      	lsrs	r3, r3, #8
 8008a08:	f003 0307 	and.w	r3, r3, #7
 8008a0c:	4904      	ldr	r1, [pc, #16]	@ (8008a20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008a0e:	5ccb      	ldrb	r3, [r1, r3]
 8008a10:	f003 031f 	and.w	r3, r3, #31
 8008a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	40021000 	.word	0x40021000
 8008a20:	080149e8 	.word	0x080149e8

08008a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008a28:	f7ff ffda 	bl	80089e0 <HAL_RCC_GetHCLKFreq>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	4b06      	ldr	r3, [pc, #24]	@ (8008a48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	0adb      	lsrs	r3, r3, #11
 8008a34:	f003 0307 	and.w	r3, r3, #7
 8008a38:	4904      	ldr	r1, [pc, #16]	@ (8008a4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8008a3a:	5ccb      	ldrb	r3, [r1, r3]
 8008a3c:	f003 031f 	and.w	r3, r3, #31
 8008a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	40021000 	.word	0x40021000
 8008a4c:	080149e8 	.word	0x080149e8

08008a50 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8008a50:	b480      	push	{r7}
 8008a52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8008a54:	4b05      	ldr	r3, [pc, #20]	@ (8008a6c <HAL_RCC_EnableCSS+0x1c>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a04      	ldr	r2, [pc, #16]	@ (8008a6c <HAL_RCC_EnableCSS+0x1c>)
 8008a5a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008a5e:	6013      	str	r3, [r2, #0]
}
 8008a60:	bf00      	nop
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	40021000 	.word	0x40021000

08008a70 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008a74:	4b07      	ldr	r3, [pc, #28]	@ (8008a94 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008a76:	69db      	ldr	r3, [r3, #28]
 8008a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a80:	d105      	bne.n	8008a8e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8008a82:	f000 f809 	bl	8008a98 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8008a86:	4b03      	ldr	r3, [pc, #12]	@ (8008a94 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008a88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008a8c:	621a      	str	r2, [r3, #32]
  }
}
 8008a8e:	bf00      	nop
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	40021000 	.word	0x40021000

08008a98 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8008a9c:	bf00      	nop
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr
	...

08008aa8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b087      	sub	sp, #28
 8008aac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008aae:	4b1e      	ldr	r3, [pc, #120]	@ (8008b28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	f003 0303 	and.w	r3, r3, #3
 8008ab6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8008b28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	091b      	lsrs	r3, r3, #4
 8008abe:	f003 030f 	and.w	r3, r3, #15
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	2b03      	cmp	r3, #3
 8008aca:	d10c      	bne.n	8008ae6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008acc:	4a17      	ldr	r2, [pc, #92]	@ (8008b2c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ad4:	4a14      	ldr	r2, [pc, #80]	@ (8008b28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008ad6:	68d2      	ldr	r2, [r2, #12]
 8008ad8:	0a12      	lsrs	r2, r2, #8
 8008ada:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008ade:	fb02 f303 	mul.w	r3, r2, r3
 8008ae2:	617b      	str	r3, [r7, #20]
    break;
 8008ae4:	e00c      	b.n	8008b00 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008ae6:	4a12      	ldr	r2, [pc, #72]	@ (8008b30 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aee:	4a0e      	ldr	r2, [pc, #56]	@ (8008b28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008af0:	68d2      	ldr	r2, [r2, #12]
 8008af2:	0a12      	lsrs	r2, r2, #8
 8008af4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008af8:	fb02 f303 	mul.w	r3, r2, r3
 8008afc:	617b      	str	r3, [r7, #20]
    break;
 8008afe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008b00:	4b09      	ldr	r3, [pc, #36]	@ (8008b28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	0e5b      	lsrs	r3, r3, #25
 8008b06:	f003 0303 	and.w	r3, r3, #3
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	005b      	lsls	r3, r3, #1
 8008b0e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008b10:	697a      	ldr	r2, [r7, #20]
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b18:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008b1a:	687b      	ldr	r3, [r7, #4]
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	371c      	adds	r7, #28
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr
 8008b28:	40021000 	.word	0x40021000
 8008b2c:	007a1200 	.word	0x007a1200
 8008b30:	00f42400 	.word	0x00f42400

08008b34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b086      	sub	sp, #24
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008b40:	2300      	movs	r3, #0
 8008b42:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f000 8098 	beq.w	8008c82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008b52:	2300      	movs	r3, #0
 8008b54:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b56:	4b43      	ldr	r3, [pc, #268]	@ (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d10d      	bne.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b62:	4b40      	ldr	r3, [pc, #256]	@ (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b66:	4a3f      	ldr	r2, [pc, #252]	@ (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b6e:	4b3d      	ldr	r3, [pc, #244]	@ (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b76:	60bb      	str	r3, [r7, #8]
 8008b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008b7e:	4b3a      	ldr	r3, [pc, #232]	@ (8008c68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a39      	ldr	r2, [pc, #228]	@ (8008c68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008b84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b8a:	f7fa fcdf 	bl	800354c <HAL_GetTick>
 8008b8e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b90:	e009      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b92:	f7fa fcdb 	bl	800354c <HAL_GetTick>
 8008b96:	4602      	mov	r2, r0
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	1ad3      	subs	r3, r2, r3
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d902      	bls.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	74fb      	strb	r3, [r7, #19]
        break;
 8008ba4:	e005      	b.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ba6:	4b30      	ldr	r3, [pc, #192]	@ (8008c68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d0ef      	beq.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008bb2:	7cfb      	ldrb	r3, [r7, #19]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d159      	bne.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008bb8:	4b2a      	ldr	r3, [pc, #168]	@ (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008bc2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d01e      	beq.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bce:	697a      	ldr	r2, [r7, #20]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d019      	beq.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008bd4:	4b23      	ldr	r3, [pc, #140]	@ (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008bde:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008be0:	4b20      	ldr	r3, [pc, #128]	@ (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008be6:	4a1f      	ldr	r2, [pc, #124]	@ (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008be8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008bec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bf6:	4a1b      	ldr	r2, [pc, #108]	@ (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008bf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008bfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008c00:	4a18      	ldr	r2, [pc, #96]	@ (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	f003 0301 	and.w	r3, r3, #1
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d016      	beq.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c12:	f7fa fc9b 	bl	800354c <HAL_GetTick>
 8008c16:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c18:	e00b      	b.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c1a:	f7fa fc97 	bl	800354c <HAL_GetTick>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	1ad3      	subs	r3, r2, r3
 8008c24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d902      	bls.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008c2c:	2303      	movs	r3, #3
 8008c2e:	74fb      	strb	r3, [r7, #19]
            break;
 8008c30:	e006      	b.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c32:	4b0c      	ldr	r3, [pc, #48]	@ (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c38:	f003 0302 	and.w	r3, r3, #2
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d0ec      	beq.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008c40:	7cfb      	ldrb	r3, [r7, #19]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d10b      	bne.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008c46:	4b07      	ldr	r3, [pc, #28]	@ (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c54:	4903      	ldr	r1, [pc, #12]	@ (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c56:	4313      	orrs	r3, r2
 8008c58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008c5c:	e008      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008c5e:	7cfb      	ldrb	r3, [r7, #19]
 8008c60:	74bb      	strb	r3, [r7, #18]
 8008c62:	e005      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008c64:	40021000 	.word	0x40021000
 8008c68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c6c:	7cfb      	ldrb	r3, [r7, #19]
 8008c6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008c70:	7c7b      	ldrb	r3, [r7, #17]
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d105      	bne.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c76:	4ba7      	ldr	r3, [pc, #668]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c7a:	4aa6      	ldr	r2, [pc, #664]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c80:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f003 0301 	and.w	r3, r3, #1
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00a      	beq.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008c8e:	4ba1      	ldr	r3, [pc, #644]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c94:	f023 0203 	bic.w	r2, r3, #3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	499d      	ldr	r1, [pc, #628]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f003 0302 	and.w	r3, r3, #2
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00a      	beq.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008cb0:	4b98      	ldr	r3, [pc, #608]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cb6:	f023 020c 	bic.w	r2, r3, #12
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	4995      	ldr	r1, [pc, #596]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 0304 	and.w	r3, r3, #4
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00a      	beq.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008cd2:	4b90      	ldr	r3, [pc, #576]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cd8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	498c      	ldr	r1, [pc, #560]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f003 0308 	and.w	r3, r3, #8
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d00a      	beq.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008cf4:	4b87      	ldr	r3, [pc, #540]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cfa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	4984      	ldr	r1, [pc, #528]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d04:	4313      	orrs	r3, r2
 8008d06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f003 0310 	and.w	r3, r3, #16
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d00a      	beq.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008d16:	4b7f      	ldr	r3, [pc, #508]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	695b      	ldr	r3, [r3, #20]
 8008d24:	497b      	ldr	r1, [pc, #492]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d26:	4313      	orrs	r3, r2
 8008d28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 0320 	and.w	r3, r3, #32
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00a      	beq.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008d38:	4b76      	ldr	r3, [pc, #472]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d3e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	699b      	ldr	r3, [r3, #24]
 8008d46:	4973      	ldr	r1, [pc, #460]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00a      	beq.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008d5a:	4b6e      	ldr	r3, [pc, #440]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d60:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	69db      	ldr	r3, [r3, #28]
 8008d68:	496a      	ldr	r1, [pc, #424]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d00a      	beq.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008d7c:	4b65      	ldr	r3, [pc, #404]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d82:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6a1b      	ldr	r3, [r3, #32]
 8008d8a:	4962      	ldr	r1, [pc, #392]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00a      	beq.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008d9e:	4b5d      	ldr	r3, [pc, #372]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008da4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dac:	4959      	ldr	r1, [pc, #356]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008dae:	4313      	orrs	r3, r2
 8008db0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00a      	beq.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008dc0:	4b54      	ldr	r3, [pc, #336]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008dc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008dc6:	f023 0203 	bic.w	r2, r3, #3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dce:	4951      	ldr	r1, [pc, #324]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00a      	beq.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008de2:	4b4c      	ldr	r3, [pc, #304]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008de8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008df0:	4948      	ldr	r1, [pc, #288]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008df2:	4313      	orrs	r3, r2
 8008df4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d015      	beq.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008e04:	4b43      	ldr	r3, [pc, #268]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e12:	4940      	ldr	r1, [pc, #256]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e14:	4313      	orrs	r3, r2
 8008e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e22:	d105      	bne.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008e24:	4b3b      	ldr	r3, [pc, #236]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	4a3a      	ldr	r2, [pc, #232]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008e2e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d015      	beq.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008e3c:	4b35      	ldr	r3, [pc, #212]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e42:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e4a:	4932      	ldr	r1, [pc, #200]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e5a:	d105      	bne.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008e5c:	4b2d      	ldr	r3, [pc, #180]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	4a2c      	ldr	r2, [pc, #176]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008e66:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d015      	beq.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008e74:	4b27      	ldr	r3, [pc, #156]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e7a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e82:	4924      	ldr	r1, [pc, #144]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e84:	4313      	orrs	r3, r2
 8008e86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e92:	d105      	bne.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008e94:	4b1f      	ldr	r3, [pc, #124]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	4a1e      	ldr	r2, [pc, #120]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008e9e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d015      	beq.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008eac:	4b19      	ldr	r3, [pc, #100]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008eb2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eba:	4916      	ldr	r1, [pc, #88]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ec6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008eca:	d105      	bne.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ecc:	4b11      	ldr	r3, [pc, #68]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ece:	68db      	ldr	r3, [r3, #12]
 8008ed0:	4a10      	ldr	r2, [pc, #64]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ed2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008ed6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d019      	beq.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008eea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ef2:	4908      	ldr	r1, [pc, #32]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008efe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f02:	d109      	bne.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008f04:	4b03      	ldr	r3, [pc, #12]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	4a02      	ldr	r2, [pc, #8]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f0e:	60d3      	str	r3, [r2, #12]
 8008f10:	e002      	b.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008f12:	bf00      	nop
 8008f14:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d015      	beq.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008f24:	4b29      	ldr	r3, [pc, #164]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f2a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f32:	4926      	ldr	r1, [pc, #152]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008f34:	4313      	orrs	r3, r2
 8008f36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f42:	d105      	bne.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008f44:	4b21      	ldr	r3, [pc, #132]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	4a20      	ldr	r2, [pc, #128]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008f4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f4e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d015      	beq.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f62:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f6a:	4918      	ldr	r1, [pc, #96]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f7a:	d105      	bne.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008f7c:	4b13      	ldr	r3, [pc, #76]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	4a12      	ldr	r2, [pc, #72]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008f82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f86:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d015      	beq.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008f94:	4b0d      	ldr	r3, [pc, #52]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008f96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008f9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fa2:	490a      	ldr	r1, [pc, #40]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008fb2:	d105      	bne.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008fb4:	4b05      	ldr	r3, [pc, #20]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	4a04      	ldr	r2, [pc, #16]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008fba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008fbe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008fc0:	7cbb      	ldrb	r3, [r7, #18]
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3718      	adds	r7, #24
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	40021000 	.word	0x40021000

08008fd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d101      	bne.n	8008fe2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e09d      	b.n	800911e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d108      	bne.n	8008ffc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008ff2:	d009      	beq.n	8009008 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	61da      	str	r2, [r3, #28]
 8008ffa:	e005      	b.n	8009008 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009014:	b2db      	uxtb	r3, r3
 8009016:	2b00      	cmp	r3, #0
 8009018:	d106      	bne.n	8009028 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f7f9 fdcc 	bl	8002bc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2202      	movs	r2, #2
 800902c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800903e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009048:	d902      	bls.n	8009050 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800904a:	2300      	movs	r3, #0
 800904c:	60fb      	str	r3, [r7, #12]
 800904e:	e002      	b.n	8009056 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009050:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009054:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	68db      	ldr	r3, [r3, #12]
 800905a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800905e:	d007      	beq.n	8009070 <HAL_SPI_Init+0xa0>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009068:	d002      	beq.n	8009070 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009080:	431a      	orrs	r2, r3
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	691b      	ldr	r3, [r3, #16]
 8009086:	f003 0302 	and.w	r3, r3, #2
 800908a:	431a      	orrs	r2, r3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	695b      	ldr	r3, [r3, #20]
 8009090:	f003 0301 	and.w	r3, r3, #1
 8009094:	431a      	orrs	r2, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	699b      	ldr	r3, [r3, #24]
 800909a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800909e:	431a      	orrs	r2, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	69db      	ldr	r3, [r3, #28]
 80090a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80090a8:	431a      	orrs	r2, r3
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6a1b      	ldr	r3, [r3, #32]
 80090ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090b2:	ea42 0103 	orr.w	r1, r2, r3
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090ba:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	430a      	orrs	r2, r1
 80090c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	699b      	ldr	r3, [r3, #24]
 80090ca:	0c1b      	lsrs	r3, r3, #16
 80090cc:	f003 0204 	and.w	r2, r3, #4
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090d4:	f003 0310 	and.w	r3, r3, #16
 80090d8:	431a      	orrs	r2, r3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090de:	f003 0308 	and.w	r3, r3, #8
 80090e2:	431a      	orrs	r2, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80090ec:	ea42 0103 	orr.w	r1, r2, r3
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	430a      	orrs	r2, r1
 80090fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	69da      	ldr	r2, [r3, #28]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800910c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800911c:	2300      	movs	r3, #0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b088      	sub	sp, #32
 800912a:	af00      	add	r7, sp, #0
 800912c:	60f8      	str	r0, [r7, #12]
 800912e:	60b9      	str	r1, [r7, #8]
 8009130:	603b      	str	r3, [r7, #0]
 8009132:	4613      	mov	r3, r2
 8009134:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009136:	f7fa fa09 	bl	800354c <HAL_GetTick>
 800913a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800913c:	88fb      	ldrh	r3, [r7, #6]
 800913e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009146:	b2db      	uxtb	r3, r3
 8009148:	2b01      	cmp	r3, #1
 800914a:	d001      	beq.n	8009150 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800914c:	2302      	movs	r3, #2
 800914e:	e15c      	b.n	800940a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d002      	beq.n	800915c <HAL_SPI_Transmit+0x36>
 8009156:	88fb      	ldrh	r3, [r7, #6]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d101      	bne.n	8009160 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800915c:	2301      	movs	r3, #1
 800915e:	e154      	b.n	800940a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009166:	2b01      	cmp	r3, #1
 8009168:	d101      	bne.n	800916e <HAL_SPI_Transmit+0x48>
 800916a:	2302      	movs	r3, #2
 800916c:	e14d      	b.n	800940a <HAL_SPI_Transmit+0x2e4>
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2201      	movs	r2, #1
 8009172:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2203      	movs	r2, #3
 800917a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2200      	movs	r2, #0
 8009182:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	68ba      	ldr	r2, [r7, #8]
 8009188:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	88fa      	ldrh	r2, [r7, #6]
 800918e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	88fa      	ldrh	r2, [r7, #6]
 8009194:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2200      	movs	r2, #0
 800919a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2200      	movs	r2, #0
 80091a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2200      	movs	r2, #0
 80091b0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2200      	movs	r2, #0
 80091b6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80091c0:	d10f      	bne.n	80091e2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80091d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80091e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091ec:	2b40      	cmp	r3, #64	@ 0x40
 80091ee:	d007      	beq.n	8009200 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80091fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009208:	d952      	bls.n	80092b0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d002      	beq.n	8009218 <HAL_SPI_Transmit+0xf2>
 8009212:	8b7b      	ldrh	r3, [r7, #26]
 8009214:	2b01      	cmp	r3, #1
 8009216:	d145      	bne.n	80092a4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800921c:	881a      	ldrh	r2, [r3, #0]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009228:	1c9a      	adds	r2, r3, #2
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009232:	b29b      	uxth	r3, r3
 8009234:	3b01      	subs	r3, #1
 8009236:	b29a      	uxth	r2, r3
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800923c:	e032      	b.n	80092a4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	f003 0302 	and.w	r3, r3, #2
 8009248:	2b02      	cmp	r3, #2
 800924a:	d112      	bne.n	8009272 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009250:	881a      	ldrh	r2, [r3, #0]
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800925c:	1c9a      	adds	r2, r3, #2
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009266:	b29b      	uxth	r3, r3
 8009268:	3b01      	subs	r3, #1
 800926a:	b29a      	uxth	r2, r3
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009270:	e018      	b.n	80092a4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009272:	f7fa f96b 	bl	800354c <HAL_GetTick>
 8009276:	4602      	mov	r2, r0
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	1ad3      	subs	r3, r2, r3
 800927c:	683a      	ldr	r2, [r7, #0]
 800927e:	429a      	cmp	r2, r3
 8009280:	d803      	bhi.n	800928a <HAL_SPI_Transmit+0x164>
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009288:	d102      	bne.n	8009290 <HAL_SPI_Transmit+0x16a>
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d109      	bne.n	80092a4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2201      	movs	r2, #1
 8009294:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2200      	movs	r2, #0
 800929c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80092a0:	2303      	movs	r3, #3
 80092a2:	e0b2      	b.n	800940a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d1c7      	bne.n	800923e <HAL_SPI_Transmit+0x118>
 80092ae:	e083      	b.n	80093b8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d002      	beq.n	80092be <HAL_SPI_Transmit+0x198>
 80092b8:	8b7b      	ldrh	r3, [r7, #26]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d177      	bne.n	80093ae <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d912      	bls.n	80092ee <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092cc:	881a      	ldrh	r2, [r3, #0]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092d8:	1c9a      	adds	r2, r3, #2
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	3b02      	subs	r3, #2
 80092e6:	b29a      	uxth	r2, r3
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80092ec:	e05f      	b.n	80093ae <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	330c      	adds	r3, #12
 80092f8:	7812      	ldrb	r2, [r2, #0]
 80092fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009300:	1c5a      	adds	r2, r3, #1
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800930a:	b29b      	uxth	r3, r3
 800930c:	3b01      	subs	r3, #1
 800930e:	b29a      	uxth	r2, r3
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009314:	e04b      	b.n	80093ae <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	f003 0302 	and.w	r3, r3, #2
 8009320:	2b02      	cmp	r3, #2
 8009322:	d12b      	bne.n	800937c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009328:	b29b      	uxth	r3, r3
 800932a:	2b01      	cmp	r3, #1
 800932c:	d912      	bls.n	8009354 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009332:	881a      	ldrh	r2, [r3, #0]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800933e:	1c9a      	adds	r2, r3, #2
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009348:	b29b      	uxth	r3, r3
 800934a:	3b02      	subs	r3, #2
 800934c:	b29a      	uxth	r2, r3
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009352:	e02c      	b.n	80093ae <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	330c      	adds	r3, #12
 800935e:	7812      	ldrb	r2, [r2, #0]
 8009360:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009366:	1c5a      	adds	r2, r3, #1
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009370:	b29b      	uxth	r3, r3
 8009372:	3b01      	subs	r3, #1
 8009374:	b29a      	uxth	r2, r3
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800937a:	e018      	b.n	80093ae <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800937c:	f7fa f8e6 	bl	800354c <HAL_GetTick>
 8009380:	4602      	mov	r2, r0
 8009382:	69fb      	ldr	r3, [r7, #28]
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	683a      	ldr	r2, [r7, #0]
 8009388:	429a      	cmp	r2, r3
 800938a:	d803      	bhi.n	8009394 <HAL_SPI_Transmit+0x26e>
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009392:	d102      	bne.n	800939a <HAL_SPI_Transmit+0x274>
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d109      	bne.n	80093ae <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2201      	movs	r2, #1
 800939e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80093aa:	2303      	movs	r3, #3
 80093ac:	e02d      	b.n	800940a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d1ae      	bne.n	8009316 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80093b8:	69fa      	ldr	r2, [r7, #28]
 80093ba:	6839      	ldr	r1, [r7, #0]
 80093bc:	68f8      	ldr	r0, [r7, #12]
 80093be:	f000 fad5 	bl	800996c <SPI_EndRxTxTransaction>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d002      	beq.n	80093ce <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2220      	movs	r2, #32
 80093cc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d10a      	bne.n	80093ec <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80093d6:	2300      	movs	r3, #0
 80093d8:	617b      	str	r3, [r7, #20]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	617b      	str	r3, [r7, #20]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	617b      	str	r3, [r7, #20]
 80093ea:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2201      	movs	r2, #1
 80093f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009400:	2b00      	cmp	r3, #0
 8009402:	d001      	beq.n	8009408 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	e000      	b.n	800940a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8009408:	2300      	movs	r3, #0
  }
}
 800940a:	4618      	mov	r0, r3
 800940c:	3720      	adds	r7, #32
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
	...

08009414 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	4613      	mov	r3, r2
 8009420:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009428:	b2db      	uxtb	r3, r3
 800942a:	2b01      	cmp	r3, #1
 800942c:	d001      	beq.n	8009432 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800942e:	2302      	movs	r3, #2
 8009430:	e0d4      	b.n	80095dc <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d002      	beq.n	800943e <HAL_SPI_Transmit_DMA+0x2a>
 8009438:	88fb      	ldrh	r3, [r7, #6]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d101      	bne.n	8009442 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800943e:	2301      	movs	r3, #1
 8009440:	e0cc      	b.n	80095dc <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009448:	2b01      	cmp	r3, #1
 800944a:	d101      	bne.n	8009450 <HAL_SPI_Transmit_DMA+0x3c>
 800944c:	2302      	movs	r3, #2
 800944e:	e0c5      	b.n	80095dc <HAL_SPI_Transmit_DMA+0x1c8>
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2201      	movs	r2, #1
 8009454:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2203      	movs	r2, #3
 800945c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2200      	movs	r2, #0
 8009464:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	68ba      	ldr	r2, [r7, #8]
 800946a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	88fa      	ldrh	r2, [r7, #6]
 8009470:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	88fa      	ldrh	r2, [r7, #6]
 8009476:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2200      	movs	r2, #0
 800947c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2200      	movs	r2, #0
 8009482:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2200      	movs	r2, #0
 8009488:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2200      	movs	r2, #0
 8009496:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80094a2:	d10f      	bne.n	80094c4 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80094b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80094c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094c8:	4a46      	ldr	r2, [pc, #280]	@ (80095e4 <HAL_SPI_Transmit_DMA+0x1d0>)
 80094ca:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094d0:	4a45      	ldr	r2, [pc, #276]	@ (80095e8 <HAL_SPI_Transmit_DMA+0x1d4>)
 80094d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094d8:	4a44      	ldr	r2, [pc, #272]	@ (80095ec <HAL_SPI_Transmit_DMA+0x1d8>)
 80094da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094e0:	2200      	movs	r2, #0
 80094e2:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	685a      	ldr	r2, [r3, #4]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80094f2:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80094fc:	d82d      	bhi.n	800955a <HAL_SPI_Transmit_DMA+0x146>
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009502:	699b      	ldr	r3, [r3, #24]
 8009504:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009508:	d127      	bne.n	800955a <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800950e:	b29b      	uxth	r3, r3
 8009510:	f003 0301 	and.w	r3, r3, #1
 8009514:	2b00      	cmp	r3, #0
 8009516:	d10f      	bne.n	8009538 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	685a      	ldr	r2, [r3, #4]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009526:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800952c:	b29b      	uxth	r3, r3
 800952e:	085b      	lsrs	r3, r3, #1
 8009530:	b29a      	uxth	r2, r3
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009536:	e010      	b.n	800955a <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	685a      	ldr	r2, [r3, #4]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009546:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800954c:	b29b      	uxth	r3, r3
 800954e:	085b      	lsrs	r3, r3, #1
 8009550:	b29b      	uxth	r3, r3
 8009552:	3301      	adds	r3, #1
 8009554:	b29a      	uxth	r2, r3
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009562:	4619      	mov	r1, r3
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	330c      	adds	r3, #12
 800956a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009570:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009572:	f7fb fe8d 	bl	8005290 <HAL_DMA_Start_IT>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d00b      	beq.n	8009594 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009580:	f043 0210 	orr.w	r2, r3, #16
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2200      	movs	r2, #0
 800958c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	e023      	b.n	80095dc <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800959e:	2b40      	cmp	r3, #64	@ 0x40
 80095a0:	d007      	beq.n	80095b2 <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80095b0:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2200      	movs	r2, #0
 80095b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	685a      	ldr	r2, [r3, #4]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f042 0220 	orr.w	r2, r2, #32
 80095c8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	685a      	ldr	r2, [r3, #4]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f042 0202 	orr.w	r2, r2, #2
 80095d8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80095da:	2300      	movs	r3, #0
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3710      	adds	r7, #16
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	080096d3 	.word	0x080096d3
 80095e8:	0800962d 	.word	0x0800962d
 80095ec:	080096ef 	.word	0x080096ef

080095f0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80095f8:	bf00      	nop
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800960c:	bf00      	nop
 800960e:	370c      	adds	r7, #12
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009620:	bf00      	nop
 8009622:	370c      	adds	r7, #12
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b086      	sub	sp, #24
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009638:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800963a:	f7f9 ff87 	bl	800354c <HAL_GetTick>
 800963e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f003 0320 	and.w	r3, r3, #32
 800964a:	2b20      	cmp	r3, #32
 800964c:	d03b      	beq.n	80096c6 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	685a      	ldr	r2, [r3, #4]
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f022 0220 	bic.w	r2, r2, #32
 800965c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	685a      	ldr	r2, [r3, #4]
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f022 0202 	bic.w	r2, r2, #2
 800966c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800966e:	693a      	ldr	r2, [r7, #16]
 8009670:	2164      	movs	r1, #100	@ 0x64
 8009672:	6978      	ldr	r0, [r7, #20]
 8009674:	f000 f97a 	bl	800996c <SPI_EndRxTxTransaction>
 8009678:	4603      	mov	r3, r0
 800967a:	2b00      	cmp	r3, #0
 800967c:	d005      	beq.n	800968a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009682:	f043 0220 	orr.w	r2, r3, #32
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d10a      	bne.n	80096a8 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009692:	2300      	movs	r3, #0
 8009694:	60fb      	str	r3, [r7, #12]
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	68db      	ldr	r3, [r3, #12]
 800969c:	60fb      	str	r3, [r7, #12]
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	60fb      	str	r3, [r7, #12]
 80096a6:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	2200      	movs	r2, #0
 80096ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	2201      	movs	r2, #1
 80096b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d003      	beq.n	80096c6 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80096be:	6978      	ldr	r0, [r7, #20]
 80096c0:	f7ff ffaa 	bl	8009618 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80096c4:	e002      	b.n	80096cc <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80096c6:	6978      	ldr	r0, [r7, #20]
 80096c8:	f7ff ff92 	bl	80095f0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80096cc:	3718      	adds	r7, #24
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}

080096d2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b084      	sub	sp, #16
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096de:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80096e0:	68f8      	ldr	r0, [r7, #12]
 80096e2:	f7ff ff8f 	bl	8009604 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80096e6:	bf00      	nop
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b084      	sub	sp, #16
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096fa:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	685a      	ldr	r2, [r3, #4]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f022 0203 	bic.w	r2, r2, #3
 800970a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009710:	f043 0210 	orr.w	r2, r3, #16
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009720:	68f8      	ldr	r0, [r7, #12]
 8009722:	f7ff ff79 	bl	8009618 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009726:	bf00      	nop
 8009728:	3710      	adds	r7, #16
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
	...

08009730 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b088      	sub	sp, #32
 8009734:	af00      	add	r7, sp, #0
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	603b      	str	r3, [r7, #0]
 800973c:	4613      	mov	r3, r2
 800973e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009740:	f7f9 ff04 	bl	800354c <HAL_GetTick>
 8009744:	4602      	mov	r2, r0
 8009746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009748:	1a9b      	subs	r3, r3, r2
 800974a:	683a      	ldr	r2, [r7, #0]
 800974c:	4413      	add	r3, r2
 800974e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009750:	f7f9 fefc 	bl	800354c <HAL_GetTick>
 8009754:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009756:	4b39      	ldr	r3, [pc, #228]	@ (800983c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	015b      	lsls	r3, r3, #5
 800975c:	0d1b      	lsrs	r3, r3, #20
 800975e:	69fa      	ldr	r2, [r7, #28]
 8009760:	fb02 f303 	mul.w	r3, r2, r3
 8009764:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009766:	e054      	b.n	8009812 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800976e:	d050      	beq.n	8009812 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009770:	f7f9 feec 	bl	800354c <HAL_GetTick>
 8009774:	4602      	mov	r2, r0
 8009776:	69bb      	ldr	r3, [r7, #24]
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	69fa      	ldr	r2, [r7, #28]
 800977c:	429a      	cmp	r2, r3
 800977e:	d902      	bls.n	8009786 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d13d      	bne.n	8009802 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	685a      	ldr	r2, [r3, #4]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009794:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800979e:	d111      	bne.n	80097c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097a8:	d004      	beq.n	80097b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097b2:	d107      	bne.n	80097c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80097c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097cc:	d10f      	bne.n	80097ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80097dc:	601a      	str	r2, [r3, #0]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80097ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2201      	movs	r2, #1
 80097f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2200      	movs	r2, #0
 80097fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80097fe:	2303      	movs	r3, #3
 8009800:	e017      	b.n	8009832 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d101      	bne.n	800980c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009808:	2300      	movs	r3, #0
 800980a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	3b01      	subs	r3, #1
 8009810:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	689a      	ldr	r2, [r3, #8]
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	4013      	ands	r3, r2
 800981c:	68ba      	ldr	r2, [r7, #8]
 800981e:	429a      	cmp	r2, r3
 8009820:	bf0c      	ite	eq
 8009822:	2301      	moveq	r3, #1
 8009824:	2300      	movne	r3, #0
 8009826:	b2db      	uxtb	r3, r3
 8009828:	461a      	mov	r2, r3
 800982a:	79fb      	ldrb	r3, [r7, #7]
 800982c:	429a      	cmp	r2, r3
 800982e:	d19b      	bne.n	8009768 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009830:	2300      	movs	r3, #0
}
 8009832:	4618      	mov	r0, r3
 8009834:	3720      	adds	r7, #32
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	20000008 	.word	0x20000008

08009840 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b08a      	sub	sp, #40	@ 0x28
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	607a      	str	r2, [r7, #4]
 800984c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800984e:	2300      	movs	r3, #0
 8009850:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009852:	f7f9 fe7b 	bl	800354c <HAL_GetTick>
 8009856:	4602      	mov	r2, r0
 8009858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800985a:	1a9b      	subs	r3, r3, r2
 800985c:	683a      	ldr	r2, [r7, #0]
 800985e:	4413      	add	r3, r2
 8009860:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009862:	f7f9 fe73 	bl	800354c <HAL_GetTick>
 8009866:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	330c      	adds	r3, #12
 800986e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009870:	4b3d      	ldr	r3, [pc, #244]	@ (8009968 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	4613      	mov	r3, r2
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	4413      	add	r3, r2
 800987a:	00da      	lsls	r2, r3, #3
 800987c:	1ad3      	subs	r3, r2, r3
 800987e:	0d1b      	lsrs	r3, r3, #20
 8009880:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009882:	fb02 f303 	mul.w	r3, r2, r3
 8009886:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009888:	e060      	b.n	800994c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009890:	d107      	bne.n	80098a2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d104      	bne.n	80098a2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009898:	69fb      	ldr	r3, [r7, #28]
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	b2db      	uxtb	r3, r3
 800989e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80098a0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098a8:	d050      	beq.n	800994c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80098aa:	f7f9 fe4f 	bl	800354c <HAL_GetTick>
 80098ae:	4602      	mov	r2, r0
 80098b0:	6a3b      	ldr	r3, [r7, #32]
 80098b2:	1ad3      	subs	r3, r2, r3
 80098b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d902      	bls.n	80098c0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80098ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d13d      	bne.n	800993c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	685a      	ldr	r2, [r3, #4]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80098ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80098d8:	d111      	bne.n	80098fe <SPI_WaitFifoStateUntilTimeout+0xbe>
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80098e2:	d004      	beq.n	80098ee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098ec:	d107      	bne.n	80098fe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80098fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009902:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009906:	d10f      	bne.n	8009928 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009916:	601a      	str	r2, [r3, #0]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009926:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2201      	movs	r2, #1
 800992c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2200      	movs	r2, #0
 8009934:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009938:	2303      	movs	r3, #3
 800993a:	e010      	b.n	800995e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800993c:	69bb      	ldr	r3, [r7, #24]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d101      	bne.n	8009946 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009942:	2300      	movs	r3, #0
 8009944:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009946:	69bb      	ldr	r3, [r7, #24]
 8009948:	3b01      	subs	r3, #1
 800994a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	689a      	ldr	r2, [r3, #8]
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	4013      	ands	r3, r2
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	429a      	cmp	r2, r3
 800995a:	d196      	bne.n	800988a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3728      	adds	r7, #40	@ 0x28
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	20000008 	.word	0x20000008

0800996c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b086      	sub	sp, #24
 8009970:	af02      	add	r7, sp, #8
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	60b9      	str	r1, [r7, #8]
 8009976:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	9300      	str	r3, [sp, #0]
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	2200      	movs	r2, #0
 8009980:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009984:	68f8      	ldr	r0, [r7, #12]
 8009986:	f7ff ff5b 	bl	8009840 <SPI_WaitFifoStateUntilTimeout>
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d007      	beq.n	80099a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009994:	f043 0220 	orr.w	r2, r3, #32
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800999c:	2303      	movs	r3, #3
 800999e:	e027      	b.n	80099f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	9300      	str	r3, [sp, #0]
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	2200      	movs	r2, #0
 80099a8:	2180      	movs	r1, #128	@ 0x80
 80099aa:	68f8      	ldr	r0, [r7, #12]
 80099ac:	f7ff fec0 	bl	8009730 <SPI_WaitFlagStateUntilTimeout>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d007      	beq.n	80099c6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099ba:	f043 0220 	orr.w	r2, r3, #32
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80099c2:	2303      	movs	r3, #3
 80099c4:	e014      	b.n	80099f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	9300      	str	r3, [sp, #0]
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80099d2:	68f8      	ldr	r0, [r7, #12]
 80099d4:	f7ff ff34 	bl	8009840 <SPI_WaitFifoStateUntilTimeout>
 80099d8:	4603      	mov	r3, r0
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d007      	beq.n	80099ee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099e2:	f043 0220 	orr.w	r2, r3, #32
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80099ea:	2303      	movs	r3, #3
 80099ec:	e000      	b.n	80099f0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80099ee:	2300      	movs	r3, #0
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d101      	bne.n	8009a0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009a06:	2301      	movs	r3, #1
 8009a08:	e049      	b.n	8009a9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d106      	bne.n	8009a24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f7f9 fa32 	bl	8002e88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2202      	movs	r2, #2
 8009a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681a      	ldr	r2, [r3, #0]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	3304      	adds	r3, #4
 8009a34:	4619      	mov	r1, r3
 8009a36:	4610      	mov	r0, r2
 8009a38:	f001 f822 	bl	800aa80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2201      	movs	r2, #1
 8009a40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2201      	movs	r2, #1
 8009a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2201      	movs	r2, #1
 8009a50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2201      	movs	r2, #1
 8009a58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2201      	movs	r2, #1
 8009a68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2201      	movs	r2, #1
 8009a78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2201      	movs	r2, #1
 8009a88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2201      	movs	r2, #1
 8009a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009a9c:	2300      	movs	r3, #0
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3708      	adds	r7, #8
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}

08009aa6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009aa6:	b580      	push	{r7, lr}
 8009aa8:	b082      	sub	sp, #8
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d101      	bne.n	8009ab8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	e049      	b.n	8009b4c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d106      	bne.n	8009ad2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 f841 	bl	8009b54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2202      	movs	r2, #2
 8009ad6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	3304      	adds	r3, #4
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	4610      	mov	r0, r2
 8009ae6:	f000 ffcb 	bl	800aa80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2201      	movs	r2, #1
 8009aee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2201      	movs	r2, #1
 8009af6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2201      	movs	r2, #1
 8009afe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2201      	movs	r2, #1
 8009b06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2201      	movs	r2, #1
 8009b16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2201      	movs	r2, #1
 8009b26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2201      	movs	r2, #1
 8009b36:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2201      	movs	r2, #1
 8009b46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009b4a:	2300      	movs	r3, #0
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009b5c:	bf00      	nop
 8009b5e:	370c      	adds	r7, #12
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d109      	bne.n	8009b8c <HAL_TIM_PWM_Start+0x24>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	bf14      	ite	ne
 8009b84:	2301      	movne	r3, #1
 8009b86:	2300      	moveq	r3, #0
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	e03c      	b.n	8009c06 <HAL_TIM_PWM_Start+0x9e>
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	2b04      	cmp	r3, #4
 8009b90:	d109      	bne.n	8009ba6 <HAL_TIM_PWM_Start+0x3e>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	bf14      	ite	ne
 8009b9e:	2301      	movne	r3, #1
 8009ba0:	2300      	moveq	r3, #0
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	e02f      	b.n	8009c06 <HAL_TIM_PWM_Start+0x9e>
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	2b08      	cmp	r3, #8
 8009baa:	d109      	bne.n	8009bc0 <HAL_TIM_PWM_Start+0x58>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	bf14      	ite	ne
 8009bb8:	2301      	movne	r3, #1
 8009bba:	2300      	moveq	r3, #0
 8009bbc:	b2db      	uxtb	r3, r3
 8009bbe:	e022      	b.n	8009c06 <HAL_TIM_PWM_Start+0x9e>
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	2b0c      	cmp	r3, #12
 8009bc4:	d109      	bne.n	8009bda <HAL_TIM_PWM_Start+0x72>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	bf14      	ite	ne
 8009bd2:	2301      	movne	r3, #1
 8009bd4:	2300      	moveq	r3, #0
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	e015      	b.n	8009c06 <HAL_TIM_PWM_Start+0x9e>
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	2b10      	cmp	r3, #16
 8009bde:	d109      	bne.n	8009bf4 <HAL_TIM_PWM_Start+0x8c>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	bf14      	ite	ne
 8009bec:	2301      	movne	r3, #1
 8009bee:	2300      	moveq	r3, #0
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	e008      	b.n	8009c06 <HAL_TIM_PWM_Start+0x9e>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	bf14      	ite	ne
 8009c00:	2301      	movne	r3, #1
 8009c02:	2300      	moveq	r3, #0
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d001      	beq.n	8009c0e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e0a6      	b.n	8009d5c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d104      	bne.n	8009c1e <HAL_TIM_PWM_Start+0xb6>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2202      	movs	r2, #2
 8009c18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009c1c:	e023      	b.n	8009c66 <HAL_TIM_PWM_Start+0xfe>
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	2b04      	cmp	r3, #4
 8009c22:	d104      	bne.n	8009c2e <HAL_TIM_PWM_Start+0xc6>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2202      	movs	r2, #2
 8009c28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009c2c:	e01b      	b.n	8009c66 <HAL_TIM_PWM_Start+0xfe>
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	2b08      	cmp	r3, #8
 8009c32:	d104      	bne.n	8009c3e <HAL_TIM_PWM_Start+0xd6>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2202      	movs	r2, #2
 8009c38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009c3c:	e013      	b.n	8009c66 <HAL_TIM_PWM_Start+0xfe>
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	2b0c      	cmp	r3, #12
 8009c42:	d104      	bne.n	8009c4e <HAL_TIM_PWM_Start+0xe6>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2202      	movs	r2, #2
 8009c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009c4c:	e00b      	b.n	8009c66 <HAL_TIM_PWM_Start+0xfe>
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	2b10      	cmp	r3, #16
 8009c52:	d104      	bne.n	8009c5e <HAL_TIM_PWM_Start+0xf6>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2202      	movs	r2, #2
 8009c58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009c5c:	e003      	b.n	8009c66 <HAL_TIM_PWM_Start+0xfe>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2202      	movs	r2, #2
 8009c62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	6839      	ldr	r1, [r7, #0]
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f001 fb80 	bl	800b374 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4a3a      	ldr	r2, [pc, #232]	@ (8009d64 <HAL_TIM_PWM_Start+0x1fc>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d018      	beq.n	8009cb0 <HAL_TIM_PWM_Start+0x148>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4a39      	ldr	r2, [pc, #228]	@ (8009d68 <HAL_TIM_PWM_Start+0x200>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d013      	beq.n	8009cb0 <HAL_TIM_PWM_Start+0x148>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a37      	ldr	r2, [pc, #220]	@ (8009d6c <HAL_TIM_PWM_Start+0x204>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d00e      	beq.n	8009cb0 <HAL_TIM_PWM_Start+0x148>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4a36      	ldr	r2, [pc, #216]	@ (8009d70 <HAL_TIM_PWM_Start+0x208>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d009      	beq.n	8009cb0 <HAL_TIM_PWM_Start+0x148>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a34      	ldr	r2, [pc, #208]	@ (8009d74 <HAL_TIM_PWM_Start+0x20c>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d004      	beq.n	8009cb0 <HAL_TIM_PWM_Start+0x148>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a33      	ldr	r2, [pc, #204]	@ (8009d78 <HAL_TIM_PWM_Start+0x210>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d101      	bne.n	8009cb4 <HAL_TIM_PWM_Start+0x14c>
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e000      	b.n	8009cb6 <HAL_TIM_PWM_Start+0x14e>
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d007      	beq.n	8009cca <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009cc8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4a25      	ldr	r2, [pc, #148]	@ (8009d64 <HAL_TIM_PWM_Start+0x1fc>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d022      	beq.n	8009d1a <HAL_TIM_PWM_Start+0x1b2>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cdc:	d01d      	beq.n	8009d1a <HAL_TIM_PWM_Start+0x1b2>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	4a26      	ldr	r2, [pc, #152]	@ (8009d7c <HAL_TIM_PWM_Start+0x214>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d018      	beq.n	8009d1a <HAL_TIM_PWM_Start+0x1b2>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a24      	ldr	r2, [pc, #144]	@ (8009d80 <HAL_TIM_PWM_Start+0x218>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d013      	beq.n	8009d1a <HAL_TIM_PWM_Start+0x1b2>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4a23      	ldr	r2, [pc, #140]	@ (8009d84 <HAL_TIM_PWM_Start+0x21c>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d00e      	beq.n	8009d1a <HAL_TIM_PWM_Start+0x1b2>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a19      	ldr	r2, [pc, #100]	@ (8009d68 <HAL_TIM_PWM_Start+0x200>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d009      	beq.n	8009d1a <HAL_TIM_PWM_Start+0x1b2>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a18      	ldr	r2, [pc, #96]	@ (8009d6c <HAL_TIM_PWM_Start+0x204>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d004      	beq.n	8009d1a <HAL_TIM_PWM_Start+0x1b2>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a18      	ldr	r2, [pc, #96]	@ (8009d78 <HAL_TIM_PWM_Start+0x210>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d115      	bne.n	8009d46 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	689a      	ldr	r2, [r3, #8]
 8009d20:	4b19      	ldr	r3, [pc, #100]	@ (8009d88 <HAL_TIM_PWM_Start+0x220>)
 8009d22:	4013      	ands	r3, r2
 8009d24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2b06      	cmp	r3, #6
 8009d2a:	d015      	beq.n	8009d58 <HAL_TIM_PWM_Start+0x1f0>
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d32:	d011      	beq.n	8009d58 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f042 0201 	orr.w	r2, r2, #1
 8009d42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d44:	e008      	b.n	8009d58 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f042 0201 	orr.w	r2, r2, #1
 8009d54:	601a      	str	r2, [r3, #0]
 8009d56:	e000      	b.n	8009d5a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d58:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009d5a:	2300      	movs	r3, #0
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3710      	adds	r7, #16
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	40012c00 	.word	0x40012c00
 8009d68:	40013400 	.word	0x40013400
 8009d6c:	40014000 	.word	0x40014000
 8009d70:	40014400 	.word	0x40014400
 8009d74:	40014800 	.word	0x40014800
 8009d78:	40015000 	.word	0x40015000
 8009d7c:	40000400 	.word	0x40000400
 8009d80:	40000800 	.word	0x40000800
 8009d84:	40000c00 	.word	0x40000c00
 8009d88:	00010007 	.word	0x00010007

08009d8c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b086      	sub	sp, #24
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	607a      	str	r2, [r7, #4]
 8009d98:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d109      	bne.n	8009db8 <HAL_TIM_PWM_Start_DMA+0x2c>
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	2b02      	cmp	r3, #2
 8009dae:	bf0c      	ite	eq
 8009db0:	2301      	moveq	r3, #1
 8009db2:	2300      	movne	r3, #0
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	e03c      	b.n	8009e32 <HAL_TIM_PWM_Start_DMA+0xa6>
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	2b04      	cmp	r3, #4
 8009dbc:	d109      	bne.n	8009dd2 <HAL_TIM_PWM_Start_DMA+0x46>
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	2b02      	cmp	r3, #2
 8009dc8:	bf0c      	ite	eq
 8009dca:	2301      	moveq	r3, #1
 8009dcc:	2300      	movne	r3, #0
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	e02f      	b.n	8009e32 <HAL_TIM_PWM_Start_DMA+0xa6>
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	2b08      	cmp	r3, #8
 8009dd6:	d109      	bne.n	8009dec <HAL_TIM_PWM_Start_DMA+0x60>
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009dde:	b2db      	uxtb	r3, r3
 8009de0:	2b02      	cmp	r3, #2
 8009de2:	bf0c      	ite	eq
 8009de4:	2301      	moveq	r3, #1
 8009de6:	2300      	movne	r3, #0
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	e022      	b.n	8009e32 <HAL_TIM_PWM_Start_DMA+0xa6>
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	2b0c      	cmp	r3, #12
 8009df0:	d109      	bne.n	8009e06 <HAL_TIM_PWM_Start_DMA+0x7a>
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	2b02      	cmp	r3, #2
 8009dfc:	bf0c      	ite	eq
 8009dfe:	2301      	moveq	r3, #1
 8009e00:	2300      	movne	r3, #0
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	e015      	b.n	8009e32 <HAL_TIM_PWM_Start_DMA+0xa6>
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	2b10      	cmp	r3, #16
 8009e0a:	d109      	bne.n	8009e20 <HAL_TIM_PWM_Start_DMA+0x94>
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	2b02      	cmp	r3, #2
 8009e16:	bf0c      	ite	eq
 8009e18:	2301      	moveq	r3, #1
 8009e1a:	2300      	movne	r3, #0
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	e008      	b.n	8009e32 <HAL_TIM_PWM_Start_DMA+0xa6>
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	2b02      	cmp	r3, #2
 8009e2a:	bf0c      	ite	eq
 8009e2c:	2301      	moveq	r3, #1
 8009e2e:	2300      	movne	r3, #0
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d001      	beq.n	8009e3a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8009e36:	2302      	movs	r3, #2
 8009e38:	e1b5      	b.n	800a1a6 <HAL_TIM_PWM_Start_DMA+0x41a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d109      	bne.n	8009e54 <HAL_TIM_PWM_Start_DMA+0xc8>
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	bf0c      	ite	eq
 8009e4c:	2301      	moveq	r3, #1
 8009e4e:	2300      	movne	r3, #0
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	e03c      	b.n	8009ece <HAL_TIM_PWM_Start_DMA+0x142>
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	2b04      	cmp	r3, #4
 8009e58:	d109      	bne.n	8009e6e <HAL_TIM_PWM_Start_DMA+0xe2>
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	bf0c      	ite	eq
 8009e66:	2301      	moveq	r3, #1
 8009e68:	2300      	movne	r3, #0
 8009e6a:	b2db      	uxtb	r3, r3
 8009e6c:	e02f      	b.n	8009ece <HAL_TIM_PWM_Start_DMA+0x142>
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	2b08      	cmp	r3, #8
 8009e72:	d109      	bne.n	8009e88 <HAL_TIM_PWM_Start_DMA+0xfc>
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	bf0c      	ite	eq
 8009e80:	2301      	moveq	r3, #1
 8009e82:	2300      	movne	r3, #0
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	e022      	b.n	8009ece <HAL_TIM_PWM_Start_DMA+0x142>
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	2b0c      	cmp	r3, #12
 8009e8c:	d109      	bne.n	8009ea2 <HAL_TIM_PWM_Start_DMA+0x116>
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	bf0c      	ite	eq
 8009e9a:	2301      	moveq	r3, #1
 8009e9c:	2300      	movne	r3, #0
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	e015      	b.n	8009ece <HAL_TIM_PWM_Start_DMA+0x142>
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	2b10      	cmp	r3, #16
 8009ea6:	d109      	bne.n	8009ebc <HAL_TIM_PWM_Start_DMA+0x130>
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	bf0c      	ite	eq
 8009eb4:	2301      	moveq	r3, #1
 8009eb6:	2300      	movne	r3, #0
 8009eb8:	b2db      	uxtb	r3, r3
 8009eba:	e008      	b.n	8009ece <HAL_TIM_PWM_Start_DMA+0x142>
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	bf0c      	ite	eq
 8009ec8:	2301      	moveq	r3, #1
 8009eca:	2300      	movne	r3, #0
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d034      	beq.n	8009f3c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d002      	beq.n	8009ede <HAL_TIM_PWM_Start_DMA+0x152>
 8009ed8:	887b      	ldrh	r3, [r7, #2]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d101      	bne.n	8009ee2 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e161      	b.n	800a1a6 <HAL_TIM_PWM_Start_DMA+0x41a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d104      	bne.n	8009ef2 <HAL_TIM_PWM_Start_DMA+0x166>
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2202      	movs	r2, #2
 8009eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009ef0:	e026      	b.n	8009f40 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	2b04      	cmp	r3, #4
 8009ef6:	d104      	bne.n	8009f02 <HAL_TIM_PWM_Start_DMA+0x176>
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2202      	movs	r2, #2
 8009efc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009f00:	e01e      	b.n	8009f40 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	2b08      	cmp	r3, #8
 8009f06:	d104      	bne.n	8009f12 <HAL_TIM_PWM_Start_DMA+0x186>
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2202      	movs	r2, #2
 8009f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009f10:	e016      	b.n	8009f40 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	2b0c      	cmp	r3, #12
 8009f16:	d104      	bne.n	8009f22 <HAL_TIM_PWM_Start_DMA+0x196>
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2202      	movs	r2, #2
 8009f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009f20:	e00e      	b.n	8009f40 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	2b10      	cmp	r3, #16
 8009f26:	d104      	bne.n	8009f32 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2202      	movs	r2, #2
 8009f2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009f30:	e006      	b.n	8009f40 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2202      	movs	r2, #2
 8009f36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009f3a:	e001      	b.n	8009f40 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	e132      	b.n	800a1a6 <HAL_TIM_PWM_Start_DMA+0x41a>
  }

  switch (Channel)
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	2b0c      	cmp	r3, #12
 8009f44:	f200 80ae 	bhi.w	800a0a4 <HAL_TIM_PWM_Start_DMA+0x318>
 8009f48:	a201      	add	r2, pc, #4	@ (adr r2, 8009f50 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8009f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f4e:	bf00      	nop
 8009f50:	08009f85 	.word	0x08009f85
 8009f54:	0800a0a5 	.word	0x0800a0a5
 8009f58:	0800a0a5 	.word	0x0800a0a5
 8009f5c:	0800a0a5 	.word	0x0800a0a5
 8009f60:	08009fcd 	.word	0x08009fcd
 8009f64:	0800a0a5 	.word	0x0800a0a5
 8009f68:	0800a0a5 	.word	0x0800a0a5
 8009f6c:	0800a0a5 	.word	0x0800a0a5
 8009f70:	0800a015 	.word	0x0800a015
 8009f74:	0800a0a5 	.word	0x0800a0a5
 8009f78:	0800a0a5 	.word	0x0800a0a5
 8009f7c:	0800a0a5 	.word	0x0800a0a5
 8009f80:	0800a05d 	.word	0x0800a05d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f88:	4a89      	ldr	r2, [pc, #548]	@ (800a1b0 <HAL_TIM_PWM_Start_DMA+0x424>)
 8009f8a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f90:	4a88      	ldr	r2, [pc, #544]	@ (800a1b4 <HAL_TIM_PWM_Start_DMA+0x428>)
 8009f92:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f98:	4a87      	ldr	r2, [pc, #540]	@ (800a1b8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8009f9a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8009fa0:	6879      	ldr	r1, [r7, #4]
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	3334      	adds	r3, #52	@ 0x34
 8009fa8:	461a      	mov	r2, r3
 8009faa:	887b      	ldrh	r3, [r7, #2]
 8009fac:	f7fb f970 	bl	8005290 <HAL_DMA_Start_IT>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d001      	beq.n	8009fba <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e0f5      	b.n	800a1a6 <HAL_TIM_PWM_Start_DMA+0x41a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	68da      	ldr	r2, [r3, #12]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009fc8:	60da      	str	r2, [r3, #12]
      break;
 8009fca:	e06e      	b.n	800a0aa <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fd0:	4a77      	ldr	r2, [pc, #476]	@ (800a1b0 <HAL_TIM_PWM_Start_DMA+0x424>)
 8009fd2:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fd8:	4a76      	ldr	r2, [pc, #472]	@ (800a1b4 <HAL_TIM_PWM_Start_DMA+0x428>)
 8009fda:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fe0:	4a75      	ldr	r2, [pc, #468]	@ (800a1b8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8009fe2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8009fe8:	6879      	ldr	r1, [r7, #4]
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	3338      	adds	r3, #56	@ 0x38
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	887b      	ldrh	r3, [r7, #2]
 8009ff4:	f7fb f94c 	bl	8005290 <HAL_DMA_Start_IT>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d001      	beq.n	800a002 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009ffe:	2301      	movs	r3, #1
 800a000:	e0d1      	b.n	800a1a6 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	68da      	ldr	r2, [r3, #12]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a010:	60da      	str	r2, [r3, #12]
      break;
 800a012:	e04a      	b.n	800a0aa <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a018:	4a65      	ldr	r2, [pc, #404]	@ (800a1b0 <HAL_TIM_PWM_Start_DMA+0x424>)
 800a01a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a020:	4a64      	ldr	r2, [pc, #400]	@ (800a1b4 <HAL_TIM_PWM_Start_DMA+0x428>)
 800a022:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a028:	4a63      	ldr	r2, [pc, #396]	@ (800a1b8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800a02a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800a030:	6879      	ldr	r1, [r7, #4]
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	333c      	adds	r3, #60	@ 0x3c
 800a038:	461a      	mov	r2, r3
 800a03a:	887b      	ldrh	r3, [r7, #2]
 800a03c:	f7fb f928 	bl	8005290 <HAL_DMA_Start_IT>
 800a040:	4603      	mov	r3, r0
 800a042:	2b00      	cmp	r3, #0
 800a044:	d001      	beq.n	800a04a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a046:	2301      	movs	r3, #1
 800a048:	e0ad      	b.n	800a1a6 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	68da      	ldr	r2, [r3, #12]
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a058:	60da      	str	r2, [r3, #12]
      break;
 800a05a:	e026      	b.n	800a0aa <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a060:	4a53      	ldr	r2, [pc, #332]	@ (800a1b0 <HAL_TIM_PWM_Start_DMA+0x424>)
 800a062:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a068:	4a52      	ldr	r2, [pc, #328]	@ (800a1b4 <HAL_TIM_PWM_Start_DMA+0x428>)
 800a06a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a070:	4a51      	ldr	r2, [pc, #324]	@ (800a1b8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800a072:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a078:	6879      	ldr	r1, [r7, #4]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	3340      	adds	r3, #64	@ 0x40
 800a080:	461a      	mov	r2, r3
 800a082:	887b      	ldrh	r3, [r7, #2]
 800a084:	f7fb f904 	bl	8005290 <HAL_DMA_Start_IT>
 800a088:	4603      	mov	r3, r0
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d001      	beq.n	800a092 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	e089      	b.n	800a1a6 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	68da      	ldr	r2, [r3, #12]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a0a0:	60da      	str	r2, [r3, #12]
      break;
 800a0a2:	e002      	b.n	800a0aa <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	75fb      	strb	r3, [r7, #23]
      break;
 800a0a8:	bf00      	nop
  }

  if (status == HAL_OK)
 800a0aa:	7dfb      	ldrb	r3, [r7, #23]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d179      	bne.n	800a1a4 <HAL_TIM_PWM_Start_DMA+0x418>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	68b9      	ldr	r1, [r7, #8]
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f001 f95b 	bl	800b374 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4a3e      	ldr	r2, [pc, #248]	@ (800a1bc <HAL_TIM_PWM_Start_DMA+0x430>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d018      	beq.n	800a0fa <HAL_TIM_PWM_Start_DMA+0x36e>
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4a3c      	ldr	r2, [pc, #240]	@ (800a1c0 <HAL_TIM_PWM_Start_DMA+0x434>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d013      	beq.n	800a0fa <HAL_TIM_PWM_Start_DMA+0x36e>
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4a3b      	ldr	r2, [pc, #236]	@ (800a1c4 <HAL_TIM_PWM_Start_DMA+0x438>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d00e      	beq.n	800a0fa <HAL_TIM_PWM_Start_DMA+0x36e>
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a39      	ldr	r2, [pc, #228]	@ (800a1c8 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d009      	beq.n	800a0fa <HAL_TIM_PWM_Start_DMA+0x36e>
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a38      	ldr	r2, [pc, #224]	@ (800a1cc <HAL_TIM_PWM_Start_DMA+0x440>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d004      	beq.n	800a0fa <HAL_TIM_PWM_Start_DMA+0x36e>
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4a36      	ldr	r2, [pc, #216]	@ (800a1d0 <HAL_TIM_PWM_Start_DMA+0x444>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d101      	bne.n	800a0fe <HAL_TIM_PWM_Start_DMA+0x372>
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e000      	b.n	800a100 <HAL_TIM_PWM_Start_DMA+0x374>
 800a0fe:	2300      	movs	r3, #0
 800a100:	2b00      	cmp	r3, #0
 800a102:	d007      	beq.n	800a114 <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a112:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a28      	ldr	r2, [pc, #160]	@ (800a1bc <HAL_TIM_PWM_Start_DMA+0x430>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d022      	beq.n	800a164 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a126:	d01d      	beq.n	800a164 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a29      	ldr	r2, [pc, #164]	@ (800a1d4 <HAL_TIM_PWM_Start_DMA+0x448>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d018      	beq.n	800a164 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4a28      	ldr	r2, [pc, #160]	@ (800a1d8 <HAL_TIM_PWM_Start_DMA+0x44c>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d013      	beq.n	800a164 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a26      	ldr	r2, [pc, #152]	@ (800a1dc <HAL_TIM_PWM_Start_DMA+0x450>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d00e      	beq.n	800a164 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a1d      	ldr	r2, [pc, #116]	@ (800a1c0 <HAL_TIM_PWM_Start_DMA+0x434>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d009      	beq.n	800a164 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a1b      	ldr	r2, [pc, #108]	@ (800a1c4 <HAL_TIM_PWM_Start_DMA+0x438>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d004      	beq.n	800a164 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a1c      	ldr	r2, [pc, #112]	@ (800a1d0 <HAL_TIM_PWM_Start_DMA+0x444>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d115      	bne.n	800a190 <HAL_TIM_PWM_Start_DMA+0x404>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	689a      	ldr	r2, [r3, #8]
 800a16a:	4b1d      	ldr	r3, [pc, #116]	@ (800a1e0 <HAL_TIM_PWM_Start_DMA+0x454>)
 800a16c:	4013      	ands	r3, r2
 800a16e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	2b06      	cmp	r3, #6
 800a174:	d015      	beq.n	800a1a2 <HAL_TIM_PWM_Start_DMA+0x416>
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a17c:	d011      	beq.n	800a1a2 <HAL_TIM_PWM_Start_DMA+0x416>
      {
        __HAL_TIM_ENABLE(htim);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f042 0201 	orr.w	r2, r2, #1
 800a18c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a18e:	e008      	b.n	800a1a2 <HAL_TIM_PWM_Start_DMA+0x416>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f042 0201 	orr.w	r2, r2, #1
 800a19e:	601a      	str	r2, [r3, #0]
 800a1a0:	e000      	b.n	800a1a4 <HAL_TIM_PWM_Start_DMA+0x418>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1a2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800a1a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3718      	adds	r7, #24
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	bf00      	nop
 800a1b0:	0800a96f 	.word	0x0800a96f
 800a1b4:	0800aa17 	.word	0x0800aa17
 800a1b8:	0800a8dd 	.word	0x0800a8dd
 800a1bc:	40012c00 	.word	0x40012c00
 800a1c0:	40013400 	.word	0x40013400
 800a1c4:	40014000 	.word	0x40014000
 800a1c8:	40014400 	.word	0x40014400
 800a1cc:	40014800 	.word	0x40014800
 800a1d0:	40015000 	.word	0x40015000
 800a1d4:	40000400 	.word	0x40000400
 800a1d8:	40000800 	.word	0x40000800
 800a1dc:	40000c00 	.word	0x40000c00
 800a1e0:	00010007 	.word	0x00010007

0800a1e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b086      	sub	sp, #24
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d101      	bne.n	800a1f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	e097      	b.n	800a328 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a1fe:	b2db      	uxtb	r3, r3
 800a200:	2b00      	cmp	r3, #0
 800a202:	d106      	bne.n	800a212 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2200      	movs	r2, #0
 800a208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f7f8 fd49 	bl	8002ca4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2202      	movs	r2, #2
 800a216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	6812      	ldr	r2, [r2, #0]
 800a224:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800a228:	f023 0307 	bic.w	r3, r3, #7
 800a22c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	3304      	adds	r3, #4
 800a236:	4619      	mov	r1, r3
 800a238:	4610      	mov	r0, r2
 800a23a:	f000 fc21 	bl	800aa80 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	699b      	ldr	r3, [r3, #24]
 800a24c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	6a1b      	ldr	r3, [r3, #32]
 800a254:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	697a      	ldr	r2, [r7, #20]
 800a25c:	4313      	orrs	r3, r2
 800a25e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a266:	f023 0303 	bic.w	r3, r3, #3
 800a26a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	689a      	ldr	r2, [r3, #8]
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	699b      	ldr	r3, [r3, #24]
 800a274:	021b      	lsls	r3, r3, #8
 800a276:	4313      	orrs	r3, r2
 800a278:	693a      	ldr	r2, [r7, #16]
 800a27a:	4313      	orrs	r3, r2
 800a27c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800a284:	f023 030c 	bic.w	r3, r3, #12
 800a288:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a290:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a294:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	68da      	ldr	r2, [r3, #12]
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	69db      	ldr	r3, [r3, #28]
 800a29e:	021b      	lsls	r3, r3, #8
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	693a      	ldr	r2, [r7, #16]
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	691b      	ldr	r3, [r3, #16]
 800a2ac:	011a      	lsls	r2, r3, #4
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	6a1b      	ldr	r3, [r3, #32]
 800a2b2:	031b      	lsls	r3, r3, #12
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	693a      	ldr	r2, [r7, #16]
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800a2c2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800a2ca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	685a      	ldr	r2, [r3, #4]
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	695b      	ldr	r3, [r3, #20]
 800a2d4:	011b      	lsls	r3, r3, #4
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	68fa      	ldr	r2, [r7, #12]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	697a      	ldr	r2, [r7, #20]
 800a2e4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	693a      	ldr	r2, [r7, #16]
 800a2ec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	68fa      	ldr	r2, [r7, #12]
 800a2f4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2201      	movs	r2, #1
 800a302:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2201      	movs	r2, #1
 800a30a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2201      	movs	r2, #1
 800a312:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2201      	movs	r2, #1
 800a31a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2201      	movs	r2, #1
 800a322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a326:	2300      	movs	r3, #0
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3718      	adds	r7, #24
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a340:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a348:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a350:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a358:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d110      	bne.n	800a382 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a360:	7bfb      	ldrb	r3, [r7, #15]
 800a362:	2b01      	cmp	r3, #1
 800a364:	d102      	bne.n	800a36c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a366:	7b7b      	ldrb	r3, [r7, #13]
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d001      	beq.n	800a370 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a36c:	2301      	movs	r3, #1
 800a36e:	e069      	b.n	800a444 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2202      	movs	r2, #2
 800a374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2202      	movs	r2, #2
 800a37c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a380:	e031      	b.n	800a3e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	2b04      	cmp	r3, #4
 800a386:	d110      	bne.n	800a3aa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a388:	7bbb      	ldrb	r3, [r7, #14]
 800a38a:	2b01      	cmp	r3, #1
 800a38c:	d102      	bne.n	800a394 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a38e:	7b3b      	ldrb	r3, [r7, #12]
 800a390:	2b01      	cmp	r3, #1
 800a392:	d001      	beq.n	800a398 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a394:	2301      	movs	r3, #1
 800a396:	e055      	b.n	800a444 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2202      	movs	r2, #2
 800a39c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2202      	movs	r2, #2
 800a3a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a3a8:	e01d      	b.n	800a3e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a3aa:	7bfb      	ldrb	r3, [r7, #15]
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d108      	bne.n	800a3c2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a3b0:	7bbb      	ldrb	r3, [r7, #14]
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d105      	bne.n	800a3c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a3b6:	7b7b      	ldrb	r3, [r7, #13]
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d102      	bne.n	800a3c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a3bc:	7b3b      	ldrb	r3, [r7, #12]
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d001      	beq.n	800a3c6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e03e      	b.n	800a444 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2202      	movs	r2, #2
 800a3ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2202      	movs	r2, #2
 800a3d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2202      	movs	r2, #2
 800a3da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2202      	movs	r2, #2
 800a3e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d003      	beq.n	800a3f4 <HAL_TIM_Encoder_Start+0xc4>
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	2b04      	cmp	r3, #4
 800a3f0:	d008      	beq.n	800a404 <HAL_TIM_Encoder_Start+0xd4>
 800a3f2:	e00f      	b.n	800a414 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	2100      	movs	r1, #0
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f000 ffb9 	bl	800b374 <TIM_CCxChannelCmd>
      break;
 800a402:	e016      	b.n	800a432 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	2201      	movs	r2, #1
 800a40a:	2104      	movs	r1, #4
 800a40c:	4618      	mov	r0, r3
 800a40e:	f000 ffb1 	bl	800b374 <TIM_CCxChannelCmd>
      break;
 800a412:	e00e      	b.n	800a432 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	2201      	movs	r2, #1
 800a41a:	2100      	movs	r1, #0
 800a41c:	4618      	mov	r0, r3
 800a41e:	f000 ffa9 	bl	800b374 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	2201      	movs	r2, #1
 800a428:	2104      	movs	r1, #4
 800a42a:	4618      	mov	r0, r3
 800a42c:	f000 ffa2 	bl	800b374 <TIM_CCxChannelCmd>
      break;
 800a430:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f042 0201 	orr.w	r2, r2, #1
 800a440:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a442:	2300      	movs	r3, #0
}
 800a444:	4618      	mov	r0, r3
 800a446:	3710      	adds	r7, #16
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b086      	sub	sp, #24
 800a450:	af00      	add	r7, sp, #0
 800a452:	60f8      	str	r0, [r7, #12]
 800a454:	60b9      	str	r1, [r7, #8]
 800a456:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a458:	2300      	movs	r3, #0
 800a45a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a462:	2b01      	cmp	r3, #1
 800a464:	d101      	bne.n	800a46a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a466:	2302      	movs	r3, #2
 800a468:	e0ff      	b.n	800a66a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2201      	movs	r2, #1
 800a46e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2b14      	cmp	r3, #20
 800a476:	f200 80f0 	bhi.w	800a65a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a47a:	a201      	add	r2, pc, #4	@ (adr r2, 800a480 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a480:	0800a4d5 	.word	0x0800a4d5
 800a484:	0800a65b 	.word	0x0800a65b
 800a488:	0800a65b 	.word	0x0800a65b
 800a48c:	0800a65b 	.word	0x0800a65b
 800a490:	0800a515 	.word	0x0800a515
 800a494:	0800a65b 	.word	0x0800a65b
 800a498:	0800a65b 	.word	0x0800a65b
 800a49c:	0800a65b 	.word	0x0800a65b
 800a4a0:	0800a557 	.word	0x0800a557
 800a4a4:	0800a65b 	.word	0x0800a65b
 800a4a8:	0800a65b 	.word	0x0800a65b
 800a4ac:	0800a65b 	.word	0x0800a65b
 800a4b0:	0800a597 	.word	0x0800a597
 800a4b4:	0800a65b 	.word	0x0800a65b
 800a4b8:	0800a65b 	.word	0x0800a65b
 800a4bc:	0800a65b 	.word	0x0800a65b
 800a4c0:	0800a5d9 	.word	0x0800a5d9
 800a4c4:	0800a65b 	.word	0x0800a65b
 800a4c8:	0800a65b 	.word	0x0800a65b
 800a4cc:	0800a65b 	.word	0x0800a65b
 800a4d0:	0800a619 	.word	0x0800a619
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	68b9      	ldr	r1, [r7, #8]
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f000 fb84 	bl	800abe8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	699a      	ldr	r2, [r3, #24]
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f042 0208 	orr.w	r2, r2, #8
 800a4ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	699a      	ldr	r2, [r3, #24]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f022 0204 	bic.w	r2, r2, #4
 800a4fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	6999      	ldr	r1, [r3, #24]
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	691a      	ldr	r2, [r3, #16]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	430a      	orrs	r2, r1
 800a510:	619a      	str	r2, [r3, #24]
      break;
 800a512:	e0a5      	b.n	800a660 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	68b9      	ldr	r1, [r7, #8]
 800a51a:	4618      	mov	r0, r3
 800a51c:	f000 fbfe 	bl	800ad1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	699a      	ldr	r2, [r3, #24]
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a52e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	699a      	ldr	r2, [r3, #24]
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a53e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	6999      	ldr	r1, [r3, #24]
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	691b      	ldr	r3, [r3, #16]
 800a54a:	021a      	lsls	r2, r3, #8
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	430a      	orrs	r2, r1
 800a552:	619a      	str	r2, [r3, #24]
      break;
 800a554:	e084      	b.n	800a660 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	68b9      	ldr	r1, [r7, #8]
 800a55c:	4618      	mov	r0, r3
 800a55e:	f000 fc71 	bl	800ae44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	69da      	ldr	r2, [r3, #28]
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f042 0208 	orr.w	r2, r2, #8
 800a570:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	69da      	ldr	r2, [r3, #28]
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f022 0204 	bic.w	r2, r2, #4
 800a580:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	69d9      	ldr	r1, [r3, #28]
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	691a      	ldr	r2, [r3, #16]
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	430a      	orrs	r2, r1
 800a592:	61da      	str	r2, [r3, #28]
      break;
 800a594:	e064      	b.n	800a660 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	68b9      	ldr	r1, [r7, #8]
 800a59c:	4618      	mov	r0, r3
 800a59e:	f000 fce3 	bl	800af68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	69da      	ldr	r2, [r3, #28]
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a5b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	69da      	ldr	r2, [r3, #28]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a5c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	69d9      	ldr	r1, [r3, #28]
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	691b      	ldr	r3, [r3, #16]
 800a5cc:	021a      	lsls	r2, r3, #8
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	430a      	orrs	r2, r1
 800a5d4:	61da      	str	r2, [r3, #28]
      break;
 800a5d6:	e043      	b.n	800a660 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	68b9      	ldr	r1, [r7, #8]
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f000 fd56 	bl	800b090 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f042 0208 	orr.w	r2, r2, #8
 800a5f2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f022 0204 	bic.w	r2, r2, #4
 800a602:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	691a      	ldr	r2, [r3, #16]
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	430a      	orrs	r2, r1
 800a614:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a616:	e023      	b.n	800a660 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	68b9      	ldr	r1, [r7, #8]
 800a61e:	4618      	mov	r0, r3
 800a620:	f000 fda0 	bl	800b164 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a632:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a642:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	691b      	ldr	r3, [r3, #16]
 800a64e:	021a      	lsls	r2, r3, #8
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	430a      	orrs	r2, r1
 800a656:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a658:	e002      	b.n	800a660 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a65a:	2301      	movs	r3, #1
 800a65c:	75fb      	strb	r3, [r7, #23]
      break;
 800a65e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2200      	movs	r2, #0
 800a664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a668:	7dfb      	ldrb	r3, [r7, #23]
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3718      	adds	r7, #24
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop

0800a674 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a67e:	2300      	movs	r3, #0
 800a680:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d101      	bne.n	800a690 <HAL_TIM_ConfigClockSource+0x1c>
 800a68c:	2302      	movs	r3, #2
 800a68e:	e0f6      	b.n	800a87e <HAL_TIM_ConfigClockSource+0x20a>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2201      	movs	r2, #1
 800a694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2202      	movs	r2, #2
 800a69c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	689b      	ldr	r3, [r3, #8]
 800a6a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a6ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a6b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a6ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	68ba      	ldr	r2, [r7, #8]
 800a6c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4a6f      	ldr	r2, [pc, #444]	@ (800a888 <HAL_TIM_ConfigClockSource+0x214>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	f000 80c1 	beq.w	800a852 <HAL_TIM_ConfigClockSource+0x1de>
 800a6d0:	4a6d      	ldr	r2, [pc, #436]	@ (800a888 <HAL_TIM_ConfigClockSource+0x214>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	f200 80c6 	bhi.w	800a864 <HAL_TIM_ConfigClockSource+0x1f0>
 800a6d8:	4a6c      	ldr	r2, [pc, #432]	@ (800a88c <HAL_TIM_ConfigClockSource+0x218>)
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	f000 80b9 	beq.w	800a852 <HAL_TIM_ConfigClockSource+0x1de>
 800a6e0:	4a6a      	ldr	r2, [pc, #424]	@ (800a88c <HAL_TIM_ConfigClockSource+0x218>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	f200 80be 	bhi.w	800a864 <HAL_TIM_ConfigClockSource+0x1f0>
 800a6e8:	4a69      	ldr	r2, [pc, #420]	@ (800a890 <HAL_TIM_ConfigClockSource+0x21c>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	f000 80b1 	beq.w	800a852 <HAL_TIM_ConfigClockSource+0x1de>
 800a6f0:	4a67      	ldr	r2, [pc, #412]	@ (800a890 <HAL_TIM_ConfigClockSource+0x21c>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	f200 80b6 	bhi.w	800a864 <HAL_TIM_ConfigClockSource+0x1f0>
 800a6f8:	4a66      	ldr	r2, [pc, #408]	@ (800a894 <HAL_TIM_ConfigClockSource+0x220>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	f000 80a9 	beq.w	800a852 <HAL_TIM_ConfigClockSource+0x1de>
 800a700:	4a64      	ldr	r2, [pc, #400]	@ (800a894 <HAL_TIM_ConfigClockSource+0x220>)
 800a702:	4293      	cmp	r3, r2
 800a704:	f200 80ae 	bhi.w	800a864 <HAL_TIM_ConfigClockSource+0x1f0>
 800a708:	4a63      	ldr	r2, [pc, #396]	@ (800a898 <HAL_TIM_ConfigClockSource+0x224>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	f000 80a1 	beq.w	800a852 <HAL_TIM_ConfigClockSource+0x1de>
 800a710:	4a61      	ldr	r2, [pc, #388]	@ (800a898 <HAL_TIM_ConfigClockSource+0x224>)
 800a712:	4293      	cmp	r3, r2
 800a714:	f200 80a6 	bhi.w	800a864 <HAL_TIM_ConfigClockSource+0x1f0>
 800a718:	4a60      	ldr	r2, [pc, #384]	@ (800a89c <HAL_TIM_ConfigClockSource+0x228>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	f000 8099 	beq.w	800a852 <HAL_TIM_ConfigClockSource+0x1de>
 800a720:	4a5e      	ldr	r2, [pc, #376]	@ (800a89c <HAL_TIM_ConfigClockSource+0x228>)
 800a722:	4293      	cmp	r3, r2
 800a724:	f200 809e 	bhi.w	800a864 <HAL_TIM_ConfigClockSource+0x1f0>
 800a728:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a72c:	f000 8091 	beq.w	800a852 <HAL_TIM_ConfigClockSource+0x1de>
 800a730:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a734:	f200 8096 	bhi.w	800a864 <HAL_TIM_ConfigClockSource+0x1f0>
 800a738:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a73c:	f000 8089 	beq.w	800a852 <HAL_TIM_ConfigClockSource+0x1de>
 800a740:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a744:	f200 808e 	bhi.w	800a864 <HAL_TIM_ConfigClockSource+0x1f0>
 800a748:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a74c:	d03e      	beq.n	800a7cc <HAL_TIM_ConfigClockSource+0x158>
 800a74e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a752:	f200 8087 	bhi.w	800a864 <HAL_TIM_ConfigClockSource+0x1f0>
 800a756:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a75a:	f000 8086 	beq.w	800a86a <HAL_TIM_ConfigClockSource+0x1f6>
 800a75e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a762:	d87f      	bhi.n	800a864 <HAL_TIM_ConfigClockSource+0x1f0>
 800a764:	2b70      	cmp	r3, #112	@ 0x70
 800a766:	d01a      	beq.n	800a79e <HAL_TIM_ConfigClockSource+0x12a>
 800a768:	2b70      	cmp	r3, #112	@ 0x70
 800a76a:	d87b      	bhi.n	800a864 <HAL_TIM_ConfigClockSource+0x1f0>
 800a76c:	2b60      	cmp	r3, #96	@ 0x60
 800a76e:	d050      	beq.n	800a812 <HAL_TIM_ConfigClockSource+0x19e>
 800a770:	2b60      	cmp	r3, #96	@ 0x60
 800a772:	d877      	bhi.n	800a864 <HAL_TIM_ConfigClockSource+0x1f0>
 800a774:	2b50      	cmp	r3, #80	@ 0x50
 800a776:	d03c      	beq.n	800a7f2 <HAL_TIM_ConfigClockSource+0x17e>
 800a778:	2b50      	cmp	r3, #80	@ 0x50
 800a77a:	d873      	bhi.n	800a864 <HAL_TIM_ConfigClockSource+0x1f0>
 800a77c:	2b40      	cmp	r3, #64	@ 0x40
 800a77e:	d058      	beq.n	800a832 <HAL_TIM_ConfigClockSource+0x1be>
 800a780:	2b40      	cmp	r3, #64	@ 0x40
 800a782:	d86f      	bhi.n	800a864 <HAL_TIM_ConfigClockSource+0x1f0>
 800a784:	2b30      	cmp	r3, #48	@ 0x30
 800a786:	d064      	beq.n	800a852 <HAL_TIM_ConfigClockSource+0x1de>
 800a788:	2b30      	cmp	r3, #48	@ 0x30
 800a78a:	d86b      	bhi.n	800a864 <HAL_TIM_ConfigClockSource+0x1f0>
 800a78c:	2b20      	cmp	r3, #32
 800a78e:	d060      	beq.n	800a852 <HAL_TIM_ConfigClockSource+0x1de>
 800a790:	2b20      	cmp	r3, #32
 800a792:	d867      	bhi.n	800a864 <HAL_TIM_ConfigClockSource+0x1f0>
 800a794:	2b00      	cmp	r3, #0
 800a796:	d05c      	beq.n	800a852 <HAL_TIM_ConfigClockSource+0x1de>
 800a798:	2b10      	cmp	r3, #16
 800a79a:	d05a      	beq.n	800a852 <HAL_TIM_ConfigClockSource+0x1de>
 800a79c:	e062      	b.n	800a864 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a7ae:	f000 fdc1 	bl	800b334 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	689b      	ldr	r3, [r3, #8]
 800a7b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a7c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	68ba      	ldr	r2, [r7, #8]
 800a7c8:	609a      	str	r2, [r3, #8]
      break;
 800a7ca:	e04f      	b.n	800a86c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a7dc:	f000 fdaa 	bl	800b334 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	689a      	ldr	r2, [r3, #8]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a7ee:	609a      	str	r2, [r3, #8]
      break;
 800a7f0:	e03c      	b.n	800a86c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7fe:	461a      	mov	r2, r3
 800a800:	f000 fd1c 	bl	800b23c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	2150      	movs	r1, #80	@ 0x50
 800a80a:	4618      	mov	r0, r3
 800a80c:	f000 fd75 	bl	800b2fa <TIM_ITRx_SetConfig>
      break;
 800a810:	e02c      	b.n	800a86c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a81e:	461a      	mov	r2, r3
 800a820:	f000 fd3b 	bl	800b29a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	2160      	movs	r1, #96	@ 0x60
 800a82a:	4618      	mov	r0, r3
 800a82c:	f000 fd65 	bl	800b2fa <TIM_ITRx_SetConfig>
      break;
 800a830:	e01c      	b.n	800a86c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a83e:	461a      	mov	r2, r3
 800a840:	f000 fcfc 	bl	800b23c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	2140      	movs	r1, #64	@ 0x40
 800a84a:	4618      	mov	r0, r3
 800a84c:	f000 fd55 	bl	800b2fa <TIM_ITRx_SetConfig>
      break;
 800a850:	e00c      	b.n	800a86c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681a      	ldr	r2, [r3, #0]
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4619      	mov	r1, r3
 800a85c:	4610      	mov	r0, r2
 800a85e:	f000 fd4c 	bl	800b2fa <TIM_ITRx_SetConfig>
      break;
 800a862:	e003      	b.n	800a86c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800a864:	2301      	movs	r3, #1
 800a866:	73fb      	strb	r3, [r7, #15]
      break;
 800a868:	e000      	b.n	800a86c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800a86a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2201      	movs	r2, #1
 800a870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2200      	movs	r2, #0
 800a878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a87c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3710      	adds	r7, #16
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	00100070 	.word	0x00100070
 800a88c:	00100060 	.word	0x00100060
 800a890:	00100050 	.word	0x00100050
 800a894:	00100040 	.word	0x00100040
 800a898:	00100030 	.word	0x00100030
 800a89c:	00100020 	.word	0x00100020

0800a8a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b083      	sub	sp, #12
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a8a8:	bf00      	nop
 800a8aa:	370c      	adds	r7, #12
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr

0800a8b4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b083      	sub	sp, #12
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a8bc:	bf00      	nop
 800a8be:	370c      	adds	r7, #12
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr

0800a8c8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b083      	sub	sp, #12
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a8d0:	bf00      	nop
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr

0800a8dc <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8e8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d107      	bne.n	800a904 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a902:	e02a      	b.n	800a95a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d107      	bne.n	800a91e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2202      	movs	r2, #2
 800a912:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2201      	movs	r2, #1
 800a918:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a91c:	e01d      	b.n	800a95a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	429a      	cmp	r2, r3
 800a926:	d107      	bne.n	800a938 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2204      	movs	r2, #4
 800a92c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2201      	movs	r2, #1
 800a932:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a936:	e010      	b.n	800a95a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	429a      	cmp	r2, r3
 800a940:	d107      	bne.n	800a952 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2208      	movs	r2, #8
 800a946:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2201      	movs	r2, #1
 800a94c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a950:	e003      	b.n	800a95a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2201      	movs	r2, #1
 800a956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800a95a:	68f8      	ldr	r0, [r7, #12]
 800a95c:	f7ff ffb4 	bl	800a8c8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2200      	movs	r2, #0
 800a964:	771a      	strb	r2, [r3, #28]
}
 800a966:	bf00      	nop
 800a968:	3710      	adds	r7, #16
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}

0800a96e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800a96e:	b580      	push	{r7, lr}
 800a970:	b084      	sub	sp, #16
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a97a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a980:	687a      	ldr	r2, [r7, #4]
 800a982:	429a      	cmp	r2, r3
 800a984:	d10b      	bne.n	800a99e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2201      	movs	r2, #1
 800a98a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	69db      	ldr	r3, [r3, #28]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d136      	bne.n	800aa02 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2201      	movs	r2, #1
 800a998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a99c:	e031      	b.n	800aa02 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9a2:	687a      	ldr	r2, [r7, #4]
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d10b      	bne.n	800a9c0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	2202      	movs	r2, #2
 800a9ac:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	69db      	ldr	r3, [r3, #28]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d125      	bne.n	800aa02 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a9be:	e020      	b.n	800aa02 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d10b      	bne.n	800a9e2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2204      	movs	r2, #4
 800a9ce:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	69db      	ldr	r3, [r3, #28]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d114      	bne.n	800aa02 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2201      	movs	r2, #1
 800a9dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a9e0:	e00f      	b.n	800aa02 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d10a      	bne.n	800aa02 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2208      	movs	r2, #8
 800a9f0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	69db      	ldr	r3, [r3, #28]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d103      	bne.n	800aa02 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa02:	68f8      	ldr	r0, [r7, #12]
 800aa04:	f7ff ff4c 	bl	800a8a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	771a      	strb	r2, [r3, #28]
}
 800aa0e:	bf00      	nop
 800aa10:	3710      	adds	r7, #16
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}

0800aa16 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aa16:	b580      	push	{r7, lr}
 800aa18:	b084      	sub	sp, #16
 800aa1a:	af00      	add	r7, sp, #0
 800aa1c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa22:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d103      	bne.n	800aa36 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2201      	movs	r2, #1
 800aa32:	771a      	strb	r2, [r3, #28]
 800aa34:	e019      	b.n	800aa6a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa3a:	687a      	ldr	r2, [r7, #4]
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	d103      	bne.n	800aa48 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2202      	movs	r2, #2
 800aa44:	771a      	strb	r2, [r3, #28]
 800aa46:	e010      	b.n	800aa6a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa4c:	687a      	ldr	r2, [r7, #4]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d103      	bne.n	800aa5a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2204      	movs	r2, #4
 800aa56:	771a      	strb	r2, [r3, #28]
 800aa58:	e007      	b.n	800aa6a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d102      	bne.n	800aa6a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2208      	movs	r2, #8
 800aa68:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800aa6a:	68f8      	ldr	r0, [r7, #12]
 800aa6c:	f7ff ff22 	bl	800a8b4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2200      	movs	r2, #0
 800aa74:	771a      	strb	r2, [r3, #28]
}
 800aa76:	bf00      	nop
 800aa78:	3710      	adds	r7, #16
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
	...

0800aa80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b085      	sub	sp, #20
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	4a4c      	ldr	r2, [pc, #304]	@ (800abc4 <TIM_Base_SetConfig+0x144>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d017      	beq.n	800aac8 <TIM_Base_SetConfig+0x48>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa9e:	d013      	beq.n	800aac8 <TIM_Base_SetConfig+0x48>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	4a49      	ldr	r2, [pc, #292]	@ (800abc8 <TIM_Base_SetConfig+0x148>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d00f      	beq.n	800aac8 <TIM_Base_SetConfig+0x48>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	4a48      	ldr	r2, [pc, #288]	@ (800abcc <TIM_Base_SetConfig+0x14c>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d00b      	beq.n	800aac8 <TIM_Base_SetConfig+0x48>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	4a47      	ldr	r2, [pc, #284]	@ (800abd0 <TIM_Base_SetConfig+0x150>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d007      	beq.n	800aac8 <TIM_Base_SetConfig+0x48>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	4a46      	ldr	r2, [pc, #280]	@ (800abd4 <TIM_Base_SetConfig+0x154>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d003      	beq.n	800aac8 <TIM_Base_SetConfig+0x48>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	4a45      	ldr	r2, [pc, #276]	@ (800abd8 <TIM_Base_SetConfig+0x158>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d108      	bne.n	800aada <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aace:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	68fa      	ldr	r2, [r7, #12]
 800aad6:	4313      	orrs	r3, r2
 800aad8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	4a39      	ldr	r2, [pc, #228]	@ (800abc4 <TIM_Base_SetConfig+0x144>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d023      	beq.n	800ab2a <TIM_Base_SetConfig+0xaa>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aae8:	d01f      	beq.n	800ab2a <TIM_Base_SetConfig+0xaa>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	4a36      	ldr	r2, [pc, #216]	@ (800abc8 <TIM_Base_SetConfig+0x148>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d01b      	beq.n	800ab2a <TIM_Base_SetConfig+0xaa>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	4a35      	ldr	r2, [pc, #212]	@ (800abcc <TIM_Base_SetConfig+0x14c>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d017      	beq.n	800ab2a <TIM_Base_SetConfig+0xaa>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	4a34      	ldr	r2, [pc, #208]	@ (800abd0 <TIM_Base_SetConfig+0x150>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d013      	beq.n	800ab2a <TIM_Base_SetConfig+0xaa>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	4a33      	ldr	r2, [pc, #204]	@ (800abd4 <TIM_Base_SetConfig+0x154>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d00f      	beq.n	800ab2a <TIM_Base_SetConfig+0xaa>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	4a33      	ldr	r2, [pc, #204]	@ (800abdc <TIM_Base_SetConfig+0x15c>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d00b      	beq.n	800ab2a <TIM_Base_SetConfig+0xaa>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	4a32      	ldr	r2, [pc, #200]	@ (800abe0 <TIM_Base_SetConfig+0x160>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d007      	beq.n	800ab2a <TIM_Base_SetConfig+0xaa>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	4a31      	ldr	r2, [pc, #196]	@ (800abe4 <TIM_Base_SetConfig+0x164>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d003      	beq.n	800ab2a <TIM_Base_SetConfig+0xaa>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	4a2c      	ldr	r2, [pc, #176]	@ (800abd8 <TIM_Base_SetConfig+0x158>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d108      	bne.n	800ab3c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	68db      	ldr	r3, [r3, #12]
 800ab36:	68fa      	ldr	r2, [r7, #12]
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	695b      	ldr	r3, [r3, #20]
 800ab46:	4313      	orrs	r3, r2
 800ab48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	68fa      	ldr	r2, [r7, #12]
 800ab4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	689a      	ldr	r2, [r3, #8]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	681a      	ldr	r2, [r3, #0]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	4a18      	ldr	r2, [pc, #96]	@ (800abc4 <TIM_Base_SetConfig+0x144>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d013      	beq.n	800ab90 <TIM_Base_SetConfig+0x110>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	4a1a      	ldr	r2, [pc, #104]	@ (800abd4 <TIM_Base_SetConfig+0x154>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d00f      	beq.n	800ab90 <TIM_Base_SetConfig+0x110>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	4a1a      	ldr	r2, [pc, #104]	@ (800abdc <TIM_Base_SetConfig+0x15c>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d00b      	beq.n	800ab90 <TIM_Base_SetConfig+0x110>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	4a19      	ldr	r2, [pc, #100]	@ (800abe0 <TIM_Base_SetConfig+0x160>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d007      	beq.n	800ab90 <TIM_Base_SetConfig+0x110>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	4a18      	ldr	r2, [pc, #96]	@ (800abe4 <TIM_Base_SetConfig+0x164>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d003      	beq.n	800ab90 <TIM_Base_SetConfig+0x110>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	4a13      	ldr	r2, [pc, #76]	@ (800abd8 <TIM_Base_SetConfig+0x158>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d103      	bne.n	800ab98 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	691a      	ldr	r2, [r3, #16]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	691b      	ldr	r3, [r3, #16]
 800aba2:	f003 0301 	and.w	r3, r3, #1
 800aba6:	2b01      	cmp	r3, #1
 800aba8:	d105      	bne.n	800abb6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	691b      	ldr	r3, [r3, #16]
 800abae:	f023 0201 	bic.w	r2, r3, #1
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	611a      	str	r2, [r3, #16]
  }
}
 800abb6:	bf00      	nop
 800abb8:	3714      	adds	r7, #20
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr
 800abc2:	bf00      	nop
 800abc4:	40012c00 	.word	0x40012c00
 800abc8:	40000400 	.word	0x40000400
 800abcc:	40000800 	.word	0x40000800
 800abd0:	40000c00 	.word	0x40000c00
 800abd4:	40013400 	.word	0x40013400
 800abd8:	40015000 	.word	0x40015000
 800abdc:	40014000 	.word	0x40014000
 800abe0:	40014400 	.word	0x40014400
 800abe4:	40014800 	.word	0x40014800

0800abe8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800abe8:	b480      	push	{r7}
 800abea:	b087      	sub	sp, #28
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6a1b      	ldr	r3, [r3, #32]
 800abf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6a1b      	ldr	r3, [r3, #32]
 800abfc:	f023 0201 	bic.w	r2, r3, #1
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	699b      	ldr	r3, [r3, #24]
 800ac0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ac16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f023 0303 	bic.w	r3, r3, #3
 800ac22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	68fa      	ldr	r2, [r7, #12]
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	f023 0302 	bic.w	r3, r3, #2
 800ac34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	689b      	ldr	r3, [r3, #8]
 800ac3a:	697a      	ldr	r2, [r7, #20]
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	4a30      	ldr	r2, [pc, #192]	@ (800ad04 <TIM_OC1_SetConfig+0x11c>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d013      	beq.n	800ac70 <TIM_OC1_SetConfig+0x88>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	4a2f      	ldr	r2, [pc, #188]	@ (800ad08 <TIM_OC1_SetConfig+0x120>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d00f      	beq.n	800ac70 <TIM_OC1_SetConfig+0x88>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	4a2e      	ldr	r2, [pc, #184]	@ (800ad0c <TIM_OC1_SetConfig+0x124>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d00b      	beq.n	800ac70 <TIM_OC1_SetConfig+0x88>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	4a2d      	ldr	r2, [pc, #180]	@ (800ad10 <TIM_OC1_SetConfig+0x128>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d007      	beq.n	800ac70 <TIM_OC1_SetConfig+0x88>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	4a2c      	ldr	r2, [pc, #176]	@ (800ad14 <TIM_OC1_SetConfig+0x12c>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d003      	beq.n	800ac70 <TIM_OC1_SetConfig+0x88>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	4a2b      	ldr	r2, [pc, #172]	@ (800ad18 <TIM_OC1_SetConfig+0x130>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d10c      	bne.n	800ac8a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	f023 0308 	bic.w	r3, r3, #8
 800ac76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	68db      	ldr	r3, [r3, #12]
 800ac7c:	697a      	ldr	r2, [r7, #20]
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	f023 0304 	bic.w	r3, r3, #4
 800ac88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	4a1d      	ldr	r2, [pc, #116]	@ (800ad04 <TIM_OC1_SetConfig+0x11c>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d013      	beq.n	800acba <TIM_OC1_SetConfig+0xd2>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	4a1c      	ldr	r2, [pc, #112]	@ (800ad08 <TIM_OC1_SetConfig+0x120>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d00f      	beq.n	800acba <TIM_OC1_SetConfig+0xd2>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	4a1b      	ldr	r2, [pc, #108]	@ (800ad0c <TIM_OC1_SetConfig+0x124>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d00b      	beq.n	800acba <TIM_OC1_SetConfig+0xd2>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	4a1a      	ldr	r2, [pc, #104]	@ (800ad10 <TIM_OC1_SetConfig+0x128>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d007      	beq.n	800acba <TIM_OC1_SetConfig+0xd2>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	4a19      	ldr	r2, [pc, #100]	@ (800ad14 <TIM_OC1_SetConfig+0x12c>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d003      	beq.n	800acba <TIM_OC1_SetConfig+0xd2>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	4a18      	ldr	r2, [pc, #96]	@ (800ad18 <TIM_OC1_SetConfig+0x130>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d111      	bne.n	800acde <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800acc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800acc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	695b      	ldr	r3, [r3, #20]
 800acce:	693a      	ldr	r2, [r7, #16]
 800acd0:	4313      	orrs	r3, r2
 800acd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	699b      	ldr	r3, [r3, #24]
 800acd8:	693a      	ldr	r2, [r7, #16]
 800acda:	4313      	orrs	r3, r2
 800acdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	693a      	ldr	r2, [r7, #16]
 800ace2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	68fa      	ldr	r2, [r7, #12]
 800ace8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	685a      	ldr	r2, [r3, #4]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	697a      	ldr	r2, [r7, #20]
 800acf6:	621a      	str	r2, [r3, #32]
}
 800acf8:	bf00      	nop
 800acfa:	371c      	adds	r7, #28
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr
 800ad04:	40012c00 	.word	0x40012c00
 800ad08:	40013400 	.word	0x40013400
 800ad0c:	40014000 	.word	0x40014000
 800ad10:	40014400 	.word	0x40014400
 800ad14:	40014800 	.word	0x40014800
 800ad18:	40015000 	.word	0x40015000

0800ad1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b087      	sub	sp, #28
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6a1b      	ldr	r3, [r3, #32]
 800ad2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6a1b      	ldr	r3, [r3, #32]
 800ad30:	f023 0210 	bic.w	r2, r3, #16
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	699b      	ldr	r3, [r3, #24]
 800ad42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ad4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ad56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	021b      	lsls	r3, r3, #8
 800ad5e:	68fa      	ldr	r2, [r7, #12]
 800ad60:	4313      	orrs	r3, r2
 800ad62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	f023 0320 	bic.w	r3, r3, #32
 800ad6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	689b      	ldr	r3, [r3, #8]
 800ad70:	011b      	lsls	r3, r3, #4
 800ad72:	697a      	ldr	r2, [r7, #20]
 800ad74:	4313      	orrs	r3, r2
 800ad76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	4a2c      	ldr	r2, [pc, #176]	@ (800ae2c <TIM_OC2_SetConfig+0x110>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d007      	beq.n	800ad90 <TIM_OC2_SetConfig+0x74>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	4a2b      	ldr	r2, [pc, #172]	@ (800ae30 <TIM_OC2_SetConfig+0x114>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d003      	beq.n	800ad90 <TIM_OC2_SetConfig+0x74>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	4a2a      	ldr	r2, [pc, #168]	@ (800ae34 <TIM_OC2_SetConfig+0x118>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d10d      	bne.n	800adac <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	68db      	ldr	r3, [r3, #12]
 800ad9c:	011b      	lsls	r3, r3, #4
 800ad9e:	697a      	ldr	r2, [r7, #20]
 800ada0:	4313      	orrs	r3, r2
 800ada2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800adaa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	4a1f      	ldr	r2, [pc, #124]	@ (800ae2c <TIM_OC2_SetConfig+0x110>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d013      	beq.n	800addc <TIM_OC2_SetConfig+0xc0>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	4a1e      	ldr	r2, [pc, #120]	@ (800ae30 <TIM_OC2_SetConfig+0x114>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d00f      	beq.n	800addc <TIM_OC2_SetConfig+0xc0>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	4a1e      	ldr	r2, [pc, #120]	@ (800ae38 <TIM_OC2_SetConfig+0x11c>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d00b      	beq.n	800addc <TIM_OC2_SetConfig+0xc0>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	4a1d      	ldr	r2, [pc, #116]	@ (800ae3c <TIM_OC2_SetConfig+0x120>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d007      	beq.n	800addc <TIM_OC2_SetConfig+0xc0>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	4a1c      	ldr	r2, [pc, #112]	@ (800ae40 <TIM_OC2_SetConfig+0x124>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d003      	beq.n	800addc <TIM_OC2_SetConfig+0xc0>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	4a17      	ldr	r2, [pc, #92]	@ (800ae34 <TIM_OC2_SetConfig+0x118>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d113      	bne.n	800ae04 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ade2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800adea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	695b      	ldr	r3, [r3, #20]
 800adf0:	009b      	lsls	r3, r3, #2
 800adf2:	693a      	ldr	r2, [r7, #16]
 800adf4:	4313      	orrs	r3, r2
 800adf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	699b      	ldr	r3, [r3, #24]
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	693a      	ldr	r2, [r7, #16]
 800ae00:	4313      	orrs	r3, r2
 800ae02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	693a      	ldr	r2, [r7, #16]
 800ae08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	68fa      	ldr	r2, [r7, #12]
 800ae0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	685a      	ldr	r2, [r3, #4]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	697a      	ldr	r2, [r7, #20]
 800ae1c:	621a      	str	r2, [r3, #32]
}
 800ae1e:	bf00      	nop
 800ae20:	371c      	adds	r7, #28
 800ae22:	46bd      	mov	sp, r7
 800ae24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae28:	4770      	bx	lr
 800ae2a:	bf00      	nop
 800ae2c:	40012c00 	.word	0x40012c00
 800ae30:	40013400 	.word	0x40013400
 800ae34:	40015000 	.word	0x40015000
 800ae38:	40014000 	.word	0x40014000
 800ae3c:	40014400 	.word	0x40014400
 800ae40:	40014800 	.word	0x40014800

0800ae44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b087      	sub	sp, #28
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6a1b      	ldr	r3, [r3, #32]
 800ae52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6a1b      	ldr	r3, [r3, #32]
 800ae58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	69db      	ldr	r3, [r3, #28]
 800ae6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ae72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f023 0303 	bic.w	r3, r3, #3
 800ae7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	68fa      	ldr	r2, [r7, #12]
 800ae86:	4313      	orrs	r3, r2
 800ae88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ae90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	689b      	ldr	r3, [r3, #8]
 800ae96:	021b      	lsls	r3, r3, #8
 800ae98:	697a      	ldr	r2, [r7, #20]
 800ae9a:	4313      	orrs	r3, r2
 800ae9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	4a2b      	ldr	r2, [pc, #172]	@ (800af50 <TIM_OC3_SetConfig+0x10c>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d007      	beq.n	800aeb6 <TIM_OC3_SetConfig+0x72>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	4a2a      	ldr	r2, [pc, #168]	@ (800af54 <TIM_OC3_SetConfig+0x110>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d003      	beq.n	800aeb6 <TIM_OC3_SetConfig+0x72>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	4a29      	ldr	r2, [pc, #164]	@ (800af58 <TIM_OC3_SetConfig+0x114>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d10d      	bne.n	800aed2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800aebc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	68db      	ldr	r3, [r3, #12]
 800aec2:	021b      	lsls	r3, r3, #8
 800aec4:	697a      	ldr	r2, [r7, #20]
 800aec6:	4313      	orrs	r3, r2
 800aec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800aed0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	4a1e      	ldr	r2, [pc, #120]	@ (800af50 <TIM_OC3_SetConfig+0x10c>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d013      	beq.n	800af02 <TIM_OC3_SetConfig+0xbe>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	4a1d      	ldr	r2, [pc, #116]	@ (800af54 <TIM_OC3_SetConfig+0x110>)
 800aede:	4293      	cmp	r3, r2
 800aee0:	d00f      	beq.n	800af02 <TIM_OC3_SetConfig+0xbe>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	4a1d      	ldr	r2, [pc, #116]	@ (800af5c <TIM_OC3_SetConfig+0x118>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d00b      	beq.n	800af02 <TIM_OC3_SetConfig+0xbe>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	4a1c      	ldr	r2, [pc, #112]	@ (800af60 <TIM_OC3_SetConfig+0x11c>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d007      	beq.n	800af02 <TIM_OC3_SetConfig+0xbe>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	4a1b      	ldr	r2, [pc, #108]	@ (800af64 <TIM_OC3_SetConfig+0x120>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d003      	beq.n	800af02 <TIM_OC3_SetConfig+0xbe>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	4a16      	ldr	r2, [pc, #88]	@ (800af58 <TIM_OC3_SetConfig+0x114>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d113      	bne.n	800af2a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800af08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800af10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	695b      	ldr	r3, [r3, #20]
 800af16:	011b      	lsls	r3, r3, #4
 800af18:	693a      	ldr	r2, [r7, #16]
 800af1a:	4313      	orrs	r3, r2
 800af1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	699b      	ldr	r3, [r3, #24]
 800af22:	011b      	lsls	r3, r3, #4
 800af24:	693a      	ldr	r2, [r7, #16]
 800af26:	4313      	orrs	r3, r2
 800af28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	693a      	ldr	r2, [r7, #16]
 800af2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	68fa      	ldr	r2, [r7, #12]
 800af34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	685a      	ldr	r2, [r3, #4]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	697a      	ldr	r2, [r7, #20]
 800af42:	621a      	str	r2, [r3, #32]
}
 800af44:	bf00      	nop
 800af46:	371c      	adds	r7, #28
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr
 800af50:	40012c00 	.word	0x40012c00
 800af54:	40013400 	.word	0x40013400
 800af58:	40015000 	.word	0x40015000
 800af5c:	40014000 	.word	0x40014000
 800af60:	40014400 	.word	0x40014400
 800af64:	40014800 	.word	0x40014800

0800af68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800af68:	b480      	push	{r7}
 800af6a:	b087      	sub	sp, #28
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6a1b      	ldr	r3, [r3, #32]
 800af76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6a1b      	ldr	r3, [r3, #32]
 800af7c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	69db      	ldr	r3, [r3, #28]
 800af8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800af96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800afa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	021b      	lsls	r3, r3, #8
 800afaa:	68fa      	ldr	r2, [r7, #12]
 800afac:	4313      	orrs	r3, r2
 800afae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800afb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	689b      	ldr	r3, [r3, #8]
 800afbc:	031b      	lsls	r3, r3, #12
 800afbe:	697a      	ldr	r2, [r7, #20]
 800afc0:	4313      	orrs	r3, r2
 800afc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	4a2c      	ldr	r2, [pc, #176]	@ (800b078 <TIM_OC4_SetConfig+0x110>)
 800afc8:	4293      	cmp	r3, r2
 800afca:	d007      	beq.n	800afdc <TIM_OC4_SetConfig+0x74>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	4a2b      	ldr	r2, [pc, #172]	@ (800b07c <TIM_OC4_SetConfig+0x114>)
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d003      	beq.n	800afdc <TIM_OC4_SetConfig+0x74>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	4a2a      	ldr	r2, [pc, #168]	@ (800b080 <TIM_OC4_SetConfig+0x118>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d10d      	bne.n	800aff8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800afe2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	68db      	ldr	r3, [r3, #12]
 800afe8:	031b      	lsls	r3, r3, #12
 800afea:	697a      	ldr	r2, [r7, #20]
 800afec:	4313      	orrs	r3, r2
 800afee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aff6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	4a1f      	ldr	r2, [pc, #124]	@ (800b078 <TIM_OC4_SetConfig+0x110>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d013      	beq.n	800b028 <TIM_OC4_SetConfig+0xc0>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	4a1e      	ldr	r2, [pc, #120]	@ (800b07c <TIM_OC4_SetConfig+0x114>)
 800b004:	4293      	cmp	r3, r2
 800b006:	d00f      	beq.n	800b028 <TIM_OC4_SetConfig+0xc0>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	4a1e      	ldr	r2, [pc, #120]	@ (800b084 <TIM_OC4_SetConfig+0x11c>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d00b      	beq.n	800b028 <TIM_OC4_SetConfig+0xc0>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	4a1d      	ldr	r2, [pc, #116]	@ (800b088 <TIM_OC4_SetConfig+0x120>)
 800b014:	4293      	cmp	r3, r2
 800b016:	d007      	beq.n	800b028 <TIM_OC4_SetConfig+0xc0>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	4a1c      	ldr	r2, [pc, #112]	@ (800b08c <TIM_OC4_SetConfig+0x124>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d003      	beq.n	800b028 <TIM_OC4_SetConfig+0xc0>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	4a17      	ldr	r2, [pc, #92]	@ (800b080 <TIM_OC4_SetConfig+0x118>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d113      	bne.n	800b050 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b02e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b036:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	695b      	ldr	r3, [r3, #20]
 800b03c:	019b      	lsls	r3, r3, #6
 800b03e:	693a      	ldr	r2, [r7, #16]
 800b040:	4313      	orrs	r3, r2
 800b042:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	699b      	ldr	r3, [r3, #24]
 800b048:	019b      	lsls	r3, r3, #6
 800b04a:	693a      	ldr	r2, [r7, #16]
 800b04c:	4313      	orrs	r3, r2
 800b04e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	693a      	ldr	r2, [r7, #16]
 800b054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	68fa      	ldr	r2, [r7, #12]
 800b05a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	685a      	ldr	r2, [r3, #4]
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	697a      	ldr	r2, [r7, #20]
 800b068:	621a      	str	r2, [r3, #32]
}
 800b06a:	bf00      	nop
 800b06c:	371c      	adds	r7, #28
 800b06e:	46bd      	mov	sp, r7
 800b070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b074:	4770      	bx	lr
 800b076:	bf00      	nop
 800b078:	40012c00 	.word	0x40012c00
 800b07c:	40013400 	.word	0x40013400
 800b080:	40015000 	.word	0x40015000
 800b084:	40014000 	.word	0x40014000
 800b088:	40014400 	.word	0x40014400
 800b08c:	40014800 	.word	0x40014800

0800b090 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b090:	b480      	push	{r7}
 800b092:	b087      	sub	sp, #28
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6a1b      	ldr	r3, [r3, #32]
 800b09e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6a1b      	ldr	r3, [r3, #32]
 800b0a4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b0be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	68fa      	ldr	r2, [r7, #12]
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b0d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	041b      	lsls	r3, r3, #16
 800b0dc:	693a      	ldr	r2, [r7, #16]
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	4a19      	ldr	r2, [pc, #100]	@ (800b14c <TIM_OC5_SetConfig+0xbc>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d013      	beq.n	800b112 <TIM_OC5_SetConfig+0x82>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	4a18      	ldr	r2, [pc, #96]	@ (800b150 <TIM_OC5_SetConfig+0xc0>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d00f      	beq.n	800b112 <TIM_OC5_SetConfig+0x82>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	4a17      	ldr	r2, [pc, #92]	@ (800b154 <TIM_OC5_SetConfig+0xc4>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d00b      	beq.n	800b112 <TIM_OC5_SetConfig+0x82>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	4a16      	ldr	r2, [pc, #88]	@ (800b158 <TIM_OC5_SetConfig+0xc8>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d007      	beq.n	800b112 <TIM_OC5_SetConfig+0x82>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	4a15      	ldr	r2, [pc, #84]	@ (800b15c <TIM_OC5_SetConfig+0xcc>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d003      	beq.n	800b112 <TIM_OC5_SetConfig+0x82>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	4a14      	ldr	r2, [pc, #80]	@ (800b160 <TIM_OC5_SetConfig+0xd0>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d109      	bne.n	800b126 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b118:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	695b      	ldr	r3, [r3, #20]
 800b11e:	021b      	lsls	r3, r3, #8
 800b120:	697a      	ldr	r2, [r7, #20]
 800b122:	4313      	orrs	r3, r2
 800b124:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	697a      	ldr	r2, [r7, #20]
 800b12a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	68fa      	ldr	r2, [r7, #12]
 800b130:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	685a      	ldr	r2, [r3, #4]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	693a      	ldr	r2, [r7, #16]
 800b13e:	621a      	str	r2, [r3, #32]
}
 800b140:	bf00      	nop
 800b142:	371c      	adds	r7, #28
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr
 800b14c:	40012c00 	.word	0x40012c00
 800b150:	40013400 	.word	0x40013400
 800b154:	40014000 	.word	0x40014000
 800b158:	40014400 	.word	0x40014400
 800b15c:	40014800 	.word	0x40014800
 800b160:	40015000 	.word	0x40015000

0800b164 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b164:	b480      	push	{r7}
 800b166:	b087      	sub	sp, #28
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6a1b      	ldr	r3, [r3, #32]
 800b172:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6a1b      	ldr	r3, [r3, #32]
 800b178:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b18a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b192:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	021b      	lsls	r3, r3, #8
 800b19e:	68fa      	ldr	r2, [r7, #12]
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b1aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	689b      	ldr	r3, [r3, #8]
 800b1b0:	051b      	lsls	r3, r3, #20
 800b1b2:	693a      	ldr	r2, [r7, #16]
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	4a1a      	ldr	r2, [pc, #104]	@ (800b224 <TIM_OC6_SetConfig+0xc0>)
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d013      	beq.n	800b1e8 <TIM_OC6_SetConfig+0x84>
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	4a19      	ldr	r2, [pc, #100]	@ (800b228 <TIM_OC6_SetConfig+0xc4>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d00f      	beq.n	800b1e8 <TIM_OC6_SetConfig+0x84>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	4a18      	ldr	r2, [pc, #96]	@ (800b22c <TIM_OC6_SetConfig+0xc8>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d00b      	beq.n	800b1e8 <TIM_OC6_SetConfig+0x84>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	4a17      	ldr	r2, [pc, #92]	@ (800b230 <TIM_OC6_SetConfig+0xcc>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d007      	beq.n	800b1e8 <TIM_OC6_SetConfig+0x84>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	4a16      	ldr	r2, [pc, #88]	@ (800b234 <TIM_OC6_SetConfig+0xd0>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d003      	beq.n	800b1e8 <TIM_OC6_SetConfig+0x84>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	4a15      	ldr	r2, [pc, #84]	@ (800b238 <TIM_OC6_SetConfig+0xd4>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d109      	bne.n	800b1fc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b1ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	695b      	ldr	r3, [r3, #20]
 800b1f4:	029b      	lsls	r3, r3, #10
 800b1f6:	697a      	ldr	r2, [r7, #20]
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	697a      	ldr	r2, [r7, #20]
 800b200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	68fa      	ldr	r2, [r7, #12]
 800b206:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	685a      	ldr	r2, [r3, #4]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	693a      	ldr	r2, [r7, #16]
 800b214:	621a      	str	r2, [r3, #32]
}
 800b216:	bf00      	nop
 800b218:	371c      	adds	r7, #28
 800b21a:	46bd      	mov	sp, r7
 800b21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b220:	4770      	bx	lr
 800b222:	bf00      	nop
 800b224:	40012c00 	.word	0x40012c00
 800b228:	40013400 	.word	0x40013400
 800b22c:	40014000 	.word	0x40014000
 800b230:	40014400 	.word	0x40014400
 800b234:	40014800 	.word	0x40014800
 800b238:	40015000 	.word	0x40015000

0800b23c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b087      	sub	sp, #28
 800b240:	af00      	add	r7, sp, #0
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	60b9      	str	r1, [r7, #8]
 800b246:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	6a1b      	ldr	r3, [r3, #32]
 800b24c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	6a1b      	ldr	r3, [r3, #32]
 800b252:	f023 0201 	bic.w	r2, r3, #1
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	699b      	ldr	r3, [r3, #24]
 800b25e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b266:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	011b      	lsls	r3, r3, #4
 800b26c:	693a      	ldr	r2, [r7, #16]
 800b26e:	4313      	orrs	r3, r2
 800b270:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	f023 030a 	bic.w	r3, r3, #10
 800b278:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b27a:	697a      	ldr	r2, [r7, #20]
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	4313      	orrs	r3, r2
 800b280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	693a      	ldr	r2, [r7, #16]
 800b286:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	697a      	ldr	r2, [r7, #20]
 800b28c:	621a      	str	r2, [r3, #32]
}
 800b28e:	bf00      	nop
 800b290:	371c      	adds	r7, #28
 800b292:	46bd      	mov	sp, r7
 800b294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b298:	4770      	bx	lr

0800b29a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b29a:	b480      	push	{r7}
 800b29c:	b087      	sub	sp, #28
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	60f8      	str	r0, [r7, #12]
 800b2a2:	60b9      	str	r1, [r7, #8]
 800b2a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	6a1b      	ldr	r3, [r3, #32]
 800b2aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	6a1b      	ldr	r3, [r3, #32]
 800b2b0:	f023 0210 	bic.w	r2, r3, #16
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	699b      	ldr	r3, [r3, #24]
 800b2bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b2c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	031b      	lsls	r3, r3, #12
 800b2ca:	693a      	ldr	r2, [r7, #16]
 800b2cc:	4313      	orrs	r3, r2
 800b2ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b2d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	011b      	lsls	r3, r3, #4
 800b2dc:	697a      	ldr	r2, [r7, #20]
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	693a      	ldr	r2, [r7, #16]
 800b2e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	697a      	ldr	r2, [r7, #20]
 800b2ec:	621a      	str	r2, [r3, #32]
}
 800b2ee:	bf00      	nop
 800b2f0:	371c      	adds	r7, #28
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f8:	4770      	bx	lr

0800b2fa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b2fa:	b480      	push	{r7}
 800b2fc:	b085      	sub	sp, #20
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	6078      	str	r0, [r7, #4]
 800b302:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	689b      	ldr	r3, [r3, #8]
 800b308:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b310:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b314:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b316:	683a      	ldr	r2, [r7, #0]
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	4313      	orrs	r3, r2
 800b31c:	f043 0307 	orr.w	r3, r3, #7
 800b320:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	68fa      	ldr	r2, [r7, #12]
 800b326:	609a      	str	r2, [r3, #8]
}
 800b328:	bf00      	nop
 800b32a:	3714      	adds	r7, #20
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr

0800b334 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b334:	b480      	push	{r7}
 800b336:	b087      	sub	sp, #28
 800b338:	af00      	add	r7, sp, #0
 800b33a:	60f8      	str	r0, [r7, #12]
 800b33c:	60b9      	str	r1, [r7, #8]
 800b33e:	607a      	str	r2, [r7, #4]
 800b340:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	689b      	ldr	r3, [r3, #8]
 800b346:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b34e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	021a      	lsls	r2, r3, #8
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	431a      	orrs	r2, r3
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	4313      	orrs	r3, r2
 800b35c:	697a      	ldr	r2, [r7, #20]
 800b35e:	4313      	orrs	r3, r2
 800b360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	697a      	ldr	r2, [r7, #20]
 800b366:	609a      	str	r2, [r3, #8]
}
 800b368:	bf00      	nop
 800b36a:	371c      	adds	r7, #28
 800b36c:	46bd      	mov	sp, r7
 800b36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b372:	4770      	bx	lr

0800b374 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b374:	b480      	push	{r7}
 800b376:	b087      	sub	sp, #28
 800b378:	af00      	add	r7, sp, #0
 800b37a:	60f8      	str	r0, [r7, #12]
 800b37c:	60b9      	str	r1, [r7, #8]
 800b37e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	f003 031f 	and.w	r3, r3, #31
 800b386:	2201      	movs	r2, #1
 800b388:	fa02 f303 	lsl.w	r3, r2, r3
 800b38c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	6a1a      	ldr	r2, [r3, #32]
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	43db      	mvns	r3, r3
 800b396:	401a      	ands	r2, r3
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	6a1a      	ldr	r2, [r3, #32]
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	f003 031f 	and.w	r3, r3, #31
 800b3a6:	6879      	ldr	r1, [r7, #4]
 800b3a8:	fa01 f303 	lsl.w	r3, r1, r3
 800b3ac:	431a      	orrs	r2, r3
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	621a      	str	r2, [r3, #32]
}
 800b3b2:	bf00      	nop
 800b3b4:	371c      	adds	r7, #28
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3bc:	4770      	bx	lr
	...

0800b3c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b085      	sub	sp, #20
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	d101      	bne.n	800b3d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b3d4:	2302      	movs	r3, #2
 800b3d6:	e074      	b.n	800b4c2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2201      	movs	r2, #1
 800b3dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2202      	movs	r2, #2
 800b3e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	689b      	ldr	r3, [r3, #8]
 800b3f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	4a34      	ldr	r2, [pc, #208]	@ (800b4d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d009      	beq.n	800b416 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	4a33      	ldr	r2, [pc, #204]	@ (800b4d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b408:	4293      	cmp	r3, r2
 800b40a:	d004      	beq.n	800b416 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	4a31      	ldr	r2, [pc, #196]	@ (800b4d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b412:	4293      	cmp	r3, r2
 800b414:	d108      	bne.n	800b428 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b41c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	68fa      	ldr	r2, [r7, #12]
 800b424:	4313      	orrs	r3, r2
 800b426:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800b42e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b432:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	68fa      	ldr	r2, [r7, #12]
 800b43a:	4313      	orrs	r3, r2
 800b43c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	68fa      	ldr	r2, [r7, #12]
 800b444:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a21      	ldr	r2, [pc, #132]	@ (800b4d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d022      	beq.n	800b496 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b458:	d01d      	beq.n	800b496 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	4a1f      	ldr	r2, [pc, #124]	@ (800b4dc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b460:	4293      	cmp	r3, r2
 800b462:	d018      	beq.n	800b496 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	4a1d      	ldr	r2, [pc, #116]	@ (800b4e0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d013      	beq.n	800b496 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	4a1c      	ldr	r2, [pc, #112]	@ (800b4e4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b474:	4293      	cmp	r3, r2
 800b476:	d00e      	beq.n	800b496 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	4a15      	ldr	r2, [pc, #84]	@ (800b4d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d009      	beq.n	800b496 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	4a18      	ldr	r2, [pc, #96]	@ (800b4e8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b488:	4293      	cmp	r3, r2
 800b48a:	d004      	beq.n	800b496 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a11      	ldr	r2, [pc, #68]	@ (800b4d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d10c      	bne.n	800b4b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b49c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	689b      	ldr	r3, [r3, #8]
 800b4a2:	68ba      	ldr	r2, [r7, #8]
 800b4a4:	4313      	orrs	r3, r2
 800b4a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	68ba      	ldr	r2, [r7, #8]
 800b4ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b4c0:	2300      	movs	r3, #0
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3714      	adds	r7, #20
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4cc:	4770      	bx	lr
 800b4ce:	bf00      	nop
 800b4d0:	40012c00 	.word	0x40012c00
 800b4d4:	40013400 	.word	0x40013400
 800b4d8:	40015000 	.word	0x40015000
 800b4dc:	40000400 	.word	0x40000400
 800b4e0:	40000800 	.word	0x40000800
 800b4e4:	40000c00 	.word	0x40000c00
 800b4e8:	40014000 	.word	0x40014000

0800b4ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b085      	sub	sp, #20
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b500:	2b01      	cmp	r3, #1
 800b502:	d101      	bne.n	800b508 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b504:	2302      	movs	r3, #2
 800b506:	e078      	b.n	800b5fa <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2201      	movs	r2, #1
 800b50c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	68db      	ldr	r3, [r3, #12]
 800b51a:	4313      	orrs	r3, r2
 800b51c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	689b      	ldr	r3, [r3, #8]
 800b528:	4313      	orrs	r3, r2
 800b52a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	4313      	orrs	r3, r2
 800b538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4313      	orrs	r3, r2
 800b546:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	691b      	ldr	r3, [r3, #16]
 800b552:	4313      	orrs	r3, r2
 800b554:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	695b      	ldr	r3, [r3, #20]
 800b560:	4313      	orrs	r3, r2
 800b562:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b56e:	4313      	orrs	r3, r2
 800b570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	699b      	ldr	r3, [r3, #24]
 800b57c:	041b      	lsls	r3, r3, #16
 800b57e:	4313      	orrs	r3, r2
 800b580:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	69db      	ldr	r3, [r3, #28]
 800b58c:	4313      	orrs	r3, r2
 800b58e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4a1c      	ldr	r2, [pc, #112]	@ (800b608 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d009      	beq.n	800b5ae <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4a1b      	ldr	r2, [pc, #108]	@ (800b60c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d004      	beq.n	800b5ae <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	4a19      	ldr	r2, [pc, #100]	@ (800b610 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d11c      	bne.n	800b5e8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5b8:	051b      	lsls	r3, r3, #20
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	6a1b      	ldr	r3, [r3, #32]
 800b5c8:	4313      	orrs	r3, r2
 800b5ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5d6:	4313      	orrs	r3, r2
 800b5d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5e4:	4313      	orrs	r3, r2
 800b5e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	68fa      	ldr	r2, [r7, #12]
 800b5ee:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b5f8:	2300      	movs	r3, #0
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3714      	adds	r7, #20
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr
 800b606:	bf00      	nop
 800b608:	40012c00 	.word	0x40012c00
 800b60c:	40013400 	.word	0x40013400
 800b610:	40015000 	.word	0x40015000

0800b614 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d101      	bne.n	800b626 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b622:	2301      	movs	r3, #1
 800b624:	e042      	b.n	800b6ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d106      	bne.n	800b63e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2200      	movs	r2, #0
 800b634:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f7f7 f98d 	bl	8002958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2224      	movs	r2, #36	@ 0x24
 800b642:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	681a      	ldr	r2, [r3, #0]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f022 0201 	bic.w	r2, r2, #1
 800b654:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d002      	beq.n	800b664 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f000 fb24 	bl	800bcac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f000 f825 	bl	800b6b4 <UART_SetConfig>
 800b66a:	4603      	mov	r3, r0
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d101      	bne.n	800b674 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b670:	2301      	movs	r3, #1
 800b672:	e01b      	b.n	800b6ac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	685a      	ldr	r2, [r3, #4]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b682:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	689a      	ldr	r2, [r3, #8]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b692:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	681a      	ldr	r2, [r3, #0]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f042 0201 	orr.w	r2, r2, #1
 800b6a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f000 fba3 	bl	800bdf0 <UART_CheckIdleState>
 800b6aa:	4603      	mov	r3, r0
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3708      	adds	r7, #8
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b6b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b6b8:	b08c      	sub	sp, #48	@ 0x30
 800b6ba:	af00      	add	r7, sp, #0
 800b6bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	689a      	ldr	r2, [r3, #8]
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	691b      	ldr	r3, [r3, #16]
 800b6cc:	431a      	orrs	r2, r3
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	695b      	ldr	r3, [r3, #20]
 800b6d2:	431a      	orrs	r2, r3
 800b6d4:	697b      	ldr	r3, [r7, #20]
 800b6d6:	69db      	ldr	r3, [r3, #28]
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	681a      	ldr	r2, [r3, #0]
 800b6e2:	4baa      	ldr	r3, [pc, #680]	@ (800b98c <UART_SetConfig+0x2d8>)
 800b6e4:	4013      	ands	r3, r2
 800b6e6:	697a      	ldr	r2, [r7, #20]
 800b6e8:	6812      	ldr	r2, [r2, #0]
 800b6ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b6ec:	430b      	orrs	r3, r1
 800b6ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	68da      	ldr	r2, [r3, #12]
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	430a      	orrs	r2, r1
 800b704:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	699b      	ldr	r3, [r3, #24]
 800b70a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	4a9f      	ldr	r2, [pc, #636]	@ (800b990 <UART_SetConfig+0x2dc>)
 800b712:	4293      	cmp	r3, r2
 800b714:	d004      	beq.n	800b720 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	6a1b      	ldr	r3, [r3, #32]
 800b71a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b71c:	4313      	orrs	r3, r2
 800b71e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	689b      	ldr	r3, [r3, #8]
 800b726:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b72a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b72e:	697a      	ldr	r2, [r7, #20]
 800b730:	6812      	ldr	r2, [r2, #0]
 800b732:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b734:	430b      	orrs	r3, r1
 800b736:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b73e:	f023 010f 	bic.w	r1, r3, #15
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	430a      	orrs	r2, r1
 800b74c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	4a90      	ldr	r2, [pc, #576]	@ (800b994 <UART_SetConfig+0x2e0>)
 800b754:	4293      	cmp	r3, r2
 800b756:	d125      	bne.n	800b7a4 <UART_SetConfig+0xf0>
 800b758:	4b8f      	ldr	r3, [pc, #572]	@ (800b998 <UART_SetConfig+0x2e4>)
 800b75a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b75e:	f003 0303 	and.w	r3, r3, #3
 800b762:	2b03      	cmp	r3, #3
 800b764:	d81a      	bhi.n	800b79c <UART_SetConfig+0xe8>
 800b766:	a201      	add	r2, pc, #4	@ (adr r2, 800b76c <UART_SetConfig+0xb8>)
 800b768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b76c:	0800b77d 	.word	0x0800b77d
 800b770:	0800b78d 	.word	0x0800b78d
 800b774:	0800b785 	.word	0x0800b785
 800b778:	0800b795 	.word	0x0800b795
 800b77c:	2301      	movs	r3, #1
 800b77e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b782:	e116      	b.n	800b9b2 <UART_SetConfig+0x2fe>
 800b784:	2302      	movs	r3, #2
 800b786:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b78a:	e112      	b.n	800b9b2 <UART_SetConfig+0x2fe>
 800b78c:	2304      	movs	r3, #4
 800b78e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b792:	e10e      	b.n	800b9b2 <UART_SetConfig+0x2fe>
 800b794:	2308      	movs	r3, #8
 800b796:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b79a:	e10a      	b.n	800b9b2 <UART_SetConfig+0x2fe>
 800b79c:	2310      	movs	r3, #16
 800b79e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7a2:	e106      	b.n	800b9b2 <UART_SetConfig+0x2fe>
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	4a7c      	ldr	r2, [pc, #496]	@ (800b99c <UART_SetConfig+0x2e8>)
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	d138      	bne.n	800b820 <UART_SetConfig+0x16c>
 800b7ae:	4b7a      	ldr	r3, [pc, #488]	@ (800b998 <UART_SetConfig+0x2e4>)
 800b7b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b7b4:	f003 030c 	and.w	r3, r3, #12
 800b7b8:	2b0c      	cmp	r3, #12
 800b7ba:	d82d      	bhi.n	800b818 <UART_SetConfig+0x164>
 800b7bc:	a201      	add	r2, pc, #4	@ (adr r2, 800b7c4 <UART_SetConfig+0x110>)
 800b7be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7c2:	bf00      	nop
 800b7c4:	0800b7f9 	.word	0x0800b7f9
 800b7c8:	0800b819 	.word	0x0800b819
 800b7cc:	0800b819 	.word	0x0800b819
 800b7d0:	0800b819 	.word	0x0800b819
 800b7d4:	0800b809 	.word	0x0800b809
 800b7d8:	0800b819 	.word	0x0800b819
 800b7dc:	0800b819 	.word	0x0800b819
 800b7e0:	0800b819 	.word	0x0800b819
 800b7e4:	0800b801 	.word	0x0800b801
 800b7e8:	0800b819 	.word	0x0800b819
 800b7ec:	0800b819 	.word	0x0800b819
 800b7f0:	0800b819 	.word	0x0800b819
 800b7f4:	0800b811 	.word	0x0800b811
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7fe:	e0d8      	b.n	800b9b2 <UART_SetConfig+0x2fe>
 800b800:	2302      	movs	r3, #2
 800b802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b806:	e0d4      	b.n	800b9b2 <UART_SetConfig+0x2fe>
 800b808:	2304      	movs	r3, #4
 800b80a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b80e:	e0d0      	b.n	800b9b2 <UART_SetConfig+0x2fe>
 800b810:	2308      	movs	r3, #8
 800b812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b816:	e0cc      	b.n	800b9b2 <UART_SetConfig+0x2fe>
 800b818:	2310      	movs	r3, #16
 800b81a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b81e:	e0c8      	b.n	800b9b2 <UART_SetConfig+0x2fe>
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4a5e      	ldr	r2, [pc, #376]	@ (800b9a0 <UART_SetConfig+0x2ec>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d125      	bne.n	800b876 <UART_SetConfig+0x1c2>
 800b82a:	4b5b      	ldr	r3, [pc, #364]	@ (800b998 <UART_SetConfig+0x2e4>)
 800b82c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b830:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b834:	2b30      	cmp	r3, #48	@ 0x30
 800b836:	d016      	beq.n	800b866 <UART_SetConfig+0x1b2>
 800b838:	2b30      	cmp	r3, #48	@ 0x30
 800b83a:	d818      	bhi.n	800b86e <UART_SetConfig+0x1ba>
 800b83c:	2b20      	cmp	r3, #32
 800b83e:	d00a      	beq.n	800b856 <UART_SetConfig+0x1a2>
 800b840:	2b20      	cmp	r3, #32
 800b842:	d814      	bhi.n	800b86e <UART_SetConfig+0x1ba>
 800b844:	2b00      	cmp	r3, #0
 800b846:	d002      	beq.n	800b84e <UART_SetConfig+0x19a>
 800b848:	2b10      	cmp	r3, #16
 800b84a:	d008      	beq.n	800b85e <UART_SetConfig+0x1aa>
 800b84c:	e00f      	b.n	800b86e <UART_SetConfig+0x1ba>
 800b84e:	2300      	movs	r3, #0
 800b850:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b854:	e0ad      	b.n	800b9b2 <UART_SetConfig+0x2fe>
 800b856:	2302      	movs	r3, #2
 800b858:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b85c:	e0a9      	b.n	800b9b2 <UART_SetConfig+0x2fe>
 800b85e:	2304      	movs	r3, #4
 800b860:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b864:	e0a5      	b.n	800b9b2 <UART_SetConfig+0x2fe>
 800b866:	2308      	movs	r3, #8
 800b868:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b86c:	e0a1      	b.n	800b9b2 <UART_SetConfig+0x2fe>
 800b86e:	2310      	movs	r3, #16
 800b870:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b874:	e09d      	b.n	800b9b2 <UART_SetConfig+0x2fe>
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	4a4a      	ldr	r2, [pc, #296]	@ (800b9a4 <UART_SetConfig+0x2f0>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d125      	bne.n	800b8cc <UART_SetConfig+0x218>
 800b880:	4b45      	ldr	r3, [pc, #276]	@ (800b998 <UART_SetConfig+0x2e4>)
 800b882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b886:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b88a:	2bc0      	cmp	r3, #192	@ 0xc0
 800b88c:	d016      	beq.n	800b8bc <UART_SetConfig+0x208>
 800b88e:	2bc0      	cmp	r3, #192	@ 0xc0
 800b890:	d818      	bhi.n	800b8c4 <UART_SetConfig+0x210>
 800b892:	2b80      	cmp	r3, #128	@ 0x80
 800b894:	d00a      	beq.n	800b8ac <UART_SetConfig+0x1f8>
 800b896:	2b80      	cmp	r3, #128	@ 0x80
 800b898:	d814      	bhi.n	800b8c4 <UART_SetConfig+0x210>
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d002      	beq.n	800b8a4 <UART_SetConfig+0x1f0>
 800b89e:	2b40      	cmp	r3, #64	@ 0x40
 800b8a0:	d008      	beq.n	800b8b4 <UART_SetConfig+0x200>
 800b8a2:	e00f      	b.n	800b8c4 <UART_SetConfig+0x210>
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8aa:	e082      	b.n	800b9b2 <UART_SetConfig+0x2fe>
 800b8ac:	2302      	movs	r3, #2
 800b8ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8b2:	e07e      	b.n	800b9b2 <UART_SetConfig+0x2fe>
 800b8b4:	2304      	movs	r3, #4
 800b8b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8ba:	e07a      	b.n	800b9b2 <UART_SetConfig+0x2fe>
 800b8bc:	2308      	movs	r3, #8
 800b8be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8c2:	e076      	b.n	800b9b2 <UART_SetConfig+0x2fe>
 800b8c4:	2310      	movs	r3, #16
 800b8c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8ca:	e072      	b.n	800b9b2 <UART_SetConfig+0x2fe>
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	4a35      	ldr	r2, [pc, #212]	@ (800b9a8 <UART_SetConfig+0x2f4>)
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d12a      	bne.n	800b92c <UART_SetConfig+0x278>
 800b8d6:	4b30      	ldr	r3, [pc, #192]	@ (800b998 <UART_SetConfig+0x2e4>)
 800b8d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b8dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b8e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b8e4:	d01a      	beq.n	800b91c <UART_SetConfig+0x268>
 800b8e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b8ea:	d81b      	bhi.n	800b924 <UART_SetConfig+0x270>
 800b8ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b8f0:	d00c      	beq.n	800b90c <UART_SetConfig+0x258>
 800b8f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b8f6:	d815      	bhi.n	800b924 <UART_SetConfig+0x270>
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d003      	beq.n	800b904 <UART_SetConfig+0x250>
 800b8fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b900:	d008      	beq.n	800b914 <UART_SetConfig+0x260>
 800b902:	e00f      	b.n	800b924 <UART_SetConfig+0x270>
 800b904:	2300      	movs	r3, #0
 800b906:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b90a:	e052      	b.n	800b9b2 <UART_SetConfig+0x2fe>
 800b90c:	2302      	movs	r3, #2
 800b90e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b912:	e04e      	b.n	800b9b2 <UART_SetConfig+0x2fe>
 800b914:	2304      	movs	r3, #4
 800b916:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b91a:	e04a      	b.n	800b9b2 <UART_SetConfig+0x2fe>
 800b91c:	2308      	movs	r3, #8
 800b91e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b922:	e046      	b.n	800b9b2 <UART_SetConfig+0x2fe>
 800b924:	2310      	movs	r3, #16
 800b926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b92a:	e042      	b.n	800b9b2 <UART_SetConfig+0x2fe>
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	4a17      	ldr	r2, [pc, #92]	@ (800b990 <UART_SetConfig+0x2dc>)
 800b932:	4293      	cmp	r3, r2
 800b934:	d13a      	bne.n	800b9ac <UART_SetConfig+0x2f8>
 800b936:	4b18      	ldr	r3, [pc, #96]	@ (800b998 <UART_SetConfig+0x2e4>)
 800b938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b93c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b940:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b944:	d01a      	beq.n	800b97c <UART_SetConfig+0x2c8>
 800b946:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b94a:	d81b      	bhi.n	800b984 <UART_SetConfig+0x2d0>
 800b94c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b950:	d00c      	beq.n	800b96c <UART_SetConfig+0x2b8>
 800b952:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b956:	d815      	bhi.n	800b984 <UART_SetConfig+0x2d0>
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d003      	beq.n	800b964 <UART_SetConfig+0x2b0>
 800b95c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b960:	d008      	beq.n	800b974 <UART_SetConfig+0x2c0>
 800b962:	e00f      	b.n	800b984 <UART_SetConfig+0x2d0>
 800b964:	2300      	movs	r3, #0
 800b966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b96a:	e022      	b.n	800b9b2 <UART_SetConfig+0x2fe>
 800b96c:	2302      	movs	r3, #2
 800b96e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b972:	e01e      	b.n	800b9b2 <UART_SetConfig+0x2fe>
 800b974:	2304      	movs	r3, #4
 800b976:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b97a:	e01a      	b.n	800b9b2 <UART_SetConfig+0x2fe>
 800b97c:	2308      	movs	r3, #8
 800b97e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b982:	e016      	b.n	800b9b2 <UART_SetConfig+0x2fe>
 800b984:	2310      	movs	r3, #16
 800b986:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b98a:	e012      	b.n	800b9b2 <UART_SetConfig+0x2fe>
 800b98c:	cfff69f3 	.word	0xcfff69f3
 800b990:	40008000 	.word	0x40008000
 800b994:	40013800 	.word	0x40013800
 800b998:	40021000 	.word	0x40021000
 800b99c:	40004400 	.word	0x40004400
 800b9a0:	40004800 	.word	0x40004800
 800b9a4:	40004c00 	.word	0x40004c00
 800b9a8:	40005000 	.word	0x40005000
 800b9ac:	2310      	movs	r3, #16
 800b9ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	4aae      	ldr	r2, [pc, #696]	@ (800bc70 <UART_SetConfig+0x5bc>)
 800b9b8:	4293      	cmp	r3, r2
 800b9ba:	f040 8097 	bne.w	800baec <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b9be:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b9c2:	2b08      	cmp	r3, #8
 800b9c4:	d823      	bhi.n	800ba0e <UART_SetConfig+0x35a>
 800b9c6:	a201      	add	r2, pc, #4	@ (adr r2, 800b9cc <UART_SetConfig+0x318>)
 800b9c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9cc:	0800b9f1 	.word	0x0800b9f1
 800b9d0:	0800ba0f 	.word	0x0800ba0f
 800b9d4:	0800b9f9 	.word	0x0800b9f9
 800b9d8:	0800ba0f 	.word	0x0800ba0f
 800b9dc:	0800b9ff 	.word	0x0800b9ff
 800b9e0:	0800ba0f 	.word	0x0800ba0f
 800b9e4:	0800ba0f 	.word	0x0800ba0f
 800b9e8:	0800ba0f 	.word	0x0800ba0f
 800b9ec:	0800ba07 	.word	0x0800ba07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b9f0:	f7fd f802 	bl	80089f8 <HAL_RCC_GetPCLK1Freq>
 800b9f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b9f6:	e010      	b.n	800ba1a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b9f8:	4b9e      	ldr	r3, [pc, #632]	@ (800bc74 <UART_SetConfig+0x5c0>)
 800b9fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b9fc:	e00d      	b.n	800ba1a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b9fe:	f7fc ff8d 	bl	800891c <HAL_RCC_GetSysClockFreq>
 800ba02:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ba04:	e009      	b.n	800ba1a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ba0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ba0c:	e005      	b.n	800ba1a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ba12:	2301      	movs	r3, #1
 800ba14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ba18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ba1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	f000 8130 	beq.w	800bc82 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba26:	4a94      	ldr	r2, [pc, #592]	@ (800bc78 <UART_SetConfig+0x5c4>)
 800ba28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba30:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba34:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	685a      	ldr	r2, [r3, #4]
 800ba3a:	4613      	mov	r3, r2
 800ba3c:	005b      	lsls	r3, r3, #1
 800ba3e:	4413      	add	r3, r2
 800ba40:	69ba      	ldr	r2, [r7, #24]
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d305      	bcc.n	800ba52 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ba4c:	69ba      	ldr	r2, [r7, #24]
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	d903      	bls.n	800ba5a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ba52:	2301      	movs	r3, #1
 800ba54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ba58:	e113      	b.n	800bc82 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	60bb      	str	r3, [r7, #8]
 800ba60:	60fa      	str	r2, [r7, #12]
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba66:	4a84      	ldr	r2, [pc, #528]	@ (800bc78 <UART_SetConfig+0x5c4>)
 800ba68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba6c:	b29b      	uxth	r3, r3
 800ba6e:	2200      	movs	r2, #0
 800ba70:	603b      	str	r3, [r7, #0]
 800ba72:	607a      	str	r2, [r7, #4]
 800ba74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba78:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ba7c:	f7f5 f92c 	bl	8000cd8 <__aeabi_uldivmod>
 800ba80:	4602      	mov	r2, r0
 800ba82:	460b      	mov	r3, r1
 800ba84:	4610      	mov	r0, r2
 800ba86:	4619      	mov	r1, r3
 800ba88:	f04f 0200 	mov.w	r2, #0
 800ba8c:	f04f 0300 	mov.w	r3, #0
 800ba90:	020b      	lsls	r3, r1, #8
 800ba92:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ba96:	0202      	lsls	r2, r0, #8
 800ba98:	6979      	ldr	r1, [r7, #20]
 800ba9a:	6849      	ldr	r1, [r1, #4]
 800ba9c:	0849      	lsrs	r1, r1, #1
 800ba9e:	2000      	movs	r0, #0
 800baa0:	460c      	mov	r4, r1
 800baa2:	4605      	mov	r5, r0
 800baa4:	eb12 0804 	adds.w	r8, r2, r4
 800baa8:	eb43 0905 	adc.w	r9, r3, r5
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	685b      	ldr	r3, [r3, #4]
 800bab0:	2200      	movs	r2, #0
 800bab2:	469a      	mov	sl, r3
 800bab4:	4693      	mov	fp, r2
 800bab6:	4652      	mov	r2, sl
 800bab8:	465b      	mov	r3, fp
 800baba:	4640      	mov	r0, r8
 800babc:	4649      	mov	r1, r9
 800babe:	f7f5 f90b 	bl	8000cd8 <__aeabi_uldivmod>
 800bac2:	4602      	mov	r2, r0
 800bac4:	460b      	mov	r3, r1
 800bac6:	4613      	mov	r3, r2
 800bac8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800baca:	6a3b      	ldr	r3, [r7, #32]
 800bacc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bad0:	d308      	bcc.n	800bae4 <UART_SetConfig+0x430>
 800bad2:	6a3b      	ldr	r3, [r7, #32]
 800bad4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bad8:	d204      	bcs.n	800bae4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	6a3a      	ldr	r2, [r7, #32]
 800bae0:	60da      	str	r2, [r3, #12]
 800bae2:	e0ce      	b.n	800bc82 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800bae4:	2301      	movs	r3, #1
 800bae6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800baea:	e0ca      	b.n	800bc82 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	69db      	ldr	r3, [r3, #28]
 800baf0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800baf4:	d166      	bne.n	800bbc4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800baf6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bafa:	2b08      	cmp	r3, #8
 800bafc:	d827      	bhi.n	800bb4e <UART_SetConfig+0x49a>
 800bafe:	a201      	add	r2, pc, #4	@ (adr r2, 800bb04 <UART_SetConfig+0x450>)
 800bb00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb04:	0800bb29 	.word	0x0800bb29
 800bb08:	0800bb31 	.word	0x0800bb31
 800bb0c:	0800bb39 	.word	0x0800bb39
 800bb10:	0800bb4f 	.word	0x0800bb4f
 800bb14:	0800bb3f 	.word	0x0800bb3f
 800bb18:	0800bb4f 	.word	0x0800bb4f
 800bb1c:	0800bb4f 	.word	0x0800bb4f
 800bb20:	0800bb4f 	.word	0x0800bb4f
 800bb24:	0800bb47 	.word	0x0800bb47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb28:	f7fc ff66 	bl	80089f8 <HAL_RCC_GetPCLK1Freq>
 800bb2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb2e:	e014      	b.n	800bb5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bb30:	f7fc ff78 	bl	8008a24 <HAL_RCC_GetPCLK2Freq>
 800bb34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb36:	e010      	b.n	800bb5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb38:	4b4e      	ldr	r3, [pc, #312]	@ (800bc74 <UART_SetConfig+0x5c0>)
 800bb3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bb3c:	e00d      	b.n	800bb5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb3e:	f7fc feed 	bl	800891c <HAL_RCC_GetSysClockFreq>
 800bb42:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb44:	e009      	b.n	800bb5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bb4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bb4c:	e005      	b.n	800bb5a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bb52:	2301      	movs	r3, #1
 800bb54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bb58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bb5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	f000 8090 	beq.w	800bc82 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb66:	4a44      	ldr	r2, [pc, #272]	@ (800bc78 <UART_SetConfig+0x5c4>)
 800bb68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb6c:	461a      	mov	r2, r3
 800bb6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb70:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb74:	005a      	lsls	r2, r3, #1
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	085b      	lsrs	r3, r3, #1
 800bb7c:	441a      	add	r2, r3
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb86:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb88:	6a3b      	ldr	r3, [r7, #32]
 800bb8a:	2b0f      	cmp	r3, #15
 800bb8c:	d916      	bls.n	800bbbc <UART_SetConfig+0x508>
 800bb8e:	6a3b      	ldr	r3, [r7, #32]
 800bb90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb94:	d212      	bcs.n	800bbbc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bb96:	6a3b      	ldr	r3, [r7, #32]
 800bb98:	b29b      	uxth	r3, r3
 800bb9a:	f023 030f 	bic.w	r3, r3, #15
 800bb9e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bba0:	6a3b      	ldr	r3, [r7, #32]
 800bba2:	085b      	lsrs	r3, r3, #1
 800bba4:	b29b      	uxth	r3, r3
 800bba6:	f003 0307 	and.w	r3, r3, #7
 800bbaa:	b29a      	uxth	r2, r3
 800bbac:	8bfb      	ldrh	r3, [r7, #30]
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	8bfa      	ldrh	r2, [r7, #30]
 800bbb8:	60da      	str	r2, [r3, #12]
 800bbba:	e062      	b.n	800bc82 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bbc2:	e05e      	b.n	800bc82 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bbc4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bbc8:	2b08      	cmp	r3, #8
 800bbca:	d828      	bhi.n	800bc1e <UART_SetConfig+0x56a>
 800bbcc:	a201      	add	r2, pc, #4	@ (adr r2, 800bbd4 <UART_SetConfig+0x520>)
 800bbce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd2:	bf00      	nop
 800bbd4:	0800bbf9 	.word	0x0800bbf9
 800bbd8:	0800bc01 	.word	0x0800bc01
 800bbdc:	0800bc09 	.word	0x0800bc09
 800bbe0:	0800bc1f 	.word	0x0800bc1f
 800bbe4:	0800bc0f 	.word	0x0800bc0f
 800bbe8:	0800bc1f 	.word	0x0800bc1f
 800bbec:	0800bc1f 	.word	0x0800bc1f
 800bbf0:	0800bc1f 	.word	0x0800bc1f
 800bbf4:	0800bc17 	.word	0x0800bc17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bbf8:	f7fc fefe 	bl	80089f8 <HAL_RCC_GetPCLK1Freq>
 800bbfc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bbfe:	e014      	b.n	800bc2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc00:	f7fc ff10 	bl	8008a24 <HAL_RCC_GetPCLK2Freq>
 800bc04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bc06:	e010      	b.n	800bc2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bc08:	4b1a      	ldr	r3, [pc, #104]	@ (800bc74 <UART_SetConfig+0x5c0>)
 800bc0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bc0c:	e00d      	b.n	800bc2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bc0e:	f7fc fe85 	bl	800891c <HAL_RCC_GetSysClockFreq>
 800bc12:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bc14:	e009      	b.n	800bc2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bc1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bc1c:	e005      	b.n	800bc2a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bc22:	2301      	movs	r3, #1
 800bc24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bc28:	bf00      	nop
    }

    if (pclk != 0U)
 800bc2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d028      	beq.n	800bc82 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc34:	4a10      	ldr	r2, [pc, #64]	@ (800bc78 <UART_SetConfig+0x5c4>)
 800bc36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc3e:	fbb3 f2f2 	udiv	r2, r3, r2
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	685b      	ldr	r3, [r3, #4]
 800bc46:	085b      	lsrs	r3, r3, #1
 800bc48:	441a      	add	r2, r3
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc52:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc54:	6a3b      	ldr	r3, [r7, #32]
 800bc56:	2b0f      	cmp	r3, #15
 800bc58:	d910      	bls.n	800bc7c <UART_SetConfig+0x5c8>
 800bc5a:	6a3b      	ldr	r3, [r7, #32]
 800bc5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bc60:	d20c      	bcs.n	800bc7c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bc62:	6a3b      	ldr	r3, [r7, #32]
 800bc64:	b29a      	uxth	r2, r3
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	60da      	str	r2, [r3, #12]
 800bc6c:	e009      	b.n	800bc82 <UART_SetConfig+0x5ce>
 800bc6e:	bf00      	nop
 800bc70:	40008000 	.word	0x40008000
 800bc74:	00f42400 	.word	0x00f42400
 800bc78:	080149f0 	.word	0x080149f0
      }
      else
      {
        ret = HAL_ERROR;
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	2201      	movs	r2, #1
 800bc86:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	2201      	movs	r2, #1
 800bc8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	2200      	movs	r2, #0
 800bc96:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bc9e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3730      	adds	r7, #48	@ 0x30
 800bca6:	46bd      	mov	sp, r7
 800bca8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800bcac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b083      	sub	sp, #12
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcb8:	f003 0308 	and.w	r3, r3, #8
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d00a      	beq.n	800bcd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	685b      	ldr	r3, [r3, #4]
 800bcc6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	430a      	orrs	r2, r1
 800bcd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcda:	f003 0301 	and.w	r3, r3, #1
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d00a      	beq.n	800bcf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	430a      	orrs	r2, r1
 800bcf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcfc:	f003 0302 	and.w	r3, r3, #2
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d00a      	beq.n	800bd1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	685b      	ldr	r3, [r3, #4]
 800bd0a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	430a      	orrs	r2, r1
 800bd18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd1e:	f003 0304 	and.w	r3, r3, #4
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d00a      	beq.n	800bd3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	685b      	ldr	r3, [r3, #4]
 800bd2c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	430a      	orrs	r2, r1
 800bd3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd40:	f003 0310 	and.w	r3, r3, #16
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d00a      	beq.n	800bd5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	689b      	ldr	r3, [r3, #8]
 800bd4e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	430a      	orrs	r2, r1
 800bd5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd62:	f003 0320 	and.w	r3, r3, #32
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d00a      	beq.n	800bd80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	689b      	ldr	r3, [r3, #8]
 800bd70:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	430a      	orrs	r2, r1
 800bd7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d01a      	beq.n	800bdc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	430a      	orrs	r2, r1
 800bda0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bda6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bdaa:	d10a      	bne.n	800bdc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	685b      	ldr	r3, [r3, #4]
 800bdb2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	430a      	orrs	r2, r1
 800bdc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d00a      	beq.n	800bde4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	430a      	orrs	r2, r1
 800bde2:	605a      	str	r2, [r3, #4]
  }
}
 800bde4:	bf00      	nop
 800bde6:	370c      	adds	r7, #12
 800bde8:	46bd      	mov	sp, r7
 800bdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdee:	4770      	bx	lr

0800bdf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b098      	sub	sp, #96	@ 0x60
 800bdf4:	af02      	add	r7, sp, #8
 800bdf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800be00:	f7f7 fba4 	bl	800354c <HAL_GetTick>
 800be04:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f003 0308 	and.w	r3, r3, #8
 800be10:	2b08      	cmp	r3, #8
 800be12:	d12f      	bne.n	800be74 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800be18:	9300      	str	r3, [sp, #0]
 800be1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be1c:	2200      	movs	r2, #0
 800be1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f000 f88e 	bl	800bf44 <UART_WaitOnFlagUntilTimeout>
 800be28:	4603      	mov	r3, r0
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d022      	beq.n	800be74 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be36:	e853 3f00 	ldrex	r3, [r3]
 800be3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800be3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800be42:	653b      	str	r3, [r7, #80]	@ 0x50
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	461a      	mov	r2, r3
 800be4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be4c:	647b      	str	r3, [r7, #68]	@ 0x44
 800be4e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800be52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be54:	e841 2300 	strex	r3, r2, [r1]
 800be58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800be5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d1e6      	bne.n	800be2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2220      	movs	r2, #32
 800be64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2200      	movs	r2, #0
 800be6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be70:	2303      	movs	r3, #3
 800be72:	e063      	b.n	800bf3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f003 0304 	and.w	r3, r3, #4
 800be7e:	2b04      	cmp	r3, #4
 800be80:	d149      	bne.n	800bf16 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be82:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800be86:	9300      	str	r3, [sp, #0]
 800be88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be8a:	2200      	movs	r2, #0
 800be8c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f000 f857 	bl	800bf44 <UART_WaitOnFlagUntilTimeout>
 800be96:	4603      	mov	r3, r0
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d03c      	beq.n	800bf16 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bea4:	e853 3f00 	ldrex	r3, [r3]
 800bea8:	623b      	str	r3, [r7, #32]
   return(result);
 800beaa:	6a3b      	ldr	r3, [r7, #32]
 800beac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800beb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	461a      	mov	r2, r3
 800beb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800beba:	633b      	str	r3, [r7, #48]	@ 0x30
 800bebc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bebe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bec0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bec2:	e841 2300 	strex	r3, r2, [r1]
 800bec6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beca:	2b00      	cmp	r3, #0
 800becc:	d1e6      	bne.n	800be9c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	3308      	adds	r3, #8
 800bed4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	e853 3f00 	ldrex	r3, [r3]
 800bedc:	60fb      	str	r3, [r7, #12]
   return(result);
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	f023 0301 	bic.w	r3, r3, #1
 800bee4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	3308      	adds	r3, #8
 800beec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800beee:	61fa      	str	r2, [r7, #28]
 800bef0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef2:	69b9      	ldr	r1, [r7, #24]
 800bef4:	69fa      	ldr	r2, [r7, #28]
 800bef6:	e841 2300 	strex	r3, r2, [r1]
 800befa:	617b      	str	r3, [r7, #20]
   return(result);
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d1e5      	bne.n	800bece <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2220      	movs	r2, #32
 800bf06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf12:	2303      	movs	r3, #3
 800bf14:	e012      	b.n	800bf3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2220      	movs	r2, #32
 800bf1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2220      	movs	r2, #32
 800bf22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2200      	movs	r2, #0
 800bf2a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2200      	movs	r2, #0
 800bf36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bf3a:	2300      	movs	r3, #0
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3758      	adds	r7, #88	@ 0x58
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b084      	sub	sp, #16
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	60f8      	str	r0, [r7, #12]
 800bf4c:	60b9      	str	r1, [r7, #8]
 800bf4e:	603b      	str	r3, [r7, #0]
 800bf50:	4613      	mov	r3, r2
 800bf52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf54:	e04f      	b.n	800bff6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf56:	69bb      	ldr	r3, [r7, #24]
 800bf58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf5c:	d04b      	beq.n	800bff6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf5e:	f7f7 faf5 	bl	800354c <HAL_GetTick>
 800bf62:	4602      	mov	r2, r0
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	1ad3      	subs	r3, r2, r3
 800bf68:	69ba      	ldr	r2, [r7, #24]
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d302      	bcc.n	800bf74 <UART_WaitOnFlagUntilTimeout+0x30>
 800bf6e:	69bb      	ldr	r3, [r7, #24]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d101      	bne.n	800bf78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bf74:	2303      	movs	r3, #3
 800bf76:	e04e      	b.n	800c016 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f003 0304 	and.w	r3, r3, #4
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d037      	beq.n	800bff6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	2b80      	cmp	r3, #128	@ 0x80
 800bf8a:	d034      	beq.n	800bff6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	2b40      	cmp	r3, #64	@ 0x40
 800bf90:	d031      	beq.n	800bff6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	69db      	ldr	r3, [r3, #28]
 800bf98:	f003 0308 	and.w	r3, r3, #8
 800bf9c:	2b08      	cmp	r3, #8
 800bf9e:	d110      	bne.n	800bfc2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	2208      	movs	r2, #8
 800bfa6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bfa8:	68f8      	ldr	r0, [r7, #12]
 800bfaa:	f000 f838 	bl	800c01e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	2208      	movs	r2, #8
 800bfb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	e029      	b.n	800c016 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	69db      	ldr	r3, [r3, #28]
 800bfc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bfcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bfd0:	d111      	bne.n	800bff6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bfda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bfdc:	68f8      	ldr	r0, [r7, #12]
 800bfde:	f000 f81e 	bl	800c01e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	2220      	movs	r2, #32
 800bfe6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2200      	movs	r2, #0
 800bfee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bff2:	2303      	movs	r3, #3
 800bff4:	e00f      	b.n	800c016 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	69da      	ldr	r2, [r3, #28]
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	4013      	ands	r3, r2
 800c000:	68ba      	ldr	r2, [r7, #8]
 800c002:	429a      	cmp	r2, r3
 800c004:	bf0c      	ite	eq
 800c006:	2301      	moveq	r3, #1
 800c008:	2300      	movne	r3, #0
 800c00a:	b2db      	uxtb	r3, r3
 800c00c:	461a      	mov	r2, r3
 800c00e:	79fb      	ldrb	r3, [r7, #7]
 800c010:	429a      	cmp	r2, r3
 800c012:	d0a0      	beq.n	800bf56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c014:	2300      	movs	r3, #0
}
 800c016:	4618      	mov	r0, r3
 800c018:	3710      	adds	r7, #16
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}

0800c01e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c01e:	b480      	push	{r7}
 800c020:	b095      	sub	sp, #84	@ 0x54
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c02c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c02e:	e853 3f00 	ldrex	r3, [r3]
 800c032:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c036:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c03a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	461a      	mov	r2, r3
 800c042:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c044:	643b      	str	r3, [r7, #64]	@ 0x40
 800c046:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c048:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c04a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c04c:	e841 2300 	strex	r3, r2, [r1]
 800c050:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c054:	2b00      	cmp	r3, #0
 800c056:	d1e6      	bne.n	800c026 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	3308      	adds	r3, #8
 800c05e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c060:	6a3b      	ldr	r3, [r7, #32]
 800c062:	e853 3f00 	ldrex	r3, [r3]
 800c066:	61fb      	str	r3, [r7, #28]
   return(result);
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c06e:	f023 0301 	bic.w	r3, r3, #1
 800c072:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	3308      	adds	r3, #8
 800c07a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c07c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c07e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c080:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c082:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c084:	e841 2300 	strex	r3, r2, [r1]
 800c088:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c08a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d1e3      	bne.n	800c058 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c094:	2b01      	cmp	r3, #1
 800c096:	d118      	bne.n	800c0ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	e853 3f00 	ldrex	r3, [r3]
 800c0a4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	f023 0310 	bic.w	r3, r3, #16
 800c0ac:	647b      	str	r3, [r7, #68]	@ 0x44
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	461a      	mov	r2, r3
 800c0b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c0b6:	61bb      	str	r3, [r7, #24]
 800c0b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ba:	6979      	ldr	r1, [r7, #20]
 800c0bc:	69ba      	ldr	r2, [r7, #24]
 800c0be:	e841 2300 	strex	r3, r2, [r1]
 800c0c2:	613b      	str	r3, [r7, #16]
   return(result);
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d1e6      	bne.n	800c098 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2220      	movs	r2, #32
 800c0ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c0de:	bf00      	nop
 800c0e0:	3754      	adds	r7, #84	@ 0x54
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e8:	4770      	bx	lr

0800c0ea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c0ea:	b480      	push	{r7}
 800c0ec:	b085      	sub	sp, #20
 800c0ee:	af00      	add	r7, sp, #0
 800c0f0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d101      	bne.n	800c100 <HAL_UARTEx_DisableFifoMode+0x16>
 800c0fc:	2302      	movs	r3, #2
 800c0fe:	e027      	b.n	800c150 <HAL_UARTEx_DisableFifoMode+0x66>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2201      	movs	r2, #1
 800c104:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2224      	movs	r2, #36	@ 0x24
 800c10c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	681a      	ldr	r2, [r3, #0]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f022 0201 	bic.w	r2, r2, #1
 800c126:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c12e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2200      	movs	r2, #0
 800c134:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	68fa      	ldr	r2, [r7, #12]
 800c13c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2220      	movs	r2, #32
 800c142:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2200      	movs	r2, #0
 800c14a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c14e:	2300      	movs	r3, #0
}
 800c150:	4618      	mov	r0, r3
 800c152:	3714      	adds	r7, #20
 800c154:	46bd      	mov	sp, r7
 800c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15a:	4770      	bx	lr

0800c15c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b084      	sub	sp, #16
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c16c:	2b01      	cmp	r3, #1
 800c16e:	d101      	bne.n	800c174 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c170:	2302      	movs	r3, #2
 800c172:	e02d      	b.n	800c1d0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2201      	movs	r2, #1
 800c178:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2224      	movs	r2, #36	@ 0x24
 800c180:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	681a      	ldr	r2, [r3, #0]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f022 0201 	bic.w	r2, r2, #1
 800c19a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	689b      	ldr	r3, [r3, #8]
 800c1a2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	683a      	ldr	r2, [r7, #0]
 800c1ac:	430a      	orrs	r2, r1
 800c1ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f000 f84f 	bl	800c254 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	68fa      	ldr	r2, [r7, #12]
 800c1bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2220      	movs	r2, #32
 800c1c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c1ce:	2300      	movs	r3, #0
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3710      	adds	r7, #16
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}

0800c1d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b084      	sub	sp, #16
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c1e8:	2b01      	cmp	r3, #1
 800c1ea:	d101      	bne.n	800c1f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c1ec:	2302      	movs	r3, #2
 800c1ee:	e02d      	b.n	800c24c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2224      	movs	r2, #36	@ 0x24
 800c1fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	681a      	ldr	r2, [r3, #0]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f022 0201 	bic.w	r2, r2, #1
 800c216:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	689b      	ldr	r3, [r3, #8]
 800c21e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	683a      	ldr	r2, [r7, #0]
 800c228:	430a      	orrs	r2, r1
 800c22a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f000 f811 	bl	800c254 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	68fa      	ldr	r2, [r7, #12]
 800c238:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2220      	movs	r2, #32
 800c23e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2200      	movs	r2, #0
 800c246:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c24a:	2300      	movs	r3, #0
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3710      	adds	r7, #16
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}

0800c254 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c254:	b480      	push	{r7}
 800c256:	b085      	sub	sp, #20
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c260:	2b00      	cmp	r3, #0
 800c262:	d108      	bne.n	800c276 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2201      	movs	r2, #1
 800c268:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2201      	movs	r2, #1
 800c270:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c274:	e031      	b.n	800c2da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c276:	2308      	movs	r3, #8
 800c278:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c27a:	2308      	movs	r3, #8
 800c27c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	689b      	ldr	r3, [r3, #8]
 800c284:	0e5b      	lsrs	r3, r3, #25
 800c286:	b2db      	uxtb	r3, r3
 800c288:	f003 0307 	and.w	r3, r3, #7
 800c28c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	689b      	ldr	r3, [r3, #8]
 800c294:	0f5b      	lsrs	r3, r3, #29
 800c296:	b2db      	uxtb	r3, r3
 800c298:	f003 0307 	and.w	r3, r3, #7
 800c29c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c29e:	7bbb      	ldrb	r3, [r7, #14]
 800c2a0:	7b3a      	ldrb	r2, [r7, #12]
 800c2a2:	4911      	ldr	r1, [pc, #68]	@ (800c2e8 <UARTEx_SetNbDataToProcess+0x94>)
 800c2a4:	5c8a      	ldrb	r2, [r1, r2]
 800c2a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c2aa:	7b3a      	ldrb	r2, [r7, #12]
 800c2ac:	490f      	ldr	r1, [pc, #60]	@ (800c2ec <UARTEx_SetNbDataToProcess+0x98>)
 800c2ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c2b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c2b4:	b29a      	uxth	r2, r3
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c2bc:	7bfb      	ldrb	r3, [r7, #15]
 800c2be:	7b7a      	ldrb	r2, [r7, #13]
 800c2c0:	4909      	ldr	r1, [pc, #36]	@ (800c2e8 <UARTEx_SetNbDataToProcess+0x94>)
 800c2c2:	5c8a      	ldrb	r2, [r1, r2]
 800c2c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c2c8:	7b7a      	ldrb	r2, [r7, #13]
 800c2ca:	4908      	ldr	r1, [pc, #32]	@ (800c2ec <UARTEx_SetNbDataToProcess+0x98>)
 800c2cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c2ce:	fb93 f3f2 	sdiv	r3, r3, r2
 800c2d2:	b29a      	uxth	r2, r3
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c2da:	bf00      	nop
 800c2dc:	3714      	adds	r7, #20
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e4:	4770      	bx	lr
 800c2e6:	bf00      	nop
 800c2e8:	08014a08 	.word	0x08014a08
 800c2ec:	08014a10 	.word	0x08014a10

0800c2f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b085      	sub	sp, #20
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c300:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c304:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	b29a      	uxth	r2, r3
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c310:	2300      	movs	r3, #0
}
 800c312:	4618      	mov	r0, r3
 800c314:	3714      	adds	r7, #20
 800c316:	46bd      	mov	sp, r7
 800c318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31c:	4770      	bx	lr

0800c31e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800c31e:	b480      	push	{r7}
 800c320:	b085      	sub	sp, #20
 800c322:	af00      	add	r7, sp, #0
 800c324:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c326:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c32a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800c332:	b29a      	uxth	r2, r3
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	b29b      	uxth	r3, r3
 800c338:	43db      	mvns	r3, r3
 800c33a:	b29b      	uxth	r3, r3
 800c33c:	4013      	ands	r3, r2
 800c33e:	b29a      	uxth	r2, r3
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c346:	2300      	movs	r3, #0
}
 800c348:	4618      	mov	r0, r3
 800c34a:	3714      	adds	r7, #20
 800c34c:	46bd      	mov	sp, r7
 800c34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c352:	4770      	bx	lr

0800c354 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c354:	b480      	push	{r7}
 800c356:	b085      	sub	sp, #20
 800c358:	af00      	add	r7, sp, #0
 800c35a:	60f8      	str	r0, [r7, #12]
 800c35c:	1d3b      	adds	r3, r7, #4
 800c35e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	2201      	movs	r2, #1
 800c366:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	2200      	movs	r2, #0
 800c36e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	2200      	movs	r2, #0
 800c376:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	2200      	movs	r2, #0
 800c37e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800c382:	2300      	movs	r3, #0
}
 800c384:	4618      	mov	r0, r3
 800c386:	3714      	adds	r7, #20
 800c388:	46bd      	mov	sp, r7
 800c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38e:	4770      	bx	lr

0800c390 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c390:	b480      	push	{r7}
 800c392:	b0a7      	sub	sp, #156	@ 0x9c
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800c39a:	2300      	movs	r3, #0
 800c39c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800c3a0:	687a      	ldr	r2, [r7, #4]
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	009b      	lsls	r3, r3, #2
 800c3a8:	4413      	add	r3, r2
 800c3aa:	881b      	ldrh	r3, [r3, #0]
 800c3ac:	b29b      	uxth	r3, r3
 800c3ae:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800c3b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3b6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	78db      	ldrb	r3, [r3, #3]
 800c3be:	2b03      	cmp	r3, #3
 800c3c0:	d81f      	bhi.n	800c402 <USB_ActivateEndpoint+0x72>
 800c3c2:	a201      	add	r2, pc, #4	@ (adr r2, 800c3c8 <USB_ActivateEndpoint+0x38>)
 800c3c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3c8:	0800c3d9 	.word	0x0800c3d9
 800c3cc:	0800c3f5 	.word	0x0800c3f5
 800c3d0:	0800c40b 	.word	0x0800c40b
 800c3d4:	0800c3e7 	.word	0x0800c3e7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800c3d8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800c3dc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c3e0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800c3e4:	e012      	b.n	800c40c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800c3e6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800c3ea:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800c3ee:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800c3f2:	e00b      	b.n	800c40c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800c3f4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800c3f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c3fc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800c400:	e004      	b.n	800c40c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800c402:	2301      	movs	r3, #1
 800c404:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800c408:	e000      	b.n	800c40c <USB_ActivateEndpoint+0x7c>
      break;
 800c40a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800c40c:	687a      	ldr	r2, [r7, #4]
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	009b      	lsls	r3, r3, #2
 800c414:	441a      	add	r2, r3
 800c416:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800c41a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c41e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c422:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c426:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c42a:	b29b      	uxth	r3, r3
 800c42c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800c42e:	687a      	ldr	r2, [r7, #4]
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	009b      	lsls	r3, r3, #2
 800c436:	4413      	add	r3, r2
 800c438:	881b      	ldrh	r3, [r3, #0]
 800c43a:	b29b      	uxth	r3, r3
 800c43c:	b21b      	sxth	r3, r3
 800c43e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c446:	b21a      	sxth	r2, r3
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	781b      	ldrb	r3, [r3, #0]
 800c44c:	b21b      	sxth	r3, r3
 800c44e:	4313      	orrs	r3, r2
 800c450:	b21b      	sxth	r3, r3
 800c452:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800c456:	687a      	ldr	r2, [r7, #4]
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	009b      	lsls	r3, r3, #2
 800c45e:	441a      	add	r2, r3
 800c460:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800c464:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c468:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c46c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c470:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c474:	b29b      	uxth	r3, r3
 800c476:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	7b1b      	ldrb	r3, [r3, #12]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	f040 8180 	bne.w	800c782 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	785b      	ldrb	r3, [r3, #1]
 800c486:	2b00      	cmp	r3, #0
 800c488:	f000 8084 	beq.w	800c594 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	61bb      	str	r3, [r7, #24]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c496:	b29b      	uxth	r3, r3
 800c498:	461a      	mov	r2, r3
 800c49a:	69bb      	ldr	r3, [r7, #24]
 800c49c:	4413      	add	r3, r2
 800c49e:	61bb      	str	r3, [r7, #24]
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	00da      	lsls	r2, r3, #3
 800c4a6:	69bb      	ldr	r3, [r7, #24]
 800c4a8:	4413      	add	r3, r2
 800c4aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c4ae:	617b      	str	r3, [r7, #20]
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	88db      	ldrh	r3, [r3, #6]
 800c4b4:	085b      	lsrs	r3, r3, #1
 800c4b6:	b29b      	uxth	r3, r3
 800c4b8:	005b      	lsls	r3, r3, #1
 800c4ba:	b29a      	uxth	r2, r3
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c4c0:	687a      	ldr	r2, [r7, #4]
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	781b      	ldrb	r3, [r3, #0]
 800c4c6:	009b      	lsls	r3, r3, #2
 800c4c8:	4413      	add	r3, r2
 800c4ca:	881b      	ldrh	r3, [r3, #0]
 800c4cc:	827b      	strh	r3, [r7, #18]
 800c4ce:	8a7b      	ldrh	r3, [r7, #18]
 800c4d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d01b      	beq.n	800c510 <USB_ActivateEndpoint+0x180>
 800c4d8:	687a      	ldr	r2, [r7, #4]
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	781b      	ldrb	r3, [r3, #0]
 800c4de:	009b      	lsls	r3, r3, #2
 800c4e0:	4413      	add	r3, r2
 800c4e2:	881b      	ldrh	r3, [r3, #0]
 800c4e4:	b29b      	uxth	r3, r3
 800c4e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c4ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4ee:	823b      	strh	r3, [r7, #16]
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	781b      	ldrb	r3, [r3, #0]
 800c4f6:	009b      	lsls	r3, r3, #2
 800c4f8:	441a      	add	r2, r3
 800c4fa:	8a3b      	ldrh	r3, [r7, #16]
 800c4fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c500:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c504:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c508:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c50c:	b29b      	uxth	r3, r3
 800c50e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	78db      	ldrb	r3, [r3, #3]
 800c514:	2b01      	cmp	r3, #1
 800c516:	d020      	beq.n	800c55a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c518:	687a      	ldr	r2, [r7, #4]
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	009b      	lsls	r3, r3, #2
 800c520:	4413      	add	r3, r2
 800c522:	881b      	ldrh	r3, [r3, #0]
 800c524:	b29b      	uxth	r3, r3
 800c526:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c52a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c52e:	81bb      	strh	r3, [r7, #12]
 800c530:	89bb      	ldrh	r3, [r7, #12]
 800c532:	f083 0320 	eor.w	r3, r3, #32
 800c536:	81bb      	strh	r3, [r7, #12]
 800c538:	687a      	ldr	r2, [r7, #4]
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	781b      	ldrb	r3, [r3, #0]
 800c53e:	009b      	lsls	r3, r3, #2
 800c540:	441a      	add	r2, r3
 800c542:	89bb      	ldrh	r3, [r7, #12]
 800c544:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c548:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c54c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c550:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c554:	b29b      	uxth	r3, r3
 800c556:	8013      	strh	r3, [r2, #0]
 800c558:	e3f9      	b.n	800cd4e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c55a:	687a      	ldr	r2, [r7, #4]
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	009b      	lsls	r3, r3, #2
 800c562:	4413      	add	r3, r2
 800c564:	881b      	ldrh	r3, [r3, #0]
 800c566:	b29b      	uxth	r3, r3
 800c568:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c56c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c570:	81fb      	strh	r3, [r7, #14]
 800c572:	687a      	ldr	r2, [r7, #4]
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	009b      	lsls	r3, r3, #2
 800c57a:	441a      	add	r2, r3
 800c57c:	89fb      	ldrh	r3, [r7, #14]
 800c57e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c582:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c586:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c58a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c58e:	b29b      	uxth	r3, r3
 800c590:	8013      	strh	r3, [r2, #0]
 800c592:	e3dc      	b.n	800cd4e <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	633b      	str	r3, [r7, #48]	@ 0x30
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c59e:	b29b      	uxth	r3, r3
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5a4:	4413      	add	r3, r2
 800c5a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	781b      	ldrb	r3, [r3, #0]
 800c5ac:	00da      	lsls	r2, r3, #3
 800c5ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5b0:	4413      	add	r3, r2
 800c5b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c5b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	88db      	ldrh	r3, [r3, #6]
 800c5bc:	085b      	lsrs	r3, r3, #1
 800c5be:	b29b      	uxth	r3, r3
 800c5c0:	005b      	lsls	r3, r3, #1
 800c5c2:	b29a      	uxth	r2, r3
 800c5c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5c6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c5d2:	b29b      	uxth	r3, r3
 800c5d4:	461a      	mov	r2, r3
 800c5d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5d8:	4413      	add	r3, r2
 800c5da:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	781b      	ldrb	r3, [r3, #0]
 800c5e0:	00da      	lsls	r2, r3, #3
 800c5e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5e4:	4413      	add	r3, r2
 800c5e6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c5ea:	627b      	str	r3, [r7, #36]	@ 0x24
 800c5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ee:	881b      	ldrh	r3, [r3, #0]
 800c5f0:	b29b      	uxth	r3, r3
 800c5f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c5f6:	b29a      	uxth	r2, r3
 800c5f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5fa:	801a      	strh	r2, [r3, #0]
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	691b      	ldr	r3, [r3, #16]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d10a      	bne.n	800c61a <USB_ActivateEndpoint+0x28a>
 800c604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c606:	881b      	ldrh	r3, [r3, #0]
 800c608:	b29b      	uxth	r3, r3
 800c60a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c60e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c612:	b29a      	uxth	r2, r3
 800c614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c616:	801a      	strh	r2, [r3, #0]
 800c618:	e041      	b.n	800c69e <USB_ActivateEndpoint+0x30e>
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	691b      	ldr	r3, [r3, #16]
 800c61e:	2b3e      	cmp	r3, #62	@ 0x3e
 800c620:	d81c      	bhi.n	800c65c <USB_ActivateEndpoint+0x2cc>
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	691b      	ldr	r3, [r3, #16]
 800c626:	085b      	lsrs	r3, r3, #1
 800c628:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	691b      	ldr	r3, [r3, #16]
 800c630:	f003 0301 	and.w	r3, r3, #1
 800c634:	2b00      	cmp	r3, #0
 800c636:	d004      	beq.n	800c642 <USB_ActivateEndpoint+0x2b2>
 800c638:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c63c:	3301      	adds	r3, #1
 800c63e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c644:	881b      	ldrh	r3, [r3, #0]
 800c646:	b29a      	uxth	r2, r3
 800c648:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c64c:	b29b      	uxth	r3, r3
 800c64e:	029b      	lsls	r3, r3, #10
 800c650:	b29b      	uxth	r3, r3
 800c652:	4313      	orrs	r3, r2
 800c654:	b29a      	uxth	r2, r3
 800c656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c658:	801a      	strh	r2, [r3, #0]
 800c65a:	e020      	b.n	800c69e <USB_ActivateEndpoint+0x30e>
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	691b      	ldr	r3, [r3, #16]
 800c660:	095b      	lsrs	r3, r3, #5
 800c662:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	691b      	ldr	r3, [r3, #16]
 800c66a:	f003 031f 	and.w	r3, r3, #31
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d104      	bne.n	800c67c <USB_ActivateEndpoint+0x2ec>
 800c672:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c676:	3b01      	subs	r3, #1
 800c678:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c67c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c67e:	881b      	ldrh	r3, [r3, #0]
 800c680:	b29a      	uxth	r2, r3
 800c682:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c686:	b29b      	uxth	r3, r3
 800c688:	029b      	lsls	r3, r3, #10
 800c68a:	b29b      	uxth	r3, r3
 800c68c:	4313      	orrs	r3, r2
 800c68e:	b29b      	uxth	r3, r3
 800c690:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c694:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c698:	b29a      	uxth	r2, r3
 800c69a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c69c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c69e:	687a      	ldr	r2, [r7, #4]
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	781b      	ldrb	r3, [r3, #0]
 800c6a4:	009b      	lsls	r3, r3, #2
 800c6a6:	4413      	add	r3, r2
 800c6a8:	881b      	ldrh	r3, [r3, #0]
 800c6aa:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c6ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c6ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d01b      	beq.n	800c6ee <USB_ActivateEndpoint+0x35e>
 800c6b6:	687a      	ldr	r2, [r7, #4]
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	009b      	lsls	r3, r3, #2
 800c6be:	4413      	add	r3, r2
 800c6c0:	881b      	ldrh	r3, [r3, #0]
 800c6c2:	b29b      	uxth	r3, r3
 800c6c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c6c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6cc:	843b      	strh	r3, [r7, #32]
 800c6ce:	687a      	ldr	r2, [r7, #4]
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	009b      	lsls	r3, r3, #2
 800c6d6:	441a      	add	r2, r3
 800c6d8:	8c3b      	ldrh	r3, [r7, #32]
 800c6da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c6de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c6e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c6e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6ea:	b29b      	uxth	r3, r3
 800c6ec:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	781b      	ldrb	r3, [r3, #0]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d124      	bne.n	800c740 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c6f6:	687a      	ldr	r2, [r7, #4]
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	009b      	lsls	r3, r3, #2
 800c6fe:	4413      	add	r3, r2
 800c700:	881b      	ldrh	r3, [r3, #0]
 800c702:	b29b      	uxth	r3, r3
 800c704:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c708:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c70c:	83bb      	strh	r3, [r7, #28]
 800c70e:	8bbb      	ldrh	r3, [r7, #28]
 800c710:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c714:	83bb      	strh	r3, [r7, #28]
 800c716:	8bbb      	ldrh	r3, [r7, #28]
 800c718:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c71c:	83bb      	strh	r3, [r7, #28]
 800c71e:	687a      	ldr	r2, [r7, #4]
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	009b      	lsls	r3, r3, #2
 800c726:	441a      	add	r2, r3
 800c728:	8bbb      	ldrh	r3, [r7, #28]
 800c72a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c72e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c732:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c73a:	b29b      	uxth	r3, r3
 800c73c:	8013      	strh	r3, [r2, #0]
 800c73e:	e306      	b.n	800cd4e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c740:	687a      	ldr	r2, [r7, #4]
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	009b      	lsls	r3, r3, #2
 800c748:	4413      	add	r3, r2
 800c74a:	881b      	ldrh	r3, [r3, #0]
 800c74c:	b29b      	uxth	r3, r3
 800c74e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c756:	83fb      	strh	r3, [r7, #30]
 800c758:	8bfb      	ldrh	r3, [r7, #30]
 800c75a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c75e:	83fb      	strh	r3, [r7, #30]
 800c760:	687a      	ldr	r2, [r7, #4]
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	009b      	lsls	r3, r3, #2
 800c768:	441a      	add	r2, r3
 800c76a:	8bfb      	ldrh	r3, [r7, #30]
 800c76c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c770:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c774:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c778:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c77c:	b29b      	uxth	r3, r3
 800c77e:	8013      	strh	r3, [r2, #0]
 800c780:	e2e5      	b.n	800cd4e <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	78db      	ldrb	r3, [r3, #3]
 800c786:	2b02      	cmp	r3, #2
 800c788:	d11e      	bne.n	800c7c8 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c78a:	687a      	ldr	r2, [r7, #4]
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	781b      	ldrb	r3, [r3, #0]
 800c790:	009b      	lsls	r3, r3, #2
 800c792:	4413      	add	r3, r2
 800c794:	881b      	ldrh	r3, [r3, #0]
 800c796:	b29b      	uxth	r3, r3
 800c798:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c79c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7a0:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	009b      	lsls	r3, r3, #2
 800c7ac:	441a      	add	r2, r3
 800c7ae:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800c7b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7ba:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c7be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7c2:	b29b      	uxth	r3, r3
 800c7c4:	8013      	strh	r3, [r2, #0]
 800c7c6:	e01d      	b.n	800c804 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c7c8:	687a      	ldr	r2, [r7, #4]
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	781b      	ldrb	r3, [r3, #0]
 800c7ce:	009b      	lsls	r3, r3, #2
 800c7d0:	4413      	add	r3, r2
 800c7d2:	881b      	ldrh	r3, [r3, #0]
 800c7d4:	b29b      	uxth	r3, r3
 800c7d6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c7da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7de:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	781b      	ldrb	r3, [r3, #0]
 800c7e8:	009b      	lsls	r3, r3, #2
 800c7ea:	441a      	add	r2, r3
 800c7ec:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800c7f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c800:	b29b      	uxth	r3, r3
 800c802:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c80e:	b29b      	uxth	r3, r3
 800c810:	461a      	mov	r2, r3
 800c812:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c814:	4413      	add	r3, r2
 800c816:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	781b      	ldrb	r3, [r3, #0]
 800c81c:	00da      	lsls	r2, r3, #3
 800c81e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c820:	4413      	add	r3, r2
 800c822:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c826:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	891b      	ldrh	r3, [r3, #8]
 800c82c:	085b      	lsrs	r3, r3, #1
 800c82e:	b29b      	uxth	r3, r3
 800c830:	005b      	lsls	r3, r3, #1
 800c832:	b29a      	uxth	r2, r3
 800c834:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c836:	801a      	strh	r2, [r3, #0]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	677b      	str	r3, [r7, #116]	@ 0x74
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c842:	b29b      	uxth	r3, r3
 800c844:	461a      	mov	r2, r3
 800c846:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c848:	4413      	add	r3, r2
 800c84a:	677b      	str	r3, [r7, #116]	@ 0x74
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	781b      	ldrb	r3, [r3, #0]
 800c850:	00da      	lsls	r2, r3, #3
 800c852:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c854:	4413      	add	r3, r2
 800c856:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c85a:	673b      	str	r3, [r7, #112]	@ 0x70
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	895b      	ldrh	r3, [r3, #10]
 800c860:	085b      	lsrs	r3, r3, #1
 800c862:	b29b      	uxth	r3, r3
 800c864:	005b      	lsls	r3, r3, #1
 800c866:	b29a      	uxth	r2, r3
 800c868:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c86a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	785b      	ldrb	r3, [r3, #1]
 800c870:	2b00      	cmp	r3, #0
 800c872:	f040 81af 	bne.w	800cbd4 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	781b      	ldrb	r3, [r3, #0]
 800c87c:	009b      	lsls	r3, r3, #2
 800c87e:	4413      	add	r3, r2
 800c880:	881b      	ldrh	r3, [r3, #0]
 800c882:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800c886:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800c88a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d01d      	beq.n	800c8ce <USB_ActivateEndpoint+0x53e>
 800c892:	687a      	ldr	r2, [r7, #4]
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	781b      	ldrb	r3, [r3, #0]
 800c898:	009b      	lsls	r3, r3, #2
 800c89a:	4413      	add	r3, r2
 800c89c:	881b      	ldrh	r3, [r3, #0]
 800c89e:	b29b      	uxth	r3, r3
 800c8a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c8a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8a8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800c8ac:	687a      	ldr	r2, [r7, #4]
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	009b      	lsls	r3, r3, #2
 800c8b4:	441a      	add	r2, r3
 800c8b6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800c8ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c8be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c8c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c8c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8ca:	b29b      	uxth	r3, r3
 800c8cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c8ce:	687a      	ldr	r2, [r7, #4]
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	781b      	ldrb	r3, [r3, #0]
 800c8d4:	009b      	lsls	r3, r3, #2
 800c8d6:	4413      	add	r3, r2
 800c8d8:	881b      	ldrh	r3, [r3, #0]
 800c8da:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800c8de:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800c8e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d01d      	beq.n	800c926 <USB_ActivateEndpoint+0x596>
 800c8ea:	687a      	ldr	r2, [r7, #4]
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	009b      	lsls	r3, r3, #2
 800c8f2:	4413      	add	r3, r2
 800c8f4:	881b      	ldrh	r3, [r3, #0]
 800c8f6:	b29b      	uxth	r3, r3
 800c8f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c8fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c900:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	781b      	ldrb	r3, [r3, #0]
 800c90a:	009b      	lsls	r3, r3, #2
 800c90c:	441a      	add	r2, r3
 800c90e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800c912:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c916:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c91a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c91e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c922:	b29b      	uxth	r3, r3
 800c924:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	785b      	ldrb	r3, [r3, #1]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d16b      	bne.n	800ca06 <USB_ActivateEndpoint+0x676>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c938:	b29b      	uxth	r3, r3
 800c93a:	461a      	mov	r2, r3
 800c93c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c93e:	4413      	add	r3, r2
 800c940:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	00da      	lsls	r2, r3, #3
 800c948:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c94a:	4413      	add	r3, r2
 800c94c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c950:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c952:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c954:	881b      	ldrh	r3, [r3, #0]
 800c956:	b29b      	uxth	r3, r3
 800c958:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c95c:	b29a      	uxth	r2, r3
 800c95e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c960:	801a      	strh	r2, [r3, #0]
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	691b      	ldr	r3, [r3, #16]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d10a      	bne.n	800c980 <USB_ActivateEndpoint+0x5f0>
 800c96a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c96c:	881b      	ldrh	r3, [r3, #0]
 800c96e:	b29b      	uxth	r3, r3
 800c970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c978:	b29a      	uxth	r2, r3
 800c97a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c97c:	801a      	strh	r2, [r3, #0]
 800c97e:	e05d      	b.n	800ca3c <USB_ActivateEndpoint+0x6ac>
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	691b      	ldr	r3, [r3, #16]
 800c984:	2b3e      	cmp	r3, #62	@ 0x3e
 800c986:	d81c      	bhi.n	800c9c2 <USB_ActivateEndpoint+0x632>
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	691b      	ldr	r3, [r3, #16]
 800c98c:	085b      	lsrs	r3, r3, #1
 800c98e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	691b      	ldr	r3, [r3, #16]
 800c996:	f003 0301 	and.w	r3, r3, #1
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d004      	beq.n	800c9a8 <USB_ActivateEndpoint+0x618>
 800c99e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c9a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9aa:	881b      	ldrh	r3, [r3, #0]
 800c9ac:	b29a      	uxth	r2, r3
 800c9ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c9b2:	b29b      	uxth	r3, r3
 800c9b4:	029b      	lsls	r3, r3, #10
 800c9b6:	b29b      	uxth	r3, r3
 800c9b8:	4313      	orrs	r3, r2
 800c9ba:	b29a      	uxth	r2, r3
 800c9bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9be:	801a      	strh	r2, [r3, #0]
 800c9c0:	e03c      	b.n	800ca3c <USB_ActivateEndpoint+0x6ac>
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	691b      	ldr	r3, [r3, #16]
 800c9c6:	095b      	lsrs	r3, r3, #5
 800c9c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	691b      	ldr	r3, [r3, #16]
 800c9d0:	f003 031f 	and.w	r3, r3, #31
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d104      	bne.n	800c9e2 <USB_ActivateEndpoint+0x652>
 800c9d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c9dc:	3b01      	subs	r3, #1
 800c9de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c9e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9e4:	881b      	ldrh	r3, [r3, #0]
 800c9e6:	b29a      	uxth	r2, r3
 800c9e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c9ec:	b29b      	uxth	r3, r3
 800c9ee:	029b      	lsls	r3, r3, #10
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	b29b      	uxth	r3, r3
 800c9f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c9fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c9fe:	b29a      	uxth	r2, r3
 800ca00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca02:	801a      	strh	r2, [r3, #0]
 800ca04:	e01a      	b.n	800ca3c <USB_ActivateEndpoint+0x6ac>
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	785b      	ldrb	r3, [r3, #1]
 800ca0a:	2b01      	cmp	r3, #1
 800ca0c:	d116      	bne.n	800ca3c <USB_ActivateEndpoint+0x6ac>
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	657b      	str	r3, [r7, #84]	@ 0x54
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ca18:	b29b      	uxth	r3, r3
 800ca1a:	461a      	mov	r2, r3
 800ca1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca1e:	4413      	add	r3, r2
 800ca20:	657b      	str	r3, [r7, #84]	@ 0x54
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	781b      	ldrb	r3, [r3, #0]
 800ca26:	00da      	lsls	r2, r3, #3
 800ca28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca2a:	4413      	add	r3, r2
 800ca2c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ca30:	653b      	str	r3, [r7, #80]	@ 0x50
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	691b      	ldr	r3, [r3, #16]
 800ca36:	b29a      	uxth	r2, r3
 800ca38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca3a:	801a      	strh	r2, [r3, #0]
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	785b      	ldrb	r3, [r3, #1]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d16b      	bne.n	800cb20 <USB_ActivateEndpoint+0x790>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ca52:	b29b      	uxth	r3, r3
 800ca54:	461a      	mov	r2, r3
 800ca56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca58:	4413      	add	r3, r2
 800ca5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	00da      	lsls	r2, r3, #3
 800ca62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca64:	4413      	add	r3, r2
 800ca66:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ca6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca6e:	881b      	ldrh	r3, [r3, #0]
 800ca70:	b29b      	uxth	r3, r3
 800ca72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ca76:	b29a      	uxth	r2, r3
 800ca78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca7a:	801a      	strh	r2, [r3, #0]
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	691b      	ldr	r3, [r3, #16]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d10a      	bne.n	800ca9a <USB_ActivateEndpoint+0x70a>
 800ca84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca86:	881b      	ldrh	r3, [r3, #0]
 800ca88:	b29b      	uxth	r3, r3
 800ca8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca92:	b29a      	uxth	r2, r3
 800ca94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca96:	801a      	strh	r2, [r3, #0]
 800ca98:	e05b      	b.n	800cb52 <USB_ActivateEndpoint+0x7c2>
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	691b      	ldr	r3, [r3, #16]
 800ca9e:	2b3e      	cmp	r3, #62	@ 0x3e
 800caa0:	d81c      	bhi.n	800cadc <USB_ActivateEndpoint+0x74c>
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	691b      	ldr	r3, [r3, #16]
 800caa6:	085b      	lsrs	r3, r3, #1
 800caa8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	691b      	ldr	r3, [r3, #16]
 800cab0:	f003 0301 	and.w	r3, r3, #1
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d004      	beq.n	800cac2 <USB_ActivateEndpoint+0x732>
 800cab8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cabc:	3301      	adds	r3, #1
 800cabe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800cac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cac4:	881b      	ldrh	r3, [r3, #0]
 800cac6:	b29a      	uxth	r2, r3
 800cac8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cacc:	b29b      	uxth	r3, r3
 800cace:	029b      	lsls	r3, r3, #10
 800cad0:	b29b      	uxth	r3, r3
 800cad2:	4313      	orrs	r3, r2
 800cad4:	b29a      	uxth	r2, r3
 800cad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cad8:	801a      	strh	r2, [r3, #0]
 800cada:	e03a      	b.n	800cb52 <USB_ActivateEndpoint+0x7c2>
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	691b      	ldr	r3, [r3, #16]
 800cae0:	095b      	lsrs	r3, r3, #5
 800cae2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	691b      	ldr	r3, [r3, #16]
 800caea:	f003 031f 	and.w	r3, r3, #31
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d104      	bne.n	800cafc <USB_ActivateEndpoint+0x76c>
 800caf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800caf6:	3b01      	subs	r3, #1
 800caf8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800cafc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cafe:	881b      	ldrh	r3, [r3, #0]
 800cb00:	b29a      	uxth	r2, r3
 800cb02:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cb06:	b29b      	uxth	r3, r3
 800cb08:	029b      	lsls	r3, r3, #10
 800cb0a:	b29b      	uxth	r3, r3
 800cb0c:	4313      	orrs	r3, r2
 800cb0e:	b29b      	uxth	r3, r3
 800cb10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb18:	b29a      	uxth	r2, r3
 800cb1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb1c:	801a      	strh	r2, [r3, #0]
 800cb1e:	e018      	b.n	800cb52 <USB_ActivateEndpoint+0x7c2>
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	785b      	ldrb	r3, [r3, #1]
 800cb24:	2b01      	cmp	r3, #1
 800cb26:	d114      	bne.n	800cb52 <USB_ActivateEndpoint+0x7c2>
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cb2e:	b29b      	uxth	r3, r3
 800cb30:	461a      	mov	r2, r3
 800cb32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb34:	4413      	add	r3, r2
 800cb36:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	00da      	lsls	r2, r3, #3
 800cb3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb40:	4413      	add	r3, r2
 800cb42:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cb46:	643b      	str	r3, [r7, #64]	@ 0x40
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	691b      	ldr	r3, [r3, #16]
 800cb4c:	b29a      	uxth	r2, r3
 800cb4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb50:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cb52:	687a      	ldr	r2, [r7, #4]
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	009b      	lsls	r3, r3, #2
 800cb5a:	4413      	add	r3, r2
 800cb5c:	881b      	ldrh	r3, [r3, #0]
 800cb5e:	b29b      	uxth	r3, r3
 800cb60:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cb64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb68:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cb6a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cb6c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800cb70:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cb72:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cb74:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800cb78:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cb7a:	687a      	ldr	r2, [r7, #4]
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	781b      	ldrb	r3, [r3, #0]
 800cb80:	009b      	lsls	r3, r3, #2
 800cb82:	441a      	add	r2, r3
 800cb84:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cb86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb96:	b29b      	uxth	r3, r3
 800cb98:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cb9a:	687a      	ldr	r2, [r7, #4]
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	781b      	ldrb	r3, [r3, #0]
 800cba0:	009b      	lsls	r3, r3, #2
 800cba2:	4413      	add	r3, r2
 800cba4:	881b      	ldrh	r3, [r3, #0]
 800cba6:	b29b      	uxth	r3, r3
 800cba8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cbac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cbb0:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800cbb2:	687a      	ldr	r2, [r7, #4]
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	781b      	ldrb	r3, [r3, #0]
 800cbb8:	009b      	lsls	r3, r3, #2
 800cbba:	441a      	add	r2, r3
 800cbbc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800cbbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cbc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cbc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cbca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbce:	b29b      	uxth	r3, r3
 800cbd0:	8013      	strh	r3, [r2, #0]
 800cbd2:	e0bc      	b.n	800cd4e <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cbd4:	687a      	ldr	r2, [r7, #4]
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	009b      	lsls	r3, r3, #2
 800cbdc:	4413      	add	r3, r2
 800cbde:	881b      	ldrh	r3, [r3, #0]
 800cbe0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800cbe4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800cbe8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d01d      	beq.n	800cc2c <USB_ActivateEndpoint+0x89c>
 800cbf0:	687a      	ldr	r2, [r7, #4]
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	009b      	lsls	r3, r3, #2
 800cbf8:	4413      	add	r3, r2
 800cbfa:	881b      	ldrh	r3, [r3, #0]
 800cbfc:	b29b      	uxth	r3, r3
 800cbfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cc02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc06:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800cc0a:	687a      	ldr	r2, [r7, #4]
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	781b      	ldrb	r3, [r3, #0]
 800cc10:	009b      	lsls	r3, r3, #2
 800cc12:	441a      	add	r2, r3
 800cc14:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800cc18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cc24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc28:	b29b      	uxth	r3, r3
 800cc2a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cc2c:	687a      	ldr	r2, [r7, #4]
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	781b      	ldrb	r3, [r3, #0]
 800cc32:	009b      	lsls	r3, r3, #2
 800cc34:	4413      	add	r3, r2
 800cc36:	881b      	ldrh	r3, [r3, #0]
 800cc38:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800cc3c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800cc40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d01d      	beq.n	800cc84 <USB_ActivateEndpoint+0x8f4>
 800cc48:	687a      	ldr	r2, [r7, #4]
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	781b      	ldrb	r3, [r3, #0]
 800cc4e:	009b      	lsls	r3, r3, #2
 800cc50:	4413      	add	r3, r2
 800cc52:	881b      	ldrh	r3, [r3, #0]
 800cc54:	b29b      	uxth	r3, r3
 800cc56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cc5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc5e:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800cc62:	687a      	ldr	r2, [r7, #4]
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	781b      	ldrb	r3, [r3, #0]
 800cc68:	009b      	lsls	r3, r3, #2
 800cc6a:	441a      	add	r2, r3
 800cc6c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800cc70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc7c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cc80:	b29b      	uxth	r3, r3
 800cc82:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	78db      	ldrb	r3, [r3, #3]
 800cc88:	2b01      	cmp	r3, #1
 800cc8a:	d024      	beq.n	800ccd6 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cc8c:	687a      	ldr	r2, [r7, #4]
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	781b      	ldrb	r3, [r3, #0]
 800cc92:	009b      	lsls	r3, r3, #2
 800cc94:	4413      	add	r3, r2
 800cc96:	881b      	ldrh	r3, [r3, #0]
 800cc98:	b29b      	uxth	r3, r3
 800cc9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cc9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cca2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800cca6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800ccaa:	f083 0320 	eor.w	r3, r3, #32
 800ccae:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800ccb2:	687a      	ldr	r2, [r7, #4]
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	009b      	lsls	r3, r3, #2
 800ccba:	441a      	add	r2, r3
 800ccbc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800ccc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ccc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ccc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cccc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccd0:	b29b      	uxth	r3, r3
 800ccd2:	8013      	strh	r3, [r2, #0]
 800ccd4:	e01d      	b.n	800cd12 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ccd6:	687a      	ldr	r2, [r7, #4]
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	781b      	ldrb	r3, [r3, #0]
 800ccdc:	009b      	lsls	r3, r3, #2
 800ccde:	4413      	add	r3, r2
 800cce0:	881b      	ldrh	r3, [r3, #0]
 800cce2:	b29b      	uxth	r3, r3
 800cce4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cce8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ccec:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800ccf0:	687a      	ldr	r2, [r7, #4]
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	781b      	ldrb	r3, [r3, #0]
 800ccf6:	009b      	lsls	r3, r3, #2
 800ccf8:	441a      	add	r2, r3
 800ccfa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800ccfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cd0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd0e:	b29b      	uxth	r3, r3
 800cd10:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cd12:	687a      	ldr	r2, [r7, #4]
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	781b      	ldrb	r3, [r3, #0]
 800cd18:	009b      	lsls	r3, r3, #2
 800cd1a:	4413      	add	r3, r2
 800cd1c:	881b      	ldrh	r3, [r3, #0]
 800cd1e:	b29b      	uxth	r3, r3
 800cd20:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cd24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd28:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800cd2c:	687a      	ldr	r2, [r7, #4]
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	781b      	ldrb	r3, [r3, #0]
 800cd32:	009b      	lsls	r3, r3, #2
 800cd34:	441a      	add	r2, r3
 800cd36:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800cd3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cd46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd4a:	b29b      	uxth	r3, r3
 800cd4c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800cd4e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	379c      	adds	r7, #156	@ 0x9c
 800cd56:	46bd      	mov	sp, r7
 800cd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5c:	4770      	bx	lr
 800cd5e:	bf00      	nop

0800cd60 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cd60:	b480      	push	{r7}
 800cd62:	b08d      	sub	sp, #52	@ 0x34
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
 800cd68:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	7b1b      	ldrb	r3, [r3, #12]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	f040 808e 	bne.w	800ce90 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	785b      	ldrb	r3, [r3, #1]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d044      	beq.n	800ce06 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cd7c:	687a      	ldr	r2, [r7, #4]
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	781b      	ldrb	r3, [r3, #0]
 800cd82:	009b      	lsls	r3, r3, #2
 800cd84:	4413      	add	r3, r2
 800cd86:	881b      	ldrh	r3, [r3, #0]
 800cd88:	81bb      	strh	r3, [r7, #12]
 800cd8a:	89bb      	ldrh	r3, [r7, #12]
 800cd8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d01b      	beq.n	800cdcc <USB_DeactivateEndpoint+0x6c>
 800cd94:	687a      	ldr	r2, [r7, #4]
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	781b      	ldrb	r3, [r3, #0]
 800cd9a:	009b      	lsls	r3, r3, #2
 800cd9c:	4413      	add	r3, r2
 800cd9e:	881b      	ldrh	r3, [r3, #0]
 800cda0:	b29b      	uxth	r3, r3
 800cda2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cda6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cdaa:	817b      	strh	r3, [r7, #10]
 800cdac:	687a      	ldr	r2, [r7, #4]
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	781b      	ldrb	r3, [r3, #0]
 800cdb2:	009b      	lsls	r3, r3, #2
 800cdb4:	441a      	add	r2, r3
 800cdb6:	897b      	ldrh	r3, [r7, #10]
 800cdb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cdbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cdc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cdc4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cdc8:	b29b      	uxth	r3, r3
 800cdca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cdcc:	687a      	ldr	r2, [r7, #4]
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	781b      	ldrb	r3, [r3, #0]
 800cdd2:	009b      	lsls	r3, r3, #2
 800cdd4:	4413      	add	r3, r2
 800cdd6:	881b      	ldrh	r3, [r3, #0]
 800cdd8:	b29b      	uxth	r3, r3
 800cdda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cdde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cde2:	813b      	strh	r3, [r7, #8]
 800cde4:	687a      	ldr	r2, [r7, #4]
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	009b      	lsls	r3, r3, #2
 800cdec:	441a      	add	r2, r3
 800cdee:	893b      	ldrh	r3, [r7, #8]
 800cdf0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cdf4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cdf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cdfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce00:	b29b      	uxth	r3, r3
 800ce02:	8013      	strh	r3, [r2, #0]
 800ce04:	e192      	b.n	800d12c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ce06:	687a      	ldr	r2, [r7, #4]
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	781b      	ldrb	r3, [r3, #0]
 800ce0c:	009b      	lsls	r3, r3, #2
 800ce0e:	4413      	add	r3, r2
 800ce10:	881b      	ldrh	r3, [r3, #0]
 800ce12:	827b      	strh	r3, [r7, #18]
 800ce14:	8a7b      	ldrh	r3, [r7, #18]
 800ce16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d01b      	beq.n	800ce56 <USB_DeactivateEndpoint+0xf6>
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	009b      	lsls	r3, r3, #2
 800ce26:	4413      	add	r3, r2
 800ce28:	881b      	ldrh	r3, [r3, #0]
 800ce2a:	b29b      	uxth	r3, r3
 800ce2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ce30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce34:	823b      	strh	r3, [r7, #16]
 800ce36:	687a      	ldr	r2, [r7, #4]
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	009b      	lsls	r3, r3, #2
 800ce3e:	441a      	add	r2, r3
 800ce40:	8a3b      	ldrh	r3, [r7, #16]
 800ce42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ce4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce52:	b29b      	uxth	r3, r3
 800ce54:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ce56:	687a      	ldr	r2, [r7, #4]
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	781b      	ldrb	r3, [r3, #0]
 800ce5c:	009b      	lsls	r3, r3, #2
 800ce5e:	4413      	add	r3, r2
 800ce60:	881b      	ldrh	r3, [r3, #0]
 800ce62:	b29b      	uxth	r3, r3
 800ce64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ce68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce6c:	81fb      	strh	r3, [r7, #14]
 800ce6e:	687a      	ldr	r2, [r7, #4]
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	781b      	ldrb	r3, [r3, #0]
 800ce74:	009b      	lsls	r3, r3, #2
 800ce76:	441a      	add	r2, r3
 800ce78:	89fb      	ldrh	r3, [r7, #14]
 800ce7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ce86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce8a:	b29b      	uxth	r3, r3
 800ce8c:	8013      	strh	r3, [r2, #0]
 800ce8e:	e14d      	b.n	800d12c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	785b      	ldrb	r3, [r3, #1]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	f040 80a5 	bne.w	800cfe4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ce9a:	687a      	ldr	r2, [r7, #4]
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	781b      	ldrb	r3, [r3, #0]
 800cea0:	009b      	lsls	r3, r3, #2
 800cea2:	4413      	add	r3, r2
 800cea4:	881b      	ldrh	r3, [r3, #0]
 800cea6:	843b      	strh	r3, [r7, #32]
 800cea8:	8c3b      	ldrh	r3, [r7, #32]
 800ceaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d01b      	beq.n	800ceea <USB_DeactivateEndpoint+0x18a>
 800ceb2:	687a      	ldr	r2, [r7, #4]
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	781b      	ldrb	r3, [r3, #0]
 800ceb8:	009b      	lsls	r3, r3, #2
 800ceba:	4413      	add	r3, r2
 800cebc:	881b      	ldrh	r3, [r3, #0]
 800cebe:	b29b      	uxth	r3, r3
 800cec0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cec4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cec8:	83fb      	strh	r3, [r7, #30]
 800ceca:	687a      	ldr	r2, [r7, #4]
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	781b      	ldrb	r3, [r3, #0]
 800ced0:	009b      	lsls	r3, r3, #2
 800ced2:	441a      	add	r2, r3
 800ced4:	8bfb      	ldrh	r3, [r7, #30]
 800ced6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ceda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cede:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cee6:	b29b      	uxth	r3, r3
 800cee8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ceea:	687a      	ldr	r2, [r7, #4]
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	009b      	lsls	r3, r3, #2
 800cef2:	4413      	add	r3, r2
 800cef4:	881b      	ldrh	r3, [r3, #0]
 800cef6:	83bb      	strh	r3, [r7, #28]
 800cef8:	8bbb      	ldrh	r3, [r7, #28]
 800cefa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d01b      	beq.n	800cf3a <USB_DeactivateEndpoint+0x1da>
 800cf02:	687a      	ldr	r2, [r7, #4]
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	781b      	ldrb	r3, [r3, #0]
 800cf08:	009b      	lsls	r3, r3, #2
 800cf0a:	4413      	add	r3, r2
 800cf0c:	881b      	ldrh	r3, [r3, #0]
 800cf0e:	b29b      	uxth	r3, r3
 800cf10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cf14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf18:	837b      	strh	r3, [r7, #26]
 800cf1a:	687a      	ldr	r2, [r7, #4]
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	781b      	ldrb	r3, [r3, #0]
 800cf20:	009b      	lsls	r3, r3, #2
 800cf22:	441a      	add	r2, r3
 800cf24:	8b7b      	ldrh	r3, [r7, #26]
 800cf26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cf2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cf2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf32:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cf36:	b29b      	uxth	r3, r3
 800cf38:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800cf3a:	687a      	ldr	r2, [r7, #4]
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	781b      	ldrb	r3, [r3, #0]
 800cf40:	009b      	lsls	r3, r3, #2
 800cf42:	4413      	add	r3, r2
 800cf44:	881b      	ldrh	r3, [r3, #0]
 800cf46:	b29b      	uxth	r3, r3
 800cf48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cf4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf50:	833b      	strh	r3, [r7, #24]
 800cf52:	687a      	ldr	r2, [r7, #4]
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	781b      	ldrb	r3, [r3, #0]
 800cf58:	009b      	lsls	r3, r3, #2
 800cf5a:	441a      	add	r2, r3
 800cf5c:	8b3b      	ldrh	r3, [r7, #24]
 800cf5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cf62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cf66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf6a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cf6e:	b29b      	uxth	r3, r3
 800cf70:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cf72:	687a      	ldr	r2, [r7, #4]
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	781b      	ldrb	r3, [r3, #0]
 800cf78:	009b      	lsls	r3, r3, #2
 800cf7a:	4413      	add	r3, r2
 800cf7c:	881b      	ldrh	r3, [r3, #0]
 800cf7e:	b29b      	uxth	r3, r3
 800cf80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cf84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf88:	82fb      	strh	r3, [r7, #22]
 800cf8a:	687a      	ldr	r2, [r7, #4]
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	781b      	ldrb	r3, [r3, #0]
 800cf90:	009b      	lsls	r3, r3, #2
 800cf92:	441a      	add	r2, r3
 800cf94:	8afb      	ldrh	r3, [r7, #22]
 800cf96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cf9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cf9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cfa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfa6:	b29b      	uxth	r3, r3
 800cfa8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cfaa:	687a      	ldr	r2, [r7, #4]
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	781b      	ldrb	r3, [r3, #0]
 800cfb0:	009b      	lsls	r3, r3, #2
 800cfb2:	4413      	add	r3, r2
 800cfb4:	881b      	ldrh	r3, [r3, #0]
 800cfb6:	b29b      	uxth	r3, r3
 800cfb8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cfbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cfc0:	82bb      	strh	r3, [r7, #20]
 800cfc2:	687a      	ldr	r2, [r7, #4]
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	781b      	ldrb	r3, [r3, #0]
 800cfc8:	009b      	lsls	r3, r3, #2
 800cfca:	441a      	add	r2, r3
 800cfcc:	8abb      	ldrh	r3, [r7, #20]
 800cfce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cfd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cfd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cfda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfde:	b29b      	uxth	r3, r3
 800cfe0:	8013      	strh	r3, [r2, #0]
 800cfe2:	e0a3      	b.n	800d12c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cfe4:	687a      	ldr	r2, [r7, #4]
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	781b      	ldrb	r3, [r3, #0]
 800cfea:	009b      	lsls	r3, r3, #2
 800cfec:	4413      	add	r3, r2
 800cfee:	881b      	ldrh	r3, [r3, #0]
 800cff0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800cff2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cff4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d01b      	beq.n	800d034 <USB_DeactivateEndpoint+0x2d4>
 800cffc:	687a      	ldr	r2, [r7, #4]
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	781b      	ldrb	r3, [r3, #0]
 800d002:	009b      	lsls	r3, r3, #2
 800d004:	4413      	add	r3, r2
 800d006:	881b      	ldrh	r3, [r3, #0]
 800d008:	b29b      	uxth	r3, r3
 800d00a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d00e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d012:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800d014:	687a      	ldr	r2, [r7, #4]
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	781b      	ldrb	r3, [r3, #0]
 800d01a:	009b      	lsls	r3, r3, #2
 800d01c:	441a      	add	r2, r3
 800d01e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d020:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d024:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d028:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d02c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d030:	b29b      	uxth	r3, r3
 800d032:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d034:	687a      	ldr	r2, [r7, #4]
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	781b      	ldrb	r3, [r3, #0]
 800d03a:	009b      	lsls	r3, r3, #2
 800d03c:	4413      	add	r3, r2
 800d03e:	881b      	ldrh	r3, [r3, #0]
 800d040:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800d042:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d01b      	beq.n	800d084 <USB_DeactivateEndpoint+0x324>
 800d04c:	687a      	ldr	r2, [r7, #4]
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	781b      	ldrb	r3, [r3, #0]
 800d052:	009b      	lsls	r3, r3, #2
 800d054:	4413      	add	r3, r2
 800d056:	881b      	ldrh	r3, [r3, #0]
 800d058:	b29b      	uxth	r3, r3
 800d05a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d05e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d062:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d064:	687a      	ldr	r2, [r7, #4]
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	781b      	ldrb	r3, [r3, #0]
 800d06a:	009b      	lsls	r3, r3, #2
 800d06c:	441a      	add	r2, r3
 800d06e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d070:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d074:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d078:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d07c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d080:	b29b      	uxth	r3, r3
 800d082:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	781b      	ldrb	r3, [r3, #0]
 800d08a:	009b      	lsls	r3, r3, #2
 800d08c:	4413      	add	r3, r2
 800d08e:	881b      	ldrh	r3, [r3, #0]
 800d090:	b29b      	uxth	r3, r3
 800d092:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d09a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800d09c:	687a      	ldr	r2, [r7, #4]
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	781b      	ldrb	r3, [r3, #0]
 800d0a2:	009b      	lsls	r3, r3, #2
 800d0a4:	441a      	add	r2, r3
 800d0a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d0a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d0ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d0b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d0b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0b8:	b29b      	uxth	r3, r3
 800d0ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d0bc:	687a      	ldr	r2, [r7, #4]
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	781b      	ldrb	r3, [r3, #0]
 800d0c2:	009b      	lsls	r3, r3, #2
 800d0c4:	4413      	add	r3, r2
 800d0c6:	881b      	ldrh	r3, [r3, #0]
 800d0c8:	b29b      	uxth	r3, r3
 800d0ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d0ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d0d2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800d0d4:	687a      	ldr	r2, [r7, #4]
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	781b      	ldrb	r3, [r3, #0]
 800d0da:	009b      	lsls	r3, r3, #2
 800d0dc:	441a      	add	r2, r3
 800d0de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d0e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d0e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d0e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d0ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0f0:	b29b      	uxth	r3, r3
 800d0f2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d0f4:	687a      	ldr	r2, [r7, #4]
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	781b      	ldrb	r3, [r3, #0]
 800d0fa:	009b      	lsls	r3, r3, #2
 800d0fc:	4413      	add	r3, r2
 800d0fe:	881b      	ldrh	r3, [r3, #0]
 800d100:	b29b      	uxth	r3, r3
 800d102:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d10a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800d10c:	687a      	ldr	r2, [r7, #4]
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	781b      	ldrb	r3, [r3, #0]
 800d112:	009b      	lsls	r3, r3, #2
 800d114:	441a      	add	r2, r3
 800d116:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d118:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d11c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d120:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d124:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d128:	b29b      	uxth	r3, r3
 800d12a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800d12c:	2300      	movs	r3, #0
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3734      	adds	r7, #52	@ 0x34
 800d132:	46bd      	mov	sp, r7
 800d134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d138:	4770      	bx	lr

0800d13a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d13a:	b580      	push	{r7, lr}
 800d13c:	b0ac      	sub	sp, #176	@ 0xb0
 800d13e:	af00      	add	r7, sp, #0
 800d140:	6078      	str	r0, [r7, #4]
 800d142:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	785b      	ldrb	r3, [r3, #1]
 800d148:	2b01      	cmp	r3, #1
 800d14a:	f040 84ca 	bne.w	800dae2 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	699a      	ldr	r2, [r3, #24]
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	691b      	ldr	r3, [r3, #16]
 800d156:	429a      	cmp	r2, r3
 800d158:	d904      	bls.n	800d164 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	691b      	ldr	r3, [r3, #16]
 800d15e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d162:	e003      	b.n	800d16c <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	699b      	ldr	r3, [r3, #24]
 800d168:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	7b1b      	ldrb	r3, [r3, #12]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d122      	bne.n	800d1ba <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	6959      	ldr	r1, [r3, #20]
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	88da      	ldrh	r2, [r3, #6]
 800d17c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d180:	b29b      	uxth	r3, r3
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f000 febd 	bl	800df02 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	613b      	str	r3, [r7, #16]
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d192:	b29b      	uxth	r3, r3
 800d194:	461a      	mov	r2, r3
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	4413      	add	r3, r2
 800d19a:	613b      	str	r3, [r7, #16]
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	781b      	ldrb	r3, [r3, #0]
 800d1a0:	00da      	lsls	r2, r3, #3
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	4413      	add	r3, r2
 800d1a6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d1aa:	60fb      	str	r3, [r7, #12]
 800d1ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1b0:	b29a      	uxth	r2, r3
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	801a      	strh	r2, [r3, #0]
 800d1b6:	f000 bc6f 	b.w	800da98 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	78db      	ldrb	r3, [r3, #3]
 800d1be:	2b02      	cmp	r3, #2
 800d1c0:	f040 831e 	bne.w	800d800 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	6a1a      	ldr	r2, [r3, #32]
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	691b      	ldr	r3, [r3, #16]
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	f240 82cf 	bls.w	800d770 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d1d2:	687a      	ldr	r2, [r7, #4]
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	781b      	ldrb	r3, [r3, #0]
 800d1d8:	009b      	lsls	r3, r3, #2
 800d1da:	4413      	add	r3, r2
 800d1dc:	881b      	ldrh	r3, [r3, #0]
 800d1de:	b29b      	uxth	r3, r3
 800d1e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d1e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d1e8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800d1ec:	687a      	ldr	r2, [r7, #4]
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	781b      	ldrb	r3, [r3, #0]
 800d1f2:	009b      	lsls	r3, r3, #2
 800d1f4:	441a      	add	r2, r3
 800d1f6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800d1fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d1fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d202:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800d206:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d20a:	b29b      	uxth	r3, r3
 800d20c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	6a1a      	ldr	r2, [r3, #32]
 800d212:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d216:	1ad2      	subs	r2, r2, r3
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d21c:	687a      	ldr	r2, [r7, #4]
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	781b      	ldrb	r3, [r3, #0]
 800d222:	009b      	lsls	r3, r3, #2
 800d224:	4413      	add	r3, r2
 800d226:	881b      	ldrh	r3, [r3, #0]
 800d228:	b29b      	uxth	r3, r3
 800d22a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d22e:	2b00      	cmp	r3, #0
 800d230:	f000 814f 	beq.w	800d4d2 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	633b      	str	r3, [r7, #48]	@ 0x30
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	785b      	ldrb	r3, [r3, #1]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d16b      	bne.n	800d318 <USB_EPStartXfer+0x1de>
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d24a:	b29b      	uxth	r3, r3
 800d24c:	461a      	mov	r2, r3
 800d24e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d250:	4413      	add	r3, r2
 800d252:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	781b      	ldrb	r3, [r3, #0]
 800d258:	00da      	lsls	r2, r3, #3
 800d25a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d25c:	4413      	add	r3, r2
 800d25e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d262:	627b      	str	r3, [r7, #36]	@ 0x24
 800d264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d266:	881b      	ldrh	r3, [r3, #0]
 800d268:	b29b      	uxth	r3, r3
 800d26a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d26e:	b29a      	uxth	r2, r3
 800d270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d272:	801a      	strh	r2, [r3, #0]
 800d274:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d10a      	bne.n	800d292 <USB_EPStartXfer+0x158>
 800d27c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d27e:	881b      	ldrh	r3, [r3, #0]
 800d280:	b29b      	uxth	r3, r3
 800d282:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d286:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d28a:	b29a      	uxth	r2, r3
 800d28c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d28e:	801a      	strh	r2, [r3, #0]
 800d290:	e05b      	b.n	800d34a <USB_EPStartXfer+0x210>
 800d292:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d296:	2b3e      	cmp	r3, #62	@ 0x3e
 800d298:	d81c      	bhi.n	800d2d4 <USB_EPStartXfer+0x19a>
 800d29a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d29e:	085b      	lsrs	r3, r3, #1
 800d2a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d2a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d2a8:	f003 0301 	and.w	r3, r3, #1
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d004      	beq.n	800d2ba <USB_EPStartXfer+0x180>
 800d2b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d2b4:	3301      	adds	r3, #1
 800d2b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2bc:	881b      	ldrh	r3, [r3, #0]
 800d2be:	b29a      	uxth	r2, r3
 800d2c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d2c4:	b29b      	uxth	r3, r3
 800d2c6:	029b      	lsls	r3, r3, #10
 800d2c8:	b29b      	uxth	r3, r3
 800d2ca:	4313      	orrs	r3, r2
 800d2cc:	b29a      	uxth	r2, r3
 800d2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2d0:	801a      	strh	r2, [r3, #0]
 800d2d2:	e03a      	b.n	800d34a <USB_EPStartXfer+0x210>
 800d2d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d2d8:	095b      	lsrs	r3, r3, #5
 800d2da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d2de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d2e2:	f003 031f 	and.w	r3, r3, #31
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d104      	bne.n	800d2f4 <USB_EPStartXfer+0x1ba>
 800d2ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d2ee:	3b01      	subs	r3, #1
 800d2f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d2f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2f6:	881b      	ldrh	r3, [r3, #0]
 800d2f8:	b29a      	uxth	r2, r3
 800d2fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d2fe:	b29b      	uxth	r3, r3
 800d300:	029b      	lsls	r3, r3, #10
 800d302:	b29b      	uxth	r3, r3
 800d304:	4313      	orrs	r3, r2
 800d306:	b29b      	uxth	r3, r3
 800d308:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d30c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d310:	b29a      	uxth	r2, r3
 800d312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d314:	801a      	strh	r2, [r3, #0]
 800d316:	e018      	b.n	800d34a <USB_EPStartXfer+0x210>
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	785b      	ldrb	r3, [r3, #1]
 800d31c:	2b01      	cmp	r3, #1
 800d31e:	d114      	bne.n	800d34a <USB_EPStartXfer+0x210>
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d326:	b29b      	uxth	r3, r3
 800d328:	461a      	mov	r2, r3
 800d32a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d32c:	4413      	add	r3, r2
 800d32e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	781b      	ldrb	r3, [r3, #0]
 800d334:	00da      	lsls	r2, r3, #3
 800d336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d338:	4413      	add	r3, r2
 800d33a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d33e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d340:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d344:	b29a      	uxth	r2, r3
 800d346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d348:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	895b      	ldrh	r3, [r3, #10]
 800d34e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	6959      	ldr	r1, [r3, #20]
 800d356:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d35a:	b29b      	uxth	r3, r3
 800d35c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d360:	6878      	ldr	r0, [r7, #4]
 800d362:	f000 fdce 	bl	800df02 <USB_WritePMA>
            ep->xfer_buff += len;
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	695a      	ldr	r2, [r3, #20]
 800d36a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d36e:	441a      	add	r2, r3
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	6a1a      	ldr	r2, [r3, #32]
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	691b      	ldr	r3, [r3, #16]
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d907      	bls.n	800d390 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	6a1a      	ldr	r2, [r3, #32]
 800d384:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d388:	1ad2      	subs	r2, r2, r3
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	621a      	str	r2, [r3, #32]
 800d38e:	e006      	b.n	800d39e <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	6a1b      	ldr	r3, [r3, #32]
 800d394:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	2200      	movs	r2, #0
 800d39c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	785b      	ldrb	r3, [r3, #1]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d16b      	bne.n	800d47e <USB_EPStartXfer+0x344>
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	61bb      	str	r3, [r7, #24]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d3b0:	b29b      	uxth	r3, r3
 800d3b2:	461a      	mov	r2, r3
 800d3b4:	69bb      	ldr	r3, [r7, #24]
 800d3b6:	4413      	add	r3, r2
 800d3b8:	61bb      	str	r3, [r7, #24]
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	781b      	ldrb	r3, [r3, #0]
 800d3be:	00da      	lsls	r2, r3, #3
 800d3c0:	69bb      	ldr	r3, [r7, #24]
 800d3c2:	4413      	add	r3, r2
 800d3c4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d3c8:	617b      	str	r3, [r7, #20]
 800d3ca:	697b      	ldr	r3, [r7, #20]
 800d3cc:	881b      	ldrh	r3, [r3, #0]
 800d3ce:	b29b      	uxth	r3, r3
 800d3d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d3d4:	b29a      	uxth	r2, r3
 800d3d6:	697b      	ldr	r3, [r7, #20]
 800d3d8:	801a      	strh	r2, [r3, #0]
 800d3da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d10a      	bne.n	800d3f8 <USB_EPStartXfer+0x2be>
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	881b      	ldrh	r3, [r3, #0]
 800d3e6:	b29b      	uxth	r3, r3
 800d3e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d3ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d3f0:	b29a      	uxth	r2, r3
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	801a      	strh	r2, [r3, #0]
 800d3f6:	e05d      	b.n	800d4b4 <USB_EPStartXfer+0x37a>
 800d3f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d3fc:	2b3e      	cmp	r3, #62	@ 0x3e
 800d3fe:	d81c      	bhi.n	800d43a <USB_EPStartXfer+0x300>
 800d400:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d404:	085b      	lsrs	r3, r3, #1
 800d406:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d40a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d40e:	f003 0301 	and.w	r3, r3, #1
 800d412:	2b00      	cmp	r3, #0
 800d414:	d004      	beq.n	800d420 <USB_EPStartXfer+0x2e6>
 800d416:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d41a:	3301      	adds	r3, #1
 800d41c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	881b      	ldrh	r3, [r3, #0]
 800d424:	b29a      	uxth	r2, r3
 800d426:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d42a:	b29b      	uxth	r3, r3
 800d42c:	029b      	lsls	r3, r3, #10
 800d42e:	b29b      	uxth	r3, r3
 800d430:	4313      	orrs	r3, r2
 800d432:	b29a      	uxth	r2, r3
 800d434:	697b      	ldr	r3, [r7, #20]
 800d436:	801a      	strh	r2, [r3, #0]
 800d438:	e03c      	b.n	800d4b4 <USB_EPStartXfer+0x37a>
 800d43a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d43e:	095b      	lsrs	r3, r3, #5
 800d440:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d444:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d448:	f003 031f 	and.w	r3, r3, #31
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d104      	bne.n	800d45a <USB_EPStartXfer+0x320>
 800d450:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d454:	3b01      	subs	r3, #1
 800d456:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d45a:	697b      	ldr	r3, [r7, #20]
 800d45c:	881b      	ldrh	r3, [r3, #0]
 800d45e:	b29a      	uxth	r2, r3
 800d460:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d464:	b29b      	uxth	r3, r3
 800d466:	029b      	lsls	r3, r3, #10
 800d468:	b29b      	uxth	r3, r3
 800d46a:	4313      	orrs	r3, r2
 800d46c:	b29b      	uxth	r3, r3
 800d46e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d472:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d476:	b29a      	uxth	r2, r3
 800d478:	697b      	ldr	r3, [r7, #20]
 800d47a:	801a      	strh	r2, [r3, #0]
 800d47c:	e01a      	b.n	800d4b4 <USB_EPStartXfer+0x37a>
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	785b      	ldrb	r3, [r3, #1]
 800d482:	2b01      	cmp	r3, #1
 800d484:	d116      	bne.n	800d4b4 <USB_EPStartXfer+0x37a>
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	623b      	str	r3, [r7, #32]
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d490:	b29b      	uxth	r3, r3
 800d492:	461a      	mov	r2, r3
 800d494:	6a3b      	ldr	r3, [r7, #32]
 800d496:	4413      	add	r3, r2
 800d498:	623b      	str	r3, [r7, #32]
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	781b      	ldrb	r3, [r3, #0]
 800d49e:	00da      	lsls	r2, r3, #3
 800d4a0:	6a3b      	ldr	r3, [r7, #32]
 800d4a2:	4413      	add	r3, r2
 800d4a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d4a8:	61fb      	str	r3, [r7, #28]
 800d4aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d4ae:	b29a      	uxth	r2, r3
 800d4b0:	69fb      	ldr	r3, [r7, #28]
 800d4b2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	891b      	ldrh	r3, [r3, #8]
 800d4b8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	6959      	ldr	r1, [r3, #20]
 800d4c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d4c4:	b29b      	uxth	r3, r3
 800d4c6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f000 fd19 	bl	800df02 <USB_WritePMA>
 800d4d0:	e2e2      	b.n	800da98 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	785b      	ldrb	r3, [r3, #1]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d16b      	bne.n	800d5b2 <USB_EPStartXfer+0x478>
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d4e4:	b29b      	uxth	r3, r3
 800d4e6:	461a      	mov	r2, r3
 800d4e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d4ea:	4413      	add	r3, r2
 800d4ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	781b      	ldrb	r3, [r3, #0]
 800d4f2:	00da      	lsls	r2, r3, #3
 800d4f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d4f6:	4413      	add	r3, r2
 800d4f8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d4fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800d4fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d500:	881b      	ldrh	r3, [r3, #0]
 800d502:	b29b      	uxth	r3, r3
 800d504:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d508:	b29a      	uxth	r2, r3
 800d50a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d50c:	801a      	strh	r2, [r3, #0]
 800d50e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d512:	2b00      	cmp	r3, #0
 800d514:	d10a      	bne.n	800d52c <USB_EPStartXfer+0x3f2>
 800d516:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d518:	881b      	ldrh	r3, [r3, #0]
 800d51a:	b29b      	uxth	r3, r3
 800d51c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d520:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d524:	b29a      	uxth	r2, r3
 800d526:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d528:	801a      	strh	r2, [r3, #0]
 800d52a:	e05d      	b.n	800d5e8 <USB_EPStartXfer+0x4ae>
 800d52c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d530:	2b3e      	cmp	r3, #62	@ 0x3e
 800d532:	d81c      	bhi.n	800d56e <USB_EPStartXfer+0x434>
 800d534:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d538:	085b      	lsrs	r3, r3, #1
 800d53a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d53e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d542:	f003 0301 	and.w	r3, r3, #1
 800d546:	2b00      	cmp	r3, #0
 800d548:	d004      	beq.n	800d554 <USB_EPStartXfer+0x41a>
 800d54a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d54e:	3301      	adds	r3, #1
 800d550:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d554:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d556:	881b      	ldrh	r3, [r3, #0]
 800d558:	b29a      	uxth	r2, r3
 800d55a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d55e:	b29b      	uxth	r3, r3
 800d560:	029b      	lsls	r3, r3, #10
 800d562:	b29b      	uxth	r3, r3
 800d564:	4313      	orrs	r3, r2
 800d566:	b29a      	uxth	r2, r3
 800d568:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d56a:	801a      	strh	r2, [r3, #0]
 800d56c:	e03c      	b.n	800d5e8 <USB_EPStartXfer+0x4ae>
 800d56e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d572:	095b      	lsrs	r3, r3, #5
 800d574:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d578:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d57c:	f003 031f 	and.w	r3, r3, #31
 800d580:	2b00      	cmp	r3, #0
 800d582:	d104      	bne.n	800d58e <USB_EPStartXfer+0x454>
 800d584:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d588:	3b01      	subs	r3, #1
 800d58a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d58e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d590:	881b      	ldrh	r3, [r3, #0]
 800d592:	b29a      	uxth	r2, r3
 800d594:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d598:	b29b      	uxth	r3, r3
 800d59a:	029b      	lsls	r3, r3, #10
 800d59c:	b29b      	uxth	r3, r3
 800d59e:	4313      	orrs	r3, r2
 800d5a0:	b29b      	uxth	r3, r3
 800d5a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d5a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d5aa:	b29a      	uxth	r2, r3
 800d5ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d5ae:	801a      	strh	r2, [r3, #0]
 800d5b0:	e01a      	b.n	800d5e8 <USB_EPStartXfer+0x4ae>
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	785b      	ldrb	r3, [r3, #1]
 800d5b6:	2b01      	cmp	r3, #1
 800d5b8:	d116      	bne.n	800d5e8 <USB_EPStartXfer+0x4ae>
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	653b      	str	r3, [r7, #80]	@ 0x50
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d5c4:	b29b      	uxth	r3, r3
 800d5c6:	461a      	mov	r2, r3
 800d5c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d5ca:	4413      	add	r3, r2
 800d5cc:	653b      	str	r3, [r7, #80]	@ 0x50
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	781b      	ldrb	r3, [r3, #0]
 800d5d2:	00da      	lsls	r2, r3, #3
 800d5d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d5d6:	4413      	add	r3, r2
 800d5d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d5dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d5de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d5e2:	b29a      	uxth	r2, r3
 800d5e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	891b      	ldrh	r3, [r3, #8]
 800d5ec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	6959      	ldr	r1, [r3, #20]
 800d5f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d5f8:	b29b      	uxth	r3, r3
 800d5fa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d5fe:	6878      	ldr	r0, [r7, #4]
 800d600:	f000 fc7f 	bl	800df02 <USB_WritePMA>
            ep->xfer_buff += len;
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	695a      	ldr	r2, [r3, #20]
 800d608:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d60c:	441a      	add	r2, r3
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	6a1a      	ldr	r2, [r3, #32]
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	691b      	ldr	r3, [r3, #16]
 800d61a:	429a      	cmp	r2, r3
 800d61c:	d907      	bls.n	800d62e <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	6a1a      	ldr	r2, [r3, #32]
 800d622:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d626:	1ad2      	subs	r2, r2, r3
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	621a      	str	r2, [r3, #32]
 800d62c:	e006      	b.n	800d63c <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	6a1b      	ldr	r3, [r3, #32]
 800d632:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	2200      	movs	r2, #0
 800d63a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	643b      	str	r3, [r7, #64]	@ 0x40
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	785b      	ldrb	r3, [r3, #1]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d16b      	bne.n	800d720 <USB_EPStartXfer+0x5e6>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d652:	b29b      	uxth	r3, r3
 800d654:	461a      	mov	r2, r3
 800d656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d658:	4413      	add	r3, r2
 800d65a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	781b      	ldrb	r3, [r3, #0]
 800d660:	00da      	lsls	r2, r3, #3
 800d662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d664:	4413      	add	r3, r2
 800d666:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d66a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d66c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d66e:	881b      	ldrh	r3, [r3, #0]
 800d670:	b29b      	uxth	r3, r3
 800d672:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d676:	b29a      	uxth	r2, r3
 800d678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d67a:	801a      	strh	r2, [r3, #0]
 800d67c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d680:	2b00      	cmp	r3, #0
 800d682:	d10a      	bne.n	800d69a <USB_EPStartXfer+0x560>
 800d684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d686:	881b      	ldrh	r3, [r3, #0]
 800d688:	b29b      	uxth	r3, r3
 800d68a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d68e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d692:	b29a      	uxth	r2, r3
 800d694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d696:	801a      	strh	r2, [r3, #0]
 800d698:	e05b      	b.n	800d752 <USB_EPStartXfer+0x618>
 800d69a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d69e:	2b3e      	cmp	r3, #62	@ 0x3e
 800d6a0:	d81c      	bhi.n	800d6dc <USB_EPStartXfer+0x5a2>
 800d6a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d6a6:	085b      	lsrs	r3, r3, #1
 800d6a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d6ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d6b0:	f003 0301 	and.w	r3, r3, #1
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d004      	beq.n	800d6c2 <USB_EPStartXfer+0x588>
 800d6b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d6bc:	3301      	adds	r3, #1
 800d6be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d6c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6c4:	881b      	ldrh	r3, [r3, #0]
 800d6c6:	b29a      	uxth	r2, r3
 800d6c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d6cc:	b29b      	uxth	r3, r3
 800d6ce:	029b      	lsls	r3, r3, #10
 800d6d0:	b29b      	uxth	r3, r3
 800d6d2:	4313      	orrs	r3, r2
 800d6d4:	b29a      	uxth	r2, r3
 800d6d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6d8:	801a      	strh	r2, [r3, #0]
 800d6da:	e03a      	b.n	800d752 <USB_EPStartXfer+0x618>
 800d6dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d6e0:	095b      	lsrs	r3, r3, #5
 800d6e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d6e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d6ea:	f003 031f 	and.w	r3, r3, #31
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d104      	bne.n	800d6fc <USB_EPStartXfer+0x5c2>
 800d6f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d6f6:	3b01      	subs	r3, #1
 800d6f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d6fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6fe:	881b      	ldrh	r3, [r3, #0]
 800d700:	b29a      	uxth	r2, r3
 800d702:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d706:	b29b      	uxth	r3, r3
 800d708:	029b      	lsls	r3, r3, #10
 800d70a:	b29b      	uxth	r3, r3
 800d70c:	4313      	orrs	r3, r2
 800d70e:	b29b      	uxth	r3, r3
 800d710:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d714:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d718:	b29a      	uxth	r2, r3
 800d71a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d71c:	801a      	strh	r2, [r3, #0]
 800d71e:	e018      	b.n	800d752 <USB_EPStartXfer+0x618>
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	785b      	ldrb	r3, [r3, #1]
 800d724:	2b01      	cmp	r3, #1
 800d726:	d114      	bne.n	800d752 <USB_EPStartXfer+0x618>
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d72e:	b29b      	uxth	r3, r3
 800d730:	461a      	mov	r2, r3
 800d732:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d734:	4413      	add	r3, r2
 800d736:	643b      	str	r3, [r7, #64]	@ 0x40
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	781b      	ldrb	r3, [r3, #0]
 800d73c:	00da      	lsls	r2, r3, #3
 800d73e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d740:	4413      	add	r3, r2
 800d742:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d746:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d748:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d74c:	b29a      	uxth	r2, r3
 800d74e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d750:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	895b      	ldrh	r3, [r3, #10]
 800d756:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	6959      	ldr	r1, [r3, #20]
 800d75e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d762:	b29b      	uxth	r3, r3
 800d764:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d768:	6878      	ldr	r0, [r7, #4]
 800d76a:	f000 fbca 	bl	800df02 <USB_WritePMA>
 800d76e:	e193      	b.n	800da98 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	6a1b      	ldr	r3, [r3, #32]
 800d774:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d778:	687a      	ldr	r2, [r7, #4]
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	781b      	ldrb	r3, [r3, #0]
 800d77e:	009b      	lsls	r3, r3, #2
 800d780:	4413      	add	r3, r2
 800d782:	881b      	ldrh	r3, [r3, #0]
 800d784:	b29b      	uxth	r3, r3
 800d786:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d78a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d78e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800d792:	687a      	ldr	r2, [r7, #4]
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	781b      	ldrb	r3, [r3, #0]
 800d798:	009b      	lsls	r3, r3, #2
 800d79a:	441a      	add	r2, r3
 800d79c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800d7a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d7a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d7a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d7ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7b0:	b29b      	uxth	r3, r3
 800d7b2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d7be:	b29b      	uxth	r3, r3
 800d7c0:	461a      	mov	r2, r3
 800d7c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d7c4:	4413      	add	r3, r2
 800d7c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	781b      	ldrb	r3, [r3, #0]
 800d7cc:	00da      	lsls	r2, r3, #3
 800d7ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d7d0:	4413      	add	r3, r2
 800d7d2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d7d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d7d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d7dc:	b29a      	uxth	r2, r3
 800d7de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d7e0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	891b      	ldrh	r3, [r3, #8]
 800d7e6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	6959      	ldr	r1, [r3, #20]
 800d7ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d7f2:	b29b      	uxth	r3, r3
 800d7f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f000 fb82 	bl	800df02 <USB_WritePMA>
 800d7fe:	e14b      	b.n	800da98 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	6a1a      	ldr	r2, [r3, #32]
 800d804:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d808:	1ad2      	subs	r2, r2, r3
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d80e:	687a      	ldr	r2, [r7, #4]
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	781b      	ldrb	r3, [r3, #0]
 800d814:	009b      	lsls	r3, r3, #2
 800d816:	4413      	add	r3, r2
 800d818:	881b      	ldrh	r3, [r3, #0]
 800d81a:	b29b      	uxth	r3, r3
 800d81c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d820:	2b00      	cmp	r3, #0
 800d822:	f000 809a 	beq.w	800d95a <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	673b      	str	r3, [r7, #112]	@ 0x70
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	785b      	ldrb	r3, [r3, #1]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d16b      	bne.n	800d90a <USB_EPStartXfer+0x7d0>
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d83c:	b29b      	uxth	r3, r3
 800d83e:	461a      	mov	r2, r3
 800d840:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d842:	4413      	add	r3, r2
 800d844:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	781b      	ldrb	r3, [r3, #0]
 800d84a:	00da      	lsls	r2, r3, #3
 800d84c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d84e:	4413      	add	r3, r2
 800d850:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d854:	667b      	str	r3, [r7, #100]	@ 0x64
 800d856:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d858:	881b      	ldrh	r3, [r3, #0]
 800d85a:	b29b      	uxth	r3, r3
 800d85c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d860:	b29a      	uxth	r2, r3
 800d862:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d864:	801a      	strh	r2, [r3, #0]
 800d866:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d10a      	bne.n	800d884 <USB_EPStartXfer+0x74a>
 800d86e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d870:	881b      	ldrh	r3, [r3, #0]
 800d872:	b29b      	uxth	r3, r3
 800d874:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d878:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d87c:	b29a      	uxth	r2, r3
 800d87e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d880:	801a      	strh	r2, [r3, #0]
 800d882:	e05b      	b.n	800d93c <USB_EPStartXfer+0x802>
 800d884:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d888:	2b3e      	cmp	r3, #62	@ 0x3e
 800d88a:	d81c      	bhi.n	800d8c6 <USB_EPStartXfer+0x78c>
 800d88c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d890:	085b      	lsrs	r3, r3, #1
 800d892:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d896:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d89a:	f003 0301 	and.w	r3, r3, #1
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d004      	beq.n	800d8ac <USB_EPStartXfer+0x772>
 800d8a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d8a6:	3301      	adds	r3, #1
 800d8a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d8ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d8ae:	881b      	ldrh	r3, [r3, #0]
 800d8b0:	b29a      	uxth	r2, r3
 800d8b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d8b6:	b29b      	uxth	r3, r3
 800d8b8:	029b      	lsls	r3, r3, #10
 800d8ba:	b29b      	uxth	r3, r3
 800d8bc:	4313      	orrs	r3, r2
 800d8be:	b29a      	uxth	r2, r3
 800d8c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d8c2:	801a      	strh	r2, [r3, #0]
 800d8c4:	e03a      	b.n	800d93c <USB_EPStartXfer+0x802>
 800d8c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d8ca:	095b      	lsrs	r3, r3, #5
 800d8cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d8d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d8d4:	f003 031f 	and.w	r3, r3, #31
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d104      	bne.n	800d8e6 <USB_EPStartXfer+0x7ac>
 800d8dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d8e0:	3b01      	subs	r3, #1
 800d8e2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d8e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d8e8:	881b      	ldrh	r3, [r3, #0]
 800d8ea:	b29a      	uxth	r2, r3
 800d8ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d8f0:	b29b      	uxth	r3, r3
 800d8f2:	029b      	lsls	r3, r3, #10
 800d8f4:	b29b      	uxth	r3, r3
 800d8f6:	4313      	orrs	r3, r2
 800d8f8:	b29b      	uxth	r3, r3
 800d8fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d8fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d902:	b29a      	uxth	r2, r3
 800d904:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d906:	801a      	strh	r2, [r3, #0]
 800d908:	e018      	b.n	800d93c <USB_EPStartXfer+0x802>
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	785b      	ldrb	r3, [r3, #1]
 800d90e:	2b01      	cmp	r3, #1
 800d910:	d114      	bne.n	800d93c <USB_EPStartXfer+0x802>
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d918:	b29b      	uxth	r3, r3
 800d91a:	461a      	mov	r2, r3
 800d91c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d91e:	4413      	add	r3, r2
 800d920:	673b      	str	r3, [r7, #112]	@ 0x70
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	781b      	ldrb	r3, [r3, #0]
 800d926:	00da      	lsls	r2, r3, #3
 800d928:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d92a:	4413      	add	r3, r2
 800d92c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d930:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d932:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d936:	b29a      	uxth	r2, r3
 800d938:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d93a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	895b      	ldrh	r3, [r3, #10]
 800d940:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	6959      	ldr	r1, [r3, #20]
 800d948:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d94c:	b29b      	uxth	r3, r3
 800d94e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d952:	6878      	ldr	r0, [r7, #4]
 800d954:	f000 fad5 	bl	800df02 <USB_WritePMA>
 800d958:	e09e      	b.n	800da98 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	785b      	ldrb	r3, [r3, #1]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d16b      	bne.n	800da3a <USB_EPStartXfer+0x900>
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d96c:	b29b      	uxth	r3, r3
 800d96e:	461a      	mov	r2, r3
 800d970:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d972:	4413      	add	r3, r2
 800d974:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	781b      	ldrb	r3, [r3, #0]
 800d97a:	00da      	lsls	r2, r3, #3
 800d97c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d97e:	4413      	add	r3, r2
 800d980:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d984:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d986:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d988:	881b      	ldrh	r3, [r3, #0]
 800d98a:	b29b      	uxth	r3, r3
 800d98c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d990:	b29a      	uxth	r2, r3
 800d992:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d994:	801a      	strh	r2, [r3, #0]
 800d996:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d10a      	bne.n	800d9b4 <USB_EPStartXfer+0x87a>
 800d99e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d9a0:	881b      	ldrh	r3, [r3, #0]
 800d9a2:	b29b      	uxth	r3, r3
 800d9a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d9a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d9ac:	b29a      	uxth	r2, r3
 800d9ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d9b0:	801a      	strh	r2, [r3, #0]
 800d9b2:	e063      	b.n	800da7c <USB_EPStartXfer+0x942>
 800d9b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d9b8:	2b3e      	cmp	r3, #62	@ 0x3e
 800d9ba:	d81c      	bhi.n	800d9f6 <USB_EPStartXfer+0x8bc>
 800d9bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d9c0:	085b      	lsrs	r3, r3, #1
 800d9c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d9c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d9ca:	f003 0301 	and.w	r3, r3, #1
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d004      	beq.n	800d9dc <USB_EPStartXfer+0x8a2>
 800d9d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d9d6:	3301      	adds	r3, #1
 800d9d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d9dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d9de:	881b      	ldrh	r3, [r3, #0]
 800d9e0:	b29a      	uxth	r2, r3
 800d9e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d9e6:	b29b      	uxth	r3, r3
 800d9e8:	029b      	lsls	r3, r3, #10
 800d9ea:	b29b      	uxth	r3, r3
 800d9ec:	4313      	orrs	r3, r2
 800d9ee:	b29a      	uxth	r2, r3
 800d9f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d9f2:	801a      	strh	r2, [r3, #0]
 800d9f4:	e042      	b.n	800da7c <USB_EPStartXfer+0x942>
 800d9f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d9fa:	095b      	lsrs	r3, r3, #5
 800d9fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800da00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800da04:	f003 031f 	and.w	r3, r3, #31
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d104      	bne.n	800da16 <USB_EPStartXfer+0x8dc>
 800da0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800da10:	3b01      	subs	r3, #1
 800da12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800da16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800da18:	881b      	ldrh	r3, [r3, #0]
 800da1a:	b29a      	uxth	r2, r3
 800da1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800da20:	b29b      	uxth	r3, r3
 800da22:	029b      	lsls	r3, r3, #10
 800da24:	b29b      	uxth	r3, r3
 800da26:	4313      	orrs	r3, r2
 800da28:	b29b      	uxth	r3, r3
 800da2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800da2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800da32:	b29a      	uxth	r2, r3
 800da34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800da36:	801a      	strh	r2, [r3, #0]
 800da38:	e020      	b.n	800da7c <USB_EPStartXfer+0x942>
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	785b      	ldrb	r3, [r3, #1]
 800da3e:	2b01      	cmp	r3, #1
 800da40:	d11c      	bne.n	800da7c <USB_EPStartXfer+0x942>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800da4e:	b29b      	uxth	r3, r3
 800da50:	461a      	mov	r2, r3
 800da52:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800da56:	4413      	add	r3, r2
 800da58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	781b      	ldrb	r3, [r3, #0]
 800da60:	00da      	lsls	r2, r3, #3
 800da62:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800da66:	4413      	add	r3, r2
 800da68:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800da6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800da70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800da74:	b29a      	uxth	r2, r3
 800da76:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800da7a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	891b      	ldrh	r3, [r3, #8]
 800da80:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	6959      	ldr	r1, [r3, #20]
 800da88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800da8c:	b29b      	uxth	r3, r3
 800da8e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f000 fa35 	bl	800df02 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800da98:	687a      	ldr	r2, [r7, #4]
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	781b      	ldrb	r3, [r3, #0]
 800da9e:	009b      	lsls	r3, r3, #2
 800daa0:	4413      	add	r3, r2
 800daa2:	881b      	ldrh	r3, [r3, #0]
 800daa4:	b29b      	uxth	r3, r3
 800daa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800daaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800daae:	817b      	strh	r3, [r7, #10]
 800dab0:	897b      	ldrh	r3, [r7, #10]
 800dab2:	f083 0310 	eor.w	r3, r3, #16
 800dab6:	817b      	strh	r3, [r7, #10]
 800dab8:	897b      	ldrh	r3, [r7, #10]
 800daba:	f083 0320 	eor.w	r3, r3, #32
 800dabe:	817b      	strh	r3, [r7, #10]
 800dac0:	687a      	ldr	r2, [r7, #4]
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	781b      	ldrb	r3, [r3, #0]
 800dac6:	009b      	lsls	r3, r3, #2
 800dac8:	441a      	add	r2, r3
 800daca:	897b      	ldrh	r3, [r7, #10]
 800dacc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dad0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dad4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dad8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dadc:	b29b      	uxth	r3, r3
 800dade:	8013      	strh	r3, [r2, #0]
 800dae0:	e0d5      	b.n	800dc8e <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	7b1b      	ldrb	r3, [r3, #12]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d156      	bne.n	800db98 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	699b      	ldr	r3, [r3, #24]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d122      	bne.n	800db38 <USB_EPStartXfer+0x9fe>
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	78db      	ldrb	r3, [r3, #3]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d11e      	bne.n	800db38 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800dafa:	687a      	ldr	r2, [r7, #4]
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	781b      	ldrb	r3, [r3, #0]
 800db00:	009b      	lsls	r3, r3, #2
 800db02:	4413      	add	r3, r2
 800db04:	881b      	ldrh	r3, [r3, #0]
 800db06:	b29b      	uxth	r3, r3
 800db08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800db0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800db10:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800db14:	687a      	ldr	r2, [r7, #4]
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	781b      	ldrb	r3, [r3, #0]
 800db1a:	009b      	lsls	r3, r3, #2
 800db1c:	441a      	add	r2, r3
 800db1e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800db22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800db26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800db2a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800db2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db32:	b29b      	uxth	r3, r3
 800db34:	8013      	strh	r3, [r2, #0]
 800db36:	e01d      	b.n	800db74 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800db38:	687a      	ldr	r2, [r7, #4]
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	781b      	ldrb	r3, [r3, #0]
 800db3e:	009b      	lsls	r3, r3, #2
 800db40:	4413      	add	r3, r2
 800db42:	881b      	ldrh	r3, [r3, #0]
 800db44:	b29b      	uxth	r3, r3
 800db46:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800db4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800db4e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800db52:	687a      	ldr	r2, [r7, #4]
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	781b      	ldrb	r3, [r3, #0]
 800db58:	009b      	lsls	r3, r3, #2
 800db5a:	441a      	add	r2, r3
 800db5c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800db60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800db64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800db68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db70:	b29b      	uxth	r3, r3
 800db72:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	699a      	ldr	r2, [r3, #24]
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	691b      	ldr	r3, [r3, #16]
 800db7c:	429a      	cmp	r2, r3
 800db7e:	d907      	bls.n	800db90 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	699a      	ldr	r2, [r3, #24]
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	691b      	ldr	r3, [r3, #16]
 800db88:	1ad2      	subs	r2, r2, r3
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	619a      	str	r2, [r3, #24]
 800db8e:	e054      	b.n	800dc3a <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	2200      	movs	r2, #0
 800db94:	619a      	str	r2, [r3, #24]
 800db96:	e050      	b.n	800dc3a <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	78db      	ldrb	r3, [r3, #3]
 800db9c:	2b02      	cmp	r3, #2
 800db9e:	d142      	bne.n	800dc26 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	69db      	ldr	r3, [r3, #28]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d048      	beq.n	800dc3a <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800dba8:	687a      	ldr	r2, [r7, #4]
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	781b      	ldrb	r3, [r3, #0]
 800dbae:	009b      	lsls	r3, r3, #2
 800dbb0:	4413      	add	r3, r2
 800dbb2:	881b      	ldrh	r3, [r3, #0]
 800dbb4:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800dbb8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800dbbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d005      	beq.n	800dbd0 <USB_EPStartXfer+0xa96>
 800dbc4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800dbc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d10b      	bne.n	800dbe8 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800dbd0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800dbd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d12e      	bne.n	800dc3a <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800dbdc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800dbe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d128      	bne.n	800dc3a <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800dbe8:	687a      	ldr	r2, [r7, #4]
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	009b      	lsls	r3, r3, #2
 800dbf0:	4413      	add	r3, r2
 800dbf2:	881b      	ldrh	r3, [r3, #0]
 800dbf4:	b29b      	uxth	r3, r3
 800dbf6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dbfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dbfe:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800dc02:	687a      	ldr	r2, [r7, #4]
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	781b      	ldrb	r3, [r3, #0]
 800dc08:	009b      	lsls	r3, r3, #2
 800dc0a:	441a      	add	r2, r3
 800dc0c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800dc10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dc14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dc18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dc1c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800dc20:	b29b      	uxth	r3, r3
 800dc22:	8013      	strh	r3, [r2, #0]
 800dc24:	e009      	b.n	800dc3a <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800dc26:	683b      	ldr	r3, [r7, #0]
 800dc28:	78db      	ldrb	r3, [r3, #3]
 800dc2a:	2b01      	cmp	r3, #1
 800dc2c:	d103      	bne.n	800dc36 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	2200      	movs	r2, #0
 800dc32:	619a      	str	r2, [r3, #24]
 800dc34:	e001      	b.n	800dc3a <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800dc36:	2301      	movs	r3, #1
 800dc38:	e02a      	b.n	800dc90 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800dc3a:	687a      	ldr	r2, [r7, #4]
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	781b      	ldrb	r3, [r3, #0]
 800dc40:	009b      	lsls	r3, r3, #2
 800dc42:	4413      	add	r3, r2
 800dc44:	881b      	ldrh	r3, [r3, #0]
 800dc46:	b29b      	uxth	r3, r3
 800dc48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dc4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dc50:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800dc54:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800dc58:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800dc5c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800dc60:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800dc64:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800dc68:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800dc6c:	687a      	ldr	r2, [r7, #4]
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	781b      	ldrb	r3, [r3, #0]
 800dc72:	009b      	lsls	r3, r3, #2
 800dc74:	441a      	add	r2, r3
 800dc76:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800dc7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dc7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dc82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dc86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc8a:	b29b      	uxth	r3, r3
 800dc8c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800dc8e:	2300      	movs	r3, #0
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	37b0      	adds	r7, #176	@ 0xb0
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}

0800dc98 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800dc98:	b480      	push	{r7}
 800dc9a:	b085      	sub	sp, #20
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
 800dca0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	785b      	ldrb	r3, [r3, #1]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d020      	beq.n	800dcec <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800dcaa:	687a      	ldr	r2, [r7, #4]
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	781b      	ldrb	r3, [r3, #0]
 800dcb0:	009b      	lsls	r3, r3, #2
 800dcb2:	4413      	add	r3, r2
 800dcb4:	881b      	ldrh	r3, [r3, #0]
 800dcb6:	b29b      	uxth	r3, r3
 800dcb8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dcbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dcc0:	81bb      	strh	r3, [r7, #12]
 800dcc2:	89bb      	ldrh	r3, [r7, #12]
 800dcc4:	f083 0310 	eor.w	r3, r3, #16
 800dcc8:	81bb      	strh	r3, [r7, #12]
 800dcca:	687a      	ldr	r2, [r7, #4]
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	781b      	ldrb	r3, [r3, #0]
 800dcd0:	009b      	lsls	r3, r3, #2
 800dcd2:	441a      	add	r2, r3
 800dcd4:	89bb      	ldrh	r3, [r7, #12]
 800dcd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dcda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dcde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dce2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dce6:	b29b      	uxth	r3, r3
 800dce8:	8013      	strh	r3, [r2, #0]
 800dcea:	e01f      	b.n	800dd2c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800dcec:	687a      	ldr	r2, [r7, #4]
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	781b      	ldrb	r3, [r3, #0]
 800dcf2:	009b      	lsls	r3, r3, #2
 800dcf4:	4413      	add	r3, r2
 800dcf6:	881b      	ldrh	r3, [r3, #0]
 800dcf8:	b29b      	uxth	r3, r3
 800dcfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dcfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dd02:	81fb      	strh	r3, [r7, #14]
 800dd04:	89fb      	ldrh	r3, [r7, #14]
 800dd06:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800dd0a:	81fb      	strh	r3, [r7, #14]
 800dd0c:	687a      	ldr	r2, [r7, #4]
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	781b      	ldrb	r3, [r3, #0]
 800dd12:	009b      	lsls	r3, r3, #2
 800dd14:	441a      	add	r2, r3
 800dd16:	89fb      	ldrh	r3, [r7, #14]
 800dd18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dd1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dd20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dd24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd28:	b29b      	uxth	r3, r3
 800dd2a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800dd2c:	2300      	movs	r3, #0
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3714      	adds	r7, #20
 800dd32:	46bd      	mov	sp, r7
 800dd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd38:	4770      	bx	lr

0800dd3a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800dd3a:	b480      	push	{r7}
 800dd3c:	b087      	sub	sp, #28
 800dd3e:	af00      	add	r7, sp, #0
 800dd40:	6078      	str	r0, [r7, #4]
 800dd42:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	785b      	ldrb	r3, [r3, #1]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d04c      	beq.n	800dde6 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dd4c:	687a      	ldr	r2, [r7, #4]
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	781b      	ldrb	r3, [r3, #0]
 800dd52:	009b      	lsls	r3, r3, #2
 800dd54:	4413      	add	r3, r2
 800dd56:	881b      	ldrh	r3, [r3, #0]
 800dd58:	823b      	strh	r3, [r7, #16]
 800dd5a:	8a3b      	ldrh	r3, [r7, #16]
 800dd5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d01b      	beq.n	800dd9c <USB_EPClearStall+0x62>
 800dd64:	687a      	ldr	r2, [r7, #4]
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	781b      	ldrb	r3, [r3, #0]
 800dd6a:	009b      	lsls	r3, r3, #2
 800dd6c:	4413      	add	r3, r2
 800dd6e:	881b      	ldrh	r3, [r3, #0]
 800dd70:	b29b      	uxth	r3, r3
 800dd72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dd76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dd7a:	81fb      	strh	r3, [r7, #14]
 800dd7c:	687a      	ldr	r2, [r7, #4]
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	781b      	ldrb	r3, [r3, #0]
 800dd82:	009b      	lsls	r3, r3, #2
 800dd84:	441a      	add	r2, r3
 800dd86:	89fb      	ldrh	r3, [r7, #14]
 800dd88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dd8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dd90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dd94:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800dd98:	b29b      	uxth	r3, r3
 800dd9a:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	78db      	ldrb	r3, [r3, #3]
 800dda0:	2b01      	cmp	r3, #1
 800dda2:	d06c      	beq.n	800de7e <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800dda4:	687a      	ldr	r2, [r7, #4]
 800dda6:	683b      	ldr	r3, [r7, #0]
 800dda8:	781b      	ldrb	r3, [r3, #0]
 800ddaa:	009b      	lsls	r3, r3, #2
 800ddac:	4413      	add	r3, r2
 800ddae:	881b      	ldrh	r3, [r3, #0]
 800ddb0:	b29b      	uxth	r3, r3
 800ddb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ddb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ddba:	81bb      	strh	r3, [r7, #12]
 800ddbc:	89bb      	ldrh	r3, [r7, #12]
 800ddbe:	f083 0320 	eor.w	r3, r3, #32
 800ddc2:	81bb      	strh	r3, [r7, #12]
 800ddc4:	687a      	ldr	r2, [r7, #4]
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	781b      	ldrb	r3, [r3, #0]
 800ddca:	009b      	lsls	r3, r3, #2
 800ddcc:	441a      	add	r2, r3
 800ddce:	89bb      	ldrh	r3, [r7, #12]
 800ddd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ddd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ddd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dddc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dde0:	b29b      	uxth	r3, r3
 800dde2:	8013      	strh	r3, [r2, #0]
 800dde4:	e04b      	b.n	800de7e <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dde6:	687a      	ldr	r2, [r7, #4]
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	781b      	ldrb	r3, [r3, #0]
 800ddec:	009b      	lsls	r3, r3, #2
 800ddee:	4413      	add	r3, r2
 800ddf0:	881b      	ldrh	r3, [r3, #0]
 800ddf2:	82fb      	strh	r3, [r7, #22]
 800ddf4:	8afb      	ldrh	r3, [r7, #22]
 800ddf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d01b      	beq.n	800de36 <USB_EPClearStall+0xfc>
 800ddfe:	687a      	ldr	r2, [r7, #4]
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	781b      	ldrb	r3, [r3, #0]
 800de04:	009b      	lsls	r3, r3, #2
 800de06:	4413      	add	r3, r2
 800de08:	881b      	ldrh	r3, [r3, #0]
 800de0a:	b29b      	uxth	r3, r3
 800de0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800de10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800de14:	82bb      	strh	r3, [r7, #20]
 800de16:	687a      	ldr	r2, [r7, #4]
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	781b      	ldrb	r3, [r3, #0]
 800de1c:	009b      	lsls	r3, r3, #2
 800de1e:	441a      	add	r2, r3
 800de20:	8abb      	ldrh	r3, [r7, #20]
 800de22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800de26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800de2a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800de2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de32:	b29b      	uxth	r3, r3
 800de34:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800de36:	687a      	ldr	r2, [r7, #4]
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	781b      	ldrb	r3, [r3, #0]
 800de3c:	009b      	lsls	r3, r3, #2
 800de3e:	4413      	add	r3, r2
 800de40:	881b      	ldrh	r3, [r3, #0]
 800de42:	b29b      	uxth	r3, r3
 800de44:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800de48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800de4c:	827b      	strh	r3, [r7, #18]
 800de4e:	8a7b      	ldrh	r3, [r7, #18]
 800de50:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800de54:	827b      	strh	r3, [r7, #18]
 800de56:	8a7b      	ldrh	r3, [r7, #18]
 800de58:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800de5c:	827b      	strh	r3, [r7, #18]
 800de5e:	687a      	ldr	r2, [r7, #4]
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	781b      	ldrb	r3, [r3, #0]
 800de64:	009b      	lsls	r3, r3, #2
 800de66:	441a      	add	r2, r3
 800de68:	8a7b      	ldrh	r3, [r7, #18]
 800de6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800de6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800de72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800de76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de7a:	b29b      	uxth	r3, r3
 800de7c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800de7e:	2300      	movs	r3, #0
}
 800de80:	4618      	mov	r0, r3
 800de82:	371c      	adds	r7, #28
 800de84:	46bd      	mov	sp, r7
 800de86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8a:	4770      	bx	lr

0800de8c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800de8c:	b480      	push	{r7}
 800de8e:	b083      	sub	sp, #12
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
 800de94:	460b      	mov	r3, r1
 800de96:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800de98:	78fb      	ldrb	r3, [r7, #3]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d103      	bne.n	800dea6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2280      	movs	r2, #128	@ 0x80
 800dea2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800dea6:	2300      	movs	r3, #0
}
 800dea8:	4618      	mov	r0, r3
 800deaa:	370c      	adds	r7, #12
 800deac:	46bd      	mov	sp, r7
 800deae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb2:	4770      	bx	lr

0800deb4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800deb4:	b480      	push	{r7}
 800deb6:	b083      	sub	sp, #12
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800dec2:	b29b      	uxth	r3, r3
 800dec4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dec8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800decc:	b29a      	uxth	r2, r3
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800ded4:	2300      	movs	r3, #0
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	370c      	adds	r7, #12
 800deda:	46bd      	mov	sp, r7
 800dedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee0:	4770      	bx	lr

0800dee2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800dee2:	b480      	push	{r7}
 800dee4:	b085      	sub	sp, #20
 800dee6:	af00      	add	r7, sp, #0
 800dee8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800def0:	b29b      	uxth	r3, r3
 800def2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800def4:	68fb      	ldr	r3, [r7, #12]
}
 800def6:	4618      	mov	r0, r3
 800def8:	3714      	adds	r7, #20
 800defa:	46bd      	mov	sp, r7
 800defc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df00:	4770      	bx	lr

0800df02 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800df02:	b480      	push	{r7}
 800df04:	b08b      	sub	sp, #44	@ 0x2c
 800df06:	af00      	add	r7, sp, #0
 800df08:	60f8      	str	r0, [r7, #12]
 800df0a:	60b9      	str	r1, [r7, #8]
 800df0c:	4611      	mov	r1, r2
 800df0e:	461a      	mov	r2, r3
 800df10:	460b      	mov	r3, r1
 800df12:	80fb      	strh	r3, [r7, #6]
 800df14:	4613      	mov	r3, r2
 800df16:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800df18:	88bb      	ldrh	r3, [r7, #4]
 800df1a:	3301      	adds	r3, #1
 800df1c:	085b      	lsrs	r3, r3, #1
 800df1e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800df28:	88fa      	ldrh	r2, [r7, #6]
 800df2a:	697b      	ldr	r3, [r7, #20]
 800df2c:	4413      	add	r3, r2
 800df2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800df32:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800df34:	69bb      	ldr	r3, [r7, #24]
 800df36:	627b      	str	r3, [r7, #36]	@ 0x24
 800df38:	e01b      	b.n	800df72 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800df3a:	69fb      	ldr	r3, [r7, #28]
 800df3c:	781b      	ldrb	r3, [r3, #0]
 800df3e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800df40:	69fb      	ldr	r3, [r7, #28]
 800df42:	3301      	adds	r3, #1
 800df44:	781b      	ldrb	r3, [r3, #0]
 800df46:	021b      	lsls	r3, r3, #8
 800df48:	b21a      	sxth	r2, r3
 800df4a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800df4e:	4313      	orrs	r3, r2
 800df50:	b21b      	sxth	r3, r3
 800df52:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800df54:	6a3b      	ldr	r3, [r7, #32]
 800df56:	8a7a      	ldrh	r2, [r7, #18]
 800df58:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800df5a:	6a3b      	ldr	r3, [r7, #32]
 800df5c:	3302      	adds	r3, #2
 800df5e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800df60:	69fb      	ldr	r3, [r7, #28]
 800df62:	3301      	adds	r3, #1
 800df64:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800df66:	69fb      	ldr	r3, [r7, #28]
 800df68:	3301      	adds	r3, #1
 800df6a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800df6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df6e:	3b01      	subs	r3, #1
 800df70:	627b      	str	r3, [r7, #36]	@ 0x24
 800df72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df74:	2b00      	cmp	r3, #0
 800df76:	d1e0      	bne.n	800df3a <USB_WritePMA+0x38>
  }
}
 800df78:	bf00      	nop
 800df7a:	bf00      	nop
 800df7c:	372c      	adds	r7, #44	@ 0x2c
 800df7e:	46bd      	mov	sp, r7
 800df80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df84:	4770      	bx	lr

0800df86 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800df86:	b480      	push	{r7}
 800df88:	b08b      	sub	sp, #44	@ 0x2c
 800df8a:	af00      	add	r7, sp, #0
 800df8c:	60f8      	str	r0, [r7, #12]
 800df8e:	60b9      	str	r1, [r7, #8]
 800df90:	4611      	mov	r1, r2
 800df92:	461a      	mov	r2, r3
 800df94:	460b      	mov	r3, r1
 800df96:	80fb      	strh	r3, [r7, #6]
 800df98:	4613      	mov	r3, r2
 800df9a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800df9c:	88bb      	ldrh	r3, [r7, #4]
 800df9e:	085b      	lsrs	r3, r3, #1
 800dfa0:	b29b      	uxth	r3, r3
 800dfa2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800dfac:	88fa      	ldrh	r2, [r7, #6]
 800dfae:	697b      	ldr	r3, [r7, #20]
 800dfb0:	4413      	add	r3, r2
 800dfb2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dfb6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800dfb8:	69bb      	ldr	r3, [r7, #24]
 800dfba:	627b      	str	r3, [r7, #36]	@ 0x24
 800dfbc:	e018      	b.n	800dff0 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800dfbe:	6a3b      	ldr	r3, [r7, #32]
 800dfc0:	881b      	ldrh	r3, [r3, #0]
 800dfc2:	b29b      	uxth	r3, r3
 800dfc4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800dfc6:	6a3b      	ldr	r3, [r7, #32]
 800dfc8:	3302      	adds	r3, #2
 800dfca:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800dfcc:	693b      	ldr	r3, [r7, #16]
 800dfce:	b2da      	uxtb	r2, r3
 800dfd0:	69fb      	ldr	r3, [r7, #28]
 800dfd2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800dfd4:	69fb      	ldr	r3, [r7, #28]
 800dfd6:	3301      	adds	r3, #1
 800dfd8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800dfda:	693b      	ldr	r3, [r7, #16]
 800dfdc:	0a1b      	lsrs	r3, r3, #8
 800dfde:	b2da      	uxtb	r2, r3
 800dfe0:	69fb      	ldr	r3, [r7, #28]
 800dfe2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800dfe4:	69fb      	ldr	r3, [r7, #28]
 800dfe6:	3301      	adds	r3, #1
 800dfe8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800dfea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfec:	3b01      	subs	r3, #1
 800dfee:	627b      	str	r3, [r7, #36]	@ 0x24
 800dff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d1e3      	bne.n	800dfbe <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800dff6:	88bb      	ldrh	r3, [r7, #4]
 800dff8:	f003 0301 	and.w	r3, r3, #1
 800dffc:	b29b      	uxth	r3, r3
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d007      	beq.n	800e012 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800e002:	6a3b      	ldr	r3, [r7, #32]
 800e004:	881b      	ldrh	r3, [r3, #0]
 800e006:	b29b      	uxth	r3, r3
 800e008:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e00a:	693b      	ldr	r3, [r7, #16]
 800e00c:	b2da      	uxtb	r2, r3
 800e00e:	69fb      	ldr	r3, [r7, #28]
 800e010:	701a      	strb	r2, [r3, #0]
  }
}
 800e012:	bf00      	nop
 800e014:	372c      	adds	r7, #44	@ 0x2c
 800e016:	46bd      	mov	sp, r7
 800e018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01c:	4770      	bx	lr

0800e01e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e01e:	b580      	push	{r7, lr}
 800e020:	b084      	sub	sp, #16
 800e022:	af00      	add	r7, sp, #0
 800e024:	6078      	str	r0, [r7, #4]
 800e026:	460b      	mov	r3, r1
 800e028:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e02a:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800e02e:	f002 f8a3 	bl	8010178 <USBD_static_malloc>
 800e032:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d105      	bne.n	800e046 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	2200      	movs	r2, #0
 800e03e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800e042:	2302      	movs	r3, #2
 800e044:	e066      	b.n	800e114 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	68fa      	ldr	r2, [r7, #12]
 800e04a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	7c1b      	ldrb	r3, [r3, #16]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d119      	bne.n	800e08a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e056:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e05a:	2202      	movs	r2, #2
 800e05c:	2181      	movs	r1, #129	@ 0x81
 800e05e:	6878      	ldr	r0, [r7, #4]
 800e060:	f001 ff31 	bl	800fec6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2201      	movs	r2, #1
 800e068:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e06a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e06e:	2202      	movs	r2, #2
 800e070:	2101      	movs	r1, #1
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f001 ff27 	bl	800fec6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2201      	movs	r2, #1
 800e07c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2210      	movs	r2, #16
 800e084:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800e088:	e016      	b.n	800e0b8 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e08a:	2340      	movs	r3, #64	@ 0x40
 800e08c:	2202      	movs	r2, #2
 800e08e:	2181      	movs	r1, #129	@ 0x81
 800e090:	6878      	ldr	r0, [r7, #4]
 800e092:	f001 ff18 	bl	800fec6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	2201      	movs	r2, #1
 800e09a:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e09c:	2340      	movs	r3, #64	@ 0x40
 800e09e:	2202      	movs	r2, #2
 800e0a0:	2101      	movs	r1, #1
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	f001 ff0f 	bl	800fec6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2201      	movs	r2, #1
 800e0ac:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2210      	movs	r2, #16
 800e0b4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e0b8:	2308      	movs	r3, #8
 800e0ba:	2203      	movs	r2, #3
 800e0bc:	2182      	movs	r1, #130	@ 0x82
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f001 ff01 	bl	800fec6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2201      	movs	r2, #1
 800e0c8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	2200      	movs	r2, #0
 800e0da:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	7c1b      	ldrb	r3, [r3, #16]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d109      	bne.n	800e102 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e0f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e0f8:	2101      	movs	r1, #1
 800e0fa:	6878      	ldr	r0, [r7, #4]
 800e0fc:	f001 ffd2 	bl	80100a4 <USBD_LL_PrepareReceive>
 800e100:	e007      	b.n	800e112 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e108:	2340      	movs	r3, #64	@ 0x40
 800e10a:	2101      	movs	r1, #1
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f001 ffc9 	bl	80100a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e112:	2300      	movs	r3, #0
}
 800e114:	4618      	mov	r0, r3
 800e116:	3710      	adds	r7, #16
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}

0800e11c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b082      	sub	sp, #8
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
 800e124:	460b      	mov	r3, r1
 800e126:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e128:	2181      	movs	r1, #129	@ 0x81
 800e12a:	6878      	ldr	r0, [r7, #4]
 800e12c:	f001 fef1 	bl	800ff12 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2200      	movs	r2, #0
 800e134:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e136:	2101      	movs	r1, #1
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f001 feea 	bl	800ff12 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2200      	movs	r2, #0
 800e142:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e146:	2182      	movs	r1, #130	@ 0x82
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f001 fee2 	bl	800ff12 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2200      	movs	r2, #0
 800e152:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2200      	movs	r2, #0
 800e15a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e164:	2b00      	cmp	r3, #0
 800e166:	d00e      	beq.n	800e186 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e16e:	685b      	ldr	r3, [r3, #4]
 800e170:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e178:	4618      	mov	r0, r3
 800e17a:	f002 f80b 	bl	8010194 <USBD_static_free>
    pdev->pClassData = NULL;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2200      	movs	r2, #0
 800e182:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e186:	2300      	movs	r3, #0
}
 800e188:	4618      	mov	r0, r3
 800e18a:	3708      	adds	r7, #8
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}

0800e190 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b086      	sub	sp, #24
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
 800e198:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e1a0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e1ae:	693b      	ldr	r3, [r7, #16]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d101      	bne.n	800e1b8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800e1b4:	2303      	movs	r3, #3
 800e1b6:	e0af      	b.n	800e318 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	781b      	ldrb	r3, [r3, #0]
 800e1bc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d03f      	beq.n	800e244 <USBD_CDC_Setup+0xb4>
 800e1c4:	2b20      	cmp	r3, #32
 800e1c6:	f040 809f 	bne.w	800e308 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	88db      	ldrh	r3, [r3, #6]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d02e      	beq.n	800e230 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	781b      	ldrb	r3, [r3, #0]
 800e1d6:	b25b      	sxtb	r3, r3
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	da16      	bge.n	800e20a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e1e2:	689b      	ldr	r3, [r3, #8]
 800e1e4:	683a      	ldr	r2, [r7, #0]
 800e1e6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e1e8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e1ea:	683a      	ldr	r2, [r7, #0]
 800e1ec:	88d2      	ldrh	r2, [r2, #6]
 800e1ee:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	88db      	ldrh	r3, [r3, #6]
 800e1f4:	2b07      	cmp	r3, #7
 800e1f6:	bf28      	it	cs
 800e1f8:	2307      	movcs	r3, #7
 800e1fa:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e1fc:	693b      	ldr	r3, [r7, #16]
 800e1fe:	89fa      	ldrh	r2, [r7, #14]
 800e200:	4619      	mov	r1, r3
 800e202:	6878      	ldr	r0, [r7, #4]
 800e204:	f001 fa9d 	bl	800f742 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e208:	e085      	b.n	800e316 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800e20a:	683b      	ldr	r3, [r7, #0]
 800e20c:	785a      	ldrb	r2, [r3, #1]
 800e20e:	693b      	ldr	r3, [r7, #16]
 800e210:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	88db      	ldrh	r3, [r3, #6]
 800e218:	b2da      	uxtb	r2, r3
 800e21a:	693b      	ldr	r3, [r7, #16]
 800e21c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e220:	6939      	ldr	r1, [r7, #16]
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	88db      	ldrh	r3, [r3, #6]
 800e226:	461a      	mov	r2, r3
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	f001 fab6 	bl	800f79a <USBD_CtlPrepareRx>
      break;
 800e22e:	e072      	b.n	800e316 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e236:	689b      	ldr	r3, [r3, #8]
 800e238:	683a      	ldr	r2, [r7, #0]
 800e23a:	7850      	ldrb	r0, [r2, #1]
 800e23c:	2200      	movs	r2, #0
 800e23e:	6839      	ldr	r1, [r7, #0]
 800e240:	4798      	blx	r3
      break;
 800e242:	e068      	b.n	800e316 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	785b      	ldrb	r3, [r3, #1]
 800e248:	2b0b      	cmp	r3, #11
 800e24a:	d852      	bhi.n	800e2f2 <USBD_CDC_Setup+0x162>
 800e24c:	a201      	add	r2, pc, #4	@ (adr r2, 800e254 <USBD_CDC_Setup+0xc4>)
 800e24e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e252:	bf00      	nop
 800e254:	0800e285 	.word	0x0800e285
 800e258:	0800e301 	.word	0x0800e301
 800e25c:	0800e2f3 	.word	0x0800e2f3
 800e260:	0800e2f3 	.word	0x0800e2f3
 800e264:	0800e2f3 	.word	0x0800e2f3
 800e268:	0800e2f3 	.word	0x0800e2f3
 800e26c:	0800e2f3 	.word	0x0800e2f3
 800e270:	0800e2f3 	.word	0x0800e2f3
 800e274:	0800e2f3 	.word	0x0800e2f3
 800e278:	0800e2f3 	.word	0x0800e2f3
 800e27c:	0800e2af 	.word	0x0800e2af
 800e280:	0800e2d9 	.word	0x0800e2d9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e28a:	b2db      	uxtb	r3, r3
 800e28c:	2b03      	cmp	r3, #3
 800e28e:	d107      	bne.n	800e2a0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e290:	f107 030a 	add.w	r3, r7, #10
 800e294:	2202      	movs	r2, #2
 800e296:	4619      	mov	r1, r3
 800e298:	6878      	ldr	r0, [r7, #4]
 800e29a:	f001 fa52 	bl	800f742 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e29e:	e032      	b.n	800e306 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e2a0:	6839      	ldr	r1, [r7, #0]
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f001 f9dc 	bl	800f660 <USBD_CtlError>
            ret = USBD_FAIL;
 800e2a8:	2303      	movs	r3, #3
 800e2aa:	75fb      	strb	r3, [r7, #23]
          break;
 800e2ac:	e02b      	b.n	800e306 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e2b4:	b2db      	uxtb	r3, r3
 800e2b6:	2b03      	cmp	r3, #3
 800e2b8:	d107      	bne.n	800e2ca <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e2ba:	f107 030d 	add.w	r3, r7, #13
 800e2be:	2201      	movs	r2, #1
 800e2c0:	4619      	mov	r1, r3
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f001 fa3d 	bl	800f742 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e2c8:	e01d      	b.n	800e306 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e2ca:	6839      	ldr	r1, [r7, #0]
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f001 f9c7 	bl	800f660 <USBD_CtlError>
            ret = USBD_FAIL;
 800e2d2:	2303      	movs	r3, #3
 800e2d4:	75fb      	strb	r3, [r7, #23]
          break;
 800e2d6:	e016      	b.n	800e306 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e2de:	b2db      	uxtb	r3, r3
 800e2e0:	2b03      	cmp	r3, #3
 800e2e2:	d00f      	beq.n	800e304 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800e2e4:	6839      	ldr	r1, [r7, #0]
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	f001 f9ba 	bl	800f660 <USBD_CtlError>
            ret = USBD_FAIL;
 800e2ec:	2303      	movs	r3, #3
 800e2ee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e2f0:	e008      	b.n	800e304 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e2f2:	6839      	ldr	r1, [r7, #0]
 800e2f4:	6878      	ldr	r0, [r7, #4]
 800e2f6:	f001 f9b3 	bl	800f660 <USBD_CtlError>
          ret = USBD_FAIL;
 800e2fa:	2303      	movs	r3, #3
 800e2fc:	75fb      	strb	r3, [r7, #23]
          break;
 800e2fe:	e002      	b.n	800e306 <USBD_CDC_Setup+0x176>
          break;
 800e300:	bf00      	nop
 800e302:	e008      	b.n	800e316 <USBD_CDC_Setup+0x186>
          break;
 800e304:	bf00      	nop
      }
      break;
 800e306:	e006      	b.n	800e316 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800e308:	6839      	ldr	r1, [r7, #0]
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f001 f9a8 	bl	800f660 <USBD_CtlError>
      ret = USBD_FAIL;
 800e310:	2303      	movs	r3, #3
 800e312:	75fb      	strb	r3, [r7, #23]
      break;
 800e314:	bf00      	nop
  }

  return (uint8_t)ret;
 800e316:	7dfb      	ldrb	r3, [r7, #23]
}
 800e318:	4618      	mov	r0, r3
 800e31a:	3718      	adds	r7, #24
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}

0800e320 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b084      	sub	sp, #16
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
 800e328:	460b      	mov	r3, r1
 800e32a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e332:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d101      	bne.n	800e342 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e33e:	2303      	movs	r3, #3
 800e340:	e04f      	b.n	800e3e2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e348:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e34a:	78fa      	ldrb	r2, [r7, #3]
 800e34c:	6879      	ldr	r1, [r7, #4]
 800e34e:	4613      	mov	r3, r2
 800e350:	009b      	lsls	r3, r3, #2
 800e352:	4413      	add	r3, r2
 800e354:	009b      	lsls	r3, r3, #2
 800e356:	440b      	add	r3, r1
 800e358:	3318      	adds	r3, #24
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d029      	beq.n	800e3b4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e360:	78fa      	ldrb	r2, [r7, #3]
 800e362:	6879      	ldr	r1, [r7, #4]
 800e364:	4613      	mov	r3, r2
 800e366:	009b      	lsls	r3, r3, #2
 800e368:	4413      	add	r3, r2
 800e36a:	009b      	lsls	r3, r3, #2
 800e36c:	440b      	add	r3, r1
 800e36e:	3318      	adds	r3, #24
 800e370:	681a      	ldr	r2, [r3, #0]
 800e372:	78f9      	ldrb	r1, [r7, #3]
 800e374:	68f8      	ldr	r0, [r7, #12]
 800e376:	460b      	mov	r3, r1
 800e378:	009b      	lsls	r3, r3, #2
 800e37a:	440b      	add	r3, r1
 800e37c:	00db      	lsls	r3, r3, #3
 800e37e:	4403      	add	r3, r0
 800e380:	3320      	adds	r3, #32
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	fbb2 f1f3 	udiv	r1, r2, r3
 800e388:	fb01 f303 	mul.w	r3, r1, r3
 800e38c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d110      	bne.n	800e3b4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e392:	78fa      	ldrb	r2, [r7, #3]
 800e394:	6879      	ldr	r1, [r7, #4]
 800e396:	4613      	mov	r3, r2
 800e398:	009b      	lsls	r3, r3, #2
 800e39a:	4413      	add	r3, r2
 800e39c:	009b      	lsls	r3, r3, #2
 800e39e:	440b      	add	r3, r1
 800e3a0:	3318      	adds	r3, #24
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e3a6:	78f9      	ldrb	r1, [r7, #3]
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	6878      	ldr	r0, [r7, #4]
 800e3ae:	f001 fe58 	bl	8010062 <USBD_LL_Transmit>
 800e3b2:	e015      	b.n	800e3e0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e3b4:	68bb      	ldr	r3, [r7, #8]
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e3c2:	691b      	ldr	r3, [r3, #16]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d00b      	beq.n	800e3e0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e3ce:	691b      	ldr	r3, [r3, #16]
 800e3d0:	68ba      	ldr	r2, [r7, #8]
 800e3d2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800e3d6:	68ba      	ldr	r2, [r7, #8]
 800e3d8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e3dc:	78fa      	ldrb	r2, [r7, #3]
 800e3de:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e3e0:	2300      	movs	r3, #0
}
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	3710      	adds	r7, #16
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}

0800e3ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e3ea:	b580      	push	{r7, lr}
 800e3ec:	b084      	sub	sp, #16
 800e3ee:	af00      	add	r7, sp, #0
 800e3f0:	6078      	str	r0, [r7, #4]
 800e3f2:	460b      	mov	r3, r1
 800e3f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e3fc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e404:	2b00      	cmp	r3, #0
 800e406:	d101      	bne.n	800e40c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e408:	2303      	movs	r3, #3
 800e40a:	e015      	b.n	800e438 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e40c:	78fb      	ldrb	r3, [r7, #3]
 800e40e:	4619      	mov	r1, r3
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f001 fe68 	bl	80100e6 <USBD_LL_GetRxDataSize>
 800e416:	4602      	mov	r2, r0
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e424:	68db      	ldr	r3, [r3, #12]
 800e426:	68fa      	ldr	r2, [r7, #12]
 800e428:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e42c:	68fa      	ldr	r2, [r7, #12]
 800e42e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e432:	4611      	mov	r1, r2
 800e434:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e436:	2300      	movs	r3, #0
}
 800e438:	4618      	mov	r0, r3
 800e43a:	3710      	adds	r7, #16
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd80      	pop	{r7, pc}

0800e440 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b084      	sub	sp, #16
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e44e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d101      	bne.n	800e45a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800e456:	2303      	movs	r3, #3
 800e458:	e01a      	b.n	800e490 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e460:	2b00      	cmp	r3, #0
 800e462:	d014      	beq.n	800e48e <USBD_CDC_EP0_RxReady+0x4e>
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e46a:	2bff      	cmp	r3, #255	@ 0xff
 800e46c:	d00f      	beq.n	800e48e <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e474:	689b      	ldr	r3, [r3, #8]
 800e476:	68fa      	ldr	r2, [r7, #12]
 800e478:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800e47c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e47e:	68fa      	ldr	r2, [r7, #12]
 800e480:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e484:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	22ff      	movs	r2, #255	@ 0xff
 800e48a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e48e:	2300      	movs	r3, #0
}
 800e490:	4618      	mov	r0, r3
 800e492:	3710      	adds	r7, #16
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}

0800e498 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e498:	b480      	push	{r7}
 800e49a:	b083      	sub	sp, #12
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	2243      	movs	r2, #67	@ 0x43
 800e4a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e4a6:	4b03      	ldr	r3, [pc, #12]	@ (800e4b4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	370c      	adds	r7, #12
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b2:	4770      	bx	lr
 800e4b4:	2000009c 	.word	0x2000009c

0800e4b8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e4b8:	b480      	push	{r7}
 800e4ba:	b083      	sub	sp, #12
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2243      	movs	r2, #67	@ 0x43
 800e4c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e4c6:	4b03      	ldr	r3, [pc, #12]	@ (800e4d4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	370c      	adds	r7, #12
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d2:	4770      	bx	lr
 800e4d4:	20000058 	.word	0x20000058

0800e4d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e4d8:	b480      	push	{r7}
 800e4da:	b083      	sub	sp, #12
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2243      	movs	r2, #67	@ 0x43
 800e4e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e4e6:	4b03      	ldr	r3, [pc, #12]	@ (800e4f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	370c      	adds	r7, #12
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f2:	4770      	bx	lr
 800e4f4:	200000e0 	.word	0x200000e0

0800e4f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e4f8:	b480      	push	{r7}
 800e4fa:	b083      	sub	sp, #12
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	220a      	movs	r2, #10
 800e504:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e506:	4b03      	ldr	r3, [pc, #12]	@ (800e514 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e508:	4618      	mov	r0, r3
 800e50a:	370c      	adds	r7, #12
 800e50c:	46bd      	mov	sp, r7
 800e50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e512:	4770      	bx	lr
 800e514:	20000014 	.word	0x20000014

0800e518 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e518:	b480      	push	{r7}
 800e51a:	b083      	sub	sp, #12
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
 800e520:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d101      	bne.n	800e52c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e528:	2303      	movs	r3, #3
 800e52a:	e004      	b.n	800e536 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	683a      	ldr	r2, [r7, #0]
 800e530:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800e534:	2300      	movs	r3, #0
}
 800e536:	4618      	mov	r0, r3
 800e538:	370c      	adds	r7, #12
 800e53a:	46bd      	mov	sp, r7
 800e53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e540:	4770      	bx	lr

0800e542 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e542:	b480      	push	{r7}
 800e544:	b087      	sub	sp, #28
 800e546:	af00      	add	r7, sp, #0
 800e548:	60f8      	str	r0, [r7, #12]
 800e54a:	60b9      	str	r1, [r7, #8]
 800e54c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e554:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800e556:	697b      	ldr	r3, [r7, #20]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d101      	bne.n	800e560 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e55c:	2303      	movs	r3, #3
 800e55e:	e008      	b.n	800e572 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800e560:	697b      	ldr	r3, [r7, #20]
 800e562:	68ba      	ldr	r2, [r7, #8]
 800e564:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800e568:	697b      	ldr	r3, [r7, #20]
 800e56a:	687a      	ldr	r2, [r7, #4]
 800e56c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800e570:	2300      	movs	r3, #0
}
 800e572:	4618      	mov	r0, r3
 800e574:	371c      	adds	r7, #28
 800e576:	46bd      	mov	sp, r7
 800e578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57c:	4770      	bx	lr

0800e57e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e57e:	b480      	push	{r7}
 800e580:	b085      	sub	sp, #20
 800e582:	af00      	add	r7, sp, #0
 800e584:	6078      	str	r0, [r7, #4]
 800e586:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e58e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d101      	bne.n	800e59a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800e596:	2303      	movs	r3, #3
 800e598:	e004      	b.n	800e5a4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	683a      	ldr	r2, [r7, #0]
 800e59e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800e5a2:	2300      	movs	r3, #0
}
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	3714      	adds	r7, #20
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ae:	4770      	bx	lr

0800e5b0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b084      	sub	sp, #16
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e5be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d101      	bne.n	800e5ce <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e5ca:	2303      	movs	r3, #3
 800e5cc:	e016      	b.n	800e5fc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	7c1b      	ldrb	r3, [r3, #16]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d109      	bne.n	800e5ea <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e5dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e5e0:	2101      	movs	r1, #1
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f001 fd5e 	bl	80100a4 <USBD_LL_PrepareReceive>
 800e5e8:	e007      	b.n	800e5fa <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e5f0:	2340      	movs	r3, #64	@ 0x40
 800e5f2:	2101      	movs	r1, #1
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f001 fd55 	bl	80100a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e5fa:	2300      	movs	r3, #0
}
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	3710      	adds	r7, #16
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}

0800e604 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b086      	sub	sp, #24
 800e608:	af00      	add	r7, sp, #0
 800e60a:	60f8      	str	r0, [r7, #12]
 800e60c:	60b9      	str	r1, [r7, #8]
 800e60e:	4613      	mov	r3, r2
 800e610:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d101      	bne.n	800e61c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e618:	2303      	movs	r3, #3
 800e61a:	e01f      	b.n	800e65c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	2200      	movs	r2, #0
 800e620:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	2200      	movs	r2, #0
 800e628:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	2200      	movs	r2, #0
 800e630:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d003      	beq.n	800e642 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	68ba      	ldr	r2, [r7, #8]
 800e63e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	2201      	movs	r2, #1
 800e646:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	79fa      	ldrb	r2, [r7, #7]
 800e64e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e650:	68f8      	ldr	r0, [r7, #12]
 800e652:	f001 fbbd 	bl	800fdd0 <USBD_LL_Init>
 800e656:	4603      	mov	r3, r0
 800e658:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e65a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e65c:	4618      	mov	r0, r3
 800e65e:	3718      	adds	r7, #24
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}

0800e664 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b084      	sub	sp, #16
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
 800e66c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e66e:	2300      	movs	r3, #0
 800e670:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d101      	bne.n	800e67c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e678:	2303      	movs	r3, #3
 800e67a:	e016      	b.n	800e6aa <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	683a      	ldr	r2, [r7, #0]
 800e680:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e68a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d00b      	beq.n	800e6a8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e698:	f107 020e 	add.w	r2, r7, #14
 800e69c:	4610      	mov	r0, r2
 800e69e:	4798      	blx	r3
 800e6a0:	4602      	mov	r2, r0
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800e6a8:	2300      	movs	r3, #0
}
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	3710      	adds	r7, #16
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	bd80      	pop	{r7, pc}

0800e6b2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e6b2:	b580      	push	{r7, lr}
 800e6b4:	b082      	sub	sp, #8
 800e6b6:	af00      	add	r7, sp, #0
 800e6b8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e6ba:	6878      	ldr	r0, [r7, #4]
 800e6bc:	f001 fbe8 	bl	800fe90 <USBD_LL_Start>
 800e6c0:	4603      	mov	r3, r0
}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	3708      	adds	r7, #8
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}

0800e6ca <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e6ca:	b480      	push	{r7}
 800e6cc:	b083      	sub	sp, #12
 800e6ce:	af00      	add	r7, sp, #0
 800e6d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e6d2:	2300      	movs	r3, #0
}
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	370c      	adds	r7, #12
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6de:	4770      	bx	lr

0800e6e0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b084      	sub	sp, #16
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	460b      	mov	r3, r1
 800e6ea:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e6ec:	2303      	movs	r3, #3
 800e6ee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d009      	beq.n	800e70e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	78fa      	ldrb	r2, [r7, #3]
 800e704:	4611      	mov	r1, r2
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	4798      	blx	r3
 800e70a:	4603      	mov	r3, r0
 800e70c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e70e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e710:	4618      	mov	r0, r3
 800e712:	3710      	adds	r7, #16
 800e714:	46bd      	mov	sp, r7
 800e716:	bd80      	pop	{r7, pc}

0800e718 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b082      	sub	sp, #8
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
 800e720:	460b      	mov	r3, r1
 800e722:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d007      	beq.n	800e73e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e734:	685b      	ldr	r3, [r3, #4]
 800e736:	78fa      	ldrb	r2, [r7, #3]
 800e738:	4611      	mov	r1, r2
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	4798      	blx	r3
  }

  return USBD_OK;
 800e73e:	2300      	movs	r3, #0
}
 800e740:	4618      	mov	r0, r3
 800e742:	3708      	adds	r7, #8
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}

0800e748 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b084      	sub	sp, #16
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
 800e750:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e758:	6839      	ldr	r1, [r7, #0]
 800e75a:	4618      	mov	r0, r3
 800e75c:	f000 ff46 	bl	800f5ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2201      	movs	r2, #1
 800e764:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800e76e:	461a      	mov	r2, r3
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e77c:	f003 031f 	and.w	r3, r3, #31
 800e780:	2b02      	cmp	r3, #2
 800e782:	d01a      	beq.n	800e7ba <USBD_LL_SetupStage+0x72>
 800e784:	2b02      	cmp	r3, #2
 800e786:	d822      	bhi.n	800e7ce <USBD_LL_SetupStage+0x86>
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d002      	beq.n	800e792 <USBD_LL_SetupStage+0x4a>
 800e78c:	2b01      	cmp	r3, #1
 800e78e:	d00a      	beq.n	800e7a6 <USBD_LL_SetupStage+0x5e>
 800e790:	e01d      	b.n	800e7ce <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e798:	4619      	mov	r1, r3
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f000 f9ee 	bl	800eb7c <USBD_StdDevReq>
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	73fb      	strb	r3, [r7, #15]
      break;
 800e7a4:	e020      	b.n	800e7e8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e7ac:	4619      	mov	r1, r3
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	f000 fa52 	bl	800ec58 <USBD_StdItfReq>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	73fb      	strb	r3, [r7, #15]
      break;
 800e7b8:	e016      	b.n	800e7e8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e7c0:	4619      	mov	r1, r3
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f000 fa91 	bl	800ecea <USBD_StdEPReq>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	73fb      	strb	r3, [r7, #15]
      break;
 800e7cc:	e00c      	b.n	800e7e8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e7d4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e7d8:	b2db      	uxtb	r3, r3
 800e7da:	4619      	mov	r1, r3
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	f001 fbb7 	bl	800ff50 <USBD_LL_StallEP>
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	73fb      	strb	r3, [r7, #15]
      break;
 800e7e6:	bf00      	nop
  }

  return ret;
 800e7e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3710      	adds	r7, #16
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}

0800e7f2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e7f2:	b580      	push	{r7, lr}
 800e7f4:	b086      	sub	sp, #24
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	60f8      	str	r0, [r7, #12]
 800e7fa:	460b      	mov	r3, r1
 800e7fc:	607a      	str	r2, [r7, #4]
 800e7fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e800:	7afb      	ldrb	r3, [r7, #11]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d138      	bne.n	800e878 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800e80c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e814:	2b03      	cmp	r3, #3
 800e816:	d14a      	bne.n	800e8ae <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e818:	693b      	ldr	r3, [r7, #16]
 800e81a:	689a      	ldr	r2, [r3, #8]
 800e81c:	693b      	ldr	r3, [r7, #16]
 800e81e:	68db      	ldr	r3, [r3, #12]
 800e820:	429a      	cmp	r2, r3
 800e822:	d913      	bls.n	800e84c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e824:	693b      	ldr	r3, [r7, #16]
 800e826:	689a      	ldr	r2, [r3, #8]
 800e828:	693b      	ldr	r3, [r7, #16]
 800e82a:	68db      	ldr	r3, [r3, #12]
 800e82c:	1ad2      	subs	r2, r2, r3
 800e82e:	693b      	ldr	r3, [r7, #16]
 800e830:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e832:	693b      	ldr	r3, [r7, #16]
 800e834:	68da      	ldr	r2, [r3, #12]
 800e836:	693b      	ldr	r3, [r7, #16]
 800e838:	689b      	ldr	r3, [r3, #8]
 800e83a:	4293      	cmp	r3, r2
 800e83c:	bf28      	it	cs
 800e83e:	4613      	movcs	r3, r2
 800e840:	461a      	mov	r2, r3
 800e842:	6879      	ldr	r1, [r7, #4]
 800e844:	68f8      	ldr	r0, [r7, #12]
 800e846:	f000 ffc5 	bl	800f7d4 <USBD_CtlContinueRx>
 800e84a:	e030      	b.n	800e8ae <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e852:	b2db      	uxtb	r3, r3
 800e854:	2b03      	cmp	r3, #3
 800e856:	d10b      	bne.n	800e870 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e85e:	691b      	ldr	r3, [r3, #16]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d005      	beq.n	800e870 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e86a:	691b      	ldr	r3, [r3, #16]
 800e86c:	68f8      	ldr	r0, [r7, #12]
 800e86e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e870:	68f8      	ldr	r0, [r7, #12]
 800e872:	f000 ffc0 	bl	800f7f6 <USBD_CtlSendStatus>
 800e876:	e01a      	b.n	800e8ae <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e87e:	b2db      	uxtb	r3, r3
 800e880:	2b03      	cmp	r3, #3
 800e882:	d114      	bne.n	800e8ae <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e88a:	699b      	ldr	r3, [r3, #24]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d00e      	beq.n	800e8ae <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e896:	699b      	ldr	r3, [r3, #24]
 800e898:	7afa      	ldrb	r2, [r7, #11]
 800e89a:	4611      	mov	r1, r2
 800e89c:	68f8      	ldr	r0, [r7, #12]
 800e89e:	4798      	blx	r3
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e8a4:	7dfb      	ldrb	r3, [r7, #23]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d001      	beq.n	800e8ae <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800e8aa:	7dfb      	ldrb	r3, [r7, #23]
 800e8ac:	e000      	b.n	800e8b0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800e8ae:	2300      	movs	r3, #0
}
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3718      	adds	r7, #24
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}

0800e8b8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b086      	sub	sp, #24
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	60f8      	str	r0, [r7, #12]
 800e8c0:	460b      	mov	r3, r1
 800e8c2:	607a      	str	r2, [r7, #4]
 800e8c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e8c6:	7afb      	ldrb	r3, [r7, #11]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d16b      	bne.n	800e9a4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	3314      	adds	r3, #20
 800e8d0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e8d8:	2b02      	cmp	r3, #2
 800e8da:	d156      	bne.n	800e98a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800e8dc:	693b      	ldr	r3, [r7, #16]
 800e8de:	689a      	ldr	r2, [r3, #8]
 800e8e0:	693b      	ldr	r3, [r7, #16]
 800e8e2:	68db      	ldr	r3, [r3, #12]
 800e8e4:	429a      	cmp	r2, r3
 800e8e6:	d914      	bls.n	800e912 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e8e8:	693b      	ldr	r3, [r7, #16]
 800e8ea:	689a      	ldr	r2, [r3, #8]
 800e8ec:	693b      	ldr	r3, [r7, #16]
 800e8ee:	68db      	ldr	r3, [r3, #12]
 800e8f0:	1ad2      	subs	r2, r2, r3
 800e8f2:	693b      	ldr	r3, [r7, #16]
 800e8f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e8f6:	693b      	ldr	r3, [r7, #16]
 800e8f8:	689b      	ldr	r3, [r3, #8]
 800e8fa:	461a      	mov	r2, r3
 800e8fc:	6879      	ldr	r1, [r7, #4]
 800e8fe:	68f8      	ldr	r0, [r7, #12]
 800e900:	f000 ff3a 	bl	800f778 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e904:	2300      	movs	r3, #0
 800e906:	2200      	movs	r2, #0
 800e908:	2100      	movs	r1, #0
 800e90a:	68f8      	ldr	r0, [r7, #12]
 800e90c:	f001 fbca 	bl	80100a4 <USBD_LL_PrepareReceive>
 800e910:	e03b      	b.n	800e98a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e912:	693b      	ldr	r3, [r7, #16]
 800e914:	68da      	ldr	r2, [r3, #12]
 800e916:	693b      	ldr	r3, [r7, #16]
 800e918:	689b      	ldr	r3, [r3, #8]
 800e91a:	429a      	cmp	r2, r3
 800e91c:	d11c      	bne.n	800e958 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e91e:	693b      	ldr	r3, [r7, #16]
 800e920:	685a      	ldr	r2, [r3, #4]
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e926:	429a      	cmp	r2, r3
 800e928:	d316      	bcc.n	800e958 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	685a      	ldr	r2, [r3, #4]
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e934:	429a      	cmp	r2, r3
 800e936:	d20f      	bcs.n	800e958 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e938:	2200      	movs	r2, #0
 800e93a:	2100      	movs	r1, #0
 800e93c:	68f8      	ldr	r0, [r7, #12]
 800e93e:	f000 ff1b 	bl	800f778 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	2200      	movs	r2, #0
 800e946:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e94a:	2300      	movs	r3, #0
 800e94c:	2200      	movs	r2, #0
 800e94e:	2100      	movs	r1, #0
 800e950:	68f8      	ldr	r0, [r7, #12]
 800e952:	f001 fba7 	bl	80100a4 <USBD_LL_PrepareReceive>
 800e956:	e018      	b.n	800e98a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e95e:	b2db      	uxtb	r3, r3
 800e960:	2b03      	cmp	r3, #3
 800e962:	d10b      	bne.n	800e97c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e96a:	68db      	ldr	r3, [r3, #12]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d005      	beq.n	800e97c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e976:	68db      	ldr	r3, [r3, #12]
 800e978:	68f8      	ldr	r0, [r7, #12]
 800e97a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e97c:	2180      	movs	r1, #128	@ 0x80
 800e97e:	68f8      	ldr	r0, [r7, #12]
 800e980:	f001 fae6 	bl	800ff50 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e984:	68f8      	ldr	r0, [r7, #12]
 800e986:	f000 ff49 	bl	800f81c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800e990:	2b01      	cmp	r3, #1
 800e992:	d122      	bne.n	800e9da <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e994:	68f8      	ldr	r0, [r7, #12]
 800e996:	f7ff fe98 	bl	800e6ca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	2200      	movs	r2, #0
 800e99e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800e9a2:	e01a      	b.n	800e9da <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e9aa:	b2db      	uxtb	r3, r3
 800e9ac:	2b03      	cmp	r3, #3
 800e9ae:	d114      	bne.n	800e9da <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e9b6:	695b      	ldr	r3, [r3, #20]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d00e      	beq.n	800e9da <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e9c2:	695b      	ldr	r3, [r3, #20]
 800e9c4:	7afa      	ldrb	r2, [r7, #11]
 800e9c6:	4611      	mov	r1, r2
 800e9c8:	68f8      	ldr	r0, [r7, #12]
 800e9ca:	4798      	blx	r3
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e9d0:	7dfb      	ldrb	r3, [r7, #23]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d001      	beq.n	800e9da <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800e9d6:	7dfb      	ldrb	r3, [r7, #23]
 800e9d8:	e000      	b.n	800e9dc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800e9da:	2300      	movs	r3, #0
}
 800e9dc:	4618      	mov	r0, r3
 800e9de:	3718      	adds	r7, #24
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	bd80      	pop	{r7, pc}

0800e9e4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b082      	sub	sp, #8
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	2201      	movs	r2, #1
 800e9f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2200      	movs	r2, #0
 800ea00:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2200      	movs	r2, #0
 800ea06:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d101      	bne.n	800ea18 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ea14:	2303      	movs	r3, #3
 800ea16:	e02f      	b.n	800ea78 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d00f      	beq.n	800ea42 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea28:	685b      	ldr	r3, [r3, #4]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d009      	beq.n	800ea42 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea34:	685b      	ldr	r3, [r3, #4]
 800ea36:	687a      	ldr	r2, [r7, #4]
 800ea38:	6852      	ldr	r2, [r2, #4]
 800ea3a:	b2d2      	uxtb	r2, r2
 800ea3c:	4611      	mov	r1, r2
 800ea3e:	6878      	ldr	r0, [r7, #4]
 800ea40:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ea42:	2340      	movs	r3, #64	@ 0x40
 800ea44:	2200      	movs	r2, #0
 800ea46:	2100      	movs	r1, #0
 800ea48:	6878      	ldr	r0, [r7, #4]
 800ea4a:	f001 fa3c 	bl	800fec6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2201      	movs	r2, #1
 800ea52:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2240      	movs	r2, #64	@ 0x40
 800ea5a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ea5e:	2340      	movs	r3, #64	@ 0x40
 800ea60:	2200      	movs	r2, #0
 800ea62:	2180      	movs	r1, #128	@ 0x80
 800ea64:	6878      	ldr	r0, [r7, #4]
 800ea66:	f001 fa2e 	bl	800fec6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2201      	movs	r2, #1
 800ea6e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2240      	movs	r2, #64	@ 0x40
 800ea74:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ea76:	2300      	movs	r3, #0
}
 800ea78:	4618      	mov	r0, r3
 800ea7a:	3708      	adds	r7, #8
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}

0800ea80 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ea80:	b480      	push	{r7}
 800ea82:	b083      	sub	sp, #12
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
 800ea88:	460b      	mov	r3, r1
 800ea8a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	78fa      	ldrb	r2, [r7, #3]
 800ea90:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ea92:	2300      	movs	r3, #0
}
 800ea94:	4618      	mov	r0, r3
 800ea96:	370c      	adds	r7, #12
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9e:	4770      	bx	lr

0800eaa0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800eaa0:	b480      	push	{r7}
 800eaa2:	b083      	sub	sp, #12
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eaae:	b2da      	uxtb	r2, r3
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	2204      	movs	r2, #4
 800eaba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800eabe:	2300      	movs	r3, #0
}
 800eac0:	4618      	mov	r0, r3
 800eac2:	370c      	adds	r7, #12
 800eac4:	46bd      	mov	sp, r7
 800eac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaca:	4770      	bx	lr

0800eacc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800eacc:	b480      	push	{r7}
 800eace:	b083      	sub	sp, #12
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eada:	b2db      	uxtb	r3, r3
 800eadc:	2b04      	cmp	r3, #4
 800eade:	d106      	bne.n	800eaee <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800eae6:	b2da      	uxtb	r2, r3
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800eaee:	2300      	movs	r3, #0
}
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	370c      	adds	r7, #12
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafa:	4770      	bx	lr

0800eafc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b082      	sub	sp, #8
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d101      	bne.n	800eb12 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800eb0e:	2303      	movs	r3, #3
 800eb10:	e012      	b.n	800eb38 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb18:	b2db      	uxtb	r3, r3
 800eb1a:	2b03      	cmp	r3, #3
 800eb1c:	d10b      	bne.n	800eb36 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eb24:	69db      	ldr	r3, [r3, #28]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d005      	beq.n	800eb36 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eb30:	69db      	ldr	r3, [r3, #28]
 800eb32:	6878      	ldr	r0, [r7, #4]
 800eb34:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800eb36:	2300      	movs	r3, #0
}
 800eb38:	4618      	mov	r0, r3
 800eb3a:	3708      	adds	r7, #8
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd80      	pop	{r7, pc}

0800eb40 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800eb40:	b480      	push	{r7}
 800eb42:	b087      	sub	sp, #28
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800eb4c:	697b      	ldr	r3, [r7, #20]
 800eb4e:	781b      	ldrb	r3, [r3, #0]
 800eb50:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800eb52:	697b      	ldr	r3, [r7, #20]
 800eb54:	3301      	adds	r3, #1
 800eb56:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800eb58:	697b      	ldr	r3, [r7, #20]
 800eb5a:	781b      	ldrb	r3, [r3, #0]
 800eb5c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800eb5e:	8a3b      	ldrh	r3, [r7, #16]
 800eb60:	021b      	lsls	r3, r3, #8
 800eb62:	b21a      	sxth	r2, r3
 800eb64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800eb68:	4313      	orrs	r3, r2
 800eb6a:	b21b      	sxth	r3, r3
 800eb6c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800eb6e:	89fb      	ldrh	r3, [r7, #14]
}
 800eb70:	4618      	mov	r0, r3
 800eb72:	371c      	adds	r7, #28
 800eb74:	46bd      	mov	sp, r7
 800eb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7a:	4770      	bx	lr

0800eb7c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b084      	sub	sp, #16
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
 800eb84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eb86:	2300      	movs	r3, #0
 800eb88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	781b      	ldrb	r3, [r3, #0]
 800eb8e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800eb92:	2b40      	cmp	r3, #64	@ 0x40
 800eb94:	d005      	beq.n	800eba2 <USBD_StdDevReq+0x26>
 800eb96:	2b40      	cmp	r3, #64	@ 0x40
 800eb98:	d853      	bhi.n	800ec42 <USBD_StdDevReq+0xc6>
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d00b      	beq.n	800ebb6 <USBD_StdDevReq+0x3a>
 800eb9e:	2b20      	cmp	r3, #32
 800eba0:	d14f      	bne.n	800ec42 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eba8:	689b      	ldr	r3, [r3, #8]
 800ebaa:	6839      	ldr	r1, [r7, #0]
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	4798      	blx	r3
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	73fb      	strb	r3, [r7, #15]
      break;
 800ebb4:	e04a      	b.n	800ec4c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	785b      	ldrb	r3, [r3, #1]
 800ebba:	2b09      	cmp	r3, #9
 800ebbc:	d83b      	bhi.n	800ec36 <USBD_StdDevReq+0xba>
 800ebbe:	a201      	add	r2, pc, #4	@ (adr r2, 800ebc4 <USBD_StdDevReq+0x48>)
 800ebc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebc4:	0800ec19 	.word	0x0800ec19
 800ebc8:	0800ec2d 	.word	0x0800ec2d
 800ebcc:	0800ec37 	.word	0x0800ec37
 800ebd0:	0800ec23 	.word	0x0800ec23
 800ebd4:	0800ec37 	.word	0x0800ec37
 800ebd8:	0800ebf7 	.word	0x0800ebf7
 800ebdc:	0800ebed 	.word	0x0800ebed
 800ebe0:	0800ec37 	.word	0x0800ec37
 800ebe4:	0800ec0f 	.word	0x0800ec0f
 800ebe8:	0800ec01 	.word	0x0800ec01
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ebec:	6839      	ldr	r1, [r7, #0]
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f000 f9de 	bl	800efb0 <USBD_GetDescriptor>
          break;
 800ebf4:	e024      	b.n	800ec40 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ebf6:	6839      	ldr	r1, [r7, #0]
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f000 fb6d 	bl	800f2d8 <USBD_SetAddress>
          break;
 800ebfe:	e01f      	b.n	800ec40 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ec00:	6839      	ldr	r1, [r7, #0]
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f000 fbac 	bl	800f360 <USBD_SetConfig>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	73fb      	strb	r3, [r7, #15]
          break;
 800ec0c:	e018      	b.n	800ec40 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ec0e:	6839      	ldr	r1, [r7, #0]
 800ec10:	6878      	ldr	r0, [r7, #4]
 800ec12:	f000 fc4b 	bl	800f4ac <USBD_GetConfig>
          break;
 800ec16:	e013      	b.n	800ec40 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ec18:	6839      	ldr	r1, [r7, #0]
 800ec1a:	6878      	ldr	r0, [r7, #4]
 800ec1c:	f000 fc7c 	bl	800f518 <USBD_GetStatus>
          break;
 800ec20:	e00e      	b.n	800ec40 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ec22:	6839      	ldr	r1, [r7, #0]
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	f000 fcab 	bl	800f580 <USBD_SetFeature>
          break;
 800ec2a:	e009      	b.n	800ec40 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ec2c:	6839      	ldr	r1, [r7, #0]
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	f000 fcba 	bl	800f5a8 <USBD_ClrFeature>
          break;
 800ec34:	e004      	b.n	800ec40 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ec36:	6839      	ldr	r1, [r7, #0]
 800ec38:	6878      	ldr	r0, [r7, #4]
 800ec3a:	f000 fd11 	bl	800f660 <USBD_CtlError>
          break;
 800ec3e:	bf00      	nop
      }
      break;
 800ec40:	e004      	b.n	800ec4c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ec42:	6839      	ldr	r1, [r7, #0]
 800ec44:	6878      	ldr	r0, [r7, #4]
 800ec46:	f000 fd0b 	bl	800f660 <USBD_CtlError>
      break;
 800ec4a:	bf00      	nop
  }

  return ret;
 800ec4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec4e:	4618      	mov	r0, r3
 800ec50:	3710      	adds	r7, #16
 800ec52:	46bd      	mov	sp, r7
 800ec54:	bd80      	pop	{r7, pc}
 800ec56:	bf00      	nop

0800ec58 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b084      	sub	sp, #16
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
 800ec60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ec62:	2300      	movs	r3, #0
 800ec64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ec66:	683b      	ldr	r3, [r7, #0]
 800ec68:	781b      	ldrb	r3, [r3, #0]
 800ec6a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ec6e:	2b40      	cmp	r3, #64	@ 0x40
 800ec70:	d005      	beq.n	800ec7e <USBD_StdItfReq+0x26>
 800ec72:	2b40      	cmp	r3, #64	@ 0x40
 800ec74:	d82f      	bhi.n	800ecd6 <USBD_StdItfReq+0x7e>
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d001      	beq.n	800ec7e <USBD_StdItfReq+0x26>
 800ec7a:	2b20      	cmp	r3, #32
 800ec7c:	d12b      	bne.n	800ecd6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ec84:	b2db      	uxtb	r3, r3
 800ec86:	3b01      	subs	r3, #1
 800ec88:	2b02      	cmp	r3, #2
 800ec8a:	d81d      	bhi.n	800ecc8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	889b      	ldrh	r3, [r3, #4]
 800ec90:	b2db      	uxtb	r3, r3
 800ec92:	2b01      	cmp	r3, #1
 800ec94:	d813      	bhi.n	800ecbe <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec9c:	689b      	ldr	r3, [r3, #8]
 800ec9e:	6839      	ldr	r1, [r7, #0]
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	4798      	blx	r3
 800eca4:	4603      	mov	r3, r0
 800eca6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	88db      	ldrh	r3, [r3, #6]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d110      	bne.n	800ecd2 <USBD_StdItfReq+0x7a>
 800ecb0:	7bfb      	ldrb	r3, [r7, #15]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d10d      	bne.n	800ecd2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	f000 fd9d 	bl	800f7f6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ecbc:	e009      	b.n	800ecd2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800ecbe:	6839      	ldr	r1, [r7, #0]
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f000 fccd 	bl	800f660 <USBD_CtlError>
          break;
 800ecc6:	e004      	b.n	800ecd2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ecc8:	6839      	ldr	r1, [r7, #0]
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	f000 fcc8 	bl	800f660 <USBD_CtlError>
          break;
 800ecd0:	e000      	b.n	800ecd4 <USBD_StdItfReq+0x7c>
          break;
 800ecd2:	bf00      	nop
      }
      break;
 800ecd4:	e004      	b.n	800ece0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ecd6:	6839      	ldr	r1, [r7, #0]
 800ecd8:	6878      	ldr	r0, [r7, #4]
 800ecda:	f000 fcc1 	bl	800f660 <USBD_CtlError>
      break;
 800ecde:	bf00      	nop
  }

  return ret;
 800ece0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ece2:	4618      	mov	r0, r3
 800ece4:	3710      	adds	r7, #16
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}

0800ecea <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ecea:	b580      	push	{r7, lr}
 800ecec:	b084      	sub	sp, #16
 800ecee:	af00      	add	r7, sp, #0
 800ecf0:	6078      	str	r0, [r7, #4]
 800ecf2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ecf8:	683b      	ldr	r3, [r7, #0]
 800ecfa:	889b      	ldrh	r3, [r3, #4]
 800ecfc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	781b      	ldrb	r3, [r3, #0]
 800ed02:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ed06:	2b40      	cmp	r3, #64	@ 0x40
 800ed08:	d007      	beq.n	800ed1a <USBD_StdEPReq+0x30>
 800ed0a:	2b40      	cmp	r3, #64	@ 0x40
 800ed0c:	f200 8145 	bhi.w	800ef9a <USBD_StdEPReq+0x2b0>
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d00c      	beq.n	800ed2e <USBD_StdEPReq+0x44>
 800ed14:	2b20      	cmp	r3, #32
 800ed16:	f040 8140 	bne.w	800ef9a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ed20:	689b      	ldr	r3, [r3, #8]
 800ed22:	6839      	ldr	r1, [r7, #0]
 800ed24:	6878      	ldr	r0, [r7, #4]
 800ed26:	4798      	blx	r3
 800ed28:	4603      	mov	r3, r0
 800ed2a:	73fb      	strb	r3, [r7, #15]
      break;
 800ed2c:	e13a      	b.n	800efa4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	785b      	ldrb	r3, [r3, #1]
 800ed32:	2b03      	cmp	r3, #3
 800ed34:	d007      	beq.n	800ed46 <USBD_StdEPReq+0x5c>
 800ed36:	2b03      	cmp	r3, #3
 800ed38:	f300 8129 	bgt.w	800ef8e <USBD_StdEPReq+0x2a4>
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d07f      	beq.n	800ee40 <USBD_StdEPReq+0x156>
 800ed40:	2b01      	cmp	r3, #1
 800ed42:	d03c      	beq.n	800edbe <USBD_StdEPReq+0xd4>
 800ed44:	e123      	b.n	800ef8e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed4c:	b2db      	uxtb	r3, r3
 800ed4e:	2b02      	cmp	r3, #2
 800ed50:	d002      	beq.n	800ed58 <USBD_StdEPReq+0x6e>
 800ed52:	2b03      	cmp	r3, #3
 800ed54:	d016      	beq.n	800ed84 <USBD_StdEPReq+0x9a>
 800ed56:	e02c      	b.n	800edb2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ed58:	7bbb      	ldrb	r3, [r7, #14]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d00d      	beq.n	800ed7a <USBD_StdEPReq+0x90>
 800ed5e:	7bbb      	ldrb	r3, [r7, #14]
 800ed60:	2b80      	cmp	r3, #128	@ 0x80
 800ed62:	d00a      	beq.n	800ed7a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ed64:	7bbb      	ldrb	r3, [r7, #14]
 800ed66:	4619      	mov	r1, r3
 800ed68:	6878      	ldr	r0, [r7, #4]
 800ed6a:	f001 f8f1 	bl	800ff50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ed6e:	2180      	movs	r1, #128	@ 0x80
 800ed70:	6878      	ldr	r0, [r7, #4]
 800ed72:	f001 f8ed 	bl	800ff50 <USBD_LL_StallEP>
 800ed76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ed78:	e020      	b.n	800edbc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800ed7a:	6839      	ldr	r1, [r7, #0]
 800ed7c:	6878      	ldr	r0, [r7, #4]
 800ed7e:	f000 fc6f 	bl	800f660 <USBD_CtlError>
              break;
 800ed82:	e01b      	b.n	800edbc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	885b      	ldrh	r3, [r3, #2]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d10e      	bne.n	800edaa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ed8c:	7bbb      	ldrb	r3, [r7, #14]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d00b      	beq.n	800edaa <USBD_StdEPReq+0xc0>
 800ed92:	7bbb      	ldrb	r3, [r7, #14]
 800ed94:	2b80      	cmp	r3, #128	@ 0x80
 800ed96:	d008      	beq.n	800edaa <USBD_StdEPReq+0xc0>
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	88db      	ldrh	r3, [r3, #6]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d104      	bne.n	800edaa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800eda0:	7bbb      	ldrb	r3, [r7, #14]
 800eda2:	4619      	mov	r1, r3
 800eda4:	6878      	ldr	r0, [r7, #4]
 800eda6:	f001 f8d3 	bl	800ff50 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800edaa:	6878      	ldr	r0, [r7, #4]
 800edac:	f000 fd23 	bl	800f7f6 <USBD_CtlSendStatus>

              break;
 800edb0:	e004      	b.n	800edbc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800edb2:	6839      	ldr	r1, [r7, #0]
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	f000 fc53 	bl	800f660 <USBD_CtlError>
              break;
 800edba:	bf00      	nop
          }
          break;
 800edbc:	e0ec      	b.n	800ef98 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800edc4:	b2db      	uxtb	r3, r3
 800edc6:	2b02      	cmp	r3, #2
 800edc8:	d002      	beq.n	800edd0 <USBD_StdEPReq+0xe6>
 800edca:	2b03      	cmp	r3, #3
 800edcc:	d016      	beq.n	800edfc <USBD_StdEPReq+0x112>
 800edce:	e030      	b.n	800ee32 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800edd0:	7bbb      	ldrb	r3, [r7, #14]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d00d      	beq.n	800edf2 <USBD_StdEPReq+0x108>
 800edd6:	7bbb      	ldrb	r3, [r7, #14]
 800edd8:	2b80      	cmp	r3, #128	@ 0x80
 800edda:	d00a      	beq.n	800edf2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800eddc:	7bbb      	ldrb	r3, [r7, #14]
 800edde:	4619      	mov	r1, r3
 800ede0:	6878      	ldr	r0, [r7, #4]
 800ede2:	f001 f8b5 	bl	800ff50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ede6:	2180      	movs	r1, #128	@ 0x80
 800ede8:	6878      	ldr	r0, [r7, #4]
 800edea:	f001 f8b1 	bl	800ff50 <USBD_LL_StallEP>
 800edee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800edf0:	e025      	b.n	800ee3e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800edf2:	6839      	ldr	r1, [r7, #0]
 800edf4:	6878      	ldr	r0, [r7, #4]
 800edf6:	f000 fc33 	bl	800f660 <USBD_CtlError>
              break;
 800edfa:	e020      	b.n	800ee3e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	885b      	ldrh	r3, [r3, #2]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d11b      	bne.n	800ee3c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ee04:	7bbb      	ldrb	r3, [r7, #14]
 800ee06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d004      	beq.n	800ee18 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ee0e:	7bbb      	ldrb	r3, [r7, #14]
 800ee10:	4619      	mov	r1, r3
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	f001 f8bb 	bl	800ff8e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ee18:	6878      	ldr	r0, [r7, #4]
 800ee1a:	f000 fcec 	bl	800f7f6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee24:	689b      	ldr	r3, [r3, #8]
 800ee26:	6839      	ldr	r1, [r7, #0]
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	4798      	blx	r3
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ee30:	e004      	b.n	800ee3c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ee32:	6839      	ldr	r1, [r7, #0]
 800ee34:	6878      	ldr	r0, [r7, #4]
 800ee36:	f000 fc13 	bl	800f660 <USBD_CtlError>
              break;
 800ee3a:	e000      	b.n	800ee3e <USBD_StdEPReq+0x154>
              break;
 800ee3c:	bf00      	nop
          }
          break;
 800ee3e:	e0ab      	b.n	800ef98 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee46:	b2db      	uxtb	r3, r3
 800ee48:	2b02      	cmp	r3, #2
 800ee4a:	d002      	beq.n	800ee52 <USBD_StdEPReq+0x168>
 800ee4c:	2b03      	cmp	r3, #3
 800ee4e:	d032      	beq.n	800eeb6 <USBD_StdEPReq+0x1cc>
 800ee50:	e097      	b.n	800ef82 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ee52:	7bbb      	ldrb	r3, [r7, #14]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d007      	beq.n	800ee68 <USBD_StdEPReq+0x17e>
 800ee58:	7bbb      	ldrb	r3, [r7, #14]
 800ee5a:	2b80      	cmp	r3, #128	@ 0x80
 800ee5c:	d004      	beq.n	800ee68 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ee5e:	6839      	ldr	r1, [r7, #0]
 800ee60:	6878      	ldr	r0, [r7, #4]
 800ee62:	f000 fbfd 	bl	800f660 <USBD_CtlError>
                break;
 800ee66:	e091      	b.n	800ef8c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ee68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	da0b      	bge.n	800ee88 <USBD_StdEPReq+0x19e>
 800ee70:	7bbb      	ldrb	r3, [r7, #14]
 800ee72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ee76:	4613      	mov	r3, r2
 800ee78:	009b      	lsls	r3, r3, #2
 800ee7a:	4413      	add	r3, r2
 800ee7c:	009b      	lsls	r3, r3, #2
 800ee7e:	3310      	adds	r3, #16
 800ee80:	687a      	ldr	r2, [r7, #4]
 800ee82:	4413      	add	r3, r2
 800ee84:	3304      	adds	r3, #4
 800ee86:	e00b      	b.n	800eea0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ee88:	7bbb      	ldrb	r3, [r7, #14]
 800ee8a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ee8e:	4613      	mov	r3, r2
 800ee90:	009b      	lsls	r3, r3, #2
 800ee92:	4413      	add	r3, r2
 800ee94:	009b      	lsls	r3, r3, #2
 800ee96:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ee9a:	687a      	ldr	r2, [r7, #4]
 800ee9c:	4413      	add	r3, r2
 800ee9e:	3304      	adds	r3, #4
 800eea0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800eea2:	68bb      	ldr	r3, [r7, #8]
 800eea4:	2200      	movs	r2, #0
 800eea6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800eea8:	68bb      	ldr	r3, [r7, #8]
 800eeaa:	2202      	movs	r2, #2
 800eeac:	4619      	mov	r1, r3
 800eeae:	6878      	ldr	r0, [r7, #4]
 800eeb0:	f000 fc47 	bl	800f742 <USBD_CtlSendData>
              break;
 800eeb4:	e06a      	b.n	800ef8c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800eeb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	da11      	bge.n	800eee2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800eebe:	7bbb      	ldrb	r3, [r7, #14]
 800eec0:	f003 020f 	and.w	r2, r3, #15
 800eec4:	6879      	ldr	r1, [r7, #4]
 800eec6:	4613      	mov	r3, r2
 800eec8:	009b      	lsls	r3, r3, #2
 800eeca:	4413      	add	r3, r2
 800eecc:	009b      	lsls	r3, r3, #2
 800eece:	440b      	add	r3, r1
 800eed0:	3324      	adds	r3, #36	@ 0x24
 800eed2:	881b      	ldrh	r3, [r3, #0]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d117      	bne.n	800ef08 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800eed8:	6839      	ldr	r1, [r7, #0]
 800eeda:	6878      	ldr	r0, [r7, #4]
 800eedc:	f000 fbc0 	bl	800f660 <USBD_CtlError>
                  break;
 800eee0:	e054      	b.n	800ef8c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800eee2:	7bbb      	ldrb	r3, [r7, #14]
 800eee4:	f003 020f 	and.w	r2, r3, #15
 800eee8:	6879      	ldr	r1, [r7, #4]
 800eeea:	4613      	mov	r3, r2
 800eeec:	009b      	lsls	r3, r3, #2
 800eeee:	4413      	add	r3, r2
 800eef0:	009b      	lsls	r3, r3, #2
 800eef2:	440b      	add	r3, r1
 800eef4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800eef8:	881b      	ldrh	r3, [r3, #0]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d104      	bne.n	800ef08 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800eefe:	6839      	ldr	r1, [r7, #0]
 800ef00:	6878      	ldr	r0, [r7, #4]
 800ef02:	f000 fbad 	bl	800f660 <USBD_CtlError>
                  break;
 800ef06:	e041      	b.n	800ef8c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ef08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	da0b      	bge.n	800ef28 <USBD_StdEPReq+0x23e>
 800ef10:	7bbb      	ldrb	r3, [r7, #14]
 800ef12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ef16:	4613      	mov	r3, r2
 800ef18:	009b      	lsls	r3, r3, #2
 800ef1a:	4413      	add	r3, r2
 800ef1c:	009b      	lsls	r3, r3, #2
 800ef1e:	3310      	adds	r3, #16
 800ef20:	687a      	ldr	r2, [r7, #4]
 800ef22:	4413      	add	r3, r2
 800ef24:	3304      	adds	r3, #4
 800ef26:	e00b      	b.n	800ef40 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ef28:	7bbb      	ldrb	r3, [r7, #14]
 800ef2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ef2e:	4613      	mov	r3, r2
 800ef30:	009b      	lsls	r3, r3, #2
 800ef32:	4413      	add	r3, r2
 800ef34:	009b      	lsls	r3, r3, #2
 800ef36:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ef3a:	687a      	ldr	r2, [r7, #4]
 800ef3c:	4413      	add	r3, r2
 800ef3e:	3304      	adds	r3, #4
 800ef40:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ef42:	7bbb      	ldrb	r3, [r7, #14]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d002      	beq.n	800ef4e <USBD_StdEPReq+0x264>
 800ef48:	7bbb      	ldrb	r3, [r7, #14]
 800ef4a:	2b80      	cmp	r3, #128	@ 0x80
 800ef4c:	d103      	bne.n	800ef56 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	2200      	movs	r2, #0
 800ef52:	601a      	str	r2, [r3, #0]
 800ef54:	e00e      	b.n	800ef74 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ef56:	7bbb      	ldrb	r3, [r7, #14]
 800ef58:	4619      	mov	r1, r3
 800ef5a:	6878      	ldr	r0, [r7, #4]
 800ef5c:	f001 f836 	bl	800ffcc <USBD_LL_IsStallEP>
 800ef60:	4603      	mov	r3, r0
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d003      	beq.n	800ef6e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ef66:	68bb      	ldr	r3, [r7, #8]
 800ef68:	2201      	movs	r2, #1
 800ef6a:	601a      	str	r2, [r3, #0]
 800ef6c:	e002      	b.n	800ef74 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ef6e:	68bb      	ldr	r3, [r7, #8]
 800ef70:	2200      	movs	r2, #0
 800ef72:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	2202      	movs	r2, #2
 800ef78:	4619      	mov	r1, r3
 800ef7a:	6878      	ldr	r0, [r7, #4]
 800ef7c:	f000 fbe1 	bl	800f742 <USBD_CtlSendData>
              break;
 800ef80:	e004      	b.n	800ef8c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ef82:	6839      	ldr	r1, [r7, #0]
 800ef84:	6878      	ldr	r0, [r7, #4]
 800ef86:	f000 fb6b 	bl	800f660 <USBD_CtlError>
              break;
 800ef8a:	bf00      	nop
          }
          break;
 800ef8c:	e004      	b.n	800ef98 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ef8e:	6839      	ldr	r1, [r7, #0]
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	f000 fb65 	bl	800f660 <USBD_CtlError>
          break;
 800ef96:	bf00      	nop
      }
      break;
 800ef98:	e004      	b.n	800efa4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800ef9a:	6839      	ldr	r1, [r7, #0]
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	f000 fb5f 	bl	800f660 <USBD_CtlError>
      break;
 800efa2:	bf00      	nop
  }

  return ret;
 800efa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800efa6:	4618      	mov	r0, r3
 800efa8:	3710      	adds	r7, #16
 800efaa:	46bd      	mov	sp, r7
 800efac:	bd80      	pop	{r7, pc}
	...

0800efb0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b084      	sub	sp, #16
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
 800efb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800efba:	2300      	movs	r3, #0
 800efbc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800efbe:	2300      	movs	r3, #0
 800efc0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800efc2:	2300      	movs	r3, #0
 800efc4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	885b      	ldrh	r3, [r3, #2]
 800efca:	0a1b      	lsrs	r3, r3, #8
 800efcc:	b29b      	uxth	r3, r3
 800efce:	3b01      	subs	r3, #1
 800efd0:	2b0e      	cmp	r3, #14
 800efd2:	f200 8152 	bhi.w	800f27a <USBD_GetDescriptor+0x2ca>
 800efd6:	a201      	add	r2, pc, #4	@ (adr r2, 800efdc <USBD_GetDescriptor+0x2c>)
 800efd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efdc:	0800f04d 	.word	0x0800f04d
 800efe0:	0800f065 	.word	0x0800f065
 800efe4:	0800f0a5 	.word	0x0800f0a5
 800efe8:	0800f27b 	.word	0x0800f27b
 800efec:	0800f27b 	.word	0x0800f27b
 800eff0:	0800f21b 	.word	0x0800f21b
 800eff4:	0800f247 	.word	0x0800f247
 800eff8:	0800f27b 	.word	0x0800f27b
 800effc:	0800f27b 	.word	0x0800f27b
 800f000:	0800f27b 	.word	0x0800f27b
 800f004:	0800f27b 	.word	0x0800f27b
 800f008:	0800f27b 	.word	0x0800f27b
 800f00c:	0800f27b 	.word	0x0800f27b
 800f010:	0800f27b 	.word	0x0800f27b
 800f014:	0800f019 	.word	0x0800f019
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f01e:	69db      	ldr	r3, [r3, #28]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d00b      	beq.n	800f03c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f02a:	69db      	ldr	r3, [r3, #28]
 800f02c:	687a      	ldr	r2, [r7, #4]
 800f02e:	7c12      	ldrb	r2, [r2, #16]
 800f030:	f107 0108 	add.w	r1, r7, #8
 800f034:	4610      	mov	r0, r2
 800f036:	4798      	blx	r3
 800f038:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f03a:	e126      	b.n	800f28a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f03c:	6839      	ldr	r1, [r7, #0]
 800f03e:	6878      	ldr	r0, [r7, #4]
 800f040:	f000 fb0e 	bl	800f660 <USBD_CtlError>
        err++;
 800f044:	7afb      	ldrb	r3, [r7, #11]
 800f046:	3301      	adds	r3, #1
 800f048:	72fb      	strb	r3, [r7, #11]
      break;
 800f04a:	e11e      	b.n	800f28a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	687a      	ldr	r2, [r7, #4]
 800f056:	7c12      	ldrb	r2, [r2, #16]
 800f058:	f107 0108 	add.w	r1, r7, #8
 800f05c:	4610      	mov	r0, r2
 800f05e:	4798      	blx	r3
 800f060:	60f8      	str	r0, [r7, #12]
      break;
 800f062:	e112      	b.n	800f28a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	7c1b      	ldrb	r3, [r3, #16]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d10d      	bne.n	800f088 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f074:	f107 0208 	add.w	r2, r7, #8
 800f078:	4610      	mov	r0, r2
 800f07a:	4798      	blx	r3
 800f07c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	3301      	adds	r3, #1
 800f082:	2202      	movs	r2, #2
 800f084:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f086:	e100      	b.n	800f28a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f08e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f090:	f107 0208 	add.w	r2, r7, #8
 800f094:	4610      	mov	r0, r2
 800f096:	4798      	blx	r3
 800f098:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	3301      	adds	r3, #1
 800f09e:	2202      	movs	r2, #2
 800f0a0:	701a      	strb	r2, [r3, #0]
      break;
 800f0a2:	e0f2      	b.n	800f28a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f0a4:	683b      	ldr	r3, [r7, #0]
 800f0a6:	885b      	ldrh	r3, [r3, #2]
 800f0a8:	b2db      	uxtb	r3, r3
 800f0aa:	2b05      	cmp	r3, #5
 800f0ac:	f200 80ac 	bhi.w	800f208 <USBD_GetDescriptor+0x258>
 800f0b0:	a201      	add	r2, pc, #4	@ (adr r2, 800f0b8 <USBD_GetDescriptor+0x108>)
 800f0b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0b6:	bf00      	nop
 800f0b8:	0800f0d1 	.word	0x0800f0d1
 800f0bc:	0800f105 	.word	0x0800f105
 800f0c0:	0800f139 	.word	0x0800f139
 800f0c4:	0800f16d 	.word	0x0800f16d
 800f0c8:	0800f1a1 	.word	0x0800f1a1
 800f0cc:	0800f1d5 	.word	0x0800f1d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f0d6:	685b      	ldr	r3, [r3, #4]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d00b      	beq.n	800f0f4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f0e2:	685b      	ldr	r3, [r3, #4]
 800f0e4:	687a      	ldr	r2, [r7, #4]
 800f0e6:	7c12      	ldrb	r2, [r2, #16]
 800f0e8:	f107 0108 	add.w	r1, r7, #8
 800f0ec:	4610      	mov	r0, r2
 800f0ee:	4798      	blx	r3
 800f0f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f0f2:	e091      	b.n	800f218 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f0f4:	6839      	ldr	r1, [r7, #0]
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	f000 fab2 	bl	800f660 <USBD_CtlError>
            err++;
 800f0fc:	7afb      	ldrb	r3, [r7, #11]
 800f0fe:	3301      	adds	r3, #1
 800f100:	72fb      	strb	r3, [r7, #11]
          break;
 800f102:	e089      	b.n	800f218 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f10a:	689b      	ldr	r3, [r3, #8]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d00b      	beq.n	800f128 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f116:	689b      	ldr	r3, [r3, #8]
 800f118:	687a      	ldr	r2, [r7, #4]
 800f11a:	7c12      	ldrb	r2, [r2, #16]
 800f11c:	f107 0108 	add.w	r1, r7, #8
 800f120:	4610      	mov	r0, r2
 800f122:	4798      	blx	r3
 800f124:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f126:	e077      	b.n	800f218 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f128:	6839      	ldr	r1, [r7, #0]
 800f12a:	6878      	ldr	r0, [r7, #4]
 800f12c:	f000 fa98 	bl	800f660 <USBD_CtlError>
            err++;
 800f130:	7afb      	ldrb	r3, [r7, #11]
 800f132:	3301      	adds	r3, #1
 800f134:	72fb      	strb	r3, [r7, #11]
          break;
 800f136:	e06f      	b.n	800f218 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f13e:	68db      	ldr	r3, [r3, #12]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d00b      	beq.n	800f15c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f14a:	68db      	ldr	r3, [r3, #12]
 800f14c:	687a      	ldr	r2, [r7, #4]
 800f14e:	7c12      	ldrb	r2, [r2, #16]
 800f150:	f107 0108 	add.w	r1, r7, #8
 800f154:	4610      	mov	r0, r2
 800f156:	4798      	blx	r3
 800f158:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f15a:	e05d      	b.n	800f218 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f15c:	6839      	ldr	r1, [r7, #0]
 800f15e:	6878      	ldr	r0, [r7, #4]
 800f160:	f000 fa7e 	bl	800f660 <USBD_CtlError>
            err++;
 800f164:	7afb      	ldrb	r3, [r7, #11]
 800f166:	3301      	adds	r3, #1
 800f168:	72fb      	strb	r3, [r7, #11]
          break;
 800f16a:	e055      	b.n	800f218 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f172:	691b      	ldr	r3, [r3, #16]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d00b      	beq.n	800f190 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f17e:	691b      	ldr	r3, [r3, #16]
 800f180:	687a      	ldr	r2, [r7, #4]
 800f182:	7c12      	ldrb	r2, [r2, #16]
 800f184:	f107 0108 	add.w	r1, r7, #8
 800f188:	4610      	mov	r0, r2
 800f18a:	4798      	blx	r3
 800f18c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f18e:	e043      	b.n	800f218 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f190:	6839      	ldr	r1, [r7, #0]
 800f192:	6878      	ldr	r0, [r7, #4]
 800f194:	f000 fa64 	bl	800f660 <USBD_CtlError>
            err++;
 800f198:	7afb      	ldrb	r3, [r7, #11]
 800f19a:	3301      	adds	r3, #1
 800f19c:	72fb      	strb	r3, [r7, #11]
          break;
 800f19e:	e03b      	b.n	800f218 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f1a6:	695b      	ldr	r3, [r3, #20]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d00b      	beq.n	800f1c4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f1b2:	695b      	ldr	r3, [r3, #20]
 800f1b4:	687a      	ldr	r2, [r7, #4]
 800f1b6:	7c12      	ldrb	r2, [r2, #16]
 800f1b8:	f107 0108 	add.w	r1, r7, #8
 800f1bc:	4610      	mov	r0, r2
 800f1be:	4798      	blx	r3
 800f1c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f1c2:	e029      	b.n	800f218 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f1c4:	6839      	ldr	r1, [r7, #0]
 800f1c6:	6878      	ldr	r0, [r7, #4]
 800f1c8:	f000 fa4a 	bl	800f660 <USBD_CtlError>
            err++;
 800f1cc:	7afb      	ldrb	r3, [r7, #11]
 800f1ce:	3301      	adds	r3, #1
 800f1d0:	72fb      	strb	r3, [r7, #11]
          break;
 800f1d2:	e021      	b.n	800f218 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f1da:	699b      	ldr	r3, [r3, #24]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d00b      	beq.n	800f1f8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f1e6:	699b      	ldr	r3, [r3, #24]
 800f1e8:	687a      	ldr	r2, [r7, #4]
 800f1ea:	7c12      	ldrb	r2, [r2, #16]
 800f1ec:	f107 0108 	add.w	r1, r7, #8
 800f1f0:	4610      	mov	r0, r2
 800f1f2:	4798      	blx	r3
 800f1f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f1f6:	e00f      	b.n	800f218 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f1f8:	6839      	ldr	r1, [r7, #0]
 800f1fa:	6878      	ldr	r0, [r7, #4]
 800f1fc:	f000 fa30 	bl	800f660 <USBD_CtlError>
            err++;
 800f200:	7afb      	ldrb	r3, [r7, #11]
 800f202:	3301      	adds	r3, #1
 800f204:	72fb      	strb	r3, [r7, #11]
          break;
 800f206:	e007      	b.n	800f218 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f208:	6839      	ldr	r1, [r7, #0]
 800f20a:	6878      	ldr	r0, [r7, #4]
 800f20c:	f000 fa28 	bl	800f660 <USBD_CtlError>
          err++;
 800f210:	7afb      	ldrb	r3, [r7, #11]
 800f212:	3301      	adds	r3, #1
 800f214:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800f216:	bf00      	nop
      }
      break;
 800f218:	e037      	b.n	800f28a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	7c1b      	ldrb	r3, [r3, #16]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d109      	bne.n	800f236 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f22a:	f107 0208 	add.w	r2, r7, #8
 800f22e:	4610      	mov	r0, r2
 800f230:	4798      	blx	r3
 800f232:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f234:	e029      	b.n	800f28a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f236:	6839      	ldr	r1, [r7, #0]
 800f238:	6878      	ldr	r0, [r7, #4]
 800f23a:	f000 fa11 	bl	800f660 <USBD_CtlError>
        err++;
 800f23e:	7afb      	ldrb	r3, [r7, #11]
 800f240:	3301      	adds	r3, #1
 800f242:	72fb      	strb	r3, [r7, #11]
      break;
 800f244:	e021      	b.n	800f28a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	7c1b      	ldrb	r3, [r3, #16]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d10d      	bne.n	800f26a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f256:	f107 0208 	add.w	r2, r7, #8
 800f25a:	4610      	mov	r0, r2
 800f25c:	4798      	blx	r3
 800f25e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	3301      	adds	r3, #1
 800f264:	2207      	movs	r2, #7
 800f266:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f268:	e00f      	b.n	800f28a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f26a:	6839      	ldr	r1, [r7, #0]
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f000 f9f7 	bl	800f660 <USBD_CtlError>
        err++;
 800f272:	7afb      	ldrb	r3, [r7, #11]
 800f274:	3301      	adds	r3, #1
 800f276:	72fb      	strb	r3, [r7, #11]
      break;
 800f278:	e007      	b.n	800f28a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f27a:	6839      	ldr	r1, [r7, #0]
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	f000 f9ef 	bl	800f660 <USBD_CtlError>
      err++;
 800f282:	7afb      	ldrb	r3, [r7, #11]
 800f284:	3301      	adds	r3, #1
 800f286:	72fb      	strb	r3, [r7, #11]
      break;
 800f288:	bf00      	nop
  }

  if (err != 0U)
 800f28a:	7afb      	ldrb	r3, [r7, #11]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d11e      	bne.n	800f2ce <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	88db      	ldrh	r3, [r3, #6]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d016      	beq.n	800f2c6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f298:	893b      	ldrh	r3, [r7, #8]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d00e      	beq.n	800f2bc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	88da      	ldrh	r2, [r3, #6]
 800f2a2:	893b      	ldrh	r3, [r7, #8]
 800f2a4:	4293      	cmp	r3, r2
 800f2a6:	bf28      	it	cs
 800f2a8:	4613      	movcs	r3, r2
 800f2aa:	b29b      	uxth	r3, r3
 800f2ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f2ae:	893b      	ldrh	r3, [r7, #8]
 800f2b0:	461a      	mov	r2, r3
 800f2b2:	68f9      	ldr	r1, [r7, #12]
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f000 fa44 	bl	800f742 <USBD_CtlSendData>
 800f2ba:	e009      	b.n	800f2d0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f2bc:	6839      	ldr	r1, [r7, #0]
 800f2be:	6878      	ldr	r0, [r7, #4]
 800f2c0:	f000 f9ce 	bl	800f660 <USBD_CtlError>
 800f2c4:	e004      	b.n	800f2d0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f2c6:	6878      	ldr	r0, [r7, #4]
 800f2c8:	f000 fa95 	bl	800f7f6 <USBD_CtlSendStatus>
 800f2cc:	e000      	b.n	800f2d0 <USBD_GetDescriptor+0x320>
    return;
 800f2ce:	bf00      	nop
  }
}
 800f2d0:	3710      	adds	r7, #16
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}
 800f2d6:	bf00      	nop

0800f2d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b084      	sub	sp, #16
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
 800f2e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	889b      	ldrh	r3, [r3, #4]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d131      	bne.n	800f34e <USBD_SetAddress+0x76>
 800f2ea:	683b      	ldr	r3, [r7, #0]
 800f2ec:	88db      	ldrh	r3, [r3, #6]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d12d      	bne.n	800f34e <USBD_SetAddress+0x76>
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	885b      	ldrh	r3, [r3, #2]
 800f2f6:	2b7f      	cmp	r3, #127	@ 0x7f
 800f2f8:	d829      	bhi.n	800f34e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	885b      	ldrh	r3, [r3, #2]
 800f2fe:	b2db      	uxtb	r3, r3
 800f300:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f304:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f30c:	b2db      	uxtb	r3, r3
 800f30e:	2b03      	cmp	r3, #3
 800f310:	d104      	bne.n	800f31c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f312:	6839      	ldr	r1, [r7, #0]
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	f000 f9a3 	bl	800f660 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f31a:	e01d      	b.n	800f358 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	7bfa      	ldrb	r2, [r7, #15]
 800f320:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f324:	7bfb      	ldrb	r3, [r7, #15]
 800f326:	4619      	mov	r1, r3
 800f328:	6878      	ldr	r0, [r7, #4]
 800f32a:	f000 fe7b 	bl	8010024 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f32e:	6878      	ldr	r0, [r7, #4]
 800f330:	f000 fa61 	bl	800f7f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f334:	7bfb      	ldrb	r3, [r7, #15]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d004      	beq.n	800f344 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	2202      	movs	r2, #2
 800f33e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f342:	e009      	b.n	800f358 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2201      	movs	r2, #1
 800f348:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f34c:	e004      	b.n	800f358 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f34e:	6839      	ldr	r1, [r7, #0]
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f000 f985 	bl	800f660 <USBD_CtlError>
  }
}
 800f356:	bf00      	nop
 800f358:	bf00      	nop
 800f35a:	3710      	adds	r7, #16
 800f35c:	46bd      	mov	sp, r7
 800f35e:	bd80      	pop	{r7, pc}

0800f360 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f360:	b580      	push	{r7, lr}
 800f362:	b084      	sub	sp, #16
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
 800f368:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f36a:	2300      	movs	r3, #0
 800f36c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	885b      	ldrh	r3, [r3, #2]
 800f372:	b2da      	uxtb	r2, r3
 800f374:	4b4c      	ldr	r3, [pc, #304]	@ (800f4a8 <USBD_SetConfig+0x148>)
 800f376:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f378:	4b4b      	ldr	r3, [pc, #300]	@ (800f4a8 <USBD_SetConfig+0x148>)
 800f37a:	781b      	ldrb	r3, [r3, #0]
 800f37c:	2b01      	cmp	r3, #1
 800f37e:	d905      	bls.n	800f38c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f380:	6839      	ldr	r1, [r7, #0]
 800f382:	6878      	ldr	r0, [r7, #4]
 800f384:	f000 f96c 	bl	800f660 <USBD_CtlError>
    return USBD_FAIL;
 800f388:	2303      	movs	r3, #3
 800f38a:	e088      	b.n	800f49e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f392:	b2db      	uxtb	r3, r3
 800f394:	2b02      	cmp	r3, #2
 800f396:	d002      	beq.n	800f39e <USBD_SetConfig+0x3e>
 800f398:	2b03      	cmp	r3, #3
 800f39a:	d025      	beq.n	800f3e8 <USBD_SetConfig+0x88>
 800f39c:	e071      	b.n	800f482 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f39e:	4b42      	ldr	r3, [pc, #264]	@ (800f4a8 <USBD_SetConfig+0x148>)
 800f3a0:	781b      	ldrb	r3, [r3, #0]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d01c      	beq.n	800f3e0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800f3a6:	4b40      	ldr	r3, [pc, #256]	@ (800f4a8 <USBD_SetConfig+0x148>)
 800f3a8:	781b      	ldrb	r3, [r3, #0]
 800f3aa:	461a      	mov	r2, r3
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f3b0:	4b3d      	ldr	r3, [pc, #244]	@ (800f4a8 <USBD_SetConfig+0x148>)
 800f3b2:	781b      	ldrb	r3, [r3, #0]
 800f3b4:	4619      	mov	r1, r3
 800f3b6:	6878      	ldr	r0, [r7, #4]
 800f3b8:	f7ff f992 	bl	800e6e0 <USBD_SetClassConfig>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f3c0:	7bfb      	ldrb	r3, [r7, #15]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d004      	beq.n	800f3d0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800f3c6:	6839      	ldr	r1, [r7, #0]
 800f3c8:	6878      	ldr	r0, [r7, #4]
 800f3ca:	f000 f949 	bl	800f660 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f3ce:	e065      	b.n	800f49c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f000 fa10 	bl	800f7f6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	2203      	movs	r2, #3
 800f3da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f3de:	e05d      	b.n	800f49c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f3e0:	6878      	ldr	r0, [r7, #4]
 800f3e2:	f000 fa08 	bl	800f7f6 <USBD_CtlSendStatus>
      break;
 800f3e6:	e059      	b.n	800f49c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f3e8:	4b2f      	ldr	r3, [pc, #188]	@ (800f4a8 <USBD_SetConfig+0x148>)
 800f3ea:	781b      	ldrb	r3, [r3, #0]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d112      	bne.n	800f416 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	2202      	movs	r2, #2
 800f3f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f3f8:	4b2b      	ldr	r3, [pc, #172]	@ (800f4a8 <USBD_SetConfig+0x148>)
 800f3fa:	781b      	ldrb	r3, [r3, #0]
 800f3fc:	461a      	mov	r2, r3
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f402:	4b29      	ldr	r3, [pc, #164]	@ (800f4a8 <USBD_SetConfig+0x148>)
 800f404:	781b      	ldrb	r3, [r3, #0]
 800f406:	4619      	mov	r1, r3
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f7ff f985 	bl	800e718 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f40e:	6878      	ldr	r0, [r7, #4]
 800f410:	f000 f9f1 	bl	800f7f6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f414:	e042      	b.n	800f49c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800f416:	4b24      	ldr	r3, [pc, #144]	@ (800f4a8 <USBD_SetConfig+0x148>)
 800f418:	781b      	ldrb	r3, [r3, #0]
 800f41a:	461a      	mov	r2, r3
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	685b      	ldr	r3, [r3, #4]
 800f420:	429a      	cmp	r2, r3
 800f422:	d02a      	beq.n	800f47a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	685b      	ldr	r3, [r3, #4]
 800f428:	b2db      	uxtb	r3, r3
 800f42a:	4619      	mov	r1, r3
 800f42c:	6878      	ldr	r0, [r7, #4]
 800f42e:	f7ff f973 	bl	800e718 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f432:	4b1d      	ldr	r3, [pc, #116]	@ (800f4a8 <USBD_SetConfig+0x148>)
 800f434:	781b      	ldrb	r3, [r3, #0]
 800f436:	461a      	mov	r2, r3
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f43c:	4b1a      	ldr	r3, [pc, #104]	@ (800f4a8 <USBD_SetConfig+0x148>)
 800f43e:	781b      	ldrb	r3, [r3, #0]
 800f440:	4619      	mov	r1, r3
 800f442:	6878      	ldr	r0, [r7, #4]
 800f444:	f7ff f94c 	bl	800e6e0 <USBD_SetClassConfig>
 800f448:	4603      	mov	r3, r0
 800f44a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f44c:	7bfb      	ldrb	r3, [r7, #15]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d00f      	beq.n	800f472 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800f452:	6839      	ldr	r1, [r7, #0]
 800f454:	6878      	ldr	r0, [r7, #4]
 800f456:	f000 f903 	bl	800f660 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	685b      	ldr	r3, [r3, #4]
 800f45e:	b2db      	uxtb	r3, r3
 800f460:	4619      	mov	r1, r3
 800f462:	6878      	ldr	r0, [r7, #4]
 800f464:	f7ff f958 	bl	800e718 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	2202      	movs	r2, #2
 800f46c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f470:	e014      	b.n	800f49c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f472:	6878      	ldr	r0, [r7, #4]
 800f474:	f000 f9bf 	bl	800f7f6 <USBD_CtlSendStatus>
      break;
 800f478:	e010      	b.n	800f49c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f000 f9bb 	bl	800f7f6 <USBD_CtlSendStatus>
      break;
 800f480:	e00c      	b.n	800f49c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800f482:	6839      	ldr	r1, [r7, #0]
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	f000 f8eb 	bl	800f660 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f48a:	4b07      	ldr	r3, [pc, #28]	@ (800f4a8 <USBD_SetConfig+0x148>)
 800f48c:	781b      	ldrb	r3, [r3, #0]
 800f48e:	4619      	mov	r1, r3
 800f490:	6878      	ldr	r0, [r7, #4]
 800f492:	f7ff f941 	bl	800e718 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f496:	2303      	movs	r3, #3
 800f498:	73fb      	strb	r3, [r7, #15]
      break;
 800f49a:	bf00      	nop
  }

  return ret;
 800f49c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f49e:	4618      	mov	r0, r3
 800f4a0:	3710      	adds	r7, #16
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	bd80      	pop	{r7, pc}
 800f4a6:	bf00      	nop
 800f4a8:	2000189c 	.word	0x2000189c

0800f4ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b082      	sub	sp, #8
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
 800f4b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	88db      	ldrh	r3, [r3, #6]
 800f4ba:	2b01      	cmp	r3, #1
 800f4bc:	d004      	beq.n	800f4c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f4be:	6839      	ldr	r1, [r7, #0]
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f000 f8cd 	bl	800f660 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f4c6:	e023      	b.n	800f510 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f4ce:	b2db      	uxtb	r3, r3
 800f4d0:	2b02      	cmp	r3, #2
 800f4d2:	dc02      	bgt.n	800f4da <USBD_GetConfig+0x2e>
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	dc03      	bgt.n	800f4e0 <USBD_GetConfig+0x34>
 800f4d8:	e015      	b.n	800f506 <USBD_GetConfig+0x5a>
 800f4da:	2b03      	cmp	r3, #3
 800f4dc:	d00b      	beq.n	800f4f6 <USBD_GetConfig+0x4a>
 800f4de:	e012      	b.n	800f506 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	3308      	adds	r3, #8
 800f4ea:	2201      	movs	r2, #1
 800f4ec:	4619      	mov	r1, r3
 800f4ee:	6878      	ldr	r0, [r7, #4]
 800f4f0:	f000 f927 	bl	800f742 <USBD_CtlSendData>
        break;
 800f4f4:	e00c      	b.n	800f510 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	3304      	adds	r3, #4
 800f4fa:	2201      	movs	r2, #1
 800f4fc:	4619      	mov	r1, r3
 800f4fe:	6878      	ldr	r0, [r7, #4]
 800f500:	f000 f91f 	bl	800f742 <USBD_CtlSendData>
        break;
 800f504:	e004      	b.n	800f510 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f506:	6839      	ldr	r1, [r7, #0]
 800f508:	6878      	ldr	r0, [r7, #4]
 800f50a:	f000 f8a9 	bl	800f660 <USBD_CtlError>
        break;
 800f50e:	bf00      	nop
}
 800f510:	bf00      	nop
 800f512:	3708      	adds	r7, #8
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}

0800f518 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b082      	sub	sp, #8
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
 800f520:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f528:	b2db      	uxtb	r3, r3
 800f52a:	3b01      	subs	r3, #1
 800f52c:	2b02      	cmp	r3, #2
 800f52e:	d81e      	bhi.n	800f56e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	88db      	ldrh	r3, [r3, #6]
 800f534:	2b02      	cmp	r3, #2
 800f536:	d004      	beq.n	800f542 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f538:	6839      	ldr	r1, [r7, #0]
 800f53a:	6878      	ldr	r0, [r7, #4]
 800f53c:	f000 f890 	bl	800f660 <USBD_CtlError>
        break;
 800f540:	e01a      	b.n	800f578 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	2201      	movs	r2, #1
 800f546:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d005      	beq.n	800f55e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	68db      	ldr	r3, [r3, #12]
 800f556:	f043 0202 	orr.w	r2, r3, #2
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	330c      	adds	r3, #12
 800f562:	2202      	movs	r2, #2
 800f564:	4619      	mov	r1, r3
 800f566:	6878      	ldr	r0, [r7, #4]
 800f568:	f000 f8eb 	bl	800f742 <USBD_CtlSendData>
      break;
 800f56c:	e004      	b.n	800f578 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f56e:	6839      	ldr	r1, [r7, #0]
 800f570:	6878      	ldr	r0, [r7, #4]
 800f572:	f000 f875 	bl	800f660 <USBD_CtlError>
      break;
 800f576:	bf00      	nop
  }
}
 800f578:	bf00      	nop
 800f57a:	3708      	adds	r7, #8
 800f57c:	46bd      	mov	sp, r7
 800f57e:	bd80      	pop	{r7, pc}

0800f580 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b082      	sub	sp, #8
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
 800f588:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	885b      	ldrh	r3, [r3, #2]
 800f58e:	2b01      	cmp	r3, #1
 800f590:	d106      	bne.n	800f5a0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	2201      	movs	r2, #1
 800f596:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f59a:	6878      	ldr	r0, [r7, #4]
 800f59c:	f000 f92b 	bl	800f7f6 <USBD_CtlSendStatus>
  }
}
 800f5a0:	bf00      	nop
 800f5a2:	3708      	adds	r7, #8
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	bd80      	pop	{r7, pc}

0800f5a8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b082      	sub	sp, #8
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
 800f5b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f5b8:	b2db      	uxtb	r3, r3
 800f5ba:	3b01      	subs	r3, #1
 800f5bc:	2b02      	cmp	r3, #2
 800f5be:	d80b      	bhi.n	800f5d8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	885b      	ldrh	r3, [r3, #2]
 800f5c4:	2b01      	cmp	r3, #1
 800f5c6:	d10c      	bne.n	800f5e2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f5d0:	6878      	ldr	r0, [r7, #4]
 800f5d2:	f000 f910 	bl	800f7f6 <USBD_CtlSendStatus>
      }
      break;
 800f5d6:	e004      	b.n	800f5e2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f5d8:	6839      	ldr	r1, [r7, #0]
 800f5da:	6878      	ldr	r0, [r7, #4]
 800f5dc:	f000 f840 	bl	800f660 <USBD_CtlError>
      break;
 800f5e0:	e000      	b.n	800f5e4 <USBD_ClrFeature+0x3c>
      break;
 800f5e2:	bf00      	nop
  }
}
 800f5e4:	bf00      	nop
 800f5e6:	3708      	adds	r7, #8
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	bd80      	pop	{r7, pc}

0800f5ec <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b084      	sub	sp, #16
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
 800f5f4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	781a      	ldrb	r2, [r3, #0]
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	3301      	adds	r3, #1
 800f606:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	781a      	ldrb	r2, [r3, #0]
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	3301      	adds	r3, #1
 800f614:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f616:	68f8      	ldr	r0, [r7, #12]
 800f618:	f7ff fa92 	bl	800eb40 <SWAPBYTE>
 800f61c:	4603      	mov	r3, r0
 800f61e:	461a      	mov	r2, r3
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	3301      	adds	r3, #1
 800f628:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	3301      	adds	r3, #1
 800f62e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f630:	68f8      	ldr	r0, [r7, #12]
 800f632:	f7ff fa85 	bl	800eb40 <SWAPBYTE>
 800f636:	4603      	mov	r3, r0
 800f638:	461a      	mov	r2, r3
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	3301      	adds	r3, #1
 800f642:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	3301      	adds	r3, #1
 800f648:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f64a:	68f8      	ldr	r0, [r7, #12]
 800f64c:	f7ff fa78 	bl	800eb40 <SWAPBYTE>
 800f650:	4603      	mov	r3, r0
 800f652:	461a      	mov	r2, r3
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	80da      	strh	r2, [r3, #6]
}
 800f658:	bf00      	nop
 800f65a:	3710      	adds	r7, #16
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd80      	pop	{r7, pc}

0800f660 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b082      	sub	sp, #8
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
 800f668:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f66a:	2180      	movs	r1, #128	@ 0x80
 800f66c:	6878      	ldr	r0, [r7, #4]
 800f66e:	f000 fc6f 	bl	800ff50 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f672:	2100      	movs	r1, #0
 800f674:	6878      	ldr	r0, [r7, #4]
 800f676:	f000 fc6b 	bl	800ff50 <USBD_LL_StallEP>
}
 800f67a:	bf00      	nop
 800f67c:	3708      	adds	r7, #8
 800f67e:	46bd      	mov	sp, r7
 800f680:	bd80      	pop	{r7, pc}

0800f682 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f682:	b580      	push	{r7, lr}
 800f684:	b086      	sub	sp, #24
 800f686:	af00      	add	r7, sp, #0
 800f688:	60f8      	str	r0, [r7, #12]
 800f68a:	60b9      	str	r1, [r7, #8]
 800f68c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f68e:	2300      	movs	r3, #0
 800f690:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d036      	beq.n	800f706 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f69c:	6938      	ldr	r0, [r7, #16]
 800f69e:	f000 f836 	bl	800f70e <USBD_GetLen>
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	3301      	adds	r3, #1
 800f6a6:	b29b      	uxth	r3, r3
 800f6a8:	005b      	lsls	r3, r3, #1
 800f6aa:	b29a      	uxth	r2, r3
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f6b0:	7dfb      	ldrb	r3, [r7, #23]
 800f6b2:	68ba      	ldr	r2, [r7, #8]
 800f6b4:	4413      	add	r3, r2
 800f6b6:	687a      	ldr	r2, [r7, #4]
 800f6b8:	7812      	ldrb	r2, [r2, #0]
 800f6ba:	701a      	strb	r2, [r3, #0]
  idx++;
 800f6bc:	7dfb      	ldrb	r3, [r7, #23]
 800f6be:	3301      	adds	r3, #1
 800f6c0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f6c2:	7dfb      	ldrb	r3, [r7, #23]
 800f6c4:	68ba      	ldr	r2, [r7, #8]
 800f6c6:	4413      	add	r3, r2
 800f6c8:	2203      	movs	r2, #3
 800f6ca:	701a      	strb	r2, [r3, #0]
  idx++;
 800f6cc:	7dfb      	ldrb	r3, [r7, #23]
 800f6ce:	3301      	adds	r3, #1
 800f6d0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f6d2:	e013      	b.n	800f6fc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f6d4:	7dfb      	ldrb	r3, [r7, #23]
 800f6d6:	68ba      	ldr	r2, [r7, #8]
 800f6d8:	4413      	add	r3, r2
 800f6da:	693a      	ldr	r2, [r7, #16]
 800f6dc:	7812      	ldrb	r2, [r2, #0]
 800f6de:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f6e0:	693b      	ldr	r3, [r7, #16]
 800f6e2:	3301      	adds	r3, #1
 800f6e4:	613b      	str	r3, [r7, #16]
    idx++;
 800f6e6:	7dfb      	ldrb	r3, [r7, #23]
 800f6e8:	3301      	adds	r3, #1
 800f6ea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f6ec:	7dfb      	ldrb	r3, [r7, #23]
 800f6ee:	68ba      	ldr	r2, [r7, #8]
 800f6f0:	4413      	add	r3, r2
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	701a      	strb	r2, [r3, #0]
    idx++;
 800f6f6:	7dfb      	ldrb	r3, [r7, #23]
 800f6f8:	3301      	adds	r3, #1
 800f6fa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f6fc:	693b      	ldr	r3, [r7, #16]
 800f6fe:	781b      	ldrb	r3, [r3, #0]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d1e7      	bne.n	800f6d4 <USBD_GetString+0x52>
 800f704:	e000      	b.n	800f708 <USBD_GetString+0x86>
    return;
 800f706:	bf00      	nop
  }
}
 800f708:	3718      	adds	r7, #24
 800f70a:	46bd      	mov	sp, r7
 800f70c:	bd80      	pop	{r7, pc}

0800f70e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f70e:	b480      	push	{r7}
 800f710:	b085      	sub	sp, #20
 800f712:	af00      	add	r7, sp, #0
 800f714:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f716:	2300      	movs	r3, #0
 800f718:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f71e:	e005      	b.n	800f72c <USBD_GetLen+0x1e>
  {
    len++;
 800f720:	7bfb      	ldrb	r3, [r7, #15]
 800f722:	3301      	adds	r3, #1
 800f724:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	3301      	adds	r3, #1
 800f72a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f72c:	68bb      	ldr	r3, [r7, #8]
 800f72e:	781b      	ldrb	r3, [r3, #0]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d1f5      	bne.n	800f720 <USBD_GetLen+0x12>
  }

  return len;
 800f734:	7bfb      	ldrb	r3, [r7, #15]
}
 800f736:	4618      	mov	r0, r3
 800f738:	3714      	adds	r7, #20
 800f73a:	46bd      	mov	sp, r7
 800f73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f740:	4770      	bx	lr

0800f742 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f742:	b580      	push	{r7, lr}
 800f744:	b084      	sub	sp, #16
 800f746:	af00      	add	r7, sp, #0
 800f748:	60f8      	str	r0, [r7, #12]
 800f74a:	60b9      	str	r1, [r7, #8]
 800f74c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	2202      	movs	r2, #2
 800f752:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	687a      	ldr	r2, [r7, #4]
 800f75a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	687a      	ldr	r2, [r7, #4]
 800f760:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	68ba      	ldr	r2, [r7, #8]
 800f766:	2100      	movs	r1, #0
 800f768:	68f8      	ldr	r0, [r7, #12]
 800f76a:	f000 fc7a 	bl	8010062 <USBD_LL_Transmit>

  return USBD_OK;
 800f76e:	2300      	movs	r3, #0
}
 800f770:	4618      	mov	r0, r3
 800f772:	3710      	adds	r7, #16
 800f774:	46bd      	mov	sp, r7
 800f776:	bd80      	pop	{r7, pc}

0800f778 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b084      	sub	sp, #16
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	60f8      	str	r0, [r7, #12]
 800f780:	60b9      	str	r1, [r7, #8]
 800f782:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	68ba      	ldr	r2, [r7, #8]
 800f788:	2100      	movs	r1, #0
 800f78a:	68f8      	ldr	r0, [r7, #12]
 800f78c:	f000 fc69 	bl	8010062 <USBD_LL_Transmit>

  return USBD_OK;
 800f790:	2300      	movs	r3, #0
}
 800f792:	4618      	mov	r0, r3
 800f794:	3710      	adds	r7, #16
 800f796:	46bd      	mov	sp, r7
 800f798:	bd80      	pop	{r7, pc}

0800f79a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f79a:	b580      	push	{r7, lr}
 800f79c:	b084      	sub	sp, #16
 800f79e:	af00      	add	r7, sp, #0
 800f7a0:	60f8      	str	r0, [r7, #12]
 800f7a2:	60b9      	str	r1, [r7, #8]
 800f7a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	2203      	movs	r2, #3
 800f7aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	687a      	ldr	r2, [r7, #4]
 800f7b2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	687a      	ldr	r2, [r7, #4]
 800f7ba:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	68ba      	ldr	r2, [r7, #8]
 800f7c2:	2100      	movs	r1, #0
 800f7c4:	68f8      	ldr	r0, [r7, #12]
 800f7c6:	f000 fc6d 	bl	80100a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f7ca:	2300      	movs	r3, #0
}
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	3710      	adds	r7, #16
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	bd80      	pop	{r7, pc}

0800f7d4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b084      	sub	sp, #16
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	60f8      	str	r0, [r7, #12]
 800f7dc:	60b9      	str	r1, [r7, #8]
 800f7de:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	68ba      	ldr	r2, [r7, #8]
 800f7e4:	2100      	movs	r1, #0
 800f7e6:	68f8      	ldr	r0, [r7, #12]
 800f7e8:	f000 fc5c 	bl	80100a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f7ec:	2300      	movs	r3, #0
}
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	3710      	adds	r7, #16
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd80      	pop	{r7, pc}

0800f7f6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f7f6:	b580      	push	{r7, lr}
 800f7f8:	b082      	sub	sp, #8
 800f7fa:	af00      	add	r7, sp, #0
 800f7fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	2204      	movs	r2, #4
 800f802:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f806:	2300      	movs	r3, #0
 800f808:	2200      	movs	r2, #0
 800f80a:	2100      	movs	r1, #0
 800f80c:	6878      	ldr	r0, [r7, #4]
 800f80e:	f000 fc28 	bl	8010062 <USBD_LL_Transmit>

  return USBD_OK;
 800f812:	2300      	movs	r3, #0
}
 800f814:	4618      	mov	r0, r3
 800f816:	3708      	adds	r7, #8
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd80      	pop	{r7, pc}

0800f81c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b082      	sub	sp, #8
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	2205      	movs	r2, #5
 800f828:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f82c:	2300      	movs	r3, #0
 800f82e:	2200      	movs	r2, #0
 800f830:	2100      	movs	r1, #0
 800f832:	6878      	ldr	r0, [r7, #4]
 800f834:	f000 fc36 	bl	80100a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f838:	2300      	movs	r3, #0
}
 800f83a:	4618      	mov	r0, r3
 800f83c:	3708      	adds	r7, #8
 800f83e:	46bd      	mov	sp, r7
 800f840:	bd80      	pop	{r7, pc}
	...

0800f844 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800f848:	2200      	movs	r2, #0
 800f84a:	4912      	ldr	r1, [pc, #72]	@ (800f894 <MX_USB_Device_Init+0x50>)
 800f84c:	4812      	ldr	r0, [pc, #72]	@ (800f898 <MX_USB_Device_Init+0x54>)
 800f84e:	f7fe fed9 	bl	800e604 <USBD_Init>
 800f852:	4603      	mov	r3, r0
 800f854:	2b00      	cmp	r3, #0
 800f856:	d001      	beq.n	800f85c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800f858:	f7f2 fcd2 	bl	8002200 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800f85c:	490f      	ldr	r1, [pc, #60]	@ (800f89c <MX_USB_Device_Init+0x58>)
 800f85e:	480e      	ldr	r0, [pc, #56]	@ (800f898 <MX_USB_Device_Init+0x54>)
 800f860:	f7fe ff00 	bl	800e664 <USBD_RegisterClass>
 800f864:	4603      	mov	r3, r0
 800f866:	2b00      	cmp	r3, #0
 800f868:	d001      	beq.n	800f86e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800f86a:	f7f2 fcc9 	bl	8002200 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800f86e:	490c      	ldr	r1, [pc, #48]	@ (800f8a0 <MX_USB_Device_Init+0x5c>)
 800f870:	4809      	ldr	r0, [pc, #36]	@ (800f898 <MX_USB_Device_Init+0x54>)
 800f872:	f7fe fe51 	bl	800e518 <USBD_CDC_RegisterInterface>
 800f876:	4603      	mov	r3, r0
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d001      	beq.n	800f880 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800f87c:	f7f2 fcc0 	bl	8002200 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800f880:	4805      	ldr	r0, [pc, #20]	@ (800f898 <MX_USB_Device_Init+0x54>)
 800f882:	f7fe ff16 	bl	800e6b2 <USBD_Start>
 800f886:	4603      	mov	r3, r0
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d001      	beq.n	800f890 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800f88c:	f7f2 fcb8 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800f890:	bf00      	nop
 800f892:	bd80      	pop	{r7, pc}
 800f894:	20000138 	.word	0x20000138
 800f898:	200018a0 	.word	0x200018a0
 800f89c:	20000020 	.word	0x20000020
 800f8a0:	20000124 	.word	0x20000124

0800f8a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	4905      	ldr	r1, [pc, #20]	@ (800f8c0 <CDC_Init_FS+0x1c>)
 800f8ac:	4805      	ldr	r0, [pc, #20]	@ (800f8c4 <CDC_Init_FS+0x20>)
 800f8ae:	f7fe fe48 	bl	800e542 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f8b2:	4905      	ldr	r1, [pc, #20]	@ (800f8c8 <CDC_Init_FS+0x24>)
 800f8b4:	4803      	ldr	r0, [pc, #12]	@ (800f8c4 <CDC_Init_FS+0x20>)
 800f8b6:	f7fe fe62 	bl	800e57e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f8ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f8bc:	4618      	mov	r0, r3
 800f8be:	bd80      	pop	{r7, pc}
 800f8c0:	20001f70 	.word	0x20001f70
 800f8c4:	200018a0 	.word	0x200018a0
 800f8c8:	20001b70 	.word	0x20001b70

0800f8cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f8cc:	b480      	push	{r7}
 800f8ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f8d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8da:	4770      	bx	lr

0800f8dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f8dc:	b480      	push	{r7}
 800f8de:	b083      	sub	sp, #12
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	6039      	str	r1, [r7, #0]
 800f8e6:	71fb      	strb	r3, [r7, #7]
 800f8e8:	4613      	mov	r3, r2
 800f8ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f8ec:	79fb      	ldrb	r3, [r7, #7]
 800f8ee:	2b23      	cmp	r3, #35	@ 0x23
 800f8f0:	d84a      	bhi.n	800f988 <CDC_Control_FS+0xac>
 800f8f2:	a201      	add	r2, pc, #4	@ (adr r2, 800f8f8 <CDC_Control_FS+0x1c>)
 800f8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8f8:	0800f989 	.word	0x0800f989
 800f8fc:	0800f989 	.word	0x0800f989
 800f900:	0800f989 	.word	0x0800f989
 800f904:	0800f989 	.word	0x0800f989
 800f908:	0800f989 	.word	0x0800f989
 800f90c:	0800f989 	.word	0x0800f989
 800f910:	0800f989 	.word	0x0800f989
 800f914:	0800f989 	.word	0x0800f989
 800f918:	0800f989 	.word	0x0800f989
 800f91c:	0800f989 	.word	0x0800f989
 800f920:	0800f989 	.word	0x0800f989
 800f924:	0800f989 	.word	0x0800f989
 800f928:	0800f989 	.word	0x0800f989
 800f92c:	0800f989 	.word	0x0800f989
 800f930:	0800f989 	.word	0x0800f989
 800f934:	0800f989 	.word	0x0800f989
 800f938:	0800f989 	.word	0x0800f989
 800f93c:	0800f989 	.word	0x0800f989
 800f940:	0800f989 	.word	0x0800f989
 800f944:	0800f989 	.word	0x0800f989
 800f948:	0800f989 	.word	0x0800f989
 800f94c:	0800f989 	.word	0x0800f989
 800f950:	0800f989 	.word	0x0800f989
 800f954:	0800f989 	.word	0x0800f989
 800f958:	0800f989 	.word	0x0800f989
 800f95c:	0800f989 	.word	0x0800f989
 800f960:	0800f989 	.word	0x0800f989
 800f964:	0800f989 	.word	0x0800f989
 800f968:	0800f989 	.word	0x0800f989
 800f96c:	0800f989 	.word	0x0800f989
 800f970:	0800f989 	.word	0x0800f989
 800f974:	0800f989 	.word	0x0800f989
 800f978:	0800f989 	.word	0x0800f989
 800f97c:	0800f989 	.word	0x0800f989
 800f980:	0800f989 	.word	0x0800f989
 800f984:	0800f989 	.word	0x0800f989
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f988:	bf00      	nop
  }

  return (USBD_OK);
 800f98a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f98c:	4618      	mov	r0, r3
 800f98e:	370c      	adds	r7, #12
 800f990:	46bd      	mov	sp, r7
 800f992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f996:	4770      	bx	lr

0800f998 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b082      	sub	sp, #8
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
 800f9a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f9a2:	6879      	ldr	r1, [r7, #4]
 800f9a4:	4805      	ldr	r0, [pc, #20]	@ (800f9bc <CDC_Receive_FS+0x24>)
 800f9a6:	f7fe fdea 	bl	800e57e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f9aa:	4804      	ldr	r0, [pc, #16]	@ (800f9bc <CDC_Receive_FS+0x24>)
 800f9ac:	f7fe fe00 	bl	800e5b0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f9b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	3708      	adds	r7, #8
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}
 800f9ba:	bf00      	nop
 800f9bc:	200018a0 	.word	0x200018a0

0800f9c0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f9c0:	b480      	push	{r7}
 800f9c2:	b087      	sub	sp, #28
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	60f8      	str	r0, [r7, #12]
 800f9c8:	60b9      	str	r1, [r7, #8]
 800f9ca:	4613      	mov	r3, r2
 800f9cc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f9d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	371c      	adds	r7, #28
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e0:	4770      	bx	lr
	...

0800f9e4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f9e4:	b480      	push	{r7}
 800f9e6:	b083      	sub	sp, #12
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	6039      	str	r1, [r7, #0]
 800f9ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800f9f0:	683b      	ldr	r3, [r7, #0]
 800f9f2:	2212      	movs	r2, #18
 800f9f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800f9f6:	4b03      	ldr	r3, [pc, #12]	@ (800fa04 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	370c      	adds	r7, #12
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa02:	4770      	bx	lr
 800fa04:	20000158 	.word	0x20000158

0800fa08 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa08:	b480      	push	{r7}
 800fa0a:	b083      	sub	sp, #12
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	4603      	mov	r3, r0
 800fa10:	6039      	str	r1, [r7, #0]
 800fa12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fa14:	683b      	ldr	r3, [r7, #0]
 800fa16:	2204      	movs	r2, #4
 800fa18:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fa1a:	4b03      	ldr	r3, [pc, #12]	@ (800fa28 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	370c      	adds	r7, #12
 800fa20:	46bd      	mov	sp, r7
 800fa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa26:	4770      	bx	lr
 800fa28:	2000016c 	.word	0x2000016c

0800fa2c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b082      	sub	sp, #8
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	4603      	mov	r3, r0
 800fa34:	6039      	str	r1, [r7, #0]
 800fa36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fa38:	79fb      	ldrb	r3, [r7, #7]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d105      	bne.n	800fa4a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800fa3e:	683a      	ldr	r2, [r7, #0]
 800fa40:	4907      	ldr	r1, [pc, #28]	@ (800fa60 <USBD_CDC_ProductStrDescriptor+0x34>)
 800fa42:	4808      	ldr	r0, [pc, #32]	@ (800fa64 <USBD_CDC_ProductStrDescriptor+0x38>)
 800fa44:	f7ff fe1d 	bl	800f682 <USBD_GetString>
 800fa48:	e004      	b.n	800fa54 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800fa4a:	683a      	ldr	r2, [r7, #0]
 800fa4c:	4904      	ldr	r1, [pc, #16]	@ (800fa60 <USBD_CDC_ProductStrDescriptor+0x34>)
 800fa4e:	4805      	ldr	r0, [pc, #20]	@ (800fa64 <USBD_CDC_ProductStrDescriptor+0x38>)
 800fa50:	f7ff fe17 	bl	800f682 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fa54:	4b02      	ldr	r3, [pc, #8]	@ (800fa60 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800fa56:	4618      	mov	r0, r3
 800fa58:	3708      	adds	r7, #8
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	bd80      	pop	{r7, pc}
 800fa5e:	bf00      	nop
 800fa60:	20002370 	.word	0x20002370
 800fa64:	08014990 	.word	0x08014990

0800fa68 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b082      	sub	sp, #8
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	4603      	mov	r3, r0
 800fa70:	6039      	str	r1, [r7, #0]
 800fa72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fa74:	683a      	ldr	r2, [r7, #0]
 800fa76:	4904      	ldr	r1, [pc, #16]	@ (800fa88 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800fa78:	4804      	ldr	r0, [pc, #16]	@ (800fa8c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800fa7a:	f7ff fe02 	bl	800f682 <USBD_GetString>
  return USBD_StrDesc;
 800fa7e:	4b02      	ldr	r3, [pc, #8]	@ (800fa88 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800fa80:	4618      	mov	r0, r3
 800fa82:	3708      	adds	r7, #8
 800fa84:	46bd      	mov	sp, r7
 800fa86:	bd80      	pop	{r7, pc}
 800fa88:	20002370 	.word	0x20002370
 800fa8c:	080149a8 	.word	0x080149a8

0800fa90 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b082      	sub	sp, #8
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	4603      	mov	r3, r0
 800fa98:	6039      	str	r1, [r7, #0]
 800fa9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fa9c:	683b      	ldr	r3, [r7, #0]
 800fa9e:	221a      	movs	r2, #26
 800faa0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800faa2:	f000 f843 	bl	800fb2c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800faa6:	4b02      	ldr	r3, [pc, #8]	@ (800fab0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800faa8:	4618      	mov	r0, r3
 800faaa:	3708      	adds	r7, #8
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}
 800fab0:	20000170 	.word	0x20000170

0800fab4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b082      	sub	sp, #8
 800fab8:	af00      	add	r7, sp, #0
 800faba:	4603      	mov	r3, r0
 800fabc:	6039      	str	r1, [r7, #0]
 800fabe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fac0:	79fb      	ldrb	r3, [r7, #7]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d105      	bne.n	800fad2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800fac6:	683a      	ldr	r2, [r7, #0]
 800fac8:	4907      	ldr	r1, [pc, #28]	@ (800fae8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800faca:	4808      	ldr	r0, [pc, #32]	@ (800faec <USBD_CDC_ConfigStrDescriptor+0x38>)
 800facc:	f7ff fdd9 	bl	800f682 <USBD_GetString>
 800fad0:	e004      	b.n	800fadc <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800fad2:	683a      	ldr	r2, [r7, #0]
 800fad4:	4904      	ldr	r1, [pc, #16]	@ (800fae8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800fad6:	4805      	ldr	r0, [pc, #20]	@ (800faec <USBD_CDC_ConfigStrDescriptor+0x38>)
 800fad8:	f7ff fdd3 	bl	800f682 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fadc:	4b02      	ldr	r3, [pc, #8]	@ (800fae8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800fade:	4618      	mov	r0, r3
 800fae0:	3708      	adds	r7, #8
 800fae2:	46bd      	mov	sp, r7
 800fae4:	bd80      	pop	{r7, pc}
 800fae6:	bf00      	nop
 800fae8:	20002370 	.word	0x20002370
 800faec:	080149bc 	.word	0x080149bc

0800faf0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b082      	sub	sp, #8
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	4603      	mov	r3, r0
 800faf8:	6039      	str	r1, [r7, #0]
 800fafa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fafc:	79fb      	ldrb	r3, [r7, #7]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d105      	bne.n	800fb0e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800fb02:	683a      	ldr	r2, [r7, #0]
 800fb04:	4907      	ldr	r1, [pc, #28]	@ (800fb24 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800fb06:	4808      	ldr	r0, [pc, #32]	@ (800fb28 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800fb08:	f7ff fdbb 	bl	800f682 <USBD_GetString>
 800fb0c:	e004      	b.n	800fb18 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800fb0e:	683a      	ldr	r2, [r7, #0]
 800fb10:	4904      	ldr	r1, [pc, #16]	@ (800fb24 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800fb12:	4805      	ldr	r0, [pc, #20]	@ (800fb28 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800fb14:	f7ff fdb5 	bl	800f682 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fb18:	4b02      	ldr	r3, [pc, #8]	@ (800fb24 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	3708      	adds	r7, #8
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bd80      	pop	{r7, pc}
 800fb22:	bf00      	nop
 800fb24:	20002370 	.word	0x20002370
 800fb28:	080149c8 	.word	0x080149c8

0800fb2c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b084      	sub	sp, #16
 800fb30:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fb32:	4b0f      	ldr	r3, [pc, #60]	@ (800fb70 <Get_SerialNum+0x44>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fb38:	4b0e      	ldr	r3, [pc, #56]	@ (800fb74 <Get_SerialNum+0x48>)
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fb3e:	4b0e      	ldr	r3, [pc, #56]	@ (800fb78 <Get_SerialNum+0x4c>)
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fb44:	68fa      	ldr	r2, [r7, #12]
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	4413      	add	r3, r2
 800fb4a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d009      	beq.n	800fb66 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fb52:	2208      	movs	r2, #8
 800fb54:	4909      	ldr	r1, [pc, #36]	@ (800fb7c <Get_SerialNum+0x50>)
 800fb56:	68f8      	ldr	r0, [r7, #12]
 800fb58:	f000 f814 	bl	800fb84 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fb5c:	2204      	movs	r2, #4
 800fb5e:	4908      	ldr	r1, [pc, #32]	@ (800fb80 <Get_SerialNum+0x54>)
 800fb60:	68b8      	ldr	r0, [r7, #8]
 800fb62:	f000 f80f 	bl	800fb84 <IntToUnicode>
  }
}
 800fb66:	bf00      	nop
 800fb68:	3710      	adds	r7, #16
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	bd80      	pop	{r7, pc}
 800fb6e:	bf00      	nop
 800fb70:	1fff7590 	.word	0x1fff7590
 800fb74:	1fff7594 	.word	0x1fff7594
 800fb78:	1fff7598 	.word	0x1fff7598
 800fb7c:	20000172 	.word	0x20000172
 800fb80:	20000182 	.word	0x20000182

0800fb84 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fb84:	b480      	push	{r7}
 800fb86:	b087      	sub	sp, #28
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	60f8      	str	r0, [r7, #12]
 800fb8c:	60b9      	str	r1, [r7, #8]
 800fb8e:	4613      	mov	r3, r2
 800fb90:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fb92:	2300      	movs	r3, #0
 800fb94:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fb96:	2300      	movs	r3, #0
 800fb98:	75fb      	strb	r3, [r7, #23]
 800fb9a:	e027      	b.n	800fbec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	0f1b      	lsrs	r3, r3, #28
 800fba0:	2b09      	cmp	r3, #9
 800fba2:	d80b      	bhi.n	800fbbc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	0f1b      	lsrs	r3, r3, #28
 800fba8:	b2da      	uxtb	r2, r3
 800fbaa:	7dfb      	ldrb	r3, [r7, #23]
 800fbac:	005b      	lsls	r3, r3, #1
 800fbae:	4619      	mov	r1, r3
 800fbb0:	68bb      	ldr	r3, [r7, #8]
 800fbb2:	440b      	add	r3, r1
 800fbb4:	3230      	adds	r2, #48	@ 0x30
 800fbb6:	b2d2      	uxtb	r2, r2
 800fbb8:	701a      	strb	r2, [r3, #0]
 800fbba:	e00a      	b.n	800fbd2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	0f1b      	lsrs	r3, r3, #28
 800fbc0:	b2da      	uxtb	r2, r3
 800fbc2:	7dfb      	ldrb	r3, [r7, #23]
 800fbc4:	005b      	lsls	r3, r3, #1
 800fbc6:	4619      	mov	r1, r3
 800fbc8:	68bb      	ldr	r3, [r7, #8]
 800fbca:	440b      	add	r3, r1
 800fbcc:	3237      	adds	r2, #55	@ 0x37
 800fbce:	b2d2      	uxtb	r2, r2
 800fbd0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	011b      	lsls	r3, r3, #4
 800fbd6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fbd8:	7dfb      	ldrb	r3, [r7, #23]
 800fbda:	005b      	lsls	r3, r3, #1
 800fbdc:	3301      	adds	r3, #1
 800fbde:	68ba      	ldr	r2, [r7, #8]
 800fbe0:	4413      	add	r3, r2
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fbe6:	7dfb      	ldrb	r3, [r7, #23]
 800fbe8:	3301      	adds	r3, #1
 800fbea:	75fb      	strb	r3, [r7, #23]
 800fbec:	7dfa      	ldrb	r2, [r7, #23]
 800fbee:	79fb      	ldrb	r3, [r7, #7]
 800fbf0:	429a      	cmp	r2, r3
 800fbf2:	d3d3      	bcc.n	800fb9c <IntToUnicode+0x18>
  }
}
 800fbf4:	bf00      	nop
 800fbf6:	bf00      	nop
 800fbf8:	371c      	adds	r7, #28
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc00:	4770      	bx	lr
	...

0800fc04 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b098      	sub	sp, #96	@ 0x60
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800fc0c:	f107 030c 	add.w	r3, r7, #12
 800fc10:	2254      	movs	r2, #84	@ 0x54
 800fc12:	2100      	movs	r1, #0
 800fc14:	4618      	mov	r0, r3
 800fc16:	f001 fa8a 	bl	801112e <memset>
  if(pcdHandle->Instance==USB)
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	4a15      	ldr	r2, [pc, #84]	@ (800fc74 <HAL_PCD_MspInit+0x70>)
 800fc20:	4293      	cmp	r3, r2
 800fc22:	d122      	bne.n	800fc6a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800fc24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800fc28:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800fc2e:	f107 030c 	add.w	r3, r7, #12
 800fc32:	4618      	mov	r0, r3
 800fc34:	f7f8 ff7e 	bl	8008b34 <HAL_RCCEx_PeriphCLKConfig>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d001      	beq.n	800fc42 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800fc3e:	f7f2 fadf 	bl	8002200 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800fc42:	4b0d      	ldr	r3, [pc, #52]	@ (800fc78 <HAL_PCD_MspInit+0x74>)
 800fc44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fc46:	4a0c      	ldr	r2, [pc, #48]	@ (800fc78 <HAL_PCD_MspInit+0x74>)
 800fc48:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800fc4c:	6593      	str	r3, [r2, #88]	@ 0x58
 800fc4e:	4b0a      	ldr	r3, [pc, #40]	@ (800fc78 <HAL_PCD_MspInit+0x74>)
 800fc50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fc52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fc56:	60bb      	str	r3, [r7, #8]
 800fc58:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	2100      	movs	r1, #0
 800fc5e:	2014      	movs	r0, #20
 800fc60:	f7f5 f85d 	bl	8004d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800fc64:	2014      	movs	r0, #20
 800fc66:	f7f5 f874 	bl	8004d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800fc6a:	bf00      	nop
 800fc6c:	3760      	adds	r7, #96	@ 0x60
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	bd80      	pop	{r7, pc}
 800fc72:	bf00      	nop
 800fc74:	40005c00 	.word	0x40005c00
 800fc78:	40021000 	.word	0x40021000

0800fc7c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b082      	sub	sp, #8
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800fc90:	4619      	mov	r1, r3
 800fc92:	4610      	mov	r0, r2
 800fc94:	f7fe fd58 	bl	800e748 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800fc98:	bf00      	nop
 800fc9a:	3708      	adds	r7, #8
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}

0800fca0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b082      	sub	sp, #8
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
 800fca8:	460b      	mov	r3, r1
 800fcaa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800fcb2:	78fa      	ldrb	r2, [r7, #3]
 800fcb4:	6879      	ldr	r1, [r7, #4]
 800fcb6:	4613      	mov	r3, r2
 800fcb8:	009b      	lsls	r3, r3, #2
 800fcba:	4413      	add	r3, r2
 800fcbc:	00db      	lsls	r3, r3, #3
 800fcbe:	440b      	add	r3, r1
 800fcc0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fcc4:	681a      	ldr	r2, [r3, #0]
 800fcc6:	78fb      	ldrb	r3, [r7, #3]
 800fcc8:	4619      	mov	r1, r3
 800fcca:	f7fe fd92 	bl	800e7f2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800fcce:	bf00      	nop
 800fcd0:	3708      	adds	r7, #8
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd80      	pop	{r7, pc}

0800fcd6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcd6:	b580      	push	{r7, lr}
 800fcd8:	b082      	sub	sp, #8
 800fcda:	af00      	add	r7, sp, #0
 800fcdc:	6078      	str	r0, [r7, #4]
 800fcde:	460b      	mov	r3, r1
 800fce0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800fce8:	78fa      	ldrb	r2, [r7, #3]
 800fcea:	6879      	ldr	r1, [r7, #4]
 800fcec:	4613      	mov	r3, r2
 800fcee:	009b      	lsls	r3, r3, #2
 800fcf0:	4413      	add	r3, r2
 800fcf2:	00db      	lsls	r3, r3, #3
 800fcf4:	440b      	add	r3, r1
 800fcf6:	3324      	adds	r3, #36	@ 0x24
 800fcf8:	681a      	ldr	r2, [r3, #0]
 800fcfa:	78fb      	ldrb	r3, [r7, #3]
 800fcfc:	4619      	mov	r1, r3
 800fcfe:	f7fe fddb 	bl	800e8b8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800fd02:	bf00      	nop
 800fd04:	3708      	adds	r7, #8
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bd80      	pop	{r7, pc}

0800fd0a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd0a:	b580      	push	{r7, lr}
 800fd0c:	b082      	sub	sp, #8
 800fd0e:	af00      	add	r7, sp, #0
 800fd10:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fd18:	4618      	mov	r0, r3
 800fd1a:	f7fe feef 	bl	800eafc <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800fd1e:	bf00      	nop
 800fd20:	3708      	adds	r7, #8
 800fd22:	46bd      	mov	sp, r7
 800fd24:	bd80      	pop	{r7, pc}

0800fd26 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd26:	b580      	push	{r7, lr}
 800fd28:	b084      	sub	sp, #16
 800fd2a:	af00      	add	r7, sp, #0
 800fd2c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fd2e:	2301      	movs	r3, #1
 800fd30:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	795b      	ldrb	r3, [r3, #5]
 800fd36:	2b02      	cmp	r3, #2
 800fd38:	d001      	beq.n	800fd3e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800fd3a:	f7f2 fa61 	bl	8002200 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fd44:	7bfa      	ldrb	r2, [r7, #15]
 800fd46:	4611      	mov	r1, r2
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f7fe fe99 	bl	800ea80 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fd54:	4618      	mov	r0, r3
 800fd56:	f7fe fe45 	bl	800e9e4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800fd5a:	bf00      	nop
 800fd5c:	3710      	adds	r7, #16
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	bd80      	pop	{r7, pc}
	...

0800fd64 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b082      	sub	sp, #8
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fd72:	4618      	mov	r0, r3
 800fd74:	f7fe fe94 	bl	800eaa0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	7a5b      	ldrb	r3, [r3, #9]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d005      	beq.n	800fd8c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fd80:	4b04      	ldr	r3, [pc, #16]	@ (800fd94 <HAL_PCD_SuspendCallback+0x30>)
 800fd82:	691b      	ldr	r3, [r3, #16]
 800fd84:	4a03      	ldr	r2, [pc, #12]	@ (800fd94 <HAL_PCD_SuspendCallback+0x30>)
 800fd86:	f043 0306 	orr.w	r3, r3, #6
 800fd8a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800fd8c:	bf00      	nop
 800fd8e:	3708      	adds	r7, #8
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}
 800fd94:	e000ed00 	.word	0xe000ed00

0800fd98 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b082      	sub	sp, #8
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	7a5b      	ldrb	r3, [r3, #9]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d007      	beq.n	800fdb8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fda8:	4b08      	ldr	r3, [pc, #32]	@ (800fdcc <HAL_PCD_ResumeCallback+0x34>)
 800fdaa:	691b      	ldr	r3, [r3, #16]
 800fdac:	4a07      	ldr	r2, [pc, #28]	@ (800fdcc <HAL_PCD_ResumeCallback+0x34>)
 800fdae:	f023 0306 	bic.w	r3, r3, #6
 800fdb2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800fdb4:	f000 f9f8 	bl	80101a8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f7fe fe84 	bl	800eacc <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800fdc4:	bf00      	nop
 800fdc6:	3708      	adds	r7, #8
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd80      	pop	{r7, pc}
 800fdcc:	e000ed00 	.word	0xe000ed00

0800fdd0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b082      	sub	sp, #8
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800fdd8:	4a2b      	ldr	r2, [pc, #172]	@ (800fe88 <USBD_LL_Init+0xb8>)
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	4a29      	ldr	r2, [pc, #164]	@ (800fe88 <USBD_LL_Init+0xb8>)
 800fde4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800fde8:	4b27      	ldr	r3, [pc, #156]	@ (800fe88 <USBD_LL_Init+0xb8>)
 800fdea:	4a28      	ldr	r2, [pc, #160]	@ (800fe8c <USBD_LL_Init+0xbc>)
 800fdec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800fdee:	4b26      	ldr	r3, [pc, #152]	@ (800fe88 <USBD_LL_Init+0xb8>)
 800fdf0:	2208      	movs	r2, #8
 800fdf2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800fdf4:	4b24      	ldr	r3, [pc, #144]	@ (800fe88 <USBD_LL_Init+0xb8>)
 800fdf6:	2202      	movs	r2, #2
 800fdf8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fdfa:	4b23      	ldr	r3, [pc, #140]	@ (800fe88 <USBD_LL_Init+0xb8>)
 800fdfc:	2202      	movs	r2, #2
 800fdfe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800fe00:	4b21      	ldr	r3, [pc, #132]	@ (800fe88 <USBD_LL_Init+0xb8>)
 800fe02:	2200      	movs	r2, #0
 800fe04:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800fe06:	4b20      	ldr	r3, [pc, #128]	@ (800fe88 <USBD_LL_Init+0xb8>)
 800fe08:	2200      	movs	r2, #0
 800fe0a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800fe0c:	4b1e      	ldr	r3, [pc, #120]	@ (800fe88 <USBD_LL_Init+0xb8>)
 800fe0e:	2200      	movs	r2, #0
 800fe10:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800fe12:	4b1d      	ldr	r3, [pc, #116]	@ (800fe88 <USBD_LL_Init+0xb8>)
 800fe14:	2200      	movs	r2, #0
 800fe16:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800fe18:	481b      	ldr	r0, [pc, #108]	@ (800fe88 <USBD_LL_Init+0xb8>)
 800fe1a:	f7f6 fb7c 	bl	8006516 <HAL_PCD_Init>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d001      	beq.n	800fe28 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800fe24:	f7f2 f9ec 	bl	8002200 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fe2e:	2318      	movs	r3, #24
 800fe30:	2200      	movs	r2, #0
 800fe32:	2100      	movs	r1, #0
 800fe34:	f7f8 f803 	bl	8007e3e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fe3e:	2358      	movs	r3, #88	@ 0x58
 800fe40:	2200      	movs	r2, #0
 800fe42:	2180      	movs	r1, #128	@ 0x80
 800fe44:	f7f7 fffb 	bl	8007e3e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fe4e:	23c0      	movs	r3, #192	@ 0xc0
 800fe50:	2200      	movs	r2, #0
 800fe52:	2181      	movs	r1, #129	@ 0x81
 800fe54:	f7f7 fff3 	bl	8007e3e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fe5e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800fe62:	2200      	movs	r2, #0
 800fe64:	2101      	movs	r1, #1
 800fe66:	f7f7 ffea 	bl	8007e3e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fe70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fe74:	2200      	movs	r2, #0
 800fe76:	2182      	movs	r1, #130	@ 0x82
 800fe78:	f7f7 ffe1 	bl	8007e3e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800fe7c:	2300      	movs	r3, #0
}
 800fe7e:	4618      	mov	r0, r3
 800fe80:	3708      	adds	r7, #8
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}
 800fe86:	bf00      	nop
 800fe88:	20002570 	.word	0x20002570
 800fe8c:	40005c00 	.word	0x40005c00

0800fe90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b084      	sub	sp, #16
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe98:	2300      	movs	r3, #0
 800fe9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fea6:	4618      	mov	r0, r3
 800fea8:	f7f6 fc03 	bl	80066b2 <HAL_PCD_Start>
 800feac:	4603      	mov	r3, r0
 800feae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800feb0:	7bfb      	ldrb	r3, [r7, #15]
 800feb2:	4618      	mov	r0, r3
 800feb4:	f000 f97e 	bl	80101b4 <USBD_Get_USB_Status>
 800feb8:	4603      	mov	r3, r0
 800feba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800febc:	7bbb      	ldrb	r3, [r7, #14]
}
 800febe:	4618      	mov	r0, r3
 800fec0:	3710      	adds	r7, #16
 800fec2:	46bd      	mov	sp, r7
 800fec4:	bd80      	pop	{r7, pc}

0800fec6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fec6:	b580      	push	{r7, lr}
 800fec8:	b084      	sub	sp, #16
 800feca:	af00      	add	r7, sp, #0
 800fecc:	6078      	str	r0, [r7, #4]
 800fece:	4608      	mov	r0, r1
 800fed0:	4611      	mov	r1, r2
 800fed2:	461a      	mov	r2, r3
 800fed4:	4603      	mov	r3, r0
 800fed6:	70fb      	strb	r3, [r7, #3]
 800fed8:	460b      	mov	r3, r1
 800feda:	70bb      	strb	r3, [r7, #2]
 800fedc:	4613      	mov	r3, r2
 800fede:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fee0:	2300      	movs	r3, #0
 800fee2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fee4:	2300      	movs	r3, #0
 800fee6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800feee:	78bb      	ldrb	r3, [r7, #2]
 800fef0:	883a      	ldrh	r2, [r7, #0]
 800fef2:	78f9      	ldrb	r1, [r7, #3]
 800fef4:	f7f6 fd4a 	bl	800698c <HAL_PCD_EP_Open>
 800fef8:	4603      	mov	r3, r0
 800fefa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fefc:	7bfb      	ldrb	r3, [r7, #15]
 800fefe:	4618      	mov	r0, r3
 800ff00:	f000 f958 	bl	80101b4 <USBD_Get_USB_Status>
 800ff04:	4603      	mov	r3, r0
 800ff06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff08:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	3710      	adds	r7, #16
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	bd80      	pop	{r7, pc}

0800ff12 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ff12:	b580      	push	{r7, lr}
 800ff14:	b084      	sub	sp, #16
 800ff16:	af00      	add	r7, sp, #0
 800ff18:	6078      	str	r0, [r7, #4]
 800ff1a:	460b      	mov	r3, r1
 800ff1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff1e:	2300      	movs	r3, #0
 800ff20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff22:	2300      	movs	r3, #0
 800ff24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ff2c:	78fa      	ldrb	r2, [r7, #3]
 800ff2e:	4611      	mov	r1, r2
 800ff30:	4618      	mov	r0, r3
 800ff32:	f7f6 fd8a 	bl	8006a4a <HAL_PCD_EP_Close>
 800ff36:	4603      	mov	r3, r0
 800ff38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff3a:	7bfb      	ldrb	r3, [r7, #15]
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	f000 f939 	bl	80101b4 <USBD_Get_USB_Status>
 800ff42:	4603      	mov	r3, r0
 800ff44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff46:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff48:	4618      	mov	r0, r3
 800ff4a:	3710      	adds	r7, #16
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}

0800ff50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b084      	sub	sp, #16
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
 800ff58:	460b      	mov	r3, r1
 800ff5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff60:	2300      	movs	r3, #0
 800ff62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ff6a:	78fa      	ldrb	r2, [r7, #3]
 800ff6c:	4611      	mov	r1, r2
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f7f6 fe33 	bl	8006bda <HAL_PCD_EP_SetStall>
 800ff74:	4603      	mov	r3, r0
 800ff76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff78:	7bfb      	ldrb	r3, [r7, #15]
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	f000 f91a 	bl	80101b4 <USBD_Get_USB_Status>
 800ff80:	4603      	mov	r3, r0
 800ff82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff84:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff86:	4618      	mov	r0, r3
 800ff88:	3710      	adds	r7, #16
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	bd80      	pop	{r7, pc}

0800ff8e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ff8e:	b580      	push	{r7, lr}
 800ff90:	b084      	sub	sp, #16
 800ff92:	af00      	add	r7, sp, #0
 800ff94:	6078      	str	r0, [r7, #4]
 800ff96:	460b      	mov	r3, r1
 800ff98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ffa8:	78fa      	ldrb	r2, [r7, #3]
 800ffaa:	4611      	mov	r1, r2
 800ffac:	4618      	mov	r0, r3
 800ffae:	f7f6 fe66 	bl	8006c7e <HAL_PCD_EP_ClrStall>
 800ffb2:	4603      	mov	r3, r0
 800ffb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ffb6:	7bfb      	ldrb	r3, [r7, #15]
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f000 f8fb 	bl	80101b4 <USBD_Get_USB_Status>
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ffc2:	7bbb      	ldrb	r3, [r7, #14]
}
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	3710      	adds	r7, #16
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	bd80      	pop	{r7, pc}

0800ffcc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ffcc:	b480      	push	{r7}
 800ffce:	b085      	sub	sp, #20
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
 800ffd4:	460b      	mov	r3, r1
 800ffd6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ffde:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ffe0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	da0b      	bge.n	8010000 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ffe8:	78fb      	ldrb	r3, [r7, #3]
 800ffea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ffee:	68f9      	ldr	r1, [r7, #12]
 800fff0:	4613      	mov	r3, r2
 800fff2:	009b      	lsls	r3, r3, #2
 800fff4:	4413      	add	r3, r2
 800fff6:	00db      	lsls	r3, r3, #3
 800fff8:	440b      	add	r3, r1
 800fffa:	3312      	adds	r3, #18
 800fffc:	781b      	ldrb	r3, [r3, #0]
 800fffe:	e00b      	b.n	8010018 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010000:	78fb      	ldrb	r3, [r7, #3]
 8010002:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010006:	68f9      	ldr	r1, [r7, #12]
 8010008:	4613      	mov	r3, r2
 801000a:	009b      	lsls	r3, r3, #2
 801000c:	4413      	add	r3, r2
 801000e:	00db      	lsls	r3, r3, #3
 8010010:	440b      	add	r3, r1
 8010012:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8010016:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010018:	4618      	mov	r0, r3
 801001a:	3714      	adds	r7, #20
 801001c:	46bd      	mov	sp, r7
 801001e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010022:	4770      	bx	lr

08010024 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b084      	sub	sp, #16
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
 801002c:	460b      	mov	r3, r1
 801002e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010030:	2300      	movs	r3, #0
 8010032:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010034:	2300      	movs	r3, #0
 8010036:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801003e:	78fa      	ldrb	r2, [r7, #3]
 8010040:	4611      	mov	r1, r2
 8010042:	4618      	mov	r0, r3
 8010044:	f7f6 fc7e 	bl	8006944 <HAL_PCD_SetAddress>
 8010048:	4603      	mov	r3, r0
 801004a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801004c:	7bfb      	ldrb	r3, [r7, #15]
 801004e:	4618      	mov	r0, r3
 8010050:	f000 f8b0 	bl	80101b4 <USBD_Get_USB_Status>
 8010054:	4603      	mov	r3, r0
 8010056:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010058:	7bbb      	ldrb	r3, [r7, #14]
}
 801005a:	4618      	mov	r0, r3
 801005c:	3710      	adds	r7, #16
 801005e:	46bd      	mov	sp, r7
 8010060:	bd80      	pop	{r7, pc}

08010062 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010062:	b580      	push	{r7, lr}
 8010064:	b086      	sub	sp, #24
 8010066:	af00      	add	r7, sp, #0
 8010068:	60f8      	str	r0, [r7, #12]
 801006a:	607a      	str	r2, [r7, #4]
 801006c:	603b      	str	r3, [r7, #0]
 801006e:	460b      	mov	r3, r1
 8010070:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010072:	2300      	movs	r3, #0
 8010074:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010076:	2300      	movs	r3, #0
 8010078:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010080:	7af9      	ldrb	r1, [r7, #11]
 8010082:	683b      	ldr	r3, [r7, #0]
 8010084:	687a      	ldr	r2, [r7, #4]
 8010086:	f7f6 fd71 	bl	8006b6c <HAL_PCD_EP_Transmit>
 801008a:	4603      	mov	r3, r0
 801008c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801008e:	7dfb      	ldrb	r3, [r7, #23]
 8010090:	4618      	mov	r0, r3
 8010092:	f000 f88f 	bl	80101b4 <USBD_Get_USB_Status>
 8010096:	4603      	mov	r3, r0
 8010098:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801009a:	7dbb      	ldrb	r3, [r7, #22]
}
 801009c:	4618      	mov	r0, r3
 801009e:	3718      	adds	r7, #24
 80100a0:	46bd      	mov	sp, r7
 80100a2:	bd80      	pop	{r7, pc}

080100a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b086      	sub	sp, #24
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	60f8      	str	r0, [r7, #12]
 80100ac:	607a      	str	r2, [r7, #4]
 80100ae:	603b      	str	r3, [r7, #0]
 80100b0:	460b      	mov	r3, r1
 80100b2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100b4:	2300      	movs	r3, #0
 80100b6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80100b8:	2300      	movs	r3, #0
 80100ba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80100c2:	7af9      	ldrb	r1, [r7, #11]
 80100c4:	683b      	ldr	r3, [r7, #0]
 80100c6:	687a      	ldr	r2, [r7, #4]
 80100c8:	f7f6 fd07 	bl	8006ada <HAL_PCD_EP_Receive>
 80100cc:	4603      	mov	r3, r0
 80100ce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80100d0:	7dfb      	ldrb	r3, [r7, #23]
 80100d2:	4618      	mov	r0, r3
 80100d4:	f000 f86e 	bl	80101b4 <USBD_Get_USB_Status>
 80100d8:	4603      	mov	r3, r0
 80100da:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80100dc:	7dbb      	ldrb	r3, [r7, #22]
}
 80100de:	4618      	mov	r0, r3
 80100e0:	3718      	adds	r7, #24
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}

080100e6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80100e6:	b580      	push	{r7, lr}
 80100e8:	b082      	sub	sp, #8
 80100ea:	af00      	add	r7, sp, #0
 80100ec:	6078      	str	r0, [r7, #4]
 80100ee:	460b      	mov	r3, r1
 80100f0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80100f8:	78fa      	ldrb	r2, [r7, #3]
 80100fa:	4611      	mov	r1, r2
 80100fc:	4618      	mov	r0, r3
 80100fe:	f7f6 fd1d 	bl	8006b3c <HAL_PCD_EP_GetRxCount>
 8010102:	4603      	mov	r3, r0
}
 8010104:	4618      	mov	r0, r3
 8010106:	3708      	adds	r7, #8
 8010108:	46bd      	mov	sp, r7
 801010a:	bd80      	pop	{r7, pc}

0801010c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b082      	sub	sp, #8
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
 8010114:	460b      	mov	r3, r1
 8010116:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8010118:	78fb      	ldrb	r3, [r7, #3]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d002      	beq.n	8010124 <HAL_PCDEx_LPM_Callback+0x18>
 801011e:	2b01      	cmp	r3, #1
 8010120:	d013      	beq.n	801014a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8010122:	e023      	b.n	801016c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	7a5b      	ldrb	r3, [r3, #9]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d007      	beq.n	801013c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801012c:	f000 f83c 	bl	80101a8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010130:	4b10      	ldr	r3, [pc, #64]	@ (8010174 <HAL_PCDEx_LPM_Callback+0x68>)
 8010132:	691b      	ldr	r3, [r3, #16]
 8010134:	4a0f      	ldr	r2, [pc, #60]	@ (8010174 <HAL_PCDEx_LPM_Callback+0x68>)
 8010136:	f023 0306 	bic.w	r3, r3, #6
 801013a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010142:	4618      	mov	r0, r3
 8010144:	f7fe fcc2 	bl	800eacc <USBD_LL_Resume>
    break;
 8010148:	e010      	b.n	801016c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010150:	4618      	mov	r0, r3
 8010152:	f7fe fca5 	bl	800eaa0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	7a5b      	ldrb	r3, [r3, #9]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d005      	beq.n	801016a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801015e:	4b05      	ldr	r3, [pc, #20]	@ (8010174 <HAL_PCDEx_LPM_Callback+0x68>)
 8010160:	691b      	ldr	r3, [r3, #16]
 8010162:	4a04      	ldr	r2, [pc, #16]	@ (8010174 <HAL_PCDEx_LPM_Callback+0x68>)
 8010164:	f043 0306 	orr.w	r3, r3, #6
 8010168:	6113      	str	r3, [r2, #16]
    break;
 801016a:	bf00      	nop
}
 801016c:	bf00      	nop
 801016e:	3708      	adds	r7, #8
 8010170:	46bd      	mov	sp, r7
 8010172:	bd80      	pop	{r7, pc}
 8010174:	e000ed00 	.word	0xe000ed00

08010178 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010178:	b480      	push	{r7}
 801017a:	b083      	sub	sp, #12
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010180:	4b03      	ldr	r3, [pc, #12]	@ (8010190 <USBD_static_malloc+0x18>)
}
 8010182:	4618      	mov	r0, r3
 8010184:	370c      	adds	r7, #12
 8010186:	46bd      	mov	sp, r7
 8010188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018c:	4770      	bx	lr
 801018e:	bf00      	nop
 8010190:	2000284c 	.word	0x2000284c

08010194 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010194:	b480      	push	{r7}
 8010196:	b083      	sub	sp, #12
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]

}
 801019c:	bf00      	nop
 801019e:	370c      	adds	r7, #12
 80101a0:	46bd      	mov	sp, r7
 80101a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a6:	4770      	bx	lr

080101a8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80101ac:	f7f1 f898 	bl	80012e0 <SystemClock_Config>
}
 80101b0:	bf00      	nop
 80101b2:	bd80      	pop	{r7, pc}

080101b4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80101b4:	b480      	push	{r7}
 80101b6:	b085      	sub	sp, #20
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	4603      	mov	r3, r0
 80101bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80101be:	2300      	movs	r3, #0
 80101c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80101c2:	79fb      	ldrb	r3, [r7, #7]
 80101c4:	2b03      	cmp	r3, #3
 80101c6:	d817      	bhi.n	80101f8 <USBD_Get_USB_Status+0x44>
 80101c8:	a201      	add	r2, pc, #4	@ (adr r2, 80101d0 <USBD_Get_USB_Status+0x1c>)
 80101ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101ce:	bf00      	nop
 80101d0:	080101e1 	.word	0x080101e1
 80101d4:	080101e7 	.word	0x080101e7
 80101d8:	080101ed 	.word	0x080101ed
 80101dc:	080101f3 	.word	0x080101f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80101e0:	2300      	movs	r3, #0
 80101e2:	73fb      	strb	r3, [r7, #15]
    break;
 80101e4:	e00b      	b.n	80101fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80101e6:	2303      	movs	r3, #3
 80101e8:	73fb      	strb	r3, [r7, #15]
    break;
 80101ea:	e008      	b.n	80101fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80101ec:	2301      	movs	r3, #1
 80101ee:	73fb      	strb	r3, [r7, #15]
    break;
 80101f0:	e005      	b.n	80101fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80101f2:	2303      	movs	r3, #3
 80101f4:	73fb      	strb	r3, [r7, #15]
    break;
 80101f6:	e002      	b.n	80101fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80101f8:	2303      	movs	r3, #3
 80101fa:	73fb      	strb	r3, [r7, #15]
    break;
 80101fc:	bf00      	nop
  }
  return usb_status;
 80101fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8010200:	4618      	mov	r0, r3
 8010202:	3714      	adds	r7, #20
 8010204:	46bd      	mov	sp, r7
 8010206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020a:	4770      	bx	lr

0801020c <__cvt>:
 801020c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010210:	ec57 6b10 	vmov	r6, r7, d0
 8010214:	2f00      	cmp	r7, #0
 8010216:	460c      	mov	r4, r1
 8010218:	4619      	mov	r1, r3
 801021a:	463b      	mov	r3, r7
 801021c:	bfbb      	ittet	lt
 801021e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8010222:	461f      	movlt	r7, r3
 8010224:	2300      	movge	r3, #0
 8010226:	232d      	movlt	r3, #45	@ 0x2d
 8010228:	700b      	strb	r3, [r1, #0]
 801022a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801022c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010230:	4691      	mov	r9, r2
 8010232:	f023 0820 	bic.w	r8, r3, #32
 8010236:	bfbc      	itt	lt
 8010238:	4632      	movlt	r2, r6
 801023a:	4616      	movlt	r6, r2
 801023c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010240:	d005      	beq.n	801024e <__cvt+0x42>
 8010242:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8010246:	d100      	bne.n	801024a <__cvt+0x3e>
 8010248:	3401      	adds	r4, #1
 801024a:	2102      	movs	r1, #2
 801024c:	e000      	b.n	8010250 <__cvt+0x44>
 801024e:	2103      	movs	r1, #3
 8010250:	ab03      	add	r3, sp, #12
 8010252:	9301      	str	r3, [sp, #4]
 8010254:	ab02      	add	r3, sp, #8
 8010256:	9300      	str	r3, [sp, #0]
 8010258:	ec47 6b10 	vmov	d0, r6, r7
 801025c:	4653      	mov	r3, sl
 801025e:	4622      	mov	r2, r4
 8010260:	f001 f876 	bl	8011350 <_dtoa_r>
 8010264:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8010268:	4605      	mov	r5, r0
 801026a:	d119      	bne.n	80102a0 <__cvt+0x94>
 801026c:	f019 0f01 	tst.w	r9, #1
 8010270:	d00e      	beq.n	8010290 <__cvt+0x84>
 8010272:	eb00 0904 	add.w	r9, r0, r4
 8010276:	2200      	movs	r2, #0
 8010278:	2300      	movs	r3, #0
 801027a:	4630      	mov	r0, r6
 801027c:	4639      	mov	r1, r7
 801027e:	f7f0 fc4b 	bl	8000b18 <__aeabi_dcmpeq>
 8010282:	b108      	cbz	r0, 8010288 <__cvt+0x7c>
 8010284:	f8cd 900c 	str.w	r9, [sp, #12]
 8010288:	2230      	movs	r2, #48	@ 0x30
 801028a:	9b03      	ldr	r3, [sp, #12]
 801028c:	454b      	cmp	r3, r9
 801028e:	d31e      	bcc.n	80102ce <__cvt+0xc2>
 8010290:	9b03      	ldr	r3, [sp, #12]
 8010292:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010294:	1b5b      	subs	r3, r3, r5
 8010296:	4628      	mov	r0, r5
 8010298:	6013      	str	r3, [r2, #0]
 801029a:	b004      	add	sp, #16
 801029c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80102a4:	eb00 0904 	add.w	r9, r0, r4
 80102a8:	d1e5      	bne.n	8010276 <__cvt+0x6a>
 80102aa:	7803      	ldrb	r3, [r0, #0]
 80102ac:	2b30      	cmp	r3, #48	@ 0x30
 80102ae:	d10a      	bne.n	80102c6 <__cvt+0xba>
 80102b0:	2200      	movs	r2, #0
 80102b2:	2300      	movs	r3, #0
 80102b4:	4630      	mov	r0, r6
 80102b6:	4639      	mov	r1, r7
 80102b8:	f7f0 fc2e 	bl	8000b18 <__aeabi_dcmpeq>
 80102bc:	b918      	cbnz	r0, 80102c6 <__cvt+0xba>
 80102be:	f1c4 0401 	rsb	r4, r4, #1
 80102c2:	f8ca 4000 	str.w	r4, [sl]
 80102c6:	f8da 3000 	ldr.w	r3, [sl]
 80102ca:	4499      	add	r9, r3
 80102cc:	e7d3      	b.n	8010276 <__cvt+0x6a>
 80102ce:	1c59      	adds	r1, r3, #1
 80102d0:	9103      	str	r1, [sp, #12]
 80102d2:	701a      	strb	r2, [r3, #0]
 80102d4:	e7d9      	b.n	801028a <__cvt+0x7e>

080102d6 <__exponent>:
 80102d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80102d8:	2900      	cmp	r1, #0
 80102da:	bfba      	itte	lt
 80102dc:	4249      	neglt	r1, r1
 80102de:	232d      	movlt	r3, #45	@ 0x2d
 80102e0:	232b      	movge	r3, #43	@ 0x2b
 80102e2:	2909      	cmp	r1, #9
 80102e4:	7002      	strb	r2, [r0, #0]
 80102e6:	7043      	strb	r3, [r0, #1]
 80102e8:	dd29      	ble.n	801033e <__exponent+0x68>
 80102ea:	f10d 0307 	add.w	r3, sp, #7
 80102ee:	461d      	mov	r5, r3
 80102f0:	270a      	movs	r7, #10
 80102f2:	461a      	mov	r2, r3
 80102f4:	fbb1 f6f7 	udiv	r6, r1, r7
 80102f8:	fb07 1416 	mls	r4, r7, r6, r1
 80102fc:	3430      	adds	r4, #48	@ 0x30
 80102fe:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010302:	460c      	mov	r4, r1
 8010304:	2c63      	cmp	r4, #99	@ 0x63
 8010306:	f103 33ff 	add.w	r3, r3, #4294967295
 801030a:	4631      	mov	r1, r6
 801030c:	dcf1      	bgt.n	80102f2 <__exponent+0x1c>
 801030e:	3130      	adds	r1, #48	@ 0x30
 8010310:	1e94      	subs	r4, r2, #2
 8010312:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010316:	1c41      	adds	r1, r0, #1
 8010318:	4623      	mov	r3, r4
 801031a:	42ab      	cmp	r3, r5
 801031c:	d30a      	bcc.n	8010334 <__exponent+0x5e>
 801031e:	f10d 0309 	add.w	r3, sp, #9
 8010322:	1a9b      	subs	r3, r3, r2
 8010324:	42ac      	cmp	r4, r5
 8010326:	bf88      	it	hi
 8010328:	2300      	movhi	r3, #0
 801032a:	3302      	adds	r3, #2
 801032c:	4403      	add	r3, r0
 801032e:	1a18      	subs	r0, r3, r0
 8010330:	b003      	add	sp, #12
 8010332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010334:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010338:	f801 6f01 	strb.w	r6, [r1, #1]!
 801033c:	e7ed      	b.n	801031a <__exponent+0x44>
 801033e:	2330      	movs	r3, #48	@ 0x30
 8010340:	3130      	adds	r1, #48	@ 0x30
 8010342:	7083      	strb	r3, [r0, #2]
 8010344:	70c1      	strb	r1, [r0, #3]
 8010346:	1d03      	adds	r3, r0, #4
 8010348:	e7f1      	b.n	801032e <__exponent+0x58>
	...

0801034c <_printf_float>:
 801034c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010350:	b08d      	sub	sp, #52	@ 0x34
 8010352:	460c      	mov	r4, r1
 8010354:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010358:	4616      	mov	r6, r2
 801035a:	461f      	mov	r7, r3
 801035c:	4605      	mov	r5, r0
 801035e:	f000 feef 	bl	8011140 <_localeconv_r>
 8010362:	6803      	ldr	r3, [r0, #0]
 8010364:	9304      	str	r3, [sp, #16]
 8010366:	4618      	mov	r0, r3
 8010368:	f7ef ffaa 	bl	80002c0 <strlen>
 801036c:	2300      	movs	r3, #0
 801036e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010370:	f8d8 3000 	ldr.w	r3, [r8]
 8010374:	9005      	str	r0, [sp, #20]
 8010376:	3307      	adds	r3, #7
 8010378:	f023 0307 	bic.w	r3, r3, #7
 801037c:	f103 0208 	add.w	r2, r3, #8
 8010380:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010384:	f8d4 b000 	ldr.w	fp, [r4]
 8010388:	f8c8 2000 	str.w	r2, [r8]
 801038c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010390:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8010394:	9307      	str	r3, [sp, #28]
 8010396:	f8cd 8018 	str.w	r8, [sp, #24]
 801039a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801039e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80103a2:	4b9c      	ldr	r3, [pc, #624]	@ (8010614 <_printf_float+0x2c8>)
 80103a4:	f04f 32ff 	mov.w	r2, #4294967295
 80103a8:	f7f0 fbe8 	bl	8000b7c <__aeabi_dcmpun>
 80103ac:	bb70      	cbnz	r0, 801040c <_printf_float+0xc0>
 80103ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80103b2:	4b98      	ldr	r3, [pc, #608]	@ (8010614 <_printf_float+0x2c8>)
 80103b4:	f04f 32ff 	mov.w	r2, #4294967295
 80103b8:	f7f0 fbc2 	bl	8000b40 <__aeabi_dcmple>
 80103bc:	bb30      	cbnz	r0, 801040c <_printf_float+0xc0>
 80103be:	2200      	movs	r2, #0
 80103c0:	2300      	movs	r3, #0
 80103c2:	4640      	mov	r0, r8
 80103c4:	4649      	mov	r1, r9
 80103c6:	f7f0 fbb1 	bl	8000b2c <__aeabi_dcmplt>
 80103ca:	b110      	cbz	r0, 80103d2 <_printf_float+0x86>
 80103cc:	232d      	movs	r3, #45	@ 0x2d
 80103ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80103d2:	4a91      	ldr	r2, [pc, #580]	@ (8010618 <_printf_float+0x2cc>)
 80103d4:	4b91      	ldr	r3, [pc, #580]	@ (801061c <_printf_float+0x2d0>)
 80103d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80103da:	bf94      	ite	ls
 80103dc:	4690      	movls	r8, r2
 80103de:	4698      	movhi	r8, r3
 80103e0:	2303      	movs	r3, #3
 80103e2:	6123      	str	r3, [r4, #16]
 80103e4:	f02b 0304 	bic.w	r3, fp, #4
 80103e8:	6023      	str	r3, [r4, #0]
 80103ea:	f04f 0900 	mov.w	r9, #0
 80103ee:	9700      	str	r7, [sp, #0]
 80103f0:	4633      	mov	r3, r6
 80103f2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80103f4:	4621      	mov	r1, r4
 80103f6:	4628      	mov	r0, r5
 80103f8:	f000 f9d2 	bl	80107a0 <_printf_common>
 80103fc:	3001      	adds	r0, #1
 80103fe:	f040 808d 	bne.w	801051c <_printf_float+0x1d0>
 8010402:	f04f 30ff 	mov.w	r0, #4294967295
 8010406:	b00d      	add	sp, #52	@ 0x34
 8010408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801040c:	4642      	mov	r2, r8
 801040e:	464b      	mov	r3, r9
 8010410:	4640      	mov	r0, r8
 8010412:	4649      	mov	r1, r9
 8010414:	f7f0 fbb2 	bl	8000b7c <__aeabi_dcmpun>
 8010418:	b140      	cbz	r0, 801042c <_printf_float+0xe0>
 801041a:	464b      	mov	r3, r9
 801041c:	2b00      	cmp	r3, #0
 801041e:	bfbc      	itt	lt
 8010420:	232d      	movlt	r3, #45	@ 0x2d
 8010422:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8010426:	4a7e      	ldr	r2, [pc, #504]	@ (8010620 <_printf_float+0x2d4>)
 8010428:	4b7e      	ldr	r3, [pc, #504]	@ (8010624 <_printf_float+0x2d8>)
 801042a:	e7d4      	b.n	80103d6 <_printf_float+0x8a>
 801042c:	6863      	ldr	r3, [r4, #4]
 801042e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8010432:	9206      	str	r2, [sp, #24]
 8010434:	1c5a      	adds	r2, r3, #1
 8010436:	d13b      	bne.n	80104b0 <_printf_float+0x164>
 8010438:	2306      	movs	r3, #6
 801043a:	6063      	str	r3, [r4, #4]
 801043c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8010440:	2300      	movs	r3, #0
 8010442:	6022      	str	r2, [r4, #0]
 8010444:	9303      	str	r3, [sp, #12]
 8010446:	ab0a      	add	r3, sp, #40	@ 0x28
 8010448:	e9cd a301 	strd	sl, r3, [sp, #4]
 801044c:	ab09      	add	r3, sp, #36	@ 0x24
 801044e:	9300      	str	r3, [sp, #0]
 8010450:	6861      	ldr	r1, [r4, #4]
 8010452:	ec49 8b10 	vmov	d0, r8, r9
 8010456:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801045a:	4628      	mov	r0, r5
 801045c:	f7ff fed6 	bl	801020c <__cvt>
 8010460:	9b06      	ldr	r3, [sp, #24]
 8010462:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010464:	2b47      	cmp	r3, #71	@ 0x47
 8010466:	4680      	mov	r8, r0
 8010468:	d129      	bne.n	80104be <_printf_float+0x172>
 801046a:	1cc8      	adds	r0, r1, #3
 801046c:	db02      	blt.n	8010474 <_printf_float+0x128>
 801046e:	6863      	ldr	r3, [r4, #4]
 8010470:	4299      	cmp	r1, r3
 8010472:	dd41      	ble.n	80104f8 <_printf_float+0x1ac>
 8010474:	f1aa 0a02 	sub.w	sl, sl, #2
 8010478:	fa5f fa8a 	uxtb.w	sl, sl
 801047c:	3901      	subs	r1, #1
 801047e:	4652      	mov	r2, sl
 8010480:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010484:	9109      	str	r1, [sp, #36]	@ 0x24
 8010486:	f7ff ff26 	bl	80102d6 <__exponent>
 801048a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801048c:	1813      	adds	r3, r2, r0
 801048e:	2a01      	cmp	r2, #1
 8010490:	4681      	mov	r9, r0
 8010492:	6123      	str	r3, [r4, #16]
 8010494:	dc02      	bgt.n	801049c <_printf_float+0x150>
 8010496:	6822      	ldr	r2, [r4, #0]
 8010498:	07d2      	lsls	r2, r2, #31
 801049a:	d501      	bpl.n	80104a0 <_printf_float+0x154>
 801049c:	3301      	adds	r3, #1
 801049e:	6123      	str	r3, [r4, #16]
 80104a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d0a2      	beq.n	80103ee <_printf_float+0xa2>
 80104a8:	232d      	movs	r3, #45	@ 0x2d
 80104aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80104ae:	e79e      	b.n	80103ee <_printf_float+0xa2>
 80104b0:	9a06      	ldr	r2, [sp, #24]
 80104b2:	2a47      	cmp	r2, #71	@ 0x47
 80104b4:	d1c2      	bne.n	801043c <_printf_float+0xf0>
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d1c0      	bne.n	801043c <_printf_float+0xf0>
 80104ba:	2301      	movs	r3, #1
 80104bc:	e7bd      	b.n	801043a <_printf_float+0xee>
 80104be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80104c2:	d9db      	bls.n	801047c <_printf_float+0x130>
 80104c4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80104c8:	d118      	bne.n	80104fc <_printf_float+0x1b0>
 80104ca:	2900      	cmp	r1, #0
 80104cc:	6863      	ldr	r3, [r4, #4]
 80104ce:	dd0b      	ble.n	80104e8 <_printf_float+0x19c>
 80104d0:	6121      	str	r1, [r4, #16]
 80104d2:	b913      	cbnz	r3, 80104da <_printf_float+0x18e>
 80104d4:	6822      	ldr	r2, [r4, #0]
 80104d6:	07d0      	lsls	r0, r2, #31
 80104d8:	d502      	bpl.n	80104e0 <_printf_float+0x194>
 80104da:	3301      	adds	r3, #1
 80104dc:	440b      	add	r3, r1
 80104de:	6123      	str	r3, [r4, #16]
 80104e0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80104e2:	f04f 0900 	mov.w	r9, #0
 80104e6:	e7db      	b.n	80104a0 <_printf_float+0x154>
 80104e8:	b913      	cbnz	r3, 80104f0 <_printf_float+0x1a4>
 80104ea:	6822      	ldr	r2, [r4, #0]
 80104ec:	07d2      	lsls	r2, r2, #31
 80104ee:	d501      	bpl.n	80104f4 <_printf_float+0x1a8>
 80104f0:	3302      	adds	r3, #2
 80104f2:	e7f4      	b.n	80104de <_printf_float+0x192>
 80104f4:	2301      	movs	r3, #1
 80104f6:	e7f2      	b.n	80104de <_printf_float+0x192>
 80104f8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80104fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80104fe:	4299      	cmp	r1, r3
 8010500:	db05      	blt.n	801050e <_printf_float+0x1c2>
 8010502:	6823      	ldr	r3, [r4, #0]
 8010504:	6121      	str	r1, [r4, #16]
 8010506:	07d8      	lsls	r0, r3, #31
 8010508:	d5ea      	bpl.n	80104e0 <_printf_float+0x194>
 801050a:	1c4b      	adds	r3, r1, #1
 801050c:	e7e7      	b.n	80104de <_printf_float+0x192>
 801050e:	2900      	cmp	r1, #0
 8010510:	bfd4      	ite	le
 8010512:	f1c1 0202 	rsble	r2, r1, #2
 8010516:	2201      	movgt	r2, #1
 8010518:	4413      	add	r3, r2
 801051a:	e7e0      	b.n	80104de <_printf_float+0x192>
 801051c:	6823      	ldr	r3, [r4, #0]
 801051e:	055a      	lsls	r2, r3, #21
 8010520:	d407      	bmi.n	8010532 <_printf_float+0x1e6>
 8010522:	6923      	ldr	r3, [r4, #16]
 8010524:	4642      	mov	r2, r8
 8010526:	4631      	mov	r1, r6
 8010528:	4628      	mov	r0, r5
 801052a:	47b8      	blx	r7
 801052c:	3001      	adds	r0, #1
 801052e:	d12b      	bne.n	8010588 <_printf_float+0x23c>
 8010530:	e767      	b.n	8010402 <_printf_float+0xb6>
 8010532:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010536:	f240 80dd 	bls.w	80106f4 <_printf_float+0x3a8>
 801053a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801053e:	2200      	movs	r2, #0
 8010540:	2300      	movs	r3, #0
 8010542:	f7f0 fae9 	bl	8000b18 <__aeabi_dcmpeq>
 8010546:	2800      	cmp	r0, #0
 8010548:	d033      	beq.n	80105b2 <_printf_float+0x266>
 801054a:	4a37      	ldr	r2, [pc, #220]	@ (8010628 <_printf_float+0x2dc>)
 801054c:	2301      	movs	r3, #1
 801054e:	4631      	mov	r1, r6
 8010550:	4628      	mov	r0, r5
 8010552:	47b8      	blx	r7
 8010554:	3001      	adds	r0, #1
 8010556:	f43f af54 	beq.w	8010402 <_printf_float+0xb6>
 801055a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801055e:	4543      	cmp	r3, r8
 8010560:	db02      	blt.n	8010568 <_printf_float+0x21c>
 8010562:	6823      	ldr	r3, [r4, #0]
 8010564:	07d8      	lsls	r0, r3, #31
 8010566:	d50f      	bpl.n	8010588 <_printf_float+0x23c>
 8010568:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801056c:	4631      	mov	r1, r6
 801056e:	4628      	mov	r0, r5
 8010570:	47b8      	blx	r7
 8010572:	3001      	adds	r0, #1
 8010574:	f43f af45 	beq.w	8010402 <_printf_float+0xb6>
 8010578:	f04f 0900 	mov.w	r9, #0
 801057c:	f108 38ff 	add.w	r8, r8, #4294967295
 8010580:	f104 0a1a 	add.w	sl, r4, #26
 8010584:	45c8      	cmp	r8, r9
 8010586:	dc09      	bgt.n	801059c <_printf_float+0x250>
 8010588:	6823      	ldr	r3, [r4, #0]
 801058a:	079b      	lsls	r3, r3, #30
 801058c:	f100 8103 	bmi.w	8010796 <_printf_float+0x44a>
 8010590:	68e0      	ldr	r0, [r4, #12]
 8010592:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010594:	4298      	cmp	r0, r3
 8010596:	bfb8      	it	lt
 8010598:	4618      	movlt	r0, r3
 801059a:	e734      	b.n	8010406 <_printf_float+0xba>
 801059c:	2301      	movs	r3, #1
 801059e:	4652      	mov	r2, sl
 80105a0:	4631      	mov	r1, r6
 80105a2:	4628      	mov	r0, r5
 80105a4:	47b8      	blx	r7
 80105a6:	3001      	adds	r0, #1
 80105a8:	f43f af2b 	beq.w	8010402 <_printf_float+0xb6>
 80105ac:	f109 0901 	add.w	r9, r9, #1
 80105b0:	e7e8      	b.n	8010584 <_printf_float+0x238>
 80105b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	dc39      	bgt.n	801062c <_printf_float+0x2e0>
 80105b8:	4a1b      	ldr	r2, [pc, #108]	@ (8010628 <_printf_float+0x2dc>)
 80105ba:	2301      	movs	r3, #1
 80105bc:	4631      	mov	r1, r6
 80105be:	4628      	mov	r0, r5
 80105c0:	47b8      	blx	r7
 80105c2:	3001      	adds	r0, #1
 80105c4:	f43f af1d 	beq.w	8010402 <_printf_float+0xb6>
 80105c8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80105cc:	ea59 0303 	orrs.w	r3, r9, r3
 80105d0:	d102      	bne.n	80105d8 <_printf_float+0x28c>
 80105d2:	6823      	ldr	r3, [r4, #0]
 80105d4:	07d9      	lsls	r1, r3, #31
 80105d6:	d5d7      	bpl.n	8010588 <_printf_float+0x23c>
 80105d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80105dc:	4631      	mov	r1, r6
 80105de:	4628      	mov	r0, r5
 80105e0:	47b8      	blx	r7
 80105e2:	3001      	adds	r0, #1
 80105e4:	f43f af0d 	beq.w	8010402 <_printf_float+0xb6>
 80105e8:	f04f 0a00 	mov.w	sl, #0
 80105ec:	f104 0b1a 	add.w	fp, r4, #26
 80105f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105f2:	425b      	negs	r3, r3
 80105f4:	4553      	cmp	r3, sl
 80105f6:	dc01      	bgt.n	80105fc <_printf_float+0x2b0>
 80105f8:	464b      	mov	r3, r9
 80105fa:	e793      	b.n	8010524 <_printf_float+0x1d8>
 80105fc:	2301      	movs	r3, #1
 80105fe:	465a      	mov	r2, fp
 8010600:	4631      	mov	r1, r6
 8010602:	4628      	mov	r0, r5
 8010604:	47b8      	blx	r7
 8010606:	3001      	adds	r0, #1
 8010608:	f43f aefb 	beq.w	8010402 <_printf_float+0xb6>
 801060c:	f10a 0a01 	add.w	sl, sl, #1
 8010610:	e7ee      	b.n	80105f0 <_printf_float+0x2a4>
 8010612:	bf00      	nop
 8010614:	7fefffff 	.word	0x7fefffff
 8010618:	08014a18 	.word	0x08014a18
 801061c:	08014a1c 	.word	0x08014a1c
 8010620:	08014a20 	.word	0x08014a20
 8010624:	08014a24 	.word	0x08014a24
 8010628:	08014a28 	.word	0x08014a28
 801062c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801062e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010632:	4553      	cmp	r3, sl
 8010634:	bfa8      	it	ge
 8010636:	4653      	movge	r3, sl
 8010638:	2b00      	cmp	r3, #0
 801063a:	4699      	mov	r9, r3
 801063c:	dc36      	bgt.n	80106ac <_printf_float+0x360>
 801063e:	f04f 0b00 	mov.w	fp, #0
 8010642:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010646:	f104 021a 	add.w	r2, r4, #26
 801064a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801064c:	9306      	str	r3, [sp, #24]
 801064e:	eba3 0309 	sub.w	r3, r3, r9
 8010652:	455b      	cmp	r3, fp
 8010654:	dc31      	bgt.n	80106ba <_printf_float+0x36e>
 8010656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010658:	459a      	cmp	sl, r3
 801065a:	dc3a      	bgt.n	80106d2 <_printf_float+0x386>
 801065c:	6823      	ldr	r3, [r4, #0]
 801065e:	07da      	lsls	r2, r3, #31
 8010660:	d437      	bmi.n	80106d2 <_printf_float+0x386>
 8010662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010664:	ebaa 0903 	sub.w	r9, sl, r3
 8010668:	9b06      	ldr	r3, [sp, #24]
 801066a:	ebaa 0303 	sub.w	r3, sl, r3
 801066e:	4599      	cmp	r9, r3
 8010670:	bfa8      	it	ge
 8010672:	4699      	movge	r9, r3
 8010674:	f1b9 0f00 	cmp.w	r9, #0
 8010678:	dc33      	bgt.n	80106e2 <_printf_float+0x396>
 801067a:	f04f 0800 	mov.w	r8, #0
 801067e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010682:	f104 0b1a 	add.w	fp, r4, #26
 8010686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010688:	ebaa 0303 	sub.w	r3, sl, r3
 801068c:	eba3 0309 	sub.w	r3, r3, r9
 8010690:	4543      	cmp	r3, r8
 8010692:	f77f af79 	ble.w	8010588 <_printf_float+0x23c>
 8010696:	2301      	movs	r3, #1
 8010698:	465a      	mov	r2, fp
 801069a:	4631      	mov	r1, r6
 801069c:	4628      	mov	r0, r5
 801069e:	47b8      	blx	r7
 80106a0:	3001      	adds	r0, #1
 80106a2:	f43f aeae 	beq.w	8010402 <_printf_float+0xb6>
 80106a6:	f108 0801 	add.w	r8, r8, #1
 80106aa:	e7ec      	b.n	8010686 <_printf_float+0x33a>
 80106ac:	4642      	mov	r2, r8
 80106ae:	4631      	mov	r1, r6
 80106b0:	4628      	mov	r0, r5
 80106b2:	47b8      	blx	r7
 80106b4:	3001      	adds	r0, #1
 80106b6:	d1c2      	bne.n	801063e <_printf_float+0x2f2>
 80106b8:	e6a3      	b.n	8010402 <_printf_float+0xb6>
 80106ba:	2301      	movs	r3, #1
 80106bc:	4631      	mov	r1, r6
 80106be:	4628      	mov	r0, r5
 80106c0:	9206      	str	r2, [sp, #24]
 80106c2:	47b8      	blx	r7
 80106c4:	3001      	adds	r0, #1
 80106c6:	f43f ae9c 	beq.w	8010402 <_printf_float+0xb6>
 80106ca:	9a06      	ldr	r2, [sp, #24]
 80106cc:	f10b 0b01 	add.w	fp, fp, #1
 80106d0:	e7bb      	b.n	801064a <_printf_float+0x2fe>
 80106d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80106d6:	4631      	mov	r1, r6
 80106d8:	4628      	mov	r0, r5
 80106da:	47b8      	blx	r7
 80106dc:	3001      	adds	r0, #1
 80106de:	d1c0      	bne.n	8010662 <_printf_float+0x316>
 80106e0:	e68f      	b.n	8010402 <_printf_float+0xb6>
 80106e2:	9a06      	ldr	r2, [sp, #24]
 80106e4:	464b      	mov	r3, r9
 80106e6:	4442      	add	r2, r8
 80106e8:	4631      	mov	r1, r6
 80106ea:	4628      	mov	r0, r5
 80106ec:	47b8      	blx	r7
 80106ee:	3001      	adds	r0, #1
 80106f0:	d1c3      	bne.n	801067a <_printf_float+0x32e>
 80106f2:	e686      	b.n	8010402 <_printf_float+0xb6>
 80106f4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80106f8:	f1ba 0f01 	cmp.w	sl, #1
 80106fc:	dc01      	bgt.n	8010702 <_printf_float+0x3b6>
 80106fe:	07db      	lsls	r3, r3, #31
 8010700:	d536      	bpl.n	8010770 <_printf_float+0x424>
 8010702:	2301      	movs	r3, #1
 8010704:	4642      	mov	r2, r8
 8010706:	4631      	mov	r1, r6
 8010708:	4628      	mov	r0, r5
 801070a:	47b8      	blx	r7
 801070c:	3001      	adds	r0, #1
 801070e:	f43f ae78 	beq.w	8010402 <_printf_float+0xb6>
 8010712:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010716:	4631      	mov	r1, r6
 8010718:	4628      	mov	r0, r5
 801071a:	47b8      	blx	r7
 801071c:	3001      	adds	r0, #1
 801071e:	f43f ae70 	beq.w	8010402 <_printf_float+0xb6>
 8010722:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010726:	2200      	movs	r2, #0
 8010728:	2300      	movs	r3, #0
 801072a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801072e:	f7f0 f9f3 	bl	8000b18 <__aeabi_dcmpeq>
 8010732:	b9c0      	cbnz	r0, 8010766 <_printf_float+0x41a>
 8010734:	4653      	mov	r3, sl
 8010736:	f108 0201 	add.w	r2, r8, #1
 801073a:	4631      	mov	r1, r6
 801073c:	4628      	mov	r0, r5
 801073e:	47b8      	blx	r7
 8010740:	3001      	adds	r0, #1
 8010742:	d10c      	bne.n	801075e <_printf_float+0x412>
 8010744:	e65d      	b.n	8010402 <_printf_float+0xb6>
 8010746:	2301      	movs	r3, #1
 8010748:	465a      	mov	r2, fp
 801074a:	4631      	mov	r1, r6
 801074c:	4628      	mov	r0, r5
 801074e:	47b8      	blx	r7
 8010750:	3001      	adds	r0, #1
 8010752:	f43f ae56 	beq.w	8010402 <_printf_float+0xb6>
 8010756:	f108 0801 	add.w	r8, r8, #1
 801075a:	45d0      	cmp	r8, sl
 801075c:	dbf3      	blt.n	8010746 <_printf_float+0x3fa>
 801075e:	464b      	mov	r3, r9
 8010760:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010764:	e6df      	b.n	8010526 <_printf_float+0x1da>
 8010766:	f04f 0800 	mov.w	r8, #0
 801076a:	f104 0b1a 	add.w	fp, r4, #26
 801076e:	e7f4      	b.n	801075a <_printf_float+0x40e>
 8010770:	2301      	movs	r3, #1
 8010772:	4642      	mov	r2, r8
 8010774:	e7e1      	b.n	801073a <_printf_float+0x3ee>
 8010776:	2301      	movs	r3, #1
 8010778:	464a      	mov	r2, r9
 801077a:	4631      	mov	r1, r6
 801077c:	4628      	mov	r0, r5
 801077e:	47b8      	blx	r7
 8010780:	3001      	adds	r0, #1
 8010782:	f43f ae3e 	beq.w	8010402 <_printf_float+0xb6>
 8010786:	f108 0801 	add.w	r8, r8, #1
 801078a:	68e3      	ldr	r3, [r4, #12]
 801078c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801078e:	1a5b      	subs	r3, r3, r1
 8010790:	4543      	cmp	r3, r8
 8010792:	dcf0      	bgt.n	8010776 <_printf_float+0x42a>
 8010794:	e6fc      	b.n	8010590 <_printf_float+0x244>
 8010796:	f04f 0800 	mov.w	r8, #0
 801079a:	f104 0919 	add.w	r9, r4, #25
 801079e:	e7f4      	b.n	801078a <_printf_float+0x43e>

080107a0 <_printf_common>:
 80107a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107a4:	4616      	mov	r6, r2
 80107a6:	4698      	mov	r8, r3
 80107a8:	688a      	ldr	r2, [r1, #8]
 80107aa:	690b      	ldr	r3, [r1, #16]
 80107ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80107b0:	4293      	cmp	r3, r2
 80107b2:	bfb8      	it	lt
 80107b4:	4613      	movlt	r3, r2
 80107b6:	6033      	str	r3, [r6, #0]
 80107b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80107bc:	4607      	mov	r7, r0
 80107be:	460c      	mov	r4, r1
 80107c0:	b10a      	cbz	r2, 80107c6 <_printf_common+0x26>
 80107c2:	3301      	adds	r3, #1
 80107c4:	6033      	str	r3, [r6, #0]
 80107c6:	6823      	ldr	r3, [r4, #0]
 80107c8:	0699      	lsls	r1, r3, #26
 80107ca:	bf42      	ittt	mi
 80107cc:	6833      	ldrmi	r3, [r6, #0]
 80107ce:	3302      	addmi	r3, #2
 80107d0:	6033      	strmi	r3, [r6, #0]
 80107d2:	6825      	ldr	r5, [r4, #0]
 80107d4:	f015 0506 	ands.w	r5, r5, #6
 80107d8:	d106      	bne.n	80107e8 <_printf_common+0x48>
 80107da:	f104 0a19 	add.w	sl, r4, #25
 80107de:	68e3      	ldr	r3, [r4, #12]
 80107e0:	6832      	ldr	r2, [r6, #0]
 80107e2:	1a9b      	subs	r3, r3, r2
 80107e4:	42ab      	cmp	r3, r5
 80107e6:	dc26      	bgt.n	8010836 <_printf_common+0x96>
 80107e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80107ec:	6822      	ldr	r2, [r4, #0]
 80107ee:	3b00      	subs	r3, #0
 80107f0:	bf18      	it	ne
 80107f2:	2301      	movne	r3, #1
 80107f4:	0692      	lsls	r2, r2, #26
 80107f6:	d42b      	bmi.n	8010850 <_printf_common+0xb0>
 80107f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80107fc:	4641      	mov	r1, r8
 80107fe:	4638      	mov	r0, r7
 8010800:	47c8      	blx	r9
 8010802:	3001      	adds	r0, #1
 8010804:	d01e      	beq.n	8010844 <_printf_common+0xa4>
 8010806:	6823      	ldr	r3, [r4, #0]
 8010808:	6922      	ldr	r2, [r4, #16]
 801080a:	f003 0306 	and.w	r3, r3, #6
 801080e:	2b04      	cmp	r3, #4
 8010810:	bf02      	ittt	eq
 8010812:	68e5      	ldreq	r5, [r4, #12]
 8010814:	6833      	ldreq	r3, [r6, #0]
 8010816:	1aed      	subeq	r5, r5, r3
 8010818:	68a3      	ldr	r3, [r4, #8]
 801081a:	bf0c      	ite	eq
 801081c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010820:	2500      	movne	r5, #0
 8010822:	4293      	cmp	r3, r2
 8010824:	bfc4      	itt	gt
 8010826:	1a9b      	subgt	r3, r3, r2
 8010828:	18ed      	addgt	r5, r5, r3
 801082a:	2600      	movs	r6, #0
 801082c:	341a      	adds	r4, #26
 801082e:	42b5      	cmp	r5, r6
 8010830:	d11a      	bne.n	8010868 <_printf_common+0xc8>
 8010832:	2000      	movs	r0, #0
 8010834:	e008      	b.n	8010848 <_printf_common+0xa8>
 8010836:	2301      	movs	r3, #1
 8010838:	4652      	mov	r2, sl
 801083a:	4641      	mov	r1, r8
 801083c:	4638      	mov	r0, r7
 801083e:	47c8      	blx	r9
 8010840:	3001      	adds	r0, #1
 8010842:	d103      	bne.n	801084c <_printf_common+0xac>
 8010844:	f04f 30ff 	mov.w	r0, #4294967295
 8010848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801084c:	3501      	adds	r5, #1
 801084e:	e7c6      	b.n	80107de <_printf_common+0x3e>
 8010850:	18e1      	adds	r1, r4, r3
 8010852:	1c5a      	adds	r2, r3, #1
 8010854:	2030      	movs	r0, #48	@ 0x30
 8010856:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801085a:	4422      	add	r2, r4
 801085c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010860:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010864:	3302      	adds	r3, #2
 8010866:	e7c7      	b.n	80107f8 <_printf_common+0x58>
 8010868:	2301      	movs	r3, #1
 801086a:	4622      	mov	r2, r4
 801086c:	4641      	mov	r1, r8
 801086e:	4638      	mov	r0, r7
 8010870:	47c8      	blx	r9
 8010872:	3001      	adds	r0, #1
 8010874:	d0e6      	beq.n	8010844 <_printf_common+0xa4>
 8010876:	3601      	adds	r6, #1
 8010878:	e7d9      	b.n	801082e <_printf_common+0x8e>
	...

0801087c <_printf_i>:
 801087c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010880:	7e0f      	ldrb	r7, [r1, #24]
 8010882:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010884:	2f78      	cmp	r7, #120	@ 0x78
 8010886:	4691      	mov	r9, r2
 8010888:	4680      	mov	r8, r0
 801088a:	460c      	mov	r4, r1
 801088c:	469a      	mov	sl, r3
 801088e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010892:	d807      	bhi.n	80108a4 <_printf_i+0x28>
 8010894:	2f62      	cmp	r7, #98	@ 0x62
 8010896:	d80a      	bhi.n	80108ae <_printf_i+0x32>
 8010898:	2f00      	cmp	r7, #0
 801089a:	f000 80d2 	beq.w	8010a42 <_printf_i+0x1c6>
 801089e:	2f58      	cmp	r7, #88	@ 0x58
 80108a0:	f000 80b9 	beq.w	8010a16 <_printf_i+0x19a>
 80108a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80108a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80108ac:	e03a      	b.n	8010924 <_printf_i+0xa8>
 80108ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80108b2:	2b15      	cmp	r3, #21
 80108b4:	d8f6      	bhi.n	80108a4 <_printf_i+0x28>
 80108b6:	a101      	add	r1, pc, #4	@ (adr r1, 80108bc <_printf_i+0x40>)
 80108b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80108bc:	08010915 	.word	0x08010915
 80108c0:	08010929 	.word	0x08010929
 80108c4:	080108a5 	.word	0x080108a5
 80108c8:	080108a5 	.word	0x080108a5
 80108cc:	080108a5 	.word	0x080108a5
 80108d0:	080108a5 	.word	0x080108a5
 80108d4:	08010929 	.word	0x08010929
 80108d8:	080108a5 	.word	0x080108a5
 80108dc:	080108a5 	.word	0x080108a5
 80108e0:	080108a5 	.word	0x080108a5
 80108e4:	080108a5 	.word	0x080108a5
 80108e8:	08010a29 	.word	0x08010a29
 80108ec:	08010953 	.word	0x08010953
 80108f0:	080109e3 	.word	0x080109e3
 80108f4:	080108a5 	.word	0x080108a5
 80108f8:	080108a5 	.word	0x080108a5
 80108fc:	08010a4b 	.word	0x08010a4b
 8010900:	080108a5 	.word	0x080108a5
 8010904:	08010953 	.word	0x08010953
 8010908:	080108a5 	.word	0x080108a5
 801090c:	080108a5 	.word	0x080108a5
 8010910:	080109eb 	.word	0x080109eb
 8010914:	6833      	ldr	r3, [r6, #0]
 8010916:	1d1a      	adds	r2, r3, #4
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	6032      	str	r2, [r6, #0]
 801091c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010920:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010924:	2301      	movs	r3, #1
 8010926:	e09d      	b.n	8010a64 <_printf_i+0x1e8>
 8010928:	6833      	ldr	r3, [r6, #0]
 801092a:	6820      	ldr	r0, [r4, #0]
 801092c:	1d19      	adds	r1, r3, #4
 801092e:	6031      	str	r1, [r6, #0]
 8010930:	0606      	lsls	r6, r0, #24
 8010932:	d501      	bpl.n	8010938 <_printf_i+0xbc>
 8010934:	681d      	ldr	r5, [r3, #0]
 8010936:	e003      	b.n	8010940 <_printf_i+0xc4>
 8010938:	0645      	lsls	r5, r0, #25
 801093a:	d5fb      	bpl.n	8010934 <_printf_i+0xb8>
 801093c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010940:	2d00      	cmp	r5, #0
 8010942:	da03      	bge.n	801094c <_printf_i+0xd0>
 8010944:	232d      	movs	r3, #45	@ 0x2d
 8010946:	426d      	negs	r5, r5
 8010948:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801094c:	4859      	ldr	r0, [pc, #356]	@ (8010ab4 <_printf_i+0x238>)
 801094e:	230a      	movs	r3, #10
 8010950:	e011      	b.n	8010976 <_printf_i+0xfa>
 8010952:	6821      	ldr	r1, [r4, #0]
 8010954:	6833      	ldr	r3, [r6, #0]
 8010956:	0608      	lsls	r0, r1, #24
 8010958:	f853 5b04 	ldr.w	r5, [r3], #4
 801095c:	d402      	bmi.n	8010964 <_printf_i+0xe8>
 801095e:	0649      	lsls	r1, r1, #25
 8010960:	bf48      	it	mi
 8010962:	b2ad      	uxthmi	r5, r5
 8010964:	2f6f      	cmp	r7, #111	@ 0x6f
 8010966:	4853      	ldr	r0, [pc, #332]	@ (8010ab4 <_printf_i+0x238>)
 8010968:	6033      	str	r3, [r6, #0]
 801096a:	bf14      	ite	ne
 801096c:	230a      	movne	r3, #10
 801096e:	2308      	moveq	r3, #8
 8010970:	2100      	movs	r1, #0
 8010972:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010976:	6866      	ldr	r6, [r4, #4]
 8010978:	60a6      	str	r6, [r4, #8]
 801097a:	2e00      	cmp	r6, #0
 801097c:	bfa2      	ittt	ge
 801097e:	6821      	ldrge	r1, [r4, #0]
 8010980:	f021 0104 	bicge.w	r1, r1, #4
 8010984:	6021      	strge	r1, [r4, #0]
 8010986:	b90d      	cbnz	r5, 801098c <_printf_i+0x110>
 8010988:	2e00      	cmp	r6, #0
 801098a:	d04b      	beq.n	8010a24 <_printf_i+0x1a8>
 801098c:	4616      	mov	r6, r2
 801098e:	fbb5 f1f3 	udiv	r1, r5, r3
 8010992:	fb03 5711 	mls	r7, r3, r1, r5
 8010996:	5dc7      	ldrb	r7, [r0, r7]
 8010998:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801099c:	462f      	mov	r7, r5
 801099e:	42bb      	cmp	r3, r7
 80109a0:	460d      	mov	r5, r1
 80109a2:	d9f4      	bls.n	801098e <_printf_i+0x112>
 80109a4:	2b08      	cmp	r3, #8
 80109a6:	d10b      	bne.n	80109c0 <_printf_i+0x144>
 80109a8:	6823      	ldr	r3, [r4, #0]
 80109aa:	07df      	lsls	r7, r3, #31
 80109ac:	d508      	bpl.n	80109c0 <_printf_i+0x144>
 80109ae:	6923      	ldr	r3, [r4, #16]
 80109b0:	6861      	ldr	r1, [r4, #4]
 80109b2:	4299      	cmp	r1, r3
 80109b4:	bfde      	ittt	le
 80109b6:	2330      	movle	r3, #48	@ 0x30
 80109b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80109bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80109c0:	1b92      	subs	r2, r2, r6
 80109c2:	6122      	str	r2, [r4, #16]
 80109c4:	f8cd a000 	str.w	sl, [sp]
 80109c8:	464b      	mov	r3, r9
 80109ca:	aa03      	add	r2, sp, #12
 80109cc:	4621      	mov	r1, r4
 80109ce:	4640      	mov	r0, r8
 80109d0:	f7ff fee6 	bl	80107a0 <_printf_common>
 80109d4:	3001      	adds	r0, #1
 80109d6:	d14a      	bne.n	8010a6e <_printf_i+0x1f2>
 80109d8:	f04f 30ff 	mov.w	r0, #4294967295
 80109dc:	b004      	add	sp, #16
 80109de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109e2:	6823      	ldr	r3, [r4, #0]
 80109e4:	f043 0320 	orr.w	r3, r3, #32
 80109e8:	6023      	str	r3, [r4, #0]
 80109ea:	4833      	ldr	r0, [pc, #204]	@ (8010ab8 <_printf_i+0x23c>)
 80109ec:	2778      	movs	r7, #120	@ 0x78
 80109ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80109f2:	6823      	ldr	r3, [r4, #0]
 80109f4:	6831      	ldr	r1, [r6, #0]
 80109f6:	061f      	lsls	r7, r3, #24
 80109f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80109fc:	d402      	bmi.n	8010a04 <_printf_i+0x188>
 80109fe:	065f      	lsls	r7, r3, #25
 8010a00:	bf48      	it	mi
 8010a02:	b2ad      	uxthmi	r5, r5
 8010a04:	6031      	str	r1, [r6, #0]
 8010a06:	07d9      	lsls	r1, r3, #31
 8010a08:	bf44      	itt	mi
 8010a0a:	f043 0320 	orrmi.w	r3, r3, #32
 8010a0e:	6023      	strmi	r3, [r4, #0]
 8010a10:	b11d      	cbz	r5, 8010a1a <_printf_i+0x19e>
 8010a12:	2310      	movs	r3, #16
 8010a14:	e7ac      	b.n	8010970 <_printf_i+0xf4>
 8010a16:	4827      	ldr	r0, [pc, #156]	@ (8010ab4 <_printf_i+0x238>)
 8010a18:	e7e9      	b.n	80109ee <_printf_i+0x172>
 8010a1a:	6823      	ldr	r3, [r4, #0]
 8010a1c:	f023 0320 	bic.w	r3, r3, #32
 8010a20:	6023      	str	r3, [r4, #0]
 8010a22:	e7f6      	b.n	8010a12 <_printf_i+0x196>
 8010a24:	4616      	mov	r6, r2
 8010a26:	e7bd      	b.n	80109a4 <_printf_i+0x128>
 8010a28:	6833      	ldr	r3, [r6, #0]
 8010a2a:	6825      	ldr	r5, [r4, #0]
 8010a2c:	6961      	ldr	r1, [r4, #20]
 8010a2e:	1d18      	adds	r0, r3, #4
 8010a30:	6030      	str	r0, [r6, #0]
 8010a32:	062e      	lsls	r6, r5, #24
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	d501      	bpl.n	8010a3c <_printf_i+0x1c0>
 8010a38:	6019      	str	r1, [r3, #0]
 8010a3a:	e002      	b.n	8010a42 <_printf_i+0x1c6>
 8010a3c:	0668      	lsls	r0, r5, #25
 8010a3e:	d5fb      	bpl.n	8010a38 <_printf_i+0x1bc>
 8010a40:	8019      	strh	r1, [r3, #0]
 8010a42:	2300      	movs	r3, #0
 8010a44:	6123      	str	r3, [r4, #16]
 8010a46:	4616      	mov	r6, r2
 8010a48:	e7bc      	b.n	80109c4 <_printf_i+0x148>
 8010a4a:	6833      	ldr	r3, [r6, #0]
 8010a4c:	1d1a      	adds	r2, r3, #4
 8010a4e:	6032      	str	r2, [r6, #0]
 8010a50:	681e      	ldr	r6, [r3, #0]
 8010a52:	6862      	ldr	r2, [r4, #4]
 8010a54:	2100      	movs	r1, #0
 8010a56:	4630      	mov	r0, r6
 8010a58:	f7ef fbe2 	bl	8000220 <memchr>
 8010a5c:	b108      	cbz	r0, 8010a62 <_printf_i+0x1e6>
 8010a5e:	1b80      	subs	r0, r0, r6
 8010a60:	6060      	str	r0, [r4, #4]
 8010a62:	6863      	ldr	r3, [r4, #4]
 8010a64:	6123      	str	r3, [r4, #16]
 8010a66:	2300      	movs	r3, #0
 8010a68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010a6c:	e7aa      	b.n	80109c4 <_printf_i+0x148>
 8010a6e:	6923      	ldr	r3, [r4, #16]
 8010a70:	4632      	mov	r2, r6
 8010a72:	4649      	mov	r1, r9
 8010a74:	4640      	mov	r0, r8
 8010a76:	47d0      	blx	sl
 8010a78:	3001      	adds	r0, #1
 8010a7a:	d0ad      	beq.n	80109d8 <_printf_i+0x15c>
 8010a7c:	6823      	ldr	r3, [r4, #0]
 8010a7e:	079b      	lsls	r3, r3, #30
 8010a80:	d413      	bmi.n	8010aaa <_printf_i+0x22e>
 8010a82:	68e0      	ldr	r0, [r4, #12]
 8010a84:	9b03      	ldr	r3, [sp, #12]
 8010a86:	4298      	cmp	r0, r3
 8010a88:	bfb8      	it	lt
 8010a8a:	4618      	movlt	r0, r3
 8010a8c:	e7a6      	b.n	80109dc <_printf_i+0x160>
 8010a8e:	2301      	movs	r3, #1
 8010a90:	4632      	mov	r2, r6
 8010a92:	4649      	mov	r1, r9
 8010a94:	4640      	mov	r0, r8
 8010a96:	47d0      	blx	sl
 8010a98:	3001      	adds	r0, #1
 8010a9a:	d09d      	beq.n	80109d8 <_printf_i+0x15c>
 8010a9c:	3501      	adds	r5, #1
 8010a9e:	68e3      	ldr	r3, [r4, #12]
 8010aa0:	9903      	ldr	r1, [sp, #12]
 8010aa2:	1a5b      	subs	r3, r3, r1
 8010aa4:	42ab      	cmp	r3, r5
 8010aa6:	dcf2      	bgt.n	8010a8e <_printf_i+0x212>
 8010aa8:	e7eb      	b.n	8010a82 <_printf_i+0x206>
 8010aaa:	2500      	movs	r5, #0
 8010aac:	f104 0619 	add.w	r6, r4, #25
 8010ab0:	e7f5      	b.n	8010a9e <_printf_i+0x222>
 8010ab2:	bf00      	nop
 8010ab4:	08014a2a 	.word	0x08014a2a
 8010ab8:	08014a3b 	.word	0x08014a3b

08010abc <_scanf_float>:
 8010abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ac0:	b087      	sub	sp, #28
 8010ac2:	4617      	mov	r7, r2
 8010ac4:	9303      	str	r3, [sp, #12]
 8010ac6:	688b      	ldr	r3, [r1, #8]
 8010ac8:	1e5a      	subs	r2, r3, #1
 8010aca:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8010ace:	bf81      	itttt	hi
 8010ad0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8010ad4:	eb03 0b05 	addhi.w	fp, r3, r5
 8010ad8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8010adc:	608b      	strhi	r3, [r1, #8]
 8010ade:	680b      	ldr	r3, [r1, #0]
 8010ae0:	460a      	mov	r2, r1
 8010ae2:	f04f 0500 	mov.w	r5, #0
 8010ae6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8010aea:	f842 3b1c 	str.w	r3, [r2], #28
 8010aee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010af2:	4680      	mov	r8, r0
 8010af4:	460c      	mov	r4, r1
 8010af6:	bf98      	it	ls
 8010af8:	f04f 0b00 	movls.w	fp, #0
 8010afc:	9201      	str	r2, [sp, #4]
 8010afe:	4616      	mov	r6, r2
 8010b00:	46aa      	mov	sl, r5
 8010b02:	46a9      	mov	r9, r5
 8010b04:	9502      	str	r5, [sp, #8]
 8010b06:	68a2      	ldr	r2, [r4, #8]
 8010b08:	b152      	cbz	r2, 8010b20 <_scanf_float+0x64>
 8010b0a:	683b      	ldr	r3, [r7, #0]
 8010b0c:	781b      	ldrb	r3, [r3, #0]
 8010b0e:	2b4e      	cmp	r3, #78	@ 0x4e
 8010b10:	d864      	bhi.n	8010bdc <_scanf_float+0x120>
 8010b12:	2b40      	cmp	r3, #64	@ 0x40
 8010b14:	d83c      	bhi.n	8010b90 <_scanf_float+0xd4>
 8010b16:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8010b1a:	b2c8      	uxtb	r0, r1
 8010b1c:	280e      	cmp	r0, #14
 8010b1e:	d93a      	bls.n	8010b96 <_scanf_float+0xda>
 8010b20:	f1b9 0f00 	cmp.w	r9, #0
 8010b24:	d003      	beq.n	8010b2e <_scanf_float+0x72>
 8010b26:	6823      	ldr	r3, [r4, #0]
 8010b28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010b2c:	6023      	str	r3, [r4, #0]
 8010b2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010b32:	f1ba 0f01 	cmp.w	sl, #1
 8010b36:	f200 8117 	bhi.w	8010d68 <_scanf_float+0x2ac>
 8010b3a:	9b01      	ldr	r3, [sp, #4]
 8010b3c:	429e      	cmp	r6, r3
 8010b3e:	f200 8108 	bhi.w	8010d52 <_scanf_float+0x296>
 8010b42:	2001      	movs	r0, #1
 8010b44:	b007      	add	sp, #28
 8010b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b4a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8010b4e:	2a0d      	cmp	r2, #13
 8010b50:	d8e6      	bhi.n	8010b20 <_scanf_float+0x64>
 8010b52:	a101      	add	r1, pc, #4	@ (adr r1, 8010b58 <_scanf_float+0x9c>)
 8010b54:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010b58:	08010c9f 	.word	0x08010c9f
 8010b5c:	08010b21 	.word	0x08010b21
 8010b60:	08010b21 	.word	0x08010b21
 8010b64:	08010b21 	.word	0x08010b21
 8010b68:	08010cff 	.word	0x08010cff
 8010b6c:	08010cd7 	.word	0x08010cd7
 8010b70:	08010b21 	.word	0x08010b21
 8010b74:	08010b21 	.word	0x08010b21
 8010b78:	08010cad 	.word	0x08010cad
 8010b7c:	08010b21 	.word	0x08010b21
 8010b80:	08010b21 	.word	0x08010b21
 8010b84:	08010b21 	.word	0x08010b21
 8010b88:	08010b21 	.word	0x08010b21
 8010b8c:	08010c65 	.word	0x08010c65
 8010b90:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8010b94:	e7db      	b.n	8010b4e <_scanf_float+0x92>
 8010b96:	290e      	cmp	r1, #14
 8010b98:	d8c2      	bhi.n	8010b20 <_scanf_float+0x64>
 8010b9a:	a001      	add	r0, pc, #4	@ (adr r0, 8010ba0 <_scanf_float+0xe4>)
 8010b9c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010ba0:	08010c55 	.word	0x08010c55
 8010ba4:	08010b21 	.word	0x08010b21
 8010ba8:	08010c55 	.word	0x08010c55
 8010bac:	08010ceb 	.word	0x08010ceb
 8010bb0:	08010b21 	.word	0x08010b21
 8010bb4:	08010bfd 	.word	0x08010bfd
 8010bb8:	08010c3b 	.word	0x08010c3b
 8010bbc:	08010c3b 	.word	0x08010c3b
 8010bc0:	08010c3b 	.word	0x08010c3b
 8010bc4:	08010c3b 	.word	0x08010c3b
 8010bc8:	08010c3b 	.word	0x08010c3b
 8010bcc:	08010c3b 	.word	0x08010c3b
 8010bd0:	08010c3b 	.word	0x08010c3b
 8010bd4:	08010c3b 	.word	0x08010c3b
 8010bd8:	08010c3b 	.word	0x08010c3b
 8010bdc:	2b6e      	cmp	r3, #110	@ 0x6e
 8010bde:	d809      	bhi.n	8010bf4 <_scanf_float+0x138>
 8010be0:	2b60      	cmp	r3, #96	@ 0x60
 8010be2:	d8b2      	bhi.n	8010b4a <_scanf_float+0x8e>
 8010be4:	2b54      	cmp	r3, #84	@ 0x54
 8010be6:	d07b      	beq.n	8010ce0 <_scanf_float+0x224>
 8010be8:	2b59      	cmp	r3, #89	@ 0x59
 8010bea:	d199      	bne.n	8010b20 <_scanf_float+0x64>
 8010bec:	2d07      	cmp	r5, #7
 8010bee:	d197      	bne.n	8010b20 <_scanf_float+0x64>
 8010bf0:	2508      	movs	r5, #8
 8010bf2:	e02c      	b.n	8010c4e <_scanf_float+0x192>
 8010bf4:	2b74      	cmp	r3, #116	@ 0x74
 8010bf6:	d073      	beq.n	8010ce0 <_scanf_float+0x224>
 8010bf8:	2b79      	cmp	r3, #121	@ 0x79
 8010bfa:	e7f6      	b.n	8010bea <_scanf_float+0x12e>
 8010bfc:	6821      	ldr	r1, [r4, #0]
 8010bfe:	05c8      	lsls	r0, r1, #23
 8010c00:	d51b      	bpl.n	8010c3a <_scanf_float+0x17e>
 8010c02:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8010c06:	6021      	str	r1, [r4, #0]
 8010c08:	f109 0901 	add.w	r9, r9, #1
 8010c0c:	f1bb 0f00 	cmp.w	fp, #0
 8010c10:	d003      	beq.n	8010c1a <_scanf_float+0x15e>
 8010c12:	3201      	adds	r2, #1
 8010c14:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010c18:	60a2      	str	r2, [r4, #8]
 8010c1a:	68a3      	ldr	r3, [r4, #8]
 8010c1c:	3b01      	subs	r3, #1
 8010c1e:	60a3      	str	r3, [r4, #8]
 8010c20:	6923      	ldr	r3, [r4, #16]
 8010c22:	3301      	adds	r3, #1
 8010c24:	6123      	str	r3, [r4, #16]
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	3b01      	subs	r3, #1
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	607b      	str	r3, [r7, #4]
 8010c2e:	f340 8087 	ble.w	8010d40 <_scanf_float+0x284>
 8010c32:	683b      	ldr	r3, [r7, #0]
 8010c34:	3301      	adds	r3, #1
 8010c36:	603b      	str	r3, [r7, #0]
 8010c38:	e765      	b.n	8010b06 <_scanf_float+0x4a>
 8010c3a:	eb1a 0105 	adds.w	r1, sl, r5
 8010c3e:	f47f af6f 	bne.w	8010b20 <_scanf_float+0x64>
 8010c42:	6822      	ldr	r2, [r4, #0]
 8010c44:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8010c48:	6022      	str	r2, [r4, #0]
 8010c4a:	460d      	mov	r5, r1
 8010c4c:	468a      	mov	sl, r1
 8010c4e:	f806 3b01 	strb.w	r3, [r6], #1
 8010c52:	e7e2      	b.n	8010c1a <_scanf_float+0x15e>
 8010c54:	6822      	ldr	r2, [r4, #0]
 8010c56:	0610      	lsls	r0, r2, #24
 8010c58:	f57f af62 	bpl.w	8010b20 <_scanf_float+0x64>
 8010c5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010c60:	6022      	str	r2, [r4, #0]
 8010c62:	e7f4      	b.n	8010c4e <_scanf_float+0x192>
 8010c64:	f1ba 0f00 	cmp.w	sl, #0
 8010c68:	d10e      	bne.n	8010c88 <_scanf_float+0x1cc>
 8010c6a:	f1b9 0f00 	cmp.w	r9, #0
 8010c6e:	d10e      	bne.n	8010c8e <_scanf_float+0x1d2>
 8010c70:	6822      	ldr	r2, [r4, #0]
 8010c72:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8010c76:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8010c7a:	d108      	bne.n	8010c8e <_scanf_float+0x1d2>
 8010c7c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010c80:	6022      	str	r2, [r4, #0]
 8010c82:	f04f 0a01 	mov.w	sl, #1
 8010c86:	e7e2      	b.n	8010c4e <_scanf_float+0x192>
 8010c88:	f1ba 0f02 	cmp.w	sl, #2
 8010c8c:	d055      	beq.n	8010d3a <_scanf_float+0x27e>
 8010c8e:	2d01      	cmp	r5, #1
 8010c90:	d002      	beq.n	8010c98 <_scanf_float+0x1dc>
 8010c92:	2d04      	cmp	r5, #4
 8010c94:	f47f af44 	bne.w	8010b20 <_scanf_float+0x64>
 8010c98:	3501      	adds	r5, #1
 8010c9a:	b2ed      	uxtb	r5, r5
 8010c9c:	e7d7      	b.n	8010c4e <_scanf_float+0x192>
 8010c9e:	f1ba 0f01 	cmp.w	sl, #1
 8010ca2:	f47f af3d 	bne.w	8010b20 <_scanf_float+0x64>
 8010ca6:	f04f 0a02 	mov.w	sl, #2
 8010caa:	e7d0      	b.n	8010c4e <_scanf_float+0x192>
 8010cac:	b97d      	cbnz	r5, 8010cce <_scanf_float+0x212>
 8010cae:	f1b9 0f00 	cmp.w	r9, #0
 8010cb2:	f47f af38 	bne.w	8010b26 <_scanf_float+0x6a>
 8010cb6:	6822      	ldr	r2, [r4, #0]
 8010cb8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8010cbc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8010cc0:	f040 8108 	bne.w	8010ed4 <_scanf_float+0x418>
 8010cc4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010cc8:	6022      	str	r2, [r4, #0]
 8010cca:	2501      	movs	r5, #1
 8010ccc:	e7bf      	b.n	8010c4e <_scanf_float+0x192>
 8010cce:	2d03      	cmp	r5, #3
 8010cd0:	d0e2      	beq.n	8010c98 <_scanf_float+0x1dc>
 8010cd2:	2d05      	cmp	r5, #5
 8010cd4:	e7de      	b.n	8010c94 <_scanf_float+0x1d8>
 8010cd6:	2d02      	cmp	r5, #2
 8010cd8:	f47f af22 	bne.w	8010b20 <_scanf_float+0x64>
 8010cdc:	2503      	movs	r5, #3
 8010cde:	e7b6      	b.n	8010c4e <_scanf_float+0x192>
 8010ce0:	2d06      	cmp	r5, #6
 8010ce2:	f47f af1d 	bne.w	8010b20 <_scanf_float+0x64>
 8010ce6:	2507      	movs	r5, #7
 8010ce8:	e7b1      	b.n	8010c4e <_scanf_float+0x192>
 8010cea:	6822      	ldr	r2, [r4, #0]
 8010cec:	0591      	lsls	r1, r2, #22
 8010cee:	f57f af17 	bpl.w	8010b20 <_scanf_float+0x64>
 8010cf2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8010cf6:	6022      	str	r2, [r4, #0]
 8010cf8:	f8cd 9008 	str.w	r9, [sp, #8]
 8010cfc:	e7a7      	b.n	8010c4e <_scanf_float+0x192>
 8010cfe:	6822      	ldr	r2, [r4, #0]
 8010d00:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8010d04:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8010d08:	d006      	beq.n	8010d18 <_scanf_float+0x25c>
 8010d0a:	0550      	lsls	r0, r2, #21
 8010d0c:	f57f af08 	bpl.w	8010b20 <_scanf_float+0x64>
 8010d10:	f1b9 0f00 	cmp.w	r9, #0
 8010d14:	f000 80de 	beq.w	8010ed4 <_scanf_float+0x418>
 8010d18:	0591      	lsls	r1, r2, #22
 8010d1a:	bf58      	it	pl
 8010d1c:	9902      	ldrpl	r1, [sp, #8]
 8010d1e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010d22:	bf58      	it	pl
 8010d24:	eba9 0101 	subpl.w	r1, r9, r1
 8010d28:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8010d2c:	bf58      	it	pl
 8010d2e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010d32:	6022      	str	r2, [r4, #0]
 8010d34:	f04f 0900 	mov.w	r9, #0
 8010d38:	e789      	b.n	8010c4e <_scanf_float+0x192>
 8010d3a:	f04f 0a03 	mov.w	sl, #3
 8010d3e:	e786      	b.n	8010c4e <_scanf_float+0x192>
 8010d40:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010d44:	4639      	mov	r1, r7
 8010d46:	4640      	mov	r0, r8
 8010d48:	4798      	blx	r3
 8010d4a:	2800      	cmp	r0, #0
 8010d4c:	f43f aedb 	beq.w	8010b06 <_scanf_float+0x4a>
 8010d50:	e6e6      	b.n	8010b20 <_scanf_float+0x64>
 8010d52:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010d56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010d5a:	463a      	mov	r2, r7
 8010d5c:	4640      	mov	r0, r8
 8010d5e:	4798      	blx	r3
 8010d60:	6923      	ldr	r3, [r4, #16]
 8010d62:	3b01      	subs	r3, #1
 8010d64:	6123      	str	r3, [r4, #16]
 8010d66:	e6e8      	b.n	8010b3a <_scanf_float+0x7e>
 8010d68:	1e6b      	subs	r3, r5, #1
 8010d6a:	2b06      	cmp	r3, #6
 8010d6c:	d824      	bhi.n	8010db8 <_scanf_float+0x2fc>
 8010d6e:	2d02      	cmp	r5, #2
 8010d70:	d836      	bhi.n	8010de0 <_scanf_float+0x324>
 8010d72:	9b01      	ldr	r3, [sp, #4]
 8010d74:	429e      	cmp	r6, r3
 8010d76:	f67f aee4 	bls.w	8010b42 <_scanf_float+0x86>
 8010d7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010d7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010d82:	463a      	mov	r2, r7
 8010d84:	4640      	mov	r0, r8
 8010d86:	4798      	blx	r3
 8010d88:	6923      	ldr	r3, [r4, #16]
 8010d8a:	3b01      	subs	r3, #1
 8010d8c:	6123      	str	r3, [r4, #16]
 8010d8e:	e7f0      	b.n	8010d72 <_scanf_float+0x2b6>
 8010d90:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010d94:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8010d98:	463a      	mov	r2, r7
 8010d9a:	4640      	mov	r0, r8
 8010d9c:	4798      	blx	r3
 8010d9e:	6923      	ldr	r3, [r4, #16]
 8010da0:	3b01      	subs	r3, #1
 8010da2:	6123      	str	r3, [r4, #16]
 8010da4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010da8:	fa5f fa8a 	uxtb.w	sl, sl
 8010dac:	f1ba 0f02 	cmp.w	sl, #2
 8010db0:	d1ee      	bne.n	8010d90 <_scanf_float+0x2d4>
 8010db2:	3d03      	subs	r5, #3
 8010db4:	b2ed      	uxtb	r5, r5
 8010db6:	1b76      	subs	r6, r6, r5
 8010db8:	6823      	ldr	r3, [r4, #0]
 8010dba:	05da      	lsls	r2, r3, #23
 8010dbc:	d530      	bpl.n	8010e20 <_scanf_float+0x364>
 8010dbe:	055b      	lsls	r3, r3, #21
 8010dc0:	d511      	bpl.n	8010de6 <_scanf_float+0x32a>
 8010dc2:	9b01      	ldr	r3, [sp, #4]
 8010dc4:	429e      	cmp	r6, r3
 8010dc6:	f67f aebc 	bls.w	8010b42 <_scanf_float+0x86>
 8010dca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010dce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010dd2:	463a      	mov	r2, r7
 8010dd4:	4640      	mov	r0, r8
 8010dd6:	4798      	blx	r3
 8010dd8:	6923      	ldr	r3, [r4, #16]
 8010dda:	3b01      	subs	r3, #1
 8010ddc:	6123      	str	r3, [r4, #16]
 8010dde:	e7f0      	b.n	8010dc2 <_scanf_float+0x306>
 8010de0:	46aa      	mov	sl, r5
 8010de2:	46b3      	mov	fp, r6
 8010de4:	e7de      	b.n	8010da4 <_scanf_float+0x2e8>
 8010de6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010dea:	6923      	ldr	r3, [r4, #16]
 8010dec:	2965      	cmp	r1, #101	@ 0x65
 8010dee:	f103 33ff 	add.w	r3, r3, #4294967295
 8010df2:	f106 35ff 	add.w	r5, r6, #4294967295
 8010df6:	6123      	str	r3, [r4, #16]
 8010df8:	d00c      	beq.n	8010e14 <_scanf_float+0x358>
 8010dfa:	2945      	cmp	r1, #69	@ 0x45
 8010dfc:	d00a      	beq.n	8010e14 <_scanf_float+0x358>
 8010dfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010e02:	463a      	mov	r2, r7
 8010e04:	4640      	mov	r0, r8
 8010e06:	4798      	blx	r3
 8010e08:	6923      	ldr	r3, [r4, #16]
 8010e0a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010e0e:	3b01      	subs	r3, #1
 8010e10:	1eb5      	subs	r5, r6, #2
 8010e12:	6123      	str	r3, [r4, #16]
 8010e14:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010e18:	463a      	mov	r2, r7
 8010e1a:	4640      	mov	r0, r8
 8010e1c:	4798      	blx	r3
 8010e1e:	462e      	mov	r6, r5
 8010e20:	6822      	ldr	r2, [r4, #0]
 8010e22:	f012 0210 	ands.w	r2, r2, #16
 8010e26:	d001      	beq.n	8010e2c <_scanf_float+0x370>
 8010e28:	2000      	movs	r0, #0
 8010e2a:	e68b      	b.n	8010b44 <_scanf_float+0x88>
 8010e2c:	7032      	strb	r2, [r6, #0]
 8010e2e:	6823      	ldr	r3, [r4, #0]
 8010e30:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8010e34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010e38:	d11c      	bne.n	8010e74 <_scanf_float+0x3b8>
 8010e3a:	9b02      	ldr	r3, [sp, #8]
 8010e3c:	454b      	cmp	r3, r9
 8010e3e:	eba3 0209 	sub.w	r2, r3, r9
 8010e42:	d123      	bne.n	8010e8c <_scanf_float+0x3d0>
 8010e44:	9901      	ldr	r1, [sp, #4]
 8010e46:	2200      	movs	r2, #0
 8010e48:	4640      	mov	r0, r8
 8010e4a:	f002 fbf9 	bl	8013640 <_strtod_r>
 8010e4e:	9b03      	ldr	r3, [sp, #12]
 8010e50:	6821      	ldr	r1, [r4, #0]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	f011 0f02 	tst.w	r1, #2
 8010e58:	ec57 6b10 	vmov	r6, r7, d0
 8010e5c:	f103 0204 	add.w	r2, r3, #4
 8010e60:	d01f      	beq.n	8010ea2 <_scanf_float+0x3e6>
 8010e62:	9903      	ldr	r1, [sp, #12]
 8010e64:	600a      	str	r2, [r1, #0]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	e9c3 6700 	strd	r6, r7, [r3]
 8010e6c:	68e3      	ldr	r3, [r4, #12]
 8010e6e:	3301      	adds	r3, #1
 8010e70:	60e3      	str	r3, [r4, #12]
 8010e72:	e7d9      	b.n	8010e28 <_scanf_float+0x36c>
 8010e74:	9b04      	ldr	r3, [sp, #16]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d0e4      	beq.n	8010e44 <_scanf_float+0x388>
 8010e7a:	9905      	ldr	r1, [sp, #20]
 8010e7c:	230a      	movs	r3, #10
 8010e7e:	3101      	adds	r1, #1
 8010e80:	4640      	mov	r0, r8
 8010e82:	f002 fc5d 	bl	8013740 <_strtol_r>
 8010e86:	9b04      	ldr	r3, [sp, #16]
 8010e88:	9e05      	ldr	r6, [sp, #20]
 8010e8a:	1ac2      	subs	r2, r0, r3
 8010e8c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8010e90:	429e      	cmp	r6, r3
 8010e92:	bf28      	it	cs
 8010e94:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8010e98:	4910      	ldr	r1, [pc, #64]	@ (8010edc <_scanf_float+0x420>)
 8010e9a:	4630      	mov	r0, r6
 8010e9c:	f000 f8e4 	bl	8011068 <siprintf>
 8010ea0:	e7d0      	b.n	8010e44 <_scanf_float+0x388>
 8010ea2:	f011 0f04 	tst.w	r1, #4
 8010ea6:	9903      	ldr	r1, [sp, #12]
 8010ea8:	600a      	str	r2, [r1, #0]
 8010eaa:	d1dc      	bne.n	8010e66 <_scanf_float+0x3aa>
 8010eac:	681d      	ldr	r5, [r3, #0]
 8010eae:	4632      	mov	r2, r6
 8010eb0:	463b      	mov	r3, r7
 8010eb2:	4630      	mov	r0, r6
 8010eb4:	4639      	mov	r1, r7
 8010eb6:	f7ef fe61 	bl	8000b7c <__aeabi_dcmpun>
 8010eba:	b128      	cbz	r0, 8010ec8 <_scanf_float+0x40c>
 8010ebc:	4808      	ldr	r0, [pc, #32]	@ (8010ee0 <_scanf_float+0x424>)
 8010ebe:	f000 f9b7 	bl	8011230 <nanf>
 8010ec2:	ed85 0a00 	vstr	s0, [r5]
 8010ec6:	e7d1      	b.n	8010e6c <_scanf_float+0x3b0>
 8010ec8:	4630      	mov	r0, r6
 8010eca:	4639      	mov	r1, r7
 8010ecc:	f7ef feb4 	bl	8000c38 <__aeabi_d2f>
 8010ed0:	6028      	str	r0, [r5, #0]
 8010ed2:	e7cb      	b.n	8010e6c <_scanf_float+0x3b0>
 8010ed4:	f04f 0900 	mov.w	r9, #0
 8010ed8:	e629      	b.n	8010b2e <_scanf_float+0x72>
 8010eda:	bf00      	nop
 8010edc:	08014a4c 	.word	0x08014a4c
 8010ee0:	08014de5 	.word	0x08014de5

08010ee4 <std>:
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	b510      	push	{r4, lr}
 8010ee8:	4604      	mov	r4, r0
 8010eea:	e9c0 3300 	strd	r3, r3, [r0]
 8010eee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010ef2:	6083      	str	r3, [r0, #8]
 8010ef4:	8181      	strh	r1, [r0, #12]
 8010ef6:	6643      	str	r3, [r0, #100]	@ 0x64
 8010ef8:	81c2      	strh	r2, [r0, #14]
 8010efa:	6183      	str	r3, [r0, #24]
 8010efc:	4619      	mov	r1, r3
 8010efe:	2208      	movs	r2, #8
 8010f00:	305c      	adds	r0, #92	@ 0x5c
 8010f02:	f000 f914 	bl	801112e <memset>
 8010f06:	4b0d      	ldr	r3, [pc, #52]	@ (8010f3c <std+0x58>)
 8010f08:	6263      	str	r3, [r4, #36]	@ 0x24
 8010f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8010f40 <std+0x5c>)
 8010f0c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8010f44 <std+0x60>)
 8010f10:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010f12:	4b0d      	ldr	r3, [pc, #52]	@ (8010f48 <std+0x64>)
 8010f14:	6323      	str	r3, [r4, #48]	@ 0x30
 8010f16:	4b0d      	ldr	r3, [pc, #52]	@ (8010f4c <std+0x68>)
 8010f18:	6224      	str	r4, [r4, #32]
 8010f1a:	429c      	cmp	r4, r3
 8010f1c:	d006      	beq.n	8010f2c <std+0x48>
 8010f1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010f22:	4294      	cmp	r4, r2
 8010f24:	d002      	beq.n	8010f2c <std+0x48>
 8010f26:	33d0      	adds	r3, #208	@ 0xd0
 8010f28:	429c      	cmp	r4, r3
 8010f2a:	d105      	bne.n	8010f38 <std+0x54>
 8010f2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f34:	f000 b978 	b.w	8011228 <__retarget_lock_init_recursive>
 8010f38:	bd10      	pop	{r4, pc}
 8010f3a:	bf00      	nop
 8010f3c:	080110a9 	.word	0x080110a9
 8010f40:	080110cb 	.word	0x080110cb
 8010f44:	08011103 	.word	0x08011103
 8010f48:	08011127 	.word	0x08011127
 8010f4c:	20002a6c 	.word	0x20002a6c

08010f50 <stdio_exit_handler>:
 8010f50:	4a02      	ldr	r2, [pc, #8]	@ (8010f5c <stdio_exit_handler+0xc>)
 8010f52:	4903      	ldr	r1, [pc, #12]	@ (8010f60 <stdio_exit_handler+0x10>)
 8010f54:	4803      	ldr	r0, [pc, #12]	@ (8010f64 <stdio_exit_handler+0x14>)
 8010f56:	f000 b869 	b.w	801102c <_fwalk_sglue>
 8010f5a:	bf00      	nop
 8010f5c:	2000018c 	.word	0x2000018c
 8010f60:	08013afd 	.word	0x08013afd
 8010f64:	2000019c 	.word	0x2000019c

08010f68 <cleanup_stdio>:
 8010f68:	6841      	ldr	r1, [r0, #4]
 8010f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8010f9c <cleanup_stdio+0x34>)
 8010f6c:	4299      	cmp	r1, r3
 8010f6e:	b510      	push	{r4, lr}
 8010f70:	4604      	mov	r4, r0
 8010f72:	d001      	beq.n	8010f78 <cleanup_stdio+0x10>
 8010f74:	f002 fdc2 	bl	8013afc <_fflush_r>
 8010f78:	68a1      	ldr	r1, [r4, #8]
 8010f7a:	4b09      	ldr	r3, [pc, #36]	@ (8010fa0 <cleanup_stdio+0x38>)
 8010f7c:	4299      	cmp	r1, r3
 8010f7e:	d002      	beq.n	8010f86 <cleanup_stdio+0x1e>
 8010f80:	4620      	mov	r0, r4
 8010f82:	f002 fdbb 	bl	8013afc <_fflush_r>
 8010f86:	68e1      	ldr	r1, [r4, #12]
 8010f88:	4b06      	ldr	r3, [pc, #24]	@ (8010fa4 <cleanup_stdio+0x3c>)
 8010f8a:	4299      	cmp	r1, r3
 8010f8c:	d004      	beq.n	8010f98 <cleanup_stdio+0x30>
 8010f8e:	4620      	mov	r0, r4
 8010f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f94:	f002 bdb2 	b.w	8013afc <_fflush_r>
 8010f98:	bd10      	pop	{r4, pc}
 8010f9a:	bf00      	nop
 8010f9c:	20002a6c 	.word	0x20002a6c
 8010fa0:	20002ad4 	.word	0x20002ad4
 8010fa4:	20002b3c 	.word	0x20002b3c

08010fa8 <global_stdio_init.part.0>:
 8010fa8:	b510      	push	{r4, lr}
 8010faa:	4b0b      	ldr	r3, [pc, #44]	@ (8010fd8 <global_stdio_init.part.0+0x30>)
 8010fac:	4c0b      	ldr	r4, [pc, #44]	@ (8010fdc <global_stdio_init.part.0+0x34>)
 8010fae:	4a0c      	ldr	r2, [pc, #48]	@ (8010fe0 <global_stdio_init.part.0+0x38>)
 8010fb0:	601a      	str	r2, [r3, #0]
 8010fb2:	4620      	mov	r0, r4
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	2104      	movs	r1, #4
 8010fb8:	f7ff ff94 	bl	8010ee4 <std>
 8010fbc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010fc0:	2201      	movs	r2, #1
 8010fc2:	2109      	movs	r1, #9
 8010fc4:	f7ff ff8e 	bl	8010ee4 <std>
 8010fc8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010fcc:	2202      	movs	r2, #2
 8010fce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010fd2:	2112      	movs	r1, #18
 8010fd4:	f7ff bf86 	b.w	8010ee4 <std>
 8010fd8:	20002ba4 	.word	0x20002ba4
 8010fdc:	20002a6c 	.word	0x20002a6c
 8010fe0:	08010f51 	.word	0x08010f51

08010fe4 <__sfp_lock_acquire>:
 8010fe4:	4801      	ldr	r0, [pc, #4]	@ (8010fec <__sfp_lock_acquire+0x8>)
 8010fe6:	f000 b920 	b.w	801122a <__retarget_lock_acquire_recursive>
 8010fea:	bf00      	nop
 8010fec:	20002bad 	.word	0x20002bad

08010ff0 <__sfp_lock_release>:
 8010ff0:	4801      	ldr	r0, [pc, #4]	@ (8010ff8 <__sfp_lock_release+0x8>)
 8010ff2:	f000 b91b 	b.w	801122c <__retarget_lock_release_recursive>
 8010ff6:	bf00      	nop
 8010ff8:	20002bad 	.word	0x20002bad

08010ffc <__sinit>:
 8010ffc:	b510      	push	{r4, lr}
 8010ffe:	4604      	mov	r4, r0
 8011000:	f7ff fff0 	bl	8010fe4 <__sfp_lock_acquire>
 8011004:	6a23      	ldr	r3, [r4, #32]
 8011006:	b11b      	cbz	r3, 8011010 <__sinit+0x14>
 8011008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801100c:	f7ff bff0 	b.w	8010ff0 <__sfp_lock_release>
 8011010:	4b04      	ldr	r3, [pc, #16]	@ (8011024 <__sinit+0x28>)
 8011012:	6223      	str	r3, [r4, #32]
 8011014:	4b04      	ldr	r3, [pc, #16]	@ (8011028 <__sinit+0x2c>)
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	2b00      	cmp	r3, #0
 801101a:	d1f5      	bne.n	8011008 <__sinit+0xc>
 801101c:	f7ff ffc4 	bl	8010fa8 <global_stdio_init.part.0>
 8011020:	e7f2      	b.n	8011008 <__sinit+0xc>
 8011022:	bf00      	nop
 8011024:	08010f69 	.word	0x08010f69
 8011028:	20002ba4 	.word	0x20002ba4

0801102c <_fwalk_sglue>:
 801102c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011030:	4607      	mov	r7, r0
 8011032:	4688      	mov	r8, r1
 8011034:	4614      	mov	r4, r2
 8011036:	2600      	movs	r6, #0
 8011038:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801103c:	f1b9 0901 	subs.w	r9, r9, #1
 8011040:	d505      	bpl.n	801104e <_fwalk_sglue+0x22>
 8011042:	6824      	ldr	r4, [r4, #0]
 8011044:	2c00      	cmp	r4, #0
 8011046:	d1f7      	bne.n	8011038 <_fwalk_sglue+0xc>
 8011048:	4630      	mov	r0, r6
 801104a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801104e:	89ab      	ldrh	r3, [r5, #12]
 8011050:	2b01      	cmp	r3, #1
 8011052:	d907      	bls.n	8011064 <_fwalk_sglue+0x38>
 8011054:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011058:	3301      	adds	r3, #1
 801105a:	d003      	beq.n	8011064 <_fwalk_sglue+0x38>
 801105c:	4629      	mov	r1, r5
 801105e:	4638      	mov	r0, r7
 8011060:	47c0      	blx	r8
 8011062:	4306      	orrs	r6, r0
 8011064:	3568      	adds	r5, #104	@ 0x68
 8011066:	e7e9      	b.n	801103c <_fwalk_sglue+0x10>

08011068 <siprintf>:
 8011068:	b40e      	push	{r1, r2, r3}
 801106a:	b500      	push	{lr}
 801106c:	b09c      	sub	sp, #112	@ 0x70
 801106e:	ab1d      	add	r3, sp, #116	@ 0x74
 8011070:	9002      	str	r0, [sp, #8]
 8011072:	9006      	str	r0, [sp, #24]
 8011074:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011078:	4809      	ldr	r0, [pc, #36]	@ (80110a0 <siprintf+0x38>)
 801107a:	9107      	str	r1, [sp, #28]
 801107c:	9104      	str	r1, [sp, #16]
 801107e:	4909      	ldr	r1, [pc, #36]	@ (80110a4 <siprintf+0x3c>)
 8011080:	f853 2b04 	ldr.w	r2, [r3], #4
 8011084:	9105      	str	r1, [sp, #20]
 8011086:	6800      	ldr	r0, [r0, #0]
 8011088:	9301      	str	r3, [sp, #4]
 801108a:	a902      	add	r1, sp, #8
 801108c:	f002 fbb6 	bl	80137fc <_svfiprintf_r>
 8011090:	9b02      	ldr	r3, [sp, #8]
 8011092:	2200      	movs	r2, #0
 8011094:	701a      	strb	r2, [r3, #0]
 8011096:	b01c      	add	sp, #112	@ 0x70
 8011098:	f85d eb04 	ldr.w	lr, [sp], #4
 801109c:	b003      	add	sp, #12
 801109e:	4770      	bx	lr
 80110a0:	20000198 	.word	0x20000198
 80110a4:	ffff0208 	.word	0xffff0208

080110a8 <__sread>:
 80110a8:	b510      	push	{r4, lr}
 80110aa:	460c      	mov	r4, r1
 80110ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80110b0:	f000 f86c 	bl	801118c <_read_r>
 80110b4:	2800      	cmp	r0, #0
 80110b6:	bfab      	itete	ge
 80110b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80110ba:	89a3      	ldrhlt	r3, [r4, #12]
 80110bc:	181b      	addge	r3, r3, r0
 80110be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80110c2:	bfac      	ite	ge
 80110c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80110c6:	81a3      	strhlt	r3, [r4, #12]
 80110c8:	bd10      	pop	{r4, pc}

080110ca <__swrite>:
 80110ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110ce:	461f      	mov	r7, r3
 80110d0:	898b      	ldrh	r3, [r1, #12]
 80110d2:	05db      	lsls	r3, r3, #23
 80110d4:	4605      	mov	r5, r0
 80110d6:	460c      	mov	r4, r1
 80110d8:	4616      	mov	r6, r2
 80110da:	d505      	bpl.n	80110e8 <__swrite+0x1e>
 80110dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80110e0:	2302      	movs	r3, #2
 80110e2:	2200      	movs	r2, #0
 80110e4:	f000 f840 	bl	8011168 <_lseek_r>
 80110e8:	89a3      	ldrh	r3, [r4, #12]
 80110ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80110ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80110f2:	81a3      	strh	r3, [r4, #12]
 80110f4:	4632      	mov	r2, r6
 80110f6:	463b      	mov	r3, r7
 80110f8:	4628      	mov	r0, r5
 80110fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80110fe:	f000 b857 	b.w	80111b0 <_write_r>

08011102 <__sseek>:
 8011102:	b510      	push	{r4, lr}
 8011104:	460c      	mov	r4, r1
 8011106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801110a:	f000 f82d 	bl	8011168 <_lseek_r>
 801110e:	1c43      	adds	r3, r0, #1
 8011110:	89a3      	ldrh	r3, [r4, #12]
 8011112:	bf15      	itete	ne
 8011114:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011116:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801111a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801111e:	81a3      	strheq	r3, [r4, #12]
 8011120:	bf18      	it	ne
 8011122:	81a3      	strhne	r3, [r4, #12]
 8011124:	bd10      	pop	{r4, pc}

08011126 <__sclose>:
 8011126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801112a:	f000 b80d 	b.w	8011148 <_close_r>

0801112e <memset>:
 801112e:	4402      	add	r2, r0
 8011130:	4603      	mov	r3, r0
 8011132:	4293      	cmp	r3, r2
 8011134:	d100      	bne.n	8011138 <memset+0xa>
 8011136:	4770      	bx	lr
 8011138:	f803 1b01 	strb.w	r1, [r3], #1
 801113c:	e7f9      	b.n	8011132 <memset+0x4>
	...

08011140 <_localeconv_r>:
 8011140:	4800      	ldr	r0, [pc, #0]	@ (8011144 <_localeconv_r+0x4>)
 8011142:	4770      	bx	lr
 8011144:	200002d8 	.word	0x200002d8

08011148 <_close_r>:
 8011148:	b538      	push	{r3, r4, r5, lr}
 801114a:	4d06      	ldr	r5, [pc, #24]	@ (8011164 <_close_r+0x1c>)
 801114c:	2300      	movs	r3, #0
 801114e:	4604      	mov	r4, r0
 8011150:	4608      	mov	r0, r1
 8011152:	602b      	str	r3, [r5, #0]
 8011154:	f7f2 f89a 	bl	800328c <_close>
 8011158:	1c43      	adds	r3, r0, #1
 801115a:	d102      	bne.n	8011162 <_close_r+0x1a>
 801115c:	682b      	ldr	r3, [r5, #0]
 801115e:	b103      	cbz	r3, 8011162 <_close_r+0x1a>
 8011160:	6023      	str	r3, [r4, #0]
 8011162:	bd38      	pop	{r3, r4, r5, pc}
 8011164:	20002ba8 	.word	0x20002ba8

08011168 <_lseek_r>:
 8011168:	b538      	push	{r3, r4, r5, lr}
 801116a:	4d07      	ldr	r5, [pc, #28]	@ (8011188 <_lseek_r+0x20>)
 801116c:	4604      	mov	r4, r0
 801116e:	4608      	mov	r0, r1
 8011170:	4611      	mov	r1, r2
 8011172:	2200      	movs	r2, #0
 8011174:	602a      	str	r2, [r5, #0]
 8011176:	461a      	mov	r2, r3
 8011178:	f7f2 f8af 	bl	80032da <_lseek>
 801117c:	1c43      	adds	r3, r0, #1
 801117e:	d102      	bne.n	8011186 <_lseek_r+0x1e>
 8011180:	682b      	ldr	r3, [r5, #0]
 8011182:	b103      	cbz	r3, 8011186 <_lseek_r+0x1e>
 8011184:	6023      	str	r3, [r4, #0]
 8011186:	bd38      	pop	{r3, r4, r5, pc}
 8011188:	20002ba8 	.word	0x20002ba8

0801118c <_read_r>:
 801118c:	b538      	push	{r3, r4, r5, lr}
 801118e:	4d07      	ldr	r5, [pc, #28]	@ (80111ac <_read_r+0x20>)
 8011190:	4604      	mov	r4, r0
 8011192:	4608      	mov	r0, r1
 8011194:	4611      	mov	r1, r2
 8011196:	2200      	movs	r2, #0
 8011198:	602a      	str	r2, [r5, #0]
 801119a:	461a      	mov	r2, r3
 801119c:	f7f2 f83d 	bl	800321a <_read>
 80111a0:	1c43      	adds	r3, r0, #1
 80111a2:	d102      	bne.n	80111aa <_read_r+0x1e>
 80111a4:	682b      	ldr	r3, [r5, #0]
 80111a6:	b103      	cbz	r3, 80111aa <_read_r+0x1e>
 80111a8:	6023      	str	r3, [r4, #0]
 80111aa:	bd38      	pop	{r3, r4, r5, pc}
 80111ac:	20002ba8 	.word	0x20002ba8

080111b0 <_write_r>:
 80111b0:	b538      	push	{r3, r4, r5, lr}
 80111b2:	4d07      	ldr	r5, [pc, #28]	@ (80111d0 <_write_r+0x20>)
 80111b4:	4604      	mov	r4, r0
 80111b6:	4608      	mov	r0, r1
 80111b8:	4611      	mov	r1, r2
 80111ba:	2200      	movs	r2, #0
 80111bc:	602a      	str	r2, [r5, #0]
 80111be:	461a      	mov	r2, r3
 80111c0:	f7f2 f848 	bl	8003254 <_write>
 80111c4:	1c43      	adds	r3, r0, #1
 80111c6:	d102      	bne.n	80111ce <_write_r+0x1e>
 80111c8:	682b      	ldr	r3, [r5, #0]
 80111ca:	b103      	cbz	r3, 80111ce <_write_r+0x1e>
 80111cc:	6023      	str	r3, [r4, #0]
 80111ce:	bd38      	pop	{r3, r4, r5, pc}
 80111d0:	20002ba8 	.word	0x20002ba8

080111d4 <__errno>:
 80111d4:	4b01      	ldr	r3, [pc, #4]	@ (80111dc <__errno+0x8>)
 80111d6:	6818      	ldr	r0, [r3, #0]
 80111d8:	4770      	bx	lr
 80111da:	bf00      	nop
 80111dc:	20000198 	.word	0x20000198

080111e0 <__libc_init_array>:
 80111e0:	b570      	push	{r4, r5, r6, lr}
 80111e2:	4d0d      	ldr	r5, [pc, #52]	@ (8011218 <__libc_init_array+0x38>)
 80111e4:	4c0d      	ldr	r4, [pc, #52]	@ (801121c <__libc_init_array+0x3c>)
 80111e6:	1b64      	subs	r4, r4, r5
 80111e8:	10a4      	asrs	r4, r4, #2
 80111ea:	2600      	movs	r6, #0
 80111ec:	42a6      	cmp	r6, r4
 80111ee:	d109      	bne.n	8011204 <__libc_init_array+0x24>
 80111f0:	4d0b      	ldr	r5, [pc, #44]	@ (8011220 <__libc_init_array+0x40>)
 80111f2:	4c0c      	ldr	r4, [pc, #48]	@ (8011224 <__libc_init_array+0x44>)
 80111f4:	f003 fb72 	bl	80148dc <_init>
 80111f8:	1b64      	subs	r4, r4, r5
 80111fa:	10a4      	asrs	r4, r4, #2
 80111fc:	2600      	movs	r6, #0
 80111fe:	42a6      	cmp	r6, r4
 8011200:	d105      	bne.n	801120e <__libc_init_array+0x2e>
 8011202:	bd70      	pop	{r4, r5, r6, pc}
 8011204:	f855 3b04 	ldr.w	r3, [r5], #4
 8011208:	4798      	blx	r3
 801120a:	3601      	adds	r6, #1
 801120c:	e7ee      	b.n	80111ec <__libc_init_array+0xc>
 801120e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011212:	4798      	blx	r3
 8011214:	3601      	adds	r6, #1
 8011216:	e7f2      	b.n	80111fe <__libc_init_array+0x1e>
 8011218:	08014e50 	.word	0x08014e50
 801121c:	08014e50 	.word	0x08014e50
 8011220:	08014e50 	.word	0x08014e50
 8011224:	08014e54 	.word	0x08014e54

08011228 <__retarget_lock_init_recursive>:
 8011228:	4770      	bx	lr

0801122a <__retarget_lock_acquire_recursive>:
 801122a:	4770      	bx	lr

0801122c <__retarget_lock_release_recursive>:
 801122c:	4770      	bx	lr
	...

08011230 <nanf>:
 8011230:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011238 <nanf+0x8>
 8011234:	4770      	bx	lr
 8011236:	bf00      	nop
 8011238:	7fc00000 	.word	0x7fc00000

0801123c <quorem>:
 801123c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011240:	6903      	ldr	r3, [r0, #16]
 8011242:	690c      	ldr	r4, [r1, #16]
 8011244:	42a3      	cmp	r3, r4
 8011246:	4607      	mov	r7, r0
 8011248:	db7e      	blt.n	8011348 <quorem+0x10c>
 801124a:	3c01      	subs	r4, #1
 801124c:	f101 0814 	add.w	r8, r1, #20
 8011250:	00a3      	lsls	r3, r4, #2
 8011252:	f100 0514 	add.w	r5, r0, #20
 8011256:	9300      	str	r3, [sp, #0]
 8011258:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801125c:	9301      	str	r3, [sp, #4]
 801125e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011262:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011266:	3301      	adds	r3, #1
 8011268:	429a      	cmp	r2, r3
 801126a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801126e:	fbb2 f6f3 	udiv	r6, r2, r3
 8011272:	d32e      	bcc.n	80112d2 <quorem+0x96>
 8011274:	f04f 0a00 	mov.w	sl, #0
 8011278:	46c4      	mov	ip, r8
 801127a:	46ae      	mov	lr, r5
 801127c:	46d3      	mov	fp, sl
 801127e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011282:	b298      	uxth	r0, r3
 8011284:	fb06 a000 	mla	r0, r6, r0, sl
 8011288:	0c02      	lsrs	r2, r0, #16
 801128a:	0c1b      	lsrs	r3, r3, #16
 801128c:	fb06 2303 	mla	r3, r6, r3, r2
 8011290:	f8de 2000 	ldr.w	r2, [lr]
 8011294:	b280      	uxth	r0, r0
 8011296:	b292      	uxth	r2, r2
 8011298:	1a12      	subs	r2, r2, r0
 801129a:	445a      	add	r2, fp
 801129c:	f8de 0000 	ldr.w	r0, [lr]
 80112a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80112a4:	b29b      	uxth	r3, r3
 80112a6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80112aa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80112ae:	b292      	uxth	r2, r2
 80112b0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80112b4:	45e1      	cmp	r9, ip
 80112b6:	f84e 2b04 	str.w	r2, [lr], #4
 80112ba:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80112be:	d2de      	bcs.n	801127e <quorem+0x42>
 80112c0:	9b00      	ldr	r3, [sp, #0]
 80112c2:	58eb      	ldr	r3, [r5, r3]
 80112c4:	b92b      	cbnz	r3, 80112d2 <quorem+0x96>
 80112c6:	9b01      	ldr	r3, [sp, #4]
 80112c8:	3b04      	subs	r3, #4
 80112ca:	429d      	cmp	r5, r3
 80112cc:	461a      	mov	r2, r3
 80112ce:	d32f      	bcc.n	8011330 <quorem+0xf4>
 80112d0:	613c      	str	r4, [r7, #16]
 80112d2:	4638      	mov	r0, r7
 80112d4:	f001 f9c4 	bl	8012660 <__mcmp>
 80112d8:	2800      	cmp	r0, #0
 80112da:	db25      	blt.n	8011328 <quorem+0xec>
 80112dc:	4629      	mov	r1, r5
 80112de:	2000      	movs	r0, #0
 80112e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80112e4:	f8d1 c000 	ldr.w	ip, [r1]
 80112e8:	fa1f fe82 	uxth.w	lr, r2
 80112ec:	fa1f f38c 	uxth.w	r3, ip
 80112f0:	eba3 030e 	sub.w	r3, r3, lr
 80112f4:	4403      	add	r3, r0
 80112f6:	0c12      	lsrs	r2, r2, #16
 80112f8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80112fc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011300:	b29b      	uxth	r3, r3
 8011302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011306:	45c1      	cmp	r9, r8
 8011308:	f841 3b04 	str.w	r3, [r1], #4
 801130c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011310:	d2e6      	bcs.n	80112e0 <quorem+0xa4>
 8011312:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011316:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801131a:	b922      	cbnz	r2, 8011326 <quorem+0xea>
 801131c:	3b04      	subs	r3, #4
 801131e:	429d      	cmp	r5, r3
 8011320:	461a      	mov	r2, r3
 8011322:	d30b      	bcc.n	801133c <quorem+0x100>
 8011324:	613c      	str	r4, [r7, #16]
 8011326:	3601      	adds	r6, #1
 8011328:	4630      	mov	r0, r6
 801132a:	b003      	add	sp, #12
 801132c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011330:	6812      	ldr	r2, [r2, #0]
 8011332:	3b04      	subs	r3, #4
 8011334:	2a00      	cmp	r2, #0
 8011336:	d1cb      	bne.n	80112d0 <quorem+0x94>
 8011338:	3c01      	subs	r4, #1
 801133a:	e7c6      	b.n	80112ca <quorem+0x8e>
 801133c:	6812      	ldr	r2, [r2, #0]
 801133e:	3b04      	subs	r3, #4
 8011340:	2a00      	cmp	r2, #0
 8011342:	d1ef      	bne.n	8011324 <quorem+0xe8>
 8011344:	3c01      	subs	r4, #1
 8011346:	e7ea      	b.n	801131e <quorem+0xe2>
 8011348:	2000      	movs	r0, #0
 801134a:	e7ee      	b.n	801132a <quorem+0xee>
 801134c:	0000      	movs	r0, r0
	...

08011350 <_dtoa_r>:
 8011350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011354:	69c7      	ldr	r7, [r0, #28]
 8011356:	b099      	sub	sp, #100	@ 0x64
 8011358:	ed8d 0b02 	vstr	d0, [sp, #8]
 801135c:	ec55 4b10 	vmov	r4, r5, d0
 8011360:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8011362:	9109      	str	r1, [sp, #36]	@ 0x24
 8011364:	4683      	mov	fp, r0
 8011366:	920e      	str	r2, [sp, #56]	@ 0x38
 8011368:	9313      	str	r3, [sp, #76]	@ 0x4c
 801136a:	b97f      	cbnz	r7, 801138c <_dtoa_r+0x3c>
 801136c:	2010      	movs	r0, #16
 801136e:	f000 fdfd 	bl	8011f6c <malloc>
 8011372:	4602      	mov	r2, r0
 8011374:	f8cb 001c 	str.w	r0, [fp, #28]
 8011378:	b920      	cbnz	r0, 8011384 <_dtoa_r+0x34>
 801137a:	4ba7      	ldr	r3, [pc, #668]	@ (8011618 <_dtoa_r+0x2c8>)
 801137c:	21ef      	movs	r1, #239	@ 0xef
 801137e:	48a7      	ldr	r0, [pc, #668]	@ (801161c <_dtoa_r+0x2cc>)
 8011380:	f002 fc36 	bl	8013bf0 <__assert_func>
 8011384:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011388:	6007      	str	r7, [r0, #0]
 801138a:	60c7      	str	r7, [r0, #12]
 801138c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011390:	6819      	ldr	r1, [r3, #0]
 8011392:	b159      	cbz	r1, 80113ac <_dtoa_r+0x5c>
 8011394:	685a      	ldr	r2, [r3, #4]
 8011396:	604a      	str	r2, [r1, #4]
 8011398:	2301      	movs	r3, #1
 801139a:	4093      	lsls	r3, r2
 801139c:	608b      	str	r3, [r1, #8]
 801139e:	4658      	mov	r0, fp
 80113a0:	f000 feda 	bl	8012158 <_Bfree>
 80113a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80113a8:	2200      	movs	r2, #0
 80113aa:	601a      	str	r2, [r3, #0]
 80113ac:	1e2b      	subs	r3, r5, #0
 80113ae:	bfb9      	ittee	lt
 80113b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80113b4:	9303      	strlt	r3, [sp, #12]
 80113b6:	2300      	movge	r3, #0
 80113b8:	6033      	strge	r3, [r6, #0]
 80113ba:	9f03      	ldr	r7, [sp, #12]
 80113bc:	4b98      	ldr	r3, [pc, #608]	@ (8011620 <_dtoa_r+0x2d0>)
 80113be:	bfbc      	itt	lt
 80113c0:	2201      	movlt	r2, #1
 80113c2:	6032      	strlt	r2, [r6, #0]
 80113c4:	43bb      	bics	r3, r7
 80113c6:	d112      	bne.n	80113ee <_dtoa_r+0x9e>
 80113c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80113ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 80113ce:	6013      	str	r3, [r2, #0]
 80113d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80113d4:	4323      	orrs	r3, r4
 80113d6:	f000 854d 	beq.w	8011e74 <_dtoa_r+0xb24>
 80113da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80113dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8011634 <_dtoa_r+0x2e4>
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	f000 854f 	beq.w	8011e84 <_dtoa_r+0xb34>
 80113e6:	f10a 0303 	add.w	r3, sl, #3
 80113ea:	f000 bd49 	b.w	8011e80 <_dtoa_r+0xb30>
 80113ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 80113f2:	2200      	movs	r2, #0
 80113f4:	ec51 0b17 	vmov	r0, r1, d7
 80113f8:	2300      	movs	r3, #0
 80113fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80113fe:	f7ef fb8b 	bl	8000b18 <__aeabi_dcmpeq>
 8011402:	4680      	mov	r8, r0
 8011404:	b158      	cbz	r0, 801141e <_dtoa_r+0xce>
 8011406:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011408:	2301      	movs	r3, #1
 801140a:	6013      	str	r3, [r2, #0]
 801140c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801140e:	b113      	cbz	r3, 8011416 <_dtoa_r+0xc6>
 8011410:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011412:	4b84      	ldr	r3, [pc, #528]	@ (8011624 <_dtoa_r+0x2d4>)
 8011414:	6013      	str	r3, [r2, #0]
 8011416:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8011638 <_dtoa_r+0x2e8>
 801141a:	f000 bd33 	b.w	8011e84 <_dtoa_r+0xb34>
 801141e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011422:	aa16      	add	r2, sp, #88	@ 0x58
 8011424:	a917      	add	r1, sp, #92	@ 0x5c
 8011426:	4658      	mov	r0, fp
 8011428:	f001 fa3a 	bl	80128a0 <__d2b>
 801142c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8011430:	4681      	mov	r9, r0
 8011432:	2e00      	cmp	r6, #0
 8011434:	d077      	beq.n	8011526 <_dtoa_r+0x1d6>
 8011436:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011438:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801143c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011440:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011444:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8011448:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801144c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8011450:	4619      	mov	r1, r3
 8011452:	2200      	movs	r2, #0
 8011454:	4b74      	ldr	r3, [pc, #464]	@ (8011628 <_dtoa_r+0x2d8>)
 8011456:	f7ee ff3f 	bl	80002d8 <__aeabi_dsub>
 801145a:	a369      	add	r3, pc, #420	@ (adr r3, 8011600 <_dtoa_r+0x2b0>)
 801145c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011460:	f7ef f8f2 	bl	8000648 <__aeabi_dmul>
 8011464:	a368      	add	r3, pc, #416	@ (adr r3, 8011608 <_dtoa_r+0x2b8>)
 8011466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801146a:	f7ee ff37 	bl	80002dc <__adddf3>
 801146e:	4604      	mov	r4, r0
 8011470:	4630      	mov	r0, r6
 8011472:	460d      	mov	r5, r1
 8011474:	f7ef f87e 	bl	8000574 <__aeabi_i2d>
 8011478:	a365      	add	r3, pc, #404	@ (adr r3, 8011610 <_dtoa_r+0x2c0>)
 801147a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801147e:	f7ef f8e3 	bl	8000648 <__aeabi_dmul>
 8011482:	4602      	mov	r2, r0
 8011484:	460b      	mov	r3, r1
 8011486:	4620      	mov	r0, r4
 8011488:	4629      	mov	r1, r5
 801148a:	f7ee ff27 	bl	80002dc <__adddf3>
 801148e:	4604      	mov	r4, r0
 8011490:	460d      	mov	r5, r1
 8011492:	f7ef fb89 	bl	8000ba8 <__aeabi_d2iz>
 8011496:	2200      	movs	r2, #0
 8011498:	4607      	mov	r7, r0
 801149a:	2300      	movs	r3, #0
 801149c:	4620      	mov	r0, r4
 801149e:	4629      	mov	r1, r5
 80114a0:	f7ef fb44 	bl	8000b2c <__aeabi_dcmplt>
 80114a4:	b140      	cbz	r0, 80114b8 <_dtoa_r+0x168>
 80114a6:	4638      	mov	r0, r7
 80114a8:	f7ef f864 	bl	8000574 <__aeabi_i2d>
 80114ac:	4622      	mov	r2, r4
 80114ae:	462b      	mov	r3, r5
 80114b0:	f7ef fb32 	bl	8000b18 <__aeabi_dcmpeq>
 80114b4:	b900      	cbnz	r0, 80114b8 <_dtoa_r+0x168>
 80114b6:	3f01      	subs	r7, #1
 80114b8:	2f16      	cmp	r7, #22
 80114ba:	d851      	bhi.n	8011560 <_dtoa_r+0x210>
 80114bc:	4b5b      	ldr	r3, [pc, #364]	@ (801162c <_dtoa_r+0x2dc>)
 80114be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80114c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80114ca:	f7ef fb2f 	bl	8000b2c <__aeabi_dcmplt>
 80114ce:	2800      	cmp	r0, #0
 80114d0:	d048      	beq.n	8011564 <_dtoa_r+0x214>
 80114d2:	3f01      	subs	r7, #1
 80114d4:	2300      	movs	r3, #0
 80114d6:	9312      	str	r3, [sp, #72]	@ 0x48
 80114d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80114da:	1b9b      	subs	r3, r3, r6
 80114dc:	1e5a      	subs	r2, r3, #1
 80114de:	bf44      	itt	mi
 80114e0:	f1c3 0801 	rsbmi	r8, r3, #1
 80114e4:	2300      	movmi	r3, #0
 80114e6:	9208      	str	r2, [sp, #32]
 80114e8:	bf54      	ite	pl
 80114ea:	f04f 0800 	movpl.w	r8, #0
 80114ee:	9308      	strmi	r3, [sp, #32]
 80114f0:	2f00      	cmp	r7, #0
 80114f2:	db39      	blt.n	8011568 <_dtoa_r+0x218>
 80114f4:	9b08      	ldr	r3, [sp, #32]
 80114f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80114f8:	443b      	add	r3, r7
 80114fa:	9308      	str	r3, [sp, #32]
 80114fc:	2300      	movs	r3, #0
 80114fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8011500:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011502:	2b09      	cmp	r3, #9
 8011504:	d864      	bhi.n	80115d0 <_dtoa_r+0x280>
 8011506:	2b05      	cmp	r3, #5
 8011508:	bfc4      	itt	gt
 801150a:	3b04      	subgt	r3, #4
 801150c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801150e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011510:	f1a3 0302 	sub.w	r3, r3, #2
 8011514:	bfcc      	ite	gt
 8011516:	2400      	movgt	r4, #0
 8011518:	2401      	movle	r4, #1
 801151a:	2b03      	cmp	r3, #3
 801151c:	d863      	bhi.n	80115e6 <_dtoa_r+0x296>
 801151e:	e8df f003 	tbb	[pc, r3]
 8011522:	372a      	.short	0x372a
 8011524:	5535      	.short	0x5535
 8011526:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801152a:	441e      	add	r6, r3
 801152c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011530:	2b20      	cmp	r3, #32
 8011532:	bfc1      	itttt	gt
 8011534:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011538:	409f      	lslgt	r7, r3
 801153a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801153e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8011542:	bfd6      	itet	le
 8011544:	f1c3 0320 	rsble	r3, r3, #32
 8011548:	ea47 0003 	orrgt.w	r0, r7, r3
 801154c:	fa04 f003 	lslle.w	r0, r4, r3
 8011550:	f7ef f800 	bl	8000554 <__aeabi_ui2d>
 8011554:	2201      	movs	r2, #1
 8011556:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801155a:	3e01      	subs	r6, #1
 801155c:	9214      	str	r2, [sp, #80]	@ 0x50
 801155e:	e777      	b.n	8011450 <_dtoa_r+0x100>
 8011560:	2301      	movs	r3, #1
 8011562:	e7b8      	b.n	80114d6 <_dtoa_r+0x186>
 8011564:	9012      	str	r0, [sp, #72]	@ 0x48
 8011566:	e7b7      	b.n	80114d8 <_dtoa_r+0x188>
 8011568:	427b      	negs	r3, r7
 801156a:	930a      	str	r3, [sp, #40]	@ 0x28
 801156c:	2300      	movs	r3, #0
 801156e:	eba8 0807 	sub.w	r8, r8, r7
 8011572:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011574:	e7c4      	b.n	8011500 <_dtoa_r+0x1b0>
 8011576:	2300      	movs	r3, #0
 8011578:	930b      	str	r3, [sp, #44]	@ 0x2c
 801157a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801157c:	2b00      	cmp	r3, #0
 801157e:	dc35      	bgt.n	80115ec <_dtoa_r+0x29c>
 8011580:	2301      	movs	r3, #1
 8011582:	9300      	str	r3, [sp, #0]
 8011584:	9307      	str	r3, [sp, #28]
 8011586:	461a      	mov	r2, r3
 8011588:	920e      	str	r2, [sp, #56]	@ 0x38
 801158a:	e00b      	b.n	80115a4 <_dtoa_r+0x254>
 801158c:	2301      	movs	r3, #1
 801158e:	e7f3      	b.n	8011578 <_dtoa_r+0x228>
 8011590:	2300      	movs	r3, #0
 8011592:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011594:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011596:	18fb      	adds	r3, r7, r3
 8011598:	9300      	str	r3, [sp, #0]
 801159a:	3301      	adds	r3, #1
 801159c:	2b01      	cmp	r3, #1
 801159e:	9307      	str	r3, [sp, #28]
 80115a0:	bfb8      	it	lt
 80115a2:	2301      	movlt	r3, #1
 80115a4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80115a8:	2100      	movs	r1, #0
 80115aa:	2204      	movs	r2, #4
 80115ac:	f102 0514 	add.w	r5, r2, #20
 80115b0:	429d      	cmp	r5, r3
 80115b2:	d91f      	bls.n	80115f4 <_dtoa_r+0x2a4>
 80115b4:	6041      	str	r1, [r0, #4]
 80115b6:	4658      	mov	r0, fp
 80115b8:	f000 fd8e 	bl	80120d8 <_Balloc>
 80115bc:	4682      	mov	sl, r0
 80115be:	2800      	cmp	r0, #0
 80115c0:	d13c      	bne.n	801163c <_dtoa_r+0x2ec>
 80115c2:	4b1b      	ldr	r3, [pc, #108]	@ (8011630 <_dtoa_r+0x2e0>)
 80115c4:	4602      	mov	r2, r0
 80115c6:	f240 11af 	movw	r1, #431	@ 0x1af
 80115ca:	e6d8      	b.n	801137e <_dtoa_r+0x2e>
 80115cc:	2301      	movs	r3, #1
 80115ce:	e7e0      	b.n	8011592 <_dtoa_r+0x242>
 80115d0:	2401      	movs	r4, #1
 80115d2:	2300      	movs	r3, #0
 80115d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80115d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80115d8:	f04f 33ff 	mov.w	r3, #4294967295
 80115dc:	9300      	str	r3, [sp, #0]
 80115de:	9307      	str	r3, [sp, #28]
 80115e0:	2200      	movs	r2, #0
 80115e2:	2312      	movs	r3, #18
 80115e4:	e7d0      	b.n	8011588 <_dtoa_r+0x238>
 80115e6:	2301      	movs	r3, #1
 80115e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80115ea:	e7f5      	b.n	80115d8 <_dtoa_r+0x288>
 80115ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80115ee:	9300      	str	r3, [sp, #0]
 80115f0:	9307      	str	r3, [sp, #28]
 80115f2:	e7d7      	b.n	80115a4 <_dtoa_r+0x254>
 80115f4:	3101      	adds	r1, #1
 80115f6:	0052      	lsls	r2, r2, #1
 80115f8:	e7d8      	b.n	80115ac <_dtoa_r+0x25c>
 80115fa:	bf00      	nop
 80115fc:	f3af 8000 	nop.w
 8011600:	636f4361 	.word	0x636f4361
 8011604:	3fd287a7 	.word	0x3fd287a7
 8011608:	8b60c8b3 	.word	0x8b60c8b3
 801160c:	3fc68a28 	.word	0x3fc68a28
 8011610:	509f79fb 	.word	0x509f79fb
 8011614:	3fd34413 	.word	0x3fd34413
 8011618:	08014a5e 	.word	0x08014a5e
 801161c:	08014a75 	.word	0x08014a75
 8011620:	7ff00000 	.word	0x7ff00000
 8011624:	08014a29 	.word	0x08014a29
 8011628:	3ff80000 	.word	0x3ff80000
 801162c:	08014b70 	.word	0x08014b70
 8011630:	08014acd 	.word	0x08014acd
 8011634:	08014a5a 	.word	0x08014a5a
 8011638:	08014a28 	.word	0x08014a28
 801163c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011640:	6018      	str	r0, [r3, #0]
 8011642:	9b07      	ldr	r3, [sp, #28]
 8011644:	2b0e      	cmp	r3, #14
 8011646:	f200 80a4 	bhi.w	8011792 <_dtoa_r+0x442>
 801164a:	2c00      	cmp	r4, #0
 801164c:	f000 80a1 	beq.w	8011792 <_dtoa_r+0x442>
 8011650:	2f00      	cmp	r7, #0
 8011652:	dd33      	ble.n	80116bc <_dtoa_r+0x36c>
 8011654:	4bad      	ldr	r3, [pc, #692]	@ (801190c <_dtoa_r+0x5bc>)
 8011656:	f007 020f 	and.w	r2, r7, #15
 801165a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801165e:	ed93 7b00 	vldr	d7, [r3]
 8011662:	05f8      	lsls	r0, r7, #23
 8011664:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011668:	ea4f 1427 	mov.w	r4, r7, asr #4
 801166c:	d516      	bpl.n	801169c <_dtoa_r+0x34c>
 801166e:	4ba8      	ldr	r3, [pc, #672]	@ (8011910 <_dtoa_r+0x5c0>)
 8011670:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011674:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011678:	f7ef f910 	bl	800089c <__aeabi_ddiv>
 801167c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011680:	f004 040f 	and.w	r4, r4, #15
 8011684:	2603      	movs	r6, #3
 8011686:	4da2      	ldr	r5, [pc, #648]	@ (8011910 <_dtoa_r+0x5c0>)
 8011688:	b954      	cbnz	r4, 80116a0 <_dtoa_r+0x350>
 801168a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801168e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011692:	f7ef f903 	bl	800089c <__aeabi_ddiv>
 8011696:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801169a:	e028      	b.n	80116ee <_dtoa_r+0x39e>
 801169c:	2602      	movs	r6, #2
 801169e:	e7f2      	b.n	8011686 <_dtoa_r+0x336>
 80116a0:	07e1      	lsls	r1, r4, #31
 80116a2:	d508      	bpl.n	80116b6 <_dtoa_r+0x366>
 80116a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80116a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80116ac:	f7ee ffcc 	bl	8000648 <__aeabi_dmul>
 80116b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80116b4:	3601      	adds	r6, #1
 80116b6:	1064      	asrs	r4, r4, #1
 80116b8:	3508      	adds	r5, #8
 80116ba:	e7e5      	b.n	8011688 <_dtoa_r+0x338>
 80116bc:	f000 80d2 	beq.w	8011864 <_dtoa_r+0x514>
 80116c0:	427c      	negs	r4, r7
 80116c2:	4b92      	ldr	r3, [pc, #584]	@ (801190c <_dtoa_r+0x5bc>)
 80116c4:	4d92      	ldr	r5, [pc, #584]	@ (8011910 <_dtoa_r+0x5c0>)
 80116c6:	f004 020f 	and.w	r2, r4, #15
 80116ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80116ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80116d6:	f7ee ffb7 	bl	8000648 <__aeabi_dmul>
 80116da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80116de:	1124      	asrs	r4, r4, #4
 80116e0:	2300      	movs	r3, #0
 80116e2:	2602      	movs	r6, #2
 80116e4:	2c00      	cmp	r4, #0
 80116e6:	f040 80b2 	bne.w	801184e <_dtoa_r+0x4fe>
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d1d3      	bne.n	8011696 <_dtoa_r+0x346>
 80116ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80116f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	f000 80b7 	beq.w	8011868 <_dtoa_r+0x518>
 80116fa:	4b86      	ldr	r3, [pc, #536]	@ (8011914 <_dtoa_r+0x5c4>)
 80116fc:	2200      	movs	r2, #0
 80116fe:	4620      	mov	r0, r4
 8011700:	4629      	mov	r1, r5
 8011702:	f7ef fa13 	bl	8000b2c <__aeabi_dcmplt>
 8011706:	2800      	cmp	r0, #0
 8011708:	f000 80ae 	beq.w	8011868 <_dtoa_r+0x518>
 801170c:	9b07      	ldr	r3, [sp, #28]
 801170e:	2b00      	cmp	r3, #0
 8011710:	f000 80aa 	beq.w	8011868 <_dtoa_r+0x518>
 8011714:	9b00      	ldr	r3, [sp, #0]
 8011716:	2b00      	cmp	r3, #0
 8011718:	dd37      	ble.n	801178a <_dtoa_r+0x43a>
 801171a:	1e7b      	subs	r3, r7, #1
 801171c:	9304      	str	r3, [sp, #16]
 801171e:	4620      	mov	r0, r4
 8011720:	4b7d      	ldr	r3, [pc, #500]	@ (8011918 <_dtoa_r+0x5c8>)
 8011722:	2200      	movs	r2, #0
 8011724:	4629      	mov	r1, r5
 8011726:	f7ee ff8f 	bl	8000648 <__aeabi_dmul>
 801172a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801172e:	9c00      	ldr	r4, [sp, #0]
 8011730:	3601      	adds	r6, #1
 8011732:	4630      	mov	r0, r6
 8011734:	f7ee ff1e 	bl	8000574 <__aeabi_i2d>
 8011738:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801173c:	f7ee ff84 	bl	8000648 <__aeabi_dmul>
 8011740:	4b76      	ldr	r3, [pc, #472]	@ (801191c <_dtoa_r+0x5cc>)
 8011742:	2200      	movs	r2, #0
 8011744:	f7ee fdca 	bl	80002dc <__adddf3>
 8011748:	4605      	mov	r5, r0
 801174a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801174e:	2c00      	cmp	r4, #0
 8011750:	f040 808d 	bne.w	801186e <_dtoa_r+0x51e>
 8011754:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011758:	4b71      	ldr	r3, [pc, #452]	@ (8011920 <_dtoa_r+0x5d0>)
 801175a:	2200      	movs	r2, #0
 801175c:	f7ee fdbc 	bl	80002d8 <__aeabi_dsub>
 8011760:	4602      	mov	r2, r0
 8011762:	460b      	mov	r3, r1
 8011764:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011768:	462a      	mov	r2, r5
 801176a:	4633      	mov	r3, r6
 801176c:	f7ef f9fc 	bl	8000b68 <__aeabi_dcmpgt>
 8011770:	2800      	cmp	r0, #0
 8011772:	f040 828b 	bne.w	8011c8c <_dtoa_r+0x93c>
 8011776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801177a:	462a      	mov	r2, r5
 801177c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011780:	f7ef f9d4 	bl	8000b2c <__aeabi_dcmplt>
 8011784:	2800      	cmp	r0, #0
 8011786:	f040 8128 	bne.w	80119da <_dtoa_r+0x68a>
 801178a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801178e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011792:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011794:	2b00      	cmp	r3, #0
 8011796:	f2c0 815a 	blt.w	8011a4e <_dtoa_r+0x6fe>
 801179a:	2f0e      	cmp	r7, #14
 801179c:	f300 8157 	bgt.w	8011a4e <_dtoa_r+0x6fe>
 80117a0:	4b5a      	ldr	r3, [pc, #360]	@ (801190c <_dtoa_r+0x5bc>)
 80117a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80117a6:	ed93 7b00 	vldr	d7, [r3]
 80117aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	ed8d 7b00 	vstr	d7, [sp]
 80117b2:	da03      	bge.n	80117bc <_dtoa_r+0x46c>
 80117b4:	9b07      	ldr	r3, [sp, #28]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	f340 8101 	ble.w	80119be <_dtoa_r+0x66e>
 80117bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80117c0:	4656      	mov	r6, sl
 80117c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80117c6:	4620      	mov	r0, r4
 80117c8:	4629      	mov	r1, r5
 80117ca:	f7ef f867 	bl	800089c <__aeabi_ddiv>
 80117ce:	f7ef f9eb 	bl	8000ba8 <__aeabi_d2iz>
 80117d2:	4680      	mov	r8, r0
 80117d4:	f7ee fece 	bl	8000574 <__aeabi_i2d>
 80117d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80117dc:	f7ee ff34 	bl	8000648 <__aeabi_dmul>
 80117e0:	4602      	mov	r2, r0
 80117e2:	460b      	mov	r3, r1
 80117e4:	4620      	mov	r0, r4
 80117e6:	4629      	mov	r1, r5
 80117e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80117ec:	f7ee fd74 	bl	80002d8 <__aeabi_dsub>
 80117f0:	f806 4b01 	strb.w	r4, [r6], #1
 80117f4:	9d07      	ldr	r5, [sp, #28]
 80117f6:	eba6 040a 	sub.w	r4, r6, sl
 80117fa:	42a5      	cmp	r5, r4
 80117fc:	4602      	mov	r2, r0
 80117fe:	460b      	mov	r3, r1
 8011800:	f040 8117 	bne.w	8011a32 <_dtoa_r+0x6e2>
 8011804:	f7ee fd6a 	bl	80002dc <__adddf3>
 8011808:	e9dd 2300 	ldrd	r2, r3, [sp]
 801180c:	4604      	mov	r4, r0
 801180e:	460d      	mov	r5, r1
 8011810:	f7ef f9aa 	bl	8000b68 <__aeabi_dcmpgt>
 8011814:	2800      	cmp	r0, #0
 8011816:	f040 80f9 	bne.w	8011a0c <_dtoa_r+0x6bc>
 801181a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801181e:	4620      	mov	r0, r4
 8011820:	4629      	mov	r1, r5
 8011822:	f7ef f979 	bl	8000b18 <__aeabi_dcmpeq>
 8011826:	b118      	cbz	r0, 8011830 <_dtoa_r+0x4e0>
 8011828:	f018 0f01 	tst.w	r8, #1
 801182c:	f040 80ee 	bne.w	8011a0c <_dtoa_r+0x6bc>
 8011830:	4649      	mov	r1, r9
 8011832:	4658      	mov	r0, fp
 8011834:	f000 fc90 	bl	8012158 <_Bfree>
 8011838:	2300      	movs	r3, #0
 801183a:	7033      	strb	r3, [r6, #0]
 801183c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801183e:	3701      	adds	r7, #1
 8011840:	601f      	str	r7, [r3, #0]
 8011842:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011844:	2b00      	cmp	r3, #0
 8011846:	f000 831d 	beq.w	8011e84 <_dtoa_r+0xb34>
 801184a:	601e      	str	r6, [r3, #0]
 801184c:	e31a      	b.n	8011e84 <_dtoa_r+0xb34>
 801184e:	07e2      	lsls	r2, r4, #31
 8011850:	d505      	bpl.n	801185e <_dtoa_r+0x50e>
 8011852:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011856:	f7ee fef7 	bl	8000648 <__aeabi_dmul>
 801185a:	3601      	adds	r6, #1
 801185c:	2301      	movs	r3, #1
 801185e:	1064      	asrs	r4, r4, #1
 8011860:	3508      	adds	r5, #8
 8011862:	e73f      	b.n	80116e4 <_dtoa_r+0x394>
 8011864:	2602      	movs	r6, #2
 8011866:	e742      	b.n	80116ee <_dtoa_r+0x39e>
 8011868:	9c07      	ldr	r4, [sp, #28]
 801186a:	9704      	str	r7, [sp, #16]
 801186c:	e761      	b.n	8011732 <_dtoa_r+0x3e2>
 801186e:	4b27      	ldr	r3, [pc, #156]	@ (801190c <_dtoa_r+0x5bc>)
 8011870:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011872:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011876:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801187a:	4454      	add	r4, sl
 801187c:	2900      	cmp	r1, #0
 801187e:	d053      	beq.n	8011928 <_dtoa_r+0x5d8>
 8011880:	4928      	ldr	r1, [pc, #160]	@ (8011924 <_dtoa_r+0x5d4>)
 8011882:	2000      	movs	r0, #0
 8011884:	f7ef f80a 	bl	800089c <__aeabi_ddiv>
 8011888:	4633      	mov	r3, r6
 801188a:	462a      	mov	r2, r5
 801188c:	f7ee fd24 	bl	80002d8 <__aeabi_dsub>
 8011890:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011894:	4656      	mov	r6, sl
 8011896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801189a:	f7ef f985 	bl	8000ba8 <__aeabi_d2iz>
 801189e:	4605      	mov	r5, r0
 80118a0:	f7ee fe68 	bl	8000574 <__aeabi_i2d>
 80118a4:	4602      	mov	r2, r0
 80118a6:	460b      	mov	r3, r1
 80118a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80118ac:	f7ee fd14 	bl	80002d8 <__aeabi_dsub>
 80118b0:	3530      	adds	r5, #48	@ 0x30
 80118b2:	4602      	mov	r2, r0
 80118b4:	460b      	mov	r3, r1
 80118b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80118ba:	f806 5b01 	strb.w	r5, [r6], #1
 80118be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80118c2:	f7ef f933 	bl	8000b2c <__aeabi_dcmplt>
 80118c6:	2800      	cmp	r0, #0
 80118c8:	d171      	bne.n	80119ae <_dtoa_r+0x65e>
 80118ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80118ce:	4911      	ldr	r1, [pc, #68]	@ (8011914 <_dtoa_r+0x5c4>)
 80118d0:	2000      	movs	r0, #0
 80118d2:	f7ee fd01 	bl	80002d8 <__aeabi_dsub>
 80118d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80118da:	f7ef f927 	bl	8000b2c <__aeabi_dcmplt>
 80118de:	2800      	cmp	r0, #0
 80118e0:	f040 8095 	bne.w	8011a0e <_dtoa_r+0x6be>
 80118e4:	42a6      	cmp	r6, r4
 80118e6:	f43f af50 	beq.w	801178a <_dtoa_r+0x43a>
 80118ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80118ee:	4b0a      	ldr	r3, [pc, #40]	@ (8011918 <_dtoa_r+0x5c8>)
 80118f0:	2200      	movs	r2, #0
 80118f2:	f7ee fea9 	bl	8000648 <__aeabi_dmul>
 80118f6:	4b08      	ldr	r3, [pc, #32]	@ (8011918 <_dtoa_r+0x5c8>)
 80118f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80118fc:	2200      	movs	r2, #0
 80118fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011902:	f7ee fea1 	bl	8000648 <__aeabi_dmul>
 8011906:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801190a:	e7c4      	b.n	8011896 <_dtoa_r+0x546>
 801190c:	08014b70 	.word	0x08014b70
 8011910:	08014b48 	.word	0x08014b48
 8011914:	3ff00000 	.word	0x3ff00000
 8011918:	40240000 	.word	0x40240000
 801191c:	401c0000 	.word	0x401c0000
 8011920:	40140000 	.word	0x40140000
 8011924:	3fe00000 	.word	0x3fe00000
 8011928:	4631      	mov	r1, r6
 801192a:	4628      	mov	r0, r5
 801192c:	f7ee fe8c 	bl	8000648 <__aeabi_dmul>
 8011930:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011934:	9415      	str	r4, [sp, #84]	@ 0x54
 8011936:	4656      	mov	r6, sl
 8011938:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801193c:	f7ef f934 	bl	8000ba8 <__aeabi_d2iz>
 8011940:	4605      	mov	r5, r0
 8011942:	f7ee fe17 	bl	8000574 <__aeabi_i2d>
 8011946:	4602      	mov	r2, r0
 8011948:	460b      	mov	r3, r1
 801194a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801194e:	f7ee fcc3 	bl	80002d8 <__aeabi_dsub>
 8011952:	3530      	adds	r5, #48	@ 0x30
 8011954:	f806 5b01 	strb.w	r5, [r6], #1
 8011958:	4602      	mov	r2, r0
 801195a:	460b      	mov	r3, r1
 801195c:	42a6      	cmp	r6, r4
 801195e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011962:	f04f 0200 	mov.w	r2, #0
 8011966:	d124      	bne.n	80119b2 <_dtoa_r+0x662>
 8011968:	4bac      	ldr	r3, [pc, #688]	@ (8011c1c <_dtoa_r+0x8cc>)
 801196a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801196e:	f7ee fcb5 	bl	80002dc <__adddf3>
 8011972:	4602      	mov	r2, r0
 8011974:	460b      	mov	r3, r1
 8011976:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801197a:	f7ef f8f5 	bl	8000b68 <__aeabi_dcmpgt>
 801197e:	2800      	cmp	r0, #0
 8011980:	d145      	bne.n	8011a0e <_dtoa_r+0x6be>
 8011982:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011986:	49a5      	ldr	r1, [pc, #660]	@ (8011c1c <_dtoa_r+0x8cc>)
 8011988:	2000      	movs	r0, #0
 801198a:	f7ee fca5 	bl	80002d8 <__aeabi_dsub>
 801198e:	4602      	mov	r2, r0
 8011990:	460b      	mov	r3, r1
 8011992:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011996:	f7ef f8c9 	bl	8000b2c <__aeabi_dcmplt>
 801199a:	2800      	cmp	r0, #0
 801199c:	f43f aef5 	beq.w	801178a <_dtoa_r+0x43a>
 80119a0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80119a2:	1e73      	subs	r3, r6, #1
 80119a4:	9315      	str	r3, [sp, #84]	@ 0x54
 80119a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80119aa:	2b30      	cmp	r3, #48	@ 0x30
 80119ac:	d0f8      	beq.n	80119a0 <_dtoa_r+0x650>
 80119ae:	9f04      	ldr	r7, [sp, #16]
 80119b0:	e73e      	b.n	8011830 <_dtoa_r+0x4e0>
 80119b2:	4b9b      	ldr	r3, [pc, #620]	@ (8011c20 <_dtoa_r+0x8d0>)
 80119b4:	f7ee fe48 	bl	8000648 <__aeabi_dmul>
 80119b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80119bc:	e7bc      	b.n	8011938 <_dtoa_r+0x5e8>
 80119be:	d10c      	bne.n	80119da <_dtoa_r+0x68a>
 80119c0:	4b98      	ldr	r3, [pc, #608]	@ (8011c24 <_dtoa_r+0x8d4>)
 80119c2:	2200      	movs	r2, #0
 80119c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80119c8:	f7ee fe3e 	bl	8000648 <__aeabi_dmul>
 80119cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80119d0:	f7ef f8c0 	bl	8000b54 <__aeabi_dcmpge>
 80119d4:	2800      	cmp	r0, #0
 80119d6:	f000 8157 	beq.w	8011c88 <_dtoa_r+0x938>
 80119da:	2400      	movs	r4, #0
 80119dc:	4625      	mov	r5, r4
 80119de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80119e0:	43db      	mvns	r3, r3
 80119e2:	9304      	str	r3, [sp, #16]
 80119e4:	4656      	mov	r6, sl
 80119e6:	2700      	movs	r7, #0
 80119e8:	4621      	mov	r1, r4
 80119ea:	4658      	mov	r0, fp
 80119ec:	f000 fbb4 	bl	8012158 <_Bfree>
 80119f0:	2d00      	cmp	r5, #0
 80119f2:	d0dc      	beq.n	80119ae <_dtoa_r+0x65e>
 80119f4:	b12f      	cbz	r7, 8011a02 <_dtoa_r+0x6b2>
 80119f6:	42af      	cmp	r7, r5
 80119f8:	d003      	beq.n	8011a02 <_dtoa_r+0x6b2>
 80119fa:	4639      	mov	r1, r7
 80119fc:	4658      	mov	r0, fp
 80119fe:	f000 fbab 	bl	8012158 <_Bfree>
 8011a02:	4629      	mov	r1, r5
 8011a04:	4658      	mov	r0, fp
 8011a06:	f000 fba7 	bl	8012158 <_Bfree>
 8011a0a:	e7d0      	b.n	80119ae <_dtoa_r+0x65e>
 8011a0c:	9704      	str	r7, [sp, #16]
 8011a0e:	4633      	mov	r3, r6
 8011a10:	461e      	mov	r6, r3
 8011a12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011a16:	2a39      	cmp	r2, #57	@ 0x39
 8011a18:	d107      	bne.n	8011a2a <_dtoa_r+0x6da>
 8011a1a:	459a      	cmp	sl, r3
 8011a1c:	d1f8      	bne.n	8011a10 <_dtoa_r+0x6c0>
 8011a1e:	9a04      	ldr	r2, [sp, #16]
 8011a20:	3201      	adds	r2, #1
 8011a22:	9204      	str	r2, [sp, #16]
 8011a24:	2230      	movs	r2, #48	@ 0x30
 8011a26:	f88a 2000 	strb.w	r2, [sl]
 8011a2a:	781a      	ldrb	r2, [r3, #0]
 8011a2c:	3201      	adds	r2, #1
 8011a2e:	701a      	strb	r2, [r3, #0]
 8011a30:	e7bd      	b.n	80119ae <_dtoa_r+0x65e>
 8011a32:	4b7b      	ldr	r3, [pc, #492]	@ (8011c20 <_dtoa_r+0x8d0>)
 8011a34:	2200      	movs	r2, #0
 8011a36:	f7ee fe07 	bl	8000648 <__aeabi_dmul>
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	4604      	mov	r4, r0
 8011a40:	460d      	mov	r5, r1
 8011a42:	f7ef f869 	bl	8000b18 <__aeabi_dcmpeq>
 8011a46:	2800      	cmp	r0, #0
 8011a48:	f43f aebb 	beq.w	80117c2 <_dtoa_r+0x472>
 8011a4c:	e6f0      	b.n	8011830 <_dtoa_r+0x4e0>
 8011a4e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011a50:	2a00      	cmp	r2, #0
 8011a52:	f000 80db 	beq.w	8011c0c <_dtoa_r+0x8bc>
 8011a56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011a58:	2a01      	cmp	r2, #1
 8011a5a:	f300 80bf 	bgt.w	8011bdc <_dtoa_r+0x88c>
 8011a5e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011a60:	2a00      	cmp	r2, #0
 8011a62:	f000 80b7 	beq.w	8011bd4 <_dtoa_r+0x884>
 8011a66:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011a6a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011a6c:	4646      	mov	r6, r8
 8011a6e:	9a08      	ldr	r2, [sp, #32]
 8011a70:	2101      	movs	r1, #1
 8011a72:	441a      	add	r2, r3
 8011a74:	4658      	mov	r0, fp
 8011a76:	4498      	add	r8, r3
 8011a78:	9208      	str	r2, [sp, #32]
 8011a7a:	f000 fc6b 	bl	8012354 <__i2b>
 8011a7e:	4605      	mov	r5, r0
 8011a80:	b15e      	cbz	r6, 8011a9a <_dtoa_r+0x74a>
 8011a82:	9b08      	ldr	r3, [sp, #32]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	dd08      	ble.n	8011a9a <_dtoa_r+0x74a>
 8011a88:	42b3      	cmp	r3, r6
 8011a8a:	9a08      	ldr	r2, [sp, #32]
 8011a8c:	bfa8      	it	ge
 8011a8e:	4633      	movge	r3, r6
 8011a90:	eba8 0803 	sub.w	r8, r8, r3
 8011a94:	1af6      	subs	r6, r6, r3
 8011a96:	1ad3      	subs	r3, r2, r3
 8011a98:	9308      	str	r3, [sp, #32]
 8011a9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011a9c:	b1f3      	cbz	r3, 8011adc <_dtoa_r+0x78c>
 8011a9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	f000 80b7 	beq.w	8011c14 <_dtoa_r+0x8c4>
 8011aa6:	b18c      	cbz	r4, 8011acc <_dtoa_r+0x77c>
 8011aa8:	4629      	mov	r1, r5
 8011aaa:	4622      	mov	r2, r4
 8011aac:	4658      	mov	r0, fp
 8011aae:	f000 fd11 	bl	80124d4 <__pow5mult>
 8011ab2:	464a      	mov	r2, r9
 8011ab4:	4601      	mov	r1, r0
 8011ab6:	4605      	mov	r5, r0
 8011ab8:	4658      	mov	r0, fp
 8011aba:	f000 fc61 	bl	8012380 <__multiply>
 8011abe:	4649      	mov	r1, r9
 8011ac0:	9004      	str	r0, [sp, #16]
 8011ac2:	4658      	mov	r0, fp
 8011ac4:	f000 fb48 	bl	8012158 <_Bfree>
 8011ac8:	9b04      	ldr	r3, [sp, #16]
 8011aca:	4699      	mov	r9, r3
 8011acc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011ace:	1b1a      	subs	r2, r3, r4
 8011ad0:	d004      	beq.n	8011adc <_dtoa_r+0x78c>
 8011ad2:	4649      	mov	r1, r9
 8011ad4:	4658      	mov	r0, fp
 8011ad6:	f000 fcfd 	bl	80124d4 <__pow5mult>
 8011ada:	4681      	mov	r9, r0
 8011adc:	2101      	movs	r1, #1
 8011ade:	4658      	mov	r0, fp
 8011ae0:	f000 fc38 	bl	8012354 <__i2b>
 8011ae4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011ae6:	4604      	mov	r4, r0
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	f000 81cf 	beq.w	8011e8c <_dtoa_r+0xb3c>
 8011aee:	461a      	mov	r2, r3
 8011af0:	4601      	mov	r1, r0
 8011af2:	4658      	mov	r0, fp
 8011af4:	f000 fcee 	bl	80124d4 <__pow5mult>
 8011af8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011afa:	2b01      	cmp	r3, #1
 8011afc:	4604      	mov	r4, r0
 8011afe:	f300 8095 	bgt.w	8011c2c <_dtoa_r+0x8dc>
 8011b02:	9b02      	ldr	r3, [sp, #8]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	f040 8087 	bne.w	8011c18 <_dtoa_r+0x8c8>
 8011b0a:	9b03      	ldr	r3, [sp, #12]
 8011b0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	f040 8089 	bne.w	8011c28 <_dtoa_r+0x8d8>
 8011b16:	9b03      	ldr	r3, [sp, #12]
 8011b18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011b1c:	0d1b      	lsrs	r3, r3, #20
 8011b1e:	051b      	lsls	r3, r3, #20
 8011b20:	b12b      	cbz	r3, 8011b2e <_dtoa_r+0x7de>
 8011b22:	9b08      	ldr	r3, [sp, #32]
 8011b24:	3301      	adds	r3, #1
 8011b26:	9308      	str	r3, [sp, #32]
 8011b28:	f108 0801 	add.w	r8, r8, #1
 8011b2c:	2301      	movs	r3, #1
 8011b2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011b30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	f000 81b0 	beq.w	8011e98 <_dtoa_r+0xb48>
 8011b38:	6923      	ldr	r3, [r4, #16]
 8011b3a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011b3e:	6918      	ldr	r0, [r3, #16]
 8011b40:	f000 fbbc 	bl	80122bc <__hi0bits>
 8011b44:	f1c0 0020 	rsb	r0, r0, #32
 8011b48:	9b08      	ldr	r3, [sp, #32]
 8011b4a:	4418      	add	r0, r3
 8011b4c:	f010 001f 	ands.w	r0, r0, #31
 8011b50:	d077      	beq.n	8011c42 <_dtoa_r+0x8f2>
 8011b52:	f1c0 0320 	rsb	r3, r0, #32
 8011b56:	2b04      	cmp	r3, #4
 8011b58:	dd6b      	ble.n	8011c32 <_dtoa_r+0x8e2>
 8011b5a:	9b08      	ldr	r3, [sp, #32]
 8011b5c:	f1c0 001c 	rsb	r0, r0, #28
 8011b60:	4403      	add	r3, r0
 8011b62:	4480      	add	r8, r0
 8011b64:	4406      	add	r6, r0
 8011b66:	9308      	str	r3, [sp, #32]
 8011b68:	f1b8 0f00 	cmp.w	r8, #0
 8011b6c:	dd05      	ble.n	8011b7a <_dtoa_r+0x82a>
 8011b6e:	4649      	mov	r1, r9
 8011b70:	4642      	mov	r2, r8
 8011b72:	4658      	mov	r0, fp
 8011b74:	f000 fd08 	bl	8012588 <__lshift>
 8011b78:	4681      	mov	r9, r0
 8011b7a:	9b08      	ldr	r3, [sp, #32]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	dd05      	ble.n	8011b8c <_dtoa_r+0x83c>
 8011b80:	4621      	mov	r1, r4
 8011b82:	461a      	mov	r2, r3
 8011b84:	4658      	mov	r0, fp
 8011b86:	f000 fcff 	bl	8012588 <__lshift>
 8011b8a:	4604      	mov	r4, r0
 8011b8c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d059      	beq.n	8011c46 <_dtoa_r+0x8f6>
 8011b92:	4621      	mov	r1, r4
 8011b94:	4648      	mov	r0, r9
 8011b96:	f000 fd63 	bl	8012660 <__mcmp>
 8011b9a:	2800      	cmp	r0, #0
 8011b9c:	da53      	bge.n	8011c46 <_dtoa_r+0x8f6>
 8011b9e:	1e7b      	subs	r3, r7, #1
 8011ba0:	9304      	str	r3, [sp, #16]
 8011ba2:	4649      	mov	r1, r9
 8011ba4:	2300      	movs	r3, #0
 8011ba6:	220a      	movs	r2, #10
 8011ba8:	4658      	mov	r0, fp
 8011baa:	f000 faf7 	bl	801219c <__multadd>
 8011bae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011bb0:	4681      	mov	r9, r0
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	f000 8172 	beq.w	8011e9c <_dtoa_r+0xb4c>
 8011bb8:	2300      	movs	r3, #0
 8011bba:	4629      	mov	r1, r5
 8011bbc:	220a      	movs	r2, #10
 8011bbe:	4658      	mov	r0, fp
 8011bc0:	f000 faec 	bl	801219c <__multadd>
 8011bc4:	9b00      	ldr	r3, [sp, #0]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	4605      	mov	r5, r0
 8011bca:	dc67      	bgt.n	8011c9c <_dtoa_r+0x94c>
 8011bcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011bce:	2b02      	cmp	r3, #2
 8011bd0:	dc41      	bgt.n	8011c56 <_dtoa_r+0x906>
 8011bd2:	e063      	b.n	8011c9c <_dtoa_r+0x94c>
 8011bd4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011bd6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8011bda:	e746      	b.n	8011a6a <_dtoa_r+0x71a>
 8011bdc:	9b07      	ldr	r3, [sp, #28]
 8011bde:	1e5c      	subs	r4, r3, #1
 8011be0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011be2:	42a3      	cmp	r3, r4
 8011be4:	bfbf      	itttt	lt
 8011be6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011be8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8011bea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8011bec:	1ae3      	sublt	r3, r4, r3
 8011bee:	bfb4      	ite	lt
 8011bf0:	18d2      	addlt	r2, r2, r3
 8011bf2:	1b1c      	subge	r4, r3, r4
 8011bf4:	9b07      	ldr	r3, [sp, #28]
 8011bf6:	bfbc      	itt	lt
 8011bf8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8011bfa:	2400      	movlt	r4, #0
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	bfb5      	itete	lt
 8011c00:	eba8 0603 	sublt.w	r6, r8, r3
 8011c04:	9b07      	ldrge	r3, [sp, #28]
 8011c06:	2300      	movlt	r3, #0
 8011c08:	4646      	movge	r6, r8
 8011c0a:	e730      	b.n	8011a6e <_dtoa_r+0x71e>
 8011c0c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011c0e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8011c10:	4646      	mov	r6, r8
 8011c12:	e735      	b.n	8011a80 <_dtoa_r+0x730>
 8011c14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011c16:	e75c      	b.n	8011ad2 <_dtoa_r+0x782>
 8011c18:	2300      	movs	r3, #0
 8011c1a:	e788      	b.n	8011b2e <_dtoa_r+0x7de>
 8011c1c:	3fe00000 	.word	0x3fe00000
 8011c20:	40240000 	.word	0x40240000
 8011c24:	40140000 	.word	0x40140000
 8011c28:	9b02      	ldr	r3, [sp, #8]
 8011c2a:	e780      	b.n	8011b2e <_dtoa_r+0x7de>
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011c30:	e782      	b.n	8011b38 <_dtoa_r+0x7e8>
 8011c32:	d099      	beq.n	8011b68 <_dtoa_r+0x818>
 8011c34:	9a08      	ldr	r2, [sp, #32]
 8011c36:	331c      	adds	r3, #28
 8011c38:	441a      	add	r2, r3
 8011c3a:	4498      	add	r8, r3
 8011c3c:	441e      	add	r6, r3
 8011c3e:	9208      	str	r2, [sp, #32]
 8011c40:	e792      	b.n	8011b68 <_dtoa_r+0x818>
 8011c42:	4603      	mov	r3, r0
 8011c44:	e7f6      	b.n	8011c34 <_dtoa_r+0x8e4>
 8011c46:	9b07      	ldr	r3, [sp, #28]
 8011c48:	9704      	str	r7, [sp, #16]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	dc20      	bgt.n	8011c90 <_dtoa_r+0x940>
 8011c4e:	9300      	str	r3, [sp, #0]
 8011c50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c52:	2b02      	cmp	r3, #2
 8011c54:	dd1e      	ble.n	8011c94 <_dtoa_r+0x944>
 8011c56:	9b00      	ldr	r3, [sp, #0]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	f47f aec0 	bne.w	80119de <_dtoa_r+0x68e>
 8011c5e:	4621      	mov	r1, r4
 8011c60:	2205      	movs	r2, #5
 8011c62:	4658      	mov	r0, fp
 8011c64:	f000 fa9a 	bl	801219c <__multadd>
 8011c68:	4601      	mov	r1, r0
 8011c6a:	4604      	mov	r4, r0
 8011c6c:	4648      	mov	r0, r9
 8011c6e:	f000 fcf7 	bl	8012660 <__mcmp>
 8011c72:	2800      	cmp	r0, #0
 8011c74:	f77f aeb3 	ble.w	80119de <_dtoa_r+0x68e>
 8011c78:	4656      	mov	r6, sl
 8011c7a:	2331      	movs	r3, #49	@ 0x31
 8011c7c:	f806 3b01 	strb.w	r3, [r6], #1
 8011c80:	9b04      	ldr	r3, [sp, #16]
 8011c82:	3301      	adds	r3, #1
 8011c84:	9304      	str	r3, [sp, #16]
 8011c86:	e6ae      	b.n	80119e6 <_dtoa_r+0x696>
 8011c88:	9c07      	ldr	r4, [sp, #28]
 8011c8a:	9704      	str	r7, [sp, #16]
 8011c8c:	4625      	mov	r5, r4
 8011c8e:	e7f3      	b.n	8011c78 <_dtoa_r+0x928>
 8011c90:	9b07      	ldr	r3, [sp, #28]
 8011c92:	9300      	str	r3, [sp, #0]
 8011c94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	f000 8104 	beq.w	8011ea4 <_dtoa_r+0xb54>
 8011c9c:	2e00      	cmp	r6, #0
 8011c9e:	dd05      	ble.n	8011cac <_dtoa_r+0x95c>
 8011ca0:	4629      	mov	r1, r5
 8011ca2:	4632      	mov	r2, r6
 8011ca4:	4658      	mov	r0, fp
 8011ca6:	f000 fc6f 	bl	8012588 <__lshift>
 8011caa:	4605      	mov	r5, r0
 8011cac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d05a      	beq.n	8011d68 <_dtoa_r+0xa18>
 8011cb2:	6869      	ldr	r1, [r5, #4]
 8011cb4:	4658      	mov	r0, fp
 8011cb6:	f000 fa0f 	bl	80120d8 <_Balloc>
 8011cba:	4606      	mov	r6, r0
 8011cbc:	b928      	cbnz	r0, 8011cca <_dtoa_r+0x97a>
 8011cbe:	4b84      	ldr	r3, [pc, #528]	@ (8011ed0 <_dtoa_r+0xb80>)
 8011cc0:	4602      	mov	r2, r0
 8011cc2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011cc6:	f7ff bb5a 	b.w	801137e <_dtoa_r+0x2e>
 8011cca:	692a      	ldr	r2, [r5, #16]
 8011ccc:	3202      	adds	r2, #2
 8011cce:	0092      	lsls	r2, r2, #2
 8011cd0:	f105 010c 	add.w	r1, r5, #12
 8011cd4:	300c      	adds	r0, #12
 8011cd6:	f001 ff75 	bl	8013bc4 <memcpy>
 8011cda:	2201      	movs	r2, #1
 8011cdc:	4631      	mov	r1, r6
 8011cde:	4658      	mov	r0, fp
 8011ce0:	f000 fc52 	bl	8012588 <__lshift>
 8011ce4:	f10a 0301 	add.w	r3, sl, #1
 8011ce8:	9307      	str	r3, [sp, #28]
 8011cea:	9b00      	ldr	r3, [sp, #0]
 8011cec:	4453      	add	r3, sl
 8011cee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011cf0:	9b02      	ldr	r3, [sp, #8]
 8011cf2:	f003 0301 	and.w	r3, r3, #1
 8011cf6:	462f      	mov	r7, r5
 8011cf8:	930a      	str	r3, [sp, #40]	@ 0x28
 8011cfa:	4605      	mov	r5, r0
 8011cfc:	9b07      	ldr	r3, [sp, #28]
 8011cfe:	4621      	mov	r1, r4
 8011d00:	3b01      	subs	r3, #1
 8011d02:	4648      	mov	r0, r9
 8011d04:	9300      	str	r3, [sp, #0]
 8011d06:	f7ff fa99 	bl	801123c <quorem>
 8011d0a:	4639      	mov	r1, r7
 8011d0c:	9002      	str	r0, [sp, #8]
 8011d0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011d12:	4648      	mov	r0, r9
 8011d14:	f000 fca4 	bl	8012660 <__mcmp>
 8011d18:	462a      	mov	r2, r5
 8011d1a:	9008      	str	r0, [sp, #32]
 8011d1c:	4621      	mov	r1, r4
 8011d1e:	4658      	mov	r0, fp
 8011d20:	f000 fcba 	bl	8012698 <__mdiff>
 8011d24:	68c2      	ldr	r2, [r0, #12]
 8011d26:	4606      	mov	r6, r0
 8011d28:	bb02      	cbnz	r2, 8011d6c <_dtoa_r+0xa1c>
 8011d2a:	4601      	mov	r1, r0
 8011d2c:	4648      	mov	r0, r9
 8011d2e:	f000 fc97 	bl	8012660 <__mcmp>
 8011d32:	4602      	mov	r2, r0
 8011d34:	4631      	mov	r1, r6
 8011d36:	4658      	mov	r0, fp
 8011d38:	920e      	str	r2, [sp, #56]	@ 0x38
 8011d3a:	f000 fa0d 	bl	8012158 <_Bfree>
 8011d3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011d42:	9e07      	ldr	r6, [sp, #28]
 8011d44:	ea43 0102 	orr.w	r1, r3, r2
 8011d48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011d4a:	4319      	orrs	r1, r3
 8011d4c:	d110      	bne.n	8011d70 <_dtoa_r+0xa20>
 8011d4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011d52:	d029      	beq.n	8011da8 <_dtoa_r+0xa58>
 8011d54:	9b08      	ldr	r3, [sp, #32]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	dd02      	ble.n	8011d60 <_dtoa_r+0xa10>
 8011d5a:	9b02      	ldr	r3, [sp, #8]
 8011d5c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8011d60:	9b00      	ldr	r3, [sp, #0]
 8011d62:	f883 8000 	strb.w	r8, [r3]
 8011d66:	e63f      	b.n	80119e8 <_dtoa_r+0x698>
 8011d68:	4628      	mov	r0, r5
 8011d6a:	e7bb      	b.n	8011ce4 <_dtoa_r+0x994>
 8011d6c:	2201      	movs	r2, #1
 8011d6e:	e7e1      	b.n	8011d34 <_dtoa_r+0x9e4>
 8011d70:	9b08      	ldr	r3, [sp, #32]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	db04      	blt.n	8011d80 <_dtoa_r+0xa30>
 8011d76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011d78:	430b      	orrs	r3, r1
 8011d7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011d7c:	430b      	orrs	r3, r1
 8011d7e:	d120      	bne.n	8011dc2 <_dtoa_r+0xa72>
 8011d80:	2a00      	cmp	r2, #0
 8011d82:	dded      	ble.n	8011d60 <_dtoa_r+0xa10>
 8011d84:	4649      	mov	r1, r9
 8011d86:	2201      	movs	r2, #1
 8011d88:	4658      	mov	r0, fp
 8011d8a:	f000 fbfd 	bl	8012588 <__lshift>
 8011d8e:	4621      	mov	r1, r4
 8011d90:	4681      	mov	r9, r0
 8011d92:	f000 fc65 	bl	8012660 <__mcmp>
 8011d96:	2800      	cmp	r0, #0
 8011d98:	dc03      	bgt.n	8011da2 <_dtoa_r+0xa52>
 8011d9a:	d1e1      	bne.n	8011d60 <_dtoa_r+0xa10>
 8011d9c:	f018 0f01 	tst.w	r8, #1
 8011da0:	d0de      	beq.n	8011d60 <_dtoa_r+0xa10>
 8011da2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011da6:	d1d8      	bne.n	8011d5a <_dtoa_r+0xa0a>
 8011da8:	9a00      	ldr	r2, [sp, #0]
 8011daa:	2339      	movs	r3, #57	@ 0x39
 8011dac:	7013      	strb	r3, [r2, #0]
 8011dae:	4633      	mov	r3, r6
 8011db0:	461e      	mov	r6, r3
 8011db2:	3b01      	subs	r3, #1
 8011db4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011db8:	2a39      	cmp	r2, #57	@ 0x39
 8011dba:	d052      	beq.n	8011e62 <_dtoa_r+0xb12>
 8011dbc:	3201      	adds	r2, #1
 8011dbe:	701a      	strb	r2, [r3, #0]
 8011dc0:	e612      	b.n	80119e8 <_dtoa_r+0x698>
 8011dc2:	2a00      	cmp	r2, #0
 8011dc4:	dd07      	ble.n	8011dd6 <_dtoa_r+0xa86>
 8011dc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011dca:	d0ed      	beq.n	8011da8 <_dtoa_r+0xa58>
 8011dcc:	9a00      	ldr	r2, [sp, #0]
 8011dce:	f108 0301 	add.w	r3, r8, #1
 8011dd2:	7013      	strb	r3, [r2, #0]
 8011dd4:	e608      	b.n	80119e8 <_dtoa_r+0x698>
 8011dd6:	9b07      	ldr	r3, [sp, #28]
 8011dd8:	9a07      	ldr	r2, [sp, #28]
 8011dda:	f803 8c01 	strb.w	r8, [r3, #-1]
 8011dde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011de0:	4293      	cmp	r3, r2
 8011de2:	d028      	beq.n	8011e36 <_dtoa_r+0xae6>
 8011de4:	4649      	mov	r1, r9
 8011de6:	2300      	movs	r3, #0
 8011de8:	220a      	movs	r2, #10
 8011dea:	4658      	mov	r0, fp
 8011dec:	f000 f9d6 	bl	801219c <__multadd>
 8011df0:	42af      	cmp	r7, r5
 8011df2:	4681      	mov	r9, r0
 8011df4:	f04f 0300 	mov.w	r3, #0
 8011df8:	f04f 020a 	mov.w	r2, #10
 8011dfc:	4639      	mov	r1, r7
 8011dfe:	4658      	mov	r0, fp
 8011e00:	d107      	bne.n	8011e12 <_dtoa_r+0xac2>
 8011e02:	f000 f9cb 	bl	801219c <__multadd>
 8011e06:	4607      	mov	r7, r0
 8011e08:	4605      	mov	r5, r0
 8011e0a:	9b07      	ldr	r3, [sp, #28]
 8011e0c:	3301      	adds	r3, #1
 8011e0e:	9307      	str	r3, [sp, #28]
 8011e10:	e774      	b.n	8011cfc <_dtoa_r+0x9ac>
 8011e12:	f000 f9c3 	bl	801219c <__multadd>
 8011e16:	4629      	mov	r1, r5
 8011e18:	4607      	mov	r7, r0
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	220a      	movs	r2, #10
 8011e1e:	4658      	mov	r0, fp
 8011e20:	f000 f9bc 	bl	801219c <__multadd>
 8011e24:	4605      	mov	r5, r0
 8011e26:	e7f0      	b.n	8011e0a <_dtoa_r+0xaba>
 8011e28:	9b00      	ldr	r3, [sp, #0]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	bfcc      	ite	gt
 8011e2e:	461e      	movgt	r6, r3
 8011e30:	2601      	movle	r6, #1
 8011e32:	4456      	add	r6, sl
 8011e34:	2700      	movs	r7, #0
 8011e36:	4649      	mov	r1, r9
 8011e38:	2201      	movs	r2, #1
 8011e3a:	4658      	mov	r0, fp
 8011e3c:	f000 fba4 	bl	8012588 <__lshift>
 8011e40:	4621      	mov	r1, r4
 8011e42:	4681      	mov	r9, r0
 8011e44:	f000 fc0c 	bl	8012660 <__mcmp>
 8011e48:	2800      	cmp	r0, #0
 8011e4a:	dcb0      	bgt.n	8011dae <_dtoa_r+0xa5e>
 8011e4c:	d102      	bne.n	8011e54 <_dtoa_r+0xb04>
 8011e4e:	f018 0f01 	tst.w	r8, #1
 8011e52:	d1ac      	bne.n	8011dae <_dtoa_r+0xa5e>
 8011e54:	4633      	mov	r3, r6
 8011e56:	461e      	mov	r6, r3
 8011e58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011e5c:	2a30      	cmp	r2, #48	@ 0x30
 8011e5e:	d0fa      	beq.n	8011e56 <_dtoa_r+0xb06>
 8011e60:	e5c2      	b.n	80119e8 <_dtoa_r+0x698>
 8011e62:	459a      	cmp	sl, r3
 8011e64:	d1a4      	bne.n	8011db0 <_dtoa_r+0xa60>
 8011e66:	9b04      	ldr	r3, [sp, #16]
 8011e68:	3301      	adds	r3, #1
 8011e6a:	9304      	str	r3, [sp, #16]
 8011e6c:	2331      	movs	r3, #49	@ 0x31
 8011e6e:	f88a 3000 	strb.w	r3, [sl]
 8011e72:	e5b9      	b.n	80119e8 <_dtoa_r+0x698>
 8011e74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011e76:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8011ed4 <_dtoa_r+0xb84>
 8011e7a:	b11b      	cbz	r3, 8011e84 <_dtoa_r+0xb34>
 8011e7c:	f10a 0308 	add.w	r3, sl, #8
 8011e80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011e82:	6013      	str	r3, [r2, #0]
 8011e84:	4650      	mov	r0, sl
 8011e86:	b019      	add	sp, #100	@ 0x64
 8011e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e8e:	2b01      	cmp	r3, #1
 8011e90:	f77f ae37 	ble.w	8011b02 <_dtoa_r+0x7b2>
 8011e94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e96:	930a      	str	r3, [sp, #40]	@ 0x28
 8011e98:	2001      	movs	r0, #1
 8011e9a:	e655      	b.n	8011b48 <_dtoa_r+0x7f8>
 8011e9c:	9b00      	ldr	r3, [sp, #0]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	f77f aed6 	ble.w	8011c50 <_dtoa_r+0x900>
 8011ea4:	4656      	mov	r6, sl
 8011ea6:	4621      	mov	r1, r4
 8011ea8:	4648      	mov	r0, r9
 8011eaa:	f7ff f9c7 	bl	801123c <quorem>
 8011eae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011eb2:	f806 8b01 	strb.w	r8, [r6], #1
 8011eb6:	9b00      	ldr	r3, [sp, #0]
 8011eb8:	eba6 020a 	sub.w	r2, r6, sl
 8011ebc:	4293      	cmp	r3, r2
 8011ebe:	ddb3      	ble.n	8011e28 <_dtoa_r+0xad8>
 8011ec0:	4649      	mov	r1, r9
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	220a      	movs	r2, #10
 8011ec6:	4658      	mov	r0, fp
 8011ec8:	f000 f968 	bl	801219c <__multadd>
 8011ecc:	4681      	mov	r9, r0
 8011ece:	e7ea      	b.n	8011ea6 <_dtoa_r+0xb56>
 8011ed0:	08014acd 	.word	0x08014acd
 8011ed4:	08014a51 	.word	0x08014a51

08011ed8 <_free_r>:
 8011ed8:	b538      	push	{r3, r4, r5, lr}
 8011eda:	4605      	mov	r5, r0
 8011edc:	2900      	cmp	r1, #0
 8011ede:	d041      	beq.n	8011f64 <_free_r+0x8c>
 8011ee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ee4:	1f0c      	subs	r4, r1, #4
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	bfb8      	it	lt
 8011eea:	18e4      	addlt	r4, r4, r3
 8011eec:	f000 f8e8 	bl	80120c0 <__malloc_lock>
 8011ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8011f68 <_free_r+0x90>)
 8011ef2:	6813      	ldr	r3, [r2, #0]
 8011ef4:	b933      	cbnz	r3, 8011f04 <_free_r+0x2c>
 8011ef6:	6063      	str	r3, [r4, #4]
 8011ef8:	6014      	str	r4, [r2, #0]
 8011efa:	4628      	mov	r0, r5
 8011efc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f00:	f000 b8e4 	b.w	80120cc <__malloc_unlock>
 8011f04:	42a3      	cmp	r3, r4
 8011f06:	d908      	bls.n	8011f1a <_free_r+0x42>
 8011f08:	6820      	ldr	r0, [r4, #0]
 8011f0a:	1821      	adds	r1, r4, r0
 8011f0c:	428b      	cmp	r3, r1
 8011f0e:	bf01      	itttt	eq
 8011f10:	6819      	ldreq	r1, [r3, #0]
 8011f12:	685b      	ldreq	r3, [r3, #4]
 8011f14:	1809      	addeq	r1, r1, r0
 8011f16:	6021      	streq	r1, [r4, #0]
 8011f18:	e7ed      	b.n	8011ef6 <_free_r+0x1e>
 8011f1a:	461a      	mov	r2, r3
 8011f1c:	685b      	ldr	r3, [r3, #4]
 8011f1e:	b10b      	cbz	r3, 8011f24 <_free_r+0x4c>
 8011f20:	42a3      	cmp	r3, r4
 8011f22:	d9fa      	bls.n	8011f1a <_free_r+0x42>
 8011f24:	6811      	ldr	r1, [r2, #0]
 8011f26:	1850      	adds	r0, r2, r1
 8011f28:	42a0      	cmp	r0, r4
 8011f2a:	d10b      	bne.n	8011f44 <_free_r+0x6c>
 8011f2c:	6820      	ldr	r0, [r4, #0]
 8011f2e:	4401      	add	r1, r0
 8011f30:	1850      	adds	r0, r2, r1
 8011f32:	4283      	cmp	r3, r0
 8011f34:	6011      	str	r1, [r2, #0]
 8011f36:	d1e0      	bne.n	8011efa <_free_r+0x22>
 8011f38:	6818      	ldr	r0, [r3, #0]
 8011f3a:	685b      	ldr	r3, [r3, #4]
 8011f3c:	6053      	str	r3, [r2, #4]
 8011f3e:	4408      	add	r0, r1
 8011f40:	6010      	str	r0, [r2, #0]
 8011f42:	e7da      	b.n	8011efa <_free_r+0x22>
 8011f44:	d902      	bls.n	8011f4c <_free_r+0x74>
 8011f46:	230c      	movs	r3, #12
 8011f48:	602b      	str	r3, [r5, #0]
 8011f4a:	e7d6      	b.n	8011efa <_free_r+0x22>
 8011f4c:	6820      	ldr	r0, [r4, #0]
 8011f4e:	1821      	adds	r1, r4, r0
 8011f50:	428b      	cmp	r3, r1
 8011f52:	bf04      	itt	eq
 8011f54:	6819      	ldreq	r1, [r3, #0]
 8011f56:	685b      	ldreq	r3, [r3, #4]
 8011f58:	6063      	str	r3, [r4, #4]
 8011f5a:	bf04      	itt	eq
 8011f5c:	1809      	addeq	r1, r1, r0
 8011f5e:	6021      	streq	r1, [r4, #0]
 8011f60:	6054      	str	r4, [r2, #4]
 8011f62:	e7ca      	b.n	8011efa <_free_r+0x22>
 8011f64:	bd38      	pop	{r3, r4, r5, pc}
 8011f66:	bf00      	nop
 8011f68:	20002bb4 	.word	0x20002bb4

08011f6c <malloc>:
 8011f6c:	4b02      	ldr	r3, [pc, #8]	@ (8011f78 <malloc+0xc>)
 8011f6e:	4601      	mov	r1, r0
 8011f70:	6818      	ldr	r0, [r3, #0]
 8011f72:	f000 b825 	b.w	8011fc0 <_malloc_r>
 8011f76:	bf00      	nop
 8011f78:	20000198 	.word	0x20000198

08011f7c <sbrk_aligned>:
 8011f7c:	b570      	push	{r4, r5, r6, lr}
 8011f7e:	4e0f      	ldr	r6, [pc, #60]	@ (8011fbc <sbrk_aligned+0x40>)
 8011f80:	460c      	mov	r4, r1
 8011f82:	6831      	ldr	r1, [r6, #0]
 8011f84:	4605      	mov	r5, r0
 8011f86:	b911      	cbnz	r1, 8011f8e <sbrk_aligned+0x12>
 8011f88:	f001 fe0c 	bl	8013ba4 <_sbrk_r>
 8011f8c:	6030      	str	r0, [r6, #0]
 8011f8e:	4621      	mov	r1, r4
 8011f90:	4628      	mov	r0, r5
 8011f92:	f001 fe07 	bl	8013ba4 <_sbrk_r>
 8011f96:	1c43      	adds	r3, r0, #1
 8011f98:	d103      	bne.n	8011fa2 <sbrk_aligned+0x26>
 8011f9a:	f04f 34ff 	mov.w	r4, #4294967295
 8011f9e:	4620      	mov	r0, r4
 8011fa0:	bd70      	pop	{r4, r5, r6, pc}
 8011fa2:	1cc4      	adds	r4, r0, #3
 8011fa4:	f024 0403 	bic.w	r4, r4, #3
 8011fa8:	42a0      	cmp	r0, r4
 8011faa:	d0f8      	beq.n	8011f9e <sbrk_aligned+0x22>
 8011fac:	1a21      	subs	r1, r4, r0
 8011fae:	4628      	mov	r0, r5
 8011fb0:	f001 fdf8 	bl	8013ba4 <_sbrk_r>
 8011fb4:	3001      	adds	r0, #1
 8011fb6:	d1f2      	bne.n	8011f9e <sbrk_aligned+0x22>
 8011fb8:	e7ef      	b.n	8011f9a <sbrk_aligned+0x1e>
 8011fba:	bf00      	nop
 8011fbc:	20002bb0 	.word	0x20002bb0

08011fc0 <_malloc_r>:
 8011fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011fc4:	1ccd      	adds	r5, r1, #3
 8011fc6:	f025 0503 	bic.w	r5, r5, #3
 8011fca:	3508      	adds	r5, #8
 8011fcc:	2d0c      	cmp	r5, #12
 8011fce:	bf38      	it	cc
 8011fd0:	250c      	movcc	r5, #12
 8011fd2:	2d00      	cmp	r5, #0
 8011fd4:	4606      	mov	r6, r0
 8011fd6:	db01      	blt.n	8011fdc <_malloc_r+0x1c>
 8011fd8:	42a9      	cmp	r1, r5
 8011fda:	d904      	bls.n	8011fe6 <_malloc_r+0x26>
 8011fdc:	230c      	movs	r3, #12
 8011fde:	6033      	str	r3, [r6, #0]
 8011fe0:	2000      	movs	r0, #0
 8011fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fe6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80120bc <_malloc_r+0xfc>
 8011fea:	f000 f869 	bl	80120c0 <__malloc_lock>
 8011fee:	f8d8 3000 	ldr.w	r3, [r8]
 8011ff2:	461c      	mov	r4, r3
 8011ff4:	bb44      	cbnz	r4, 8012048 <_malloc_r+0x88>
 8011ff6:	4629      	mov	r1, r5
 8011ff8:	4630      	mov	r0, r6
 8011ffa:	f7ff ffbf 	bl	8011f7c <sbrk_aligned>
 8011ffe:	1c43      	adds	r3, r0, #1
 8012000:	4604      	mov	r4, r0
 8012002:	d158      	bne.n	80120b6 <_malloc_r+0xf6>
 8012004:	f8d8 4000 	ldr.w	r4, [r8]
 8012008:	4627      	mov	r7, r4
 801200a:	2f00      	cmp	r7, #0
 801200c:	d143      	bne.n	8012096 <_malloc_r+0xd6>
 801200e:	2c00      	cmp	r4, #0
 8012010:	d04b      	beq.n	80120aa <_malloc_r+0xea>
 8012012:	6823      	ldr	r3, [r4, #0]
 8012014:	4639      	mov	r1, r7
 8012016:	4630      	mov	r0, r6
 8012018:	eb04 0903 	add.w	r9, r4, r3
 801201c:	f001 fdc2 	bl	8013ba4 <_sbrk_r>
 8012020:	4581      	cmp	r9, r0
 8012022:	d142      	bne.n	80120aa <_malloc_r+0xea>
 8012024:	6821      	ldr	r1, [r4, #0]
 8012026:	1a6d      	subs	r5, r5, r1
 8012028:	4629      	mov	r1, r5
 801202a:	4630      	mov	r0, r6
 801202c:	f7ff ffa6 	bl	8011f7c <sbrk_aligned>
 8012030:	3001      	adds	r0, #1
 8012032:	d03a      	beq.n	80120aa <_malloc_r+0xea>
 8012034:	6823      	ldr	r3, [r4, #0]
 8012036:	442b      	add	r3, r5
 8012038:	6023      	str	r3, [r4, #0]
 801203a:	f8d8 3000 	ldr.w	r3, [r8]
 801203e:	685a      	ldr	r2, [r3, #4]
 8012040:	bb62      	cbnz	r2, 801209c <_malloc_r+0xdc>
 8012042:	f8c8 7000 	str.w	r7, [r8]
 8012046:	e00f      	b.n	8012068 <_malloc_r+0xa8>
 8012048:	6822      	ldr	r2, [r4, #0]
 801204a:	1b52      	subs	r2, r2, r5
 801204c:	d420      	bmi.n	8012090 <_malloc_r+0xd0>
 801204e:	2a0b      	cmp	r2, #11
 8012050:	d917      	bls.n	8012082 <_malloc_r+0xc2>
 8012052:	1961      	adds	r1, r4, r5
 8012054:	42a3      	cmp	r3, r4
 8012056:	6025      	str	r5, [r4, #0]
 8012058:	bf18      	it	ne
 801205a:	6059      	strne	r1, [r3, #4]
 801205c:	6863      	ldr	r3, [r4, #4]
 801205e:	bf08      	it	eq
 8012060:	f8c8 1000 	streq.w	r1, [r8]
 8012064:	5162      	str	r2, [r4, r5]
 8012066:	604b      	str	r3, [r1, #4]
 8012068:	4630      	mov	r0, r6
 801206a:	f000 f82f 	bl	80120cc <__malloc_unlock>
 801206e:	f104 000b 	add.w	r0, r4, #11
 8012072:	1d23      	adds	r3, r4, #4
 8012074:	f020 0007 	bic.w	r0, r0, #7
 8012078:	1ac2      	subs	r2, r0, r3
 801207a:	bf1c      	itt	ne
 801207c:	1a1b      	subne	r3, r3, r0
 801207e:	50a3      	strne	r3, [r4, r2]
 8012080:	e7af      	b.n	8011fe2 <_malloc_r+0x22>
 8012082:	6862      	ldr	r2, [r4, #4]
 8012084:	42a3      	cmp	r3, r4
 8012086:	bf0c      	ite	eq
 8012088:	f8c8 2000 	streq.w	r2, [r8]
 801208c:	605a      	strne	r2, [r3, #4]
 801208e:	e7eb      	b.n	8012068 <_malloc_r+0xa8>
 8012090:	4623      	mov	r3, r4
 8012092:	6864      	ldr	r4, [r4, #4]
 8012094:	e7ae      	b.n	8011ff4 <_malloc_r+0x34>
 8012096:	463c      	mov	r4, r7
 8012098:	687f      	ldr	r7, [r7, #4]
 801209a:	e7b6      	b.n	801200a <_malloc_r+0x4a>
 801209c:	461a      	mov	r2, r3
 801209e:	685b      	ldr	r3, [r3, #4]
 80120a0:	42a3      	cmp	r3, r4
 80120a2:	d1fb      	bne.n	801209c <_malloc_r+0xdc>
 80120a4:	2300      	movs	r3, #0
 80120a6:	6053      	str	r3, [r2, #4]
 80120a8:	e7de      	b.n	8012068 <_malloc_r+0xa8>
 80120aa:	230c      	movs	r3, #12
 80120ac:	6033      	str	r3, [r6, #0]
 80120ae:	4630      	mov	r0, r6
 80120b0:	f000 f80c 	bl	80120cc <__malloc_unlock>
 80120b4:	e794      	b.n	8011fe0 <_malloc_r+0x20>
 80120b6:	6005      	str	r5, [r0, #0]
 80120b8:	e7d6      	b.n	8012068 <_malloc_r+0xa8>
 80120ba:	bf00      	nop
 80120bc:	20002bb4 	.word	0x20002bb4

080120c0 <__malloc_lock>:
 80120c0:	4801      	ldr	r0, [pc, #4]	@ (80120c8 <__malloc_lock+0x8>)
 80120c2:	f7ff b8b2 	b.w	801122a <__retarget_lock_acquire_recursive>
 80120c6:	bf00      	nop
 80120c8:	20002bac 	.word	0x20002bac

080120cc <__malloc_unlock>:
 80120cc:	4801      	ldr	r0, [pc, #4]	@ (80120d4 <__malloc_unlock+0x8>)
 80120ce:	f7ff b8ad 	b.w	801122c <__retarget_lock_release_recursive>
 80120d2:	bf00      	nop
 80120d4:	20002bac 	.word	0x20002bac

080120d8 <_Balloc>:
 80120d8:	b570      	push	{r4, r5, r6, lr}
 80120da:	69c6      	ldr	r6, [r0, #28]
 80120dc:	4604      	mov	r4, r0
 80120de:	460d      	mov	r5, r1
 80120e0:	b976      	cbnz	r6, 8012100 <_Balloc+0x28>
 80120e2:	2010      	movs	r0, #16
 80120e4:	f7ff ff42 	bl	8011f6c <malloc>
 80120e8:	4602      	mov	r2, r0
 80120ea:	61e0      	str	r0, [r4, #28]
 80120ec:	b920      	cbnz	r0, 80120f8 <_Balloc+0x20>
 80120ee:	4b18      	ldr	r3, [pc, #96]	@ (8012150 <_Balloc+0x78>)
 80120f0:	4818      	ldr	r0, [pc, #96]	@ (8012154 <_Balloc+0x7c>)
 80120f2:	216b      	movs	r1, #107	@ 0x6b
 80120f4:	f001 fd7c 	bl	8013bf0 <__assert_func>
 80120f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80120fc:	6006      	str	r6, [r0, #0]
 80120fe:	60c6      	str	r6, [r0, #12]
 8012100:	69e6      	ldr	r6, [r4, #28]
 8012102:	68f3      	ldr	r3, [r6, #12]
 8012104:	b183      	cbz	r3, 8012128 <_Balloc+0x50>
 8012106:	69e3      	ldr	r3, [r4, #28]
 8012108:	68db      	ldr	r3, [r3, #12]
 801210a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801210e:	b9b8      	cbnz	r0, 8012140 <_Balloc+0x68>
 8012110:	2101      	movs	r1, #1
 8012112:	fa01 f605 	lsl.w	r6, r1, r5
 8012116:	1d72      	adds	r2, r6, #5
 8012118:	0092      	lsls	r2, r2, #2
 801211a:	4620      	mov	r0, r4
 801211c:	f001 fd86 	bl	8013c2c <_calloc_r>
 8012120:	b160      	cbz	r0, 801213c <_Balloc+0x64>
 8012122:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012126:	e00e      	b.n	8012146 <_Balloc+0x6e>
 8012128:	2221      	movs	r2, #33	@ 0x21
 801212a:	2104      	movs	r1, #4
 801212c:	4620      	mov	r0, r4
 801212e:	f001 fd7d 	bl	8013c2c <_calloc_r>
 8012132:	69e3      	ldr	r3, [r4, #28]
 8012134:	60f0      	str	r0, [r6, #12]
 8012136:	68db      	ldr	r3, [r3, #12]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d1e4      	bne.n	8012106 <_Balloc+0x2e>
 801213c:	2000      	movs	r0, #0
 801213e:	bd70      	pop	{r4, r5, r6, pc}
 8012140:	6802      	ldr	r2, [r0, #0]
 8012142:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012146:	2300      	movs	r3, #0
 8012148:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801214c:	e7f7      	b.n	801213e <_Balloc+0x66>
 801214e:	bf00      	nop
 8012150:	08014a5e 	.word	0x08014a5e
 8012154:	08014ade 	.word	0x08014ade

08012158 <_Bfree>:
 8012158:	b570      	push	{r4, r5, r6, lr}
 801215a:	69c6      	ldr	r6, [r0, #28]
 801215c:	4605      	mov	r5, r0
 801215e:	460c      	mov	r4, r1
 8012160:	b976      	cbnz	r6, 8012180 <_Bfree+0x28>
 8012162:	2010      	movs	r0, #16
 8012164:	f7ff ff02 	bl	8011f6c <malloc>
 8012168:	4602      	mov	r2, r0
 801216a:	61e8      	str	r0, [r5, #28]
 801216c:	b920      	cbnz	r0, 8012178 <_Bfree+0x20>
 801216e:	4b09      	ldr	r3, [pc, #36]	@ (8012194 <_Bfree+0x3c>)
 8012170:	4809      	ldr	r0, [pc, #36]	@ (8012198 <_Bfree+0x40>)
 8012172:	218f      	movs	r1, #143	@ 0x8f
 8012174:	f001 fd3c 	bl	8013bf0 <__assert_func>
 8012178:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801217c:	6006      	str	r6, [r0, #0]
 801217e:	60c6      	str	r6, [r0, #12]
 8012180:	b13c      	cbz	r4, 8012192 <_Bfree+0x3a>
 8012182:	69eb      	ldr	r3, [r5, #28]
 8012184:	6862      	ldr	r2, [r4, #4]
 8012186:	68db      	ldr	r3, [r3, #12]
 8012188:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801218c:	6021      	str	r1, [r4, #0]
 801218e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012192:	bd70      	pop	{r4, r5, r6, pc}
 8012194:	08014a5e 	.word	0x08014a5e
 8012198:	08014ade 	.word	0x08014ade

0801219c <__multadd>:
 801219c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121a0:	690d      	ldr	r5, [r1, #16]
 80121a2:	4607      	mov	r7, r0
 80121a4:	460c      	mov	r4, r1
 80121a6:	461e      	mov	r6, r3
 80121a8:	f101 0c14 	add.w	ip, r1, #20
 80121ac:	2000      	movs	r0, #0
 80121ae:	f8dc 3000 	ldr.w	r3, [ip]
 80121b2:	b299      	uxth	r1, r3
 80121b4:	fb02 6101 	mla	r1, r2, r1, r6
 80121b8:	0c1e      	lsrs	r6, r3, #16
 80121ba:	0c0b      	lsrs	r3, r1, #16
 80121bc:	fb02 3306 	mla	r3, r2, r6, r3
 80121c0:	b289      	uxth	r1, r1
 80121c2:	3001      	adds	r0, #1
 80121c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80121c8:	4285      	cmp	r5, r0
 80121ca:	f84c 1b04 	str.w	r1, [ip], #4
 80121ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80121d2:	dcec      	bgt.n	80121ae <__multadd+0x12>
 80121d4:	b30e      	cbz	r6, 801221a <__multadd+0x7e>
 80121d6:	68a3      	ldr	r3, [r4, #8]
 80121d8:	42ab      	cmp	r3, r5
 80121da:	dc19      	bgt.n	8012210 <__multadd+0x74>
 80121dc:	6861      	ldr	r1, [r4, #4]
 80121de:	4638      	mov	r0, r7
 80121e0:	3101      	adds	r1, #1
 80121e2:	f7ff ff79 	bl	80120d8 <_Balloc>
 80121e6:	4680      	mov	r8, r0
 80121e8:	b928      	cbnz	r0, 80121f6 <__multadd+0x5a>
 80121ea:	4602      	mov	r2, r0
 80121ec:	4b0c      	ldr	r3, [pc, #48]	@ (8012220 <__multadd+0x84>)
 80121ee:	480d      	ldr	r0, [pc, #52]	@ (8012224 <__multadd+0x88>)
 80121f0:	21ba      	movs	r1, #186	@ 0xba
 80121f2:	f001 fcfd 	bl	8013bf0 <__assert_func>
 80121f6:	6922      	ldr	r2, [r4, #16]
 80121f8:	3202      	adds	r2, #2
 80121fa:	f104 010c 	add.w	r1, r4, #12
 80121fe:	0092      	lsls	r2, r2, #2
 8012200:	300c      	adds	r0, #12
 8012202:	f001 fcdf 	bl	8013bc4 <memcpy>
 8012206:	4621      	mov	r1, r4
 8012208:	4638      	mov	r0, r7
 801220a:	f7ff ffa5 	bl	8012158 <_Bfree>
 801220e:	4644      	mov	r4, r8
 8012210:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012214:	3501      	adds	r5, #1
 8012216:	615e      	str	r6, [r3, #20]
 8012218:	6125      	str	r5, [r4, #16]
 801221a:	4620      	mov	r0, r4
 801221c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012220:	08014acd 	.word	0x08014acd
 8012224:	08014ade 	.word	0x08014ade

08012228 <__s2b>:
 8012228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801222c:	460c      	mov	r4, r1
 801222e:	4615      	mov	r5, r2
 8012230:	461f      	mov	r7, r3
 8012232:	2209      	movs	r2, #9
 8012234:	3308      	adds	r3, #8
 8012236:	4606      	mov	r6, r0
 8012238:	fb93 f3f2 	sdiv	r3, r3, r2
 801223c:	2100      	movs	r1, #0
 801223e:	2201      	movs	r2, #1
 8012240:	429a      	cmp	r2, r3
 8012242:	db09      	blt.n	8012258 <__s2b+0x30>
 8012244:	4630      	mov	r0, r6
 8012246:	f7ff ff47 	bl	80120d8 <_Balloc>
 801224a:	b940      	cbnz	r0, 801225e <__s2b+0x36>
 801224c:	4602      	mov	r2, r0
 801224e:	4b19      	ldr	r3, [pc, #100]	@ (80122b4 <__s2b+0x8c>)
 8012250:	4819      	ldr	r0, [pc, #100]	@ (80122b8 <__s2b+0x90>)
 8012252:	21d3      	movs	r1, #211	@ 0xd3
 8012254:	f001 fccc 	bl	8013bf0 <__assert_func>
 8012258:	0052      	lsls	r2, r2, #1
 801225a:	3101      	adds	r1, #1
 801225c:	e7f0      	b.n	8012240 <__s2b+0x18>
 801225e:	9b08      	ldr	r3, [sp, #32]
 8012260:	6143      	str	r3, [r0, #20]
 8012262:	2d09      	cmp	r5, #9
 8012264:	f04f 0301 	mov.w	r3, #1
 8012268:	6103      	str	r3, [r0, #16]
 801226a:	dd16      	ble.n	801229a <__s2b+0x72>
 801226c:	f104 0909 	add.w	r9, r4, #9
 8012270:	46c8      	mov	r8, r9
 8012272:	442c      	add	r4, r5
 8012274:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012278:	4601      	mov	r1, r0
 801227a:	3b30      	subs	r3, #48	@ 0x30
 801227c:	220a      	movs	r2, #10
 801227e:	4630      	mov	r0, r6
 8012280:	f7ff ff8c 	bl	801219c <__multadd>
 8012284:	45a0      	cmp	r8, r4
 8012286:	d1f5      	bne.n	8012274 <__s2b+0x4c>
 8012288:	f1a5 0408 	sub.w	r4, r5, #8
 801228c:	444c      	add	r4, r9
 801228e:	1b2d      	subs	r5, r5, r4
 8012290:	1963      	adds	r3, r4, r5
 8012292:	42bb      	cmp	r3, r7
 8012294:	db04      	blt.n	80122a0 <__s2b+0x78>
 8012296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801229a:	340a      	adds	r4, #10
 801229c:	2509      	movs	r5, #9
 801229e:	e7f6      	b.n	801228e <__s2b+0x66>
 80122a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80122a4:	4601      	mov	r1, r0
 80122a6:	3b30      	subs	r3, #48	@ 0x30
 80122a8:	220a      	movs	r2, #10
 80122aa:	4630      	mov	r0, r6
 80122ac:	f7ff ff76 	bl	801219c <__multadd>
 80122b0:	e7ee      	b.n	8012290 <__s2b+0x68>
 80122b2:	bf00      	nop
 80122b4:	08014acd 	.word	0x08014acd
 80122b8:	08014ade 	.word	0x08014ade

080122bc <__hi0bits>:
 80122bc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80122c0:	4603      	mov	r3, r0
 80122c2:	bf36      	itet	cc
 80122c4:	0403      	lslcc	r3, r0, #16
 80122c6:	2000      	movcs	r0, #0
 80122c8:	2010      	movcc	r0, #16
 80122ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80122ce:	bf3c      	itt	cc
 80122d0:	021b      	lslcc	r3, r3, #8
 80122d2:	3008      	addcc	r0, #8
 80122d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80122d8:	bf3c      	itt	cc
 80122da:	011b      	lslcc	r3, r3, #4
 80122dc:	3004      	addcc	r0, #4
 80122de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80122e2:	bf3c      	itt	cc
 80122e4:	009b      	lslcc	r3, r3, #2
 80122e6:	3002      	addcc	r0, #2
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	db05      	blt.n	80122f8 <__hi0bits+0x3c>
 80122ec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80122f0:	f100 0001 	add.w	r0, r0, #1
 80122f4:	bf08      	it	eq
 80122f6:	2020      	moveq	r0, #32
 80122f8:	4770      	bx	lr

080122fa <__lo0bits>:
 80122fa:	6803      	ldr	r3, [r0, #0]
 80122fc:	4602      	mov	r2, r0
 80122fe:	f013 0007 	ands.w	r0, r3, #7
 8012302:	d00b      	beq.n	801231c <__lo0bits+0x22>
 8012304:	07d9      	lsls	r1, r3, #31
 8012306:	d421      	bmi.n	801234c <__lo0bits+0x52>
 8012308:	0798      	lsls	r0, r3, #30
 801230a:	bf49      	itett	mi
 801230c:	085b      	lsrmi	r3, r3, #1
 801230e:	089b      	lsrpl	r3, r3, #2
 8012310:	2001      	movmi	r0, #1
 8012312:	6013      	strmi	r3, [r2, #0]
 8012314:	bf5c      	itt	pl
 8012316:	6013      	strpl	r3, [r2, #0]
 8012318:	2002      	movpl	r0, #2
 801231a:	4770      	bx	lr
 801231c:	b299      	uxth	r1, r3
 801231e:	b909      	cbnz	r1, 8012324 <__lo0bits+0x2a>
 8012320:	0c1b      	lsrs	r3, r3, #16
 8012322:	2010      	movs	r0, #16
 8012324:	b2d9      	uxtb	r1, r3
 8012326:	b909      	cbnz	r1, 801232c <__lo0bits+0x32>
 8012328:	3008      	adds	r0, #8
 801232a:	0a1b      	lsrs	r3, r3, #8
 801232c:	0719      	lsls	r1, r3, #28
 801232e:	bf04      	itt	eq
 8012330:	091b      	lsreq	r3, r3, #4
 8012332:	3004      	addeq	r0, #4
 8012334:	0799      	lsls	r1, r3, #30
 8012336:	bf04      	itt	eq
 8012338:	089b      	lsreq	r3, r3, #2
 801233a:	3002      	addeq	r0, #2
 801233c:	07d9      	lsls	r1, r3, #31
 801233e:	d403      	bmi.n	8012348 <__lo0bits+0x4e>
 8012340:	085b      	lsrs	r3, r3, #1
 8012342:	f100 0001 	add.w	r0, r0, #1
 8012346:	d003      	beq.n	8012350 <__lo0bits+0x56>
 8012348:	6013      	str	r3, [r2, #0]
 801234a:	4770      	bx	lr
 801234c:	2000      	movs	r0, #0
 801234e:	4770      	bx	lr
 8012350:	2020      	movs	r0, #32
 8012352:	4770      	bx	lr

08012354 <__i2b>:
 8012354:	b510      	push	{r4, lr}
 8012356:	460c      	mov	r4, r1
 8012358:	2101      	movs	r1, #1
 801235a:	f7ff febd 	bl	80120d8 <_Balloc>
 801235e:	4602      	mov	r2, r0
 8012360:	b928      	cbnz	r0, 801236e <__i2b+0x1a>
 8012362:	4b05      	ldr	r3, [pc, #20]	@ (8012378 <__i2b+0x24>)
 8012364:	4805      	ldr	r0, [pc, #20]	@ (801237c <__i2b+0x28>)
 8012366:	f240 1145 	movw	r1, #325	@ 0x145
 801236a:	f001 fc41 	bl	8013bf0 <__assert_func>
 801236e:	2301      	movs	r3, #1
 8012370:	6144      	str	r4, [r0, #20]
 8012372:	6103      	str	r3, [r0, #16]
 8012374:	bd10      	pop	{r4, pc}
 8012376:	bf00      	nop
 8012378:	08014acd 	.word	0x08014acd
 801237c:	08014ade 	.word	0x08014ade

08012380 <__multiply>:
 8012380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012384:	4614      	mov	r4, r2
 8012386:	690a      	ldr	r2, [r1, #16]
 8012388:	6923      	ldr	r3, [r4, #16]
 801238a:	429a      	cmp	r2, r3
 801238c:	bfa8      	it	ge
 801238e:	4623      	movge	r3, r4
 8012390:	460f      	mov	r7, r1
 8012392:	bfa4      	itt	ge
 8012394:	460c      	movge	r4, r1
 8012396:	461f      	movge	r7, r3
 8012398:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801239c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80123a0:	68a3      	ldr	r3, [r4, #8]
 80123a2:	6861      	ldr	r1, [r4, #4]
 80123a4:	eb0a 0609 	add.w	r6, sl, r9
 80123a8:	42b3      	cmp	r3, r6
 80123aa:	b085      	sub	sp, #20
 80123ac:	bfb8      	it	lt
 80123ae:	3101      	addlt	r1, #1
 80123b0:	f7ff fe92 	bl	80120d8 <_Balloc>
 80123b4:	b930      	cbnz	r0, 80123c4 <__multiply+0x44>
 80123b6:	4602      	mov	r2, r0
 80123b8:	4b44      	ldr	r3, [pc, #272]	@ (80124cc <__multiply+0x14c>)
 80123ba:	4845      	ldr	r0, [pc, #276]	@ (80124d0 <__multiply+0x150>)
 80123bc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80123c0:	f001 fc16 	bl	8013bf0 <__assert_func>
 80123c4:	f100 0514 	add.w	r5, r0, #20
 80123c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80123cc:	462b      	mov	r3, r5
 80123ce:	2200      	movs	r2, #0
 80123d0:	4543      	cmp	r3, r8
 80123d2:	d321      	bcc.n	8012418 <__multiply+0x98>
 80123d4:	f107 0114 	add.w	r1, r7, #20
 80123d8:	f104 0214 	add.w	r2, r4, #20
 80123dc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80123e0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80123e4:	9302      	str	r3, [sp, #8]
 80123e6:	1b13      	subs	r3, r2, r4
 80123e8:	3b15      	subs	r3, #21
 80123ea:	f023 0303 	bic.w	r3, r3, #3
 80123ee:	3304      	adds	r3, #4
 80123f0:	f104 0715 	add.w	r7, r4, #21
 80123f4:	42ba      	cmp	r2, r7
 80123f6:	bf38      	it	cc
 80123f8:	2304      	movcc	r3, #4
 80123fa:	9301      	str	r3, [sp, #4]
 80123fc:	9b02      	ldr	r3, [sp, #8]
 80123fe:	9103      	str	r1, [sp, #12]
 8012400:	428b      	cmp	r3, r1
 8012402:	d80c      	bhi.n	801241e <__multiply+0x9e>
 8012404:	2e00      	cmp	r6, #0
 8012406:	dd03      	ble.n	8012410 <__multiply+0x90>
 8012408:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801240c:	2b00      	cmp	r3, #0
 801240e:	d05b      	beq.n	80124c8 <__multiply+0x148>
 8012410:	6106      	str	r6, [r0, #16]
 8012412:	b005      	add	sp, #20
 8012414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012418:	f843 2b04 	str.w	r2, [r3], #4
 801241c:	e7d8      	b.n	80123d0 <__multiply+0x50>
 801241e:	f8b1 a000 	ldrh.w	sl, [r1]
 8012422:	f1ba 0f00 	cmp.w	sl, #0
 8012426:	d024      	beq.n	8012472 <__multiply+0xf2>
 8012428:	f104 0e14 	add.w	lr, r4, #20
 801242c:	46a9      	mov	r9, r5
 801242e:	f04f 0c00 	mov.w	ip, #0
 8012432:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012436:	f8d9 3000 	ldr.w	r3, [r9]
 801243a:	fa1f fb87 	uxth.w	fp, r7
 801243e:	b29b      	uxth	r3, r3
 8012440:	fb0a 330b 	mla	r3, sl, fp, r3
 8012444:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012448:	f8d9 7000 	ldr.w	r7, [r9]
 801244c:	4463      	add	r3, ip
 801244e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012452:	fb0a c70b 	mla	r7, sl, fp, ip
 8012456:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801245a:	b29b      	uxth	r3, r3
 801245c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012460:	4572      	cmp	r2, lr
 8012462:	f849 3b04 	str.w	r3, [r9], #4
 8012466:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801246a:	d8e2      	bhi.n	8012432 <__multiply+0xb2>
 801246c:	9b01      	ldr	r3, [sp, #4]
 801246e:	f845 c003 	str.w	ip, [r5, r3]
 8012472:	9b03      	ldr	r3, [sp, #12]
 8012474:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012478:	3104      	adds	r1, #4
 801247a:	f1b9 0f00 	cmp.w	r9, #0
 801247e:	d021      	beq.n	80124c4 <__multiply+0x144>
 8012480:	682b      	ldr	r3, [r5, #0]
 8012482:	f104 0c14 	add.w	ip, r4, #20
 8012486:	46ae      	mov	lr, r5
 8012488:	f04f 0a00 	mov.w	sl, #0
 801248c:	f8bc b000 	ldrh.w	fp, [ip]
 8012490:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012494:	fb09 770b 	mla	r7, r9, fp, r7
 8012498:	4457      	add	r7, sl
 801249a:	b29b      	uxth	r3, r3
 801249c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80124a0:	f84e 3b04 	str.w	r3, [lr], #4
 80124a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80124a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80124ac:	f8be 3000 	ldrh.w	r3, [lr]
 80124b0:	fb09 330a 	mla	r3, r9, sl, r3
 80124b4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80124b8:	4562      	cmp	r2, ip
 80124ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80124be:	d8e5      	bhi.n	801248c <__multiply+0x10c>
 80124c0:	9f01      	ldr	r7, [sp, #4]
 80124c2:	51eb      	str	r3, [r5, r7]
 80124c4:	3504      	adds	r5, #4
 80124c6:	e799      	b.n	80123fc <__multiply+0x7c>
 80124c8:	3e01      	subs	r6, #1
 80124ca:	e79b      	b.n	8012404 <__multiply+0x84>
 80124cc:	08014acd 	.word	0x08014acd
 80124d0:	08014ade 	.word	0x08014ade

080124d4 <__pow5mult>:
 80124d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124d8:	4615      	mov	r5, r2
 80124da:	f012 0203 	ands.w	r2, r2, #3
 80124de:	4607      	mov	r7, r0
 80124e0:	460e      	mov	r6, r1
 80124e2:	d007      	beq.n	80124f4 <__pow5mult+0x20>
 80124e4:	4c25      	ldr	r4, [pc, #148]	@ (801257c <__pow5mult+0xa8>)
 80124e6:	3a01      	subs	r2, #1
 80124e8:	2300      	movs	r3, #0
 80124ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80124ee:	f7ff fe55 	bl	801219c <__multadd>
 80124f2:	4606      	mov	r6, r0
 80124f4:	10ad      	asrs	r5, r5, #2
 80124f6:	d03d      	beq.n	8012574 <__pow5mult+0xa0>
 80124f8:	69fc      	ldr	r4, [r7, #28]
 80124fa:	b97c      	cbnz	r4, 801251c <__pow5mult+0x48>
 80124fc:	2010      	movs	r0, #16
 80124fe:	f7ff fd35 	bl	8011f6c <malloc>
 8012502:	4602      	mov	r2, r0
 8012504:	61f8      	str	r0, [r7, #28]
 8012506:	b928      	cbnz	r0, 8012514 <__pow5mult+0x40>
 8012508:	4b1d      	ldr	r3, [pc, #116]	@ (8012580 <__pow5mult+0xac>)
 801250a:	481e      	ldr	r0, [pc, #120]	@ (8012584 <__pow5mult+0xb0>)
 801250c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012510:	f001 fb6e 	bl	8013bf0 <__assert_func>
 8012514:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012518:	6004      	str	r4, [r0, #0]
 801251a:	60c4      	str	r4, [r0, #12]
 801251c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012520:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012524:	b94c      	cbnz	r4, 801253a <__pow5mult+0x66>
 8012526:	f240 2171 	movw	r1, #625	@ 0x271
 801252a:	4638      	mov	r0, r7
 801252c:	f7ff ff12 	bl	8012354 <__i2b>
 8012530:	2300      	movs	r3, #0
 8012532:	f8c8 0008 	str.w	r0, [r8, #8]
 8012536:	4604      	mov	r4, r0
 8012538:	6003      	str	r3, [r0, #0]
 801253a:	f04f 0900 	mov.w	r9, #0
 801253e:	07eb      	lsls	r3, r5, #31
 8012540:	d50a      	bpl.n	8012558 <__pow5mult+0x84>
 8012542:	4631      	mov	r1, r6
 8012544:	4622      	mov	r2, r4
 8012546:	4638      	mov	r0, r7
 8012548:	f7ff ff1a 	bl	8012380 <__multiply>
 801254c:	4631      	mov	r1, r6
 801254e:	4680      	mov	r8, r0
 8012550:	4638      	mov	r0, r7
 8012552:	f7ff fe01 	bl	8012158 <_Bfree>
 8012556:	4646      	mov	r6, r8
 8012558:	106d      	asrs	r5, r5, #1
 801255a:	d00b      	beq.n	8012574 <__pow5mult+0xa0>
 801255c:	6820      	ldr	r0, [r4, #0]
 801255e:	b938      	cbnz	r0, 8012570 <__pow5mult+0x9c>
 8012560:	4622      	mov	r2, r4
 8012562:	4621      	mov	r1, r4
 8012564:	4638      	mov	r0, r7
 8012566:	f7ff ff0b 	bl	8012380 <__multiply>
 801256a:	6020      	str	r0, [r4, #0]
 801256c:	f8c0 9000 	str.w	r9, [r0]
 8012570:	4604      	mov	r4, r0
 8012572:	e7e4      	b.n	801253e <__pow5mult+0x6a>
 8012574:	4630      	mov	r0, r6
 8012576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801257a:	bf00      	nop
 801257c:	08014b38 	.word	0x08014b38
 8012580:	08014a5e 	.word	0x08014a5e
 8012584:	08014ade 	.word	0x08014ade

08012588 <__lshift>:
 8012588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801258c:	460c      	mov	r4, r1
 801258e:	6849      	ldr	r1, [r1, #4]
 8012590:	6923      	ldr	r3, [r4, #16]
 8012592:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012596:	68a3      	ldr	r3, [r4, #8]
 8012598:	4607      	mov	r7, r0
 801259a:	4691      	mov	r9, r2
 801259c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80125a0:	f108 0601 	add.w	r6, r8, #1
 80125a4:	42b3      	cmp	r3, r6
 80125a6:	db0b      	blt.n	80125c0 <__lshift+0x38>
 80125a8:	4638      	mov	r0, r7
 80125aa:	f7ff fd95 	bl	80120d8 <_Balloc>
 80125ae:	4605      	mov	r5, r0
 80125b0:	b948      	cbnz	r0, 80125c6 <__lshift+0x3e>
 80125b2:	4602      	mov	r2, r0
 80125b4:	4b28      	ldr	r3, [pc, #160]	@ (8012658 <__lshift+0xd0>)
 80125b6:	4829      	ldr	r0, [pc, #164]	@ (801265c <__lshift+0xd4>)
 80125b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80125bc:	f001 fb18 	bl	8013bf0 <__assert_func>
 80125c0:	3101      	adds	r1, #1
 80125c2:	005b      	lsls	r3, r3, #1
 80125c4:	e7ee      	b.n	80125a4 <__lshift+0x1c>
 80125c6:	2300      	movs	r3, #0
 80125c8:	f100 0114 	add.w	r1, r0, #20
 80125cc:	f100 0210 	add.w	r2, r0, #16
 80125d0:	4618      	mov	r0, r3
 80125d2:	4553      	cmp	r3, sl
 80125d4:	db33      	blt.n	801263e <__lshift+0xb6>
 80125d6:	6920      	ldr	r0, [r4, #16]
 80125d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80125dc:	f104 0314 	add.w	r3, r4, #20
 80125e0:	f019 091f 	ands.w	r9, r9, #31
 80125e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80125e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80125ec:	d02b      	beq.n	8012646 <__lshift+0xbe>
 80125ee:	f1c9 0e20 	rsb	lr, r9, #32
 80125f2:	468a      	mov	sl, r1
 80125f4:	2200      	movs	r2, #0
 80125f6:	6818      	ldr	r0, [r3, #0]
 80125f8:	fa00 f009 	lsl.w	r0, r0, r9
 80125fc:	4310      	orrs	r0, r2
 80125fe:	f84a 0b04 	str.w	r0, [sl], #4
 8012602:	f853 2b04 	ldr.w	r2, [r3], #4
 8012606:	459c      	cmp	ip, r3
 8012608:	fa22 f20e 	lsr.w	r2, r2, lr
 801260c:	d8f3      	bhi.n	80125f6 <__lshift+0x6e>
 801260e:	ebac 0304 	sub.w	r3, ip, r4
 8012612:	3b15      	subs	r3, #21
 8012614:	f023 0303 	bic.w	r3, r3, #3
 8012618:	3304      	adds	r3, #4
 801261a:	f104 0015 	add.w	r0, r4, #21
 801261e:	4584      	cmp	ip, r0
 8012620:	bf38      	it	cc
 8012622:	2304      	movcc	r3, #4
 8012624:	50ca      	str	r2, [r1, r3]
 8012626:	b10a      	cbz	r2, 801262c <__lshift+0xa4>
 8012628:	f108 0602 	add.w	r6, r8, #2
 801262c:	3e01      	subs	r6, #1
 801262e:	4638      	mov	r0, r7
 8012630:	612e      	str	r6, [r5, #16]
 8012632:	4621      	mov	r1, r4
 8012634:	f7ff fd90 	bl	8012158 <_Bfree>
 8012638:	4628      	mov	r0, r5
 801263a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801263e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012642:	3301      	adds	r3, #1
 8012644:	e7c5      	b.n	80125d2 <__lshift+0x4a>
 8012646:	3904      	subs	r1, #4
 8012648:	f853 2b04 	ldr.w	r2, [r3], #4
 801264c:	f841 2f04 	str.w	r2, [r1, #4]!
 8012650:	459c      	cmp	ip, r3
 8012652:	d8f9      	bhi.n	8012648 <__lshift+0xc0>
 8012654:	e7ea      	b.n	801262c <__lshift+0xa4>
 8012656:	bf00      	nop
 8012658:	08014acd 	.word	0x08014acd
 801265c:	08014ade 	.word	0x08014ade

08012660 <__mcmp>:
 8012660:	690a      	ldr	r2, [r1, #16]
 8012662:	4603      	mov	r3, r0
 8012664:	6900      	ldr	r0, [r0, #16]
 8012666:	1a80      	subs	r0, r0, r2
 8012668:	b530      	push	{r4, r5, lr}
 801266a:	d10e      	bne.n	801268a <__mcmp+0x2a>
 801266c:	3314      	adds	r3, #20
 801266e:	3114      	adds	r1, #20
 8012670:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012674:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012678:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801267c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012680:	4295      	cmp	r5, r2
 8012682:	d003      	beq.n	801268c <__mcmp+0x2c>
 8012684:	d205      	bcs.n	8012692 <__mcmp+0x32>
 8012686:	f04f 30ff 	mov.w	r0, #4294967295
 801268a:	bd30      	pop	{r4, r5, pc}
 801268c:	42a3      	cmp	r3, r4
 801268e:	d3f3      	bcc.n	8012678 <__mcmp+0x18>
 8012690:	e7fb      	b.n	801268a <__mcmp+0x2a>
 8012692:	2001      	movs	r0, #1
 8012694:	e7f9      	b.n	801268a <__mcmp+0x2a>
	...

08012698 <__mdiff>:
 8012698:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801269c:	4689      	mov	r9, r1
 801269e:	4606      	mov	r6, r0
 80126a0:	4611      	mov	r1, r2
 80126a2:	4648      	mov	r0, r9
 80126a4:	4614      	mov	r4, r2
 80126a6:	f7ff ffdb 	bl	8012660 <__mcmp>
 80126aa:	1e05      	subs	r5, r0, #0
 80126ac:	d112      	bne.n	80126d4 <__mdiff+0x3c>
 80126ae:	4629      	mov	r1, r5
 80126b0:	4630      	mov	r0, r6
 80126b2:	f7ff fd11 	bl	80120d8 <_Balloc>
 80126b6:	4602      	mov	r2, r0
 80126b8:	b928      	cbnz	r0, 80126c6 <__mdiff+0x2e>
 80126ba:	4b3f      	ldr	r3, [pc, #252]	@ (80127b8 <__mdiff+0x120>)
 80126bc:	f240 2137 	movw	r1, #567	@ 0x237
 80126c0:	483e      	ldr	r0, [pc, #248]	@ (80127bc <__mdiff+0x124>)
 80126c2:	f001 fa95 	bl	8013bf0 <__assert_func>
 80126c6:	2301      	movs	r3, #1
 80126c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80126cc:	4610      	mov	r0, r2
 80126ce:	b003      	add	sp, #12
 80126d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126d4:	bfbc      	itt	lt
 80126d6:	464b      	movlt	r3, r9
 80126d8:	46a1      	movlt	r9, r4
 80126da:	4630      	mov	r0, r6
 80126dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80126e0:	bfba      	itte	lt
 80126e2:	461c      	movlt	r4, r3
 80126e4:	2501      	movlt	r5, #1
 80126e6:	2500      	movge	r5, #0
 80126e8:	f7ff fcf6 	bl	80120d8 <_Balloc>
 80126ec:	4602      	mov	r2, r0
 80126ee:	b918      	cbnz	r0, 80126f8 <__mdiff+0x60>
 80126f0:	4b31      	ldr	r3, [pc, #196]	@ (80127b8 <__mdiff+0x120>)
 80126f2:	f240 2145 	movw	r1, #581	@ 0x245
 80126f6:	e7e3      	b.n	80126c0 <__mdiff+0x28>
 80126f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80126fc:	6926      	ldr	r6, [r4, #16]
 80126fe:	60c5      	str	r5, [r0, #12]
 8012700:	f109 0310 	add.w	r3, r9, #16
 8012704:	f109 0514 	add.w	r5, r9, #20
 8012708:	f104 0e14 	add.w	lr, r4, #20
 801270c:	f100 0b14 	add.w	fp, r0, #20
 8012710:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012714:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012718:	9301      	str	r3, [sp, #4]
 801271a:	46d9      	mov	r9, fp
 801271c:	f04f 0c00 	mov.w	ip, #0
 8012720:	9b01      	ldr	r3, [sp, #4]
 8012722:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012726:	f853 af04 	ldr.w	sl, [r3, #4]!
 801272a:	9301      	str	r3, [sp, #4]
 801272c:	fa1f f38a 	uxth.w	r3, sl
 8012730:	4619      	mov	r1, r3
 8012732:	b283      	uxth	r3, r0
 8012734:	1acb      	subs	r3, r1, r3
 8012736:	0c00      	lsrs	r0, r0, #16
 8012738:	4463      	add	r3, ip
 801273a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801273e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012742:	b29b      	uxth	r3, r3
 8012744:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012748:	4576      	cmp	r6, lr
 801274a:	f849 3b04 	str.w	r3, [r9], #4
 801274e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012752:	d8e5      	bhi.n	8012720 <__mdiff+0x88>
 8012754:	1b33      	subs	r3, r6, r4
 8012756:	3b15      	subs	r3, #21
 8012758:	f023 0303 	bic.w	r3, r3, #3
 801275c:	3415      	adds	r4, #21
 801275e:	3304      	adds	r3, #4
 8012760:	42a6      	cmp	r6, r4
 8012762:	bf38      	it	cc
 8012764:	2304      	movcc	r3, #4
 8012766:	441d      	add	r5, r3
 8012768:	445b      	add	r3, fp
 801276a:	461e      	mov	r6, r3
 801276c:	462c      	mov	r4, r5
 801276e:	4544      	cmp	r4, r8
 8012770:	d30e      	bcc.n	8012790 <__mdiff+0xf8>
 8012772:	f108 0103 	add.w	r1, r8, #3
 8012776:	1b49      	subs	r1, r1, r5
 8012778:	f021 0103 	bic.w	r1, r1, #3
 801277c:	3d03      	subs	r5, #3
 801277e:	45a8      	cmp	r8, r5
 8012780:	bf38      	it	cc
 8012782:	2100      	movcc	r1, #0
 8012784:	440b      	add	r3, r1
 8012786:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801278a:	b191      	cbz	r1, 80127b2 <__mdiff+0x11a>
 801278c:	6117      	str	r7, [r2, #16]
 801278e:	e79d      	b.n	80126cc <__mdiff+0x34>
 8012790:	f854 1b04 	ldr.w	r1, [r4], #4
 8012794:	46e6      	mov	lr, ip
 8012796:	0c08      	lsrs	r0, r1, #16
 8012798:	fa1c fc81 	uxtah	ip, ip, r1
 801279c:	4471      	add	r1, lr
 801279e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80127a2:	b289      	uxth	r1, r1
 80127a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80127a8:	f846 1b04 	str.w	r1, [r6], #4
 80127ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80127b0:	e7dd      	b.n	801276e <__mdiff+0xd6>
 80127b2:	3f01      	subs	r7, #1
 80127b4:	e7e7      	b.n	8012786 <__mdiff+0xee>
 80127b6:	bf00      	nop
 80127b8:	08014acd 	.word	0x08014acd
 80127bc:	08014ade 	.word	0x08014ade

080127c0 <__ulp>:
 80127c0:	b082      	sub	sp, #8
 80127c2:	ed8d 0b00 	vstr	d0, [sp]
 80127c6:	9a01      	ldr	r2, [sp, #4]
 80127c8:	4b0f      	ldr	r3, [pc, #60]	@ (8012808 <__ulp+0x48>)
 80127ca:	4013      	ands	r3, r2
 80127cc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	dc08      	bgt.n	80127e6 <__ulp+0x26>
 80127d4:	425b      	negs	r3, r3
 80127d6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80127da:	ea4f 5223 	mov.w	r2, r3, asr #20
 80127de:	da04      	bge.n	80127ea <__ulp+0x2a>
 80127e0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80127e4:	4113      	asrs	r3, r2
 80127e6:	2200      	movs	r2, #0
 80127e8:	e008      	b.n	80127fc <__ulp+0x3c>
 80127ea:	f1a2 0314 	sub.w	r3, r2, #20
 80127ee:	2b1e      	cmp	r3, #30
 80127f0:	bfda      	itte	le
 80127f2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80127f6:	40da      	lsrle	r2, r3
 80127f8:	2201      	movgt	r2, #1
 80127fa:	2300      	movs	r3, #0
 80127fc:	4619      	mov	r1, r3
 80127fe:	4610      	mov	r0, r2
 8012800:	ec41 0b10 	vmov	d0, r0, r1
 8012804:	b002      	add	sp, #8
 8012806:	4770      	bx	lr
 8012808:	7ff00000 	.word	0x7ff00000

0801280c <__b2d>:
 801280c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012810:	6906      	ldr	r6, [r0, #16]
 8012812:	f100 0814 	add.w	r8, r0, #20
 8012816:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801281a:	1f37      	subs	r7, r6, #4
 801281c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012820:	4610      	mov	r0, r2
 8012822:	f7ff fd4b 	bl	80122bc <__hi0bits>
 8012826:	f1c0 0320 	rsb	r3, r0, #32
 801282a:	280a      	cmp	r0, #10
 801282c:	600b      	str	r3, [r1, #0]
 801282e:	491b      	ldr	r1, [pc, #108]	@ (801289c <__b2d+0x90>)
 8012830:	dc15      	bgt.n	801285e <__b2d+0x52>
 8012832:	f1c0 0c0b 	rsb	ip, r0, #11
 8012836:	fa22 f30c 	lsr.w	r3, r2, ip
 801283a:	45b8      	cmp	r8, r7
 801283c:	ea43 0501 	orr.w	r5, r3, r1
 8012840:	bf34      	ite	cc
 8012842:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012846:	2300      	movcs	r3, #0
 8012848:	3015      	adds	r0, #21
 801284a:	fa02 f000 	lsl.w	r0, r2, r0
 801284e:	fa23 f30c 	lsr.w	r3, r3, ip
 8012852:	4303      	orrs	r3, r0
 8012854:	461c      	mov	r4, r3
 8012856:	ec45 4b10 	vmov	d0, r4, r5
 801285a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801285e:	45b8      	cmp	r8, r7
 8012860:	bf3a      	itte	cc
 8012862:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012866:	f1a6 0708 	subcc.w	r7, r6, #8
 801286a:	2300      	movcs	r3, #0
 801286c:	380b      	subs	r0, #11
 801286e:	d012      	beq.n	8012896 <__b2d+0x8a>
 8012870:	f1c0 0120 	rsb	r1, r0, #32
 8012874:	fa23 f401 	lsr.w	r4, r3, r1
 8012878:	4082      	lsls	r2, r0
 801287a:	4322      	orrs	r2, r4
 801287c:	4547      	cmp	r7, r8
 801287e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8012882:	bf8c      	ite	hi
 8012884:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012888:	2200      	movls	r2, #0
 801288a:	4083      	lsls	r3, r0
 801288c:	40ca      	lsrs	r2, r1
 801288e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012892:	4313      	orrs	r3, r2
 8012894:	e7de      	b.n	8012854 <__b2d+0x48>
 8012896:	ea42 0501 	orr.w	r5, r2, r1
 801289a:	e7db      	b.n	8012854 <__b2d+0x48>
 801289c:	3ff00000 	.word	0x3ff00000

080128a0 <__d2b>:
 80128a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80128a4:	460f      	mov	r7, r1
 80128a6:	2101      	movs	r1, #1
 80128a8:	ec59 8b10 	vmov	r8, r9, d0
 80128ac:	4616      	mov	r6, r2
 80128ae:	f7ff fc13 	bl	80120d8 <_Balloc>
 80128b2:	4604      	mov	r4, r0
 80128b4:	b930      	cbnz	r0, 80128c4 <__d2b+0x24>
 80128b6:	4602      	mov	r2, r0
 80128b8:	4b23      	ldr	r3, [pc, #140]	@ (8012948 <__d2b+0xa8>)
 80128ba:	4824      	ldr	r0, [pc, #144]	@ (801294c <__d2b+0xac>)
 80128bc:	f240 310f 	movw	r1, #783	@ 0x30f
 80128c0:	f001 f996 	bl	8013bf0 <__assert_func>
 80128c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80128c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80128cc:	b10d      	cbz	r5, 80128d2 <__d2b+0x32>
 80128ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80128d2:	9301      	str	r3, [sp, #4]
 80128d4:	f1b8 0300 	subs.w	r3, r8, #0
 80128d8:	d023      	beq.n	8012922 <__d2b+0x82>
 80128da:	4668      	mov	r0, sp
 80128dc:	9300      	str	r3, [sp, #0]
 80128de:	f7ff fd0c 	bl	80122fa <__lo0bits>
 80128e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80128e6:	b1d0      	cbz	r0, 801291e <__d2b+0x7e>
 80128e8:	f1c0 0320 	rsb	r3, r0, #32
 80128ec:	fa02 f303 	lsl.w	r3, r2, r3
 80128f0:	430b      	orrs	r3, r1
 80128f2:	40c2      	lsrs	r2, r0
 80128f4:	6163      	str	r3, [r4, #20]
 80128f6:	9201      	str	r2, [sp, #4]
 80128f8:	9b01      	ldr	r3, [sp, #4]
 80128fa:	61a3      	str	r3, [r4, #24]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	bf0c      	ite	eq
 8012900:	2201      	moveq	r2, #1
 8012902:	2202      	movne	r2, #2
 8012904:	6122      	str	r2, [r4, #16]
 8012906:	b1a5      	cbz	r5, 8012932 <__d2b+0x92>
 8012908:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801290c:	4405      	add	r5, r0
 801290e:	603d      	str	r5, [r7, #0]
 8012910:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012914:	6030      	str	r0, [r6, #0]
 8012916:	4620      	mov	r0, r4
 8012918:	b003      	add	sp, #12
 801291a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801291e:	6161      	str	r1, [r4, #20]
 8012920:	e7ea      	b.n	80128f8 <__d2b+0x58>
 8012922:	a801      	add	r0, sp, #4
 8012924:	f7ff fce9 	bl	80122fa <__lo0bits>
 8012928:	9b01      	ldr	r3, [sp, #4]
 801292a:	6163      	str	r3, [r4, #20]
 801292c:	3020      	adds	r0, #32
 801292e:	2201      	movs	r2, #1
 8012930:	e7e8      	b.n	8012904 <__d2b+0x64>
 8012932:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012936:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801293a:	6038      	str	r0, [r7, #0]
 801293c:	6918      	ldr	r0, [r3, #16]
 801293e:	f7ff fcbd 	bl	80122bc <__hi0bits>
 8012942:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012946:	e7e5      	b.n	8012914 <__d2b+0x74>
 8012948:	08014acd 	.word	0x08014acd
 801294c:	08014ade 	.word	0x08014ade

08012950 <__ratio>:
 8012950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012954:	b085      	sub	sp, #20
 8012956:	e9cd 1000 	strd	r1, r0, [sp]
 801295a:	a902      	add	r1, sp, #8
 801295c:	f7ff ff56 	bl	801280c <__b2d>
 8012960:	9800      	ldr	r0, [sp, #0]
 8012962:	a903      	add	r1, sp, #12
 8012964:	ec55 4b10 	vmov	r4, r5, d0
 8012968:	f7ff ff50 	bl	801280c <__b2d>
 801296c:	9b01      	ldr	r3, [sp, #4]
 801296e:	6919      	ldr	r1, [r3, #16]
 8012970:	9b00      	ldr	r3, [sp, #0]
 8012972:	691b      	ldr	r3, [r3, #16]
 8012974:	1ac9      	subs	r1, r1, r3
 8012976:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801297a:	1a9b      	subs	r3, r3, r2
 801297c:	ec5b ab10 	vmov	sl, fp, d0
 8012980:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012984:	2b00      	cmp	r3, #0
 8012986:	bfce      	itee	gt
 8012988:	462a      	movgt	r2, r5
 801298a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801298e:	465a      	movle	r2, fp
 8012990:	462f      	mov	r7, r5
 8012992:	46d9      	mov	r9, fp
 8012994:	bfcc      	ite	gt
 8012996:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801299a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801299e:	464b      	mov	r3, r9
 80129a0:	4652      	mov	r2, sl
 80129a2:	4620      	mov	r0, r4
 80129a4:	4639      	mov	r1, r7
 80129a6:	f7ed ff79 	bl	800089c <__aeabi_ddiv>
 80129aa:	ec41 0b10 	vmov	d0, r0, r1
 80129ae:	b005      	add	sp, #20
 80129b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080129b4 <__copybits>:
 80129b4:	3901      	subs	r1, #1
 80129b6:	b570      	push	{r4, r5, r6, lr}
 80129b8:	1149      	asrs	r1, r1, #5
 80129ba:	6914      	ldr	r4, [r2, #16]
 80129bc:	3101      	adds	r1, #1
 80129be:	f102 0314 	add.w	r3, r2, #20
 80129c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80129c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80129ca:	1f05      	subs	r5, r0, #4
 80129cc:	42a3      	cmp	r3, r4
 80129ce:	d30c      	bcc.n	80129ea <__copybits+0x36>
 80129d0:	1aa3      	subs	r3, r4, r2
 80129d2:	3b11      	subs	r3, #17
 80129d4:	f023 0303 	bic.w	r3, r3, #3
 80129d8:	3211      	adds	r2, #17
 80129da:	42a2      	cmp	r2, r4
 80129dc:	bf88      	it	hi
 80129de:	2300      	movhi	r3, #0
 80129e0:	4418      	add	r0, r3
 80129e2:	2300      	movs	r3, #0
 80129e4:	4288      	cmp	r0, r1
 80129e6:	d305      	bcc.n	80129f4 <__copybits+0x40>
 80129e8:	bd70      	pop	{r4, r5, r6, pc}
 80129ea:	f853 6b04 	ldr.w	r6, [r3], #4
 80129ee:	f845 6f04 	str.w	r6, [r5, #4]!
 80129f2:	e7eb      	b.n	80129cc <__copybits+0x18>
 80129f4:	f840 3b04 	str.w	r3, [r0], #4
 80129f8:	e7f4      	b.n	80129e4 <__copybits+0x30>

080129fa <__any_on>:
 80129fa:	f100 0214 	add.w	r2, r0, #20
 80129fe:	6900      	ldr	r0, [r0, #16]
 8012a00:	114b      	asrs	r3, r1, #5
 8012a02:	4298      	cmp	r0, r3
 8012a04:	b510      	push	{r4, lr}
 8012a06:	db11      	blt.n	8012a2c <__any_on+0x32>
 8012a08:	dd0a      	ble.n	8012a20 <__any_on+0x26>
 8012a0a:	f011 011f 	ands.w	r1, r1, #31
 8012a0e:	d007      	beq.n	8012a20 <__any_on+0x26>
 8012a10:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012a14:	fa24 f001 	lsr.w	r0, r4, r1
 8012a18:	fa00 f101 	lsl.w	r1, r0, r1
 8012a1c:	428c      	cmp	r4, r1
 8012a1e:	d10b      	bne.n	8012a38 <__any_on+0x3e>
 8012a20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012a24:	4293      	cmp	r3, r2
 8012a26:	d803      	bhi.n	8012a30 <__any_on+0x36>
 8012a28:	2000      	movs	r0, #0
 8012a2a:	bd10      	pop	{r4, pc}
 8012a2c:	4603      	mov	r3, r0
 8012a2e:	e7f7      	b.n	8012a20 <__any_on+0x26>
 8012a30:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012a34:	2900      	cmp	r1, #0
 8012a36:	d0f5      	beq.n	8012a24 <__any_on+0x2a>
 8012a38:	2001      	movs	r0, #1
 8012a3a:	e7f6      	b.n	8012a2a <__any_on+0x30>

08012a3c <sulp>:
 8012a3c:	b570      	push	{r4, r5, r6, lr}
 8012a3e:	4604      	mov	r4, r0
 8012a40:	460d      	mov	r5, r1
 8012a42:	ec45 4b10 	vmov	d0, r4, r5
 8012a46:	4616      	mov	r6, r2
 8012a48:	f7ff feba 	bl	80127c0 <__ulp>
 8012a4c:	ec51 0b10 	vmov	r0, r1, d0
 8012a50:	b17e      	cbz	r6, 8012a72 <sulp+0x36>
 8012a52:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012a56:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	dd09      	ble.n	8012a72 <sulp+0x36>
 8012a5e:	051b      	lsls	r3, r3, #20
 8012a60:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8012a64:	2400      	movs	r4, #0
 8012a66:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8012a6a:	4622      	mov	r2, r4
 8012a6c:	462b      	mov	r3, r5
 8012a6e:	f7ed fdeb 	bl	8000648 <__aeabi_dmul>
 8012a72:	ec41 0b10 	vmov	d0, r0, r1
 8012a76:	bd70      	pop	{r4, r5, r6, pc}

08012a78 <_strtod_l>:
 8012a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a7c:	b09f      	sub	sp, #124	@ 0x7c
 8012a7e:	460c      	mov	r4, r1
 8012a80:	9217      	str	r2, [sp, #92]	@ 0x5c
 8012a82:	2200      	movs	r2, #0
 8012a84:	921a      	str	r2, [sp, #104]	@ 0x68
 8012a86:	9005      	str	r0, [sp, #20]
 8012a88:	f04f 0a00 	mov.w	sl, #0
 8012a8c:	f04f 0b00 	mov.w	fp, #0
 8012a90:	460a      	mov	r2, r1
 8012a92:	9219      	str	r2, [sp, #100]	@ 0x64
 8012a94:	7811      	ldrb	r1, [r2, #0]
 8012a96:	292b      	cmp	r1, #43	@ 0x2b
 8012a98:	d04a      	beq.n	8012b30 <_strtod_l+0xb8>
 8012a9a:	d838      	bhi.n	8012b0e <_strtod_l+0x96>
 8012a9c:	290d      	cmp	r1, #13
 8012a9e:	d832      	bhi.n	8012b06 <_strtod_l+0x8e>
 8012aa0:	2908      	cmp	r1, #8
 8012aa2:	d832      	bhi.n	8012b0a <_strtod_l+0x92>
 8012aa4:	2900      	cmp	r1, #0
 8012aa6:	d03b      	beq.n	8012b20 <_strtod_l+0xa8>
 8012aa8:	2200      	movs	r2, #0
 8012aaa:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012aac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8012aae:	782a      	ldrb	r2, [r5, #0]
 8012ab0:	2a30      	cmp	r2, #48	@ 0x30
 8012ab2:	f040 80b3 	bne.w	8012c1c <_strtod_l+0x1a4>
 8012ab6:	786a      	ldrb	r2, [r5, #1]
 8012ab8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012abc:	2a58      	cmp	r2, #88	@ 0x58
 8012abe:	d16e      	bne.n	8012b9e <_strtod_l+0x126>
 8012ac0:	9302      	str	r3, [sp, #8]
 8012ac2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012ac4:	9301      	str	r3, [sp, #4]
 8012ac6:	ab1a      	add	r3, sp, #104	@ 0x68
 8012ac8:	9300      	str	r3, [sp, #0]
 8012aca:	4a8e      	ldr	r2, [pc, #568]	@ (8012d04 <_strtod_l+0x28c>)
 8012acc:	9805      	ldr	r0, [sp, #20]
 8012ace:	ab1b      	add	r3, sp, #108	@ 0x6c
 8012ad0:	a919      	add	r1, sp, #100	@ 0x64
 8012ad2:	f001 f927 	bl	8013d24 <__gethex>
 8012ad6:	f010 060f 	ands.w	r6, r0, #15
 8012ada:	4604      	mov	r4, r0
 8012adc:	d005      	beq.n	8012aea <_strtod_l+0x72>
 8012ade:	2e06      	cmp	r6, #6
 8012ae0:	d128      	bne.n	8012b34 <_strtod_l+0xbc>
 8012ae2:	3501      	adds	r5, #1
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	9519      	str	r5, [sp, #100]	@ 0x64
 8012ae8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012aea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	f040 858e 	bne.w	801360e <_strtod_l+0xb96>
 8012af2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012af4:	b1cb      	cbz	r3, 8012b2a <_strtod_l+0xb2>
 8012af6:	4652      	mov	r2, sl
 8012af8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8012afc:	ec43 2b10 	vmov	d0, r2, r3
 8012b00:	b01f      	add	sp, #124	@ 0x7c
 8012b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b06:	2920      	cmp	r1, #32
 8012b08:	d1ce      	bne.n	8012aa8 <_strtod_l+0x30>
 8012b0a:	3201      	adds	r2, #1
 8012b0c:	e7c1      	b.n	8012a92 <_strtod_l+0x1a>
 8012b0e:	292d      	cmp	r1, #45	@ 0x2d
 8012b10:	d1ca      	bne.n	8012aa8 <_strtod_l+0x30>
 8012b12:	2101      	movs	r1, #1
 8012b14:	910b      	str	r1, [sp, #44]	@ 0x2c
 8012b16:	1c51      	adds	r1, r2, #1
 8012b18:	9119      	str	r1, [sp, #100]	@ 0x64
 8012b1a:	7852      	ldrb	r2, [r2, #1]
 8012b1c:	2a00      	cmp	r2, #0
 8012b1e:	d1c5      	bne.n	8012aac <_strtod_l+0x34>
 8012b20:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012b22:	9419      	str	r4, [sp, #100]	@ 0x64
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	f040 8570 	bne.w	801360a <_strtod_l+0xb92>
 8012b2a:	4652      	mov	r2, sl
 8012b2c:	465b      	mov	r3, fp
 8012b2e:	e7e5      	b.n	8012afc <_strtod_l+0x84>
 8012b30:	2100      	movs	r1, #0
 8012b32:	e7ef      	b.n	8012b14 <_strtod_l+0x9c>
 8012b34:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8012b36:	b13a      	cbz	r2, 8012b48 <_strtod_l+0xd0>
 8012b38:	2135      	movs	r1, #53	@ 0x35
 8012b3a:	a81c      	add	r0, sp, #112	@ 0x70
 8012b3c:	f7ff ff3a 	bl	80129b4 <__copybits>
 8012b40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012b42:	9805      	ldr	r0, [sp, #20]
 8012b44:	f7ff fb08 	bl	8012158 <_Bfree>
 8012b48:	3e01      	subs	r6, #1
 8012b4a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8012b4c:	2e04      	cmp	r6, #4
 8012b4e:	d806      	bhi.n	8012b5e <_strtod_l+0xe6>
 8012b50:	e8df f006 	tbb	[pc, r6]
 8012b54:	201d0314 	.word	0x201d0314
 8012b58:	14          	.byte	0x14
 8012b59:	00          	.byte	0x00
 8012b5a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8012b5e:	05e1      	lsls	r1, r4, #23
 8012b60:	bf48      	it	mi
 8012b62:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8012b66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012b6a:	0d1b      	lsrs	r3, r3, #20
 8012b6c:	051b      	lsls	r3, r3, #20
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d1bb      	bne.n	8012aea <_strtod_l+0x72>
 8012b72:	f7fe fb2f 	bl	80111d4 <__errno>
 8012b76:	2322      	movs	r3, #34	@ 0x22
 8012b78:	6003      	str	r3, [r0, #0]
 8012b7a:	e7b6      	b.n	8012aea <_strtod_l+0x72>
 8012b7c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8012b80:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8012b84:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8012b88:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012b8c:	e7e7      	b.n	8012b5e <_strtod_l+0xe6>
 8012b8e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8012d0c <_strtod_l+0x294>
 8012b92:	e7e4      	b.n	8012b5e <_strtod_l+0xe6>
 8012b94:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8012b98:	f04f 3aff 	mov.w	sl, #4294967295
 8012b9c:	e7df      	b.n	8012b5e <_strtod_l+0xe6>
 8012b9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012ba0:	1c5a      	adds	r2, r3, #1
 8012ba2:	9219      	str	r2, [sp, #100]	@ 0x64
 8012ba4:	785b      	ldrb	r3, [r3, #1]
 8012ba6:	2b30      	cmp	r3, #48	@ 0x30
 8012ba8:	d0f9      	beq.n	8012b9e <_strtod_l+0x126>
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d09d      	beq.n	8012aea <_strtod_l+0x72>
 8012bae:	2301      	movs	r3, #1
 8012bb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8012bb2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012bb4:	930c      	str	r3, [sp, #48]	@ 0x30
 8012bb6:	2300      	movs	r3, #0
 8012bb8:	9308      	str	r3, [sp, #32]
 8012bba:	930a      	str	r3, [sp, #40]	@ 0x28
 8012bbc:	461f      	mov	r7, r3
 8012bbe:	220a      	movs	r2, #10
 8012bc0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8012bc2:	7805      	ldrb	r5, [r0, #0]
 8012bc4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8012bc8:	b2d9      	uxtb	r1, r3
 8012bca:	2909      	cmp	r1, #9
 8012bcc:	d928      	bls.n	8012c20 <_strtod_l+0x1a8>
 8012bce:	494e      	ldr	r1, [pc, #312]	@ (8012d08 <_strtod_l+0x290>)
 8012bd0:	2201      	movs	r2, #1
 8012bd2:	f000 ffd5 	bl	8013b80 <strncmp>
 8012bd6:	2800      	cmp	r0, #0
 8012bd8:	d032      	beq.n	8012c40 <_strtod_l+0x1c8>
 8012bda:	2000      	movs	r0, #0
 8012bdc:	462a      	mov	r2, r5
 8012bde:	4681      	mov	r9, r0
 8012be0:	463d      	mov	r5, r7
 8012be2:	4603      	mov	r3, r0
 8012be4:	2a65      	cmp	r2, #101	@ 0x65
 8012be6:	d001      	beq.n	8012bec <_strtod_l+0x174>
 8012be8:	2a45      	cmp	r2, #69	@ 0x45
 8012bea:	d114      	bne.n	8012c16 <_strtod_l+0x19e>
 8012bec:	b91d      	cbnz	r5, 8012bf6 <_strtod_l+0x17e>
 8012bee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012bf0:	4302      	orrs	r2, r0
 8012bf2:	d095      	beq.n	8012b20 <_strtod_l+0xa8>
 8012bf4:	2500      	movs	r5, #0
 8012bf6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8012bf8:	1c62      	adds	r2, r4, #1
 8012bfa:	9219      	str	r2, [sp, #100]	@ 0x64
 8012bfc:	7862      	ldrb	r2, [r4, #1]
 8012bfe:	2a2b      	cmp	r2, #43	@ 0x2b
 8012c00:	d077      	beq.n	8012cf2 <_strtod_l+0x27a>
 8012c02:	2a2d      	cmp	r2, #45	@ 0x2d
 8012c04:	d07b      	beq.n	8012cfe <_strtod_l+0x286>
 8012c06:	f04f 0c00 	mov.w	ip, #0
 8012c0a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8012c0e:	2909      	cmp	r1, #9
 8012c10:	f240 8082 	bls.w	8012d18 <_strtod_l+0x2a0>
 8012c14:	9419      	str	r4, [sp, #100]	@ 0x64
 8012c16:	f04f 0800 	mov.w	r8, #0
 8012c1a:	e0a2      	b.n	8012d62 <_strtod_l+0x2ea>
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	e7c7      	b.n	8012bb0 <_strtod_l+0x138>
 8012c20:	2f08      	cmp	r7, #8
 8012c22:	bfd5      	itete	le
 8012c24:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8012c26:	9908      	ldrgt	r1, [sp, #32]
 8012c28:	fb02 3301 	mlale	r3, r2, r1, r3
 8012c2c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8012c30:	f100 0001 	add.w	r0, r0, #1
 8012c34:	bfd4      	ite	le
 8012c36:	930a      	strle	r3, [sp, #40]	@ 0x28
 8012c38:	9308      	strgt	r3, [sp, #32]
 8012c3a:	3701      	adds	r7, #1
 8012c3c:	9019      	str	r0, [sp, #100]	@ 0x64
 8012c3e:	e7bf      	b.n	8012bc0 <_strtod_l+0x148>
 8012c40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012c42:	1c5a      	adds	r2, r3, #1
 8012c44:	9219      	str	r2, [sp, #100]	@ 0x64
 8012c46:	785a      	ldrb	r2, [r3, #1]
 8012c48:	b37f      	cbz	r7, 8012caa <_strtod_l+0x232>
 8012c4a:	4681      	mov	r9, r0
 8012c4c:	463d      	mov	r5, r7
 8012c4e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8012c52:	2b09      	cmp	r3, #9
 8012c54:	d912      	bls.n	8012c7c <_strtod_l+0x204>
 8012c56:	2301      	movs	r3, #1
 8012c58:	e7c4      	b.n	8012be4 <_strtod_l+0x16c>
 8012c5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012c5c:	1c5a      	adds	r2, r3, #1
 8012c5e:	9219      	str	r2, [sp, #100]	@ 0x64
 8012c60:	785a      	ldrb	r2, [r3, #1]
 8012c62:	3001      	adds	r0, #1
 8012c64:	2a30      	cmp	r2, #48	@ 0x30
 8012c66:	d0f8      	beq.n	8012c5a <_strtod_l+0x1e2>
 8012c68:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8012c6c:	2b08      	cmp	r3, #8
 8012c6e:	f200 84d3 	bhi.w	8013618 <_strtod_l+0xba0>
 8012c72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012c74:	930c      	str	r3, [sp, #48]	@ 0x30
 8012c76:	4681      	mov	r9, r0
 8012c78:	2000      	movs	r0, #0
 8012c7a:	4605      	mov	r5, r0
 8012c7c:	3a30      	subs	r2, #48	@ 0x30
 8012c7e:	f100 0301 	add.w	r3, r0, #1
 8012c82:	d02a      	beq.n	8012cda <_strtod_l+0x262>
 8012c84:	4499      	add	r9, r3
 8012c86:	eb00 0c05 	add.w	ip, r0, r5
 8012c8a:	462b      	mov	r3, r5
 8012c8c:	210a      	movs	r1, #10
 8012c8e:	4563      	cmp	r3, ip
 8012c90:	d10d      	bne.n	8012cae <_strtod_l+0x236>
 8012c92:	1c69      	adds	r1, r5, #1
 8012c94:	4401      	add	r1, r0
 8012c96:	4428      	add	r0, r5
 8012c98:	2808      	cmp	r0, #8
 8012c9a:	dc16      	bgt.n	8012cca <_strtod_l+0x252>
 8012c9c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8012c9e:	230a      	movs	r3, #10
 8012ca0:	fb03 2300 	mla	r3, r3, r0, r2
 8012ca4:	930a      	str	r3, [sp, #40]	@ 0x28
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	e018      	b.n	8012cdc <_strtod_l+0x264>
 8012caa:	4638      	mov	r0, r7
 8012cac:	e7da      	b.n	8012c64 <_strtod_l+0x1ec>
 8012cae:	2b08      	cmp	r3, #8
 8012cb0:	f103 0301 	add.w	r3, r3, #1
 8012cb4:	dc03      	bgt.n	8012cbe <_strtod_l+0x246>
 8012cb6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8012cb8:	434e      	muls	r6, r1
 8012cba:	960a      	str	r6, [sp, #40]	@ 0x28
 8012cbc:	e7e7      	b.n	8012c8e <_strtod_l+0x216>
 8012cbe:	2b10      	cmp	r3, #16
 8012cc0:	bfde      	ittt	le
 8012cc2:	9e08      	ldrle	r6, [sp, #32]
 8012cc4:	434e      	mulle	r6, r1
 8012cc6:	9608      	strle	r6, [sp, #32]
 8012cc8:	e7e1      	b.n	8012c8e <_strtod_l+0x216>
 8012cca:	280f      	cmp	r0, #15
 8012ccc:	dceb      	bgt.n	8012ca6 <_strtod_l+0x22e>
 8012cce:	9808      	ldr	r0, [sp, #32]
 8012cd0:	230a      	movs	r3, #10
 8012cd2:	fb03 2300 	mla	r3, r3, r0, r2
 8012cd6:	9308      	str	r3, [sp, #32]
 8012cd8:	e7e5      	b.n	8012ca6 <_strtod_l+0x22e>
 8012cda:	4629      	mov	r1, r5
 8012cdc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012cde:	1c50      	adds	r0, r2, #1
 8012ce0:	9019      	str	r0, [sp, #100]	@ 0x64
 8012ce2:	7852      	ldrb	r2, [r2, #1]
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	460d      	mov	r5, r1
 8012ce8:	e7b1      	b.n	8012c4e <_strtod_l+0x1d6>
 8012cea:	f04f 0900 	mov.w	r9, #0
 8012cee:	2301      	movs	r3, #1
 8012cf0:	e77d      	b.n	8012bee <_strtod_l+0x176>
 8012cf2:	f04f 0c00 	mov.w	ip, #0
 8012cf6:	1ca2      	adds	r2, r4, #2
 8012cf8:	9219      	str	r2, [sp, #100]	@ 0x64
 8012cfa:	78a2      	ldrb	r2, [r4, #2]
 8012cfc:	e785      	b.n	8012c0a <_strtod_l+0x192>
 8012cfe:	f04f 0c01 	mov.w	ip, #1
 8012d02:	e7f8      	b.n	8012cf6 <_strtod_l+0x27e>
 8012d04:	08014c50 	.word	0x08014c50
 8012d08:	08014c38 	.word	0x08014c38
 8012d0c:	7ff00000 	.word	0x7ff00000
 8012d10:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012d12:	1c51      	adds	r1, r2, #1
 8012d14:	9119      	str	r1, [sp, #100]	@ 0x64
 8012d16:	7852      	ldrb	r2, [r2, #1]
 8012d18:	2a30      	cmp	r2, #48	@ 0x30
 8012d1a:	d0f9      	beq.n	8012d10 <_strtod_l+0x298>
 8012d1c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8012d20:	2908      	cmp	r1, #8
 8012d22:	f63f af78 	bhi.w	8012c16 <_strtod_l+0x19e>
 8012d26:	3a30      	subs	r2, #48	@ 0x30
 8012d28:	920e      	str	r2, [sp, #56]	@ 0x38
 8012d2a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012d2c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8012d2e:	f04f 080a 	mov.w	r8, #10
 8012d32:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012d34:	1c56      	adds	r6, r2, #1
 8012d36:	9619      	str	r6, [sp, #100]	@ 0x64
 8012d38:	7852      	ldrb	r2, [r2, #1]
 8012d3a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8012d3e:	f1be 0f09 	cmp.w	lr, #9
 8012d42:	d939      	bls.n	8012db8 <_strtod_l+0x340>
 8012d44:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012d46:	1a76      	subs	r6, r6, r1
 8012d48:	2e08      	cmp	r6, #8
 8012d4a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8012d4e:	dc03      	bgt.n	8012d58 <_strtod_l+0x2e0>
 8012d50:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8012d52:	4588      	cmp	r8, r1
 8012d54:	bfa8      	it	ge
 8012d56:	4688      	movge	r8, r1
 8012d58:	f1bc 0f00 	cmp.w	ip, #0
 8012d5c:	d001      	beq.n	8012d62 <_strtod_l+0x2ea>
 8012d5e:	f1c8 0800 	rsb	r8, r8, #0
 8012d62:	2d00      	cmp	r5, #0
 8012d64:	d14e      	bne.n	8012e04 <_strtod_l+0x38c>
 8012d66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012d68:	4308      	orrs	r0, r1
 8012d6a:	f47f aebe 	bne.w	8012aea <_strtod_l+0x72>
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	f47f aed6 	bne.w	8012b20 <_strtod_l+0xa8>
 8012d74:	2a69      	cmp	r2, #105	@ 0x69
 8012d76:	d028      	beq.n	8012dca <_strtod_l+0x352>
 8012d78:	dc25      	bgt.n	8012dc6 <_strtod_l+0x34e>
 8012d7a:	2a49      	cmp	r2, #73	@ 0x49
 8012d7c:	d025      	beq.n	8012dca <_strtod_l+0x352>
 8012d7e:	2a4e      	cmp	r2, #78	@ 0x4e
 8012d80:	f47f aece 	bne.w	8012b20 <_strtod_l+0xa8>
 8012d84:	499b      	ldr	r1, [pc, #620]	@ (8012ff4 <_strtod_l+0x57c>)
 8012d86:	a819      	add	r0, sp, #100	@ 0x64
 8012d88:	f001 f9ee 	bl	8014168 <__match>
 8012d8c:	2800      	cmp	r0, #0
 8012d8e:	f43f aec7 	beq.w	8012b20 <_strtod_l+0xa8>
 8012d92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012d94:	781b      	ldrb	r3, [r3, #0]
 8012d96:	2b28      	cmp	r3, #40	@ 0x28
 8012d98:	d12e      	bne.n	8012df8 <_strtod_l+0x380>
 8012d9a:	4997      	ldr	r1, [pc, #604]	@ (8012ff8 <_strtod_l+0x580>)
 8012d9c:	aa1c      	add	r2, sp, #112	@ 0x70
 8012d9e:	a819      	add	r0, sp, #100	@ 0x64
 8012da0:	f001 f9f6 	bl	8014190 <__hexnan>
 8012da4:	2805      	cmp	r0, #5
 8012da6:	d127      	bne.n	8012df8 <_strtod_l+0x380>
 8012da8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012daa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8012dae:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8012db2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8012db6:	e698      	b.n	8012aea <_strtod_l+0x72>
 8012db8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8012dba:	fb08 2101 	mla	r1, r8, r1, r2
 8012dbe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8012dc2:	920e      	str	r2, [sp, #56]	@ 0x38
 8012dc4:	e7b5      	b.n	8012d32 <_strtod_l+0x2ba>
 8012dc6:	2a6e      	cmp	r2, #110	@ 0x6e
 8012dc8:	e7da      	b.n	8012d80 <_strtod_l+0x308>
 8012dca:	498c      	ldr	r1, [pc, #560]	@ (8012ffc <_strtod_l+0x584>)
 8012dcc:	a819      	add	r0, sp, #100	@ 0x64
 8012dce:	f001 f9cb 	bl	8014168 <__match>
 8012dd2:	2800      	cmp	r0, #0
 8012dd4:	f43f aea4 	beq.w	8012b20 <_strtod_l+0xa8>
 8012dd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012dda:	4989      	ldr	r1, [pc, #548]	@ (8013000 <_strtod_l+0x588>)
 8012ddc:	3b01      	subs	r3, #1
 8012dde:	a819      	add	r0, sp, #100	@ 0x64
 8012de0:	9319      	str	r3, [sp, #100]	@ 0x64
 8012de2:	f001 f9c1 	bl	8014168 <__match>
 8012de6:	b910      	cbnz	r0, 8012dee <_strtod_l+0x376>
 8012de8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012dea:	3301      	adds	r3, #1
 8012dec:	9319      	str	r3, [sp, #100]	@ 0x64
 8012dee:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8013010 <_strtod_l+0x598>
 8012df2:	f04f 0a00 	mov.w	sl, #0
 8012df6:	e678      	b.n	8012aea <_strtod_l+0x72>
 8012df8:	4882      	ldr	r0, [pc, #520]	@ (8013004 <_strtod_l+0x58c>)
 8012dfa:	f000 fef1 	bl	8013be0 <nan>
 8012dfe:	ec5b ab10 	vmov	sl, fp, d0
 8012e02:	e672      	b.n	8012aea <_strtod_l+0x72>
 8012e04:	eba8 0309 	sub.w	r3, r8, r9
 8012e08:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8012e0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8012e0c:	2f00      	cmp	r7, #0
 8012e0e:	bf08      	it	eq
 8012e10:	462f      	moveq	r7, r5
 8012e12:	2d10      	cmp	r5, #16
 8012e14:	462c      	mov	r4, r5
 8012e16:	bfa8      	it	ge
 8012e18:	2410      	movge	r4, #16
 8012e1a:	f7ed fb9b 	bl	8000554 <__aeabi_ui2d>
 8012e1e:	2d09      	cmp	r5, #9
 8012e20:	4682      	mov	sl, r0
 8012e22:	468b      	mov	fp, r1
 8012e24:	dc13      	bgt.n	8012e4e <_strtod_l+0x3d6>
 8012e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	f43f ae5e 	beq.w	8012aea <_strtod_l+0x72>
 8012e2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e30:	dd78      	ble.n	8012f24 <_strtod_l+0x4ac>
 8012e32:	2b16      	cmp	r3, #22
 8012e34:	dc5f      	bgt.n	8012ef6 <_strtod_l+0x47e>
 8012e36:	4974      	ldr	r1, [pc, #464]	@ (8013008 <_strtod_l+0x590>)
 8012e38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012e3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012e40:	4652      	mov	r2, sl
 8012e42:	465b      	mov	r3, fp
 8012e44:	f7ed fc00 	bl	8000648 <__aeabi_dmul>
 8012e48:	4682      	mov	sl, r0
 8012e4a:	468b      	mov	fp, r1
 8012e4c:	e64d      	b.n	8012aea <_strtod_l+0x72>
 8012e4e:	4b6e      	ldr	r3, [pc, #440]	@ (8013008 <_strtod_l+0x590>)
 8012e50:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012e54:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8012e58:	f7ed fbf6 	bl	8000648 <__aeabi_dmul>
 8012e5c:	4682      	mov	sl, r0
 8012e5e:	9808      	ldr	r0, [sp, #32]
 8012e60:	468b      	mov	fp, r1
 8012e62:	f7ed fb77 	bl	8000554 <__aeabi_ui2d>
 8012e66:	4602      	mov	r2, r0
 8012e68:	460b      	mov	r3, r1
 8012e6a:	4650      	mov	r0, sl
 8012e6c:	4659      	mov	r1, fp
 8012e6e:	f7ed fa35 	bl	80002dc <__adddf3>
 8012e72:	2d0f      	cmp	r5, #15
 8012e74:	4682      	mov	sl, r0
 8012e76:	468b      	mov	fp, r1
 8012e78:	ddd5      	ble.n	8012e26 <_strtod_l+0x3ae>
 8012e7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e7c:	1b2c      	subs	r4, r5, r4
 8012e7e:	441c      	add	r4, r3
 8012e80:	2c00      	cmp	r4, #0
 8012e82:	f340 8096 	ble.w	8012fb2 <_strtod_l+0x53a>
 8012e86:	f014 030f 	ands.w	r3, r4, #15
 8012e8a:	d00a      	beq.n	8012ea2 <_strtod_l+0x42a>
 8012e8c:	495e      	ldr	r1, [pc, #376]	@ (8013008 <_strtod_l+0x590>)
 8012e8e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012e92:	4652      	mov	r2, sl
 8012e94:	465b      	mov	r3, fp
 8012e96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012e9a:	f7ed fbd5 	bl	8000648 <__aeabi_dmul>
 8012e9e:	4682      	mov	sl, r0
 8012ea0:	468b      	mov	fp, r1
 8012ea2:	f034 040f 	bics.w	r4, r4, #15
 8012ea6:	d073      	beq.n	8012f90 <_strtod_l+0x518>
 8012ea8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8012eac:	dd48      	ble.n	8012f40 <_strtod_l+0x4c8>
 8012eae:	2400      	movs	r4, #0
 8012eb0:	46a0      	mov	r8, r4
 8012eb2:	940a      	str	r4, [sp, #40]	@ 0x28
 8012eb4:	46a1      	mov	r9, r4
 8012eb6:	9a05      	ldr	r2, [sp, #20]
 8012eb8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8013010 <_strtod_l+0x598>
 8012ebc:	2322      	movs	r3, #34	@ 0x22
 8012ebe:	6013      	str	r3, [r2, #0]
 8012ec0:	f04f 0a00 	mov.w	sl, #0
 8012ec4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	f43f ae0f 	beq.w	8012aea <_strtod_l+0x72>
 8012ecc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012ece:	9805      	ldr	r0, [sp, #20]
 8012ed0:	f7ff f942 	bl	8012158 <_Bfree>
 8012ed4:	9805      	ldr	r0, [sp, #20]
 8012ed6:	4649      	mov	r1, r9
 8012ed8:	f7ff f93e 	bl	8012158 <_Bfree>
 8012edc:	9805      	ldr	r0, [sp, #20]
 8012ede:	4641      	mov	r1, r8
 8012ee0:	f7ff f93a 	bl	8012158 <_Bfree>
 8012ee4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012ee6:	9805      	ldr	r0, [sp, #20]
 8012ee8:	f7ff f936 	bl	8012158 <_Bfree>
 8012eec:	9805      	ldr	r0, [sp, #20]
 8012eee:	4621      	mov	r1, r4
 8012ef0:	f7ff f932 	bl	8012158 <_Bfree>
 8012ef4:	e5f9      	b.n	8012aea <_strtod_l+0x72>
 8012ef6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012ef8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8012efc:	4293      	cmp	r3, r2
 8012efe:	dbbc      	blt.n	8012e7a <_strtod_l+0x402>
 8012f00:	4c41      	ldr	r4, [pc, #260]	@ (8013008 <_strtod_l+0x590>)
 8012f02:	f1c5 050f 	rsb	r5, r5, #15
 8012f06:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8012f0a:	4652      	mov	r2, sl
 8012f0c:	465b      	mov	r3, fp
 8012f0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f12:	f7ed fb99 	bl	8000648 <__aeabi_dmul>
 8012f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f18:	1b5d      	subs	r5, r3, r5
 8012f1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8012f1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012f22:	e78f      	b.n	8012e44 <_strtod_l+0x3cc>
 8012f24:	3316      	adds	r3, #22
 8012f26:	dba8      	blt.n	8012e7a <_strtod_l+0x402>
 8012f28:	4b37      	ldr	r3, [pc, #220]	@ (8013008 <_strtod_l+0x590>)
 8012f2a:	eba9 0808 	sub.w	r8, r9, r8
 8012f2e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8012f32:	e9d8 2300 	ldrd	r2, r3, [r8]
 8012f36:	4650      	mov	r0, sl
 8012f38:	4659      	mov	r1, fp
 8012f3a:	f7ed fcaf 	bl	800089c <__aeabi_ddiv>
 8012f3e:	e783      	b.n	8012e48 <_strtod_l+0x3d0>
 8012f40:	4b32      	ldr	r3, [pc, #200]	@ (801300c <_strtod_l+0x594>)
 8012f42:	9308      	str	r3, [sp, #32]
 8012f44:	2300      	movs	r3, #0
 8012f46:	1124      	asrs	r4, r4, #4
 8012f48:	4650      	mov	r0, sl
 8012f4a:	4659      	mov	r1, fp
 8012f4c:	461e      	mov	r6, r3
 8012f4e:	2c01      	cmp	r4, #1
 8012f50:	dc21      	bgt.n	8012f96 <_strtod_l+0x51e>
 8012f52:	b10b      	cbz	r3, 8012f58 <_strtod_l+0x4e0>
 8012f54:	4682      	mov	sl, r0
 8012f56:	468b      	mov	fp, r1
 8012f58:	492c      	ldr	r1, [pc, #176]	@ (801300c <_strtod_l+0x594>)
 8012f5a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8012f5e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8012f62:	4652      	mov	r2, sl
 8012f64:	465b      	mov	r3, fp
 8012f66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f6a:	f7ed fb6d 	bl	8000648 <__aeabi_dmul>
 8012f6e:	4b28      	ldr	r3, [pc, #160]	@ (8013010 <_strtod_l+0x598>)
 8012f70:	460a      	mov	r2, r1
 8012f72:	400b      	ands	r3, r1
 8012f74:	4927      	ldr	r1, [pc, #156]	@ (8013014 <_strtod_l+0x59c>)
 8012f76:	428b      	cmp	r3, r1
 8012f78:	4682      	mov	sl, r0
 8012f7a:	d898      	bhi.n	8012eae <_strtod_l+0x436>
 8012f7c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8012f80:	428b      	cmp	r3, r1
 8012f82:	bf86      	itte	hi
 8012f84:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8013018 <_strtod_l+0x5a0>
 8012f88:	f04f 3aff 	movhi.w	sl, #4294967295
 8012f8c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8012f90:	2300      	movs	r3, #0
 8012f92:	9308      	str	r3, [sp, #32]
 8012f94:	e07a      	b.n	801308c <_strtod_l+0x614>
 8012f96:	07e2      	lsls	r2, r4, #31
 8012f98:	d505      	bpl.n	8012fa6 <_strtod_l+0x52e>
 8012f9a:	9b08      	ldr	r3, [sp, #32]
 8012f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fa0:	f7ed fb52 	bl	8000648 <__aeabi_dmul>
 8012fa4:	2301      	movs	r3, #1
 8012fa6:	9a08      	ldr	r2, [sp, #32]
 8012fa8:	3208      	adds	r2, #8
 8012faa:	3601      	adds	r6, #1
 8012fac:	1064      	asrs	r4, r4, #1
 8012fae:	9208      	str	r2, [sp, #32]
 8012fb0:	e7cd      	b.n	8012f4e <_strtod_l+0x4d6>
 8012fb2:	d0ed      	beq.n	8012f90 <_strtod_l+0x518>
 8012fb4:	4264      	negs	r4, r4
 8012fb6:	f014 020f 	ands.w	r2, r4, #15
 8012fba:	d00a      	beq.n	8012fd2 <_strtod_l+0x55a>
 8012fbc:	4b12      	ldr	r3, [pc, #72]	@ (8013008 <_strtod_l+0x590>)
 8012fbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012fc2:	4650      	mov	r0, sl
 8012fc4:	4659      	mov	r1, fp
 8012fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fca:	f7ed fc67 	bl	800089c <__aeabi_ddiv>
 8012fce:	4682      	mov	sl, r0
 8012fd0:	468b      	mov	fp, r1
 8012fd2:	1124      	asrs	r4, r4, #4
 8012fd4:	d0dc      	beq.n	8012f90 <_strtod_l+0x518>
 8012fd6:	2c1f      	cmp	r4, #31
 8012fd8:	dd20      	ble.n	801301c <_strtod_l+0x5a4>
 8012fda:	2400      	movs	r4, #0
 8012fdc:	46a0      	mov	r8, r4
 8012fde:	940a      	str	r4, [sp, #40]	@ 0x28
 8012fe0:	46a1      	mov	r9, r4
 8012fe2:	9a05      	ldr	r2, [sp, #20]
 8012fe4:	2322      	movs	r3, #34	@ 0x22
 8012fe6:	f04f 0a00 	mov.w	sl, #0
 8012fea:	f04f 0b00 	mov.w	fp, #0
 8012fee:	6013      	str	r3, [r2, #0]
 8012ff0:	e768      	b.n	8012ec4 <_strtod_l+0x44c>
 8012ff2:	bf00      	nop
 8012ff4:	08014a25 	.word	0x08014a25
 8012ff8:	08014c3c 	.word	0x08014c3c
 8012ffc:	08014a1d 	.word	0x08014a1d
 8013000:	08014a54 	.word	0x08014a54
 8013004:	08014de5 	.word	0x08014de5
 8013008:	08014b70 	.word	0x08014b70
 801300c:	08014b48 	.word	0x08014b48
 8013010:	7ff00000 	.word	0x7ff00000
 8013014:	7ca00000 	.word	0x7ca00000
 8013018:	7fefffff 	.word	0x7fefffff
 801301c:	f014 0310 	ands.w	r3, r4, #16
 8013020:	bf18      	it	ne
 8013022:	236a      	movne	r3, #106	@ 0x6a
 8013024:	4ea9      	ldr	r6, [pc, #676]	@ (80132cc <_strtod_l+0x854>)
 8013026:	9308      	str	r3, [sp, #32]
 8013028:	4650      	mov	r0, sl
 801302a:	4659      	mov	r1, fp
 801302c:	2300      	movs	r3, #0
 801302e:	07e2      	lsls	r2, r4, #31
 8013030:	d504      	bpl.n	801303c <_strtod_l+0x5c4>
 8013032:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013036:	f7ed fb07 	bl	8000648 <__aeabi_dmul>
 801303a:	2301      	movs	r3, #1
 801303c:	1064      	asrs	r4, r4, #1
 801303e:	f106 0608 	add.w	r6, r6, #8
 8013042:	d1f4      	bne.n	801302e <_strtod_l+0x5b6>
 8013044:	b10b      	cbz	r3, 801304a <_strtod_l+0x5d2>
 8013046:	4682      	mov	sl, r0
 8013048:	468b      	mov	fp, r1
 801304a:	9b08      	ldr	r3, [sp, #32]
 801304c:	b1b3      	cbz	r3, 801307c <_strtod_l+0x604>
 801304e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8013052:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8013056:	2b00      	cmp	r3, #0
 8013058:	4659      	mov	r1, fp
 801305a:	dd0f      	ble.n	801307c <_strtod_l+0x604>
 801305c:	2b1f      	cmp	r3, #31
 801305e:	dd55      	ble.n	801310c <_strtod_l+0x694>
 8013060:	2b34      	cmp	r3, #52	@ 0x34
 8013062:	bfde      	ittt	le
 8013064:	f04f 33ff 	movle.w	r3, #4294967295
 8013068:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801306c:	4093      	lslle	r3, r2
 801306e:	f04f 0a00 	mov.w	sl, #0
 8013072:	bfcc      	ite	gt
 8013074:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8013078:	ea03 0b01 	andle.w	fp, r3, r1
 801307c:	2200      	movs	r2, #0
 801307e:	2300      	movs	r3, #0
 8013080:	4650      	mov	r0, sl
 8013082:	4659      	mov	r1, fp
 8013084:	f7ed fd48 	bl	8000b18 <__aeabi_dcmpeq>
 8013088:	2800      	cmp	r0, #0
 801308a:	d1a6      	bne.n	8012fda <_strtod_l+0x562>
 801308c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801308e:	9300      	str	r3, [sp, #0]
 8013090:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013092:	9805      	ldr	r0, [sp, #20]
 8013094:	462b      	mov	r3, r5
 8013096:	463a      	mov	r2, r7
 8013098:	f7ff f8c6 	bl	8012228 <__s2b>
 801309c:	900a      	str	r0, [sp, #40]	@ 0x28
 801309e:	2800      	cmp	r0, #0
 80130a0:	f43f af05 	beq.w	8012eae <_strtod_l+0x436>
 80130a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80130a6:	2a00      	cmp	r2, #0
 80130a8:	eba9 0308 	sub.w	r3, r9, r8
 80130ac:	bfa8      	it	ge
 80130ae:	2300      	movge	r3, #0
 80130b0:	9312      	str	r3, [sp, #72]	@ 0x48
 80130b2:	2400      	movs	r4, #0
 80130b4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80130b8:	9316      	str	r3, [sp, #88]	@ 0x58
 80130ba:	46a0      	mov	r8, r4
 80130bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80130be:	9805      	ldr	r0, [sp, #20]
 80130c0:	6859      	ldr	r1, [r3, #4]
 80130c2:	f7ff f809 	bl	80120d8 <_Balloc>
 80130c6:	4681      	mov	r9, r0
 80130c8:	2800      	cmp	r0, #0
 80130ca:	f43f aef4 	beq.w	8012eb6 <_strtod_l+0x43e>
 80130ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80130d0:	691a      	ldr	r2, [r3, #16]
 80130d2:	3202      	adds	r2, #2
 80130d4:	f103 010c 	add.w	r1, r3, #12
 80130d8:	0092      	lsls	r2, r2, #2
 80130da:	300c      	adds	r0, #12
 80130dc:	f000 fd72 	bl	8013bc4 <memcpy>
 80130e0:	ec4b ab10 	vmov	d0, sl, fp
 80130e4:	9805      	ldr	r0, [sp, #20]
 80130e6:	aa1c      	add	r2, sp, #112	@ 0x70
 80130e8:	a91b      	add	r1, sp, #108	@ 0x6c
 80130ea:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80130ee:	f7ff fbd7 	bl	80128a0 <__d2b>
 80130f2:	901a      	str	r0, [sp, #104]	@ 0x68
 80130f4:	2800      	cmp	r0, #0
 80130f6:	f43f aede 	beq.w	8012eb6 <_strtod_l+0x43e>
 80130fa:	9805      	ldr	r0, [sp, #20]
 80130fc:	2101      	movs	r1, #1
 80130fe:	f7ff f929 	bl	8012354 <__i2b>
 8013102:	4680      	mov	r8, r0
 8013104:	b948      	cbnz	r0, 801311a <_strtod_l+0x6a2>
 8013106:	f04f 0800 	mov.w	r8, #0
 801310a:	e6d4      	b.n	8012eb6 <_strtod_l+0x43e>
 801310c:	f04f 32ff 	mov.w	r2, #4294967295
 8013110:	fa02 f303 	lsl.w	r3, r2, r3
 8013114:	ea03 0a0a 	and.w	sl, r3, sl
 8013118:	e7b0      	b.n	801307c <_strtod_l+0x604>
 801311a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801311c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801311e:	2d00      	cmp	r5, #0
 8013120:	bfab      	itete	ge
 8013122:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8013124:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8013126:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8013128:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801312a:	bfac      	ite	ge
 801312c:	18ef      	addge	r7, r5, r3
 801312e:	1b5e      	sublt	r6, r3, r5
 8013130:	9b08      	ldr	r3, [sp, #32]
 8013132:	1aed      	subs	r5, r5, r3
 8013134:	4415      	add	r5, r2
 8013136:	4b66      	ldr	r3, [pc, #408]	@ (80132d0 <_strtod_l+0x858>)
 8013138:	3d01      	subs	r5, #1
 801313a:	429d      	cmp	r5, r3
 801313c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8013140:	da50      	bge.n	80131e4 <_strtod_l+0x76c>
 8013142:	1b5b      	subs	r3, r3, r5
 8013144:	2b1f      	cmp	r3, #31
 8013146:	eba2 0203 	sub.w	r2, r2, r3
 801314a:	f04f 0101 	mov.w	r1, #1
 801314e:	dc3d      	bgt.n	80131cc <_strtod_l+0x754>
 8013150:	fa01 f303 	lsl.w	r3, r1, r3
 8013154:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013156:	2300      	movs	r3, #0
 8013158:	9310      	str	r3, [sp, #64]	@ 0x40
 801315a:	18bd      	adds	r5, r7, r2
 801315c:	9b08      	ldr	r3, [sp, #32]
 801315e:	42af      	cmp	r7, r5
 8013160:	4416      	add	r6, r2
 8013162:	441e      	add	r6, r3
 8013164:	463b      	mov	r3, r7
 8013166:	bfa8      	it	ge
 8013168:	462b      	movge	r3, r5
 801316a:	42b3      	cmp	r3, r6
 801316c:	bfa8      	it	ge
 801316e:	4633      	movge	r3, r6
 8013170:	2b00      	cmp	r3, #0
 8013172:	bfc2      	ittt	gt
 8013174:	1aed      	subgt	r5, r5, r3
 8013176:	1af6      	subgt	r6, r6, r3
 8013178:	1aff      	subgt	r7, r7, r3
 801317a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801317c:	2b00      	cmp	r3, #0
 801317e:	dd16      	ble.n	80131ae <_strtod_l+0x736>
 8013180:	4641      	mov	r1, r8
 8013182:	9805      	ldr	r0, [sp, #20]
 8013184:	461a      	mov	r2, r3
 8013186:	f7ff f9a5 	bl	80124d4 <__pow5mult>
 801318a:	4680      	mov	r8, r0
 801318c:	2800      	cmp	r0, #0
 801318e:	d0ba      	beq.n	8013106 <_strtod_l+0x68e>
 8013190:	4601      	mov	r1, r0
 8013192:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013194:	9805      	ldr	r0, [sp, #20]
 8013196:	f7ff f8f3 	bl	8012380 <__multiply>
 801319a:	900e      	str	r0, [sp, #56]	@ 0x38
 801319c:	2800      	cmp	r0, #0
 801319e:	f43f ae8a 	beq.w	8012eb6 <_strtod_l+0x43e>
 80131a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80131a4:	9805      	ldr	r0, [sp, #20]
 80131a6:	f7fe ffd7 	bl	8012158 <_Bfree>
 80131aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80131ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80131ae:	2d00      	cmp	r5, #0
 80131b0:	dc1d      	bgt.n	80131ee <_strtod_l+0x776>
 80131b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	dd23      	ble.n	8013200 <_strtod_l+0x788>
 80131b8:	4649      	mov	r1, r9
 80131ba:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80131bc:	9805      	ldr	r0, [sp, #20]
 80131be:	f7ff f989 	bl	80124d4 <__pow5mult>
 80131c2:	4681      	mov	r9, r0
 80131c4:	b9e0      	cbnz	r0, 8013200 <_strtod_l+0x788>
 80131c6:	f04f 0900 	mov.w	r9, #0
 80131ca:	e674      	b.n	8012eb6 <_strtod_l+0x43e>
 80131cc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80131d0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80131d4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80131d8:	35e2      	adds	r5, #226	@ 0xe2
 80131da:	fa01 f305 	lsl.w	r3, r1, r5
 80131de:	9310      	str	r3, [sp, #64]	@ 0x40
 80131e0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80131e2:	e7ba      	b.n	801315a <_strtod_l+0x6e2>
 80131e4:	2300      	movs	r3, #0
 80131e6:	9310      	str	r3, [sp, #64]	@ 0x40
 80131e8:	2301      	movs	r3, #1
 80131ea:	9313      	str	r3, [sp, #76]	@ 0x4c
 80131ec:	e7b5      	b.n	801315a <_strtod_l+0x6e2>
 80131ee:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80131f0:	9805      	ldr	r0, [sp, #20]
 80131f2:	462a      	mov	r2, r5
 80131f4:	f7ff f9c8 	bl	8012588 <__lshift>
 80131f8:	901a      	str	r0, [sp, #104]	@ 0x68
 80131fa:	2800      	cmp	r0, #0
 80131fc:	d1d9      	bne.n	80131b2 <_strtod_l+0x73a>
 80131fe:	e65a      	b.n	8012eb6 <_strtod_l+0x43e>
 8013200:	2e00      	cmp	r6, #0
 8013202:	dd07      	ble.n	8013214 <_strtod_l+0x79c>
 8013204:	4649      	mov	r1, r9
 8013206:	9805      	ldr	r0, [sp, #20]
 8013208:	4632      	mov	r2, r6
 801320a:	f7ff f9bd 	bl	8012588 <__lshift>
 801320e:	4681      	mov	r9, r0
 8013210:	2800      	cmp	r0, #0
 8013212:	d0d8      	beq.n	80131c6 <_strtod_l+0x74e>
 8013214:	2f00      	cmp	r7, #0
 8013216:	dd08      	ble.n	801322a <_strtod_l+0x7b2>
 8013218:	4641      	mov	r1, r8
 801321a:	9805      	ldr	r0, [sp, #20]
 801321c:	463a      	mov	r2, r7
 801321e:	f7ff f9b3 	bl	8012588 <__lshift>
 8013222:	4680      	mov	r8, r0
 8013224:	2800      	cmp	r0, #0
 8013226:	f43f ae46 	beq.w	8012eb6 <_strtod_l+0x43e>
 801322a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801322c:	9805      	ldr	r0, [sp, #20]
 801322e:	464a      	mov	r2, r9
 8013230:	f7ff fa32 	bl	8012698 <__mdiff>
 8013234:	4604      	mov	r4, r0
 8013236:	2800      	cmp	r0, #0
 8013238:	f43f ae3d 	beq.w	8012eb6 <_strtod_l+0x43e>
 801323c:	68c3      	ldr	r3, [r0, #12]
 801323e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013240:	2300      	movs	r3, #0
 8013242:	60c3      	str	r3, [r0, #12]
 8013244:	4641      	mov	r1, r8
 8013246:	f7ff fa0b 	bl	8012660 <__mcmp>
 801324a:	2800      	cmp	r0, #0
 801324c:	da46      	bge.n	80132dc <_strtod_l+0x864>
 801324e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013250:	ea53 030a 	orrs.w	r3, r3, sl
 8013254:	d16c      	bne.n	8013330 <_strtod_l+0x8b8>
 8013256:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801325a:	2b00      	cmp	r3, #0
 801325c:	d168      	bne.n	8013330 <_strtod_l+0x8b8>
 801325e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013262:	0d1b      	lsrs	r3, r3, #20
 8013264:	051b      	lsls	r3, r3, #20
 8013266:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801326a:	d961      	bls.n	8013330 <_strtod_l+0x8b8>
 801326c:	6963      	ldr	r3, [r4, #20]
 801326e:	b913      	cbnz	r3, 8013276 <_strtod_l+0x7fe>
 8013270:	6923      	ldr	r3, [r4, #16]
 8013272:	2b01      	cmp	r3, #1
 8013274:	dd5c      	ble.n	8013330 <_strtod_l+0x8b8>
 8013276:	4621      	mov	r1, r4
 8013278:	2201      	movs	r2, #1
 801327a:	9805      	ldr	r0, [sp, #20]
 801327c:	f7ff f984 	bl	8012588 <__lshift>
 8013280:	4641      	mov	r1, r8
 8013282:	4604      	mov	r4, r0
 8013284:	f7ff f9ec 	bl	8012660 <__mcmp>
 8013288:	2800      	cmp	r0, #0
 801328a:	dd51      	ble.n	8013330 <_strtod_l+0x8b8>
 801328c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013290:	9a08      	ldr	r2, [sp, #32]
 8013292:	0d1b      	lsrs	r3, r3, #20
 8013294:	051b      	lsls	r3, r3, #20
 8013296:	2a00      	cmp	r2, #0
 8013298:	d06b      	beq.n	8013372 <_strtod_l+0x8fa>
 801329a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801329e:	d868      	bhi.n	8013372 <_strtod_l+0x8fa>
 80132a0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80132a4:	f67f ae9d 	bls.w	8012fe2 <_strtod_l+0x56a>
 80132a8:	4b0a      	ldr	r3, [pc, #40]	@ (80132d4 <_strtod_l+0x85c>)
 80132aa:	4650      	mov	r0, sl
 80132ac:	4659      	mov	r1, fp
 80132ae:	2200      	movs	r2, #0
 80132b0:	f7ed f9ca 	bl	8000648 <__aeabi_dmul>
 80132b4:	4b08      	ldr	r3, [pc, #32]	@ (80132d8 <_strtod_l+0x860>)
 80132b6:	400b      	ands	r3, r1
 80132b8:	4682      	mov	sl, r0
 80132ba:	468b      	mov	fp, r1
 80132bc:	2b00      	cmp	r3, #0
 80132be:	f47f ae05 	bne.w	8012ecc <_strtod_l+0x454>
 80132c2:	9a05      	ldr	r2, [sp, #20]
 80132c4:	2322      	movs	r3, #34	@ 0x22
 80132c6:	6013      	str	r3, [r2, #0]
 80132c8:	e600      	b.n	8012ecc <_strtod_l+0x454>
 80132ca:	bf00      	nop
 80132cc:	08014c68 	.word	0x08014c68
 80132d0:	fffffc02 	.word	0xfffffc02
 80132d4:	39500000 	.word	0x39500000
 80132d8:	7ff00000 	.word	0x7ff00000
 80132dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80132e0:	d165      	bne.n	80133ae <_strtod_l+0x936>
 80132e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80132e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80132e8:	b35a      	cbz	r2, 8013342 <_strtod_l+0x8ca>
 80132ea:	4a9f      	ldr	r2, [pc, #636]	@ (8013568 <_strtod_l+0xaf0>)
 80132ec:	4293      	cmp	r3, r2
 80132ee:	d12b      	bne.n	8013348 <_strtod_l+0x8d0>
 80132f0:	9b08      	ldr	r3, [sp, #32]
 80132f2:	4651      	mov	r1, sl
 80132f4:	b303      	cbz	r3, 8013338 <_strtod_l+0x8c0>
 80132f6:	4b9d      	ldr	r3, [pc, #628]	@ (801356c <_strtod_l+0xaf4>)
 80132f8:	465a      	mov	r2, fp
 80132fa:	4013      	ands	r3, r2
 80132fc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8013300:	f04f 32ff 	mov.w	r2, #4294967295
 8013304:	d81b      	bhi.n	801333e <_strtod_l+0x8c6>
 8013306:	0d1b      	lsrs	r3, r3, #20
 8013308:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801330c:	fa02 f303 	lsl.w	r3, r2, r3
 8013310:	4299      	cmp	r1, r3
 8013312:	d119      	bne.n	8013348 <_strtod_l+0x8d0>
 8013314:	4b96      	ldr	r3, [pc, #600]	@ (8013570 <_strtod_l+0xaf8>)
 8013316:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013318:	429a      	cmp	r2, r3
 801331a:	d102      	bne.n	8013322 <_strtod_l+0x8aa>
 801331c:	3101      	adds	r1, #1
 801331e:	f43f adca 	beq.w	8012eb6 <_strtod_l+0x43e>
 8013322:	4b92      	ldr	r3, [pc, #584]	@ (801356c <_strtod_l+0xaf4>)
 8013324:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013326:	401a      	ands	r2, r3
 8013328:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801332c:	f04f 0a00 	mov.w	sl, #0
 8013330:	9b08      	ldr	r3, [sp, #32]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d1b8      	bne.n	80132a8 <_strtod_l+0x830>
 8013336:	e5c9      	b.n	8012ecc <_strtod_l+0x454>
 8013338:	f04f 33ff 	mov.w	r3, #4294967295
 801333c:	e7e8      	b.n	8013310 <_strtod_l+0x898>
 801333e:	4613      	mov	r3, r2
 8013340:	e7e6      	b.n	8013310 <_strtod_l+0x898>
 8013342:	ea53 030a 	orrs.w	r3, r3, sl
 8013346:	d0a1      	beq.n	801328c <_strtod_l+0x814>
 8013348:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801334a:	b1db      	cbz	r3, 8013384 <_strtod_l+0x90c>
 801334c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801334e:	4213      	tst	r3, r2
 8013350:	d0ee      	beq.n	8013330 <_strtod_l+0x8b8>
 8013352:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013354:	9a08      	ldr	r2, [sp, #32]
 8013356:	4650      	mov	r0, sl
 8013358:	4659      	mov	r1, fp
 801335a:	b1bb      	cbz	r3, 801338c <_strtod_l+0x914>
 801335c:	f7ff fb6e 	bl	8012a3c <sulp>
 8013360:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013364:	ec53 2b10 	vmov	r2, r3, d0
 8013368:	f7ec ffb8 	bl	80002dc <__adddf3>
 801336c:	4682      	mov	sl, r0
 801336e:	468b      	mov	fp, r1
 8013370:	e7de      	b.n	8013330 <_strtod_l+0x8b8>
 8013372:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8013376:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801337a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801337e:	f04f 3aff 	mov.w	sl, #4294967295
 8013382:	e7d5      	b.n	8013330 <_strtod_l+0x8b8>
 8013384:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013386:	ea13 0f0a 	tst.w	r3, sl
 801338a:	e7e1      	b.n	8013350 <_strtod_l+0x8d8>
 801338c:	f7ff fb56 	bl	8012a3c <sulp>
 8013390:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013394:	ec53 2b10 	vmov	r2, r3, d0
 8013398:	f7ec ff9e 	bl	80002d8 <__aeabi_dsub>
 801339c:	2200      	movs	r2, #0
 801339e:	2300      	movs	r3, #0
 80133a0:	4682      	mov	sl, r0
 80133a2:	468b      	mov	fp, r1
 80133a4:	f7ed fbb8 	bl	8000b18 <__aeabi_dcmpeq>
 80133a8:	2800      	cmp	r0, #0
 80133aa:	d0c1      	beq.n	8013330 <_strtod_l+0x8b8>
 80133ac:	e619      	b.n	8012fe2 <_strtod_l+0x56a>
 80133ae:	4641      	mov	r1, r8
 80133b0:	4620      	mov	r0, r4
 80133b2:	f7ff facd 	bl	8012950 <__ratio>
 80133b6:	ec57 6b10 	vmov	r6, r7, d0
 80133ba:	2200      	movs	r2, #0
 80133bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80133c0:	4630      	mov	r0, r6
 80133c2:	4639      	mov	r1, r7
 80133c4:	f7ed fbbc 	bl	8000b40 <__aeabi_dcmple>
 80133c8:	2800      	cmp	r0, #0
 80133ca:	d06f      	beq.n	80134ac <_strtod_l+0xa34>
 80133cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d17a      	bne.n	80134c8 <_strtod_l+0xa50>
 80133d2:	f1ba 0f00 	cmp.w	sl, #0
 80133d6:	d158      	bne.n	801348a <_strtod_l+0xa12>
 80133d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80133da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d15a      	bne.n	8013498 <_strtod_l+0xa20>
 80133e2:	4b64      	ldr	r3, [pc, #400]	@ (8013574 <_strtod_l+0xafc>)
 80133e4:	2200      	movs	r2, #0
 80133e6:	4630      	mov	r0, r6
 80133e8:	4639      	mov	r1, r7
 80133ea:	f7ed fb9f 	bl	8000b2c <__aeabi_dcmplt>
 80133ee:	2800      	cmp	r0, #0
 80133f0:	d159      	bne.n	80134a6 <_strtod_l+0xa2e>
 80133f2:	4630      	mov	r0, r6
 80133f4:	4639      	mov	r1, r7
 80133f6:	4b60      	ldr	r3, [pc, #384]	@ (8013578 <_strtod_l+0xb00>)
 80133f8:	2200      	movs	r2, #0
 80133fa:	f7ed f925 	bl	8000648 <__aeabi_dmul>
 80133fe:	4606      	mov	r6, r0
 8013400:	460f      	mov	r7, r1
 8013402:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8013406:	9606      	str	r6, [sp, #24]
 8013408:	9307      	str	r3, [sp, #28]
 801340a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801340e:	4d57      	ldr	r5, [pc, #348]	@ (801356c <_strtod_l+0xaf4>)
 8013410:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013414:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013416:	401d      	ands	r5, r3
 8013418:	4b58      	ldr	r3, [pc, #352]	@ (801357c <_strtod_l+0xb04>)
 801341a:	429d      	cmp	r5, r3
 801341c:	f040 80b2 	bne.w	8013584 <_strtod_l+0xb0c>
 8013420:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013422:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8013426:	ec4b ab10 	vmov	d0, sl, fp
 801342a:	f7ff f9c9 	bl	80127c0 <__ulp>
 801342e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013432:	ec51 0b10 	vmov	r0, r1, d0
 8013436:	f7ed f907 	bl	8000648 <__aeabi_dmul>
 801343a:	4652      	mov	r2, sl
 801343c:	465b      	mov	r3, fp
 801343e:	f7ec ff4d 	bl	80002dc <__adddf3>
 8013442:	460b      	mov	r3, r1
 8013444:	4949      	ldr	r1, [pc, #292]	@ (801356c <_strtod_l+0xaf4>)
 8013446:	4a4e      	ldr	r2, [pc, #312]	@ (8013580 <_strtod_l+0xb08>)
 8013448:	4019      	ands	r1, r3
 801344a:	4291      	cmp	r1, r2
 801344c:	4682      	mov	sl, r0
 801344e:	d942      	bls.n	80134d6 <_strtod_l+0xa5e>
 8013450:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013452:	4b47      	ldr	r3, [pc, #284]	@ (8013570 <_strtod_l+0xaf8>)
 8013454:	429a      	cmp	r2, r3
 8013456:	d103      	bne.n	8013460 <_strtod_l+0x9e8>
 8013458:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801345a:	3301      	adds	r3, #1
 801345c:	f43f ad2b 	beq.w	8012eb6 <_strtod_l+0x43e>
 8013460:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8013570 <_strtod_l+0xaf8>
 8013464:	f04f 3aff 	mov.w	sl, #4294967295
 8013468:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801346a:	9805      	ldr	r0, [sp, #20]
 801346c:	f7fe fe74 	bl	8012158 <_Bfree>
 8013470:	9805      	ldr	r0, [sp, #20]
 8013472:	4649      	mov	r1, r9
 8013474:	f7fe fe70 	bl	8012158 <_Bfree>
 8013478:	9805      	ldr	r0, [sp, #20]
 801347a:	4641      	mov	r1, r8
 801347c:	f7fe fe6c 	bl	8012158 <_Bfree>
 8013480:	9805      	ldr	r0, [sp, #20]
 8013482:	4621      	mov	r1, r4
 8013484:	f7fe fe68 	bl	8012158 <_Bfree>
 8013488:	e618      	b.n	80130bc <_strtod_l+0x644>
 801348a:	f1ba 0f01 	cmp.w	sl, #1
 801348e:	d103      	bne.n	8013498 <_strtod_l+0xa20>
 8013490:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013492:	2b00      	cmp	r3, #0
 8013494:	f43f ada5 	beq.w	8012fe2 <_strtod_l+0x56a>
 8013498:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8013548 <_strtod_l+0xad0>
 801349c:	4f35      	ldr	r7, [pc, #212]	@ (8013574 <_strtod_l+0xafc>)
 801349e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80134a2:	2600      	movs	r6, #0
 80134a4:	e7b1      	b.n	801340a <_strtod_l+0x992>
 80134a6:	4f34      	ldr	r7, [pc, #208]	@ (8013578 <_strtod_l+0xb00>)
 80134a8:	2600      	movs	r6, #0
 80134aa:	e7aa      	b.n	8013402 <_strtod_l+0x98a>
 80134ac:	4b32      	ldr	r3, [pc, #200]	@ (8013578 <_strtod_l+0xb00>)
 80134ae:	4630      	mov	r0, r6
 80134b0:	4639      	mov	r1, r7
 80134b2:	2200      	movs	r2, #0
 80134b4:	f7ed f8c8 	bl	8000648 <__aeabi_dmul>
 80134b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80134ba:	4606      	mov	r6, r0
 80134bc:	460f      	mov	r7, r1
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d09f      	beq.n	8013402 <_strtod_l+0x98a>
 80134c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80134c6:	e7a0      	b.n	801340a <_strtod_l+0x992>
 80134c8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8013550 <_strtod_l+0xad8>
 80134cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80134d0:	ec57 6b17 	vmov	r6, r7, d7
 80134d4:	e799      	b.n	801340a <_strtod_l+0x992>
 80134d6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80134da:	9b08      	ldr	r3, [sp, #32]
 80134dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d1c1      	bne.n	8013468 <_strtod_l+0x9f0>
 80134e4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80134e8:	0d1b      	lsrs	r3, r3, #20
 80134ea:	051b      	lsls	r3, r3, #20
 80134ec:	429d      	cmp	r5, r3
 80134ee:	d1bb      	bne.n	8013468 <_strtod_l+0x9f0>
 80134f0:	4630      	mov	r0, r6
 80134f2:	4639      	mov	r1, r7
 80134f4:	f7ed fc08 	bl	8000d08 <__aeabi_d2lz>
 80134f8:	f7ed f878 	bl	80005ec <__aeabi_l2d>
 80134fc:	4602      	mov	r2, r0
 80134fe:	460b      	mov	r3, r1
 8013500:	4630      	mov	r0, r6
 8013502:	4639      	mov	r1, r7
 8013504:	f7ec fee8 	bl	80002d8 <__aeabi_dsub>
 8013508:	460b      	mov	r3, r1
 801350a:	4602      	mov	r2, r0
 801350c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8013510:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8013514:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013516:	ea46 060a 	orr.w	r6, r6, sl
 801351a:	431e      	orrs	r6, r3
 801351c:	d06f      	beq.n	80135fe <_strtod_l+0xb86>
 801351e:	a30e      	add	r3, pc, #56	@ (adr r3, 8013558 <_strtod_l+0xae0>)
 8013520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013524:	f7ed fb02 	bl	8000b2c <__aeabi_dcmplt>
 8013528:	2800      	cmp	r0, #0
 801352a:	f47f accf 	bne.w	8012ecc <_strtod_l+0x454>
 801352e:	a30c      	add	r3, pc, #48	@ (adr r3, 8013560 <_strtod_l+0xae8>)
 8013530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013534:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013538:	f7ed fb16 	bl	8000b68 <__aeabi_dcmpgt>
 801353c:	2800      	cmp	r0, #0
 801353e:	d093      	beq.n	8013468 <_strtod_l+0x9f0>
 8013540:	e4c4      	b.n	8012ecc <_strtod_l+0x454>
 8013542:	bf00      	nop
 8013544:	f3af 8000 	nop.w
 8013548:	00000000 	.word	0x00000000
 801354c:	bff00000 	.word	0xbff00000
 8013550:	00000000 	.word	0x00000000
 8013554:	3ff00000 	.word	0x3ff00000
 8013558:	94a03595 	.word	0x94a03595
 801355c:	3fdfffff 	.word	0x3fdfffff
 8013560:	35afe535 	.word	0x35afe535
 8013564:	3fe00000 	.word	0x3fe00000
 8013568:	000fffff 	.word	0x000fffff
 801356c:	7ff00000 	.word	0x7ff00000
 8013570:	7fefffff 	.word	0x7fefffff
 8013574:	3ff00000 	.word	0x3ff00000
 8013578:	3fe00000 	.word	0x3fe00000
 801357c:	7fe00000 	.word	0x7fe00000
 8013580:	7c9fffff 	.word	0x7c9fffff
 8013584:	9b08      	ldr	r3, [sp, #32]
 8013586:	b323      	cbz	r3, 80135d2 <_strtod_l+0xb5a>
 8013588:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801358c:	d821      	bhi.n	80135d2 <_strtod_l+0xb5a>
 801358e:	a328      	add	r3, pc, #160	@ (adr r3, 8013630 <_strtod_l+0xbb8>)
 8013590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013594:	4630      	mov	r0, r6
 8013596:	4639      	mov	r1, r7
 8013598:	f7ed fad2 	bl	8000b40 <__aeabi_dcmple>
 801359c:	b1a0      	cbz	r0, 80135c8 <_strtod_l+0xb50>
 801359e:	4639      	mov	r1, r7
 80135a0:	4630      	mov	r0, r6
 80135a2:	f7ed fb29 	bl	8000bf8 <__aeabi_d2uiz>
 80135a6:	2801      	cmp	r0, #1
 80135a8:	bf38      	it	cc
 80135aa:	2001      	movcc	r0, #1
 80135ac:	f7ec ffd2 	bl	8000554 <__aeabi_ui2d>
 80135b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80135b2:	4606      	mov	r6, r0
 80135b4:	460f      	mov	r7, r1
 80135b6:	b9fb      	cbnz	r3, 80135f8 <_strtod_l+0xb80>
 80135b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80135bc:	9014      	str	r0, [sp, #80]	@ 0x50
 80135be:	9315      	str	r3, [sp, #84]	@ 0x54
 80135c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80135c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80135c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80135ca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80135ce:	1b5b      	subs	r3, r3, r5
 80135d0:	9311      	str	r3, [sp, #68]	@ 0x44
 80135d2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80135d6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80135da:	f7ff f8f1 	bl	80127c0 <__ulp>
 80135de:	4650      	mov	r0, sl
 80135e0:	ec53 2b10 	vmov	r2, r3, d0
 80135e4:	4659      	mov	r1, fp
 80135e6:	f7ed f82f 	bl	8000648 <__aeabi_dmul>
 80135ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80135ee:	f7ec fe75 	bl	80002dc <__adddf3>
 80135f2:	4682      	mov	sl, r0
 80135f4:	468b      	mov	fp, r1
 80135f6:	e770      	b.n	80134da <_strtod_l+0xa62>
 80135f8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80135fc:	e7e0      	b.n	80135c0 <_strtod_l+0xb48>
 80135fe:	a30e      	add	r3, pc, #56	@ (adr r3, 8013638 <_strtod_l+0xbc0>)
 8013600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013604:	f7ed fa92 	bl	8000b2c <__aeabi_dcmplt>
 8013608:	e798      	b.n	801353c <_strtod_l+0xac4>
 801360a:	2300      	movs	r3, #0
 801360c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801360e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8013610:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013612:	6013      	str	r3, [r2, #0]
 8013614:	f7ff ba6d 	b.w	8012af2 <_strtod_l+0x7a>
 8013618:	2a65      	cmp	r2, #101	@ 0x65
 801361a:	f43f ab66 	beq.w	8012cea <_strtod_l+0x272>
 801361e:	2a45      	cmp	r2, #69	@ 0x45
 8013620:	f43f ab63 	beq.w	8012cea <_strtod_l+0x272>
 8013624:	2301      	movs	r3, #1
 8013626:	f7ff bb9e 	b.w	8012d66 <_strtod_l+0x2ee>
 801362a:	bf00      	nop
 801362c:	f3af 8000 	nop.w
 8013630:	ffc00000 	.word	0xffc00000
 8013634:	41dfffff 	.word	0x41dfffff
 8013638:	94a03595 	.word	0x94a03595
 801363c:	3fcfffff 	.word	0x3fcfffff

08013640 <_strtod_r>:
 8013640:	4b01      	ldr	r3, [pc, #4]	@ (8013648 <_strtod_r+0x8>)
 8013642:	f7ff ba19 	b.w	8012a78 <_strtod_l>
 8013646:	bf00      	nop
 8013648:	200001e8 	.word	0x200001e8

0801364c <_strtol_l.constprop.0>:
 801364c:	2b24      	cmp	r3, #36	@ 0x24
 801364e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013652:	4686      	mov	lr, r0
 8013654:	4690      	mov	r8, r2
 8013656:	d801      	bhi.n	801365c <_strtol_l.constprop.0+0x10>
 8013658:	2b01      	cmp	r3, #1
 801365a:	d106      	bne.n	801366a <_strtol_l.constprop.0+0x1e>
 801365c:	f7fd fdba 	bl	80111d4 <__errno>
 8013660:	2316      	movs	r3, #22
 8013662:	6003      	str	r3, [r0, #0]
 8013664:	2000      	movs	r0, #0
 8013666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801366a:	4834      	ldr	r0, [pc, #208]	@ (801373c <_strtol_l.constprop.0+0xf0>)
 801366c:	460d      	mov	r5, r1
 801366e:	462a      	mov	r2, r5
 8013670:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013674:	5d06      	ldrb	r6, [r0, r4]
 8013676:	f016 0608 	ands.w	r6, r6, #8
 801367a:	d1f8      	bne.n	801366e <_strtol_l.constprop.0+0x22>
 801367c:	2c2d      	cmp	r4, #45	@ 0x2d
 801367e:	d12d      	bne.n	80136dc <_strtol_l.constprop.0+0x90>
 8013680:	782c      	ldrb	r4, [r5, #0]
 8013682:	2601      	movs	r6, #1
 8013684:	1c95      	adds	r5, r2, #2
 8013686:	f033 0210 	bics.w	r2, r3, #16
 801368a:	d109      	bne.n	80136a0 <_strtol_l.constprop.0+0x54>
 801368c:	2c30      	cmp	r4, #48	@ 0x30
 801368e:	d12a      	bne.n	80136e6 <_strtol_l.constprop.0+0x9a>
 8013690:	782a      	ldrb	r2, [r5, #0]
 8013692:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013696:	2a58      	cmp	r2, #88	@ 0x58
 8013698:	d125      	bne.n	80136e6 <_strtol_l.constprop.0+0x9a>
 801369a:	786c      	ldrb	r4, [r5, #1]
 801369c:	2310      	movs	r3, #16
 801369e:	3502      	adds	r5, #2
 80136a0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80136a4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80136a8:	2200      	movs	r2, #0
 80136aa:	fbbc f9f3 	udiv	r9, ip, r3
 80136ae:	4610      	mov	r0, r2
 80136b0:	fb03 ca19 	mls	sl, r3, r9, ip
 80136b4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80136b8:	2f09      	cmp	r7, #9
 80136ba:	d81b      	bhi.n	80136f4 <_strtol_l.constprop.0+0xa8>
 80136bc:	463c      	mov	r4, r7
 80136be:	42a3      	cmp	r3, r4
 80136c0:	dd27      	ble.n	8013712 <_strtol_l.constprop.0+0xc6>
 80136c2:	1c57      	adds	r7, r2, #1
 80136c4:	d007      	beq.n	80136d6 <_strtol_l.constprop.0+0x8a>
 80136c6:	4581      	cmp	r9, r0
 80136c8:	d320      	bcc.n	801370c <_strtol_l.constprop.0+0xc0>
 80136ca:	d101      	bne.n	80136d0 <_strtol_l.constprop.0+0x84>
 80136cc:	45a2      	cmp	sl, r4
 80136ce:	db1d      	blt.n	801370c <_strtol_l.constprop.0+0xc0>
 80136d0:	fb00 4003 	mla	r0, r0, r3, r4
 80136d4:	2201      	movs	r2, #1
 80136d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80136da:	e7eb      	b.n	80136b4 <_strtol_l.constprop.0+0x68>
 80136dc:	2c2b      	cmp	r4, #43	@ 0x2b
 80136de:	bf04      	itt	eq
 80136e0:	782c      	ldrbeq	r4, [r5, #0]
 80136e2:	1c95      	addeq	r5, r2, #2
 80136e4:	e7cf      	b.n	8013686 <_strtol_l.constprop.0+0x3a>
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d1da      	bne.n	80136a0 <_strtol_l.constprop.0+0x54>
 80136ea:	2c30      	cmp	r4, #48	@ 0x30
 80136ec:	bf0c      	ite	eq
 80136ee:	2308      	moveq	r3, #8
 80136f0:	230a      	movne	r3, #10
 80136f2:	e7d5      	b.n	80136a0 <_strtol_l.constprop.0+0x54>
 80136f4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80136f8:	2f19      	cmp	r7, #25
 80136fa:	d801      	bhi.n	8013700 <_strtol_l.constprop.0+0xb4>
 80136fc:	3c37      	subs	r4, #55	@ 0x37
 80136fe:	e7de      	b.n	80136be <_strtol_l.constprop.0+0x72>
 8013700:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8013704:	2f19      	cmp	r7, #25
 8013706:	d804      	bhi.n	8013712 <_strtol_l.constprop.0+0xc6>
 8013708:	3c57      	subs	r4, #87	@ 0x57
 801370a:	e7d8      	b.n	80136be <_strtol_l.constprop.0+0x72>
 801370c:	f04f 32ff 	mov.w	r2, #4294967295
 8013710:	e7e1      	b.n	80136d6 <_strtol_l.constprop.0+0x8a>
 8013712:	1c53      	adds	r3, r2, #1
 8013714:	d108      	bne.n	8013728 <_strtol_l.constprop.0+0xdc>
 8013716:	2322      	movs	r3, #34	@ 0x22
 8013718:	f8ce 3000 	str.w	r3, [lr]
 801371c:	4660      	mov	r0, ip
 801371e:	f1b8 0f00 	cmp.w	r8, #0
 8013722:	d0a0      	beq.n	8013666 <_strtol_l.constprop.0+0x1a>
 8013724:	1e69      	subs	r1, r5, #1
 8013726:	e006      	b.n	8013736 <_strtol_l.constprop.0+0xea>
 8013728:	b106      	cbz	r6, 801372c <_strtol_l.constprop.0+0xe0>
 801372a:	4240      	negs	r0, r0
 801372c:	f1b8 0f00 	cmp.w	r8, #0
 8013730:	d099      	beq.n	8013666 <_strtol_l.constprop.0+0x1a>
 8013732:	2a00      	cmp	r2, #0
 8013734:	d1f6      	bne.n	8013724 <_strtol_l.constprop.0+0xd8>
 8013736:	f8c8 1000 	str.w	r1, [r8]
 801373a:	e794      	b.n	8013666 <_strtol_l.constprop.0+0x1a>
 801373c:	08014c91 	.word	0x08014c91

08013740 <_strtol_r>:
 8013740:	f7ff bf84 	b.w	801364c <_strtol_l.constprop.0>

08013744 <__ssputs_r>:
 8013744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013748:	688e      	ldr	r6, [r1, #8]
 801374a:	461f      	mov	r7, r3
 801374c:	42be      	cmp	r6, r7
 801374e:	680b      	ldr	r3, [r1, #0]
 8013750:	4682      	mov	sl, r0
 8013752:	460c      	mov	r4, r1
 8013754:	4690      	mov	r8, r2
 8013756:	d82d      	bhi.n	80137b4 <__ssputs_r+0x70>
 8013758:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801375c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013760:	d026      	beq.n	80137b0 <__ssputs_r+0x6c>
 8013762:	6965      	ldr	r5, [r4, #20]
 8013764:	6909      	ldr	r1, [r1, #16]
 8013766:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801376a:	eba3 0901 	sub.w	r9, r3, r1
 801376e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013772:	1c7b      	adds	r3, r7, #1
 8013774:	444b      	add	r3, r9
 8013776:	106d      	asrs	r5, r5, #1
 8013778:	429d      	cmp	r5, r3
 801377a:	bf38      	it	cc
 801377c:	461d      	movcc	r5, r3
 801377e:	0553      	lsls	r3, r2, #21
 8013780:	d527      	bpl.n	80137d2 <__ssputs_r+0x8e>
 8013782:	4629      	mov	r1, r5
 8013784:	f7fe fc1c 	bl	8011fc0 <_malloc_r>
 8013788:	4606      	mov	r6, r0
 801378a:	b360      	cbz	r0, 80137e6 <__ssputs_r+0xa2>
 801378c:	6921      	ldr	r1, [r4, #16]
 801378e:	464a      	mov	r2, r9
 8013790:	f000 fa18 	bl	8013bc4 <memcpy>
 8013794:	89a3      	ldrh	r3, [r4, #12]
 8013796:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801379a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801379e:	81a3      	strh	r3, [r4, #12]
 80137a0:	6126      	str	r6, [r4, #16]
 80137a2:	6165      	str	r5, [r4, #20]
 80137a4:	444e      	add	r6, r9
 80137a6:	eba5 0509 	sub.w	r5, r5, r9
 80137aa:	6026      	str	r6, [r4, #0]
 80137ac:	60a5      	str	r5, [r4, #8]
 80137ae:	463e      	mov	r6, r7
 80137b0:	42be      	cmp	r6, r7
 80137b2:	d900      	bls.n	80137b6 <__ssputs_r+0x72>
 80137b4:	463e      	mov	r6, r7
 80137b6:	6820      	ldr	r0, [r4, #0]
 80137b8:	4632      	mov	r2, r6
 80137ba:	4641      	mov	r1, r8
 80137bc:	f000 f9c6 	bl	8013b4c <memmove>
 80137c0:	68a3      	ldr	r3, [r4, #8]
 80137c2:	1b9b      	subs	r3, r3, r6
 80137c4:	60a3      	str	r3, [r4, #8]
 80137c6:	6823      	ldr	r3, [r4, #0]
 80137c8:	4433      	add	r3, r6
 80137ca:	6023      	str	r3, [r4, #0]
 80137cc:	2000      	movs	r0, #0
 80137ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137d2:	462a      	mov	r2, r5
 80137d4:	f000 fd89 	bl	80142ea <_realloc_r>
 80137d8:	4606      	mov	r6, r0
 80137da:	2800      	cmp	r0, #0
 80137dc:	d1e0      	bne.n	80137a0 <__ssputs_r+0x5c>
 80137de:	6921      	ldr	r1, [r4, #16]
 80137e0:	4650      	mov	r0, sl
 80137e2:	f7fe fb79 	bl	8011ed8 <_free_r>
 80137e6:	230c      	movs	r3, #12
 80137e8:	f8ca 3000 	str.w	r3, [sl]
 80137ec:	89a3      	ldrh	r3, [r4, #12]
 80137ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80137f2:	81a3      	strh	r3, [r4, #12]
 80137f4:	f04f 30ff 	mov.w	r0, #4294967295
 80137f8:	e7e9      	b.n	80137ce <__ssputs_r+0x8a>
	...

080137fc <_svfiprintf_r>:
 80137fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013800:	4698      	mov	r8, r3
 8013802:	898b      	ldrh	r3, [r1, #12]
 8013804:	061b      	lsls	r3, r3, #24
 8013806:	b09d      	sub	sp, #116	@ 0x74
 8013808:	4607      	mov	r7, r0
 801380a:	460d      	mov	r5, r1
 801380c:	4614      	mov	r4, r2
 801380e:	d510      	bpl.n	8013832 <_svfiprintf_r+0x36>
 8013810:	690b      	ldr	r3, [r1, #16]
 8013812:	b973      	cbnz	r3, 8013832 <_svfiprintf_r+0x36>
 8013814:	2140      	movs	r1, #64	@ 0x40
 8013816:	f7fe fbd3 	bl	8011fc0 <_malloc_r>
 801381a:	6028      	str	r0, [r5, #0]
 801381c:	6128      	str	r0, [r5, #16]
 801381e:	b930      	cbnz	r0, 801382e <_svfiprintf_r+0x32>
 8013820:	230c      	movs	r3, #12
 8013822:	603b      	str	r3, [r7, #0]
 8013824:	f04f 30ff 	mov.w	r0, #4294967295
 8013828:	b01d      	add	sp, #116	@ 0x74
 801382a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801382e:	2340      	movs	r3, #64	@ 0x40
 8013830:	616b      	str	r3, [r5, #20]
 8013832:	2300      	movs	r3, #0
 8013834:	9309      	str	r3, [sp, #36]	@ 0x24
 8013836:	2320      	movs	r3, #32
 8013838:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801383c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013840:	2330      	movs	r3, #48	@ 0x30
 8013842:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80139e0 <_svfiprintf_r+0x1e4>
 8013846:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801384a:	f04f 0901 	mov.w	r9, #1
 801384e:	4623      	mov	r3, r4
 8013850:	469a      	mov	sl, r3
 8013852:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013856:	b10a      	cbz	r2, 801385c <_svfiprintf_r+0x60>
 8013858:	2a25      	cmp	r2, #37	@ 0x25
 801385a:	d1f9      	bne.n	8013850 <_svfiprintf_r+0x54>
 801385c:	ebba 0b04 	subs.w	fp, sl, r4
 8013860:	d00b      	beq.n	801387a <_svfiprintf_r+0x7e>
 8013862:	465b      	mov	r3, fp
 8013864:	4622      	mov	r2, r4
 8013866:	4629      	mov	r1, r5
 8013868:	4638      	mov	r0, r7
 801386a:	f7ff ff6b 	bl	8013744 <__ssputs_r>
 801386e:	3001      	adds	r0, #1
 8013870:	f000 80a7 	beq.w	80139c2 <_svfiprintf_r+0x1c6>
 8013874:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013876:	445a      	add	r2, fp
 8013878:	9209      	str	r2, [sp, #36]	@ 0x24
 801387a:	f89a 3000 	ldrb.w	r3, [sl]
 801387e:	2b00      	cmp	r3, #0
 8013880:	f000 809f 	beq.w	80139c2 <_svfiprintf_r+0x1c6>
 8013884:	2300      	movs	r3, #0
 8013886:	f04f 32ff 	mov.w	r2, #4294967295
 801388a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801388e:	f10a 0a01 	add.w	sl, sl, #1
 8013892:	9304      	str	r3, [sp, #16]
 8013894:	9307      	str	r3, [sp, #28]
 8013896:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801389a:	931a      	str	r3, [sp, #104]	@ 0x68
 801389c:	4654      	mov	r4, sl
 801389e:	2205      	movs	r2, #5
 80138a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138a4:	484e      	ldr	r0, [pc, #312]	@ (80139e0 <_svfiprintf_r+0x1e4>)
 80138a6:	f7ec fcbb 	bl	8000220 <memchr>
 80138aa:	9a04      	ldr	r2, [sp, #16]
 80138ac:	b9d8      	cbnz	r0, 80138e6 <_svfiprintf_r+0xea>
 80138ae:	06d0      	lsls	r0, r2, #27
 80138b0:	bf44      	itt	mi
 80138b2:	2320      	movmi	r3, #32
 80138b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80138b8:	0711      	lsls	r1, r2, #28
 80138ba:	bf44      	itt	mi
 80138bc:	232b      	movmi	r3, #43	@ 0x2b
 80138be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80138c2:	f89a 3000 	ldrb.w	r3, [sl]
 80138c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80138c8:	d015      	beq.n	80138f6 <_svfiprintf_r+0xfa>
 80138ca:	9a07      	ldr	r2, [sp, #28]
 80138cc:	4654      	mov	r4, sl
 80138ce:	2000      	movs	r0, #0
 80138d0:	f04f 0c0a 	mov.w	ip, #10
 80138d4:	4621      	mov	r1, r4
 80138d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80138da:	3b30      	subs	r3, #48	@ 0x30
 80138dc:	2b09      	cmp	r3, #9
 80138de:	d94b      	bls.n	8013978 <_svfiprintf_r+0x17c>
 80138e0:	b1b0      	cbz	r0, 8013910 <_svfiprintf_r+0x114>
 80138e2:	9207      	str	r2, [sp, #28]
 80138e4:	e014      	b.n	8013910 <_svfiprintf_r+0x114>
 80138e6:	eba0 0308 	sub.w	r3, r0, r8
 80138ea:	fa09 f303 	lsl.w	r3, r9, r3
 80138ee:	4313      	orrs	r3, r2
 80138f0:	9304      	str	r3, [sp, #16]
 80138f2:	46a2      	mov	sl, r4
 80138f4:	e7d2      	b.n	801389c <_svfiprintf_r+0xa0>
 80138f6:	9b03      	ldr	r3, [sp, #12]
 80138f8:	1d19      	adds	r1, r3, #4
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	9103      	str	r1, [sp, #12]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	bfbb      	ittet	lt
 8013902:	425b      	neglt	r3, r3
 8013904:	f042 0202 	orrlt.w	r2, r2, #2
 8013908:	9307      	strge	r3, [sp, #28]
 801390a:	9307      	strlt	r3, [sp, #28]
 801390c:	bfb8      	it	lt
 801390e:	9204      	strlt	r2, [sp, #16]
 8013910:	7823      	ldrb	r3, [r4, #0]
 8013912:	2b2e      	cmp	r3, #46	@ 0x2e
 8013914:	d10a      	bne.n	801392c <_svfiprintf_r+0x130>
 8013916:	7863      	ldrb	r3, [r4, #1]
 8013918:	2b2a      	cmp	r3, #42	@ 0x2a
 801391a:	d132      	bne.n	8013982 <_svfiprintf_r+0x186>
 801391c:	9b03      	ldr	r3, [sp, #12]
 801391e:	1d1a      	adds	r2, r3, #4
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	9203      	str	r2, [sp, #12]
 8013924:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013928:	3402      	adds	r4, #2
 801392a:	9305      	str	r3, [sp, #20]
 801392c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80139f0 <_svfiprintf_r+0x1f4>
 8013930:	7821      	ldrb	r1, [r4, #0]
 8013932:	2203      	movs	r2, #3
 8013934:	4650      	mov	r0, sl
 8013936:	f7ec fc73 	bl	8000220 <memchr>
 801393a:	b138      	cbz	r0, 801394c <_svfiprintf_r+0x150>
 801393c:	9b04      	ldr	r3, [sp, #16]
 801393e:	eba0 000a 	sub.w	r0, r0, sl
 8013942:	2240      	movs	r2, #64	@ 0x40
 8013944:	4082      	lsls	r2, r0
 8013946:	4313      	orrs	r3, r2
 8013948:	3401      	adds	r4, #1
 801394a:	9304      	str	r3, [sp, #16]
 801394c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013950:	4824      	ldr	r0, [pc, #144]	@ (80139e4 <_svfiprintf_r+0x1e8>)
 8013952:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013956:	2206      	movs	r2, #6
 8013958:	f7ec fc62 	bl	8000220 <memchr>
 801395c:	2800      	cmp	r0, #0
 801395e:	d036      	beq.n	80139ce <_svfiprintf_r+0x1d2>
 8013960:	4b21      	ldr	r3, [pc, #132]	@ (80139e8 <_svfiprintf_r+0x1ec>)
 8013962:	bb1b      	cbnz	r3, 80139ac <_svfiprintf_r+0x1b0>
 8013964:	9b03      	ldr	r3, [sp, #12]
 8013966:	3307      	adds	r3, #7
 8013968:	f023 0307 	bic.w	r3, r3, #7
 801396c:	3308      	adds	r3, #8
 801396e:	9303      	str	r3, [sp, #12]
 8013970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013972:	4433      	add	r3, r6
 8013974:	9309      	str	r3, [sp, #36]	@ 0x24
 8013976:	e76a      	b.n	801384e <_svfiprintf_r+0x52>
 8013978:	fb0c 3202 	mla	r2, ip, r2, r3
 801397c:	460c      	mov	r4, r1
 801397e:	2001      	movs	r0, #1
 8013980:	e7a8      	b.n	80138d4 <_svfiprintf_r+0xd8>
 8013982:	2300      	movs	r3, #0
 8013984:	3401      	adds	r4, #1
 8013986:	9305      	str	r3, [sp, #20]
 8013988:	4619      	mov	r1, r3
 801398a:	f04f 0c0a 	mov.w	ip, #10
 801398e:	4620      	mov	r0, r4
 8013990:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013994:	3a30      	subs	r2, #48	@ 0x30
 8013996:	2a09      	cmp	r2, #9
 8013998:	d903      	bls.n	80139a2 <_svfiprintf_r+0x1a6>
 801399a:	2b00      	cmp	r3, #0
 801399c:	d0c6      	beq.n	801392c <_svfiprintf_r+0x130>
 801399e:	9105      	str	r1, [sp, #20]
 80139a0:	e7c4      	b.n	801392c <_svfiprintf_r+0x130>
 80139a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80139a6:	4604      	mov	r4, r0
 80139a8:	2301      	movs	r3, #1
 80139aa:	e7f0      	b.n	801398e <_svfiprintf_r+0x192>
 80139ac:	ab03      	add	r3, sp, #12
 80139ae:	9300      	str	r3, [sp, #0]
 80139b0:	462a      	mov	r2, r5
 80139b2:	4b0e      	ldr	r3, [pc, #56]	@ (80139ec <_svfiprintf_r+0x1f0>)
 80139b4:	a904      	add	r1, sp, #16
 80139b6:	4638      	mov	r0, r7
 80139b8:	f7fc fcc8 	bl	801034c <_printf_float>
 80139bc:	1c42      	adds	r2, r0, #1
 80139be:	4606      	mov	r6, r0
 80139c0:	d1d6      	bne.n	8013970 <_svfiprintf_r+0x174>
 80139c2:	89ab      	ldrh	r3, [r5, #12]
 80139c4:	065b      	lsls	r3, r3, #25
 80139c6:	f53f af2d 	bmi.w	8013824 <_svfiprintf_r+0x28>
 80139ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80139cc:	e72c      	b.n	8013828 <_svfiprintf_r+0x2c>
 80139ce:	ab03      	add	r3, sp, #12
 80139d0:	9300      	str	r3, [sp, #0]
 80139d2:	462a      	mov	r2, r5
 80139d4:	4b05      	ldr	r3, [pc, #20]	@ (80139ec <_svfiprintf_r+0x1f0>)
 80139d6:	a904      	add	r1, sp, #16
 80139d8:	4638      	mov	r0, r7
 80139da:	f7fc ff4f 	bl	801087c <_printf_i>
 80139de:	e7ed      	b.n	80139bc <_svfiprintf_r+0x1c0>
 80139e0:	08014d91 	.word	0x08014d91
 80139e4:	08014d9b 	.word	0x08014d9b
 80139e8:	0801034d 	.word	0x0801034d
 80139ec:	08013745 	.word	0x08013745
 80139f0:	08014d97 	.word	0x08014d97

080139f4 <__sflush_r>:
 80139f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80139f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139fc:	0716      	lsls	r6, r2, #28
 80139fe:	4605      	mov	r5, r0
 8013a00:	460c      	mov	r4, r1
 8013a02:	d454      	bmi.n	8013aae <__sflush_r+0xba>
 8013a04:	684b      	ldr	r3, [r1, #4]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	dc02      	bgt.n	8013a10 <__sflush_r+0x1c>
 8013a0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	dd48      	ble.n	8013aa2 <__sflush_r+0xae>
 8013a10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013a12:	2e00      	cmp	r6, #0
 8013a14:	d045      	beq.n	8013aa2 <__sflush_r+0xae>
 8013a16:	2300      	movs	r3, #0
 8013a18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013a1c:	682f      	ldr	r7, [r5, #0]
 8013a1e:	6a21      	ldr	r1, [r4, #32]
 8013a20:	602b      	str	r3, [r5, #0]
 8013a22:	d030      	beq.n	8013a86 <__sflush_r+0x92>
 8013a24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013a26:	89a3      	ldrh	r3, [r4, #12]
 8013a28:	0759      	lsls	r1, r3, #29
 8013a2a:	d505      	bpl.n	8013a38 <__sflush_r+0x44>
 8013a2c:	6863      	ldr	r3, [r4, #4]
 8013a2e:	1ad2      	subs	r2, r2, r3
 8013a30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013a32:	b10b      	cbz	r3, 8013a38 <__sflush_r+0x44>
 8013a34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013a36:	1ad2      	subs	r2, r2, r3
 8013a38:	2300      	movs	r3, #0
 8013a3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013a3c:	6a21      	ldr	r1, [r4, #32]
 8013a3e:	4628      	mov	r0, r5
 8013a40:	47b0      	blx	r6
 8013a42:	1c43      	adds	r3, r0, #1
 8013a44:	89a3      	ldrh	r3, [r4, #12]
 8013a46:	d106      	bne.n	8013a56 <__sflush_r+0x62>
 8013a48:	6829      	ldr	r1, [r5, #0]
 8013a4a:	291d      	cmp	r1, #29
 8013a4c:	d82b      	bhi.n	8013aa6 <__sflush_r+0xb2>
 8013a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8013af8 <__sflush_r+0x104>)
 8013a50:	410a      	asrs	r2, r1
 8013a52:	07d6      	lsls	r6, r2, #31
 8013a54:	d427      	bmi.n	8013aa6 <__sflush_r+0xb2>
 8013a56:	2200      	movs	r2, #0
 8013a58:	6062      	str	r2, [r4, #4]
 8013a5a:	04d9      	lsls	r1, r3, #19
 8013a5c:	6922      	ldr	r2, [r4, #16]
 8013a5e:	6022      	str	r2, [r4, #0]
 8013a60:	d504      	bpl.n	8013a6c <__sflush_r+0x78>
 8013a62:	1c42      	adds	r2, r0, #1
 8013a64:	d101      	bne.n	8013a6a <__sflush_r+0x76>
 8013a66:	682b      	ldr	r3, [r5, #0]
 8013a68:	b903      	cbnz	r3, 8013a6c <__sflush_r+0x78>
 8013a6a:	6560      	str	r0, [r4, #84]	@ 0x54
 8013a6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013a6e:	602f      	str	r7, [r5, #0]
 8013a70:	b1b9      	cbz	r1, 8013aa2 <__sflush_r+0xae>
 8013a72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013a76:	4299      	cmp	r1, r3
 8013a78:	d002      	beq.n	8013a80 <__sflush_r+0x8c>
 8013a7a:	4628      	mov	r0, r5
 8013a7c:	f7fe fa2c 	bl	8011ed8 <_free_r>
 8013a80:	2300      	movs	r3, #0
 8013a82:	6363      	str	r3, [r4, #52]	@ 0x34
 8013a84:	e00d      	b.n	8013aa2 <__sflush_r+0xae>
 8013a86:	2301      	movs	r3, #1
 8013a88:	4628      	mov	r0, r5
 8013a8a:	47b0      	blx	r6
 8013a8c:	4602      	mov	r2, r0
 8013a8e:	1c50      	adds	r0, r2, #1
 8013a90:	d1c9      	bne.n	8013a26 <__sflush_r+0x32>
 8013a92:	682b      	ldr	r3, [r5, #0]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d0c6      	beq.n	8013a26 <__sflush_r+0x32>
 8013a98:	2b1d      	cmp	r3, #29
 8013a9a:	d001      	beq.n	8013aa0 <__sflush_r+0xac>
 8013a9c:	2b16      	cmp	r3, #22
 8013a9e:	d11e      	bne.n	8013ade <__sflush_r+0xea>
 8013aa0:	602f      	str	r7, [r5, #0]
 8013aa2:	2000      	movs	r0, #0
 8013aa4:	e022      	b.n	8013aec <__sflush_r+0xf8>
 8013aa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013aaa:	b21b      	sxth	r3, r3
 8013aac:	e01b      	b.n	8013ae6 <__sflush_r+0xf2>
 8013aae:	690f      	ldr	r7, [r1, #16]
 8013ab0:	2f00      	cmp	r7, #0
 8013ab2:	d0f6      	beq.n	8013aa2 <__sflush_r+0xae>
 8013ab4:	0793      	lsls	r3, r2, #30
 8013ab6:	680e      	ldr	r6, [r1, #0]
 8013ab8:	bf08      	it	eq
 8013aba:	694b      	ldreq	r3, [r1, #20]
 8013abc:	600f      	str	r7, [r1, #0]
 8013abe:	bf18      	it	ne
 8013ac0:	2300      	movne	r3, #0
 8013ac2:	eba6 0807 	sub.w	r8, r6, r7
 8013ac6:	608b      	str	r3, [r1, #8]
 8013ac8:	f1b8 0f00 	cmp.w	r8, #0
 8013acc:	dde9      	ble.n	8013aa2 <__sflush_r+0xae>
 8013ace:	6a21      	ldr	r1, [r4, #32]
 8013ad0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013ad2:	4643      	mov	r3, r8
 8013ad4:	463a      	mov	r2, r7
 8013ad6:	4628      	mov	r0, r5
 8013ad8:	47b0      	blx	r6
 8013ada:	2800      	cmp	r0, #0
 8013adc:	dc08      	bgt.n	8013af0 <__sflush_r+0xfc>
 8013ade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ae2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013ae6:	81a3      	strh	r3, [r4, #12]
 8013ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8013aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013af0:	4407      	add	r7, r0
 8013af2:	eba8 0800 	sub.w	r8, r8, r0
 8013af6:	e7e7      	b.n	8013ac8 <__sflush_r+0xd4>
 8013af8:	dfbffffe 	.word	0xdfbffffe

08013afc <_fflush_r>:
 8013afc:	b538      	push	{r3, r4, r5, lr}
 8013afe:	690b      	ldr	r3, [r1, #16]
 8013b00:	4605      	mov	r5, r0
 8013b02:	460c      	mov	r4, r1
 8013b04:	b913      	cbnz	r3, 8013b0c <_fflush_r+0x10>
 8013b06:	2500      	movs	r5, #0
 8013b08:	4628      	mov	r0, r5
 8013b0a:	bd38      	pop	{r3, r4, r5, pc}
 8013b0c:	b118      	cbz	r0, 8013b16 <_fflush_r+0x1a>
 8013b0e:	6a03      	ldr	r3, [r0, #32]
 8013b10:	b90b      	cbnz	r3, 8013b16 <_fflush_r+0x1a>
 8013b12:	f7fd fa73 	bl	8010ffc <__sinit>
 8013b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d0f3      	beq.n	8013b06 <_fflush_r+0xa>
 8013b1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013b20:	07d0      	lsls	r0, r2, #31
 8013b22:	d404      	bmi.n	8013b2e <_fflush_r+0x32>
 8013b24:	0599      	lsls	r1, r3, #22
 8013b26:	d402      	bmi.n	8013b2e <_fflush_r+0x32>
 8013b28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013b2a:	f7fd fb7e 	bl	801122a <__retarget_lock_acquire_recursive>
 8013b2e:	4628      	mov	r0, r5
 8013b30:	4621      	mov	r1, r4
 8013b32:	f7ff ff5f 	bl	80139f4 <__sflush_r>
 8013b36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013b38:	07da      	lsls	r2, r3, #31
 8013b3a:	4605      	mov	r5, r0
 8013b3c:	d4e4      	bmi.n	8013b08 <_fflush_r+0xc>
 8013b3e:	89a3      	ldrh	r3, [r4, #12]
 8013b40:	059b      	lsls	r3, r3, #22
 8013b42:	d4e1      	bmi.n	8013b08 <_fflush_r+0xc>
 8013b44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013b46:	f7fd fb71 	bl	801122c <__retarget_lock_release_recursive>
 8013b4a:	e7dd      	b.n	8013b08 <_fflush_r+0xc>

08013b4c <memmove>:
 8013b4c:	4288      	cmp	r0, r1
 8013b4e:	b510      	push	{r4, lr}
 8013b50:	eb01 0402 	add.w	r4, r1, r2
 8013b54:	d902      	bls.n	8013b5c <memmove+0x10>
 8013b56:	4284      	cmp	r4, r0
 8013b58:	4623      	mov	r3, r4
 8013b5a:	d807      	bhi.n	8013b6c <memmove+0x20>
 8013b5c:	1e43      	subs	r3, r0, #1
 8013b5e:	42a1      	cmp	r1, r4
 8013b60:	d008      	beq.n	8013b74 <memmove+0x28>
 8013b62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013b66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013b6a:	e7f8      	b.n	8013b5e <memmove+0x12>
 8013b6c:	4402      	add	r2, r0
 8013b6e:	4601      	mov	r1, r0
 8013b70:	428a      	cmp	r2, r1
 8013b72:	d100      	bne.n	8013b76 <memmove+0x2a>
 8013b74:	bd10      	pop	{r4, pc}
 8013b76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013b7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013b7e:	e7f7      	b.n	8013b70 <memmove+0x24>

08013b80 <strncmp>:
 8013b80:	b510      	push	{r4, lr}
 8013b82:	b16a      	cbz	r2, 8013ba0 <strncmp+0x20>
 8013b84:	3901      	subs	r1, #1
 8013b86:	1884      	adds	r4, r0, r2
 8013b88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013b8c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013b90:	429a      	cmp	r2, r3
 8013b92:	d103      	bne.n	8013b9c <strncmp+0x1c>
 8013b94:	42a0      	cmp	r0, r4
 8013b96:	d001      	beq.n	8013b9c <strncmp+0x1c>
 8013b98:	2a00      	cmp	r2, #0
 8013b9a:	d1f5      	bne.n	8013b88 <strncmp+0x8>
 8013b9c:	1ad0      	subs	r0, r2, r3
 8013b9e:	bd10      	pop	{r4, pc}
 8013ba0:	4610      	mov	r0, r2
 8013ba2:	e7fc      	b.n	8013b9e <strncmp+0x1e>

08013ba4 <_sbrk_r>:
 8013ba4:	b538      	push	{r3, r4, r5, lr}
 8013ba6:	4d06      	ldr	r5, [pc, #24]	@ (8013bc0 <_sbrk_r+0x1c>)
 8013ba8:	2300      	movs	r3, #0
 8013baa:	4604      	mov	r4, r0
 8013bac:	4608      	mov	r0, r1
 8013bae:	602b      	str	r3, [r5, #0]
 8013bb0:	f7ef fba0 	bl	80032f4 <_sbrk>
 8013bb4:	1c43      	adds	r3, r0, #1
 8013bb6:	d102      	bne.n	8013bbe <_sbrk_r+0x1a>
 8013bb8:	682b      	ldr	r3, [r5, #0]
 8013bba:	b103      	cbz	r3, 8013bbe <_sbrk_r+0x1a>
 8013bbc:	6023      	str	r3, [r4, #0]
 8013bbe:	bd38      	pop	{r3, r4, r5, pc}
 8013bc0:	20002ba8 	.word	0x20002ba8

08013bc4 <memcpy>:
 8013bc4:	440a      	add	r2, r1
 8013bc6:	4291      	cmp	r1, r2
 8013bc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8013bcc:	d100      	bne.n	8013bd0 <memcpy+0xc>
 8013bce:	4770      	bx	lr
 8013bd0:	b510      	push	{r4, lr}
 8013bd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013bd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013bda:	4291      	cmp	r1, r2
 8013bdc:	d1f9      	bne.n	8013bd2 <memcpy+0xe>
 8013bde:	bd10      	pop	{r4, pc}

08013be0 <nan>:
 8013be0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013be8 <nan+0x8>
 8013be4:	4770      	bx	lr
 8013be6:	bf00      	nop
 8013be8:	00000000 	.word	0x00000000
 8013bec:	7ff80000 	.word	0x7ff80000

08013bf0 <__assert_func>:
 8013bf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013bf2:	4614      	mov	r4, r2
 8013bf4:	461a      	mov	r2, r3
 8013bf6:	4b09      	ldr	r3, [pc, #36]	@ (8013c1c <__assert_func+0x2c>)
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	4605      	mov	r5, r0
 8013bfc:	68d8      	ldr	r0, [r3, #12]
 8013bfe:	b954      	cbnz	r4, 8013c16 <__assert_func+0x26>
 8013c00:	4b07      	ldr	r3, [pc, #28]	@ (8013c20 <__assert_func+0x30>)
 8013c02:	461c      	mov	r4, r3
 8013c04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013c08:	9100      	str	r1, [sp, #0]
 8013c0a:	462b      	mov	r3, r5
 8013c0c:	4905      	ldr	r1, [pc, #20]	@ (8013c24 <__assert_func+0x34>)
 8013c0e:	f000 fba7 	bl	8014360 <fiprintf>
 8013c12:	f000 fbb7 	bl	8014384 <abort>
 8013c16:	4b04      	ldr	r3, [pc, #16]	@ (8013c28 <__assert_func+0x38>)
 8013c18:	e7f4      	b.n	8013c04 <__assert_func+0x14>
 8013c1a:	bf00      	nop
 8013c1c:	20000198 	.word	0x20000198
 8013c20:	08014de5 	.word	0x08014de5
 8013c24:	08014db7 	.word	0x08014db7
 8013c28:	08014daa 	.word	0x08014daa

08013c2c <_calloc_r>:
 8013c2c:	b570      	push	{r4, r5, r6, lr}
 8013c2e:	fba1 5402 	umull	r5, r4, r1, r2
 8013c32:	b93c      	cbnz	r4, 8013c44 <_calloc_r+0x18>
 8013c34:	4629      	mov	r1, r5
 8013c36:	f7fe f9c3 	bl	8011fc0 <_malloc_r>
 8013c3a:	4606      	mov	r6, r0
 8013c3c:	b928      	cbnz	r0, 8013c4a <_calloc_r+0x1e>
 8013c3e:	2600      	movs	r6, #0
 8013c40:	4630      	mov	r0, r6
 8013c42:	bd70      	pop	{r4, r5, r6, pc}
 8013c44:	220c      	movs	r2, #12
 8013c46:	6002      	str	r2, [r0, #0]
 8013c48:	e7f9      	b.n	8013c3e <_calloc_r+0x12>
 8013c4a:	462a      	mov	r2, r5
 8013c4c:	4621      	mov	r1, r4
 8013c4e:	f7fd fa6e 	bl	801112e <memset>
 8013c52:	e7f5      	b.n	8013c40 <_calloc_r+0x14>

08013c54 <rshift>:
 8013c54:	6903      	ldr	r3, [r0, #16]
 8013c56:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013c5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013c5e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013c62:	f100 0414 	add.w	r4, r0, #20
 8013c66:	dd45      	ble.n	8013cf4 <rshift+0xa0>
 8013c68:	f011 011f 	ands.w	r1, r1, #31
 8013c6c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013c70:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013c74:	d10c      	bne.n	8013c90 <rshift+0x3c>
 8013c76:	f100 0710 	add.w	r7, r0, #16
 8013c7a:	4629      	mov	r1, r5
 8013c7c:	42b1      	cmp	r1, r6
 8013c7e:	d334      	bcc.n	8013cea <rshift+0x96>
 8013c80:	1a9b      	subs	r3, r3, r2
 8013c82:	009b      	lsls	r3, r3, #2
 8013c84:	1eea      	subs	r2, r5, #3
 8013c86:	4296      	cmp	r6, r2
 8013c88:	bf38      	it	cc
 8013c8a:	2300      	movcc	r3, #0
 8013c8c:	4423      	add	r3, r4
 8013c8e:	e015      	b.n	8013cbc <rshift+0x68>
 8013c90:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013c94:	f1c1 0820 	rsb	r8, r1, #32
 8013c98:	40cf      	lsrs	r7, r1
 8013c9a:	f105 0e04 	add.w	lr, r5, #4
 8013c9e:	46a1      	mov	r9, r4
 8013ca0:	4576      	cmp	r6, lr
 8013ca2:	46f4      	mov	ip, lr
 8013ca4:	d815      	bhi.n	8013cd2 <rshift+0x7e>
 8013ca6:	1a9a      	subs	r2, r3, r2
 8013ca8:	0092      	lsls	r2, r2, #2
 8013caa:	3a04      	subs	r2, #4
 8013cac:	3501      	adds	r5, #1
 8013cae:	42ae      	cmp	r6, r5
 8013cb0:	bf38      	it	cc
 8013cb2:	2200      	movcc	r2, #0
 8013cb4:	18a3      	adds	r3, r4, r2
 8013cb6:	50a7      	str	r7, [r4, r2]
 8013cb8:	b107      	cbz	r7, 8013cbc <rshift+0x68>
 8013cba:	3304      	adds	r3, #4
 8013cbc:	1b1a      	subs	r2, r3, r4
 8013cbe:	42a3      	cmp	r3, r4
 8013cc0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013cc4:	bf08      	it	eq
 8013cc6:	2300      	moveq	r3, #0
 8013cc8:	6102      	str	r2, [r0, #16]
 8013cca:	bf08      	it	eq
 8013ccc:	6143      	streq	r3, [r0, #20]
 8013cce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013cd2:	f8dc c000 	ldr.w	ip, [ip]
 8013cd6:	fa0c fc08 	lsl.w	ip, ip, r8
 8013cda:	ea4c 0707 	orr.w	r7, ip, r7
 8013cde:	f849 7b04 	str.w	r7, [r9], #4
 8013ce2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013ce6:	40cf      	lsrs	r7, r1
 8013ce8:	e7da      	b.n	8013ca0 <rshift+0x4c>
 8013cea:	f851 cb04 	ldr.w	ip, [r1], #4
 8013cee:	f847 cf04 	str.w	ip, [r7, #4]!
 8013cf2:	e7c3      	b.n	8013c7c <rshift+0x28>
 8013cf4:	4623      	mov	r3, r4
 8013cf6:	e7e1      	b.n	8013cbc <rshift+0x68>

08013cf8 <__hexdig_fun>:
 8013cf8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8013cfc:	2b09      	cmp	r3, #9
 8013cfe:	d802      	bhi.n	8013d06 <__hexdig_fun+0xe>
 8013d00:	3820      	subs	r0, #32
 8013d02:	b2c0      	uxtb	r0, r0
 8013d04:	4770      	bx	lr
 8013d06:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8013d0a:	2b05      	cmp	r3, #5
 8013d0c:	d801      	bhi.n	8013d12 <__hexdig_fun+0x1a>
 8013d0e:	3847      	subs	r0, #71	@ 0x47
 8013d10:	e7f7      	b.n	8013d02 <__hexdig_fun+0xa>
 8013d12:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8013d16:	2b05      	cmp	r3, #5
 8013d18:	d801      	bhi.n	8013d1e <__hexdig_fun+0x26>
 8013d1a:	3827      	subs	r0, #39	@ 0x27
 8013d1c:	e7f1      	b.n	8013d02 <__hexdig_fun+0xa>
 8013d1e:	2000      	movs	r0, #0
 8013d20:	4770      	bx	lr
	...

08013d24 <__gethex>:
 8013d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d28:	b085      	sub	sp, #20
 8013d2a:	468a      	mov	sl, r1
 8013d2c:	9302      	str	r3, [sp, #8]
 8013d2e:	680b      	ldr	r3, [r1, #0]
 8013d30:	9001      	str	r0, [sp, #4]
 8013d32:	4690      	mov	r8, r2
 8013d34:	1c9c      	adds	r4, r3, #2
 8013d36:	46a1      	mov	r9, r4
 8013d38:	f814 0b01 	ldrb.w	r0, [r4], #1
 8013d3c:	2830      	cmp	r0, #48	@ 0x30
 8013d3e:	d0fa      	beq.n	8013d36 <__gethex+0x12>
 8013d40:	eba9 0303 	sub.w	r3, r9, r3
 8013d44:	f1a3 0b02 	sub.w	fp, r3, #2
 8013d48:	f7ff ffd6 	bl	8013cf8 <__hexdig_fun>
 8013d4c:	4605      	mov	r5, r0
 8013d4e:	2800      	cmp	r0, #0
 8013d50:	d168      	bne.n	8013e24 <__gethex+0x100>
 8013d52:	49a0      	ldr	r1, [pc, #640]	@ (8013fd4 <__gethex+0x2b0>)
 8013d54:	2201      	movs	r2, #1
 8013d56:	4648      	mov	r0, r9
 8013d58:	f7ff ff12 	bl	8013b80 <strncmp>
 8013d5c:	4607      	mov	r7, r0
 8013d5e:	2800      	cmp	r0, #0
 8013d60:	d167      	bne.n	8013e32 <__gethex+0x10e>
 8013d62:	f899 0001 	ldrb.w	r0, [r9, #1]
 8013d66:	4626      	mov	r6, r4
 8013d68:	f7ff ffc6 	bl	8013cf8 <__hexdig_fun>
 8013d6c:	2800      	cmp	r0, #0
 8013d6e:	d062      	beq.n	8013e36 <__gethex+0x112>
 8013d70:	4623      	mov	r3, r4
 8013d72:	7818      	ldrb	r0, [r3, #0]
 8013d74:	2830      	cmp	r0, #48	@ 0x30
 8013d76:	4699      	mov	r9, r3
 8013d78:	f103 0301 	add.w	r3, r3, #1
 8013d7c:	d0f9      	beq.n	8013d72 <__gethex+0x4e>
 8013d7e:	f7ff ffbb 	bl	8013cf8 <__hexdig_fun>
 8013d82:	fab0 f580 	clz	r5, r0
 8013d86:	096d      	lsrs	r5, r5, #5
 8013d88:	f04f 0b01 	mov.w	fp, #1
 8013d8c:	464a      	mov	r2, r9
 8013d8e:	4616      	mov	r6, r2
 8013d90:	3201      	adds	r2, #1
 8013d92:	7830      	ldrb	r0, [r6, #0]
 8013d94:	f7ff ffb0 	bl	8013cf8 <__hexdig_fun>
 8013d98:	2800      	cmp	r0, #0
 8013d9a:	d1f8      	bne.n	8013d8e <__gethex+0x6a>
 8013d9c:	498d      	ldr	r1, [pc, #564]	@ (8013fd4 <__gethex+0x2b0>)
 8013d9e:	2201      	movs	r2, #1
 8013da0:	4630      	mov	r0, r6
 8013da2:	f7ff feed 	bl	8013b80 <strncmp>
 8013da6:	2800      	cmp	r0, #0
 8013da8:	d13f      	bne.n	8013e2a <__gethex+0x106>
 8013daa:	b944      	cbnz	r4, 8013dbe <__gethex+0x9a>
 8013dac:	1c74      	adds	r4, r6, #1
 8013dae:	4622      	mov	r2, r4
 8013db0:	4616      	mov	r6, r2
 8013db2:	3201      	adds	r2, #1
 8013db4:	7830      	ldrb	r0, [r6, #0]
 8013db6:	f7ff ff9f 	bl	8013cf8 <__hexdig_fun>
 8013dba:	2800      	cmp	r0, #0
 8013dbc:	d1f8      	bne.n	8013db0 <__gethex+0x8c>
 8013dbe:	1ba4      	subs	r4, r4, r6
 8013dc0:	00a7      	lsls	r7, r4, #2
 8013dc2:	7833      	ldrb	r3, [r6, #0]
 8013dc4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8013dc8:	2b50      	cmp	r3, #80	@ 0x50
 8013dca:	d13e      	bne.n	8013e4a <__gethex+0x126>
 8013dcc:	7873      	ldrb	r3, [r6, #1]
 8013dce:	2b2b      	cmp	r3, #43	@ 0x2b
 8013dd0:	d033      	beq.n	8013e3a <__gethex+0x116>
 8013dd2:	2b2d      	cmp	r3, #45	@ 0x2d
 8013dd4:	d034      	beq.n	8013e40 <__gethex+0x11c>
 8013dd6:	1c71      	adds	r1, r6, #1
 8013dd8:	2400      	movs	r4, #0
 8013dda:	7808      	ldrb	r0, [r1, #0]
 8013ddc:	f7ff ff8c 	bl	8013cf8 <__hexdig_fun>
 8013de0:	1e43      	subs	r3, r0, #1
 8013de2:	b2db      	uxtb	r3, r3
 8013de4:	2b18      	cmp	r3, #24
 8013de6:	d830      	bhi.n	8013e4a <__gethex+0x126>
 8013de8:	f1a0 0210 	sub.w	r2, r0, #16
 8013dec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013df0:	f7ff ff82 	bl	8013cf8 <__hexdig_fun>
 8013df4:	f100 3cff 	add.w	ip, r0, #4294967295
 8013df8:	fa5f fc8c 	uxtb.w	ip, ip
 8013dfc:	f1bc 0f18 	cmp.w	ip, #24
 8013e00:	f04f 030a 	mov.w	r3, #10
 8013e04:	d91e      	bls.n	8013e44 <__gethex+0x120>
 8013e06:	b104      	cbz	r4, 8013e0a <__gethex+0xe6>
 8013e08:	4252      	negs	r2, r2
 8013e0a:	4417      	add	r7, r2
 8013e0c:	f8ca 1000 	str.w	r1, [sl]
 8013e10:	b1ed      	cbz	r5, 8013e4e <__gethex+0x12a>
 8013e12:	f1bb 0f00 	cmp.w	fp, #0
 8013e16:	bf0c      	ite	eq
 8013e18:	2506      	moveq	r5, #6
 8013e1a:	2500      	movne	r5, #0
 8013e1c:	4628      	mov	r0, r5
 8013e1e:	b005      	add	sp, #20
 8013e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e24:	2500      	movs	r5, #0
 8013e26:	462c      	mov	r4, r5
 8013e28:	e7b0      	b.n	8013d8c <__gethex+0x68>
 8013e2a:	2c00      	cmp	r4, #0
 8013e2c:	d1c7      	bne.n	8013dbe <__gethex+0x9a>
 8013e2e:	4627      	mov	r7, r4
 8013e30:	e7c7      	b.n	8013dc2 <__gethex+0x9e>
 8013e32:	464e      	mov	r6, r9
 8013e34:	462f      	mov	r7, r5
 8013e36:	2501      	movs	r5, #1
 8013e38:	e7c3      	b.n	8013dc2 <__gethex+0x9e>
 8013e3a:	2400      	movs	r4, #0
 8013e3c:	1cb1      	adds	r1, r6, #2
 8013e3e:	e7cc      	b.n	8013dda <__gethex+0xb6>
 8013e40:	2401      	movs	r4, #1
 8013e42:	e7fb      	b.n	8013e3c <__gethex+0x118>
 8013e44:	fb03 0002 	mla	r0, r3, r2, r0
 8013e48:	e7ce      	b.n	8013de8 <__gethex+0xc4>
 8013e4a:	4631      	mov	r1, r6
 8013e4c:	e7de      	b.n	8013e0c <__gethex+0xe8>
 8013e4e:	eba6 0309 	sub.w	r3, r6, r9
 8013e52:	3b01      	subs	r3, #1
 8013e54:	4629      	mov	r1, r5
 8013e56:	2b07      	cmp	r3, #7
 8013e58:	dc0a      	bgt.n	8013e70 <__gethex+0x14c>
 8013e5a:	9801      	ldr	r0, [sp, #4]
 8013e5c:	f7fe f93c 	bl	80120d8 <_Balloc>
 8013e60:	4604      	mov	r4, r0
 8013e62:	b940      	cbnz	r0, 8013e76 <__gethex+0x152>
 8013e64:	4b5c      	ldr	r3, [pc, #368]	@ (8013fd8 <__gethex+0x2b4>)
 8013e66:	4602      	mov	r2, r0
 8013e68:	21e4      	movs	r1, #228	@ 0xe4
 8013e6a:	485c      	ldr	r0, [pc, #368]	@ (8013fdc <__gethex+0x2b8>)
 8013e6c:	f7ff fec0 	bl	8013bf0 <__assert_func>
 8013e70:	3101      	adds	r1, #1
 8013e72:	105b      	asrs	r3, r3, #1
 8013e74:	e7ef      	b.n	8013e56 <__gethex+0x132>
 8013e76:	f100 0a14 	add.w	sl, r0, #20
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	4655      	mov	r5, sl
 8013e7e:	469b      	mov	fp, r3
 8013e80:	45b1      	cmp	r9, r6
 8013e82:	d337      	bcc.n	8013ef4 <__gethex+0x1d0>
 8013e84:	f845 bb04 	str.w	fp, [r5], #4
 8013e88:	eba5 050a 	sub.w	r5, r5, sl
 8013e8c:	10ad      	asrs	r5, r5, #2
 8013e8e:	6125      	str	r5, [r4, #16]
 8013e90:	4658      	mov	r0, fp
 8013e92:	f7fe fa13 	bl	80122bc <__hi0bits>
 8013e96:	016d      	lsls	r5, r5, #5
 8013e98:	f8d8 6000 	ldr.w	r6, [r8]
 8013e9c:	1a2d      	subs	r5, r5, r0
 8013e9e:	42b5      	cmp	r5, r6
 8013ea0:	dd54      	ble.n	8013f4c <__gethex+0x228>
 8013ea2:	1bad      	subs	r5, r5, r6
 8013ea4:	4629      	mov	r1, r5
 8013ea6:	4620      	mov	r0, r4
 8013ea8:	f7fe fda7 	bl	80129fa <__any_on>
 8013eac:	4681      	mov	r9, r0
 8013eae:	b178      	cbz	r0, 8013ed0 <__gethex+0x1ac>
 8013eb0:	1e6b      	subs	r3, r5, #1
 8013eb2:	1159      	asrs	r1, r3, #5
 8013eb4:	f003 021f 	and.w	r2, r3, #31
 8013eb8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8013ebc:	f04f 0901 	mov.w	r9, #1
 8013ec0:	fa09 f202 	lsl.w	r2, r9, r2
 8013ec4:	420a      	tst	r2, r1
 8013ec6:	d003      	beq.n	8013ed0 <__gethex+0x1ac>
 8013ec8:	454b      	cmp	r3, r9
 8013eca:	dc36      	bgt.n	8013f3a <__gethex+0x216>
 8013ecc:	f04f 0902 	mov.w	r9, #2
 8013ed0:	4629      	mov	r1, r5
 8013ed2:	4620      	mov	r0, r4
 8013ed4:	f7ff febe 	bl	8013c54 <rshift>
 8013ed8:	442f      	add	r7, r5
 8013eda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013ede:	42bb      	cmp	r3, r7
 8013ee0:	da42      	bge.n	8013f68 <__gethex+0x244>
 8013ee2:	9801      	ldr	r0, [sp, #4]
 8013ee4:	4621      	mov	r1, r4
 8013ee6:	f7fe f937 	bl	8012158 <_Bfree>
 8013eea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013eec:	2300      	movs	r3, #0
 8013eee:	6013      	str	r3, [r2, #0]
 8013ef0:	25a3      	movs	r5, #163	@ 0xa3
 8013ef2:	e793      	b.n	8013e1c <__gethex+0xf8>
 8013ef4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8013ef8:	2a2e      	cmp	r2, #46	@ 0x2e
 8013efa:	d012      	beq.n	8013f22 <__gethex+0x1fe>
 8013efc:	2b20      	cmp	r3, #32
 8013efe:	d104      	bne.n	8013f0a <__gethex+0x1e6>
 8013f00:	f845 bb04 	str.w	fp, [r5], #4
 8013f04:	f04f 0b00 	mov.w	fp, #0
 8013f08:	465b      	mov	r3, fp
 8013f0a:	7830      	ldrb	r0, [r6, #0]
 8013f0c:	9303      	str	r3, [sp, #12]
 8013f0e:	f7ff fef3 	bl	8013cf8 <__hexdig_fun>
 8013f12:	9b03      	ldr	r3, [sp, #12]
 8013f14:	f000 000f 	and.w	r0, r0, #15
 8013f18:	4098      	lsls	r0, r3
 8013f1a:	ea4b 0b00 	orr.w	fp, fp, r0
 8013f1e:	3304      	adds	r3, #4
 8013f20:	e7ae      	b.n	8013e80 <__gethex+0x15c>
 8013f22:	45b1      	cmp	r9, r6
 8013f24:	d8ea      	bhi.n	8013efc <__gethex+0x1d8>
 8013f26:	492b      	ldr	r1, [pc, #172]	@ (8013fd4 <__gethex+0x2b0>)
 8013f28:	9303      	str	r3, [sp, #12]
 8013f2a:	2201      	movs	r2, #1
 8013f2c:	4630      	mov	r0, r6
 8013f2e:	f7ff fe27 	bl	8013b80 <strncmp>
 8013f32:	9b03      	ldr	r3, [sp, #12]
 8013f34:	2800      	cmp	r0, #0
 8013f36:	d1e1      	bne.n	8013efc <__gethex+0x1d8>
 8013f38:	e7a2      	b.n	8013e80 <__gethex+0x15c>
 8013f3a:	1ea9      	subs	r1, r5, #2
 8013f3c:	4620      	mov	r0, r4
 8013f3e:	f7fe fd5c 	bl	80129fa <__any_on>
 8013f42:	2800      	cmp	r0, #0
 8013f44:	d0c2      	beq.n	8013ecc <__gethex+0x1a8>
 8013f46:	f04f 0903 	mov.w	r9, #3
 8013f4a:	e7c1      	b.n	8013ed0 <__gethex+0x1ac>
 8013f4c:	da09      	bge.n	8013f62 <__gethex+0x23e>
 8013f4e:	1b75      	subs	r5, r6, r5
 8013f50:	4621      	mov	r1, r4
 8013f52:	9801      	ldr	r0, [sp, #4]
 8013f54:	462a      	mov	r2, r5
 8013f56:	f7fe fb17 	bl	8012588 <__lshift>
 8013f5a:	1b7f      	subs	r7, r7, r5
 8013f5c:	4604      	mov	r4, r0
 8013f5e:	f100 0a14 	add.w	sl, r0, #20
 8013f62:	f04f 0900 	mov.w	r9, #0
 8013f66:	e7b8      	b.n	8013eda <__gethex+0x1b6>
 8013f68:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013f6c:	42bd      	cmp	r5, r7
 8013f6e:	dd6f      	ble.n	8014050 <__gethex+0x32c>
 8013f70:	1bed      	subs	r5, r5, r7
 8013f72:	42ae      	cmp	r6, r5
 8013f74:	dc34      	bgt.n	8013fe0 <__gethex+0x2bc>
 8013f76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013f7a:	2b02      	cmp	r3, #2
 8013f7c:	d022      	beq.n	8013fc4 <__gethex+0x2a0>
 8013f7e:	2b03      	cmp	r3, #3
 8013f80:	d024      	beq.n	8013fcc <__gethex+0x2a8>
 8013f82:	2b01      	cmp	r3, #1
 8013f84:	d115      	bne.n	8013fb2 <__gethex+0x28e>
 8013f86:	42ae      	cmp	r6, r5
 8013f88:	d113      	bne.n	8013fb2 <__gethex+0x28e>
 8013f8a:	2e01      	cmp	r6, #1
 8013f8c:	d10b      	bne.n	8013fa6 <__gethex+0x282>
 8013f8e:	9a02      	ldr	r2, [sp, #8]
 8013f90:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013f94:	6013      	str	r3, [r2, #0]
 8013f96:	2301      	movs	r3, #1
 8013f98:	6123      	str	r3, [r4, #16]
 8013f9a:	f8ca 3000 	str.w	r3, [sl]
 8013f9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013fa0:	2562      	movs	r5, #98	@ 0x62
 8013fa2:	601c      	str	r4, [r3, #0]
 8013fa4:	e73a      	b.n	8013e1c <__gethex+0xf8>
 8013fa6:	1e71      	subs	r1, r6, #1
 8013fa8:	4620      	mov	r0, r4
 8013faa:	f7fe fd26 	bl	80129fa <__any_on>
 8013fae:	2800      	cmp	r0, #0
 8013fb0:	d1ed      	bne.n	8013f8e <__gethex+0x26a>
 8013fb2:	9801      	ldr	r0, [sp, #4]
 8013fb4:	4621      	mov	r1, r4
 8013fb6:	f7fe f8cf 	bl	8012158 <_Bfree>
 8013fba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013fbc:	2300      	movs	r3, #0
 8013fbe:	6013      	str	r3, [r2, #0]
 8013fc0:	2550      	movs	r5, #80	@ 0x50
 8013fc2:	e72b      	b.n	8013e1c <__gethex+0xf8>
 8013fc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d1f3      	bne.n	8013fb2 <__gethex+0x28e>
 8013fca:	e7e0      	b.n	8013f8e <__gethex+0x26a>
 8013fcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d1dd      	bne.n	8013f8e <__gethex+0x26a>
 8013fd2:	e7ee      	b.n	8013fb2 <__gethex+0x28e>
 8013fd4:	08014c38 	.word	0x08014c38
 8013fd8:	08014acd 	.word	0x08014acd
 8013fdc:	08014de6 	.word	0x08014de6
 8013fe0:	1e6f      	subs	r7, r5, #1
 8013fe2:	f1b9 0f00 	cmp.w	r9, #0
 8013fe6:	d130      	bne.n	801404a <__gethex+0x326>
 8013fe8:	b127      	cbz	r7, 8013ff4 <__gethex+0x2d0>
 8013fea:	4639      	mov	r1, r7
 8013fec:	4620      	mov	r0, r4
 8013fee:	f7fe fd04 	bl	80129fa <__any_on>
 8013ff2:	4681      	mov	r9, r0
 8013ff4:	117a      	asrs	r2, r7, #5
 8013ff6:	2301      	movs	r3, #1
 8013ff8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8013ffc:	f007 071f 	and.w	r7, r7, #31
 8014000:	40bb      	lsls	r3, r7
 8014002:	4213      	tst	r3, r2
 8014004:	4629      	mov	r1, r5
 8014006:	4620      	mov	r0, r4
 8014008:	bf18      	it	ne
 801400a:	f049 0902 	orrne.w	r9, r9, #2
 801400e:	f7ff fe21 	bl	8013c54 <rshift>
 8014012:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8014016:	1b76      	subs	r6, r6, r5
 8014018:	2502      	movs	r5, #2
 801401a:	f1b9 0f00 	cmp.w	r9, #0
 801401e:	d047      	beq.n	80140b0 <__gethex+0x38c>
 8014020:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014024:	2b02      	cmp	r3, #2
 8014026:	d015      	beq.n	8014054 <__gethex+0x330>
 8014028:	2b03      	cmp	r3, #3
 801402a:	d017      	beq.n	801405c <__gethex+0x338>
 801402c:	2b01      	cmp	r3, #1
 801402e:	d109      	bne.n	8014044 <__gethex+0x320>
 8014030:	f019 0f02 	tst.w	r9, #2
 8014034:	d006      	beq.n	8014044 <__gethex+0x320>
 8014036:	f8da 3000 	ldr.w	r3, [sl]
 801403a:	ea49 0903 	orr.w	r9, r9, r3
 801403e:	f019 0f01 	tst.w	r9, #1
 8014042:	d10e      	bne.n	8014062 <__gethex+0x33e>
 8014044:	f045 0510 	orr.w	r5, r5, #16
 8014048:	e032      	b.n	80140b0 <__gethex+0x38c>
 801404a:	f04f 0901 	mov.w	r9, #1
 801404e:	e7d1      	b.n	8013ff4 <__gethex+0x2d0>
 8014050:	2501      	movs	r5, #1
 8014052:	e7e2      	b.n	801401a <__gethex+0x2f6>
 8014054:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014056:	f1c3 0301 	rsb	r3, r3, #1
 801405a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801405c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801405e:	2b00      	cmp	r3, #0
 8014060:	d0f0      	beq.n	8014044 <__gethex+0x320>
 8014062:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014066:	f104 0314 	add.w	r3, r4, #20
 801406a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801406e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014072:	f04f 0c00 	mov.w	ip, #0
 8014076:	4618      	mov	r0, r3
 8014078:	f853 2b04 	ldr.w	r2, [r3], #4
 801407c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014080:	d01b      	beq.n	80140ba <__gethex+0x396>
 8014082:	3201      	adds	r2, #1
 8014084:	6002      	str	r2, [r0, #0]
 8014086:	2d02      	cmp	r5, #2
 8014088:	f104 0314 	add.w	r3, r4, #20
 801408c:	d13c      	bne.n	8014108 <__gethex+0x3e4>
 801408e:	f8d8 2000 	ldr.w	r2, [r8]
 8014092:	3a01      	subs	r2, #1
 8014094:	42b2      	cmp	r2, r6
 8014096:	d109      	bne.n	80140ac <__gethex+0x388>
 8014098:	1171      	asrs	r1, r6, #5
 801409a:	2201      	movs	r2, #1
 801409c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80140a0:	f006 061f 	and.w	r6, r6, #31
 80140a4:	fa02 f606 	lsl.w	r6, r2, r6
 80140a8:	421e      	tst	r6, r3
 80140aa:	d13a      	bne.n	8014122 <__gethex+0x3fe>
 80140ac:	f045 0520 	orr.w	r5, r5, #32
 80140b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80140b2:	601c      	str	r4, [r3, #0]
 80140b4:	9b02      	ldr	r3, [sp, #8]
 80140b6:	601f      	str	r7, [r3, #0]
 80140b8:	e6b0      	b.n	8013e1c <__gethex+0xf8>
 80140ba:	4299      	cmp	r1, r3
 80140bc:	f843 cc04 	str.w	ip, [r3, #-4]
 80140c0:	d8d9      	bhi.n	8014076 <__gethex+0x352>
 80140c2:	68a3      	ldr	r3, [r4, #8]
 80140c4:	459b      	cmp	fp, r3
 80140c6:	db17      	blt.n	80140f8 <__gethex+0x3d4>
 80140c8:	6861      	ldr	r1, [r4, #4]
 80140ca:	9801      	ldr	r0, [sp, #4]
 80140cc:	3101      	adds	r1, #1
 80140ce:	f7fe f803 	bl	80120d8 <_Balloc>
 80140d2:	4681      	mov	r9, r0
 80140d4:	b918      	cbnz	r0, 80140de <__gethex+0x3ba>
 80140d6:	4b1a      	ldr	r3, [pc, #104]	@ (8014140 <__gethex+0x41c>)
 80140d8:	4602      	mov	r2, r0
 80140da:	2184      	movs	r1, #132	@ 0x84
 80140dc:	e6c5      	b.n	8013e6a <__gethex+0x146>
 80140de:	6922      	ldr	r2, [r4, #16]
 80140e0:	3202      	adds	r2, #2
 80140e2:	f104 010c 	add.w	r1, r4, #12
 80140e6:	0092      	lsls	r2, r2, #2
 80140e8:	300c      	adds	r0, #12
 80140ea:	f7ff fd6b 	bl	8013bc4 <memcpy>
 80140ee:	4621      	mov	r1, r4
 80140f0:	9801      	ldr	r0, [sp, #4]
 80140f2:	f7fe f831 	bl	8012158 <_Bfree>
 80140f6:	464c      	mov	r4, r9
 80140f8:	6923      	ldr	r3, [r4, #16]
 80140fa:	1c5a      	adds	r2, r3, #1
 80140fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014100:	6122      	str	r2, [r4, #16]
 8014102:	2201      	movs	r2, #1
 8014104:	615a      	str	r2, [r3, #20]
 8014106:	e7be      	b.n	8014086 <__gethex+0x362>
 8014108:	6922      	ldr	r2, [r4, #16]
 801410a:	455a      	cmp	r2, fp
 801410c:	dd0b      	ble.n	8014126 <__gethex+0x402>
 801410e:	2101      	movs	r1, #1
 8014110:	4620      	mov	r0, r4
 8014112:	f7ff fd9f 	bl	8013c54 <rshift>
 8014116:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801411a:	3701      	adds	r7, #1
 801411c:	42bb      	cmp	r3, r7
 801411e:	f6ff aee0 	blt.w	8013ee2 <__gethex+0x1be>
 8014122:	2501      	movs	r5, #1
 8014124:	e7c2      	b.n	80140ac <__gethex+0x388>
 8014126:	f016 061f 	ands.w	r6, r6, #31
 801412a:	d0fa      	beq.n	8014122 <__gethex+0x3fe>
 801412c:	4453      	add	r3, sl
 801412e:	f1c6 0620 	rsb	r6, r6, #32
 8014132:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8014136:	f7fe f8c1 	bl	80122bc <__hi0bits>
 801413a:	42b0      	cmp	r0, r6
 801413c:	dbe7      	blt.n	801410e <__gethex+0x3ea>
 801413e:	e7f0      	b.n	8014122 <__gethex+0x3fe>
 8014140:	08014acd 	.word	0x08014acd

08014144 <L_shift>:
 8014144:	f1c2 0208 	rsb	r2, r2, #8
 8014148:	0092      	lsls	r2, r2, #2
 801414a:	b570      	push	{r4, r5, r6, lr}
 801414c:	f1c2 0620 	rsb	r6, r2, #32
 8014150:	6843      	ldr	r3, [r0, #4]
 8014152:	6804      	ldr	r4, [r0, #0]
 8014154:	fa03 f506 	lsl.w	r5, r3, r6
 8014158:	432c      	orrs	r4, r5
 801415a:	40d3      	lsrs	r3, r2
 801415c:	6004      	str	r4, [r0, #0]
 801415e:	f840 3f04 	str.w	r3, [r0, #4]!
 8014162:	4288      	cmp	r0, r1
 8014164:	d3f4      	bcc.n	8014150 <L_shift+0xc>
 8014166:	bd70      	pop	{r4, r5, r6, pc}

08014168 <__match>:
 8014168:	b530      	push	{r4, r5, lr}
 801416a:	6803      	ldr	r3, [r0, #0]
 801416c:	3301      	adds	r3, #1
 801416e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014172:	b914      	cbnz	r4, 801417a <__match+0x12>
 8014174:	6003      	str	r3, [r0, #0]
 8014176:	2001      	movs	r0, #1
 8014178:	bd30      	pop	{r4, r5, pc}
 801417a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801417e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8014182:	2d19      	cmp	r5, #25
 8014184:	bf98      	it	ls
 8014186:	3220      	addls	r2, #32
 8014188:	42a2      	cmp	r2, r4
 801418a:	d0f0      	beq.n	801416e <__match+0x6>
 801418c:	2000      	movs	r0, #0
 801418e:	e7f3      	b.n	8014178 <__match+0x10>

08014190 <__hexnan>:
 8014190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014194:	680b      	ldr	r3, [r1, #0]
 8014196:	6801      	ldr	r1, [r0, #0]
 8014198:	115e      	asrs	r6, r3, #5
 801419a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801419e:	f013 031f 	ands.w	r3, r3, #31
 80141a2:	b087      	sub	sp, #28
 80141a4:	bf18      	it	ne
 80141a6:	3604      	addne	r6, #4
 80141a8:	2500      	movs	r5, #0
 80141aa:	1f37      	subs	r7, r6, #4
 80141ac:	4682      	mov	sl, r0
 80141ae:	4690      	mov	r8, r2
 80141b0:	9301      	str	r3, [sp, #4]
 80141b2:	f846 5c04 	str.w	r5, [r6, #-4]
 80141b6:	46b9      	mov	r9, r7
 80141b8:	463c      	mov	r4, r7
 80141ba:	9502      	str	r5, [sp, #8]
 80141bc:	46ab      	mov	fp, r5
 80141be:	784a      	ldrb	r2, [r1, #1]
 80141c0:	1c4b      	adds	r3, r1, #1
 80141c2:	9303      	str	r3, [sp, #12]
 80141c4:	b342      	cbz	r2, 8014218 <__hexnan+0x88>
 80141c6:	4610      	mov	r0, r2
 80141c8:	9105      	str	r1, [sp, #20]
 80141ca:	9204      	str	r2, [sp, #16]
 80141cc:	f7ff fd94 	bl	8013cf8 <__hexdig_fun>
 80141d0:	2800      	cmp	r0, #0
 80141d2:	d151      	bne.n	8014278 <__hexnan+0xe8>
 80141d4:	9a04      	ldr	r2, [sp, #16]
 80141d6:	9905      	ldr	r1, [sp, #20]
 80141d8:	2a20      	cmp	r2, #32
 80141da:	d818      	bhi.n	801420e <__hexnan+0x7e>
 80141dc:	9b02      	ldr	r3, [sp, #8]
 80141de:	459b      	cmp	fp, r3
 80141e0:	dd13      	ble.n	801420a <__hexnan+0x7a>
 80141e2:	454c      	cmp	r4, r9
 80141e4:	d206      	bcs.n	80141f4 <__hexnan+0x64>
 80141e6:	2d07      	cmp	r5, #7
 80141e8:	dc04      	bgt.n	80141f4 <__hexnan+0x64>
 80141ea:	462a      	mov	r2, r5
 80141ec:	4649      	mov	r1, r9
 80141ee:	4620      	mov	r0, r4
 80141f0:	f7ff ffa8 	bl	8014144 <L_shift>
 80141f4:	4544      	cmp	r4, r8
 80141f6:	d952      	bls.n	801429e <__hexnan+0x10e>
 80141f8:	2300      	movs	r3, #0
 80141fa:	f1a4 0904 	sub.w	r9, r4, #4
 80141fe:	f844 3c04 	str.w	r3, [r4, #-4]
 8014202:	f8cd b008 	str.w	fp, [sp, #8]
 8014206:	464c      	mov	r4, r9
 8014208:	461d      	mov	r5, r3
 801420a:	9903      	ldr	r1, [sp, #12]
 801420c:	e7d7      	b.n	80141be <__hexnan+0x2e>
 801420e:	2a29      	cmp	r2, #41	@ 0x29
 8014210:	d157      	bne.n	80142c2 <__hexnan+0x132>
 8014212:	3102      	adds	r1, #2
 8014214:	f8ca 1000 	str.w	r1, [sl]
 8014218:	f1bb 0f00 	cmp.w	fp, #0
 801421c:	d051      	beq.n	80142c2 <__hexnan+0x132>
 801421e:	454c      	cmp	r4, r9
 8014220:	d206      	bcs.n	8014230 <__hexnan+0xa0>
 8014222:	2d07      	cmp	r5, #7
 8014224:	dc04      	bgt.n	8014230 <__hexnan+0xa0>
 8014226:	462a      	mov	r2, r5
 8014228:	4649      	mov	r1, r9
 801422a:	4620      	mov	r0, r4
 801422c:	f7ff ff8a 	bl	8014144 <L_shift>
 8014230:	4544      	cmp	r4, r8
 8014232:	d936      	bls.n	80142a2 <__hexnan+0x112>
 8014234:	f1a8 0204 	sub.w	r2, r8, #4
 8014238:	4623      	mov	r3, r4
 801423a:	f853 1b04 	ldr.w	r1, [r3], #4
 801423e:	f842 1f04 	str.w	r1, [r2, #4]!
 8014242:	429f      	cmp	r7, r3
 8014244:	d2f9      	bcs.n	801423a <__hexnan+0xaa>
 8014246:	1b3b      	subs	r3, r7, r4
 8014248:	f023 0303 	bic.w	r3, r3, #3
 801424c:	3304      	adds	r3, #4
 801424e:	3401      	adds	r4, #1
 8014250:	3e03      	subs	r6, #3
 8014252:	42b4      	cmp	r4, r6
 8014254:	bf88      	it	hi
 8014256:	2304      	movhi	r3, #4
 8014258:	4443      	add	r3, r8
 801425a:	2200      	movs	r2, #0
 801425c:	f843 2b04 	str.w	r2, [r3], #4
 8014260:	429f      	cmp	r7, r3
 8014262:	d2fb      	bcs.n	801425c <__hexnan+0xcc>
 8014264:	683b      	ldr	r3, [r7, #0]
 8014266:	b91b      	cbnz	r3, 8014270 <__hexnan+0xe0>
 8014268:	4547      	cmp	r7, r8
 801426a:	d128      	bne.n	80142be <__hexnan+0x12e>
 801426c:	2301      	movs	r3, #1
 801426e:	603b      	str	r3, [r7, #0]
 8014270:	2005      	movs	r0, #5
 8014272:	b007      	add	sp, #28
 8014274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014278:	3501      	adds	r5, #1
 801427a:	2d08      	cmp	r5, #8
 801427c:	f10b 0b01 	add.w	fp, fp, #1
 8014280:	dd06      	ble.n	8014290 <__hexnan+0x100>
 8014282:	4544      	cmp	r4, r8
 8014284:	d9c1      	bls.n	801420a <__hexnan+0x7a>
 8014286:	2300      	movs	r3, #0
 8014288:	f844 3c04 	str.w	r3, [r4, #-4]
 801428c:	2501      	movs	r5, #1
 801428e:	3c04      	subs	r4, #4
 8014290:	6822      	ldr	r2, [r4, #0]
 8014292:	f000 000f 	and.w	r0, r0, #15
 8014296:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801429a:	6020      	str	r0, [r4, #0]
 801429c:	e7b5      	b.n	801420a <__hexnan+0x7a>
 801429e:	2508      	movs	r5, #8
 80142a0:	e7b3      	b.n	801420a <__hexnan+0x7a>
 80142a2:	9b01      	ldr	r3, [sp, #4]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d0dd      	beq.n	8014264 <__hexnan+0xd4>
 80142a8:	f1c3 0320 	rsb	r3, r3, #32
 80142ac:	f04f 32ff 	mov.w	r2, #4294967295
 80142b0:	40da      	lsrs	r2, r3
 80142b2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80142b6:	4013      	ands	r3, r2
 80142b8:	f846 3c04 	str.w	r3, [r6, #-4]
 80142bc:	e7d2      	b.n	8014264 <__hexnan+0xd4>
 80142be:	3f04      	subs	r7, #4
 80142c0:	e7d0      	b.n	8014264 <__hexnan+0xd4>
 80142c2:	2004      	movs	r0, #4
 80142c4:	e7d5      	b.n	8014272 <__hexnan+0xe2>

080142c6 <__ascii_mbtowc>:
 80142c6:	b082      	sub	sp, #8
 80142c8:	b901      	cbnz	r1, 80142cc <__ascii_mbtowc+0x6>
 80142ca:	a901      	add	r1, sp, #4
 80142cc:	b142      	cbz	r2, 80142e0 <__ascii_mbtowc+0x1a>
 80142ce:	b14b      	cbz	r3, 80142e4 <__ascii_mbtowc+0x1e>
 80142d0:	7813      	ldrb	r3, [r2, #0]
 80142d2:	600b      	str	r3, [r1, #0]
 80142d4:	7812      	ldrb	r2, [r2, #0]
 80142d6:	1e10      	subs	r0, r2, #0
 80142d8:	bf18      	it	ne
 80142da:	2001      	movne	r0, #1
 80142dc:	b002      	add	sp, #8
 80142de:	4770      	bx	lr
 80142e0:	4610      	mov	r0, r2
 80142e2:	e7fb      	b.n	80142dc <__ascii_mbtowc+0x16>
 80142e4:	f06f 0001 	mvn.w	r0, #1
 80142e8:	e7f8      	b.n	80142dc <__ascii_mbtowc+0x16>

080142ea <_realloc_r>:
 80142ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142ee:	4680      	mov	r8, r0
 80142f0:	4615      	mov	r5, r2
 80142f2:	460c      	mov	r4, r1
 80142f4:	b921      	cbnz	r1, 8014300 <_realloc_r+0x16>
 80142f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80142fa:	4611      	mov	r1, r2
 80142fc:	f7fd be60 	b.w	8011fc0 <_malloc_r>
 8014300:	b92a      	cbnz	r2, 801430e <_realloc_r+0x24>
 8014302:	f7fd fde9 	bl	8011ed8 <_free_r>
 8014306:	2400      	movs	r4, #0
 8014308:	4620      	mov	r0, r4
 801430a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801430e:	f000 f840 	bl	8014392 <_malloc_usable_size_r>
 8014312:	4285      	cmp	r5, r0
 8014314:	4606      	mov	r6, r0
 8014316:	d802      	bhi.n	801431e <_realloc_r+0x34>
 8014318:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801431c:	d8f4      	bhi.n	8014308 <_realloc_r+0x1e>
 801431e:	4629      	mov	r1, r5
 8014320:	4640      	mov	r0, r8
 8014322:	f7fd fe4d 	bl	8011fc0 <_malloc_r>
 8014326:	4607      	mov	r7, r0
 8014328:	2800      	cmp	r0, #0
 801432a:	d0ec      	beq.n	8014306 <_realloc_r+0x1c>
 801432c:	42b5      	cmp	r5, r6
 801432e:	462a      	mov	r2, r5
 8014330:	4621      	mov	r1, r4
 8014332:	bf28      	it	cs
 8014334:	4632      	movcs	r2, r6
 8014336:	f7ff fc45 	bl	8013bc4 <memcpy>
 801433a:	4621      	mov	r1, r4
 801433c:	4640      	mov	r0, r8
 801433e:	f7fd fdcb 	bl	8011ed8 <_free_r>
 8014342:	463c      	mov	r4, r7
 8014344:	e7e0      	b.n	8014308 <_realloc_r+0x1e>

08014346 <__ascii_wctomb>:
 8014346:	4603      	mov	r3, r0
 8014348:	4608      	mov	r0, r1
 801434a:	b141      	cbz	r1, 801435e <__ascii_wctomb+0x18>
 801434c:	2aff      	cmp	r2, #255	@ 0xff
 801434e:	d904      	bls.n	801435a <__ascii_wctomb+0x14>
 8014350:	228a      	movs	r2, #138	@ 0x8a
 8014352:	601a      	str	r2, [r3, #0]
 8014354:	f04f 30ff 	mov.w	r0, #4294967295
 8014358:	4770      	bx	lr
 801435a:	700a      	strb	r2, [r1, #0]
 801435c:	2001      	movs	r0, #1
 801435e:	4770      	bx	lr

08014360 <fiprintf>:
 8014360:	b40e      	push	{r1, r2, r3}
 8014362:	b503      	push	{r0, r1, lr}
 8014364:	4601      	mov	r1, r0
 8014366:	ab03      	add	r3, sp, #12
 8014368:	4805      	ldr	r0, [pc, #20]	@ (8014380 <fiprintf+0x20>)
 801436a:	f853 2b04 	ldr.w	r2, [r3], #4
 801436e:	6800      	ldr	r0, [r0, #0]
 8014370:	9301      	str	r3, [sp, #4]
 8014372:	f000 f83f 	bl	80143f4 <_vfiprintf_r>
 8014376:	b002      	add	sp, #8
 8014378:	f85d eb04 	ldr.w	lr, [sp], #4
 801437c:	b003      	add	sp, #12
 801437e:	4770      	bx	lr
 8014380:	20000198 	.word	0x20000198

08014384 <abort>:
 8014384:	b508      	push	{r3, lr}
 8014386:	2006      	movs	r0, #6
 8014388:	f000 fa08 	bl	801479c <raise>
 801438c:	2001      	movs	r0, #1
 801438e:	f7ee ff39 	bl	8003204 <_exit>

08014392 <_malloc_usable_size_r>:
 8014392:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014396:	1f18      	subs	r0, r3, #4
 8014398:	2b00      	cmp	r3, #0
 801439a:	bfbc      	itt	lt
 801439c:	580b      	ldrlt	r3, [r1, r0]
 801439e:	18c0      	addlt	r0, r0, r3
 80143a0:	4770      	bx	lr

080143a2 <__sfputc_r>:
 80143a2:	6893      	ldr	r3, [r2, #8]
 80143a4:	3b01      	subs	r3, #1
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	b410      	push	{r4}
 80143aa:	6093      	str	r3, [r2, #8]
 80143ac:	da08      	bge.n	80143c0 <__sfputc_r+0x1e>
 80143ae:	6994      	ldr	r4, [r2, #24]
 80143b0:	42a3      	cmp	r3, r4
 80143b2:	db01      	blt.n	80143b8 <__sfputc_r+0x16>
 80143b4:	290a      	cmp	r1, #10
 80143b6:	d103      	bne.n	80143c0 <__sfputc_r+0x1e>
 80143b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80143bc:	f000 b932 	b.w	8014624 <__swbuf_r>
 80143c0:	6813      	ldr	r3, [r2, #0]
 80143c2:	1c58      	adds	r0, r3, #1
 80143c4:	6010      	str	r0, [r2, #0]
 80143c6:	7019      	strb	r1, [r3, #0]
 80143c8:	4608      	mov	r0, r1
 80143ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80143ce:	4770      	bx	lr

080143d0 <__sfputs_r>:
 80143d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143d2:	4606      	mov	r6, r0
 80143d4:	460f      	mov	r7, r1
 80143d6:	4614      	mov	r4, r2
 80143d8:	18d5      	adds	r5, r2, r3
 80143da:	42ac      	cmp	r4, r5
 80143dc:	d101      	bne.n	80143e2 <__sfputs_r+0x12>
 80143de:	2000      	movs	r0, #0
 80143e0:	e007      	b.n	80143f2 <__sfputs_r+0x22>
 80143e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143e6:	463a      	mov	r2, r7
 80143e8:	4630      	mov	r0, r6
 80143ea:	f7ff ffda 	bl	80143a2 <__sfputc_r>
 80143ee:	1c43      	adds	r3, r0, #1
 80143f0:	d1f3      	bne.n	80143da <__sfputs_r+0xa>
 80143f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080143f4 <_vfiprintf_r>:
 80143f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143f8:	460d      	mov	r5, r1
 80143fa:	b09d      	sub	sp, #116	@ 0x74
 80143fc:	4614      	mov	r4, r2
 80143fe:	4698      	mov	r8, r3
 8014400:	4606      	mov	r6, r0
 8014402:	b118      	cbz	r0, 801440c <_vfiprintf_r+0x18>
 8014404:	6a03      	ldr	r3, [r0, #32]
 8014406:	b90b      	cbnz	r3, 801440c <_vfiprintf_r+0x18>
 8014408:	f7fc fdf8 	bl	8010ffc <__sinit>
 801440c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801440e:	07d9      	lsls	r1, r3, #31
 8014410:	d405      	bmi.n	801441e <_vfiprintf_r+0x2a>
 8014412:	89ab      	ldrh	r3, [r5, #12]
 8014414:	059a      	lsls	r2, r3, #22
 8014416:	d402      	bmi.n	801441e <_vfiprintf_r+0x2a>
 8014418:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801441a:	f7fc ff06 	bl	801122a <__retarget_lock_acquire_recursive>
 801441e:	89ab      	ldrh	r3, [r5, #12]
 8014420:	071b      	lsls	r3, r3, #28
 8014422:	d501      	bpl.n	8014428 <_vfiprintf_r+0x34>
 8014424:	692b      	ldr	r3, [r5, #16]
 8014426:	b99b      	cbnz	r3, 8014450 <_vfiprintf_r+0x5c>
 8014428:	4629      	mov	r1, r5
 801442a:	4630      	mov	r0, r6
 801442c:	f000 f938 	bl	80146a0 <__swsetup_r>
 8014430:	b170      	cbz	r0, 8014450 <_vfiprintf_r+0x5c>
 8014432:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014434:	07dc      	lsls	r4, r3, #31
 8014436:	d504      	bpl.n	8014442 <_vfiprintf_r+0x4e>
 8014438:	f04f 30ff 	mov.w	r0, #4294967295
 801443c:	b01d      	add	sp, #116	@ 0x74
 801443e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014442:	89ab      	ldrh	r3, [r5, #12]
 8014444:	0598      	lsls	r0, r3, #22
 8014446:	d4f7      	bmi.n	8014438 <_vfiprintf_r+0x44>
 8014448:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801444a:	f7fc feef 	bl	801122c <__retarget_lock_release_recursive>
 801444e:	e7f3      	b.n	8014438 <_vfiprintf_r+0x44>
 8014450:	2300      	movs	r3, #0
 8014452:	9309      	str	r3, [sp, #36]	@ 0x24
 8014454:	2320      	movs	r3, #32
 8014456:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801445a:	f8cd 800c 	str.w	r8, [sp, #12]
 801445e:	2330      	movs	r3, #48	@ 0x30
 8014460:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014610 <_vfiprintf_r+0x21c>
 8014464:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014468:	f04f 0901 	mov.w	r9, #1
 801446c:	4623      	mov	r3, r4
 801446e:	469a      	mov	sl, r3
 8014470:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014474:	b10a      	cbz	r2, 801447a <_vfiprintf_r+0x86>
 8014476:	2a25      	cmp	r2, #37	@ 0x25
 8014478:	d1f9      	bne.n	801446e <_vfiprintf_r+0x7a>
 801447a:	ebba 0b04 	subs.w	fp, sl, r4
 801447e:	d00b      	beq.n	8014498 <_vfiprintf_r+0xa4>
 8014480:	465b      	mov	r3, fp
 8014482:	4622      	mov	r2, r4
 8014484:	4629      	mov	r1, r5
 8014486:	4630      	mov	r0, r6
 8014488:	f7ff ffa2 	bl	80143d0 <__sfputs_r>
 801448c:	3001      	adds	r0, #1
 801448e:	f000 80a7 	beq.w	80145e0 <_vfiprintf_r+0x1ec>
 8014492:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014494:	445a      	add	r2, fp
 8014496:	9209      	str	r2, [sp, #36]	@ 0x24
 8014498:	f89a 3000 	ldrb.w	r3, [sl]
 801449c:	2b00      	cmp	r3, #0
 801449e:	f000 809f 	beq.w	80145e0 <_vfiprintf_r+0x1ec>
 80144a2:	2300      	movs	r3, #0
 80144a4:	f04f 32ff 	mov.w	r2, #4294967295
 80144a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80144ac:	f10a 0a01 	add.w	sl, sl, #1
 80144b0:	9304      	str	r3, [sp, #16]
 80144b2:	9307      	str	r3, [sp, #28]
 80144b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80144b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80144ba:	4654      	mov	r4, sl
 80144bc:	2205      	movs	r2, #5
 80144be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144c2:	4853      	ldr	r0, [pc, #332]	@ (8014610 <_vfiprintf_r+0x21c>)
 80144c4:	f7eb feac 	bl	8000220 <memchr>
 80144c8:	9a04      	ldr	r2, [sp, #16]
 80144ca:	b9d8      	cbnz	r0, 8014504 <_vfiprintf_r+0x110>
 80144cc:	06d1      	lsls	r1, r2, #27
 80144ce:	bf44      	itt	mi
 80144d0:	2320      	movmi	r3, #32
 80144d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80144d6:	0713      	lsls	r3, r2, #28
 80144d8:	bf44      	itt	mi
 80144da:	232b      	movmi	r3, #43	@ 0x2b
 80144dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80144e0:	f89a 3000 	ldrb.w	r3, [sl]
 80144e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80144e6:	d015      	beq.n	8014514 <_vfiprintf_r+0x120>
 80144e8:	9a07      	ldr	r2, [sp, #28]
 80144ea:	4654      	mov	r4, sl
 80144ec:	2000      	movs	r0, #0
 80144ee:	f04f 0c0a 	mov.w	ip, #10
 80144f2:	4621      	mov	r1, r4
 80144f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80144f8:	3b30      	subs	r3, #48	@ 0x30
 80144fa:	2b09      	cmp	r3, #9
 80144fc:	d94b      	bls.n	8014596 <_vfiprintf_r+0x1a2>
 80144fe:	b1b0      	cbz	r0, 801452e <_vfiprintf_r+0x13a>
 8014500:	9207      	str	r2, [sp, #28]
 8014502:	e014      	b.n	801452e <_vfiprintf_r+0x13a>
 8014504:	eba0 0308 	sub.w	r3, r0, r8
 8014508:	fa09 f303 	lsl.w	r3, r9, r3
 801450c:	4313      	orrs	r3, r2
 801450e:	9304      	str	r3, [sp, #16]
 8014510:	46a2      	mov	sl, r4
 8014512:	e7d2      	b.n	80144ba <_vfiprintf_r+0xc6>
 8014514:	9b03      	ldr	r3, [sp, #12]
 8014516:	1d19      	adds	r1, r3, #4
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	9103      	str	r1, [sp, #12]
 801451c:	2b00      	cmp	r3, #0
 801451e:	bfbb      	ittet	lt
 8014520:	425b      	neglt	r3, r3
 8014522:	f042 0202 	orrlt.w	r2, r2, #2
 8014526:	9307      	strge	r3, [sp, #28]
 8014528:	9307      	strlt	r3, [sp, #28]
 801452a:	bfb8      	it	lt
 801452c:	9204      	strlt	r2, [sp, #16]
 801452e:	7823      	ldrb	r3, [r4, #0]
 8014530:	2b2e      	cmp	r3, #46	@ 0x2e
 8014532:	d10a      	bne.n	801454a <_vfiprintf_r+0x156>
 8014534:	7863      	ldrb	r3, [r4, #1]
 8014536:	2b2a      	cmp	r3, #42	@ 0x2a
 8014538:	d132      	bne.n	80145a0 <_vfiprintf_r+0x1ac>
 801453a:	9b03      	ldr	r3, [sp, #12]
 801453c:	1d1a      	adds	r2, r3, #4
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	9203      	str	r2, [sp, #12]
 8014542:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014546:	3402      	adds	r4, #2
 8014548:	9305      	str	r3, [sp, #20]
 801454a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014620 <_vfiprintf_r+0x22c>
 801454e:	7821      	ldrb	r1, [r4, #0]
 8014550:	2203      	movs	r2, #3
 8014552:	4650      	mov	r0, sl
 8014554:	f7eb fe64 	bl	8000220 <memchr>
 8014558:	b138      	cbz	r0, 801456a <_vfiprintf_r+0x176>
 801455a:	9b04      	ldr	r3, [sp, #16]
 801455c:	eba0 000a 	sub.w	r0, r0, sl
 8014560:	2240      	movs	r2, #64	@ 0x40
 8014562:	4082      	lsls	r2, r0
 8014564:	4313      	orrs	r3, r2
 8014566:	3401      	adds	r4, #1
 8014568:	9304      	str	r3, [sp, #16]
 801456a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801456e:	4829      	ldr	r0, [pc, #164]	@ (8014614 <_vfiprintf_r+0x220>)
 8014570:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014574:	2206      	movs	r2, #6
 8014576:	f7eb fe53 	bl	8000220 <memchr>
 801457a:	2800      	cmp	r0, #0
 801457c:	d03f      	beq.n	80145fe <_vfiprintf_r+0x20a>
 801457e:	4b26      	ldr	r3, [pc, #152]	@ (8014618 <_vfiprintf_r+0x224>)
 8014580:	bb1b      	cbnz	r3, 80145ca <_vfiprintf_r+0x1d6>
 8014582:	9b03      	ldr	r3, [sp, #12]
 8014584:	3307      	adds	r3, #7
 8014586:	f023 0307 	bic.w	r3, r3, #7
 801458a:	3308      	adds	r3, #8
 801458c:	9303      	str	r3, [sp, #12]
 801458e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014590:	443b      	add	r3, r7
 8014592:	9309      	str	r3, [sp, #36]	@ 0x24
 8014594:	e76a      	b.n	801446c <_vfiprintf_r+0x78>
 8014596:	fb0c 3202 	mla	r2, ip, r2, r3
 801459a:	460c      	mov	r4, r1
 801459c:	2001      	movs	r0, #1
 801459e:	e7a8      	b.n	80144f2 <_vfiprintf_r+0xfe>
 80145a0:	2300      	movs	r3, #0
 80145a2:	3401      	adds	r4, #1
 80145a4:	9305      	str	r3, [sp, #20]
 80145a6:	4619      	mov	r1, r3
 80145a8:	f04f 0c0a 	mov.w	ip, #10
 80145ac:	4620      	mov	r0, r4
 80145ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80145b2:	3a30      	subs	r2, #48	@ 0x30
 80145b4:	2a09      	cmp	r2, #9
 80145b6:	d903      	bls.n	80145c0 <_vfiprintf_r+0x1cc>
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d0c6      	beq.n	801454a <_vfiprintf_r+0x156>
 80145bc:	9105      	str	r1, [sp, #20]
 80145be:	e7c4      	b.n	801454a <_vfiprintf_r+0x156>
 80145c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80145c4:	4604      	mov	r4, r0
 80145c6:	2301      	movs	r3, #1
 80145c8:	e7f0      	b.n	80145ac <_vfiprintf_r+0x1b8>
 80145ca:	ab03      	add	r3, sp, #12
 80145cc:	9300      	str	r3, [sp, #0]
 80145ce:	462a      	mov	r2, r5
 80145d0:	4b12      	ldr	r3, [pc, #72]	@ (801461c <_vfiprintf_r+0x228>)
 80145d2:	a904      	add	r1, sp, #16
 80145d4:	4630      	mov	r0, r6
 80145d6:	f7fb feb9 	bl	801034c <_printf_float>
 80145da:	4607      	mov	r7, r0
 80145dc:	1c78      	adds	r0, r7, #1
 80145de:	d1d6      	bne.n	801458e <_vfiprintf_r+0x19a>
 80145e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80145e2:	07d9      	lsls	r1, r3, #31
 80145e4:	d405      	bmi.n	80145f2 <_vfiprintf_r+0x1fe>
 80145e6:	89ab      	ldrh	r3, [r5, #12]
 80145e8:	059a      	lsls	r2, r3, #22
 80145ea:	d402      	bmi.n	80145f2 <_vfiprintf_r+0x1fe>
 80145ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80145ee:	f7fc fe1d 	bl	801122c <__retarget_lock_release_recursive>
 80145f2:	89ab      	ldrh	r3, [r5, #12]
 80145f4:	065b      	lsls	r3, r3, #25
 80145f6:	f53f af1f 	bmi.w	8014438 <_vfiprintf_r+0x44>
 80145fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80145fc:	e71e      	b.n	801443c <_vfiprintf_r+0x48>
 80145fe:	ab03      	add	r3, sp, #12
 8014600:	9300      	str	r3, [sp, #0]
 8014602:	462a      	mov	r2, r5
 8014604:	4b05      	ldr	r3, [pc, #20]	@ (801461c <_vfiprintf_r+0x228>)
 8014606:	a904      	add	r1, sp, #16
 8014608:	4630      	mov	r0, r6
 801460a:	f7fc f937 	bl	801087c <_printf_i>
 801460e:	e7e4      	b.n	80145da <_vfiprintf_r+0x1e6>
 8014610:	08014d91 	.word	0x08014d91
 8014614:	08014d9b 	.word	0x08014d9b
 8014618:	0801034d 	.word	0x0801034d
 801461c:	080143d1 	.word	0x080143d1
 8014620:	08014d97 	.word	0x08014d97

08014624 <__swbuf_r>:
 8014624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014626:	460e      	mov	r6, r1
 8014628:	4614      	mov	r4, r2
 801462a:	4605      	mov	r5, r0
 801462c:	b118      	cbz	r0, 8014636 <__swbuf_r+0x12>
 801462e:	6a03      	ldr	r3, [r0, #32]
 8014630:	b90b      	cbnz	r3, 8014636 <__swbuf_r+0x12>
 8014632:	f7fc fce3 	bl	8010ffc <__sinit>
 8014636:	69a3      	ldr	r3, [r4, #24]
 8014638:	60a3      	str	r3, [r4, #8]
 801463a:	89a3      	ldrh	r3, [r4, #12]
 801463c:	071a      	lsls	r2, r3, #28
 801463e:	d501      	bpl.n	8014644 <__swbuf_r+0x20>
 8014640:	6923      	ldr	r3, [r4, #16]
 8014642:	b943      	cbnz	r3, 8014656 <__swbuf_r+0x32>
 8014644:	4621      	mov	r1, r4
 8014646:	4628      	mov	r0, r5
 8014648:	f000 f82a 	bl	80146a0 <__swsetup_r>
 801464c:	b118      	cbz	r0, 8014656 <__swbuf_r+0x32>
 801464e:	f04f 37ff 	mov.w	r7, #4294967295
 8014652:	4638      	mov	r0, r7
 8014654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014656:	6823      	ldr	r3, [r4, #0]
 8014658:	6922      	ldr	r2, [r4, #16]
 801465a:	1a98      	subs	r0, r3, r2
 801465c:	6963      	ldr	r3, [r4, #20]
 801465e:	b2f6      	uxtb	r6, r6
 8014660:	4283      	cmp	r3, r0
 8014662:	4637      	mov	r7, r6
 8014664:	dc05      	bgt.n	8014672 <__swbuf_r+0x4e>
 8014666:	4621      	mov	r1, r4
 8014668:	4628      	mov	r0, r5
 801466a:	f7ff fa47 	bl	8013afc <_fflush_r>
 801466e:	2800      	cmp	r0, #0
 8014670:	d1ed      	bne.n	801464e <__swbuf_r+0x2a>
 8014672:	68a3      	ldr	r3, [r4, #8]
 8014674:	3b01      	subs	r3, #1
 8014676:	60a3      	str	r3, [r4, #8]
 8014678:	6823      	ldr	r3, [r4, #0]
 801467a:	1c5a      	adds	r2, r3, #1
 801467c:	6022      	str	r2, [r4, #0]
 801467e:	701e      	strb	r6, [r3, #0]
 8014680:	6962      	ldr	r2, [r4, #20]
 8014682:	1c43      	adds	r3, r0, #1
 8014684:	429a      	cmp	r2, r3
 8014686:	d004      	beq.n	8014692 <__swbuf_r+0x6e>
 8014688:	89a3      	ldrh	r3, [r4, #12]
 801468a:	07db      	lsls	r3, r3, #31
 801468c:	d5e1      	bpl.n	8014652 <__swbuf_r+0x2e>
 801468e:	2e0a      	cmp	r6, #10
 8014690:	d1df      	bne.n	8014652 <__swbuf_r+0x2e>
 8014692:	4621      	mov	r1, r4
 8014694:	4628      	mov	r0, r5
 8014696:	f7ff fa31 	bl	8013afc <_fflush_r>
 801469a:	2800      	cmp	r0, #0
 801469c:	d0d9      	beq.n	8014652 <__swbuf_r+0x2e>
 801469e:	e7d6      	b.n	801464e <__swbuf_r+0x2a>

080146a0 <__swsetup_r>:
 80146a0:	b538      	push	{r3, r4, r5, lr}
 80146a2:	4b29      	ldr	r3, [pc, #164]	@ (8014748 <__swsetup_r+0xa8>)
 80146a4:	4605      	mov	r5, r0
 80146a6:	6818      	ldr	r0, [r3, #0]
 80146a8:	460c      	mov	r4, r1
 80146aa:	b118      	cbz	r0, 80146b4 <__swsetup_r+0x14>
 80146ac:	6a03      	ldr	r3, [r0, #32]
 80146ae:	b90b      	cbnz	r3, 80146b4 <__swsetup_r+0x14>
 80146b0:	f7fc fca4 	bl	8010ffc <__sinit>
 80146b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146b8:	0719      	lsls	r1, r3, #28
 80146ba:	d422      	bmi.n	8014702 <__swsetup_r+0x62>
 80146bc:	06da      	lsls	r2, r3, #27
 80146be:	d407      	bmi.n	80146d0 <__swsetup_r+0x30>
 80146c0:	2209      	movs	r2, #9
 80146c2:	602a      	str	r2, [r5, #0]
 80146c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80146c8:	81a3      	strh	r3, [r4, #12]
 80146ca:	f04f 30ff 	mov.w	r0, #4294967295
 80146ce:	e033      	b.n	8014738 <__swsetup_r+0x98>
 80146d0:	0758      	lsls	r0, r3, #29
 80146d2:	d512      	bpl.n	80146fa <__swsetup_r+0x5a>
 80146d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80146d6:	b141      	cbz	r1, 80146ea <__swsetup_r+0x4a>
 80146d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80146dc:	4299      	cmp	r1, r3
 80146de:	d002      	beq.n	80146e6 <__swsetup_r+0x46>
 80146e0:	4628      	mov	r0, r5
 80146e2:	f7fd fbf9 	bl	8011ed8 <_free_r>
 80146e6:	2300      	movs	r3, #0
 80146e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80146ea:	89a3      	ldrh	r3, [r4, #12]
 80146ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80146f0:	81a3      	strh	r3, [r4, #12]
 80146f2:	2300      	movs	r3, #0
 80146f4:	6063      	str	r3, [r4, #4]
 80146f6:	6923      	ldr	r3, [r4, #16]
 80146f8:	6023      	str	r3, [r4, #0]
 80146fa:	89a3      	ldrh	r3, [r4, #12]
 80146fc:	f043 0308 	orr.w	r3, r3, #8
 8014700:	81a3      	strh	r3, [r4, #12]
 8014702:	6923      	ldr	r3, [r4, #16]
 8014704:	b94b      	cbnz	r3, 801471a <__swsetup_r+0x7a>
 8014706:	89a3      	ldrh	r3, [r4, #12]
 8014708:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801470c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014710:	d003      	beq.n	801471a <__swsetup_r+0x7a>
 8014712:	4621      	mov	r1, r4
 8014714:	4628      	mov	r0, r5
 8014716:	f000 f883 	bl	8014820 <__smakebuf_r>
 801471a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801471e:	f013 0201 	ands.w	r2, r3, #1
 8014722:	d00a      	beq.n	801473a <__swsetup_r+0x9a>
 8014724:	2200      	movs	r2, #0
 8014726:	60a2      	str	r2, [r4, #8]
 8014728:	6962      	ldr	r2, [r4, #20]
 801472a:	4252      	negs	r2, r2
 801472c:	61a2      	str	r2, [r4, #24]
 801472e:	6922      	ldr	r2, [r4, #16]
 8014730:	b942      	cbnz	r2, 8014744 <__swsetup_r+0xa4>
 8014732:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014736:	d1c5      	bne.n	80146c4 <__swsetup_r+0x24>
 8014738:	bd38      	pop	{r3, r4, r5, pc}
 801473a:	0799      	lsls	r1, r3, #30
 801473c:	bf58      	it	pl
 801473e:	6962      	ldrpl	r2, [r4, #20]
 8014740:	60a2      	str	r2, [r4, #8]
 8014742:	e7f4      	b.n	801472e <__swsetup_r+0x8e>
 8014744:	2000      	movs	r0, #0
 8014746:	e7f7      	b.n	8014738 <__swsetup_r+0x98>
 8014748:	20000198 	.word	0x20000198

0801474c <_raise_r>:
 801474c:	291f      	cmp	r1, #31
 801474e:	b538      	push	{r3, r4, r5, lr}
 8014750:	4605      	mov	r5, r0
 8014752:	460c      	mov	r4, r1
 8014754:	d904      	bls.n	8014760 <_raise_r+0x14>
 8014756:	2316      	movs	r3, #22
 8014758:	6003      	str	r3, [r0, #0]
 801475a:	f04f 30ff 	mov.w	r0, #4294967295
 801475e:	bd38      	pop	{r3, r4, r5, pc}
 8014760:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014762:	b112      	cbz	r2, 801476a <_raise_r+0x1e>
 8014764:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014768:	b94b      	cbnz	r3, 801477e <_raise_r+0x32>
 801476a:	4628      	mov	r0, r5
 801476c:	f000 f830 	bl	80147d0 <_getpid_r>
 8014770:	4622      	mov	r2, r4
 8014772:	4601      	mov	r1, r0
 8014774:	4628      	mov	r0, r5
 8014776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801477a:	f000 b817 	b.w	80147ac <_kill_r>
 801477e:	2b01      	cmp	r3, #1
 8014780:	d00a      	beq.n	8014798 <_raise_r+0x4c>
 8014782:	1c59      	adds	r1, r3, #1
 8014784:	d103      	bne.n	801478e <_raise_r+0x42>
 8014786:	2316      	movs	r3, #22
 8014788:	6003      	str	r3, [r0, #0]
 801478a:	2001      	movs	r0, #1
 801478c:	e7e7      	b.n	801475e <_raise_r+0x12>
 801478e:	2100      	movs	r1, #0
 8014790:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014794:	4620      	mov	r0, r4
 8014796:	4798      	blx	r3
 8014798:	2000      	movs	r0, #0
 801479a:	e7e0      	b.n	801475e <_raise_r+0x12>

0801479c <raise>:
 801479c:	4b02      	ldr	r3, [pc, #8]	@ (80147a8 <raise+0xc>)
 801479e:	4601      	mov	r1, r0
 80147a0:	6818      	ldr	r0, [r3, #0]
 80147a2:	f7ff bfd3 	b.w	801474c <_raise_r>
 80147a6:	bf00      	nop
 80147a8:	20000198 	.word	0x20000198

080147ac <_kill_r>:
 80147ac:	b538      	push	{r3, r4, r5, lr}
 80147ae:	4d07      	ldr	r5, [pc, #28]	@ (80147cc <_kill_r+0x20>)
 80147b0:	2300      	movs	r3, #0
 80147b2:	4604      	mov	r4, r0
 80147b4:	4608      	mov	r0, r1
 80147b6:	4611      	mov	r1, r2
 80147b8:	602b      	str	r3, [r5, #0]
 80147ba:	f7ee fd13 	bl	80031e4 <_kill>
 80147be:	1c43      	adds	r3, r0, #1
 80147c0:	d102      	bne.n	80147c8 <_kill_r+0x1c>
 80147c2:	682b      	ldr	r3, [r5, #0]
 80147c4:	b103      	cbz	r3, 80147c8 <_kill_r+0x1c>
 80147c6:	6023      	str	r3, [r4, #0]
 80147c8:	bd38      	pop	{r3, r4, r5, pc}
 80147ca:	bf00      	nop
 80147cc:	20002ba8 	.word	0x20002ba8

080147d0 <_getpid_r>:
 80147d0:	f7ee bd00 	b.w	80031d4 <_getpid>

080147d4 <__swhatbuf_r>:
 80147d4:	b570      	push	{r4, r5, r6, lr}
 80147d6:	460c      	mov	r4, r1
 80147d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147dc:	2900      	cmp	r1, #0
 80147de:	b096      	sub	sp, #88	@ 0x58
 80147e0:	4615      	mov	r5, r2
 80147e2:	461e      	mov	r6, r3
 80147e4:	da0d      	bge.n	8014802 <__swhatbuf_r+0x2e>
 80147e6:	89a3      	ldrh	r3, [r4, #12]
 80147e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80147ec:	f04f 0100 	mov.w	r1, #0
 80147f0:	bf14      	ite	ne
 80147f2:	2340      	movne	r3, #64	@ 0x40
 80147f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80147f8:	2000      	movs	r0, #0
 80147fa:	6031      	str	r1, [r6, #0]
 80147fc:	602b      	str	r3, [r5, #0]
 80147fe:	b016      	add	sp, #88	@ 0x58
 8014800:	bd70      	pop	{r4, r5, r6, pc}
 8014802:	466a      	mov	r2, sp
 8014804:	f000 f848 	bl	8014898 <_fstat_r>
 8014808:	2800      	cmp	r0, #0
 801480a:	dbec      	blt.n	80147e6 <__swhatbuf_r+0x12>
 801480c:	9901      	ldr	r1, [sp, #4]
 801480e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014812:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014816:	4259      	negs	r1, r3
 8014818:	4159      	adcs	r1, r3
 801481a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801481e:	e7eb      	b.n	80147f8 <__swhatbuf_r+0x24>

08014820 <__smakebuf_r>:
 8014820:	898b      	ldrh	r3, [r1, #12]
 8014822:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014824:	079d      	lsls	r5, r3, #30
 8014826:	4606      	mov	r6, r0
 8014828:	460c      	mov	r4, r1
 801482a:	d507      	bpl.n	801483c <__smakebuf_r+0x1c>
 801482c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014830:	6023      	str	r3, [r4, #0]
 8014832:	6123      	str	r3, [r4, #16]
 8014834:	2301      	movs	r3, #1
 8014836:	6163      	str	r3, [r4, #20]
 8014838:	b003      	add	sp, #12
 801483a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801483c:	ab01      	add	r3, sp, #4
 801483e:	466a      	mov	r2, sp
 8014840:	f7ff ffc8 	bl	80147d4 <__swhatbuf_r>
 8014844:	9f00      	ldr	r7, [sp, #0]
 8014846:	4605      	mov	r5, r0
 8014848:	4639      	mov	r1, r7
 801484a:	4630      	mov	r0, r6
 801484c:	f7fd fbb8 	bl	8011fc0 <_malloc_r>
 8014850:	b948      	cbnz	r0, 8014866 <__smakebuf_r+0x46>
 8014852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014856:	059a      	lsls	r2, r3, #22
 8014858:	d4ee      	bmi.n	8014838 <__smakebuf_r+0x18>
 801485a:	f023 0303 	bic.w	r3, r3, #3
 801485e:	f043 0302 	orr.w	r3, r3, #2
 8014862:	81a3      	strh	r3, [r4, #12]
 8014864:	e7e2      	b.n	801482c <__smakebuf_r+0xc>
 8014866:	89a3      	ldrh	r3, [r4, #12]
 8014868:	6020      	str	r0, [r4, #0]
 801486a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801486e:	81a3      	strh	r3, [r4, #12]
 8014870:	9b01      	ldr	r3, [sp, #4]
 8014872:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014876:	b15b      	cbz	r3, 8014890 <__smakebuf_r+0x70>
 8014878:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801487c:	4630      	mov	r0, r6
 801487e:	f000 f81d 	bl	80148bc <_isatty_r>
 8014882:	b128      	cbz	r0, 8014890 <__smakebuf_r+0x70>
 8014884:	89a3      	ldrh	r3, [r4, #12]
 8014886:	f023 0303 	bic.w	r3, r3, #3
 801488a:	f043 0301 	orr.w	r3, r3, #1
 801488e:	81a3      	strh	r3, [r4, #12]
 8014890:	89a3      	ldrh	r3, [r4, #12]
 8014892:	431d      	orrs	r5, r3
 8014894:	81a5      	strh	r5, [r4, #12]
 8014896:	e7cf      	b.n	8014838 <__smakebuf_r+0x18>

08014898 <_fstat_r>:
 8014898:	b538      	push	{r3, r4, r5, lr}
 801489a:	4d07      	ldr	r5, [pc, #28]	@ (80148b8 <_fstat_r+0x20>)
 801489c:	2300      	movs	r3, #0
 801489e:	4604      	mov	r4, r0
 80148a0:	4608      	mov	r0, r1
 80148a2:	4611      	mov	r1, r2
 80148a4:	602b      	str	r3, [r5, #0]
 80148a6:	f7ee fcfd 	bl	80032a4 <_fstat>
 80148aa:	1c43      	adds	r3, r0, #1
 80148ac:	d102      	bne.n	80148b4 <_fstat_r+0x1c>
 80148ae:	682b      	ldr	r3, [r5, #0]
 80148b0:	b103      	cbz	r3, 80148b4 <_fstat_r+0x1c>
 80148b2:	6023      	str	r3, [r4, #0]
 80148b4:	bd38      	pop	{r3, r4, r5, pc}
 80148b6:	bf00      	nop
 80148b8:	20002ba8 	.word	0x20002ba8

080148bc <_isatty_r>:
 80148bc:	b538      	push	{r3, r4, r5, lr}
 80148be:	4d06      	ldr	r5, [pc, #24]	@ (80148d8 <_isatty_r+0x1c>)
 80148c0:	2300      	movs	r3, #0
 80148c2:	4604      	mov	r4, r0
 80148c4:	4608      	mov	r0, r1
 80148c6:	602b      	str	r3, [r5, #0]
 80148c8:	f7ee fcfc 	bl	80032c4 <_isatty>
 80148cc:	1c43      	adds	r3, r0, #1
 80148ce:	d102      	bne.n	80148d6 <_isatty_r+0x1a>
 80148d0:	682b      	ldr	r3, [r5, #0]
 80148d2:	b103      	cbz	r3, 80148d6 <_isatty_r+0x1a>
 80148d4:	6023      	str	r3, [r4, #0]
 80148d6:	bd38      	pop	{r3, r4, r5, pc}
 80148d8:	20002ba8 	.word	0x20002ba8

080148dc <_init>:
 80148dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148de:	bf00      	nop
 80148e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80148e2:	bc08      	pop	{r3}
 80148e4:	469e      	mov	lr, r3
 80148e6:	4770      	bx	lr

080148e8 <_fini>:
 80148e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148ea:	bf00      	nop
 80148ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80148ee:	bc08      	pop	{r3}
 80148f0:	469e      	mov	lr, r3
 80148f2:	4770      	bx	lr
