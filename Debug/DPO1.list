
DPO1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018064  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000dda0  08018248  08018248  00019248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025fe8  08025fe8  00027390  2**0
                  CONTENTS
  4 .ARM          00000008  08025fe8  08025fe8  00026fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025ff0  08025ff0  00027390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025ff0  08025ff0  00026ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08025ff4  08025ff4  00026ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000390  20000000  08025ff8  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c54  20000390  08026388  00027390  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004fe4  08026388  00027fe4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00027390  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003270a  00000000  00000000  000273c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000617d  00000000  00000000  00059aca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ab0  00000000  00000000  0005fc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000211b  00000000  00000000  000626f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032e22  00000000  00000000  00064813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000367a8  00000000  00000000  00097635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014ab74  00000000  00000000  000cdddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00218951  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ce4c  00000000  00000000  00218994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  002257e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000390 	.word	0x20000390
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801822c 	.word	0x0801822c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000394 	.word	0x20000394
 800021c:	0801822c 	.word	0x0801822c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <TLC5952_WriteBit>:
/**
 * @brief 发送单个 bit
 * @param bit 0 或 1
 */
void TLC5952_WriteBit(uint8_t bit)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
    if (bit)
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d005      	beq.n	8001050 <TLC5952_WriteBit+0x1c>
        TLC5952_SIN_HIGH();
 8001044:	2201      	movs	r2, #1
 8001046:	2120      	movs	r1, #32
 8001048:	480b      	ldr	r0, [pc, #44]	@ (8001078 <TLC5952_WriteBit+0x44>)
 800104a:	f006 ffab 	bl	8007fa4 <HAL_GPIO_WritePin>
 800104e:	e004      	b.n	800105a <TLC5952_WriteBit+0x26>
    else
        TLC5952_SIN_LOW();
 8001050:	2200      	movs	r2, #0
 8001052:	2120      	movs	r1, #32
 8001054:	4808      	ldr	r0, [pc, #32]	@ (8001078 <TLC5952_WriteBit+0x44>)
 8001056:	f006 ffa5 	bl	8007fa4 <HAL_GPIO_WritePin>

    TLC5952_SCLK_HIGH();
 800105a:	2201      	movs	r2, #1
 800105c:	2108      	movs	r1, #8
 800105e:	4806      	ldr	r0, [pc, #24]	@ (8001078 <TLC5952_WriteBit+0x44>)
 8001060:	f006 ffa0 	bl	8007fa4 <HAL_GPIO_WritePin>
    TLC5952_SCLK_LOW();
 8001064:	2200      	movs	r2, #0
 8001066:	2108      	movs	r1, #8
 8001068:	4803      	ldr	r0, [pc, #12]	@ (8001078 <TLC5952_WriteBit+0x44>)
 800106a:	f006 ff9b 	bl	8007fa4 <HAL_GPIO_WritePin>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	48000400 	.word	0x48000400

0800107c <TLC5952_WriteLED>:

/**
 * @brief 发送 24 位 LED 数据
 */
void TLC5952_WriteLED(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
    TLC5952_WriteBit(0);
 8001082:	2000      	movs	r0, #0
 8001084:	f7ff ffd6 	bl	8001034 <TLC5952_WriteBit>
    uint32_t *data = (uint32_t *)&allData;
 8001088:	4b15      	ldr	r3, [pc, #84]	@ (80010e0 <TLC5952_WriteLED+0x64>)
 800108a:	60bb      	str	r3, [r7, #8]
    for (int8_t i = 23; i >= 0; i--)
 800108c:	2317      	movs	r3, #23
 800108e:	73fb      	strb	r3, [r7, #15]
 8001090:	e013      	b.n	80010ba <TLC5952_WriteLED+0x3e>
    {
        uint8_t currentBit = (*data >> i) & 0x01;
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109a:	fa22 f303 	lsr.w	r3, r2, r3
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	71fb      	strb	r3, [r7, #7]
        TLC5952_WriteBit(currentBit);
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ffc3 	bl	8001034 <TLC5952_WriteBit>
    for (int8_t i = 23; i >= 0; i--)
 80010ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	3b01      	subs	r3, #1
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	73fb      	strb	r3, [r7, #15]
 80010ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	dae7      	bge.n	8001092 <TLC5952_WriteLED+0x16>
    }
    TLC5952_LAT_HIGH();
 80010c2:	2201      	movs	r2, #1
 80010c4:	2110      	movs	r1, #16
 80010c6:	4807      	ldr	r0, [pc, #28]	@ (80010e4 <TLC5952_WriteLED+0x68>)
 80010c8:	f006 ff6c 	bl	8007fa4 <HAL_GPIO_WritePin>
    TLC5952_LAT_LOW();
 80010cc:	2200      	movs	r2, #0
 80010ce:	2110      	movs	r1, #16
 80010d0:	4804      	ldr	r0, [pc, #16]	@ (80010e4 <TLC5952_WriteLED+0x68>)
 80010d2:	f006 ff67 	bl	8007fa4 <HAL_GPIO_WritePin>
}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200003ac 	.word	0x200003ac
 80010e4:	48000400 	.word	0x48000400

080010e8 <TLC5952_WriteControl>:


/**
 * @brief 发送 24 位 控制 数据
 */
void TLC5952_WriteControl(void) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
    TLC5952_WriteBit(1);
 80010ee:	2001      	movs	r0, #1
 80010f0:	f7ff ffa0 	bl	8001034 <TLC5952_WriteBit>
    for (int i = 6; i >= 0; i--) {
 80010f4:	2306      	movs	r3, #6
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	e012      	b.n	8001120 <TLC5952_WriteControl+0x38>
        TLC5952_WriteBit((allData.red_brightness >> i) & 0x01);
 80010fa:	4b37      	ldr	r3, [pc, #220]	@ (80011d8 <TLC5952_WriteControl+0xf0>)
 80010fc:	78db      	ldrb	r3, [r3, #3]
 80010fe:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001102:	b2db      	uxtb	r3, r3
 8001104:	461a      	mov	r2, r3
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	fa42 f303 	asr.w	r3, r2, r3
 800110c:	b2db      	uxtb	r3, r3
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	b2db      	uxtb	r3, r3
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff8d 	bl	8001034 <TLC5952_WriteBit>
    for (int i = 6; i >= 0; i--) {
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	3b01      	subs	r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2b00      	cmp	r3, #0
 8001124:	dae9      	bge.n	80010fa <TLC5952_WriteControl+0x12>
    }
    for (int i = 6; i >= 0; i--) {
 8001126:	2306      	movs	r3, #6
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	e012      	b.n	8001152 <TLC5952_WriteControl+0x6a>
        TLC5952_WriteBit((allData.green_brightness >> i) & 0x01);
 800112c:	4b2a      	ldr	r3, [pc, #168]	@ (80011d8 <TLC5952_WriteControl+0xf0>)
 800112e:	791b      	ldrb	r3, [r3, #4]
 8001130:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001134:	b2db      	uxtb	r3, r3
 8001136:	461a      	mov	r2, r3
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	fa42 f303 	asr.w	r3, r2, r3
 800113e:	b2db      	uxtb	r3, r3
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	b2db      	uxtb	r3, r3
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff ff74 	bl	8001034 <TLC5952_WriteBit>
    for (int i = 6; i >= 0; i--) {
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	3b01      	subs	r3, #1
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	2b00      	cmp	r3, #0
 8001156:	dae9      	bge.n	800112c <TLC5952_WriteControl+0x44>
    }
    for (int i = 6; i >= 0; i--) {
 8001158:	2306      	movs	r3, #6
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	e012      	b.n	8001184 <TLC5952_WriteControl+0x9c>
        TLC5952_WriteBit((allData.blue_brightness >> i) & 0x01);
 800115e:	4b1e      	ldr	r3, [pc, #120]	@ (80011d8 <TLC5952_WriteControl+0xf0>)
 8001160:	889b      	ldrh	r3, [r3, #4]
 8001162:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 8001166:	b2db      	uxtb	r3, r3
 8001168:	461a      	mov	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	fa42 f303 	asr.w	r3, r2, r3
 8001170:	b2db      	uxtb	r3, r3
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	b2db      	uxtb	r3, r3
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff5b 	bl	8001034 <TLC5952_WriteBit>
    for (int i = 6; i >= 0; i--) {
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3b01      	subs	r3, #1
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	dae9      	bge.n	800115e <TLC5952_WriteControl+0x76>
    }
    for (int i = 2; i >= 0; i--) {
 800118a:	2302      	movs	r3, #2
 800118c:	603b      	str	r3, [r7, #0]
 800118e:	e012      	b.n	80011b6 <TLC5952_WriteControl+0xce>
        TLC5952_WriteBit((allData.detection_voltage_select >> i) & 0x01);
 8001190:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <TLC5952_WriteControl+0xf0>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f3c3 3382 	ubfx	r3, r3, #14, #3
 8001198:	b2db      	uxtb	r3, r3
 800119a:	461a      	mov	r2, r3
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	fa42 f303 	asr.w	r3, r2, r3
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff42 	bl	8001034 <TLC5952_WriteBit>
    for (int i = 2; i >= 0; i--) {
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	dae9      	bge.n	8001190 <TLC5952_WriteControl+0xa8>
    }
    TLC5952_LAT_HIGH();
 80011bc:	2201      	movs	r2, #1
 80011be:	2110      	movs	r1, #16
 80011c0:	4806      	ldr	r0, [pc, #24]	@ (80011dc <TLC5952_WriteControl+0xf4>)
 80011c2:	f006 feef 	bl	8007fa4 <HAL_GPIO_WritePin>
    TLC5952_LAT_LOW();
 80011c6:	2200      	movs	r2, #0
 80011c8:	2110      	movs	r1, #16
 80011ca:	4804      	ldr	r0, [pc, #16]	@ (80011dc <TLC5952_WriteControl+0xf4>)
 80011cc:	f006 feea 	bl	8007fa4 <HAL_GPIO_WritePin>
}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	200003ac 	.word	0x200003ac
 80011dc:	48000400 	.word	0x48000400

080011e0 <FT6336_ReadRegister>:

HAL_StatusTypeDef FT6336_WriteRegister( uint8_t RegAddress, uint8_t *pData, uint16_t Size) {
    return HAL_I2C_Mem_Write(&FT6336_I2C_PORT, FT6X36_ADDR, RegAddress, I2C_MEMADD_SIZE_8BIT, pData, Size, HAL_MAX_DELAY);
}

HAL_StatusTypeDef FT6336_ReadRegister( uint8_t RegAddress, uint8_t *pData, uint16_t Size) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af04      	add	r7, sp, #16
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]
 80011ec:	4613      	mov	r3, r2
 80011ee:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Read(&FT6336_I2C_PORT, FT6X36_ADDR, RegAddress, I2C_MEMADD_SIZE_8BIT, pData, Size, HAL_MAX_DELAY);
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	f04f 33ff 	mov.w	r3, #4294967295
 80011f8:	9302      	str	r3, [sp, #8]
 80011fa:	88bb      	ldrh	r3, [r7, #4]
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2301      	movs	r3, #1
 8001204:	2170      	movs	r1, #112	@ 0x70
 8001206:	4804      	ldr	r0, [pc, #16]	@ (8001218 <FT6336_ReadRegister+0x38>)
 8001208:	f008 f828 	bl	800925c <HAL_I2C_Mem_Read>
 800120c:	4603      	mov	r3, r0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200007a0 	.word	0x200007a0

0800121c <FT6336_Init>:

void FT6336_Init(void) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
    FT6336_RST_L;
 8001222:	2200      	movs	r2, #0
 8001224:	2104      	movs	r1, #4
 8001226:	480f      	ldr	r0, [pc, #60]	@ (8001264 <FT6336_Init+0x48>)
 8001228:	f006 febc 	bl	8007fa4 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800122c:	200a      	movs	r0, #10
 800122e:	f003 fb09 	bl	8004844 <HAL_Delay>
    FT6336_RST_H;
 8001232:	2201      	movs	r2, #1
 8001234:	2104      	movs	r1, #4
 8001236:	480b      	ldr	r0, [pc, #44]	@ (8001264 <FT6336_Init+0x48>)
 8001238:	f006 feb4 	bl	8007fa4 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800123c:	2032      	movs	r0, #50	@ 0x32
 800123e:	f003 fb01 	bl	8004844 <HAL_Delay>
//    FT6336_WriteRegister(0x00, 0x00,1);
//
//    // 设置 ID_G_MODE 为 0x00（启用中断输出）
//    FT6336_WriteRegister(0xA4, 0x00,1);

    uint8_t id = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	71fb      	strb	r3, [r7, #7]
    FT6336_ReadRegister(FT6336_FOCALTECH_ID, &id, 1);
 8001246:	1dfb      	adds	r3, r7, #7
 8001248:	2201      	movs	r2, #1
 800124a:	4619      	mov	r1, r3
 800124c:	20a8      	movs	r0, #168	@ 0xa8
 800124e:	f7ff ffc7 	bl	80011e0 <FT6336_ReadRegister>
    HAL_Delay(1000);
 8001252:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001256:	f003 faf5 	bl	8004844 <HAL_Delay>
//    HAL_Delay(1000);
    //used to debug IIC



}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	48000c00 	.word	0x48000c00

08001268 <AdjustTouchCoordinates>:

static void AdjustTouchCoordinates(uint16_t *x, uint16_t *y) {
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
    uint16_t rawX = *x;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	81fb      	strh	r3, [r7, #14]
    uint16_t rawY = *y;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	81bb      	strh	r3, [r7, #12]
//
//    *x = (*x * SCREEN_WIDTH) / TOUCH_WIDTH;
//    *y = (*y * SCREEN_HEIGHT) / TOUCH_HEIGHT;

    // 情况 X：特殊处理
    *x = rawY;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	89ba      	ldrh	r2, [r7, #12]
 8001282:	801a      	strh	r2, [r3, #0]
    *y = SCREEN_HEIGHT-rawX;
 8001284:	89fb      	ldrh	r3, [r7, #14]
 8001286:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800128a:	b29a      	uxth	r2, r3
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	801a      	strh	r2, [r3, #0]
}
 8001290:	bf00      	nop
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <FT6336_GetTouchPoint>:





void FT6336_GetTouchPoint(TouchPoints_HandleTypeDef *touchPoints) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
    uint8_t touchStatus = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	73bb      	strb	r3, [r7, #14]
    uint8_t touchData[4];  // 存储两个点的坐标数据 (每个点4个字节)

    // 读取触摸状态寄存器
    FT6336_ReadRegister(FT6336_TD_STATUS, &touchStatus, 1);
 80012a8:	f107 030e 	add.w	r3, r7, #14
 80012ac:	2201      	movs	r2, #1
 80012ae:	4619      	mov	r1, r3
 80012b0:	2002      	movs	r0, #2
 80012b2:	f7ff ff95 	bl	80011e0 <FT6336_ReadRegister>
    uint8_t touchCount = touchStatus & 0x0F;  // 获取触摸点数量
 80012b6:	7bbb      	ldrb	r3, [r7, #14]
 80012b8:	f003 030f 	and.w	r3, r3, #15
 80012bc:	73fb      	strb	r3, [r7, #15]

    if (touchCount > 0) {
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d054      	beq.n	800136e <FT6336_GetTouchPoint+0xd2>
        // 读取第一个触摸点的坐标 (4个字节)
    	FT6336_ReadRegister(FT6336_P1_XH, touchData, 4);
 80012c4:	f107 0308 	add.w	r3, r7, #8
 80012c8:	2204      	movs	r2, #4
 80012ca:	4619      	mov	r1, r3
 80012cc:	2003      	movs	r0, #3
 80012ce:	f7ff ff87 	bl	80011e0 <FT6336_ReadRegister>
        touchPoints->point1_x = ((touchData[0] & 0x0F) << 8) | touchData[1];
 80012d2:	7a3b      	ldrb	r3, [r7, #8]
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	b21b      	sxth	r3, r3
 80012d8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80012dc:	b21a      	sxth	r2, r3
 80012de:	7a7b      	ldrb	r3, [r7, #9]
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	4313      	orrs	r3, r2
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	801a      	strh	r2, [r3, #0]
        touchPoints->point1_y = ((touchData[2] & 0x0F) << 8) | touchData[3];
 80012ec:	7abb      	ldrb	r3, [r7, #10]
 80012ee:	021b      	lsls	r3, r3, #8
 80012f0:	b21b      	sxth	r3, r3
 80012f2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80012f6:	b21a      	sxth	r2, r3
 80012f8:	7afb      	ldrb	r3, [r7, #11]
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	4313      	orrs	r3, r2
 80012fe:	b21b      	sxth	r3, r3
 8001300:	b29a      	uxth	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	805a      	strh	r2, [r3, #2]
        AdjustTouchCoordinates(&touchPoints->point1_x, &touchPoints->point1_y);  // 调整第一个触摸点坐标
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3302      	adds	r3, #2
 800130c:	4619      	mov	r1, r3
 800130e:	4610      	mov	r0, r2
 8001310:	f7ff ffaa 	bl	8001268 <AdjustTouchCoordinates>

        if (touchCount > 1) {
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d929      	bls.n	800136e <FT6336_GetTouchPoint+0xd2>
            // 读取第二个触摸点的坐标 (4个字节)
        	FT6336_ReadRegister(FT6336_P2_XH, &touchData[4], 4);
 800131a:	f107 0308 	add.w	r3, r7, #8
 800131e:	3304      	adds	r3, #4
 8001320:	2204      	movs	r2, #4
 8001322:	4619      	mov	r1, r3
 8001324:	2009      	movs	r0, #9
 8001326:	f7ff ff5b 	bl	80011e0 <FT6336_ReadRegister>
            touchPoints->point2_x = ((touchData[4] & 0x0F) << 8) | touchData[5];
 800132a:	7b3b      	ldrb	r3, [r7, #12]
 800132c:	021b      	lsls	r3, r3, #8
 800132e:	b21b      	sxth	r3, r3
 8001330:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001334:	b21a      	sxth	r2, r3
 8001336:	7b7b      	ldrb	r3, [r7, #13]
 8001338:	b21b      	sxth	r3, r3
 800133a:	4313      	orrs	r3, r2
 800133c:	b21b      	sxth	r3, r3
 800133e:	b29a      	uxth	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	809a      	strh	r2, [r3, #4]
            touchPoints->point2_y = ((touchData[6] & 0x0F) << 8) | touchData[7];
 8001344:	7bbb      	ldrb	r3, [r7, #14]
 8001346:	021b      	lsls	r3, r3, #8
 8001348:	b21b      	sxth	r3, r3
 800134a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800134e:	b21a      	sxth	r2, r3
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	b21b      	sxth	r3, r3
 8001354:	4313      	orrs	r3, r2
 8001356:	b21b      	sxth	r3, r3
 8001358:	b29a      	uxth	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	80da      	strh	r2, [r3, #6]
            AdjustTouchCoordinates(&touchPoints->point2_x, &touchPoints->point2_y);  // 调整第二个触摸点坐标
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	1d1a      	adds	r2, r3, #4
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3306      	adds	r3, #6
 8001366:	4619      	mov	r1, r3
 8001368:	4610      	mov	r0, r2
 800136a:	f7ff ff7d 	bl	8001268 <AdjustTouchCoordinates>
        }
    }
}
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <__io_putchar>:
/* USER CODE BEGIN 0 */



int __io_putchar(int ch)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1 , (uint8_t *)&ch, 1, 0xFFFF);
 8001380:	1d39      	adds	r1, r7, #4
 8001382:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001386:	2201      	movs	r2, #1
 8001388:	4803      	ldr	r0, [pc, #12]	@ (8001398 <__io_putchar+0x20>)
 800138a:	f00d fd99 	bl	800eec0 <HAL_UART_Transmit>
    return ch;
 800138e:	687b      	ldr	r3, [r7, #4]
};
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	200007f4 	.word	0x200007f4

0800139c <Analog_FE_Update>:
    .CD_CH2 = 0,
    .OFFSET1 = 2200,
    .OFFSET2 = 2200
};

void Analog_FE_Update(void) {
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AC_DC_CH1_GPIO_Port, AC_DC_CH1_Pin, (GPIO_PinState)FEAnalog.AC_DC_CH1);
 80013a0:	4b47      	ldr	r3, [pc, #284]	@ (80014c0 <Analog_FE_Update+0x124>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	461a      	mov	r2, r3
 80013ac:	2120      	movs	r1, #32
 80013ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013b2:	f006 fdf7 	bl	8007fa4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(CD_CH1_A_GPIO_Port, CD_CH1_A_Pin, (GPIO_PinState)((FEAnalog.CD_CH1 >> 0) & 0x01));
 80013b6:	4b42      	ldr	r3, [pc, #264]	@ (80014c0 <Analog_FE_Update+0x124>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	f3c3 0382 	ubfx	r3, r3, #2, #3
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	461a      	mov	r2, r3
 80013c8:	2120      	movs	r1, #32
 80013ca:	483e      	ldr	r0, [pc, #248]	@ (80014c4 <Analog_FE_Update+0x128>)
 80013cc:	f006 fdea 	bl	8007fa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CD_CH1_B_GPIO_Port, CD_CH1_B_Pin, (GPIO_PinState)((FEAnalog.CD_CH1 >> 1) & 0x01));
 80013d0:	4b3b      	ldr	r3, [pc, #236]	@ (80014c0 <Analog_FE_Update+0x124>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	f3c3 0382 	ubfx	r3, r3, #2, #3
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	105b      	asrs	r3, r3, #1
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	461a      	mov	r2, r3
 80013e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013ea:	4837      	ldr	r0, [pc, #220]	@ (80014c8 <Analog_FE_Update+0x12c>)
 80013ec:	f006 fdda 	bl	8007fa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CD_CH1_C_GPIO_Port, CD_CH1_C_Pin, (GPIO_PinState)((FEAnalog.CD_CH1 >> 2) & 0x01));
 80013f0:	4b33      	ldr	r3, [pc, #204]	@ (80014c0 <Analog_FE_Update+0x124>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	f3c3 0382 	ubfx	r3, r3, #2, #3
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	109b      	asrs	r3, r3, #2
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	b2db      	uxtb	r3, r3
 8001404:	461a      	mov	r2, r3
 8001406:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800140a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800140e:	f006 fdc9 	bl	8007fa4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(AC_DC_CH2_GPIO_Port, AC_DC_CH2_Pin, (GPIO_PinState)FEAnalog.AC_DC_CH2);
 8001412:	4b2b      	ldr	r3, [pc, #172]	@ (80014c0 <Analog_FE_Update+0x124>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800141a:	b2db      	uxtb	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001422:	4828      	ldr	r0, [pc, #160]	@ (80014c4 <Analog_FE_Update+0x128>)
 8001424:	f006 fdbe 	bl	8007fa4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(CD_CH2_A_GPIO_Port, CD_CH2_A_Pin, (GPIO_PinState)((FEAnalog.CD_CH2 >> 0) & 0x01));
 8001428:	4b25      	ldr	r3, [pc, #148]	@ (80014c0 <Analog_FE_Update+0x124>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	b2db      	uxtb	r3, r3
 8001438:	461a      	mov	r2, r3
 800143a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800143e:	4821      	ldr	r0, [pc, #132]	@ (80014c4 <Analog_FE_Update+0x128>)
 8001440:	f006 fdb0 	bl	8007fa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CD_CH2_B_GPIO_Port, CD_CH2_B_Pin, (GPIO_PinState)((FEAnalog.CD_CH2 >> 1) & 0x01));
 8001444:	4b1e      	ldr	r3, [pc, #120]	@ (80014c0 <Analog_FE_Update+0x124>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800144c:	b2db      	uxtb	r3, r3
 800144e:	105b      	asrs	r3, r3, #1
 8001450:	b2db      	uxtb	r3, r3
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	b2db      	uxtb	r3, r3
 8001458:	461a      	mov	r2, r3
 800145a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800145e:	4819      	ldr	r0, [pc, #100]	@ (80014c4 <Analog_FE_Update+0x128>)
 8001460:	f006 fda0 	bl	8007fa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CD_CH2_C_GPIO_Port, CD_CH2_C_Pin, (GPIO_PinState)((FEAnalog.CD_CH2 >> 2) & 0x01));
 8001464:	4b16      	ldr	r3, [pc, #88]	@ (80014c0 <Analog_FE_Update+0x124>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800146c:	b2db      	uxtb	r3, r3
 800146e:	109b      	asrs	r3, r3, #2
 8001470:	b2db      	uxtb	r3, r3
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	b2db      	uxtb	r3, r3
 8001478:	461a      	mov	r2, r3
 800147a:	2102      	movs	r1, #2
 800147c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001480:	f006 fd90 	bl	8007fa4 <HAL_GPIO_WritePin>

	//SET OFFSET
	HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, FEAnalog.OFFSET1);
 8001484:	4b0e      	ldr	r3, [pc, #56]	@ (80014c0 <Analog_FE_Update+0x124>)
 8001486:	885b      	ldrh	r3, [r3, #2]
 8001488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800148c:	b29b      	uxth	r3, r3
 800148e:	2200      	movs	r2, #0
 8001490:	2100      	movs	r1, #0
 8001492:	480e      	ldr	r0, [pc, #56]	@ (80014cc <Analog_FE_Update+0x130>)
 8001494:	f005 ffaa 	bl	80073ec <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, FEAnalog.OFFSET2);
 8001498:	4b09      	ldr	r3, [pc, #36]	@ (80014c0 <Analog_FE_Update+0x124>)
 800149a:	889b      	ldrh	r3, [r3, #4]
 800149c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	2200      	movs	r2, #0
 80014a4:	2100      	movs	r1, #0
 80014a6:	480a      	ldr	r0, [pc, #40]	@ (80014d0 <Analog_FE_Update+0x134>)
 80014a8:	f005 ffa0 	bl	80073ec <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 80014ac:	2100      	movs	r1, #0
 80014ae:	4807      	ldr	r0, [pc, #28]	@ (80014cc <Analog_FE_Update+0x130>)
 80014b0:	f005 ff30 	bl	8007314 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80014b4:	2100      	movs	r1, #0
 80014b6:	4806      	ldr	r0, [pc, #24]	@ (80014d0 <Analog_FE_Update+0x134>)
 80014b8:	f005 ff2c 	bl	8007314 <HAL_DAC_Start>
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000038 	.word	0x20000038
 80014c4:	48000800 	.word	0x48000800
 80014c8:	48000400 	.word	0x48000400
 80014cc:	2000067c 	.word	0x2000067c
 80014d0:	20000668 	.word	0x20000668

080014d4 <ENC_PROCESS>:

}


// 编码器处理函数
void ENC_PROCESS(void) {
 80014d4:	b480      	push	{r7}
 80014d6:	b08d      	sub	sp, #52	@ 0x34
 80014d8:	af00      	add	r7, sp, #0

	//处理会越界，不管了
    // 读取 TIM1 的计数器值
    uint32_t current_cnt1 = htim1.Instance->CNT;
 80014da:	4b3c      	ldr	r3, [pc, #240]	@ (80015cc <ENC_PROCESS+0xf8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int32_t diff1 = (int32_t)(current_cnt1 - prev_cnt1);
 80014e2:	4b3b      	ldr	r3, [pc, #236]	@ (80015d0 <ENC_PROCESS+0xfc>)
 80014e4:	881b      	ldrh	r3, [r3, #0]
 80014e6:	461a      	mov	r2, r3
 80014e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014ea:	1a9b      	subs	r3, r3, r2
 80014ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t abs_diff1 = abs(diff1);
 80014ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	bfb8      	it	lt
 80014f4:	425b      	neglt	r3, r3
 80014f6:	627b      	str	r3, [r7, #36]	@ 0x24
    if (diff1 > 0) {
 80014f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	dd10      	ble.n	8001520 <ENC_PROCESS+0x4c>
        WS2812_Brightness += abs_diff1;
 80014fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001500:	b2da      	uxtb	r2, r3
 8001502:	4b34      	ldr	r3, [pc, #208]	@ (80015d4 <ENC_PROCESS+0x100>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	4413      	add	r3, r2
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4b32      	ldr	r3, [pc, #200]	@ (80015d4 <ENC_PROCESS+0x100>)
 800150c:	701a      	strb	r2, [r3, #0]
        htim8.Instance->CCR1+=abs_diff1;
 800150e:	4b32      	ldr	r3, [pc, #200]	@ (80015d8 <ENC_PROCESS+0x104>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001514:	4b30      	ldr	r3, [pc, #192]	@ (80015d8 <ENC_PROCESS+0x104>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800151a:	440a      	add	r2, r1
 800151c:	635a      	str	r2, [r3, #52]	@ 0x34
 800151e:	e012      	b.n	8001546 <ENC_PROCESS+0x72>

    } else if (diff1 < 0) {
 8001520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001522:	2b00      	cmp	r3, #0
 8001524:	da0f      	bge.n	8001546 <ENC_PROCESS+0x72>
            WS2812_Brightness -= abs_diff1;
 8001526:	4b2b      	ldr	r3, [pc, #172]	@ (80015d4 <ENC_PROCESS+0x100>)
 8001528:	781a      	ldrb	r2, [r3, #0]
 800152a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152c:	b2db      	uxtb	r3, r3
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4b28      	ldr	r3, [pc, #160]	@ (80015d4 <ENC_PROCESS+0x100>)
 8001534:	701a      	strb	r2, [r3, #0]
            htim8.Instance->CCR1-=abs_diff1;
 8001536:	4b28      	ldr	r3, [pc, #160]	@ (80015d8 <ENC_PROCESS+0x104>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800153c:	4b26      	ldr	r3, [pc, #152]	@ (80015d8 <ENC_PROCESS+0x104>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001542:	1a8a      	subs	r2, r1, r2
 8001544:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    prev_cnt1 = current_cnt1;
 8001546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001548:	b29a      	uxth	r2, r3
 800154a:	4b21      	ldr	r3, [pc, #132]	@ (80015d0 <ENC_PROCESS+0xfc>)
 800154c:	801a      	strh	r2, [r3, #0]

    // 读取 TIM3 的计数器值
    uint32_t current_cnt3 = htim3.Instance->CNT;
 800154e:	4b23      	ldr	r3, [pc, #140]	@ (80015dc <ENC_PROCESS+0x108>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001554:	623b      	str	r3, [r7, #32]
    int32_t diff3 = (int32_t)(current_cnt3 - prev_cnt3);
 8001556:	4b22      	ldr	r3, [pc, #136]	@ (80015e0 <ENC_PROCESS+0x10c>)
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	6a3b      	ldr	r3, [r7, #32]
 800155e:	1a9b      	subs	r3, r3, r2
 8001560:	61fb      	str	r3, [r7, #28]
    uint32_t abs_diff3 = abs(diff3);
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	2b00      	cmp	r3, #0
 8001566:	bfb8      	it	lt
 8001568:	425b      	neglt	r3, r3
 800156a:	61bb      	str	r3, [r7, #24]
    if (diff3 > 0) {
        // 可根据实际需求添加处理逻辑
    } else if (diff3 < 0) {
        // 可根据实际需求添加处理逻辑
    }
    prev_cnt3 = current_cnt3;
 800156c:	6a3b      	ldr	r3, [r7, #32]
 800156e:	b29a      	uxth	r2, r3
 8001570:	4b1b      	ldr	r3, [pc, #108]	@ (80015e0 <ENC_PROCESS+0x10c>)
 8001572:	801a      	strh	r2, [r3, #0]

    // 读取 TIM4 的计数器值
    uint32_t current_cnt4 = htim4.Instance->CNT;
 8001574:	4b1b      	ldr	r3, [pc, #108]	@ (80015e4 <ENC_PROCESS+0x110>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157a:	617b      	str	r3, [r7, #20]
    int32_t diff4 = (int32_t)(current_cnt4 - prev_cnt4);
 800157c:	4b1a      	ldr	r3, [pc, #104]	@ (80015e8 <ENC_PROCESS+0x114>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	1a9b      	subs	r3, r3, r2
 8001586:	613b      	str	r3, [r7, #16]
    uint32_t abs_diff4 = abs(diff4);
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	2b00      	cmp	r3, #0
 800158c:	bfb8      	it	lt
 800158e:	425b      	neglt	r3, r3
 8001590:	60fb      	str	r3, [r7, #12]
    if (diff4 > 0) {
        // 可根据实际需求添加处理逻辑
    } else if (diff4 < 0) {
        // 可根据实际需求添加处理逻辑
    }
    prev_cnt4 = current_cnt4;
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	b29a      	uxth	r2, r3
 8001596:	4b14      	ldr	r3, [pc, #80]	@ (80015e8 <ENC_PROCESS+0x114>)
 8001598:	801a      	strh	r2, [r3, #0]

    // 读取 TIM20 的计数器值
    uint32_t current_cnt20 = htim20.Instance->CNT;
 800159a:	4b14      	ldr	r3, [pc, #80]	@ (80015ec <ENC_PROCESS+0x118>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a0:	60bb      	str	r3, [r7, #8]
    int32_t diff20 = (int32_t)(current_cnt20 - prev_cnt20);
 80015a2:	4b13      	ldr	r3, [pc, #76]	@ (80015f0 <ENC_PROCESS+0x11c>)
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	461a      	mov	r2, r3
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	1a9b      	subs	r3, r3, r2
 80015ac:	607b      	str	r3, [r7, #4]
    uint32_t abs_diff20 = abs(diff20);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	bfb8      	it	lt
 80015b4:	425b      	neglt	r3, r3
 80015b6:	603b      	str	r3, [r7, #0]
    if (diff20 > 0) {
        // 可根据实际需求添加处理逻辑
    } else if (diff20 < 0) {
        // 可根据实际需求添加处理逻辑
    }
    prev_cnt20 = current_cnt20;
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	4b0c      	ldr	r3, [pc, #48]	@ (80015f0 <ENC_PROCESS+0x11c>)
 80015be:	801a      	strh	r2, [r3, #0]
}
 80015c0:	bf00      	nop
 80015c2:	3734      	adds	r7, #52	@ 0x34
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	20000a78 	.word	0x20000a78
 80015d0:	20002db8 	.word	0x20002db8
 80015d4:	20000044 	.word	0x20000044
 80015d8:	20000bf4 	.word	0x20000bf4
 80015dc:	20000ac4 	.word	0x20000ac4
 80015e0:	20002dba 	.word	0x20002dba
 80015e4:	20000b10 	.word	0x20000b10
 80015e8:	20002dbc 	.word	0x20002dbc
 80015ec:	20000c8c 	.word	0x20000c8c
 80015f0:	20002dbe 	.word	0x20002dbe

080015f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015fa:	f003 f8b2 	bl	8004762 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015fe:	f000 f8b9 	bl	8001774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001602:	f001 f9c1 	bl	8002988 <MX_GPIO_Init>
  MX_DMA_Init();
 8001606:	f001 f96d 	bl	80028e4 <MX_DMA_Init>
  MX_USB_Device_Init();
 800160a:	f011 fdaf 	bl	801316c <MX_USB_Device_Init>
  MX_COMP2_Init();
 800160e:	f000 fab3 	bl	8001b78 <MX_COMP2_Init>
  MX_COMP5_Init();
 8001612:	f000 fad7 	bl	8001bc4 <MX_COMP5_Init>
  MX_DAC1_Init();
 8001616:	f000 fafb 	bl	8001c10 <MX_DAC1_Init>
  MX_DAC2_Init();
 800161a:	f000 fb43 	bl	8001ca4 <MX_DAC2_Init>
  MX_OPAMP1_Init();
 800161e:	f000 fd27 	bl	8002070 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8001622:	f000 fd51 	bl	80020c8 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8001626:	f000 fd75 	bl	8002114 <MX_OPAMP3_Init>
  MX_OPAMP6_Init();
 800162a:	f000 fdbf 	bl	80021ac <MX_OPAMP6_Init>
  MX_TIM1_Init();
 800162e:	f000 fe27 	bl	8002280 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001632:	f000 fed5 	bl	80023e0 <MX_TIM4_Init>
  MX_TIM20_Init();
 8001636:	f001 f8fb 	bl	8002830 <MX_TIM20_Init>
  MX_TIM3_Init();
 800163a:	f000 fe7b 	bl	8002334 <MX_TIM3_Init>
  MX_ADC5_Init();
 800163e:	f000 f9c9 	bl	80019d4 <MX_ADC5_Init>
  MX_TIM15_Init();
 8001642:	f001 f851 	bl	80026e8 <MX_TIM15_Init>
  MX_TIM8_Init();
 8001646:	f000 ff8d 	bl	8002564 <MX_TIM8_Init>
  MX_SPI3_Init();
 800164a:	f000 fddb 	bl	8002204 <MX_SPI3_Init>
  MX_I2C3_Init();
 800164e:	f000 fc85 	bl	8001f5c <MX_I2C3_Init>
  MX_DAC4_Init();
 8001652:	f000 fb61 	bl	8001d18 <MX_DAC4_Init>
  MX_LPUART1_UART_Init();
 8001656:	f000 fcc1 	bl	8001fdc <MX_LPUART1_UART_Init>
  MX_OPAMP5_Init();
 800165a:	f000 fd81 	bl	8002160 <MX_OPAMP5_Init>
  MX_TIM7_Init();
 800165e:	f000 ff4b 	bl	80024f8 <MX_TIM7_Init>
  MX_ADC2_Init();
 8001662:	f000 f8d5 	bl	8001810 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001666:	f000 f93b 	bl	80018e0 <MX_ADC3_Init>
  MX_TIM6_Init();
 800166a:	f000 ff0f 	bl	800248c <MX_TIM6_Init>
  MX_HRTIM1_Init();
 800166e:	f000 fb8d 	bl	8001d8c <MX_HRTIM1_Init>
//  HAL_OPAMP_Start(&hopamp3);
//  HAL_OPAMP_Start(&hopamp4);
//  HAL_OPAMP_Start(&hopamp5);
//  HAL_OPAMP_Start(&hopamp6);

	HAL_ADC_Start_DMA(&hadc2, BUFFER_DPO_CH1, DPO_DEEP);
 8001672:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001676:	492e      	ldr	r1, [pc, #184]	@ (8001730 <main+0x13c>)
 8001678:	482e      	ldr	r0, [pc, #184]	@ (8001734 <main+0x140>)
 800167a:	f003 fdfd 	bl	8005278 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, BUFFER_DPO_CH2, DPO_DEEP);
 800167e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001682:	492d      	ldr	r1, [pc, #180]	@ (8001738 <main+0x144>)
 8001684:	482d      	ldr	r0, [pc, #180]	@ (800173c <main+0x148>)
 8001686:	f003 fdf7 	bl	8005278 <HAL_ADC_Start_DMA>

  HAL_ADC_Start_DMA(&hadc5, BUFFER_SYS_ADC, 5);
 800168a:	2205      	movs	r2, #5
 800168c:	492c      	ldr	r1, [pc, #176]	@ (8001740 <main+0x14c>)
 800168e:	482d      	ldr	r0, [pc, #180]	@ (8001744 <main+0x150>)
 8001690:	f003 fdf2 	bl	8005278 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim6);
 8001694:	482c      	ldr	r0, [pc, #176]	@ (8001748 <main+0x154>)
 8001696:	f00b fd9b 	bl	800d1d0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim7);
 800169a:	482c      	ldr	r0, [pc, #176]	@ (800174c <main+0x158>)
 800169c:	f00b fd98 	bl	800d1d0 <HAL_TIM_Base_Start>


  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80016a0:	213c      	movs	r1, #60	@ 0x3c
 80016a2:	482b      	ldr	r0, [pc, #172]	@ (8001750 <main+0x15c>)
 80016a4:	f00c fa4a 	bl	800db3c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80016a8:	213c      	movs	r1, #60	@ 0x3c
 80016aa:	482a      	ldr	r0, [pc, #168]	@ (8001754 <main+0x160>)
 80016ac:	f00c fa46 	bl	800db3c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80016b0:	213c      	movs	r1, #60	@ 0x3c
 80016b2:	4829      	ldr	r0, [pc, #164]	@ (8001758 <main+0x164>)
 80016b4:	f00c fa42 	bl	800db3c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim20, TIM_CHANNEL_ALL);
 80016b8:	213c      	movs	r1, #60	@ 0x3c
 80016ba:	4828      	ldr	r0, [pc, #160]	@ (800175c <main+0x168>)
 80016bc:	f00c fa3e 	bl	800db3c <HAL_TIM_Encoder_Start>


  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80016c0:	2100      	movs	r1, #0
 80016c2:	4827      	ldr	r0, [pc, #156]	@ (8001760 <main+0x16c>)
 80016c4:	f00b fe56 	bl	800d374 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80016c8:	2100      	movs	r1, #0
 80016ca:	4826      	ldr	r0, [pc, #152]	@ (8001764 <main+0x170>)
 80016cc:	f00b fe52 	bl	800d374 <HAL_TIM_PWM_Start>


  FT6336_Init();
 80016d0:	f7ff fda4 	bl	800121c <FT6336_Init>
  ST7789_Init();
 80016d4:	f001 fb74 	bl	8002dc0 <ST7789_Init>


  View_DoubaoWelcome();
 80016d8:	f001 fd70 	bl	80031bc <View_DoubaoWelcome>


  HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TC1);  // Enable the generation of the waveform signal on the designated output
 80016dc:	2110      	movs	r1, #16
 80016de:	4822      	ldr	r0, [pc, #136]	@ (8001768 <main+0x174>)
 80016e0:	f007 f87f 	bl	80087e2 <HAL_HRTIM_WaveformOutputStart>
  HAL_HRTIM_WaveformCounterStart(&hhrtim1, HRTIM_TIMERID_TIMER_C);  // Start the counter of the Timer A operating in waveform mode
 80016e4:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80016e8:	481f      	ldr	r0, [pc, #124]	@ (8001768 <main+0x174>)
 80016ea:	f007 f8a7 	bl	800883c <HAL_HRTIM_WaveformCountStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	ENC_PROCESS();
 80016ee:	f7ff fef1 	bl	80014d4 <ENC_PROCESS>
//	  ST7789_Test();
//	  ST7789_WriteString(10, 10, " !\"#\%\$", Han_Array, WHITE, BLACK);


	Analog_FE_Update();
 80016f2:	f7ff fe53 	bl	800139c <Analog_FE_Update>


	View_Sensor();
 80016f6:	f001 fd83 	bl	8003200 <View_Sensor>
//        // 等待 DMA 传输完成
//    }
//    printf("ADC DMA transfer completed!\n");

    // 可以在这里处理 ADC 转换结果
    for (int i = 0; i < DPO_DEEP; i++) {
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	e00a      	b.n	8001716 <main+0x122>
//        sprintf(BUFFER_CDC,"ADC: %d\n", BUFFER_DPO_CH1[i]);
//    	CDC_Transmit_FS(BUFFER_CDC, strlen(BUFFER_CDC));
        printf("ADC: %d\n", BUFFER_DPO_CH1[i]);
 8001700:	4a0b      	ldr	r2, [pc, #44]	@ (8001730 <main+0x13c>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001708:	4619      	mov	r1, r3
 800170a:	4818      	ldr	r0, [pc, #96]	@ (800176c <main+0x178>)
 800170c:	f013 f940 	bl	8014990 <iprintf>
    for (int i = 0; i < DPO_DEEP; i++) {
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3301      	adds	r3, #1
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800171c:	dbf0      	blt.n	8001700 <main+0x10c>

    }


	TLC5952_WriteLED();
 800171e:	f7ff fcad 	bl	800107c <TLC5952_WriteLED>
	TLC5952_WriteControl();
 8001722:	f7ff fce1 	bl	80010e8 <TLC5952_WriteControl>




	WS2812_Write_Colors(rainbow_colors, 10);
 8001726:	210a      	movs	r1, #10
 8001728:	4811      	ldr	r0, [pc, #68]	@ (8001770 <main+0x17c>)
 800172a:	f002 ff93 	bl	8004654 <WS2812_Write_Colors>
	ENC_PROCESS();
 800172e:	e7de      	b.n	80016ee <main+0xfa>
 8001730:	20000dac 	.word	0x20000dac
 8001734:	200003bc 	.word	0x200003bc
 8001738:	20001dac 	.word	0x20001dac
 800173c:	20000428 	.word	0x20000428
 8001740:	20000d98 	.word	0x20000d98
 8001744:	20000494 	.word	0x20000494
 8001748:	20000b5c 	.word	0x20000b5c
 800174c:	20000ba8 	.word	0x20000ba8
 8001750:	20000a78 	.word	0x20000a78
 8001754:	20000ac4 	.word	0x20000ac4
 8001758:	20000b10 	.word	0x20000b10
 800175c:	20000c8c 	.word	0x20000c8c
 8001760:	20000c40 	.word	0x20000c40
 8001764:	20000bf4 	.word	0x20000bf4
 8001768:	200006a4 	.word	0x200006a4
 800176c:	08018248 	.word	0x08018248
 8001770:	20000010 	.word	0x20000010

08001774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b094      	sub	sp, #80	@ 0x50
 8001778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800177a:	f107 0318 	add.w	r3, r7, #24
 800177e:	2238      	movs	r2, #56	@ 0x38
 8001780:	2100      	movs	r1, #0
 8001782:	4618      	mov	r0, r3
 8001784:	f013 f979 	bl	8014a7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
 8001794:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001796:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800179a:	f009 ff51 	bl	800b640 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800179e:	2321      	movs	r3, #33	@ 0x21
 80017a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80017a8:	2301      	movs	r3, #1
 80017aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ac:	2302      	movs	r3, #2
 80017ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017b0:	2303      	movs	r3, #3
 80017b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80017b4:	2302      	movs	r3, #2
 80017b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 80017b8:	235a      	movs	r3, #90	@ 0x5a
 80017ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80017bc:	2306      	movs	r3, #6
 80017be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017c0:	2302      	movs	r3, #2
 80017c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017c4:	2302      	movs	r3, #2
 80017c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c8:	f107 0318 	add.w	r3, r7, #24
 80017cc:	4618      	mov	r0, r3
 80017ce:	f009 ffeb 	bl	800b7a8 <HAL_RCC_OscConfig>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <SystemClock_Config+0x68>
  {
    Error_Handler();
 80017d8:	f001 f9f0 	bl	8002bbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017dc:	230f      	movs	r3, #15
 80017de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017e0:	2303      	movs	r3, #3
 80017e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017e8:	2300      	movs	r3, #0
 80017ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	2104      	movs	r1, #4
 80017f4:	4618      	mov	r0, r3
 80017f6:	f00a fae9 	bl	800bdcc <HAL_RCC_ClockConfig>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001800:	f001 f9dc 	bl	8002bbc <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001804:	f00a fcb8 	bl	800c178 <HAL_RCC_EnableCSS>
}
 8001808:	bf00      	nop
 800180a:	3750      	adds	r7, #80	@ 0x50
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001816:	463b      	mov	r3, r7
 8001818:	2220      	movs	r2, #32
 800181a:	2100      	movs	r1, #0
 800181c:	4618      	mov	r0, r3
 800181e:	f013 f92c 	bl	8014a7a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001822:	4b2c      	ldr	r3, [pc, #176]	@ (80018d4 <MX_ADC2_Init+0xc4>)
 8001824:	4a2c      	ldr	r2, [pc, #176]	@ (80018d8 <MX_ADC2_Init+0xc8>)
 8001826:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001828:	4b2a      	ldr	r3, [pc, #168]	@ (80018d4 <MX_ADC2_Init+0xc4>)
 800182a:	2200      	movs	r2, #0
 800182c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800182e:	4b29      	ldr	r3, [pc, #164]	@ (80018d4 <MX_ADC2_Init+0xc4>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001834:	4b27      	ldr	r3, [pc, #156]	@ (80018d4 <MX_ADC2_Init+0xc4>)
 8001836:	2200      	movs	r2, #0
 8001838:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800183a:	4b26      	ldr	r3, [pc, #152]	@ (80018d4 <MX_ADC2_Init+0xc4>)
 800183c:	2200      	movs	r2, #0
 800183e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001840:	4b24      	ldr	r3, [pc, #144]	@ (80018d4 <MX_ADC2_Init+0xc4>)
 8001842:	2200      	movs	r2, #0
 8001844:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001846:	4b23      	ldr	r3, [pc, #140]	@ (80018d4 <MX_ADC2_Init+0xc4>)
 8001848:	2204      	movs	r2, #4
 800184a:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800184c:	4b21      	ldr	r3, [pc, #132]	@ (80018d4 <MX_ADC2_Init+0xc4>)
 800184e:	2200      	movs	r2, #0
 8001850:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001852:	4b20      	ldr	r3, [pc, #128]	@ (80018d4 <MX_ADC2_Init+0xc4>)
 8001854:	2200      	movs	r2, #0
 8001856:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001858:	4b1e      	ldr	r3, [pc, #120]	@ (80018d4 <MX_ADC2_Init+0xc4>)
 800185a:	2201      	movs	r2, #1
 800185c:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800185e:	4b1d      	ldr	r3, [pc, #116]	@ (80018d4 <MX_ADC2_Init+0xc4>)
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8001866:	4b1b      	ldr	r3, [pc, #108]	@ (80018d4 <MX_ADC2_Init+0xc4>)
 8001868:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 800186c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800186e:	4b19      	ldr	r3, [pc, #100]	@ (80018d4 <MX_ADC2_Init+0xc4>)
 8001870:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001874:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001876:	4b17      	ldr	r3, [pc, #92]	@ (80018d4 <MX_ADC2_Init+0xc4>)
 8001878:	2201      	movs	r2, #1
 800187a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800187e:	4b15      	ldr	r3, [pc, #84]	@ (80018d4 <MX_ADC2_Init+0xc4>)
 8001880:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001884:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001886:	4b13      	ldr	r3, [pc, #76]	@ (80018d4 <MX_ADC2_Init+0xc4>)
 8001888:	2200      	movs	r2, #0
 800188a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800188e:	4811      	ldr	r0, [pc, #68]	@ (80018d4 <MX_ADC2_Init+0xc4>)
 8001890:	f003 fb36 	bl	8004f00 <HAL_ADC_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800189a:	f001 f98f 	bl	8002bbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800189e:	4b0f      	ldr	r3, [pc, #60]	@ (80018dc <MX_ADC2_Init+0xcc>)
 80018a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018a2:	2306      	movs	r3, #6
 80018a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018aa:	237f      	movs	r3, #127	@ 0x7f
 80018ac:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018ae:	2304      	movs	r3, #4
 80018b0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80018b6:	463b      	mov	r3, r7
 80018b8:	4619      	mov	r1, r3
 80018ba:	4806      	ldr	r0, [pc, #24]	@ (80018d4 <MX_ADC2_Init+0xc4>)
 80018bc:	f004 f838 	bl	8005930 <HAL_ADC_ConfigChannel>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80018c6:	f001 f979 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80018ca:	bf00      	nop
 80018cc:	3720      	adds	r7, #32
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200003bc 	.word	0x200003bc
 80018d8:	50000100 	.word	0x50000100
 80018dc:	10c00010 	.word	0x10c00010

080018e0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08c      	sub	sp, #48	@ 0x30
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80018e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	2220      	movs	r2, #32
 80018f6:	2100      	movs	r1, #0
 80018f8:	4618      	mov	r0, r3
 80018fa:	f013 f8be 	bl	8014a7a <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80018fe:	4b32      	ldr	r3, [pc, #200]	@ (80019c8 <MX_ADC3_Init+0xe8>)
 8001900:	4a32      	ldr	r2, [pc, #200]	@ (80019cc <MX_ADC3_Init+0xec>)
 8001902:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001904:	4b30      	ldr	r3, [pc, #192]	@ (80019c8 <MX_ADC3_Init+0xe8>)
 8001906:	2200      	movs	r2, #0
 8001908:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800190a:	4b2f      	ldr	r3, [pc, #188]	@ (80019c8 <MX_ADC3_Init+0xe8>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001910:	4b2d      	ldr	r3, [pc, #180]	@ (80019c8 <MX_ADC3_Init+0xe8>)
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001916:	4b2c      	ldr	r3, [pc, #176]	@ (80019c8 <MX_ADC3_Init+0xe8>)
 8001918:	2200      	movs	r2, #0
 800191a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800191c:	4b2a      	ldr	r3, [pc, #168]	@ (80019c8 <MX_ADC3_Init+0xe8>)
 800191e:	2200      	movs	r2, #0
 8001920:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001922:	4b29      	ldr	r3, [pc, #164]	@ (80019c8 <MX_ADC3_Init+0xe8>)
 8001924:	2204      	movs	r2, #4
 8001926:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001928:	4b27      	ldr	r3, [pc, #156]	@ (80019c8 <MX_ADC3_Init+0xe8>)
 800192a:	2200      	movs	r2, #0
 800192c:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800192e:	4b26      	ldr	r3, [pc, #152]	@ (80019c8 <MX_ADC3_Init+0xe8>)
 8001930:	2200      	movs	r2, #0
 8001932:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8001934:	4b24      	ldr	r3, [pc, #144]	@ (80019c8 <MX_ADC3_Init+0xe8>)
 8001936:	2201      	movs	r2, #1
 8001938:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800193a:	4b23      	ldr	r3, [pc, #140]	@ (80019c8 <MX_ADC3_Init+0xe8>)
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8001942:	4b21      	ldr	r3, [pc, #132]	@ (80019c8 <MX_ADC3_Init+0xe8>)
 8001944:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8001948:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800194a:	4b1f      	ldr	r3, [pc, #124]	@ (80019c8 <MX_ADC3_Init+0xe8>)
 800194c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001950:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001952:	4b1d      	ldr	r3, [pc, #116]	@ (80019c8 <MX_ADC3_Init+0xe8>)
 8001954:	2201      	movs	r2, #1
 8001956:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800195a:	4b1b      	ldr	r3, [pc, #108]	@ (80019c8 <MX_ADC3_Init+0xe8>)
 800195c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001960:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001962:	4b19      	ldr	r3, [pc, #100]	@ (80019c8 <MX_ADC3_Init+0xe8>)
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800196a:	4817      	ldr	r0, [pc, #92]	@ (80019c8 <MX_ADC3_Init+0xe8>)
 800196c:	f003 fac8 	bl	8004f00 <HAL_ADC_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8001976:	f001 f921 	bl	8002bbc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800197a:	2300      	movs	r3, #0
 800197c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800197e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001982:	4619      	mov	r1, r3
 8001984:	4810      	ldr	r0, [pc, #64]	@ (80019c8 <MX_ADC3_Init+0xe8>)
 8001986:	f004 ffa1 	bl	80068cc <HAL_ADCEx_MultiModeConfigChannel>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8001990:	f001 f914 	bl	8002bbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001994:	4b0e      	ldr	r3, [pc, #56]	@ (80019d0 <MX_ADC3_Init+0xf0>)
 8001996:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001998:	2306      	movs	r3, #6
 800199a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800199c:	2300      	movs	r3, #0
 800199e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019a0:	237f      	movs	r3, #127	@ 0x7f
 80019a2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019a4:	2304      	movs	r3, #4
 80019a6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80019ac:	1d3b      	adds	r3, r7, #4
 80019ae:	4619      	mov	r1, r3
 80019b0:	4805      	ldr	r0, [pc, #20]	@ (80019c8 <MX_ADC3_Init+0xe8>)
 80019b2:	f003 ffbd 	bl	8005930 <HAL_ADC_ConfigChannel>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_ADC3_Init+0xe0>
  {
    Error_Handler();
 80019bc:	f001 f8fe 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80019c0:	bf00      	nop
 80019c2:	3730      	adds	r7, #48	@ 0x30
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000428 	.word	0x20000428
 80019cc:	50000400 	.word	0x50000400
 80019d0:	14f00020 	.word	0x14f00020

080019d4 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b090      	sub	sp, #64	@ 0x40
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80019da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	60da      	str	r2, [r3, #12]
 80019e8:	611a      	str	r2, [r3, #16]
 80019ea:	615a      	str	r2, [r3, #20]
 80019ec:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	2220      	movs	r2, #32
 80019f2:	2100      	movs	r1, #0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f013 f840 	bl	8014a7a <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 80019fa:	4b57      	ldr	r3, [pc, #348]	@ (8001b58 <MX_ADC5_Init+0x184>)
 80019fc:	4a57      	ldr	r2, [pc, #348]	@ (8001b5c <MX_ADC5_Init+0x188>)
 80019fe:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001a00:	4b55      	ldr	r3, [pc, #340]	@ (8001b58 <MX_ADC5_Init+0x184>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001a06:	4b54      	ldr	r3, [pc, #336]	@ (8001b58 <MX_ADC5_Init+0x184>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a0c:	4b52      	ldr	r3, [pc, #328]	@ (8001b58 <MX_ADC5_Init+0x184>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8001a12:	4b51      	ldr	r3, [pc, #324]	@ (8001b58 <MX_ADC5_Init+0x184>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001a18:	4b4f      	ldr	r3, [pc, #316]	@ (8001b58 <MX_ADC5_Init+0x184>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001a1e:	4b4e      	ldr	r3, [pc, #312]	@ (8001b58 <MX_ADC5_Init+0x184>)
 8001a20:	2208      	movs	r2, #8
 8001a22:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8001a24:	4b4c      	ldr	r3, [pc, #304]	@ (8001b58 <MX_ADC5_Init+0x184>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 8001a2a:	4b4b      	ldr	r3, [pc, #300]	@ (8001b58 <MX_ADC5_Init+0x184>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 5;
 8001a30:	4b49      	ldr	r3, [pc, #292]	@ (8001b58 <MX_ADC5_Init+0x184>)
 8001a32:	2205      	movs	r2, #5
 8001a34:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001a36:	4b48      	ldr	r3, [pc, #288]	@ (8001b58 <MX_ADC5_Init+0x184>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T7_TRGO;
 8001a3e:	4b46      	ldr	r3, [pc, #280]	@ (8001b58 <MX_ADC5_Init+0x184>)
 8001a40:	f44f 62f8 	mov.w	r2, #1984	@ 0x7c0
 8001a44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001a46:	4b44      	ldr	r3, [pc, #272]	@ (8001b58 <MX_ADC5_Init+0x184>)
 8001a48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a4c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8001a4e:	4b42      	ldr	r3, [pc, #264]	@ (8001b58 <MX_ADC5_Init+0x184>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001a56:	4b40      	ldr	r3, [pc, #256]	@ (8001b58 <MX_ADC5_Init+0x184>)
 8001a58:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a5c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8001a5e:	4b3e      	ldr	r3, [pc, #248]	@ (8001b58 <MX_ADC5_Init+0x184>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8001a66:	483c      	ldr	r0, [pc, #240]	@ (8001b58 <MX_ADC5_Init+0x184>)
 8001a68:	f003 fa4a 	bl	8004f00 <HAL_ADC_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_ADC5_Init+0xa2>
  {
    Error_Handler();
 8001a72:	f001 f8a3 	bl	8002bbc <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8001a76:	4b3a      	ldr	r3, [pc, #232]	@ (8001b60 <MX_ADC5_Init+0x18c>)
 8001a78:	627b      	str	r3, [r7, #36]	@ 0x24
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8001a7a:	f44f 0340 	mov.w	r3, #12582912	@ 0xc00000
 8001a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  AnalogWDGConfig.Channel = ADC_CHANNEL_2;
 8001a80:	4b38      	ldr	r3, [pc, #224]	@ (8001b64 <MX_ADC5_Init+0x190>)
 8001a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  AnalogWDGConfig.ITMode = ENABLE;
 8001a84:	2301      	movs	r3, #1
 8001a86:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  AnalogWDGConfig.HighThreshold = 4095;
 8001a8a:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001a8e:	637b      	str	r3, [r7, #52]	@ 0x34
  AnalogWDGConfig.LowThreshold = 3500;
 8001a90:	f640 53ac 	movw	r3, #3500	@ 0xdac
 8001a94:	63bb      	str	r3, [r7, #56]	@ 0x38
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_ADC_AnalogWDGConfig(&hadc5, &AnalogWDGConfig) != HAL_OK)
 8001a9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	482d      	ldr	r0, [pc, #180]	@ (8001b58 <MX_ADC5_Init+0x184>)
 8001aa2:	f004 fb85 	bl	80061b0 <HAL_ADC_AnalogWDGConfig>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_ADC5_Init+0xdc>
  {
    Error_Handler();
 8001aac:	f001 f886 	bl	8002bbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001ab0:	4b2c      	ldr	r3, [pc, #176]	@ (8001b64 <MX_ADC5_Init+0x190>)
 8001ab2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ab4:	2306      	movs	r3, #6
 8001ab6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001ab8:	2307      	movs	r3, #7
 8001aba:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001abc:	237f      	movs	r3, #127	@ 0x7f
 8001abe:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ac0:	2304      	movs	r3, #4
 8001ac2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	4619      	mov	r1, r3
 8001acc:	4822      	ldr	r0, [pc, #136]	@ (8001b58 <MX_ADC5_Init+0x184>)
 8001ace:	f003 ff2f 	bl	8005930 <HAL_ADC_ConfigChannel>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_ADC5_Init+0x108>
  {
    Error_Handler();
 8001ad8:	f001 f870 	bl	8002bbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC5;
 8001adc:	4b22      	ldr	r3, [pc, #136]	@ (8001b68 <MX_ADC5_Init+0x194>)
 8001ade:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001ae0:	230c      	movs	r3, #12
 8001ae2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001ae4:	1d3b      	adds	r3, r7, #4
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	481b      	ldr	r0, [pc, #108]	@ (8001b58 <MX_ADC5_Init+0x184>)
 8001aea:	f003 ff21 	bl	8005930 <HAL_ADC_ConfigChannel>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_ADC5_Init+0x124>
  {
    Error_Handler();
 8001af4:	f001 f862 	bl	8002bbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8001af8:	4b1c      	ldr	r3, [pc, #112]	@ (8001b6c <MX_ADC5_Init+0x198>)
 8001afa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001afc:	2312      	movs	r3, #18
 8001afe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001b00:	1d3b      	adds	r3, r7, #4
 8001b02:	4619      	mov	r1, r3
 8001b04:	4814      	ldr	r0, [pc, #80]	@ (8001b58 <MX_ADC5_Init+0x184>)
 8001b06:	f003 ff13 	bl	8005930 <HAL_ADC_ConfigChannel>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_ADC5_Init+0x140>
  {
    Error_Handler();
 8001b10:	f001 f854 	bl	8002bbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001b14:	4b16      	ldr	r3, [pc, #88]	@ (8001b70 <MX_ADC5_Init+0x19c>)
 8001b16:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001b18:	2318      	movs	r3, #24
 8001b1a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	4619      	mov	r1, r3
 8001b20:	480d      	ldr	r0, [pc, #52]	@ (8001b58 <MX_ADC5_Init+0x184>)
 8001b22:	f003 ff05 	bl	8005930 <HAL_ADC_ConfigChannel>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_ADC5_Init+0x15c>
  {
    Error_Handler();
 8001b2c:	f001 f846 	bl	8002bbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP5;
 8001b30:	4b10      	ldr	r3, [pc, #64]	@ (8001b74 <MX_ADC5_Init+0x1a0>)
 8001b32:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001b34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b38:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4806      	ldr	r0, [pc, #24]	@ (8001b58 <MX_ADC5_Init+0x184>)
 8001b40:	f003 fef6 	bl	8005930 <HAL_ADC_ConfigChannel>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_ADC5_Init+0x17a>
  {
    Error_Handler();
 8001b4a:	f001 f837 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8001b4e:	bf00      	nop
 8001b50:	3740      	adds	r7, #64	@ 0x40
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000494 	.word	0x20000494
 8001b5c:	50000600 	.word	0x50000600
 8001b60:	7dc00000 	.word	0x7dc00000
 8001b64:	08600004 	.word	0x08600004
 8001b68:	90c00010 	.word	0x90c00010
 8001b6c:	c7520000 	.word	0xc7520000
 8001b70:	cb840000 	.word	0xcb840000
 8001b74:	8c900008 	.word	0x8c900008

08001b78 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bbc <MX_COMP2_Init+0x44>)
 8001b7e:	4a10      	ldr	r2, [pc, #64]	@ (8001bc0 <MX_COMP2_Init+0x48>)
 8001b80:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001b82:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <MX_COMP2_Init+0x44>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	605a      	str	r2, [r3, #4]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 8001b88:	4b0c      	ldr	r3, [pc, #48]	@ (8001bbc <MX_COMP2_Init+0x44>)
 8001b8a:	2250      	movs	r2, #80	@ 0x50
 8001b8c:	609a      	str	r2, [r3, #8]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001bbc <MX_COMP2_Init+0x44>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001b94:	4b09      	ldr	r3, [pc, #36]	@ (8001bbc <MX_COMP2_Init+0x44>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	60da      	str	r2, [r3, #12]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001b9a:	4b08      	ldr	r3, [pc, #32]	@ (8001bbc <MX_COMP2_Init+0x44>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	615a      	str	r2, [r3, #20]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <MX_COMP2_Init+0x44>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8001ba6:	4805      	ldr	r0, [pc, #20]	@ (8001bbc <MX_COMP2_Init+0x44>)
 8001ba8:	f005 f8e8 	bl	8006d7c <HAL_COMP_Init>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_COMP2_Init+0x3e>
  {
    Error_Handler();
 8001bb2:	f001 f803 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000620 	.word	0x20000620
 8001bc0:	40010204 	.word	0x40010204

08001bc4 <MX_COMP5_Init>:
  * @brief COMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP5_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE END COMP5_Init 0 */

  /* USER CODE BEGIN COMP5_Init 1 */

  /* USER CODE END COMP5_Init 1 */
  hcomp5.Instance = COMP5;
 8001bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c08 <MX_COMP5_Init+0x44>)
 8001bca:	4a10      	ldr	r2, [pc, #64]	@ (8001c0c <MX_COMP5_Init+0x48>)
 8001bcc:	601a      	str	r2, [r3, #0]
  hcomp5.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001bce:	4b0e      	ldr	r3, [pc, #56]	@ (8001c08 <MX_COMP5_Init+0x44>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	605a      	str	r2, [r3, #4]
  hcomp5.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c08 <MX_COMP5_Init+0x44>)
 8001bd6:	2250      	movs	r2, #80	@ 0x50
 8001bd8:	609a      	str	r2, [r3, #8]
  hcomp5.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001bda:	4b0b      	ldr	r3, [pc, #44]	@ (8001c08 <MX_COMP5_Init+0x44>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	611a      	str	r2, [r3, #16]
  hcomp5.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001be0:	4b09      	ldr	r3, [pc, #36]	@ (8001c08 <MX_COMP5_Init+0x44>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	60da      	str	r2, [r3, #12]
  hcomp5.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001be6:	4b08      	ldr	r3, [pc, #32]	@ (8001c08 <MX_COMP5_Init+0x44>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	615a      	str	r2, [r3, #20]
  hcomp5.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001bec:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <MX_COMP5_Init+0x44>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp5) != HAL_OK)
 8001bf2:	4805      	ldr	r0, [pc, #20]	@ (8001c08 <MX_COMP5_Init+0x44>)
 8001bf4:	f005 f8c2 	bl	8006d7c <HAL_COMP_Init>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_COMP5_Init+0x3e>
  {
    Error_Handler();
 8001bfe:	f000 ffdd 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN COMP5_Init 2 */

  /* USER CODE END COMP5_Init 2 */

}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000644 	.word	0x20000644
 8001c0c:	40010210 	.word	0x40010210

08001c10 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08c      	sub	sp, #48	@ 0x30
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001c16:	463b      	mov	r3, r7
 8001c18:	2230      	movs	r2, #48	@ 0x30
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f012 ff2c 	bl	8014a7a <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001c22:	4b1e      	ldr	r3, [pc, #120]	@ (8001c9c <MX_DAC1_Init+0x8c>)
 8001c24:	4a1e      	ldr	r2, [pc, #120]	@ (8001ca0 <MX_DAC1_Init+0x90>)
 8001c26:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001c28:	481c      	ldr	r0, [pc, #112]	@ (8001c9c <MX_DAC1_Init+0x8c>)
 8001c2a:	f005 fb50 	bl	80072ce <HAL_DAC_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001c34:	f000 ffc2 	bl	8002bbc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001c40:	2300      	movs	r3, #0
 8001c42:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 8001c54:	2304      	movs	r3, #4
 8001c56:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001c5c:	463b      	mov	r3, r7
 8001c5e:	2200      	movs	r2, #0
 8001c60:	4619      	mov	r1, r3
 8001c62:	480e      	ldr	r0, [pc, #56]	@ (8001c9c <MX_DAC1_Init+0x8c>)
 8001c64:	f005 fbf0 	bl	8007448 <HAL_DAC_ConfigChannel>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001c6e:	f000 ffa5 	bl	8002bbc <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001c76:	2302      	movs	r3, #2
 8001c78:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001c7e:	463b      	mov	r3, r7
 8001c80:	2210      	movs	r2, #16
 8001c82:	4619      	mov	r1, r3
 8001c84:	4805      	ldr	r0, [pc, #20]	@ (8001c9c <MX_DAC1_Init+0x8c>)
 8001c86:	f005 fbdf 	bl	8007448 <HAL_DAC_ConfigChannel>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_DAC1_Init+0x84>
  {
    Error_Handler();
 8001c90:	f000 ff94 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001c94:	bf00      	nop
 8001c96:	3730      	adds	r7, #48	@ 0x30
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000668 	.word	0x20000668
 8001ca0:	50000800 	.word	0x50000800

08001ca4 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08c      	sub	sp, #48	@ 0x30
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001caa:	463b      	mov	r3, r7
 8001cac:	2230      	movs	r2, #48	@ 0x30
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f012 fee2 	bl	8014a7a <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8001cb6:	4b16      	ldr	r3, [pc, #88]	@ (8001d10 <MX_DAC2_Init+0x6c>)
 8001cb8:	4a16      	ldr	r2, [pc, #88]	@ (8001d14 <MX_DAC2_Init+0x70>)
 8001cba:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001cbc:	4814      	ldr	r0, [pc, #80]	@ (8001d10 <MX_DAC2_Init+0x6c>)
 8001cbe:	f005 fb06 	bl	80072ce <HAL_DAC_Init>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8001cc8:	f000 ff78 	bl	8002bbc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 8001ce8:	2304      	movs	r3, #4
 8001cea:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001cf0:	463b      	mov	r3, r7
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4806      	ldr	r0, [pc, #24]	@ (8001d10 <MX_DAC2_Init+0x6c>)
 8001cf8:	f005 fba6 	bl	8007448 <HAL_DAC_ConfigChannel>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8001d02:	f000 ff5b 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8001d06:	bf00      	nop
 8001d08:	3730      	adds	r7, #48	@ 0x30
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	2000067c 	.word	0x2000067c
 8001d14:	50000c00 	.word	0x50000c00

08001d18 <MX_DAC4_Init>:
  * @brief DAC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC4_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08c      	sub	sp, #48	@ 0x30
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC4_Init 0 */

  /* USER CODE END DAC4_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001d1e:	463b      	mov	r3, r7
 8001d20:	2230      	movs	r2, #48	@ 0x30
 8001d22:	2100      	movs	r1, #0
 8001d24:	4618      	mov	r0, r3
 8001d26:	f012 fea8 	bl	8014a7a <memset>

  /* USER CODE END DAC4_Init 1 */

  /** DAC Initialization
  */
  hdac4.Instance = DAC4;
 8001d2a:	4b16      	ldr	r3, [pc, #88]	@ (8001d84 <MX_DAC4_Init+0x6c>)
 8001d2c:	4a16      	ldr	r2, [pc, #88]	@ (8001d88 <MX_DAC4_Init+0x70>)
 8001d2e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac4) != HAL_OK)
 8001d30:	4814      	ldr	r0, [pc, #80]	@ (8001d84 <MX_DAC4_Init+0x6c>)
 8001d32:	f005 facc 	bl	80072ce <HAL_DAC_Init>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_DAC4_Init+0x28>
  {
    Error_Handler();
 8001d3c:	f000 ff3e 	bl	8002bbc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001d40:	2302      	movs	r3, #2
 8001d42:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001d50:	2302      	movs	r3, #2
 8001d52:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001d54:	2300      	movs	r3, #0
 8001d56:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001d60:	2300      	movs	r3, #0
 8001d62:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac4, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001d64:	463b      	mov	r3, r7
 8001d66:	2200      	movs	r2, #0
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4806      	ldr	r0, [pc, #24]	@ (8001d84 <MX_DAC4_Init+0x6c>)
 8001d6c:	f005 fb6c 	bl	8007448 <HAL_DAC_ConfigChannel>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_DAC4_Init+0x62>
  {
    Error_Handler();
 8001d76:	f000 ff21 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN DAC4_Init 2 */

  /* USER CODE END DAC4_Init 2 */

}
 8001d7a:	bf00      	nop
 8001d7c:	3730      	adds	r7, #48	@ 0x30
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000690 	.word	0x20000690
 8001d88:	50001400 	.word	0x50001400

08001d8c <MX_HRTIM1_Init>:
  * @brief HRTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM1_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b0ae      	sub	sp, #184	@ 0xb8
 8001d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8001d92:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 8001da0:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
 8001db0:	615a      	str	r2, [r3, #20]
 8001db2:	619a      	str	r2, [r3, #24]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8001db4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001db8:	2260      	movs	r2, #96	@ 0x60
 8001dba:	2100      	movs	r1, #0
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f012 fe5c 	bl	8014a7a <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8001dc2:	f107 0320 	add.w	r3, r7, #32
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]
 8001dcc:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8001dce:	463b      	mov	r3, r7
 8001dd0:	2220      	movs	r2, #32
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f012 fe50 	bl	8014a7a <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 8001dda:	4b5e      	ldr	r3, [pc, #376]	@ (8001f54 <MX_HRTIM1_Init+0x1c8>)
 8001ddc:	4a5e      	ldr	r2, [pc, #376]	@ (8001f58 <MX_HRTIM1_Init+0x1cc>)
 8001dde:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8001de0:	4b5c      	ldr	r3, [pc, #368]	@ (8001f54 <MX_HRTIM1_Init+0x1c8>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8001de6:	4b5b      	ldr	r3, [pc, #364]	@ (8001f54 <MX_HRTIM1_Init+0x1c8>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8001dec:	4859      	ldr	r0, [pc, #356]	@ (8001f54 <MX_HRTIM1_Init+0x1c8>)
 8001dee:	f006 f915 	bl	800801c <HAL_HRTIM_Init>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_HRTIM1_Init+0x70>
  {
    Error_Handler();
 8001df8:	f000 fee0 	bl	8002bbc <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 8001dfc:	210c      	movs	r1, #12
 8001dfe:	4855      	ldr	r0, [pc, #340]	@ (8001f54 <MX_HRTIM1_Init+0x1c8>)
 8001e00:	f006 f9dc 	bl	80081bc <HAL_HRTIM_DLLCalibrationStart>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_HRTIM1_Init+0x82>
  {
    Error_Handler();
 8001e0a:	f000 fed7 	bl	8002bbc <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8001e0e:	210a      	movs	r1, #10
 8001e10:	4850      	ldr	r0, [pc, #320]	@ (8001f54 <MX_HRTIM1_Init+0x1c8>)
 8001e12:	f006 fa2b 	bl	800826c <HAL_HRTIM_PollForDLLCalibration>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_HRTIM1_Init+0x94>
  {
    Error_Handler();
 8001e1c:	f000 fece 	bl	8002bbc <Error_Handler>
  }
  pTimeBaseCfg.Period = 96;
 8001e20:	2360      	movs	r3, #96	@ 0x60
 8001e22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8001e26:	2300      	movs	r3, #0
 8001e28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8001e32:	2308      	movs	r3, #8
 8001e34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 8001e38:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	2102      	movs	r1, #2
 8001e40:	4844      	ldr	r0, [pc, #272]	@ (8001f54 <MX_HRTIM1_Init+0x1c8>)
 8001e42:	f006 fa47 	bl	80082d4 <HAL_HRTIM_TimeBaseConfig>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_HRTIM1_Init+0xc4>
  {
    Error_Handler();
 8001e4c:	f000 feb6 	bl	8002bbc <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 8001e50:	2300      	movs	r3, #0
 8001e52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  pTimerCtl.GreaterCMP1 = HRTIM_TIMERGTCMP1_EQUAL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCtl) != HAL_OK)
 8001e62:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001e66:	461a      	mov	r2, r3
 8001e68:	2102      	movs	r1, #2
 8001e6a:	483a      	ldr	r0, [pc, #232]	@ (8001f54 <MX_HRTIM1_Init+0x1c8>)
 8001e6c:	f006 fae7 	bl	800843e <HAL_HRTIM_WaveformTimerControl>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_HRTIM1_Init+0xee>
  {
    Error_Handler();
 8001e76:	f000 fea1 	bl	8002bbc <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 8001e82:	2300      	movs	r3, #0
 8001e84:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 8001e86:	2300      	movs	r3, #0
 8001e88:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.DMASize = 0x1;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 8001e92:	2300      	movs	r3, #0
 8001e94:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8001e96:	2300      	movs	r3, #0
 8001e98:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 8001edc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	2102      	movs	r1, #2
 8001ee4:	481b      	ldr	r0, [pc, #108]	@ (8001f54 <MX_HRTIM1_Init+0x1c8>)
 8001ee6:	f006 fa1d 	bl	8008324 <HAL_HRTIM_WaveformTimerConfig>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_HRTIM1_Init+0x168>
  {
    Error_Handler();
 8001ef0:	f000 fe64 	bl	8002bbc <Error_Handler>
  }
  pCompareCfg.CompareValue = 48;
 8001ef4:	2330      	movs	r3, #48	@ 0x30
 8001ef6:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8001ef8:	f107 0320 	add.w	r3, r7, #32
 8001efc:	2201      	movs	r2, #1
 8001efe:	2102      	movs	r1, #2
 8001f00:	4814      	ldr	r0, [pc, #80]	@ (8001f54 <MX_HRTIM1_Init+0x1c8>)
 8001f02:	f006 facf 	bl	80084a4 <HAL_HRTIM_WaveformCompareConfig>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_HRTIM1_Init+0x184>
  {
    Error_Handler();
 8001f0c:	f000 fe56 	bl	8002bbc <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8001f10:	2300      	movs	r3, #0
 8001f12:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMPER;
 8001f14:	2304      	movs	r3, #4
 8001f16:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8001f18:	2308      	movs	r3, #8
 8001f1a:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 8001f30:	463b      	mov	r3, r7
 8001f32:	2210      	movs	r2, #16
 8001f34:	2102      	movs	r1, #2
 8001f36:	4807      	ldr	r0, [pc, #28]	@ (8001f54 <MX_HRTIM1_Init+0x1c8>)
 8001f38:	f006 fc22 	bl	8008780 <HAL_HRTIM_WaveformOutputConfig>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_HRTIM1_Init+0x1ba>
  {
    Error_Handler();
 8001f42:	f000 fe3b 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8001f46:	4803      	ldr	r0, [pc, #12]	@ (8001f54 <MX_HRTIM1_Init+0x1c8>)
 8001f48:	f001 fd0c 	bl	8003964 <HAL_HRTIM_MspPostInit>

}
 8001f4c:	bf00      	nop
 8001f4e:	37b8      	adds	r7, #184	@ 0xb8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	200006a4 	.word	0x200006a4
 8001f58:	40016800 	.word	0x40016800

08001f5c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001f60:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd0 <MX_I2C3_Init+0x74>)
 8001f62:	4a1c      	ldr	r2, [pc, #112]	@ (8001fd4 <MX_I2C3_Init+0x78>)
 8001f64:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10E32879;
 8001f66:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd0 <MX_I2C3_Init+0x74>)
 8001f68:	4a1b      	ldr	r2, [pc, #108]	@ (8001fd8 <MX_I2C3_Init+0x7c>)
 8001f6a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001f6c:	4b18      	ldr	r3, [pc, #96]	@ (8001fd0 <MX_I2C3_Init+0x74>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f72:	4b17      	ldr	r3, [pc, #92]	@ (8001fd0 <MX_I2C3_Init+0x74>)
 8001f74:	2201      	movs	r2, #1
 8001f76:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f78:	4b15      	ldr	r3, [pc, #84]	@ (8001fd0 <MX_I2C3_Init+0x74>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001f7e:	4b14      	ldr	r3, [pc, #80]	@ (8001fd0 <MX_I2C3_Init+0x74>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f84:	4b12      	ldr	r3, [pc, #72]	@ (8001fd0 <MX_I2C3_Init+0x74>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f8a:	4b11      	ldr	r3, [pc, #68]	@ (8001fd0 <MX_I2C3_Init+0x74>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f90:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd0 <MX_I2C3_Init+0x74>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001f96:	480e      	ldr	r0, [pc, #56]	@ (8001fd0 <MX_I2C3_Init+0x74>)
 8001f98:	f007 f8c4 	bl	8009124 <HAL_I2C_Init>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001fa2:	f000 fe0b 	bl	8002bbc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	4809      	ldr	r0, [pc, #36]	@ (8001fd0 <MX_I2C3_Init+0x74>)
 8001faa:	f007 fcdf 	bl	800996c <HAL_I2CEx_ConfigAnalogFilter>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001fb4:	f000 fe02 	bl	8002bbc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4805      	ldr	r0, [pc, #20]	@ (8001fd0 <MX_I2C3_Init+0x74>)
 8001fbc:	f007 fd21 	bl	8009a02 <HAL_I2CEx_ConfigDigitalFilter>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001fc6:	f000 fdf9 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	200007a0 	.word	0x200007a0
 8001fd4:	40007800 	.word	0x40007800
 8001fd8:	10e32879 	.word	0x10e32879

08001fdc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001fe0:	4b21      	ldr	r3, [pc, #132]	@ (8002068 <MX_LPUART1_UART_Init+0x8c>)
 8001fe2:	4a22      	ldr	r2, [pc, #136]	@ (800206c <MX_LPUART1_UART_Init+0x90>)
 8001fe4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 921600;
 8001fe6:	4b20      	ldr	r3, [pc, #128]	@ (8002068 <MX_LPUART1_UART_Init+0x8c>)
 8001fe8:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001fec:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fee:	4b1e      	ldr	r3, [pc, #120]	@ (8002068 <MX_LPUART1_UART_Init+0x8c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001ff4:	4b1c      	ldr	r3, [pc, #112]	@ (8002068 <MX_LPUART1_UART_Init+0x8c>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001ffa:	4b1b      	ldr	r3, [pc, #108]	@ (8002068 <MX_LPUART1_UART_Init+0x8c>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002000:	4b19      	ldr	r3, [pc, #100]	@ (8002068 <MX_LPUART1_UART_Init+0x8c>)
 8002002:	220c      	movs	r2, #12
 8002004:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002006:	4b18      	ldr	r3, [pc, #96]	@ (8002068 <MX_LPUART1_UART_Init+0x8c>)
 8002008:	2200      	movs	r2, #0
 800200a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800200c:	4b16      	ldr	r3, [pc, #88]	@ (8002068 <MX_LPUART1_UART_Init+0x8c>)
 800200e:	2200      	movs	r2, #0
 8002010:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002012:	4b15      	ldr	r3, [pc, #84]	@ (8002068 <MX_LPUART1_UART_Init+0x8c>)
 8002014:	2200      	movs	r2, #0
 8002016:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002018:	4b13      	ldr	r3, [pc, #76]	@ (8002068 <MX_LPUART1_UART_Init+0x8c>)
 800201a:	2200      	movs	r2, #0
 800201c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800201e:	4812      	ldr	r0, [pc, #72]	@ (8002068 <MX_LPUART1_UART_Init+0x8c>)
 8002020:	f00c fefe 	bl	800ee20 <HAL_UART_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800202a:	f000 fdc7 	bl	8002bbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800202e:	2100      	movs	r1, #0
 8002030:	480d      	ldr	r0, [pc, #52]	@ (8002068 <MX_LPUART1_UART_Init+0x8c>)
 8002032:	f00d fd27 	bl	800fa84 <HAL_UARTEx_SetTxFifoThreshold>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800203c:	f000 fdbe 	bl	8002bbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002040:	2100      	movs	r1, #0
 8002042:	4809      	ldr	r0, [pc, #36]	@ (8002068 <MX_LPUART1_UART_Init+0x8c>)
 8002044:	f00d fd5c 	bl	800fb00 <HAL_UARTEx_SetRxFifoThreshold>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800204e:	f000 fdb5 	bl	8002bbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002052:	4805      	ldr	r0, [pc, #20]	@ (8002068 <MX_LPUART1_UART_Init+0x8c>)
 8002054:	f00d fcdd 	bl	800fa12 <HAL_UARTEx_DisableFifoMode>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800205e:	f000 fdad 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	200007f4 	.word	0x200007f4
 800206c:	40008000 	.word	0x40008000

08002070 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8002074:	4b12      	ldr	r3, [pc, #72]	@ (80020c0 <MX_OPAMP1_Init+0x50>)
 8002076:	4a13      	ldr	r2, [pc, #76]	@ (80020c4 <MX_OPAMP1_Init+0x54>)
 8002078:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800207a:	4b11      	ldr	r3, [pc, #68]	@ (80020c0 <MX_OPAMP1_Init+0x50>)
 800207c:	2200      	movs	r2, #0
 800207e:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8002080:	4b0f      	ldr	r3, [pc, #60]	@ (80020c0 <MX_OPAMP1_Init+0x50>)
 8002082:	2240      	movs	r2, #64	@ 0x40
 8002084:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8002086:	4b0e      	ldr	r3, [pc, #56]	@ (80020c0 <MX_OPAMP1_Init+0x50>)
 8002088:	2208      	movs	r2, #8
 800208a:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 800208c:	4b0c      	ldr	r3, [pc, #48]	@ (80020c0 <MX_OPAMP1_Init+0x50>)
 800208e:	2201      	movs	r2, #1
 8002090:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8002092:	4b0b      	ldr	r3, [pc, #44]	@ (80020c0 <MX_OPAMP1_Init+0x50>)
 8002094:	2200      	movs	r2, #0
 8002096:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8002098:	4b09      	ldr	r3, [pc, #36]	@ (80020c0 <MX_OPAMP1_Init+0x50>)
 800209a:	2200      	movs	r2, #0
 800209c:	625a      	str	r2, [r3, #36]	@ 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 800209e:	4b08      	ldr	r3, [pc, #32]	@ (80020c0 <MX_OPAMP1_Init+0x50>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80020a4:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <MX_OPAMP1_Init+0x50>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80020aa:	4805      	ldr	r0, [pc, #20]	@ (80020c0 <MX_OPAMP1_Init+0x50>)
 80020ac:	f007 fcf6 	bl	8009a9c <HAL_OPAMP_Init>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_OPAMP1_Init+0x4a>
  {
    Error_Handler();
 80020b6:	f000 fd81 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000888 	.word	0x20000888
 80020c4:	40010300 	.word	0x40010300

080020c8 <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 80020cc:	4b0f      	ldr	r3, [pc, #60]	@ (800210c <MX_OPAMP2_Init+0x44>)
 80020ce:	4a10      	ldr	r2, [pc, #64]	@ (8002110 <MX_OPAMP2_Init+0x48>)
 80020d0:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80020d2:	4b0e      	ldr	r3, [pc, #56]	@ (800210c <MX_OPAMP2_Init+0x44>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_FOLLOWER_MODE;
 80020d8:	4b0c      	ldr	r3, [pc, #48]	@ (800210c <MX_OPAMP2_Init+0x44>)
 80020da:	2260      	movs	r2, #96	@ 0x60
 80020dc:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80020de:	4b0b      	ldr	r3, [pc, #44]	@ (800210c <MX_OPAMP2_Init+0x44>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = ENABLE;
 80020e4:	4b09      	ldr	r3, [pc, #36]	@ (800210c <MX_OPAMP2_Init+0x44>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80020ea:	4b08      	ldr	r3, [pc, #32]	@ (800210c <MX_OPAMP2_Init+0x44>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	619a      	str	r2, [r3, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80020f0:	4b06      	ldr	r3, [pc, #24]	@ (800210c <MX_OPAMP2_Init+0x44>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 80020f6:	4805      	ldr	r0, [pc, #20]	@ (800210c <MX_OPAMP2_Init+0x44>)
 80020f8:	f007 fcd0 	bl	8009a9c <HAL_OPAMP_Init>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_OPAMP2_Init+0x3e>
  {
    Error_Handler();
 8002102:	f000 fd5b 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	200008c4 	.word	0x200008c4
 8002110:	40010304 	.word	0x40010304

08002114 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8002118:	4b0f      	ldr	r3, [pc, #60]	@ (8002158 <MX_OPAMP3_Init+0x44>)
 800211a:	4a10      	ldr	r2, [pc, #64]	@ (800215c <MX_OPAMP3_Init+0x48>)
 800211c:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800211e:	4b0e      	ldr	r3, [pc, #56]	@ (8002158 <MX_OPAMP3_Init+0x44>)
 8002120:	2200      	movs	r2, #0
 8002122:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 8002124:	4b0c      	ldr	r3, [pc, #48]	@ (8002158 <MX_OPAMP3_Init+0x44>)
 8002126:	2260      	movs	r2, #96	@ 0x60
 8002128:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO1;
 800212a:	4b0b      	ldr	r3, [pc, #44]	@ (8002158 <MX_OPAMP3_Init+0x44>)
 800212c:	2204      	movs	r2, #4
 800212e:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8002130:	4b09      	ldr	r3, [pc, #36]	@ (8002158 <MX_OPAMP3_Init+0x44>)
 8002132:	2201      	movs	r2, #1
 8002134:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8002136:	4b08      	ldr	r3, [pc, #32]	@ (8002158 <MX_OPAMP3_Init+0x44>)
 8002138:	2200      	movs	r2, #0
 800213a:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800213c:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <MX_OPAMP3_Init+0x44>)
 800213e:	2200      	movs	r2, #0
 8002140:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8002142:	4805      	ldr	r0, [pc, #20]	@ (8002158 <MX_OPAMP3_Init+0x44>)
 8002144:	f007 fcaa 	bl	8009a9c <HAL_OPAMP_Init>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 800214e:	f000 fd35 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20000900 	.word	0x20000900
 800215c:	40010308 	.word	0x40010308

08002160 <MX_OPAMP5_Init>:
  * @brief OPAMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP5_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP5_Init 0 */

  /* USER CODE BEGIN OPAMP5_Init 1 */

  /* USER CODE END OPAMP5_Init 1 */
  hopamp5.Instance = OPAMP5;
 8002164:	4b0f      	ldr	r3, [pc, #60]	@ (80021a4 <MX_OPAMP5_Init+0x44>)
 8002166:	4a10      	ldr	r2, [pc, #64]	@ (80021a8 <MX_OPAMP5_Init+0x48>)
 8002168:	601a      	str	r2, [r3, #0]
  hopamp5.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800216a:	4b0e      	ldr	r3, [pc, #56]	@ (80021a4 <MX_OPAMP5_Init+0x44>)
 800216c:	2200      	movs	r2, #0
 800216e:	605a      	str	r2, [r3, #4]
  hopamp5.Init.Mode = OPAMP_FOLLOWER_MODE;
 8002170:	4b0c      	ldr	r3, [pc, #48]	@ (80021a4 <MX_OPAMP5_Init+0x44>)
 8002172:	2260      	movs	r2, #96	@ 0x60
 8002174:	609a      	str	r2, [r3, #8]
  hopamp5.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8002176:	4b0b      	ldr	r3, [pc, #44]	@ (80021a4 <MX_OPAMP5_Init+0x44>)
 8002178:	2208      	movs	r2, #8
 800217a:	611a      	str	r2, [r3, #16]
  hopamp5.Init.InternalOutput = ENABLE;
 800217c:	4b09      	ldr	r3, [pc, #36]	@ (80021a4 <MX_OPAMP5_Init+0x44>)
 800217e:	2201      	movs	r2, #1
 8002180:	751a      	strb	r2, [r3, #20]
  hopamp5.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8002182:	4b08      	ldr	r3, [pc, #32]	@ (80021a4 <MX_OPAMP5_Init+0x44>)
 8002184:	2200      	movs	r2, #0
 8002186:	619a      	str	r2, [r3, #24]
  hopamp5.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8002188:	4b06      	ldr	r3, [pc, #24]	@ (80021a4 <MX_OPAMP5_Init+0x44>)
 800218a:	2200      	movs	r2, #0
 800218c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp5) != HAL_OK)
 800218e:	4805      	ldr	r0, [pc, #20]	@ (80021a4 <MX_OPAMP5_Init+0x44>)
 8002190:	f007 fc84 	bl	8009a9c <HAL_OPAMP_Init>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_OPAMP5_Init+0x3e>
  {
    Error_Handler();
 800219a:	f000 fd0f 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP5_Init 2 */

  /* USER CODE END OPAMP5_Init 2 */

}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	2000093c 	.word	0x2000093c
 80021a8:	40010310 	.word	0x40010310

080021ac <MX_OPAMP6_Init>:
  * @brief OPAMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP6_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 80021b0:	4b12      	ldr	r3, [pc, #72]	@ (80021fc <MX_OPAMP6_Init+0x50>)
 80021b2:	4a13      	ldr	r2, [pc, #76]	@ (8002200 <MX_OPAMP6_Init+0x54>)
 80021b4:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80021b6:	4b11      	ldr	r3, [pc, #68]	@ (80021fc <MX_OPAMP6_Init+0x50>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_PGA_MODE;
 80021bc:	4b0f      	ldr	r3, [pc, #60]	@ (80021fc <MX_OPAMP6_Init+0x50>)
 80021be:	2240      	movs	r2, #64	@ 0x40
 80021c0:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 80021c2:	4b0e      	ldr	r3, [pc, #56]	@ (80021fc <MX_OPAMP6_Init+0x50>)
 80021c4:	2208      	movs	r2, #8
 80021c6:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = ENABLE;
 80021c8:	4b0c      	ldr	r3, [pc, #48]	@ (80021fc <MX_OPAMP6_Init+0x50>)
 80021ca:	2201      	movs	r2, #1
 80021cc:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80021ce:	4b0b      	ldr	r3, [pc, #44]	@ (80021fc <MX_OPAMP6_Init+0x50>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	619a      	str	r2, [r3, #24]
  hopamp6.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 80021d4:	4b09      	ldr	r3, [pc, #36]	@ (80021fc <MX_OPAMP6_Init+0x50>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hopamp6.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 80021da:	4b08      	ldr	r3, [pc, #32]	@ (80021fc <MX_OPAMP6_Init+0x50>)
 80021dc:	2200      	movs	r2, #0
 80021de:	629a      	str	r2, [r3, #40]	@ 0x28
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80021e0:	4b06      	ldr	r3, [pc, #24]	@ (80021fc <MX_OPAMP6_Init+0x50>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 80021e6:	4805      	ldr	r0, [pc, #20]	@ (80021fc <MX_OPAMP6_Init+0x50>)
 80021e8:	f007 fc58 	bl	8009a9c <HAL_OPAMP_Init>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_OPAMP6_Init+0x4a>
  {
    Error_Handler();
 80021f2:	f000 fce3 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000978 	.word	0x20000978
 8002200:	40010314 	.word	0x40010314

08002204 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002208:	4b1b      	ldr	r3, [pc, #108]	@ (8002278 <MX_SPI3_Init+0x74>)
 800220a:	4a1c      	ldr	r2, [pc, #112]	@ (800227c <MX_SPI3_Init+0x78>)
 800220c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800220e:	4b1a      	ldr	r3, [pc, #104]	@ (8002278 <MX_SPI3_Init+0x74>)
 8002210:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002214:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8002216:	4b18      	ldr	r3, [pc, #96]	@ (8002278 <MX_SPI3_Init+0x74>)
 8002218:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800221c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800221e:	4b16      	ldr	r3, [pc, #88]	@ (8002278 <MX_SPI3_Init+0x74>)
 8002220:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002224:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002226:	4b14      	ldr	r3, [pc, #80]	@ (8002278 <MX_SPI3_Init+0x74>)
 8002228:	2202      	movs	r2, #2
 800222a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800222c:	4b12      	ldr	r3, [pc, #72]	@ (8002278 <MX_SPI3_Init+0x74>)
 800222e:	2200      	movs	r2, #0
 8002230:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002232:	4b11      	ldr	r3, [pc, #68]	@ (8002278 <MX_SPI3_Init+0x74>)
 8002234:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002238:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800223a:	4b0f      	ldr	r3, [pc, #60]	@ (8002278 <MX_SPI3_Init+0x74>)
 800223c:	2210      	movs	r2, #16
 800223e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002240:	4b0d      	ldr	r3, [pc, #52]	@ (8002278 <MX_SPI3_Init+0x74>)
 8002242:	2200      	movs	r2, #0
 8002244:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002246:	4b0c      	ldr	r3, [pc, #48]	@ (8002278 <MX_SPI3_Init+0x74>)
 8002248:	2200      	movs	r2, #0
 800224a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800224c:	4b0a      	ldr	r3, [pc, #40]	@ (8002278 <MX_SPI3_Init+0x74>)
 800224e:	2200      	movs	r2, #0
 8002250:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002252:	4b09      	ldr	r3, [pc, #36]	@ (8002278 <MX_SPI3_Init+0x74>)
 8002254:	2207      	movs	r2, #7
 8002256:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002258:	4b07      	ldr	r3, [pc, #28]	@ (8002278 <MX_SPI3_Init+0x74>)
 800225a:	2200      	movs	r2, #0
 800225c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800225e:	4b06      	ldr	r3, [pc, #24]	@ (8002278 <MX_SPI3_Init+0x74>)
 8002260:	2208      	movs	r2, #8
 8002262:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002264:	4804      	ldr	r0, [pc, #16]	@ (8002278 <MX_SPI3_Init+0x74>)
 8002266:	f00a fa47 	bl	800c6f8 <HAL_SPI_Init>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_SPI3_Init+0x70>
  {
    Error_Handler();
 8002270:	f000 fca4 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}
 8002278:	200009b4 	.word	0x200009b4
 800227c:	40003c00 	.word	0x40003c00

08002280 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08c      	sub	sp, #48	@ 0x30
 8002284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002286:	f107 030c 	add.w	r3, r7, #12
 800228a:	2224      	movs	r2, #36	@ 0x24
 800228c:	2100      	movs	r1, #0
 800228e:	4618      	mov	r0, r3
 8002290:	f012 fbf3 	bl	8014a7a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002294:	463b      	mov	r3, r7
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]
 800229c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800229e:	4b23      	ldr	r3, [pc, #140]	@ (800232c <MX_TIM1_Init+0xac>)
 80022a0:	4a23      	ldr	r2, [pc, #140]	@ (8002330 <MX_TIM1_Init+0xb0>)
 80022a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80022a4:	4b21      	ldr	r3, [pc, #132]	@ (800232c <MX_TIM1_Init+0xac>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022aa:	4b20      	ldr	r3, [pc, #128]	@ (800232c <MX_TIM1_Init+0xac>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80022b0:	4b1e      	ldr	r3, [pc, #120]	@ (800232c <MX_TIM1_Init+0xac>)
 80022b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b8:	4b1c      	ldr	r3, [pc, #112]	@ (800232c <MX_TIM1_Init+0xac>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022be:	4b1b      	ldr	r3, [pc, #108]	@ (800232c <MX_TIM1_Init+0xac>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c4:	4b19      	ldr	r3, [pc, #100]	@ (800232c <MX_TIM1_Init+0xac>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80022ca:	2301      	movs	r3, #1
 80022cc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80022d2:	2301      	movs	r3, #1
 80022d4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80022da:	230f      	movs	r3, #15
 80022dc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80022de:	2300      	movs	r3, #0
 80022e0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80022e2:	2301      	movs	r3, #1
 80022e4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80022e6:	2300      	movs	r3, #0
 80022e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80022ea:	230f      	movs	r3, #15
 80022ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80022ee:	f107 030c 	add.w	r3, r7, #12
 80022f2:	4619      	mov	r1, r3
 80022f4:	480d      	ldr	r0, [pc, #52]	@ (800232c <MX_TIM1_Init+0xac>)
 80022f6:	f00b fb7b 	bl	800d9f0 <HAL_TIM_Encoder_Init>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002300:	f000 fc5c 	bl	8002bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002304:	2300      	movs	r3, #0
 8002306:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002308:	2300      	movs	r3, #0
 800230a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800230c:	2300      	movs	r3, #0
 800230e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002310:	463b      	mov	r3, r7
 8002312:	4619      	mov	r1, r3
 8002314:	4805      	ldr	r0, [pc, #20]	@ (800232c <MX_TIM1_Init+0xac>)
 8002316:	f00c fc59 	bl	800ebcc <HAL_TIMEx_MasterConfigSynchronization>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002320:	f000 fc4c 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002324:	bf00      	nop
 8002326:	3730      	adds	r7, #48	@ 0x30
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20000a78 	.word	0x20000a78
 8002330:	40012c00 	.word	0x40012c00

08002334 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08c      	sub	sp, #48	@ 0x30
 8002338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800233a:	f107 030c 	add.w	r3, r7, #12
 800233e:	2224      	movs	r2, #36	@ 0x24
 8002340:	2100      	movs	r1, #0
 8002342:	4618      	mov	r0, r3
 8002344:	f012 fb99 	bl	8014a7a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002348:	463b      	mov	r3, r7
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	605a      	str	r2, [r3, #4]
 8002350:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002352:	4b21      	ldr	r3, [pc, #132]	@ (80023d8 <MX_TIM3_Init+0xa4>)
 8002354:	4a21      	ldr	r2, [pc, #132]	@ (80023dc <MX_TIM3_Init+0xa8>)
 8002356:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002358:	4b1f      	ldr	r3, [pc, #124]	@ (80023d8 <MX_TIM3_Init+0xa4>)
 800235a:	2200      	movs	r2, #0
 800235c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800235e:	4b1e      	ldr	r3, [pc, #120]	@ (80023d8 <MX_TIM3_Init+0xa4>)
 8002360:	2200      	movs	r2, #0
 8002362:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002364:	4b1c      	ldr	r3, [pc, #112]	@ (80023d8 <MX_TIM3_Init+0xa4>)
 8002366:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800236a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800236c:	4b1a      	ldr	r3, [pc, #104]	@ (80023d8 <MX_TIM3_Init+0xa4>)
 800236e:	2200      	movs	r2, #0
 8002370:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002372:	4b19      	ldr	r3, [pc, #100]	@ (80023d8 <MX_TIM3_Init+0xa4>)
 8002374:	2200      	movs	r2, #0
 8002376:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002378:	2301      	movs	r3, #1
 800237a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800237c:	2300      	movs	r3, #0
 800237e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002380:	2301      	movs	r3, #1
 8002382:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002384:	2300      	movs	r3, #0
 8002386:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002388:	230f      	movs	r3, #15
 800238a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800238c:	2300      	movs	r3, #0
 800238e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002390:	2301      	movs	r3, #1
 8002392:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002394:	2300      	movs	r3, #0
 8002396:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8002398:	230f      	movs	r3, #15
 800239a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800239c:	f107 030c 	add.w	r3, r7, #12
 80023a0:	4619      	mov	r1, r3
 80023a2:	480d      	ldr	r0, [pc, #52]	@ (80023d8 <MX_TIM3_Init+0xa4>)
 80023a4:	f00b fb24 	bl	800d9f0 <HAL_TIM_Encoder_Init>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80023ae:	f000 fc05 	bl	8002bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023b2:	2300      	movs	r3, #0
 80023b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023b6:	2300      	movs	r3, #0
 80023b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023ba:	463b      	mov	r3, r7
 80023bc:	4619      	mov	r1, r3
 80023be:	4806      	ldr	r0, [pc, #24]	@ (80023d8 <MX_TIM3_Init+0xa4>)
 80023c0:	f00c fc04 	bl	800ebcc <HAL_TIMEx_MasterConfigSynchronization>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80023ca:	f000 fbf7 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80023ce:	bf00      	nop
 80023d0:	3730      	adds	r7, #48	@ 0x30
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20000ac4 	.word	0x20000ac4
 80023dc:	40000400 	.word	0x40000400

080023e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08c      	sub	sp, #48	@ 0x30
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80023e6:	f107 030c 	add.w	r3, r7, #12
 80023ea:	2224      	movs	r2, #36	@ 0x24
 80023ec:	2100      	movs	r1, #0
 80023ee:	4618      	mov	r0, r3
 80023f0:	f012 fb43 	bl	8014a7a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023f4:	463b      	mov	r3, r7
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	605a      	str	r2, [r3, #4]
 80023fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80023fe:	4b21      	ldr	r3, [pc, #132]	@ (8002484 <MX_TIM4_Init+0xa4>)
 8002400:	4a21      	ldr	r2, [pc, #132]	@ (8002488 <MX_TIM4_Init+0xa8>)
 8002402:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002404:	4b1f      	ldr	r3, [pc, #124]	@ (8002484 <MX_TIM4_Init+0xa4>)
 8002406:	2200      	movs	r2, #0
 8002408:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800240a:	4b1e      	ldr	r3, [pc, #120]	@ (8002484 <MX_TIM4_Init+0xa4>)
 800240c:	2200      	movs	r2, #0
 800240e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002410:	4b1c      	ldr	r3, [pc, #112]	@ (8002484 <MX_TIM4_Init+0xa4>)
 8002412:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002416:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002418:	4b1a      	ldr	r3, [pc, #104]	@ (8002484 <MX_TIM4_Init+0xa4>)
 800241a:	2200      	movs	r2, #0
 800241c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800241e:	4b19      	ldr	r3, [pc, #100]	@ (8002484 <MX_TIM4_Init+0xa4>)
 8002420:	2200      	movs	r2, #0
 8002422:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002424:	2301      	movs	r3, #1
 8002426:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002428:	2300      	movs	r3, #0
 800242a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800242c:	2301      	movs	r3, #1
 800242e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002430:	2300      	movs	r3, #0
 8002432:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002434:	230f      	movs	r3, #15
 8002436:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002438:	2300      	movs	r3, #0
 800243a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800243c:	2301      	movs	r3, #1
 800243e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002440:	2300      	movs	r3, #0
 8002442:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8002444:	230f      	movs	r3, #15
 8002446:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002448:	f107 030c 	add.w	r3, r7, #12
 800244c:	4619      	mov	r1, r3
 800244e:	480d      	ldr	r0, [pc, #52]	@ (8002484 <MX_TIM4_Init+0xa4>)
 8002450:	f00b face 	bl	800d9f0 <HAL_TIM_Encoder_Init>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800245a:	f000 fbaf 	bl	8002bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800245e:	2300      	movs	r3, #0
 8002460:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002462:	2300      	movs	r3, #0
 8002464:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002466:	463b      	mov	r3, r7
 8002468:	4619      	mov	r1, r3
 800246a:	4806      	ldr	r0, [pc, #24]	@ (8002484 <MX_TIM4_Init+0xa4>)
 800246c:	f00c fbae 	bl	800ebcc <HAL_TIMEx_MasterConfigSynchronization>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002476:	f000 fba1 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800247a:	bf00      	nop
 800247c:	3730      	adds	r7, #48	@ 0x30
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000b10 	.word	0x20000b10
 8002488:	40000800 	.word	0x40000800

0800248c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002492:	1d3b      	adds	r3, r7, #4
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800249c:	4b14      	ldr	r3, [pc, #80]	@ (80024f0 <MX_TIM6_Init+0x64>)
 800249e:	4a15      	ldr	r2, [pc, #84]	@ (80024f4 <MX_TIM6_Init+0x68>)
 80024a0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80024a2:	4b13      	ldr	r3, [pc, #76]	@ (80024f0 <MX_TIM6_Init+0x64>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a8:	4b11      	ldr	r3, [pc, #68]	@ (80024f0 <MX_TIM6_Init+0x64>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 149;
 80024ae:	4b10      	ldr	r3, [pc, #64]	@ (80024f0 <MX_TIM6_Init+0x64>)
 80024b0:	2295      	movs	r2, #149	@ 0x95
 80024b2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b4:	4b0e      	ldr	r3, [pc, #56]	@ (80024f0 <MX_TIM6_Init+0x64>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80024ba:	480d      	ldr	r0, [pc, #52]	@ (80024f0 <MX_TIM6_Init+0x64>)
 80024bc:	f00a fe30 	bl	800d120 <HAL_TIM_Base_Init>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80024c6:	f000 fb79 	bl	8002bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80024ca:	2320      	movs	r3, #32
 80024cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80024d2:	1d3b      	adds	r3, r7, #4
 80024d4:	4619      	mov	r1, r3
 80024d6:	4806      	ldr	r0, [pc, #24]	@ (80024f0 <MX_TIM6_Init+0x64>)
 80024d8:	f00c fb78 	bl	800ebcc <HAL_TIMEx_MasterConfigSynchronization>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80024e2:	f000 fb6b 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80024e6:	bf00      	nop
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000b5c 	.word	0x20000b5c
 80024f4:	40001000 	.word	0x40001000

080024f8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024fe:	1d3b      	adds	r3, r7, #4
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002508:	4b14      	ldr	r3, [pc, #80]	@ (800255c <MX_TIM7_Init+0x64>)
 800250a:	4a15      	ldr	r2, [pc, #84]	@ (8002560 <MX_TIM7_Init+0x68>)
 800250c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 180-1;
 800250e:	4b13      	ldr	r3, [pc, #76]	@ (800255c <MX_TIM7_Init+0x64>)
 8002510:	22b3      	movs	r2, #179	@ 0xb3
 8002512:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002514:	4b11      	ldr	r3, [pc, #68]	@ (800255c <MX_TIM7_Init+0x64>)
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 800251a:	4b10      	ldr	r3, [pc, #64]	@ (800255c <MX_TIM7_Init+0x64>)
 800251c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002520:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002522:	4b0e      	ldr	r3, [pc, #56]	@ (800255c <MX_TIM7_Init+0x64>)
 8002524:	2200      	movs	r2, #0
 8002526:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002528:	480c      	ldr	r0, [pc, #48]	@ (800255c <MX_TIM7_Init+0x64>)
 800252a:	f00a fdf9 	bl	800d120 <HAL_TIM_Base_Init>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002534:	f000 fb42 	bl	8002bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002538:	2320      	movs	r3, #32
 800253a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800253c:	2300      	movs	r3, #0
 800253e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002540:	1d3b      	adds	r3, r7, #4
 8002542:	4619      	mov	r1, r3
 8002544:	4805      	ldr	r0, [pc, #20]	@ (800255c <MX_TIM7_Init+0x64>)
 8002546:	f00c fb41 	bl	800ebcc <HAL_TIMEx_MasterConfigSynchronization>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002550:	f000 fb34 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002554:	bf00      	nop
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20000ba8 	.word	0x20000ba8
 8002560:	40001400 	.word	0x40001400

08002564 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b09c      	sub	sp, #112	@ 0x70
 8002568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800256a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	605a      	str	r2, [r3, #4]
 8002574:	609a      	str	r2, [r3, #8]
 8002576:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002578:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002584:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	60da      	str	r2, [r3, #12]
 8002592:	611a      	str	r2, [r3, #16]
 8002594:	615a      	str	r2, [r3, #20]
 8002596:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002598:	1d3b      	adds	r3, r7, #4
 800259a:	2234      	movs	r2, #52	@ 0x34
 800259c:	2100      	movs	r1, #0
 800259e:	4618      	mov	r0, r3
 80025a0:	f012 fa6b 	bl	8014a7a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80025a4:	4b4e      	ldr	r3, [pc, #312]	@ (80026e0 <MX_TIM8_Init+0x17c>)
 80025a6:	4a4f      	ldr	r2, [pc, #316]	@ (80026e4 <MX_TIM8_Init+0x180>)
 80025a8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80025aa:	4b4d      	ldr	r3, [pc, #308]	@ (80026e0 <MX_TIM8_Init+0x17c>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b0:	4b4b      	ldr	r3, [pc, #300]	@ (80026e0 <MX_TIM8_Init+0x17c>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 179;
 80025b6:	4b4a      	ldr	r3, [pc, #296]	@ (80026e0 <MX_TIM8_Init+0x17c>)
 80025b8:	22b3      	movs	r2, #179	@ 0xb3
 80025ba:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025bc:	4b48      	ldr	r3, [pc, #288]	@ (80026e0 <MX_TIM8_Init+0x17c>)
 80025be:	2200      	movs	r2, #0
 80025c0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80025c2:	4b47      	ldr	r3, [pc, #284]	@ (80026e0 <MX_TIM8_Init+0x17c>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025c8:	4b45      	ldr	r3, [pc, #276]	@ (80026e0 <MX_TIM8_Init+0x17c>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80025ce:	4844      	ldr	r0, [pc, #272]	@ (80026e0 <MX_TIM8_Init+0x17c>)
 80025d0:	f00a fda6 	bl	800d120 <HAL_TIM_Base_Init>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80025da:	f000 faef 	bl	8002bbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025e2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80025e4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80025e8:	4619      	mov	r1, r3
 80025ea:	483d      	ldr	r0, [pc, #244]	@ (80026e0 <MX_TIM8_Init+0x17c>)
 80025ec:	f00b fc48 	bl	800de80 <HAL_TIM_ConfigClockSource>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80025f6:	f000 fae1 	bl	8002bbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80025fa:	4839      	ldr	r0, [pc, #228]	@ (80026e0 <MX_TIM8_Init+0x17c>)
 80025fc:	f00a fe58 	bl	800d2b0 <HAL_TIM_PWM_Init>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002606:	f000 fad9 	bl	8002bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800260a:	2300      	movs	r3, #0
 800260c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800260e:	2300      	movs	r3, #0
 8002610:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002612:	2300      	movs	r3, #0
 8002614:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002616:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800261a:	4619      	mov	r1, r3
 800261c:	4830      	ldr	r0, [pc, #192]	@ (80026e0 <MX_TIM8_Init+0x17c>)
 800261e:	f00c fad5 	bl	800ebcc <HAL_TIMEx_MasterConfigSynchronization>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8002628:	f000 fac8 	bl	8002bbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800262c:	2370      	movs	r3, #112	@ 0x70
 800262e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 90;
 8002630:	235a      	movs	r3, #90	@ 0x5a
 8002632:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002634:	2302      	movs	r3, #2
 8002636:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002638:	2300      	movs	r3, #0
 800263a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800263c:	2300      	movs	r3, #0
 800263e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002640:	2300      	movs	r3, #0
 8002642:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002644:	2300      	movs	r3, #0
 8002646:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002648:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800264c:	2200      	movs	r2, #0
 800264e:	4619      	mov	r1, r3
 8002650:	4823      	ldr	r0, [pc, #140]	@ (80026e0 <MX_TIM8_Init+0x17c>)
 8002652:	f00b fb01 	bl	800dc58 <HAL_TIM_PWM_ConfigChannel>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 800265c:	f000 faae 	bl	8002bbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002660:	2360      	movs	r3, #96	@ 0x60
 8002662:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002664:	2300      	movs	r3, #0
 8002666:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8002668:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800266c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800266e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002672:	2208      	movs	r2, #8
 8002674:	4619      	mov	r1, r3
 8002676:	481a      	ldr	r0, [pc, #104]	@ (80026e0 <MX_TIM8_Init+0x17c>)
 8002678:	f00b faee 	bl	800dc58 <HAL_TIM_PWM_ConfigChannel>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_TIM8_Init+0x122>
  {
    Error_Handler();
 8002682:	f000 fa9b 	bl	8002bbc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002686:	2300      	movs	r3, #0
 8002688:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800268a:	2300      	movs	r3, #0
 800268c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002692:	2300      	movs	r3, #0
 8002694:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800269a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800269e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80026a4:	2300      	movs	r3, #0
 80026a6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80026a8:	2300      	movs	r3, #0
 80026aa:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80026ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80026b6:	2300      	movs	r3, #0
 80026b8:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026ba:	2300      	movs	r3, #0
 80026bc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80026be:	1d3b      	adds	r3, r7, #4
 80026c0:	4619      	mov	r1, r3
 80026c2:	4807      	ldr	r0, [pc, #28]	@ (80026e0 <MX_TIM8_Init+0x17c>)
 80026c4:	f00c fb18 	bl	800ecf8 <HAL_TIMEx_ConfigBreakDeadTime>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_TIM8_Init+0x16e>
  {
    Error_Handler();
 80026ce:	f000 fa75 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80026d2:	4803      	ldr	r0, [pc, #12]	@ (80026e0 <MX_TIM8_Init+0x17c>)
 80026d4:	f001 fd08 	bl	80040e8 <HAL_TIM_MspPostInit>

}
 80026d8:	bf00      	nop
 80026da:	3770      	adds	r7, #112	@ 0x70
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	20000bf4 	.word	0x20000bf4
 80026e4:	40013400 	.word	0x40013400

080026e8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b09c      	sub	sp, #112	@ 0x70
 80026ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ee:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	605a      	str	r2, [r3, #4]
 80026f8:	609a      	str	r2, [r3, #8]
 80026fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002708:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	611a      	str	r2, [r3, #16]
 8002718:	615a      	str	r2, [r3, #20]
 800271a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800271c:	1d3b      	adds	r3, r7, #4
 800271e:	2234      	movs	r2, #52	@ 0x34
 8002720:	2100      	movs	r1, #0
 8002722:	4618      	mov	r0, r3
 8002724:	f012 f9a9 	bl	8014a7a <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002728:	4b3f      	ldr	r3, [pc, #252]	@ (8002828 <MX_TIM15_Init+0x140>)
 800272a:	4a40      	ldr	r2, [pc, #256]	@ (800282c <MX_TIM15_Init+0x144>)
 800272c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 150;
 800272e:	4b3e      	ldr	r3, [pc, #248]	@ (8002828 <MX_TIM15_Init+0x140>)
 8002730:	2296      	movs	r2, #150	@ 0x96
 8002732:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002734:	4b3c      	ldr	r3, [pc, #240]	@ (8002828 <MX_TIM15_Init+0x140>)
 8002736:	2200      	movs	r2, #0
 8002738:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 800273a:	4b3b      	ldr	r3, [pc, #236]	@ (8002828 <MX_TIM15_Init+0x140>)
 800273c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002740:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002742:	4b39      	ldr	r3, [pc, #228]	@ (8002828 <MX_TIM15_Init+0x140>)
 8002744:	2200      	movs	r2, #0
 8002746:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002748:	4b37      	ldr	r3, [pc, #220]	@ (8002828 <MX_TIM15_Init+0x140>)
 800274a:	2200      	movs	r2, #0
 800274c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800274e:	4b36      	ldr	r3, [pc, #216]	@ (8002828 <MX_TIM15_Init+0x140>)
 8002750:	2200      	movs	r2, #0
 8002752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002754:	4834      	ldr	r0, [pc, #208]	@ (8002828 <MX_TIM15_Init+0x140>)
 8002756:	f00a fce3 	bl	800d120 <HAL_TIM_Base_Init>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8002760:	f000 fa2c 	bl	8002bbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002764:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002768:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800276a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800276e:	4619      	mov	r1, r3
 8002770:	482d      	ldr	r0, [pc, #180]	@ (8002828 <MX_TIM15_Init+0x140>)
 8002772:	f00b fb85 	bl	800de80 <HAL_TIM_ConfigClockSource>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 800277c:	f000 fa1e 	bl	8002bbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002780:	4829      	ldr	r0, [pc, #164]	@ (8002828 <MX_TIM15_Init+0x140>)
 8002782:	f00a fd95 	bl	800d2b0 <HAL_TIM_PWM_Init>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 800278c:	f000 fa16 	bl	8002bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002790:	2300      	movs	r3, #0
 8002792:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002794:	2300      	movs	r3, #0
 8002796:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002798:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800279c:	4619      	mov	r1, r3
 800279e:	4822      	ldr	r0, [pc, #136]	@ (8002828 <MX_TIM15_Init+0x140>)
 80027a0:	f00c fa14 	bl	800ebcc <HAL_TIMEx_MasterConfigSynchronization>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 80027aa:	f000 fa07 	bl	8002bbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027ae:	2360      	movs	r3, #96	@ 0x60
 80027b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 499;
 80027b2:	f240 13f3 	movw	r3, #499	@ 0x1f3
 80027b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027b8:	2300      	movs	r3, #0
 80027ba:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80027bc:	2300      	movs	r3, #0
 80027be:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027c0:	2300      	movs	r3, #0
 80027c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80027c4:	2300      	movs	r3, #0
 80027c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80027c8:	2300      	movs	r3, #0
 80027ca:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027cc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80027d0:	2200      	movs	r2, #0
 80027d2:	4619      	mov	r1, r3
 80027d4:	4814      	ldr	r0, [pc, #80]	@ (8002828 <MX_TIM15_Init+0x140>)
 80027d6:	f00b fa3f 	bl	800dc58 <HAL_TIM_PWM_ConfigChannel>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 80027e0:	f000 f9ec 	bl	8002bbc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80027e4:	2300      	movs	r3, #0
 80027e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80027e8:	2300      	movs	r3, #0
 80027ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80027f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80027fe:	2300      	movs	r3, #0
 8002800:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002802:	2300      	movs	r3, #0
 8002804:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002806:	1d3b      	adds	r3, r7, #4
 8002808:	4619      	mov	r1, r3
 800280a:	4807      	ldr	r0, [pc, #28]	@ (8002828 <MX_TIM15_Init+0x140>)
 800280c:	f00c fa74 	bl	800ecf8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8002816:	f000 f9d1 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800281a:	4803      	ldr	r0, [pc, #12]	@ (8002828 <MX_TIM15_Init+0x140>)
 800281c:	f001 fc64 	bl	80040e8 <HAL_TIM_MspPostInit>

}
 8002820:	bf00      	nop
 8002822:	3770      	adds	r7, #112	@ 0x70
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	20000c40 	.word	0x20000c40
 800282c:	40014000 	.word	0x40014000

08002830 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08c      	sub	sp, #48	@ 0x30
 8002834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002836:	f107 030c 	add.w	r3, r7, #12
 800283a:	2224      	movs	r2, #36	@ 0x24
 800283c:	2100      	movs	r1, #0
 800283e:	4618      	mov	r0, r3
 8002840:	f012 f91b 	bl	8014a7a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002844:	463b      	mov	r3, r7
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	605a      	str	r2, [r3, #4]
 800284c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 800284e:	4b23      	ldr	r3, [pc, #140]	@ (80028dc <MX_TIM20_Init+0xac>)
 8002850:	4a23      	ldr	r2, [pc, #140]	@ (80028e0 <MX_TIM20_Init+0xb0>)
 8002852:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8002854:	4b21      	ldr	r3, [pc, #132]	@ (80028dc <MX_TIM20_Init+0xac>)
 8002856:	2200      	movs	r2, #0
 8002858:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 800285a:	4b20      	ldr	r3, [pc, #128]	@ (80028dc <MX_TIM20_Init+0xac>)
 800285c:	2200      	movs	r2, #0
 800285e:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8002860:	4b1e      	ldr	r3, [pc, #120]	@ (80028dc <MX_TIM20_Init+0xac>)
 8002862:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002866:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002868:	4b1c      	ldr	r3, [pc, #112]	@ (80028dc <MX_TIM20_Init+0xac>)
 800286a:	2200      	movs	r2, #0
 800286c:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 800286e:	4b1b      	ldr	r3, [pc, #108]	@ (80028dc <MX_TIM20_Init+0xac>)
 8002870:	2200      	movs	r2, #0
 8002872:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002874:	4b19      	ldr	r3, [pc, #100]	@ (80028dc <MX_TIM20_Init+0xac>)
 8002876:	2200      	movs	r2, #0
 8002878:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800287a:	2301      	movs	r3, #1
 800287c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800287e:	2300      	movs	r3, #0
 8002880:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002882:	2301      	movs	r3, #1
 8002884:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002886:	2300      	movs	r3, #0
 8002888:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800288a:	230f      	movs	r3, #15
 800288c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800288e:	2300      	movs	r3, #0
 8002890:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002892:	2301      	movs	r3, #1
 8002894:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002896:	2300      	movs	r3, #0
 8002898:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800289a:	230f      	movs	r3, #15
 800289c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim20, &sConfig) != HAL_OK)
 800289e:	f107 030c 	add.w	r3, r7, #12
 80028a2:	4619      	mov	r1, r3
 80028a4:	480d      	ldr	r0, [pc, #52]	@ (80028dc <MX_TIM20_Init+0xac>)
 80028a6:	f00b f8a3 	bl	800d9f0 <HAL_TIM_Encoder_Init>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <MX_TIM20_Init+0x84>
  {
    Error_Handler();
 80028b0:	f000 f984 	bl	8002bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028b4:	2300      	movs	r3, #0
 80028b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80028b8:	2300      	movs	r3, #0
 80028ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028bc:	2300      	movs	r3, #0
 80028be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 80028c0:	463b      	mov	r3, r7
 80028c2:	4619      	mov	r1, r3
 80028c4:	4805      	ldr	r0, [pc, #20]	@ (80028dc <MX_TIM20_Init+0xac>)
 80028c6:	f00c f981 	bl	800ebcc <HAL_TIMEx_MasterConfigSynchronization>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_TIM20_Init+0xa4>
  {
    Error_Handler();
 80028d0:	f000 f974 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 80028d4:	bf00      	nop
 80028d6:	3730      	adds	r7, #48	@ 0x30
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	20000c8c 	.word	0x20000c8c
 80028e0:	40015000 	.word	0x40015000

080028e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80028ea:	4b26      	ldr	r3, [pc, #152]	@ (8002984 <MX_DMA_Init+0xa0>)
 80028ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028ee:	4a25      	ldr	r2, [pc, #148]	@ (8002984 <MX_DMA_Init+0xa0>)
 80028f0:	f043 0304 	orr.w	r3, r3, #4
 80028f4:	6493      	str	r3, [r2, #72]	@ 0x48
 80028f6:	4b23      	ldr	r3, [pc, #140]	@ (8002984 <MX_DMA_Init+0xa0>)
 80028f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028fa:	f003 0304 	and.w	r3, r3, #4
 80028fe:	607b      	str	r3, [r7, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002902:	4b20      	ldr	r3, [pc, #128]	@ (8002984 <MX_DMA_Init+0xa0>)
 8002904:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002906:	4a1f      	ldr	r2, [pc, #124]	@ (8002984 <MX_DMA_Init+0xa0>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	6493      	str	r3, [r2, #72]	@ 0x48
 800290e:	4b1d      	ldr	r3, [pc, #116]	@ (8002984 <MX_DMA_Init+0xa0>)
 8002910:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	603b      	str	r3, [r7, #0]
 8002918:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800291a:	2200      	movs	r2, #0
 800291c:	2100      	movs	r1, #0
 800291e:	200b      	movs	r0, #11
 8002920:	f004 fca1 	bl	8007266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002924:	200b      	movs	r0, #11
 8002926:	f004 fcb8 	bl	800729a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800292a:	2200      	movs	r2, #0
 800292c:	2100      	movs	r1, #0
 800292e:	200c      	movs	r0, #12
 8002930:	f004 fc99 	bl	8007266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002934:	200c      	movs	r0, #12
 8002936:	f004 fcb0 	bl	800729a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800293a:	2200      	movs	r2, #0
 800293c:	2100      	movs	r1, #0
 800293e:	200d      	movs	r0, #13
 8002940:	f004 fc91 	bl	8007266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002944:	200d      	movs	r0, #13
 8002946:	f004 fca8 	bl	800729a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800294a:	2200      	movs	r2, #0
 800294c:	2100      	movs	r1, #0
 800294e:	200e      	movs	r0, #14
 8002950:	f004 fc89 	bl	8007266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002954:	200e      	movs	r0, #14
 8002956:	f004 fca0 	bl	800729a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800295a:	2200      	movs	r2, #0
 800295c:	2100      	movs	r1, #0
 800295e:	200f      	movs	r0, #15
 8002960:	f004 fc81 	bl	8007266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002964:	200f      	movs	r0, #15
 8002966:	f004 fc98 	bl	800729a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800296a:	2200      	movs	r2, #0
 800296c:	2100      	movs	r1, #0
 800296e:	2010      	movs	r0, #16
 8002970:	f004 fc79 	bl	8007266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002974:	2010      	movs	r0, #16
 8002976:	f004 fc90 	bl	800729a <HAL_NVIC_EnableIRQ>

}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40021000 	.word	0x40021000

08002988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08a      	sub	sp, #40	@ 0x28
 800298c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298e:	f107 0314 	add.w	r3, r7, #20
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	605a      	str	r2, [r3, #4]
 8002998:	609a      	str	r2, [r3, #8]
 800299a:	60da      	str	r2, [r3, #12]
 800299c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800299e:	4b83      	ldr	r3, [pc, #524]	@ (8002bac <MX_GPIO_Init+0x224>)
 80029a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029a2:	4a82      	ldr	r2, [pc, #520]	@ (8002bac <MX_GPIO_Init+0x224>)
 80029a4:	f043 0304 	orr.w	r3, r3, #4
 80029a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029aa:	4b80      	ldr	r3, [pc, #512]	@ (8002bac <MX_GPIO_Init+0x224>)
 80029ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	613b      	str	r3, [r7, #16]
 80029b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80029b6:	4b7d      	ldr	r3, [pc, #500]	@ (8002bac <MX_GPIO_Init+0x224>)
 80029b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ba:	4a7c      	ldr	r2, [pc, #496]	@ (8002bac <MX_GPIO_Init+0x224>)
 80029bc:	f043 0320 	orr.w	r3, r3, #32
 80029c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029c2:	4b7a      	ldr	r3, [pc, #488]	@ (8002bac <MX_GPIO_Init+0x224>)
 80029c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c6:	f003 0320 	and.w	r3, r3, #32
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ce:	4b77      	ldr	r3, [pc, #476]	@ (8002bac <MX_GPIO_Init+0x224>)
 80029d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029d2:	4a76      	ldr	r2, [pc, #472]	@ (8002bac <MX_GPIO_Init+0x224>)
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029da:	4b74      	ldr	r3, [pc, #464]	@ (8002bac <MX_GPIO_Init+0x224>)
 80029dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	60bb      	str	r3, [r7, #8]
 80029e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e6:	4b71      	ldr	r3, [pc, #452]	@ (8002bac <MX_GPIO_Init+0x224>)
 80029e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ea:	4a70      	ldr	r2, [pc, #448]	@ (8002bac <MX_GPIO_Init+0x224>)
 80029ec:	f043 0302 	orr.w	r3, r3, #2
 80029f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029f2:	4b6e      	ldr	r3, [pc, #440]	@ (8002bac <MX_GPIO_Init+0x224>)
 80029f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	607b      	str	r3, [r7, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029fe:	4b6b      	ldr	r3, [pc, #428]	@ (8002bac <MX_GPIO_Init+0x224>)
 8002a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a02:	4a6a      	ldr	r2, [pc, #424]	@ (8002bac <MX_GPIO_Init+0x224>)
 8002a04:	f043 0308 	orr.w	r3, r3, #8
 8002a08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a0a:	4b68      	ldr	r3, [pc, #416]	@ (8002bac <MX_GPIO_Init+0x224>)
 8002a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	603b      	str	r3, [r7, #0]
 8002a14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AC_DC_CH2_Pin|CD_CH2_A_Pin|CD_CH2_B_Pin|CD_CH1_A_Pin
 8002a16:	2200      	movs	r2, #0
 8002a18:	f64e 0120 	movw	r1, #59424	@ 0xe820
 8002a1c:	4864      	ldr	r0, [pc, #400]	@ (8002bb0 <MX_GPIO_Init+0x228>)
 8002a1e:	f005 fac1 	bl	8007fa4 <HAL_GPIO_WritePin>
                          |ST7789_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CD_CH2_C_Pin|AC_DC_CH1_Pin|CD_CH1_C_Pin, GPIO_PIN_RESET);
 8002a22:	2200      	movs	r2, #0
 8002a24:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8002a28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a2c:	f005 faba 	bl	8007fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CD_CH1_B_Pin|TLC5952_SCLK_Pin|TLC5952_LAT_Pin|TLC5952_SIN_Pin, GPIO_PIN_RESET);
 8002a30:	2200      	movs	r2, #0
 8002a32:	f248 0138 	movw	r1, #32824	@ 0x8038
 8002a36:	485f      	ldr	r0, [pc, #380]	@ (8002bb4 <MX_GPIO_Init+0x22c>)
 8002a38:	f005 fab4 	bl	8007fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FT6336_RST_GPIO_Port, FT6336_RST_Pin, GPIO_PIN_RESET);
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	2104      	movs	r1, #4
 8002a40:	485d      	ldr	r0, [pc, #372]	@ (8002bb8 <MX_GPIO_Init+0x230>)
 8002a42:	f005 faaf 	bl	8007fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AC_DC_CH2_Pin CD_CH2_A_Pin CD_CH2_B_Pin CD_CH1_A_Pin
                           ST7789_DC_Pin */
  GPIO_InitStruct.Pin = AC_DC_CH2_Pin|CD_CH2_A_Pin|CD_CH2_B_Pin|CD_CH1_A_Pin
 8002a46:	f64e 0320 	movw	r3, #59424	@ 0xe820
 8002a4a:	617b      	str	r3, [r7, #20]
                          |ST7789_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a50:	2300      	movs	r3, #0
 8002a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a54:	2300      	movs	r3, #0
 8002a56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a58:	f107 0314 	add.w	r3, r7, #20
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4854      	ldr	r0, [pc, #336]	@ (8002bb0 <MX_GPIO_Init+0x228>)
 8002a60:	f005 f91e 	bl	8007ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a64:	2301      	movs	r3, #1
 8002a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a70:	2300      	movs	r3, #0
 8002a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 8002a74:	230e      	movs	r3, #14
 8002a76:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a78:	f107 0314 	add.w	r3, r7, #20
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a82:	f005 f90d 	bl	8007ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CD_CH2_C_Pin AC_DC_CH1_Pin CD_CH1_C_Pin */
  GPIO_InitStruct.Pin = CD_CH2_C_Pin|AC_DC_CH1_Pin|CD_CH1_C_Pin;
 8002a86:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8002a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a94:	2300      	movs	r3, #0
 8002a96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a98:	f107 0314 	add.w	r3, r7, #20
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002aa2:	f005 f8fd 	bl	8007ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10;
 8002aa6:	f240 430c 	movw	r3, #1036	@ 0x40c
 8002aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002aac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab6:	f107 0314 	add.w	r3, r7, #20
 8002aba:	4619      	mov	r1, r3
 8002abc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ac0:	f005 f8ee 	bl	8007ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002ac4:	2310      	movs	r3, #16
 8002ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ac8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002acc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ad2:	f107 0314 	add.w	r3, r7, #20
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4835      	ldr	r0, [pc, #212]	@ (8002bb0 <MX_GPIO_Init+0x228>)
 8002ada:	f005 f8e1 	bl	8007ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8;
 8002ade:	f240 1303 	movw	r3, #259	@ 0x103
 8002ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ae4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aee:	f107 0314 	add.w	r3, r7, #20
 8002af2:	4619      	mov	r1, r3
 8002af4:	482f      	ldr	r0, [pc, #188]	@ (8002bb4 <MX_GPIO_Init+0x22c>)
 8002af6:	f005 f8d3 	bl	8007ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CD_CH1_B_Pin TLC5952_SCLK_Pin TLC5952_LAT_Pin TLC5952_SIN_Pin */
  GPIO_InitStruct.Pin = CD_CH1_B_Pin|TLC5952_SCLK_Pin|TLC5952_LAT_Pin|TLC5952_SIN_Pin;
 8002afa:	f248 0338 	movw	r3, #32824	@ 0x8038
 8002afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b00:	2301      	movs	r3, #1
 8002b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b0c:	f107 0314 	add.w	r3, r7, #20
 8002b10:	4619      	mov	r1, r3
 8002b12:	4828      	ldr	r0, [pc, #160]	@ (8002bb4 <MX_GPIO_Init+0x22c>)
 8002b14:	f005 f8c4 	bl	8007ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : FT6336_RST_Pin */
  GPIO_InitStruct.Pin = FT6336_RST_Pin;
 8002b18:	2304      	movs	r3, #4
 8002b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b24:	2300      	movs	r3, #0
 8002b26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FT6336_RST_GPIO_Port, &GPIO_InitStruct);
 8002b28:	f107 0314 	add.w	r3, r7, #20
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4822      	ldr	r0, [pc, #136]	@ (8002bb8 <MX_GPIO_Init+0x230>)
 8002b30:	f005 f8b6 	bl	8007ca0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002b34:	2200      	movs	r2, #0
 8002b36:	2100      	movs	r1, #0
 8002b38:	2006      	movs	r0, #6
 8002b3a:	f004 fb94 	bl	8007266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002b3e:	2006      	movs	r0, #6
 8002b40:	f004 fbab 	bl	800729a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002b44:	2200      	movs	r2, #0
 8002b46:	2100      	movs	r1, #0
 8002b48:	2007      	movs	r0, #7
 8002b4a:	f004 fb8c 	bl	8007266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002b4e:	2007      	movs	r0, #7
 8002b50:	f004 fba3 	bl	800729a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002b54:	2200      	movs	r2, #0
 8002b56:	2100      	movs	r1, #0
 8002b58:	2008      	movs	r0, #8
 8002b5a:	f004 fb84 	bl	8007266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002b5e:	2008      	movs	r0, #8
 8002b60:	f004 fb9b 	bl	800729a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002b64:	2200      	movs	r2, #0
 8002b66:	2100      	movs	r1, #0
 8002b68:	2009      	movs	r0, #9
 8002b6a:	f004 fb7c 	bl	8007266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002b6e:	2009      	movs	r0, #9
 8002b70:	f004 fb93 	bl	800729a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002b74:	2200      	movs	r2, #0
 8002b76:	2100      	movs	r1, #0
 8002b78:	200a      	movs	r0, #10
 8002b7a:	f004 fb74 	bl	8007266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002b7e:	200a      	movs	r0, #10
 8002b80:	f004 fb8b 	bl	800729a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002b84:	2200      	movs	r2, #0
 8002b86:	2100      	movs	r1, #0
 8002b88:	2017      	movs	r0, #23
 8002b8a:	f004 fb6c 	bl	8007266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002b8e:	2017      	movs	r0, #23
 8002b90:	f004 fb83 	bl	800729a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002b94:	2200      	movs	r2, #0
 8002b96:	2100      	movs	r1, #0
 8002b98:	2028      	movs	r0, #40	@ 0x28
 8002b9a:	f004 fb64 	bl	8007266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b9e:	2028      	movs	r0, #40	@ 0x28
 8002ba0:	f004 fb7b 	bl	800729a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ba4:	bf00      	nop
 8002ba6:	3728      	adds	r7, #40	@ 0x28
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	48000800 	.word	0x48000800
 8002bb4:	48000400 	.word	0x48000400
 8002bb8:	48000c00 	.word	0x48000c00

08002bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bc0:	b672      	cpsid	i
}
 8002bc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bc4:	bf00      	nop
 8002bc6:	e7fd      	b.n	8002bc4 <Error_Handler+0x8>

08002bc8 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8002bd2:	bf00      	nop
	ST7789_DC_Clr();
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002bda:	4807      	ldr	r0, [pc, #28]	@ (8002bf8 <ST7789_WriteCommand+0x30>)
 8002bdc:	f005 f9e2 	bl	8007fa4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8002be0:	1df9      	adds	r1, r7, #7
 8002be2:	f04f 33ff 	mov.w	r3, #4294967295
 8002be6:	2201      	movs	r2, #1
 8002be8:	4804      	ldr	r0, [pc, #16]	@ (8002bfc <ST7789_WriteCommand+0x34>)
 8002bea:	f009 fe30 	bl	800c84e <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8002bee:	bf00      	nop
}
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	48000800 	.word	0x48000800
 8002bfc:	200009b4 	.word	0x200009b4

08002c00 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8002c0a:	bf00      	nop
	ST7789_DC_Set();
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002c12:	481b      	ldr	r0, [pc, #108]	@ (8002c80 <ST7789_WriteData+0x80>)
 8002c14:	f005 f9c6 	bl	8007fa4 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8002c18:	e02a      	b.n	8002c70 <ST7789_WriteData+0x70>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c20:	4293      	cmp	r3, r2
 8002c22:	bf28      	it	cs
 8002c24:	4613      	movcs	r3, r2
 8002c26:	81fb      	strh	r3, [r7, #14]
		#ifdef USE_DMA
			if (DMA_MIN_SIZE <= buff_size)
 8002c28:	4b16      	ldr	r3, [pc, #88]	@ (8002c84 <ST7789_WriteData+0x84>)
 8002c2a:	881b      	ldrh	r3, [r3, #0]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d30e      	bcc.n	8002c52 <ST7789_WriteData+0x52>
			{
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 8002c34:	89fb      	ldrh	r3, [r7, #14]
 8002c36:	461a      	mov	r2, r3
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	4813      	ldr	r0, [pc, #76]	@ (8002c88 <ST7789_WriteData+0x88>)
 8002c3c:	f009 ff7e 	bl	800cb3c <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 8002c40:	bf00      	nop
 8002c42:	4b11      	ldr	r3, [pc, #68]	@ (8002c88 <ST7789_WriteData+0x88>)
 8002c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c46:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d1f8      	bne.n	8002c42 <ST7789_WriteData+0x42>
 8002c50:	e006      	b.n	8002c60 <ST7789_WriteData+0x60>
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8002c52:	89fa      	ldrh	r2, [r7, #14]
 8002c54:	f04f 33ff 	mov.w	r3, #4294967295
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	480b      	ldr	r0, [pc, #44]	@ (8002c88 <ST7789_WriteData+0x88>)
 8002c5c:	f009 fdf7 	bl	800c84e <HAL_SPI_Transmit>
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#endif
		buff += chunk_size;
 8002c60:	89fb      	ldrh	r3, [r7, #14]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	4413      	add	r3, r2
 8002c66:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8002c68:	89fb      	ldrh	r3, [r7, #14]
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1d1      	bne.n	8002c1a <ST7789_WriteData+0x1a>
	}

	ST7789_UnSelect();
 8002c76:	bf00      	nop
}
 8002c78:	bf00      	nop
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	48000800 	.word	0x48000800
 8002c84:	2000003e 	.word	0x2000003e
 8002c88:	200009b4 	.word	0x200009b4

08002c8c <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8002c96:	bf00      	nop
	ST7789_DC_Set();
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002c9e:	4807      	ldr	r0, [pc, #28]	@ (8002cbc <ST7789_WriteSmallData+0x30>)
 8002ca0:	f005 f980 	bl	8007fa4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8002ca4:	1df9      	adds	r1, r7, #7
 8002ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8002caa:	2201      	movs	r2, #1
 8002cac:	4804      	ldr	r0, [pc, #16]	@ (8002cc0 <ST7789_WriteSmallData+0x34>)
 8002cae:	f009 fdce 	bl	800c84e <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8002cb2:	bf00      	nop
}
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	48000800 	.word	0x48000800
 8002cc0:	200009b4 	.word	0x200009b4

08002cc4 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8002cce:	2036      	movs	r0, #54	@ 0x36
 8002cd0:	f7ff ff7a 	bl	8002bc8 <ST7789_WriteCommand>
	switch (m) {
 8002cd4:	79fb      	ldrb	r3, [r7, #7]
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	d81a      	bhi.n	8002d10 <ST7789_SetRotation+0x4c>
 8002cda:	a201      	add	r2, pc, #4	@ (adr r2, 8002ce0 <ST7789_SetRotation+0x1c>)
 8002cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce0:	08002cf1 	.word	0x08002cf1
 8002ce4:	08002cf9 	.word	0x08002cf9
 8002ce8:	08002d01 	.word	0x08002d01
 8002cec:	08002d09 	.word	0x08002d09
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8002cf0:	20c0      	movs	r0, #192	@ 0xc0
 8002cf2:	f7ff ffcb 	bl	8002c8c <ST7789_WriteSmallData>
		break;
 8002cf6:	e00c      	b.n	8002d12 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8002cf8:	20a0      	movs	r0, #160	@ 0xa0
 8002cfa:	f7ff ffc7 	bl	8002c8c <ST7789_WriteSmallData>
		break;
 8002cfe:	e008      	b.n	8002d12 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8002d00:	2000      	movs	r0, #0
 8002d02:	f7ff ffc3 	bl	8002c8c <ST7789_WriteSmallData>
		break;
 8002d06:	e004      	b.n	8002d12 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8002d08:	2060      	movs	r0, #96	@ 0x60
 8002d0a:	f7ff ffbf 	bl	8002c8c <ST7789_WriteSmallData>
		break;
 8002d0e:	e000      	b.n	8002d12 <ST7789_SetRotation+0x4e>
	default:
		break;
 8002d10:	bf00      	nop
	}
}
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop

08002d1c <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8002d1c:	b590      	push	{r4, r7, lr}
 8002d1e:	b087      	sub	sp, #28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4604      	mov	r4, r0
 8002d24:	4608      	mov	r0, r1
 8002d26:	4611      	mov	r1, r2
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4623      	mov	r3, r4
 8002d2c:	80fb      	strh	r3, [r7, #6]
 8002d2e:	4603      	mov	r3, r0
 8002d30:	80bb      	strh	r3, [r7, #4]
 8002d32:	460b      	mov	r3, r1
 8002d34:	807b      	strh	r3, [r7, #2]
 8002d36:	4613      	mov	r3, r2
 8002d38:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8002d3a:	bf00      	nop
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8002d3c:	88fb      	ldrh	r3, [r7, #6]
 8002d3e:	82fb      	strh	r3, [r7, #22]
 8002d40:	887b      	ldrh	r3, [r7, #2]
 8002d42:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8002d44:	88bb      	ldrh	r3, [r7, #4]
 8002d46:	827b      	strh	r3, [r7, #18]
 8002d48:	883b      	ldrh	r3, [r7, #0]
 8002d4a:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8002d4c:	202a      	movs	r0, #42	@ 0x2a
 8002d4e:	f7ff ff3b 	bl	8002bc8 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8002d52:	8afb      	ldrh	r3, [r7, #22]
 8002d54:	0a1b      	lsrs	r3, r3, #8
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	733b      	strb	r3, [r7, #12]
 8002d5c:	8afb      	ldrh	r3, [r7, #22]
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	737b      	strb	r3, [r7, #13]
 8002d62:	8abb      	ldrh	r3, [r7, #20]
 8002d64:	0a1b      	lsrs	r3, r3, #8
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	73bb      	strb	r3, [r7, #14]
 8002d6c:	8abb      	ldrh	r3, [r7, #20]
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8002d72:	f107 030c 	add.w	r3, r7, #12
 8002d76:	2104      	movs	r1, #4
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff ff41 	bl	8002c00 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8002d7e:	202b      	movs	r0, #43	@ 0x2b
 8002d80:	f7ff ff22 	bl	8002bc8 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8002d84:	8a7b      	ldrh	r3, [r7, #18]
 8002d86:	0a1b      	lsrs	r3, r3, #8
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	723b      	strb	r3, [r7, #8]
 8002d8e:	8a7b      	ldrh	r3, [r7, #18]
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	727b      	strb	r3, [r7, #9]
 8002d94:	8a3b      	ldrh	r3, [r7, #16]
 8002d96:	0a1b      	lsrs	r3, r3, #8
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	72bb      	strb	r3, [r7, #10]
 8002d9e:	8a3b      	ldrh	r3, [r7, #16]
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8002da4:	f107 0308 	add.w	r3, r7, #8
 8002da8:	2104      	movs	r1, #4
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff ff28 	bl	8002c00 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8002db0:	202c      	movs	r0, #44	@ 0x2c
 8002db2:	f7ff ff09 	bl	8002bc8 <ST7789_WriteCommand>
	ST7789_UnSelect();
 8002db6:	bf00      	nop
}
 8002db8:	bf00      	nop
 8002dba:	371c      	adds	r7, #28
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd90      	pop	{r4, r7, pc}

08002dc0 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8002dc0:	b590      	push	{r4, r7, lr}
 8002dc2:	b08b      	sub	sp, #44	@ 0x2c
 8002dc4:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
 8002dc6:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8002dca:	2100      	movs	r1, #0
 8002dcc:	484a      	ldr	r0, [pc, #296]	@ (8002ef8 <ST7789_Init+0x138>)
 8002dce:	f011 fe54 	bl	8014a7a <memset>
	#endif
	HAL_Delay(10);
 8002dd2:	200a      	movs	r0, #10
 8002dd4:	f001 fd36 	bl	8004844 <HAL_Delay>
    ST7789_RST_Clr();
 8002dd8:	2200      	movs	r2, #0
 8002dda:	2104      	movs	r1, #4
 8002ddc:	4847      	ldr	r0, [pc, #284]	@ (8002efc <ST7789_Init+0x13c>)
 8002dde:	f005 f8e1 	bl	8007fa4 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8002de2:	200a      	movs	r0, #10
 8002de4:	f001 fd2e 	bl	8004844 <HAL_Delay>
    ST7789_RST_Set();
 8002de8:	2201      	movs	r2, #1
 8002dea:	2104      	movs	r1, #4
 8002dec:	4843      	ldr	r0, [pc, #268]	@ (8002efc <ST7789_Init+0x13c>)
 8002dee:	f005 f8d9 	bl	8007fa4 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8002df2:	2014      	movs	r0, #20
 8002df4:	f001 fd26 	bl	8004844 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8002df8:	203a      	movs	r0, #58	@ 0x3a
 8002dfa:	f7ff fee5 	bl	8002bc8 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8002dfe:	2055      	movs	r0, #85	@ 0x55
 8002e00:	f7ff ff44 	bl	8002c8c <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8002e04:	20b2      	movs	r0, #178	@ 0xb2
 8002e06:	f7ff fedf 	bl	8002bc8 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8002e0a:	4a3d      	ldr	r2, [pc, #244]	@ (8002f00 <ST7789_Init+0x140>)
 8002e0c:	f107 0320 	add.w	r3, r7, #32
 8002e10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e14:	6018      	str	r0, [r3, #0]
 8002e16:	3304      	adds	r3, #4
 8002e18:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8002e1a:	f107 0320 	add.w	r3, r7, #32
 8002e1e:	2105      	movs	r1, #5
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff feed 	bl	8002c00 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8002e26:	2003      	movs	r0, #3
 8002e28:	f7ff ff4c 	bl	8002cc4 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8002e2c:	20b7      	movs	r0, #183	@ 0xb7
 8002e2e:	f7ff fecb 	bl	8002bc8 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8002e32:	2035      	movs	r0, #53	@ 0x35
 8002e34:	f7ff ff2a 	bl	8002c8c <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8002e38:	20bb      	movs	r0, #187	@ 0xbb
 8002e3a:	f7ff fec5 	bl	8002bc8 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8002e3e:	2019      	movs	r0, #25
 8002e40:	f7ff ff24 	bl	8002c8c <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8002e44:	20c0      	movs	r0, #192	@ 0xc0
 8002e46:	f7ff febf 	bl	8002bc8 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 8002e4a:	202c      	movs	r0, #44	@ 0x2c
 8002e4c:	f7ff ff1e 	bl	8002c8c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8002e50:	20c2      	movs	r0, #194	@ 0xc2
 8002e52:	f7ff feb9 	bl	8002bc8 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8002e56:	2001      	movs	r0, #1
 8002e58:	f7ff ff18 	bl	8002c8c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8002e5c:	20c3      	movs	r0, #195	@ 0xc3
 8002e5e:	f7ff feb3 	bl	8002bc8 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8002e62:	2012      	movs	r0, #18
 8002e64:	f7ff ff12 	bl	8002c8c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8002e68:	20c4      	movs	r0, #196	@ 0xc4
 8002e6a:	f7ff fead 	bl	8002bc8 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8002e6e:	2020      	movs	r0, #32
 8002e70:	f7ff ff0c 	bl	8002c8c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8002e74:	20c6      	movs	r0, #198	@ 0xc6
 8002e76:	f7ff fea7 	bl	8002bc8 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8002e7a:	200f      	movs	r0, #15
 8002e7c:	f7ff ff06 	bl	8002c8c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8002e80:	20d0      	movs	r0, #208	@ 0xd0
 8002e82:	f7ff fea1 	bl	8002bc8 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8002e86:	20a4      	movs	r0, #164	@ 0xa4
 8002e88:	f7ff ff00 	bl	8002c8c <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8002e8c:	20a1      	movs	r0, #161	@ 0xa1
 8002e8e:	f7ff fefd 	bl	8002c8c <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8002e92:	20e0      	movs	r0, #224	@ 0xe0
 8002e94:	f7ff fe98 	bl	8002bc8 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8002e98:	4b1a      	ldr	r3, [pc, #104]	@ (8002f04 <ST7789_Init+0x144>)
 8002e9a:	f107 0410 	add.w	r4, r7, #16
 8002e9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ea0:	c407      	stmia	r4!, {r0, r1, r2}
 8002ea2:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8002ea4:	f107 0310 	add.w	r3, r7, #16
 8002ea8:	210e      	movs	r1, #14
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff fea8 	bl	8002c00 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8002eb0:	20e1      	movs	r0, #225	@ 0xe1
 8002eb2:	f7ff fe89 	bl	8002bc8 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8002eb6:	4b14      	ldr	r3, [pc, #80]	@ (8002f08 <ST7789_Init+0x148>)
 8002eb8:	463c      	mov	r4, r7
 8002eba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ebc:	c407      	stmia	r4!, {r0, r1, r2}
 8002ebe:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8002ec0:	463b      	mov	r3, r7
 8002ec2:	210e      	movs	r1, #14
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff fe9b 	bl	8002c00 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8002eca:	2021      	movs	r0, #33	@ 0x21
 8002ecc:	f7ff fe7c 	bl	8002bc8 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8002ed0:	2011      	movs	r0, #17
 8002ed2:	f7ff fe79 	bl	8002bc8 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8002ed6:	2013      	movs	r0, #19
 8002ed8:	f7ff fe76 	bl	8002bc8 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8002edc:	2029      	movs	r0, #41	@ 0x29
 8002ede:	f7ff fe73 	bl	8002bc8 <ST7789_WriteCommand>

	HAL_Delay(50);
 8002ee2:	2032      	movs	r0, #50	@ 0x32
 8002ee4:	f001 fcae 	bl	8004844 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8002ee8:	2000      	movs	r0, #0
 8002eea:	f000 f80f 	bl	8002f0c <ST7789_Fill_Color>
}
 8002eee:	bf00      	nop
 8002ef0:	372c      	adds	r7, #44	@ 0x2c
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd90      	pop	{r4, r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20002dc8 	.word	0x20002dc8
 8002efc:	48000c00 	.word	0x48000c00
 8002f00:	08018254 	.word	0x08018254
 8002f04:	0801825c 	.word	0x0801825c
 8002f08:	0801826c 	.word	0x0801826c

08002f0c <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8002f16:	23ef      	movs	r3, #239	@ 0xef
 8002f18:	f240 123f 	movw	r2, #319	@ 0x13f
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	2000      	movs	r0, #0
 8002f20:	f7ff fefc 	bl	8002d1c <ST7789_SetAddressWindow>
	ST7789_Select();
 8002f24:	bf00      	nop

	#ifdef USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8002f26:	2300      	movs	r3, #0
 8002f28:	81fb      	strh	r3, [r7, #14]
 8002f2a:	e00e      	b.n	8002f4a <ST7789_Fill_Color+0x3e>
		{
			memset(disp_buf, color, sizeof(disp_buf));
 8002f2c:	88fb      	ldrh	r3, [r7, #6]
 8002f2e:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8002f32:	4619      	mov	r1, r3
 8002f34:	4809      	ldr	r0, [pc, #36]	@ (8002f5c <ST7789_Fill_Color+0x50>)
 8002f36:	f011 fda0 	bl	8014a7a <memset>
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
 8002f3a:	f44f 6148 	mov.w	r1, #3200	@ 0xc80
 8002f3e:	4807      	ldr	r0, [pc, #28]	@ (8002f5c <ST7789_Fill_Color+0x50>)
 8002f40:	f7ff fe5e 	bl	8002c00 <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8002f44:	89fb      	ldrh	r3, [r7, #14]
 8002f46:	3301      	adds	r3, #1
 8002f48:	81fb      	strh	r3, [r7, #14]
 8002f4a:	89fb      	ldrh	r3, [r7, #14]
 8002f4c:	2b2f      	cmp	r3, #47	@ 0x2f
 8002f4e:	d9ed      	bls.n	8002f2c <ST7789_Fill_Color+0x20>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 8002f50:	bf00      	nop
}
 8002f52:	bf00      	nop
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20002dc8 	.word	0x20002dc8

08002f60 <ST7789_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	80fb      	strh	r3, [r7, #6]
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	80bb      	strh	r3, [r7, #4]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 8002f72:	88fb      	ldrh	r3, [r7, #6]
 8002f74:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002f78:	d219      	bcs.n	8002fae <ST7789_DrawPixel+0x4e>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8002f7a:	88bb      	ldrh	r3, [r7, #4]
 8002f7c:	2bef      	cmp	r3, #239	@ 0xef
 8002f7e:	d816      	bhi.n	8002fae <ST7789_DrawPixel+0x4e>
	
	ST7789_SetAddressWindow(x, y, x, y);
 8002f80:	88bb      	ldrh	r3, [r7, #4]
 8002f82:	88fa      	ldrh	r2, [r7, #6]
 8002f84:	88b9      	ldrh	r1, [r7, #4]
 8002f86:	88f8      	ldrh	r0, [r7, #6]
 8002f88:	f7ff fec8 	bl	8002d1c <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 8002f8c:	887b      	ldrh	r3, [r7, #2]
 8002f8e:	0a1b      	lsrs	r3, r3, #8
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	733b      	strb	r3, [r7, #12]
 8002f96:	887b      	ldrh	r3, [r7, #2]
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	737b      	strb	r3, [r7, #13]
	ST7789_Select();
 8002f9c:	bf00      	nop
	ST7789_WriteData(data, sizeof(data));
 8002f9e:	f107 030c 	add.w	r3, r7, #12
 8002fa2:	2102      	movs	r1, #2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff fe2b 	bl	8002c00 <ST7789_WriteData>
	ST7789_UnSelect();
 8002faa:	bf00      	nop
 8002fac:	e000      	b.n	8002fb0 <ST7789_DrawPixel+0x50>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8002fae:	bf00      	nop
}
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <ST7789_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void ST7789_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t *data)
{
 8002fb6:	b590      	push	{r4, r7, lr}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	4604      	mov	r4, r0
 8002fbe:	4608      	mov	r0, r1
 8002fc0:	4611      	mov	r1, r2
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	4623      	mov	r3, r4
 8002fc6:	80fb      	strh	r3, [r7, #6]
 8002fc8:	4603      	mov	r3, r0
 8002fca:	80bb      	strh	r3, [r7, #4]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	807b      	strh	r3, [r7, #2]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	803b      	strh	r3, [r7, #0]
	if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT))
 8002fd4:	88fb      	ldrh	r3, [r7, #6]
 8002fd6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002fda:	d22a      	bcs.n	8003032 <ST7789_DrawImage+0x7c>
 8002fdc:	88bb      	ldrh	r3, [r7, #4]
 8002fde:	2bef      	cmp	r3, #239	@ 0xef
 8002fe0:	d827      	bhi.n	8003032 <ST7789_DrawImage+0x7c>
		return;
	if ((x + w - 1) >= ST7789_WIDTH)
 8002fe2:	88fa      	ldrh	r2, [r7, #6]
 8002fe4:	887b      	ldrh	r3, [r7, #2]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002fec:	dc23      	bgt.n	8003036 <ST7789_DrawImage+0x80>
		return;
	if ((y + h - 1) >= ST7789_HEIGHT)
 8002fee:	88ba      	ldrh	r2, [r7, #4]
 8002ff0:	883b      	ldrh	r3, [r7, #0]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	2bf0      	cmp	r3, #240	@ 0xf0
 8002ff6:	dc20      	bgt.n	800303a <ST7789_DrawImage+0x84>
		return;

	ST7789_Select();
 8002ff8:	bf00      	nop
	ST7789_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8002ffa:	88fa      	ldrh	r2, [r7, #6]
 8002ffc:	887b      	ldrh	r3, [r7, #2]
 8002ffe:	4413      	add	r3, r2
 8003000:	b29b      	uxth	r3, r3
 8003002:	3b01      	subs	r3, #1
 8003004:	b29c      	uxth	r4, r3
 8003006:	88ba      	ldrh	r2, [r7, #4]
 8003008:	883b      	ldrh	r3, [r7, #0]
 800300a:	4413      	add	r3, r2
 800300c:	b29b      	uxth	r3, r3
 800300e:	3b01      	subs	r3, #1
 8003010:	b29b      	uxth	r3, r3
 8003012:	88b9      	ldrh	r1, [r7, #4]
 8003014:	88f8      	ldrh	r0, [r7, #6]
 8003016:	4622      	mov	r2, r4
 8003018:	f7ff fe80 	bl	8002d1c <ST7789_SetAddressWindow>
	ST7789_WriteData((uint8_t *)data, sizeof(uint16_t) * w * h);
 800301c:	887b      	ldrh	r3, [r7, #2]
 800301e:	883a      	ldrh	r2, [r7, #0]
 8003020:	fb02 f303 	mul.w	r3, r2, r3
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	4619      	mov	r1, r3
 8003028:	69b8      	ldr	r0, [r7, #24]
 800302a:	f7ff fde9 	bl	8002c00 <ST7789_WriteData>
	ST7789_UnSelect();
 800302e:	bf00      	nop
 8003030:	e004      	b.n	800303c <ST7789_DrawImage+0x86>
		return;
 8003032:	bf00      	nop
 8003034:	e002      	b.n	800303c <ST7789_DrawImage+0x86>
		return;
 8003036:	bf00      	nop
 8003038:	e000      	b.n	800303c <ST7789_DrawImage+0x86>
		return;
 800303a:	bf00      	nop
}
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	bd90      	pop	{r4, r7, pc}

08003042 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8003042:	b082      	sub	sp, #8
 8003044:	b580      	push	{r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af00      	add	r7, sp, #0
 800304a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800304c:	4603      	mov	r3, r0
 800304e:	80fb      	strh	r3, [r7, #6]
 8003050:	460b      	mov	r3, r1
 8003052:	80bb      	strh	r3, [r7, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8003058:	bf00      	nop
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 800305a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800305e:	461a      	mov	r2, r3
 8003060:	88fb      	ldrh	r3, [r7, #6]
 8003062:	4413      	add	r3, r2
 8003064:	b29b      	uxth	r3, r3
 8003066:	3b01      	subs	r3, #1
 8003068:	b29a      	uxth	r2, r3
 800306a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800306e:	4619      	mov	r1, r3
 8003070:	88bb      	ldrh	r3, [r7, #4]
 8003072:	440b      	add	r3, r1
 8003074:	b29b      	uxth	r3, r3
 8003076:	3b01      	subs	r3, #1
 8003078:	b29b      	uxth	r3, r3
 800307a:	88b9      	ldrh	r1, [r7, #4]
 800307c:	88f8      	ldrh	r0, [r7, #6]
 800307e:	f7ff fe4d 	bl	8002d1c <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8003082:	2300      	movs	r3, #0
 8003084:	61fb      	str	r3, [r7, #28]
 8003086:	e041      	b.n	800310c <ST7789_WriteChar+0xca>
		b = font.data[(ch - 32) * font.height + i];
 8003088:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800308a:	78fb      	ldrb	r3, [r7, #3]
 800308c:	3b20      	subs	r3, #32
 800308e:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8003092:	fb01 f303 	mul.w	r3, r1, r3
 8003096:	4619      	mov	r1, r3
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	440b      	add	r3, r1
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	4413      	add	r3, r2
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 80030a4:	2300      	movs	r3, #0
 80030a6:	61bb      	str	r3, [r7, #24]
 80030a8:	e027      	b.n	80030fa <ST7789_WriteChar+0xb8>
			if ((b << j) & 0x8000) {
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00e      	beq.n	80030d8 <ST7789_WriteChar+0x96>
				uint8_t data[] = {color >> 8, color & 0xFF};
 80030ba:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80030bc:	0a1b      	lsrs	r3, r3, #8
 80030be:	b29b      	uxth	r3, r3
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	743b      	strb	r3, [r7, #16]
 80030c4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 80030ca:	f107 0310 	add.w	r3, r7, #16
 80030ce:	2102      	movs	r1, #2
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff fd95 	bl	8002c00 <ST7789_WriteData>
 80030d6:	e00d      	b.n	80030f4 <ST7789_WriteChar+0xb2>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 80030d8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80030da:	0a1b      	lsrs	r3, r3, #8
 80030dc:	b29b      	uxth	r3, r3
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	733b      	strb	r3, [r7, #12]
 80030e2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 80030e8:	f107 030c 	add.w	r3, r7, #12
 80030ec:	2102      	movs	r1, #2
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff fd86 	bl	8002c00 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	3301      	adds	r3, #1
 80030f8:	61bb      	str	r3, [r7, #24]
 80030fa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80030fe:	461a      	mov	r2, r3
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	4293      	cmp	r3, r2
 8003104:	d3d1      	bcc.n	80030aa <ST7789_WriteChar+0x68>
	for (i = 0; i < font.height; i++) {
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3301      	adds	r3, #1
 800310a:	61fb      	str	r3, [r7, #28]
 800310c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003110:	461a      	mov	r2, r3
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	4293      	cmp	r3, r2
 8003116:	d3b7      	bcc.n	8003088 <ST7789_WriteChar+0x46>
			}
		}
	}
	ST7789_UnSelect();
 8003118:	bf00      	nop
}
 800311a:	bf00      	nop
 800311c:	3720      	adds	r7, #32
 800311e:	46bd      	mov	sp, r7
 8003120:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003124:	b002      	add	sp, #8
 8003126:	4770      	bx	lr

08003128 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8003128:	b082      	sub	sp, #8
 800312a:	b580      	push	{r7, lr}
 800312c:	b086      	sub	sp, #24
 800312e:	af04      	add	r7, sp, #16
 8003130:	603a      	str	r2, [r7, #0]
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	4603      	mov	r3, r0
 8003136:	80fb      	strh	r3, [r7, #6]
 8003138:	460b      	mov	r3, r1
 800313a:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 800313c:	bf00      	nop
	while (*str) {
 800313e:	e02e      	b.n	800319e <ST7789_WriteString+0x76>
		if (x + font.width >= ST7789_WIDTH) {
 8003140:	88fb      	ldrh	r3, [r7, #6]
 8003142:	7d3a      	ldrb	r2, [r7, #20]
 8003144:	4413      	add	r3, r2
 8003146:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800314a:	db13      	blt.n	8003174 <ST7789_WriteString+0x4c>
			x = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8003150:	7d7b      	ldrb	r3, [r7, #21]
 8003152:	461a      	mov	r2, r3
 8003154:	88bb      	ldrh	r3, [r7, #4]
 8003156:	4413      	add	r3, r2
 8003158:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 800315a:	88bb      	ldrh	r3, [r7, #4]
 800315c:	7d7a      	ldrb	r2, [r7, #21]
 800315e:	4413      	add	r3, r2
 8003160:	2bef      	cmp	r3, #239	@ 0xef
 8003162:	dc21      	bgt.n	80031a8 <ST7789_WriteString+0x80>
				break;
			}

			if (*str == ' ') {
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b20      	cmp	r3, #32
 800316a:	d103      	bne.n	8003174 <ST7789_WriteString+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	3301      	adds	r3, #1
 8003170:	603b      	str	r3, [r7, #0]
				continue;
 8003172:	e014      	b.n	800319e <ST7789_WriteString+0x76>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	781a      	ldrb	r2, [r3, #0]
 8003178:	88b9      	ldrh	r1, [r7, #4]
 800317a:	88f8      	ldrh	r0, [r7, #6]
 800317c:	8c3b      	ldrh	r3, [r7, #32]
 800317e:	9302      	str	r3, [sp, #8]
 8003180:	8bbb      	ldrh	r3, [r7, #28]
 8003182:	9301      	str	r3, [sp, #4]
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	f7ff ff5a 	bl	8003042 <ST7789_WriteChar>
		x += font.width;
 800318e:	7d3b      	ldrb	r3, [r7, #20]
 8003190:	461a      	mov	r2, r3
 8003192:	88fb      	ldrh	r3, [r7, #6]
 8003194:	4413      	add	r3, r2
 8003196:	80fb      	strh	r3, [r7, #6]
		str++;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	3301      	adds	r3, #1
 800319c:	603b      	str	r3, [r7, #0]
	while (*str) {
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1cc      	bne.n	8003140 <ST7789_WriteString+0x18>
 80031a6:	e000      	b.n	80031aa <ST7789_WriteString+0x82>
				break;
 80031a8:	bf00      	nop
	}
	ST7789_UnSelect();
 80031aa:	bf00      	nop
}
 80031ac:	bf00      	nop
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80031b6:	b002      	add	sp, #8
 80031b8:	4770      	bx	lr
	...

080031bc <View_DoubaoWelcome>:
		ST7789_DrawCircle(90, 210, 10, WHITE);
		ST7789_DrawRectangle(140, 200, 160, 220, WHITE);
	}


void View_DoubaoWelcome(void){
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af04      	add	r7, sp, #16
		ST7789_DrawImage(10, 10, 160, 160, (uint16_t *)doubao);
 80031c2:	4b0c      	ldr	r3, [pc, #48]	@ (80031f4 <View_DoubaoWelcome+0x38>)
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	23a0      	movs	r3, #160	@ 0xa0
 80031c8:	22a0      	movs	r2, #160	@ 0xa0
 80031ca:	210a      	movs	r1, #10
 80031cc:	200a      	movs	r0, #10
 80031ce:	f7ff fef2 	bl	8002fb6 <ST7789_DrawImage>
		ST7789_WriteString(0, 180, " !\"#$\%&\'\(\)", Han_Array32, WHITE, BLACK);
 80031d2:	4b09      	ldr	r3, [pc, #36]	@ (80031f8 <View_DoubaoWelcome+0x3c>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	9202      	str	r2, [sp, #8]
 80031d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80031dc:	9201      	str	r2, [sp, #4]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	9200      	str	r2, [sp, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a05      	ldr	r2, [pc, #20]	@ (80031fc <View_DoubaoWelcome+0x40>)
 80031e6:	21b4      	movs	r1, #180	@ 0xb4
 80031e8:	2000      	movs	r0, #0
 80031ea:	f7ff ff9d 	bl	8003128 <ST7789_WriteString>
//		ST7789_WriteString(170, 180, "", Han_Array, WHITE, BLACK);
	}
 80031ee:	bf00      	nop
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	080190fc 	.word	0x080190fc
 80031f8:	20000008 	.word	0x20000008
 80031fc:	080182ec 	.word	0x080182ec

08003200 <View_Sensor>:

void View_Sensor(void){
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af04      	add	r7, sp, #16
	sprintf(BUFFER_Display,"ENC1:%5d",htim4.Instance->CNT);
 8003206:	4b78      	ldr	r3, [pc, #480]	@ (80033e8 <View_Sensor+0x1e8>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320c:	461a      	mov	r2, r3
 800320e:	4977      	ldr	r1, [pc, #476]	@ (80033ec <View_Sensor+0x1ec>)
 8003210:	4877      	ldr	r0, [pc, #476]	@ (80033f0 <View_Sensor+0x1f0>)
 8003212:	f011 fbcf 	bl	80149b4 <siprintf>
	ST7789_WriteString(200, 10, BUFFER_Display, Font_11x18, WHITE, BLACK);
 8003216:	4b77      	ldr	r3, [pc, #476]	@ (80033f4 <View_Sensor+0x1f4>)
 8003218:	2200      	movs	r2, #0
 800321a:	9202      	str	r2, [sp, #8]
 800321c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003220:	9201      	str	r2, [sp, #4]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	9200      	str	r2, [sp, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a71      	ldr	r2, [pc, #452]	@ (80033f0 <View_Sensor+0x1f0>)
 800322a:	210a      	movs	r1, #10
 800322c:	20c8      	movs	r0, #200	@ 0xc8
 800322e:	f7ff ff7b 	bl	8003128 <ST7789_WriteString>
	sprintf(BUFFER_Display,"ENC2:%5d",htim3.Instance->CNT);
 8003232:	4b71      	ldr	r3, [pc, #452]	@ (80033f8 <View_Sensor+0x1f8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003238:	461a      	mov	r2, r3
 800323a:	4970      	ldr	r1, [pc, #448]	@ (80033fc <View_Sensor+0x1fc>)
 800323c:	486c      	ldr	r0, [pc, #432]	@ (80033f0 <View_Sensor+0x1f0>)
 800323e:	f011 fbb9 	bl	80149b4 <siprintf>
	ST7789_WriteString(200, 40, BUFFER_Display, Font_11x18, WHITE, BLACK);
 8003242:	4b6c      	ldr	r3, [pc, #432]	@ (80033f4 <View_Sensor+0x1f4>)
 8003244:	2200      	movs	r2, #0
 8003246:	9202      	str	r2, [sp, #8]
 8003248:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800324c:	9201      	str	r2, [sp, #4]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	9200      	str	r2, [sp, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a66      	ldr	r2, [pc, #408]	@ (80033f0 <View_Sensor+0x1f0>)
 8003256:	2128      	movs	r1, #40	@ 0x28
 8003258:	20c8      	movs	r0, #200	@ 0xc8
 800325a:	f7ff ff65 	bl	8003128 <ST7789_WriteString>
	sprintf(BUFFER_Display,"ENC3:%5d",htim20.Instance->CNT);
 800325e:	4b68      	ldr	r3, [pc, #416]	@ (8003400 <View_Sensor+0x200>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003264:	461a      	mov	r2, r3
 8003266:	4967      	ldr	r1, [pc, #412]	@ (8003404 <View_Sensor+0x204>)
 8003268:	4861      	ldr	r0, [pc, #388]	@ (80033f0 <View_Sensor+0x1f0>)
 800326a:	f011 fba3 	bl	80149b4 <siprintf>
	ST7789_WriteString(200, 70, BUFFER_Display, Font_11x18, WHITE, BLACK);
 800326e:	4b61      	ldr	r3, [pc, #388]	@ (80033f4 <View_Sensor+0x1f4>)
 8003270:	2200      	movs	r2, #0
 8003272:	9202      	str	r2, [sp, #8]
 8003274:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003278:	9201      	str	r2, [sp, #4]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	9200      	str	r2, [sp, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a5b      	ldr	r2, [pc, #364]	@ (80033f0 <View_Sensor+0x1f0>)
 8003282:	2146      	movs	r1, #70	@ 0x46
 8003284:	20c8      	movs	r0, #200	@ 0xc8
 8003286:	f7ff ff4f 	bl	8003128 <ST7789_WriteString>
	sprintf(BUFFER_Display,"ENC4:%5d",htim1.Instance->CNT);
 800328a:	4b5f      	ldr	r3, [pc, #380]	@ (8003408 <View_Sensor+0x208>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003290:	461a      	mov	r2, r3
 8003292:	495e      	ldr	r1, [pc, #376]	@ (800340c <View_Sensor+0x20c>)
 8003294:	4856      	ldr	r0, [pc, #344]	@ (80033f0 <View_Sensor+0x1f0>)
 8003296:	f011 fb8d 	bl	80149b4 <siprintf>
	ST7789_WriteString(200, 100, BUFFER_Display, Font_11x18, WHITE, BLACK);
 800329a:	4b56      	ldr	r3, [pc, #344]	@ (80033f4 <View_Sensor+0x1f4>)
 800329c:	2200      	movs	r2, #0
 800329e:	9202      	str	r2, [sp, #8]
 80032a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032a4:	9201      	str	r2, [sp, #4]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	9200      	str	r2, [sp, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a50      	ldr	r2, [pc, #320]	@ (80033f0 <View_Sensor+0x1f0>)
 80032ae:	2164      	movs	r1, #100	@ 0x64
 80032b0:	20c8      	movs	r0, #200	@ 0xc8
 80032b2:	f7ff ff39 	bl	8003128 <ST7789_WriteString>

	sprintf(BUFFER_Display,"KEYs:%5d",BUFFER_SYS_ADC[0]);
 80032b6:	4b56      	ldr	r3, [pc, #344]	@ (8003410 <View_Sensor+0x210>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	461a      	mov	r2, r3
 80032bc:	4955      	ldr	r1, [pc, #340]	@ (8003414 <View_Sensor+0x214>)
 80032be:	484c      	ldr	r0, [pc, #304]	@ (80033f0 <View_Sensor+0x1f0>)
 80032c0:	f011 fb78 	bl	80149b4 <siprintf>
	ST7789_WriteString(200, 130, BUFFER_Display, Font_11x18, WHITE, BLACK);
 80032c4:	4b4b      	ldr	r3, [pc, #300]	@ (80033f4 <View_Sensor+0x1f4>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	9202      	str	r2, [sp, #8]
 80032ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032ce:	9201      	str	r2, [sp, #4]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	9200      	str	r2, [sp, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a46      	ldr	r2, [pc, #280]	@ (80033f0 <View_Sensor+0x1f0>)
 80032d8:	2182      	movs	r1, #130	@ 0x82
 80032da:	20c8      	movs	r0, #200	@ 0xc8
 80032dc:	f7ff ff24 	bl	8003128 <ST7789_WriteString>

	float temperate=(((float)BUFFER_SYS_ADC[1]*(3.3/4096)-0.76)/0.0025 + 30); //转换为温度值;
 80032e0:	4b4b      	ldr	r3, [pc, #300]	@ (8003410 <View_Sensor+0x210>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	ee07 3a90 	vmov	s15, r3
 80032e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ec:	ee17 0a90 	vmov	r0, s15
 80032f0:	f7fd f952 	bl	8000598 <__aeabi_f2d>
 80032f4:	a336      	add	r3, pc, #216	@ (adr r3, 80033d0 <View_Sensor+0x1d0>)
 80032f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fa:	f7fd f9a5 	bl	8000648 <__aeabi_dmul>
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	4610      	mov	r0, r2
 8003304:	4619      	mov	r1, r3
 8003306:	a334      	add	r3, pc, #208	@ (adr r3, 80033d8 <View_Sensor+0x1d8>)
 8003308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330c:	f7fc ffe4 	bl	80002d8 <__aeabi_dsub>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4610      	mov	r0, r2
 8003316:	4619      	mov	r1, r3
 8003318:	a331      	add	r3, pc, #196	@ (adr r3, 80033e0 <View_Sensor+0x1e0>)
 800331a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331e:	f7fd fabd 	bl	800089c <__aeabi_ddiv>
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	4610      	mov	r0, r2
 8003328:	4619      	mov	r1, r3
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	4b3a      	ldr	r3, [pc, #232]	@ (8003418 <View_Sensor+0x218>)
 8003330:	f7fc ffd4 	bl	80002dc <__adddf3>
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	4610      	mov	r0, r2
 800333a:	4619      	mov	r1, r3
 800333c:	f7fd fc7c 	bl	8000c38 <__aeabi_d2f>
 8003340:	4603      	mov	r3, r0
 8003342:	607b      	str	r3, [r7, #4]
	sprintf(BUFFER_Display,"TEMP:%4.1f",temperate);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7fd f927 	bl	8000598 <__aeabi_f2d>
 800334a:	4602      	mov	r2, r0
 800334c:	460b      	mov	r3, r1
 800334e:	4933      	ldr	r1, [pc, #204]	@ (800341c <View_Sensor+0x21c>)
 8003350:	4827      	ldr	r0, [pc, #156]	@ (80033f0 <View_Sensor+0x1f0>)
 8003352:	f011 fb2f 	bl	80149b4 <siprintf>
	ST7789_WriteString(200, 160, BUFFER_Display, Font_11x18, WHITE, BLACK);
 8003356:	4b27      	ldr	r3, [pc, #156]	@ (80033f4 <View_Sensor+0x1f4>)
 8003358:	2200      	movs	r2, #0
 800335a:	9202      	str	r2, [sp, #8]
 800335c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003360:	9201      	str	r2, [sp, #4]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	9200      	str	r2, [sp, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a21      	ldr	r2, [pc, #132]	@ (80033f0 <View_Sensor+0x1f0>)
 800336a:	21a0      	movs	r1, #160	@ 0xa0
 800336c:	20c8      	movs	r0, #200	@ 0xc8
 800336e:	f7ff fedb 	bl	8003128 <ST7789_WriteString>

	sprintf(BUFFER_Display,"Vbat:%5d",BUFFER_SYS_ADC[2]);
 8003372:	4b27      	ldr	r3, [pc, #156]	@ (8003410 <View_Sensor+0x210>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	461a      	mov	r2, r3
 8003378:	4929      	ldr	r1, [pc, #164]	@ (8003420 <View_Sensor+0x220>)
 800337a:	481d      	ldr	r0, [pc, #116]	@ (80033f0 <View_Sensor+0x1f0>)
 800337c:	f011 fb1a 	bl	80149b4 <siprintf>
	ST7789_WriteString(200, 190, BUFFER_Display, Font_11x18, WHITE, BLACK);
 8003380:	4b1c      	ldr	r3, [pc, #112]	@ (80033f4 <View_Sensor+0x1f4>)
 8003382:	2200      	movs	r2, #0
 8003384:	9202      	str	r2, [sp, #8]
 8003386:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800338a:	9201      	str	r2, [sp, #4]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	9200      	str	r2, [sp, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a17      	ldr	r2, [pc, #92]	@ (80033f0 <View_Sensor+0x1f0>)
 8003394:	21be      	movs	r1, #190	@ 0xbe
 8003396:	20c8      	movs	r0, #200	@ 0xc8
 8003398:	f7ff fec6 	bl	8003128 <ST7789_WriteString>

	sprintf(BUFFER_Display,"Vref:%5d",BUFFER_SYS_ADC[3]);
 800339c:	4b1c      	ldr	r3, [pc, #112]	@ (8003410 <View_Sensor+0x210>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	461a      	mov	r2, r3
 80033a2:	4920      	ldr	r1, [pc, #128]	@ (8003424 <View_Sensor+0x224>)
 80033a4:	4812      	ldr	r0, [pc, #72]	@ (80033f0 <View_Sensor+0x1f0>)
 80033a6:	f011 fb05 	bl	80149b4 <siprintf>
	ST7789_WriteString(200, 220, BUFFER_Display, Font_11x18, WHITE, BLACK);
 80033aa:	4b12      	ldr	r3, [pc, #72]	@ (80033f4 <View_Sensor+0x1f4>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	9202      	str	r2, [sp, #8]
 80033b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80033b4:	9201      	str	r2, [sp, #4]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	9200      	str	r2, [sp, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a0c      	ldr	r2, [pc, #48]	@ (80033f0 <View_Sensor+0x1f0>)
 80033be:	21dc      	movs	r1, #220	@ 0xdc
 80033c0:	20c8      	movs	r0, #200	@ 0xc8
 80033c2:	f7ff feb1 	bl	8003128 <ST7789_WriteString>

	}
 80033c6:	bf00      	nop
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	66666666 	.word	0x66666666
 80033d4:	3f4a6666 	.word	0x3f4a6666
 80033d8:	851eb852 	.word	0x851eb852
 80033dc:	3fe851eb 	.word	0x3fe851eb
 80033e0:	47ae147b 	.word	0x47ae147b
 80033e4:	3f647ae1 	.word	0x3f647ae1
 80033e8:	20000b10 	.word	0x20000b10
 80033ec:	080182f8 	.word	0x080182f8
 80033f0:	20003a48 	.word	0x20003a48
 80033f4:	20000000 	.word	0x20000000
 80033f8:	20000ac4 	.word	0x20000ac4
 80033fc:	08018304 	.word	0x08018304
 8003400:	20000c8c 	.word	0x20000c8c
 8003404:	08018310 	.word	0x08018310
 8003408:	20000a78 	.word	0x20000a78
 800340c:	0801831c 	.word	0x0801831c
 8003410:	20000d98 	.word	0x20000d98
 8003414:	08018328 	.word	0x08018328
 8003418:	403e0000 	.word	0x403e0000
 800341c:	08018334 	.word	0x08018334
 8003420:	08018340 	.word	0x08018340
 8003424:	0801834c 	.word	0x0801834c

08003428 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800342e:	4b11      	ldr	r3, [pc, #68]	@ (8003474 <HAL_MspInit+0x4c>)
 8003430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003432:	4a10      	ldr	r2, [pc, #64]	@ (8003474 <HAL_MspInit+0x4c>)
 8003434:	f043 0301 	orr.w	r3, r3, #1
 8003438:	6613      	str	r3, [r2, #96]	@ 0x60
 800343a:	4b0e      	ldr	r3, [pc, #56]	@ (8003474 <HAL_MspInit+0x4c>)
 800343c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	607b      	str	r3, [r7, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003446:	4b0b      	ldr	r3, [pc, #44]	@ (8003474 <HAL_MspInit+0x4c>)
 8003448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800344a:	4a0a      	ldr	r2, [pc, #40]	@ (8003474 <HAL_MspInit+0x4c>)
 800344c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003450:	6593      	str	r3, [r2, #88]	@ 0x58
 8003452:	4b08      	ldr	r3, [pc, #32]	@ (8003474 <HAL_MspInit+0x4c>)
 8003454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800345a:	603b      	str	r3, [r7, #0]
 800345c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 800345e:	f001 fa27 	bl	80048b0 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8003462:	2002      	movs	r0, #2
 8003464:	f001 fa10 	bl	8004888 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003468:	f008 f98e 	bl	800b788 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800346c:	bf00      	nop
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40021000 	.word	0x40021000

08003478 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b0a2      	sub	sp, #136	@ 0x88
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003480:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	605a      	str	r2, [r3, #4]
 800348a:	609a      	str	r2, [r3, #8]
 800348c:	60da      	str	r2, [r3, #12]
 800348e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003490:	f107 0320 	add.w	r3, r7, #32
 8003494:	2254      	movs	r2, #84	@ 0x54
 8003496:	2100      	movs	r1, #0
 8003498:	4618      	mov	r0, r3
 800349a:	f011 faee 	bl	8014a7a <memset>
  if(hadc->Instance==ADC2)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a69      	ldr	r2, [pc, #420]	@ (8003648 <HAL_ADC_MspInit+0x1d0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d160      	bne.n	800356a <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80034a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034ac:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80034ae:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80034b2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034b4:	f107 0320 	add.w	r3, r7, #32
 80034b8:	4618      	mov	r0, r3
 80034ba:	f008 fecf 	bl	800c25c <HAL_RCCEx_PeriphCLKConfig>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80034c4:	f7ff fb7a 	bl	8002bbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80034c8:	4b60      	ldr	r3, [pc, #384]	@ (800364c <HAL_ADC_MspInit+0x1d4>)
 80034ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034cc:	4a5f      	ldr	r2, [pc, #380]	@ (800364c <HAL_ADC_MspInit+0x1d4>)
 80034ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80034d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034d4:	4b5d      	ldr	r3, [pc, #372]	@ (800364c <HAL_ADC_MspInit+0x1d4>)
 80034d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034dc:	61fb      	str	r3, [r7, #28]
 80034de:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034e0:	4b5a      	ldr	r3, [pc, #360]	@ (800364c <HAL_ADC_MspInit+0x1d4>)
 80034e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034e4:	4a59      	ldr	r2, [pc, #356]	@ (800364c <HAL_ADC_MspInit+0x1d4>)
 80034e6:	f043 0301 	orr.w	r3, r3, #1
 80034ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034ec:	4b57      	ldr	r3, [pc, #348]	@ (800364c <HAL_ADC_MspInit+0x1d4>)
 80034ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	61bb      	str	r3, [r7, #24]
 80034f6:	69bb      	ldr	r3, [r7, #24]
    /**ADC2 GPIO Configuration
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80034f8:	2380      	movs	r3, #128	@ 0x80
 80034fa:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034fc:	2303      	movs	r3, #3
 80034fe:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003500:	2300      	movs	r3, #0
 8003502:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003504:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003508:	4619      	mov	r1, r3
 800350a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800350e:	f004 fbc7 	bl	8007ca0 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel5;
 8003512:	4b4f      	ldr	r3, [pc, #316]	@ (8003650 <HAL_ADC_MspInit+0x1d8>)
 8003514:	4a4f      	ldr	r2, [pc, #316]	@ (8003654 <HAL_ADC_MspInit+0x1dc>)
 8003516:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8003518:	4b4d      	ldr	r3, [pc, #308]	@ (8003650 <HAL_ADC_MspInit+0x1d8>)
 800351a:	2224      	movs	r2, #36	@ 0x24
 800351c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800351e:	4b4c      	ldr	r3, [pc, #304]	@ (8003650 <HAL_ADC_MspInit+0x1d8>)
 8003520:	2200      	movs	r2, #0
 8003522:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003524:	4b4a      	ldr	r3, [pc, #296]	@ (8003650 <HAL_ADC_MspInit+0x1d8>)
 8003526:	2200      	movs	r2, #0
 8003528:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800352a:	4b49      	ldr	r3, [pc, #292]	@ (8003650 <HAL_ADC_MspInit+0x1d8>)
 800352c:	2280      	movs	r2, #128	@ 0x80
 800352e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003530:	4b47      	ldr	r3, [pc, #284]	@ (8003650 <HAL_ADC_MspInit+0x1d8>)
 8003532:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003536:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003538:	4b45      	ldr	r3, [pc, #276]	@ (8003650 <HAL_ADC_MspInit+0x1d8>)
 800353a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800353e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003540:	4b43      	ldr	r3, [pc, #268]	@ (8003650 <HAL_ADC_MspInit+0x1d8>)
 8003542:	2220      	movs	r2, #32
 8003544:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003546:	4b42      	ldr	r3, [pc, #264]	@ (8003650 <HAL_ADC_MspInit+0x1d8>)
 8003548:	2200      	movs	r2, #0
 800354a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800354c:	4840      	ldr	r0, [pc, #256]	@ (8003650 <HAL_ADC_MspInit+0x1d8>)
 800354e:	f004 f935 	bl	80077bc <HAL_DMA_Init>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8003558:	f7ff fb30 	bl	8002bbc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a3c      	ldr	r2, [pc, #240]	@ (8003650 <HAL_ADC_MspInit+0x1d8>)
 8003560:	655a      	str	r2, [r3, #84]	@ 0x54
 8003562:	4a3b      	ldr	r2, [pc, #236]	@ (8003650 <HAL_ADC_MspInit+0x1d8>)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8003568:	e0f7      	b.n	800375a <HAL_ADC_MspInit+0x2e2>
  else if(hadc->Instance==ADC3)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a3a      	ldr	r2, [pc, #232]	@ (8003658 <HAL_ADC_MspInit+0x1e0>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d17b      	bne.n	800366c <HAL_ADC_MspInit+0x1f4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003574:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003578:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 800357a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800357e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003580:	f107 0320 	add.w	r3, r7, #32
 8003584:	4618      	mov	r0, r3
 8003586:	f008 fe69 	bl	800c25c <HAL_RCCEx_PeriphCLKConfig>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <HAL_ADC_MspInit+0x11c>
      Error_Handler();
 8003590:	f7ff fb14 	bl	8002bbc <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8003594:	4b31      	ldr	r3, [pc, #196]	@ (800365c <HAL_ADC_MspInit+0x1e4>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	3301      	adds	r3, #1
 800359a:	4a30      	ldr	r2, [pc, #192]	@ (800365c <HAL_ADC_MspInit+0x1e4>)
 800359c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800359e:	4b2f      	ldr	r3, [pc, #188]	@ (800365c <HAL_ADC_MspInit+0x1e4>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d10b      	bne.n	80035be <HAL_ADC_MspInit+0x146>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80035a6:	4b29      	ldr	r3, [pc, #164]	@ (800364c <HAL_ADC_MspInit+0x1d4>)
 80035a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035aa:	4a28      	ldr	r2, [pc, #160]	@ (800364c <HAL_ADC_MspInit+0x1d4>)
 80035ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035b2:	4b26      	ldr	r3, [pc, #152]	@ (800364c <HAL_ADC_MspInit+0x1d4>)
 80035b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035be:	4b23      	ldr	r3, [pc, #140]	@ (800364c <HAL_ADC_MspInit+0x1d4>)
 80035c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035c2:	4a22      	ldr	r2, [pc, #136]	@ (800364c <HAL_ADC_MspInit+0x1d4>)
 80035c4:	f043 0302 	orr.w	r3, r3, #2
 80035c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035ca:	4b20      	ldr	r3, [pc, #128]	@ (800364c <HAL_ADC_MspInit+0x1d4>)
 80035cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80035d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80035da:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035dc:	2303      	movs	r3, #3
 80035de:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e0:	2300      	movs	r3, #0
 80035e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035e4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80035e8:	4619      	mov	r1, r3
 80035ea:	481d      	ldr	r0, [pc, #116]	@ (8003660 <HAL_ADC_MspInit+0x1e8>)
 80035ec:	f004 fb58 	bl	8007ca0 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel6;
 80035f0:	4b1c      	ldr	r3, [pc, #112]	@ (8003664 <HAL_ADC_MspInit+0x1ec>)
 80035f2:	4a1d      	ldr	r2, [pc, #116]	@ (8003668 <HAL_ADC_MspInit+0x1f0>)
 80035f4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80035f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003664 <HAL_ADC_MspInit+0x1ec>)
 80035f8:	2225      	movs	r2, #37	@ 0x25
 80035fa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035fc:	4b19      	ldr	r3, [pc, #100]	@ (8003664 <HAL_ADC_MspInit+0x1ec>)
 80035fe:	2200      	movs	r2, #0
 8003600:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003602:	4b18      	ldr	r3, [pc, #96]	@ (8003664 <HAL_ADC_MspInit+0x1ec>)
 8003604:	2200      	movs	r2, #0
 8003606:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003608:	4b16      	ldr	r3, [pc, #88]	@ (8003664 <HAL_ADC_MspInit+0x1ec>)
 800360a:	2280      	movs	r2, #128	@ 0x80
 800360c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800360e:	4b15      	ldr	r3, [pc, #84]	@ (8003664 <HAL_ADC_MspInit+0x1ec>)
 8003610:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003614:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003616:	4b13      	ldr	r3, [pc, #76]	@ (8003664 <HAL_ADC_MspInit+0x1ec>)
 8003618:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800361c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800361e:	4b11      	ldr	r3, [pc, #68]	@ (8003664 <HAL_ADC_MspInit+0x1ec>)
 8003620:	2220      	movs	r2, #32
 8003622:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003624:	4b0f      	ldr	r3, [pc, #60]	@ (8003664 <HAL_ADC_MspInit+0x1ec>)
 8003626:	2200      	movs	r2, #0
 8003628:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800362a:	480e      	ldr	r0, [pc, #56]	@ (8003664 <HAL_ADC_MspInit+0x1ec>)
 800362c:	f004 f8c6 	bl	80077bc <HAL_DMA_Init>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_ADC_MspInit+0x1c2>
      Error_Handler();
 8003636:	f7ff fac1 	bl	8002bbc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a09      	ldr	r2, [pc, #36]	@ (8003664 <HAL_ADC_MspInit+0x1ec>)
 800363e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003640:	4a08      	ldr	r2, [pc, #32]	@ (8003664 <HAL_ADC_MspInit+0x1ec>)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003646:	e088      	b.n	800375a <HAL_ADC_MspInit+0x2e2>
 8003648:	50000100 	.word	0x50000100
 800364c:	40021000 	.word	0x40021000
 8003650:	20000500 	.word	0x20000500
 8003654:	40020058 	.word	0x40020058
 8003658:	50000400 	.word	0x50000400
 800365c:	20003aac 	.word	0x20003aac
 8003660:	48000400 	.word	0x48000400
 8003664:	20000560 	.word	0x20000560
 8003668:	4002006c 	.word	0x4002006c
  else if(hadc->Instance==ADC5)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a3c      	ldr	r2, [pc, #240]	@ (8003764 <HAL_ADC_MspInit+0x2ec>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d171      	bne.n	800375a <HAL_ADC_MspInit+0x2e2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003676:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800367a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 800367c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003680:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003682:	f107 0320 	add.w	r3, r7, #32
 8003686:	4618      	mov	r0, r3
 8003688:	f008 fde8 	bl	800c25c <HAL_RCCEx_PeriphCLKConfig>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <HAL_ADC_MspInit+0x21e>
      Error_Handler();
 8003692:	f7ff fa93 	bl	8002bbc <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8003696:	4b34      	ldr	r3, [pc, #208]	@ (8003768 <HAL_ADC_MspInit+0x2f0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	3301      	adds	r3, #1
 800369c:	4a32      	ldr	r2, [pc, #200]	@ (8003768 <HAL_ADC_MspInit+0x2f0>)
 800369e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80036a0:	4b31      	ldr	r3, [pc, #196]	@ (8003768 <HAL_ADC_MspInit+0x2f0>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d10b      	bne.n	80036c0 <HAL_ADC_MspInit+0x248>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80036a8:	4b30      	ldr	r3, [pc, #192]	@ (800376c <HAL_ADC_MspInit+0x2f4>)
 80036aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ac:	4a2f      	ldr	r2, [pc, #188]	@ (800376c <HAL_ADC_MspInit+0x2f4>)
 80036ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036b4:	4b2d      	ldr	r3, [pc, #180]	@ (800376c <HAL_ADC_MspInit+0x2f4>)
 80036b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036c0:	4b2a      	ldr	r3, [pc, #168]	@ (800376c <HAL_ADC_MspInit+0x2f4>)
 80036c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036c4:	4a29      	ldr	r2, [pc, #164]	@ (800376c <HAL_ADC_MspInit+0x2f4>)
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036cc:	4b27      	ldr	r3, [pc, #156]	@ (800376c <HAL_ADC_MspInit+0x2f4>)
 80036ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	60bb      	str	r3, [r7, #8]
 80036d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_KEY_Pin;
 80036d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80036dc:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036de:	2303      	movs	r3, #3
 80036e0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e2:	2300      	movs	r3, #0
 80036e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(ADC_KEY_GPIO_Port, &GPIO_InitStruct);
 80036e6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80036ea:	4619      	mov	r1, r3
 80036ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80036f0:	f004 fad6 	bl	8007ca0 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel4;
 80036f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003770 <HAL_ADC_MspInit+0x2f8>)
 80036f6:	4a1f      	ldr	r2, [pc, #124]	@ (8003774 <HAL_ADC_MspInit+0x2fc>)
 80036f8:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 80036fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003770 <HAL_ADC_MspInit+0x2f8>)
 80036fc:	2227      	movs	r2, #39	@ 0x27
 80036fe:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003700:	4b1b      	ldr	r3, [pc, #108]	@ (8003770 <HAL_ADC_MspInit+0x2f8>)
 8003702:	2200      	movs	r2, #0
 8003704:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8003706:	4b1a      	ldr	r3, [pc, #104]	@ (8003770 <HAL_ADC_MspInit+0x2f8>)
 8003708:	2200      	movs	r2, #0
 800370a:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 800370c:	4b18      	ldr	r3, [pc, #96]	@ (8003770 <HAL_ADC_MspInit+0x2f8>)
 800370e:	2280      	movs	r2, #128	@ 0x80
 8003710:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003712:	4b17      	ldr	r3, [pc, #92]	@ (8003770 <HAL_ADC_MspInit+0x2f8>)
 8003714:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003718:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800371a:	4b15      	ldr	r3, [pc, #84]	@ (8003770 <HAL_ADC_MspInit+0x2f8>)
 800371c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003720:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8003722:	4b13      	ldr	r3, [pc, #76]	@ (8003770 <HAL_ADC_MspInit+0x2f8>)
 8003724:	2220      	movs	r2, #32
 8003726:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8003728:	4b11      	ldr	r3, [pc, #68]	@ (8003770 <HAL_ADC_MspInit+0x2f8>)
 800372a:	2200      	movs	r2, #0
 800372c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 800372e:	4810      	ldr	r0, [pc, #64]	@ (8003770 <HAL_ADC_MspInit+0x2f8>)
 8003730:	f004 f844 	bl	80077bc <HAL_DMA_Init>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <HAL_ADC_MspInit+0x2c6>
      Error_Handler();
 800373a:	f7ff fa3f 	bl	8002bbc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a0b      	ldr	r2, [pc, #44]	@ (8003770 <HAL_ADC_MspInit+0x2f8>)
 8003742:	655a      	str	r2, [r3, #84]	@ 0x54
 8003744:	4a0a      	ldr	r2, [pc, #40]	@ (8003770 <HAL_ADC_MspInit+0x2f8>)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC5_IRQn, 0, 0);
 800374a:	2200      	movs	r2, #0
 800374c:	2100      	movs	r1, #0
 800374e:	203e      	movs	r0, #62	@ 0x3e
 8003750:	f003 fd89 	bl	8007266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC5_IRQn);
 8003754:	203e      	movs	r0, #62	@ 0x3e
 8003756:	f003 fda0 	bl	800729a <HAL_NVIC_EnableIRQ>
}
 800375a:	bf00      	nop
 800375c:	3788      	adds	r7, #136	@ 0x88
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	50000600 	.word	0x50000600
 8003768:	20003aac 	.word	0x20003aac
 800376c:	40021000 	.word	0x40021000
 8003770:	200005c0 	.word	0x200005c0
 8003774:	40020044 	.word	0x40020044

08003778 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b08a      	sub	sp, #40	@ 0x28
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003780:	f107 0314 	add.w	r3, r7, #20
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	609a      	str	r2, [r3, #8]
 800378c:	60da      	str	r2, [r3, #12]
 800378e:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a1f      	ldr	r2, [pc, #124]	@ (8003814 <HAL_COMP_MspInit+0x9c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d119      	bne.n	80037ce <HAL_COMP_MspInit+0x56>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800379a:	4b1f      	ldr	r3, [pc, #124]	@ (8003818 <HAL_COMP_MspInit+0xa0>)
 800379c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800379e:	4a1e      	ldr	r2, [pc, #120]	@ (8003818 <HAL_COMP_MspInit+0xa0>)
 80037a0:	f043 0301 	orr.w	r3, r3, #1
 80037a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003818 <HAL_COMP_MspInit+0xa0>)
 80037a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	613b      	str	r3, [r7, #16]
 80037b0:	693b      	ldr	r3, [r7, #16]
    /**COMP2 GPIO Configuration
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80037b2:	2380      	movs	r3, #128	@ 0x80
 80037b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037b6:	2303      	movs	r3, #3
 80037b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ba:	2300      	movs	r3, #0
 80037bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037be:	f107 0314 	add.w	r3, r7, #20
 80037c2:	4619      	mov	r1, r3
 80037c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037c8:	f004 fa6a 	bl	8007ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP5_MspInit 1 */

  /* USER CODE END COMP5_MspInit 1 */
  }

}
 80037cc:	e01d      	b.n	800380a <HAL_COMP_MspInit+0x92>
  else if(hcomp->Instance==COMP5)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a12      	ldr	r2, [pc, #72]	@ (800381c <HAL_COMP_MspInit+0xa4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d118      	bne.n	800380a <HAL_COMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003818 <HAL_COMP_MspInit+0xa0>)
 80037da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037dc:	4a0e      	ldr	r2, [pc, #56]	@ (8003818 <HAL_COMP_MspInit+0xa0>)
 80037de:	f043 0302 	orr.w	r3, r3, #2
 80037e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003818 <HAL_COMP_MspInit+0xa0>)
 80037e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80037f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80037f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037f6:	2303      	movs	r3, #3
 80037f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037fe:	f107 0314 	add.w	r3, r7, #20
 8003802:	4619      	mov	r1, r3
 8003804:	4806      	ldr	r0, [pc, #24]	@ (8003820 <HAL_COMP_MspInit+0xa8>)
 8003806:	f004 fa4b 	bl	8007ca0 <HAL_GPIO_Init>
}
 800380a:	bf00      	nop
 800380c:	3728      	adds	r7, #40	@ 0x28
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40010204 	.word	0x40010204
 8003818:	40021000 	.word	0x40021000
 800381c:	40010210 	.word	0x40010210
 8003820:	48000400 	.word	0x48000400

08003824 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b08c      	sub	sp, #48	@ 0x30
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800382c:	f107 031c 	add.w	r3, r7, #28
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	605a      	str	r2, [r3, #4]
 8003836:	609a      	str	r2, [r3, #8]
 8003838:	60da      	str	r2, [r3, #12]
 800383a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a34      	ldr	r2, [pc, #208]	@ (8003914 <HAL_DAC_MspInit+0xf0>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d125      	bne.n	8003892 <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003846:	4b34      	ldr	r3, [pc, #208]	@ (8003918 <HAL_DAC_MspInit+0xf4>)
 8003848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800384a:	4a33      	ldr	r2, [pc, #204]	@ (8003918 <HAL_DAC_MspInit+0xf4>)
 800384c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003852:	4b31      	ldr	r3, [pc, #196]	@ (8003918 <HAL_DAC_MspInit+0xf4>)
 8003854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003856:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800385a:	61bb      	str	r3, [r7, #24]
 800385c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800385e:	4b2e      	ldr	r3, [pc, #184]	@ (8003918 <HAL_DAC_MspInit+0xf4>)
 8003860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003862:	4a2d      	ldr	r2, [pc, #180]	@ (8003918 <HAL_DAC_MspInit+0xf4>)
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800386a:	4b2b      	ldr	r3, [pc, #172]	@ (8003918 <HAL_DAC_MspInit+0xf4>)
 800386c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003876:	2310      	movs	r3, #16
 8003878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800387a:	2303      	movs	r3, #3
 800387c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387e:	2300      	movs	r3, #0
 8003880:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003882:	f107 031c 	add.w	r3, r7, #28
 8003886:	4619      	mov	r1, r3
 8003888:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800388c:	f004 fa08 	bl	8007ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC4_MspInit 1 */

  /* USER CODE END DAC4_MspInit 1 */
  }

}
 8003890:	e03b      	b.n	800390a <HAL_DAC_MspInit+0xe6>
  else if(hdac->Instance==DAC2)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a21      	ldr	r2, [pc, #132]	@ (800391c <HAL_DAC_MspInit+0xf8>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d125      	bne.n	80038e8 <HAL_DAC_MspInit+0xc4>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800389c:	4b1e      	ldr	r3, [pc, #120]	@ (8003918 <HAL_DAC_MspInit+0xf4>)
 800389e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003918 <HAL_DAC_MspInit+0xf4>)
 80038a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003918 <HAL_DAC_MspInit+0xf4>)
 80038aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b0:	613b      	str	r3, [r7, #16]
 80038b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038b4:	4b18      	ldr	r3, [pc, #96]	@ (8003918 <HAL_DAC_MspInit+0xf4>)
 80038b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038b8:	4a17      	ldr	r2, [pc, #92]	@ (8003918 <HAL_DAC_MspInit+0xf4>)
 80038ba:	f043 0301 	orr.w	r3, r3, #1
 80038be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038c0:	4b15      	ldr	r3, [pc, #84]	@ (8003918 <HAL_DAC_MspInit+0xf4>)
 80038c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80038cc:	2340      	movs	r3, #64	@ 0x40
 80038ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038d0:	2303      	movs	r3, #3
 80038d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d4:	2300      	movs	r3, #0
 80038d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038d8:	f107 031c 	add.w	r3, r7, #28
 80038dc:	4619      	mov	r1, r3
 80038de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038e2:	f004 f9dd 	bl	8007ca0 <HAL_GPIO_Init>
}
 80038e6:	e010      	b.n	800390a <HAL_DAC_MspInit+0xe6>
  else if(hdac->Instance==DAC4)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a0c      	ldr	r2, [pc, #48]	@ (8003920 <HAL_DAC_MspInit+0xfc>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d10b      	bne.n	800390a <HAL_DAC_MspInit+0xe6>
    __HAL_RCC_DAC4_CLK_ENABLE();
 80038f2:	4b09      	ldr	r3, [pc, #36]	@ (8003918 <HAL_DAC_MspInit+0xf4>)
 80038f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038f6:	4a08      	ldr	r2, [pc, #32]	@ (8003918 <HAL_DAC_MspInit+0xf4>)
 80038f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80038fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038fe:	4b06      	ldr	r3, [pc, #24]	@ (8003918 <HAL_DAC_MspInit+0xf4>)
 8003900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003902:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003906:	60bb      	str	r3, [r7, #8]
 8003908:	68bb      	ldr	r3, [r7, #8]
}
 800390a:	bf00      	nop
 800390c:	3730      	adds	r7, #48	@ 0x30
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	50000800 	.word	0x50000800
 8003918:	40021000 	.word	0x40021000
 800391c:	50000c00 	.word	0x50000c00
 8003920:	50001400 	.word	0x50001400

08003924 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  if(hhrtim->Instance==HRTIM1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a0a      	ldr	r2, [pc, #40]	@ (800395c <HAL_HRTIM_MspInit+0x38>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d10b      	bne.n	800394e <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8003936:	4b0a      	ldr	r3, [pc, #40]	@ (8003960 <HAL_HRTIM_MspInit+0x3c>)
 8003938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800393a:	4a09      	ldr	r2, [pc, #36]	@ (8003960 <HAL_HRTIM_MspInit+0x3c>)
 800393c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003940:	6613      	str	r3, [r2, #96]	@ 0x60
 8003942:	4b07      	ldr	r3, [pc, #28]	@ (8003960 <HAL_HRTIM_MspInit+0x3c>)
 8003944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003946:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END HRTIM1_MspInit 1 */

  }

}
 800394e:	bf00      	nop
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40016800 	.word	0x40016800
 8003960:	40021000 	.word	0x40021000

08003964 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b088      	sub	sp, #32
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800396c:	f107 030c 	add.w	r3, r7, #12
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	605a      	str	r2, [r3, #4]
 8003976:	609a      	str	r2, [r3, #8]
 8003978:	60da      	str	r2, [r3, #12]
 800397a:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a11      	ldr	r2, [pc, #68]	@ (80039c8 <HAL_HRTIM_MspPostInit+0x64>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d11c      	bne.n	80039c0 <HAL_HRTIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003986:	4b11      	ldr	r3, [pc, #68]	@ (80039cc <HAL_HRTIM_MspPostInit+0x68>)
 8003988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800398a:	4a10      	ldr	r2, [pc, #64]	@ (80039cc <HAL_HRTIM_MspPostInit+0x68>)
 800398c:	f043 0302 	orr.w	r3, r3, #2
 8003990:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003992:	4b0e      	ldr	r3, [pc, #56]	@ (80039cc <HAL_HRTIM_MspPostInit+0x68>)
 8003994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	60bb      	str	r3, [r7, #8]
 800399c:	68bb      	ldr	r3, [r7, #8]
    /**HRTIM1 GPIO Configuration
    PB12     ------> HRTIM1_CHC1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800399e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a4:	2302      	movs	r3, #2
 80039a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ac:	2303      	movs	r3, #3
 80039ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80039b0:	230d      	movs	r3, #13
 80039b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039b4:	f107 030c 	add.w	r3, r7, #12
 80039b8:	4619      	mov	r1, r3
 80039ba:	4805      	ldr	r0, [pc, #20]	@ (80039d0 <HAL_HRTIM_MspPostInit+0x6c>)
 80039bc:	f004 f970 	bl	8007ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 80039c0:	bf00      	nop
 80039c2:	3720      	adds	r7, #32
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40016800 	.word	0x40016800
 80039cc:	40021000 	.word	0x40021000
 80039d0:	48000400 	.word	0x48000400

080039d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b09e      	sub	sp, #120	@ 0x78
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039dc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	605a      	str	r2, [r3, #4]
 80039e6:	609a      	str	r2, [r3, #8]
 80039e8:	60da      	str	r2, [r3, #12]
 80039ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039ec:	f107 0310 	add.w	r3, r7, #16
 80039f0:	2254      	movs	r2, #84	@ 0x54
 80039f2:	2100      	movs	r1, #0
 80039f4:	4618      	mov	r0, r3
 80039f6:	f011 f840 	bl	8014a7a <memset>
  if(hi2c->Instance==I2C3)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a1f      	ldr	r2, [pc, #124]	@ (8003a7c <HAL_I2C_MspInit+0xa8>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d137      	bne.n	8003a74 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003a04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a08:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a0e:	f107 0310 	add.w	r3, r7, #16
 8003a12:	4618      	mov	r0, r3
 8003a14:	f008 fc22 	bl	800c25c <HAL_RCCEx_PeriphCLKConfig>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003a1e:	f7ff f8cd 	bl	8002bbc <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a22:	4b17      	ldr	r3, [pc, #92]	@ (8003a80 <HAL_I2C_MspInit+0xac>)
 8003a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a26:	4a16      	ldr	r2, [pc, #88]	@ (8003a80 <HAL_I2C_MspInit+0xac>)
 8003a28:	f043 0304 	orr.w	r3, r3, #4
 8003a2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a2e:	4b14      	ldr	r3, [pc, #80]	@ (8003a80 <HAL_I2C_MspInit+0xac>)
 8003a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a32:	f003 0304 	and.w	r3, r3, #4
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003a3a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003a3e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a40:	2312      	movs	r3, #18
 8003a42:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a44:	2300      	movs	r3, #0
 8003a46:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8003a4c:	2308      	movs	r3, #8
 8003a4e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a50:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003a54:	4619      	mov	r1, r3
 8003a56:	480b      	ldr	r0, [pc, #44]	@ (8003a84 <HAL_I2C_MspInit+0xb0>)
 8003a58:	f004 f922 	bl	8007ca0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003a5c:	4b08      	ldr	r3, [pc, #32]	@ (8003a80 <HAL_I2C_MspInit+0xac>)
 8003a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a60:	4a07      	ldr	r2, [pc, #28]	@ (8003a80 <HAL_I2C_MspInit+0xac>)
 8003a62:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003a66:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a68:	4b05      	ldr	r3, [pc, #20]	@ (8003a80 <HAL_I2C_MspInit+0xac>)
 8003a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a6c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003a70:	60bb      	str	r3, [r7, #8]
 8003a72:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8003a74:	bf00      	nop
 8003a76:	3778      	adds	r7, #120	@ 0x78
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40007800 	.word	0x40007800
 8003a80:	40021000 	.word	0x40021000
 8003a84:	48000800 	.word	0x48000800

08003a88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b09e      	sub	sp, #120	@ 0x78
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a90:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	605a      	str	r2, [r3, #4]
 8003a9a:	609a      	str	r2, [r3, #8]
 8003a9c:	60da      	str	r2, [r3, #12]
 8003a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003aa0:	f107 0310 	add.w	r3, r7, #16
 8003aa4:	2254      	movs	r2, #84	@ 0x54
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f010 ffe6 	bl	8014a7a <memset>
  if(huart->Instance==LPUART1)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a1f      	ldr	r2, [pc, #124]	@ (8003b30 <HAL_UART_MspInit+0xa8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d136      	bne.n	8003b26 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003ab8:	2320      	movs	r3, #32
 8003aba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003abc:	2300      	movs	r3, #0
 8003abe:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ac0:	f107 0310 	add.w	r3, r7, #16
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f008 fbc9 	bl	800c25c <HAL_RCCEx_PeriphCLKConfig>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003ad0:	f7ff f874 	bl	8002bbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003ad4:	4b17      	ldr	r3, [pc, #92]	@ (8003b34 <HAL_UART_MspInit+0xac>)
 8003ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad8:	4a16      	ldr	r2, [pc, #88]	@ (8003b34 <HAL_UART_MspInit+0xac>)
 8003ada:	f043 0301 	orr.w	r3, r3, #1
 8003ade:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003ae0:	4b14      	ldr	r3, [pc, #80]	@ (8003b34 <HAL_UART_MspInit+0xac>)
 8003ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aec:	4b11      	ldr	r3, [pc, #68]	@ (8003b34 <HAL_UART_MspInit+0xac>)
 8003aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003af0:	4a10      	ldr	r2, [pc, #64]	@ (8003b34 <HAL_UART_MspInit+0xac>)
 8003af2:	f043 0302 	orr.w	r3, r3, #2
 8003af6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003af8:	4b0e      	ldr	r3, [pc, #56]	@ (8003b34 <HAL_UART_MspInit+0xac>)
 8003afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	60bb      	str	r3, [r7, #8]
 8003b02:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003b04:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003b08:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b12:	2300      	movs	r3, #0
 8003b14:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003b16:	2308      	movs	r3, #8
 8003b18:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b1a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4805      	ldr	r0, [pc, #20]	@ (8003b38 <HAL_UART_MspInit+0xb0>)
 8003b22:	f004 f8bd 	bl	8007ca0 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8003b26:	bf00      	nop
 8003b28:	3778      	adds	r7, #120	@ 0x78
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40008000 	.word	0x40008000
 8003b34:	40021000 	.word	0x40021000
 8003b38:	48000400 	.word	0x48000400

08003b3c <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b08c      	sub	sp, #48	@ 0x30
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b44:	f107 031c 	add.w	r3, r7, #28
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	605a      	str	r2, [r3, #4]
 8003b4e:	609a      	str	r2, [r3, #8]
 8003b50:	60da      	str	r2, [r3, #12]
 8003b52:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a4d      	ldr	r2, [pc, #308]	@ (8003c90 <HAL_OPAMP_MspInit+0x154>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d119      	bne.n	8003b92 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b5e:	4b4d      	ldr	r3, [pc, #308]	@ (8003c94 <HAL_OPAMP_MspInit+0x158>)
 8003b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b62:	4a4c      	ldr	r2, [pc, #304]	@ (8003c94 <HAL_OPAMP_MspInit+0x158>)
 8003b64:	f043 0301 	orr.w	r3, r3, #1
 8003b68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b6a:	4b4a      	ldr	r3, [pc, #296]	@ (8003c94 <HAL_OPAMP_MspInit+0x158>)
 8003b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	61bb      	str	r3, [r7, #24]
 8003b74:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP1 GPIO Configuration
    PA7     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003b76:	2380      	movs	r3, #128	@ 0x80
 8003b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b82:	f107 031c 	add.w	r3, r7, #28
 8003b86:	4619      	mov	r1, r3
 8003b88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b8c:	f004 f888 	bl	8007ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }

}
 8003b90:	e079      	b.n	8003c86 <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP2)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a40      	ldr	r2, [pc, #256]	@ (8003c98 <HAL_OPAMP_MspInit+0x15c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d119      	bne.n	8003bd0 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b9c:	4b3d      	ldr	r3, [pc, #244]	@ (8003c94 <HAL_OPAMP_MspInit+0x158>)
 8003b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ba0:	4a3c      	ldr	r2, [pc, #240]	@ (8003c94 <HAL_OPAMP_MspInit+0x158>)
 8003ba2:	f043 0301 	orr.w	r3, r3, #1
 8003ba6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ba8:	4b3a      	ldr	r3, [pc, #232]	@ (8003c94 <HAL_OPAMP_MspInit+0x158>)
 8003baa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	617b      	str	r3, [r7, #20]
 8003bb2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003bb4:	2380      	movs	r3, #128	@ 0x80
 8003bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bc0:	f107 031c 	add.w	r3, r7, #28
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003bca:	f004 f869 	bl	8007ca0 <HAL_GPIO_Init>
}
 8003bce:	e05a      	b.n	8003c86 <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP3)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a31      	ldr	r2, [pc, #196]	@ (8003c9c <HAL_OPAMP_MspInit+0x160>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d119      	bne.n	8003c0e <HAL_OPAMP_MspInit+0xd2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bda:	4b2e      	ldr	r3, [pc, #184]	@ (8003c94 <HAL_OPAMP_MspInit+0x158>)
 8003bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bde:	4a2d      	ldr	r2, [pc, #180]	@ (8003c94 <HAL_OPAMP_MspInit+0x158>)
 8003be0:	f043 0302 	orr.w	r3, r3, #2
 8003be4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003be6:	4b2b      	ldr	r3, [pc, #172]	@ (8003c94 <HAL_OPAMP_MspInit+0x158>)
 8003be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	613b      	str	r3, [r7, #16]
 8003bf0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003bf2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c00:	f107 031c 	add.w	r3, r7, #28
 8003c04:	4619      	mov	r1, r3
 8003c06:	4826      	ldr	r0, [pc, #152]	@ (8003ca0 <HAL_OPAMP_MspInit+0x164>)
 8003c08:	f004 f84a 	bl	8007ca0 <HAL_GPIO_Init>
}
 8003c0c:	e03b      	b.n	8003c86 <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP5)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a24      	ldr	r2, [pc, #144]	@ (8003ca4 <HAL_OPAMP_MspInit+0x168>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d118      	bne.n	8003c4a <HAL_OPAMP_MspInit+0x10e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c18:	4b1e      	ldr	r3, [pc, #120]	@ (8003c94 <HAL_OPAMP_MspInit+0x158>)
 8003c1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8003c94 <HAL_OPAMP_MspInit+0x158>)
 8003c1e:	f043 0304 	orr.w	r3, r3, #4
 8003c22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c24:	4b1b      	ldr	r3, [pc, #108]	@ (8003c94 <HAL_OPAMP_MspInit+0x158>)
 8003c26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	60fb      	str	r3, [r7, #12]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003c30:	2308      	movs	r3, #8
 8003c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c34:	2303      	movs	r3, #3
 8003c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c3c:	f107 031c 	add.w	r3, r7, #28
 8003c40:	4619      	mov	r1, r3
 8003c42:	4819      	ldr	r0, [pc, #100]	@ (8003ca8 <HAL_OPAMP_MspInit+0x16c>)
 8003c44:	f004 f82c 	bl	8007ca0 <HAL_GPIO_Init>
}
 8003c48:	e01d      	b.n	8003c86 <HAL_OPAMP_MspInit+0x14a>
  else if(hopamp->Instance==OPAMP6)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a17      	ldr	r2, [pc, #92]	@ (8003cac <HAL_OPAMP_MspInit+0x170>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d118      	bne.n	8003c86 <HAL_OPAMP_MspInit+0x14a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c54:	4b0f      	ldr	r3, [pc, #60]	@ (8003c94 <HAL_OPAMP_MspInit+0x158>)
 8003c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c58:	4a0e      	ldr	r2, [pc, #56]	@ (8003c94 <HAL_OPAMP_MspInit+0x158>)
 8003c5a:	f043 0302 	orr.w	r3, r3, #2
 8003c5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c60:	4b0c      	ldr	r3, [pc, #48]	@ (8003c94 <HAL_OPAMP_MspInit+0x158>)
 8003c62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	60bb      	str	r3, [r7, #8]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003c6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c72:	2303      	movs	r3, #3
 8003c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c76:	2300      	movs	r3, #0
 8003c78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c7a:	f107 031c 	add.w	r3, r7, #28
 8003c7e:	4619      	mov	r1, r3
 8003c80:	4807      	ldr	r0, [pc, #28]	@ (8003ca0 <HAL_OPAMP_MspInit+0x164>)
 8003c82:	f004 f80d 	bl	8007ca0 <HAL_GPIO_Init>
}
 8003c86:	bf00      	nop
 8003c88:	3730      	adds	r7, #48	@ 0x30
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	40010300 	.word	0x40010300
 8003c94:	40021000 	.word	0x40021000
 8003c98:	40010304 	.word	0x40010304
 8003c9c:	40010308 	.word	0x40010308
 8003ca0:	48000400 	.word	0x48000400
 8003ca4:	40010310 	.word	0x40010310
 8003ca8:	48000800 	.word	0x48000800
 8003cac:	40010314 	.word	0x40010314

08003cb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b08a      	sub	sp, #40	@ 0x28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb8:	f107 0314 	add.w	r3, r7, #20
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	605a      	str	r2, [r3, #4]
 8003cc2:	609a      	str	r2, [r3, #8]
 8003cc4:	60da      	str	r2, [r3, #12]
 8003cc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a2c      	ldr	r2, [pc, #176]	@ (8003d80 <HAL_SPI_MspInit+0xd0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d151      	bne.n	8003d76 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003cd2:	4b2c      	ldr	r3, [pc, #176]	@ (8003d84 <HAL_SPI_MspInit+0xd4>)
 8003cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd6:	4a2b      	ldr	r2, [pc, #172]	@ (8003d84 <HAL_SPI_MspInit+0xd4>)
 8003cd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cde:	4b29      	ldr	r3, [pc, #164]	@ (8003d84 <HAL_SPI_MspInit+0xd4>)
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ce6:	613b      	str	r3, [r7, #16]
 8003ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cea:	4b26      	ldr	r3, [pc, #152]	@ (8003d84 <HAL_SPI_MspInit+0xd4>)
 8003cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cee:	4a25      	ldr	r2, [pc, #148]	@ (8003d84 <HAL_SPI_MspInit+0xd4>)
 8003cf0:	f043 0304 	orr.w	r3, r3, #4
 8003cf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cf6:	4b23      	ldr	r3, [pc, #140]	@ (8003d84 <HAL_SPI_MspInit+0xd4>)
 8003cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8003d02:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d08:	2302      	movs	r3, #2
 8003d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d10:	2300      	movs	r3, #0
 8003d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003d14:	2306      	movs	r3, #6
 8003d16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d18:	f107 0314 	add.w	r3, r7, #20
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	481a      	ldr	r0, [pc, #104]	@ (8003d88 <HAL_SPI_MspInit+0xd8>)
 8003d20:	f003 ffbe 	bl	8007ca0 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Channel3;
 8003d24:	4b19      	ldr	r3, [pc, #100]	@ (8003d8c <HAL_SPI_MspInit+0xdc>)
 8003d26:	4a1a      	ldr	r2, [pc, #104]	@ (8003d90 <HAL_SPI_MspInit+0xe0>)
 8003d28:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8003d2a:	4b18      	ldr	r3, [pc, #96]	@ (8003d8c <HAL_SPI_MspInit+0xdc>)
 8003d2c:	220f      	movs	r2, #15
 8003d2e:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d30:	4b16      	ldr	r3, [pc, #88]	@ (8003d8c <HAL_SPI_MspInit+0xdc>)
 8003d32:	2210      	movs	r2, #16
 8003d34:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d36:	4b15      	ldr	r3, [pc, #84]	@ (8003d8c <HAL_SPI_MspInit+0xdc>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003d3c:	4b13      	ldr	r3, [pc, #76]	@ (8003d8c <HAL_SPI_MspInit+0xdc>)
 8003d3e:	2280      	movs	r2, #128	@ 0x80
 8003d40:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d42:	4b12      	ldr	r3, [pc, #72]	@ (8003d8c <HAL_SPI_MspInit+0xdc>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d48:	4b10      	ldr	r3, [pc, #64]	@ (8003d8c <HAL_SPI_MspInit+0xdc>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8003d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8003d8c <HAL_SPI_MspInit+0xdc>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003d54:	4b0d      	ldr	r3, [pc, #52]	@ (8003d8c <HAL_SPI_MspInit+0xdc>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8003d5a:	480c      	ldr	r0, [pc, #48]	@ (8003d8c <HAL_SPI_MspInit+0xdc>)
 8003d5c:	f003 fd2e 	bl	80077bc <HAL_DMA_Init>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8003d66:	f7fe ff29 	bl	8002bbc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a07      	ldr	r2, [pc, #28]	@ (8003d8c <HAL_SPI_MspInit+0xdc>)
 8003d6e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003d70:	4a06      	ldr	r2, [pc, #24]	@ (8003d8c <HAL_SPI_MspInit+0xdc>)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8003d76:	bf00      	nop
 8003d78:	3728      	adds	r7, #40	@ 0x28
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40003c00 	.word	0x40003c00
 8003d84:	40021000 	.word	0x40021000
 8003d88:	48000800 	.word	0x48000800
 8003d8c:	20000a18 	.word	0x20000a18
 8003d90:	40020030 	.word	0x40020030

08003d94 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b090      	sub	sp, #64	@ 0x40
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	605a      	str	r2, [r3, #4]
 8003da6:	609a      	str	r2, [r3, #8]
 8003da8:	60da      	str	r2, [r3, #12]
 8003daa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a6a      	ldr	r2, [pc, #424]	@ (8003f5c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d128      	bne.n	8003e08 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003db6:	4b6a      	ldr	r3, [pc, #424]	@ (8003f60 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003db8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dba:	4a69      	ldr	r2, [pc, #420]	@ (8003f60 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003dbc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003dc0:	6613      	str	r3, [r2, #96]	@ 0x60
 8003dc2:	4b67      	ldr	r3, [pc, #412]	@ (8003f60 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003dc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dce:	4b64      	ldr	r3, [pc, #400]	@ (8003f60 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dd2:	4a63      	ldr	r2, [pc, #396]	@ (8003f60 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003dd4:	f043 0304 	orr.w	r3, r3, #4
 8003dd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003dda:	4b61      	ldr	r3, [pc, #388]	@ (8003f60 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dde:	f003 0304 	and.w	r3, r3, #4
 8003de2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003de6:	2303      	movs	r3, #3
 8003de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dea:	2302      	movs	r3, #2
 8003dec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003dee:	2301      	movs	r3, #1
 8003df0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003df2:	2303      	movs	r3, #3
 8003df4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003df6:	2302      	movs	r3, #2
 8003df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dfa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003dfe:	4619      	mov	r1, r3
 8003e00:	4858      	ldr	r0, [pc, #352]	@ (8003f64 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003e02:	f003 ff4d 	bl	8007ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 8003e06:	e0a4      	b.n	8003f52 <HAL_TIM_Encoder_MspInit+0x1be>
  else if(htim_encoder->Instance==TIM3)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a56      	ldr	r2, [pc, #344]	@ (8003f68 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d128      	bne.n	8003e64 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e12:	4b53      	ldr	r3, [pc, #332]	@ (8003f60 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e16:	4a52      	ldr	r2, [pc, #328]	@ (8003f60 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003e18:	f043 0302 	orr.w	r3, r3, #2
 8003e1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e1e:	4b50      	ldr	r3, [pc, #320]	@ (8003f60 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	623b      	str	r3, [r7, #32]
 8003e28:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e2a:	4b4d      	ldr	r3, [pc, #308]	@ (8003f60 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e2e:	4a4c      	ldr	r2, [pc, #304]	@ (8003f60 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003e30:	f043 0304 	orr.w	r3, r3, #4
 8003e34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e36:	4b4a      	ldr	r3, [pc, #296]	@ (8003f60 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e3a:	f003 0304 	and.w	r3, r3, #4
 8003e3e:	61fb      	str	r3, [r7, #28]
 8003e40:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e42:	23c0      	movs	r3, #192	@ 0xc0
 8003e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e46:	2302      	movs	r3, #2
 8003e48:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003e52:	2302      	movs	r3, #2
 8003e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4841      	ldr	r0, [pc, #260]	@ (8003f64 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003e5e:	f003 ff1f 	bl	8007ca0 <HAL_GPIO_Init>
}
 8003e62:	e076      	b.n	8003f52 <HAL_TIM_Encoder_MspInit+0x1be>
  else if(htim_encoder->Instance==TIM4)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a40      	ldr	r2, [pc, #256]	@ (8003f6c <HAL_TIM_Encoder_MspInit+0x1d8>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d128      	bne.n	8003ec0 <HAL_TIM_Encoder_MspInit+0x12c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003e6e:	4b3c      	ldr	r3, [pc, #240]	@ (8003f60 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e72:	4a3b      	ldr	r2, [pc, #236]	@ (8003f60 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003e74:	f043 0304 	orr.w	r3, r3, #4
 8003e78:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e7a:	4b39      	ldr	r3, [pc, #228]	@ (8003f60 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e7e:	f003 0304 	and.w	r3, r3, #4
 8003e82:	61bb      	str	r3, [r7, #24]
 8003e84:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e86:	4b36      	ldr	r3, [pc, #216]	@ (8003f60 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e8a:	4a35      	ldr	r2, [pc, #212]	@ (8003f60 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003e8c:	f043 0302 	orr.w	r3, r3, #2
 8003e90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e92:	4b33      	ldr	r3, [pc, #204]	@ (8003f60 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e9e:	23c0      	movs	r3, #192	@ 0xc0
 8003ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003eae:	2302      	movs	r3, #2
 8003eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eb2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	482d      	ldr	r0, [pc, #180]	@ (8003f70 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8003eba:	f003 fef1 	bl	8007ca0 <HAL_GPIO_Init>
}
 8003ebe:	e048      	b.n	8003f52 <HAL_TIM_Encoder_MspInit+0x1be>
  else if(htim_encoder->Instance==TIM20)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a2b      	ldr	r2, [pc, #172]	@ (8003f74 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d143      	bne.n	8003f52 <HAL_TIM_Encoder_MspInit+0x1be>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8003eca:	4b25      	ldr	r3, [pc, #148]	@ (8003f60 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ece:	4a24      	ldr	r2, [pc, #144]	@ (8003f60 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003ed0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ed4:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ed6:	4b22      	ldr	r3, [pc, #136]	@ (8003f60 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003ed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ede:	613b      	str	r3, [r7, #16]
 8003ee0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ee2:	4b1f      	ldr	r3, [pc, #124]	@ (8003f60 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ee6:	4a1e      	ldr	r2, [pc, #120]	@ (8003f60 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003ee8:	f043 0304 	orr.w	r3, r3, #4
 8003eec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003eee:	4b1c      	ldr	r3, [pc, #112]	@ (8003f60 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ef2:	f003 0304 	and.w	r3, r3, #4
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003efa:	4b19      	ldr	r3, [pc, #100]	@ (8003f60 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003efe:	4a18      	ldr	r2, [pc, #96]	@ (8003f60 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003f00:	f043 0302 	orr.w	r3, r3, #2
 8003f04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f06:	4b16      	ldr	r3, [pc, #88]	@ (8003f60 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	60bb      	str	r3, [r7, #8]
 8003f10:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003f12:	2304      	movs	r3, #4
 8003f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f16:	2302      	movs	r3, #2
 8003f18:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8003f22:	2306      	movs	r3, #6
 8003f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	480d      	ldr	r0, [pc, #52]	@ (8003f64 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003f2e:	f003 feb7 	bl	8007ca0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003f32:	2304      	movs	r3, #4
 8003f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f36:	2302      	movs	r3, #2
 8003f38:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8003f42:	2303      	movs	r3, #3
 8003f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4808      	ldr	r0, [pc, #32]	@ (8003f70 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8003f4e:	f003 fea7 	bl	8007ca0 <HAL_GPIO_Init>
}
 8003f52:	bf00      	nop
 8003f54:	3740      	adds	r7, #64	@ 0x40
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	40012c00 	.word	0x40012c00
 8003f60:	40021000 	.word	0x40021000
 8003f64:	48000800 	.word	0x48000800
 8003f68:	40000400 	.word	0x40000400
 8003f6c:	40000800 	.word	0x40000800
 8003f70:	48000400 	.word	0x48000400
 8003f74:	40015000 	.word	0x40015000

08003f78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a4f      	ldr	r2, [pc, #316]	@ (80040c4 <HAL_TIM_Base_MspInit+0x14c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d10c      	bne.n	8003fa4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003f8a:	4b4f      	ldr	r3, [pc, #316]	@ (80040c8 <HAL_TIM_Base_MspInit+0x150>)
 8003f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f8e:	4a4e      	ldr	r2, [pc, #312]	@ (80040c8 <HAL_TIM_Base_MspInit+0x150>)
 8003f90:	f043 0310 	orr.w	r3, r3, #16
 8003f94:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f96:	4b4c      	ldr	r3, [pc, #304]	@ (80040c8 <HAL_TIM_Base_MspInit+0x150>)
 8003f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f9a:	f003 0310 	and.w	r3, r3, #16
 8003f9e:	617b      	str	r3, [r7, #20]
 8003fa0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003fa2:	e08a      	b.n	80040ba <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM7)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a48      	ldr	r2, [pc, #288]	@ (80040cc <HAL_TIM_Base_MspInit+0x154>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d10c      	bne.n	8003fc8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003fae:	4b46      	ldr	r3, [pc, #280]	@ (80040c8 <HAL_TIM_Base_MspInit+0x150>)
 8003fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fb2:	4a45      	ldr	r2, [pc, #276]	@ (80040c8 <HAL_TIM_Base_MspInit+0x150>)
 8003fb4:	f043 0320 	orr.w	r3, r3, #32
 8003fb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fba:	4b43      	ldr	r3, [pc, #268]	@ (80040c8 <HAL_TIM_Base_MspInit+0x150>)
 8003fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fbe:	f003 0320 	and.w	r3, r3, #32
 8003fc2:	613b      	str	r3, [r7, #16]
 8003fc4:	693b      	ldr	r3, [r7, #16]
}
 8003fc6:	e078      	b.n	80040ba <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM8)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a40      	ldr	r2, [pc, #256]	@ (80040d0 <HAL_TIM_Base_MspInit+0x158>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d137      	bne.n	8004042 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003fd2:	4b3d      	ldr	r3, [pc, #244]	@ (80040c8 <HAL_TIM_Base_MspInit+0x150>)
 8003fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fd6:	4a3c      	ldr	r2, [pc, #240]	@ (80040c8 <HAL_TIM_Base_MspInit+0x150>)
 8003fd8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003fdc:	6613      	str	r3, [r2, #96]	@ 0x60
 8003fde:	4b3a      	ldr	r3, [pc, #232]	@ (80040c8 <HAL_TIM_Base_MspInit+0x150>)
 8003fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fe2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
    hdma_tim8_ch3.Instance = DMA1_Channel1;
 8003fea:	4b3a      	ldr	r3, [pc, #232]	@ (80040d4 <HAL_TIM_Base_MspInit+0x15c>)
 8003fec:	4a3a      	ldr	r2, [pc, #232]	@ (80040d8 <HAL_TIM_Base_MspInit+0x160>)
 8003fee:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch3.Init.Request = DMA_REQUEST_TIM8_CH3;
 8003ff0:	4b38      	ldr	r3, [pc, #224]	@ (80040d4 <HAL_TIM_Base_MspInit+0x15c>)
 8003ff2:	2233      	movs	r2, #51	@ 0x33
 8003ff4:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ff6:	4b37      	ldr	r3, [pc, #220]	@ (80040d4 <HAL_TIM_Base_MspInit+0x15c>)
 8003ff8:	2210      	movs	r2, #16
 8003ffa:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ffc:	4b35      	ldr	r3, [pc, #212]	@ (80040d4 <HAL_TIM_Base_MspInit+0x15c>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8004002:	4b34      	ldr	r3, [pc, #208]	@ (80040d4 <HAL_TIM_Base_MspInit+0x15c>)
 8004004:	2280      	movs	r2, #128	@ 0x80
 8004006:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004008:	4b32      	ldr	r3, [pc, #200]	@ (80040d4 <HAL_TIM_Base_MspInit+0x15c>)
 800400a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800400e:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004010:	4b30      	ldr	r3, [pc, #192]	@ (80040d4 <HAL_TIM_Base_MspInit+0x15c>)
 8004012:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004016:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch3.Init.Mode = DMA_NORMAL;
 8004018:	4b2e      	ldr	r3, [pc, #184]	@ (80040d4 <HAL_TIM_Base_MspInit+0x15c>)
 800401a:	2200      	movs	r2, #0
 800401c:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800401e:	4b2d      	ldr	r3, [pc, #180]	@ (80040d4 <HAL_TIM_Base_MspInit+0x15c>)
 8004020:	2200      	movs	r2, #0
 8004022:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim8_ch3) != HAL_OK)
 8004024:	482b      	ldr	r0, [pc, #172]	@ (80040d4 <HAL_TIM_Base_MspInit+0x15c>)
 8004026:	f003 fbc9 	bl	80077bc <HAL_DMA_Init>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <HAL_TIM_Base_MspInit+0xbc>
      Error_Handler();
 8004030:	f7fe fdc4 	bl	8002bbc <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim8_ch3);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a27      	ldr	r2, [pc, #156]	@ (80040d4 <HAL_TIM_Base_MspInit+0x15c>)
 8004038:	62da      	str	r2, [r3, #44]	@ 0x2c
 800403a:	4a26      	ldr	r2, [pc, #152]	@ (80040d4 <HAL_TIM_Base_MspInit+0x15c>)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8004040:	e03b      	b.n	80040ba <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM15)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a25      	ldr	r2, [pc, #148]	@ (80040dc <HAL_TIM_Base_MspInit+0x164>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d136      	bne.n	80040ba <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800404c:	4b1e      	ldr	r3, [pc, #120]	@ (80040c8 <HAL_TIM_Base_MspInit+0x150>)
 800404e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004050:	4a1d      	ldr	r2, [pc, #116]	@ (80040c8 <HAL_TIM_Base_MspInit+0x150>)
 8004052:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004056:	6613      	str	r3, [r2, #96]	@ 0x60
 8004058:	4b1b      	ldr	r3, [pc, #108]	@ (80040c8 <HAL_TIM_Base_MspInit+0x150>)
 800405a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800405c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004060:	60bb      	str	r3, [r7, #8]
 8004062:	68bb      	ldr	r3, [r7, #8]
    hdma_tim15_ch1.Instance = DMA1_Channel2;
 8004064:	4b1e      	ldr	r3, [pc, #120]	@ (80040e0 <HAL_TIM_Base_MspInit+0x168>)
 8004066:	4a1f      	ldr	r2, [pc, #124]	@ (80040e4 <HAL_TIM_Base_MspInit+0x16c>)
 8004068:	601a      	str	r2, [r3, #0]
    hdma_tim15_ch1.Init.Request = DMA_REQUEST_TIM15_CH1;
 800406a:	4b1d      	ldr	r3, [pc, #116]	@ (80040e0 <HAL_TIM_Base_MspInit+0x168>)
 800406c:	224e      	movs	r2, #78	@ 0x4e
 800406e:	605a      	str	r2, [r3, #4]
    hdma_tim15_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004070:	4b1b      	ldr	r3, [pc, #108]	@ (80040e0 <HAL_TIM_Base_MspInit+0x168>)
 8004072:	2210      	movs	r2, #16
 8004074:	609a      	str	r2, [r3, #8]
    hdma_tim15_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004076:	4b1a      	ldr	r3, [pc, #104]	@ (80040e0 <HAL_TIM_Base_MspInit+0x168>)
 8004078:	2200      	movs	r2, #0
 800407a:	60da      	str	r2, [r3, #12]
    hdma_tim15_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800407c:	4b18      	ldr	r3, [pc, #96]	@ (80040e0 <HAL_TIM_Base_MspInit+0x168>)
 800407e:	2280      	movs	r2, #128	@ 0x80
 8004080:	611a      	str	r2, [r3, #16]
    hdma_tim15_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004082:	4b17      	ldr	r3, [pc, #92]	@ (80040e0 <HAL_TIM_Base_MspInit+0x168>)
 8004084:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004088:	615a      	str	r2, [r3, #20]
    hdma_tim15_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800408a:	4b15      	ldr	r3, [pc, #84]	@ (80040e0 <HAL_TIM_Base_MspInit+0x168>)
 800408c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004090:	619a      	str	r2, [r3, #24]
    hdma_tim15_ch1.Init.Mode = DMA_NORMAL;
 8004092:	4b13      	ldr	r3, [pc, #76]	@ (80040e0 <HAL_TIM_Base_MspInit+0x168>)
 8004094:	2200      	movs	r2, #0
 8004096:	61da      	str	r2, [r3, #28]
    hdma_tim15_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8004098:	4b11      	ldr	r3, [pc, #68]	@ (80040e0 <HAL_TIM_Base_MspInit+0x168>)
 800409a:	2200      	movs	r2, #0
 800409c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim15_ch1) != HAL_OK)
 800409e:	4810      	ldr	r0, [pc, #64]	@ (80040e0 <HAL_TIM_Base_MspInit+0x168>)
 80040a0:	f003 fb8c 	bl	80077bc <HAL_DMA_Init>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <HAL_TIM_Base_MspInit+0x136>
      Error_Handler();
 80040aa:	f7fe fd87 	bl	8002bbc <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a0b      	ldr	r2, [pc, #44]	@ (80040e0 <HAL_TIM_Base_MspInit+0x168>)
 80040b2:	625a      	str	r2, [r3, #36]	@ 0x24
 80040b4:	4a0a      	ldr	r2, [pc, #40]	@ (80040e0 <HAL_TIM_Base_MspInit+0x168>)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80040ba:	bf00      	nop
 80040bc:	3718      	adds	r7, #24
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	40001000 	.word	0x40001000
 80040c8:	40021000 	.word	0x40021000
 80040cc:	40001400 	.word	0x40001400
 80040d0:	40013400 	.word	0x40013400
 80040d4:	20000cd8 	.word	0x20000cd8
 80040d8:	40020008 	.word	0x40020008
 80040dc:	40014000 	.word	0x40014000
 80040e0:	20000d38 	.word	0x20000d38
 80040e4:	4002001c 	.word	0x4002001c

080040e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b08a      	sub	sp, #40	@ 0x28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f0:	f107 0314 	add.w	r3, r7, #20
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	605a      	str	r2, [r3, #4]
 80040fa:	609a      	str	r2, [r3, #8]
 80040fc:	60da      	str	r2, [r3, #12]
 80040fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a32      	ldr	r2, [pc, #200]	@ (80041d0 <HAL_TIM_MspPostInit+0xe8>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d13b      	bne.n	8004182 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800410a:	4b32      	ldr	r3, [pc, #200]	@ (80041d4 <HAL_TIM_MspPostInit+0xec>)
 800410c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800410e:	4a31      	ldr	r2, [pc, #196]	@ (80041d4 <HAL_TIM_MspPostInit+0xec>)
 8004110:	f043 0301 	orr.w	r3, r3, #1
 8004114:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004116:	4b2f      	ldr	r3, [pc, #188]	@ (80041d4 <HAL_TIM_MspPostInit+0xec>)
 8004118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	613b      	str	r3, [r7, #16]
 8004120:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004122:	4b2c      	ldr	r3, [pc, #176]	@ (80041d4 <HAL_TIM_MspPostInit+0xec>)
 8004124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004126:	4a2b      	ldr	r2, [pc, #172]	@ (80041d4 <HAL_TIM_MspPostInit+0xec>)
 8004128:	f043 0302 	orr.w	r3, r3, #2
 800412c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800412e:	4b29      	ldr	r3, [pc, #164]	@ (80041d4 <HAL_TIM_MspPostInit+0xec>)
 8004130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PA15     ------> TIM8_CH1
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800413a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800413e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004140:	2302      	movs	r3, #2
 8004142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004144:	2302      	movs	r3, #2
 8004146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004148:	2303      	movs	r3, #3
 800414a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 800414c:	2302      	movs	r3, #2
 800414e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004150:	f107 0314 	add.w	r3, r7, #20
 8004154:	4619      	mov	r1, r3
 8004156:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800415a:	f003 fda1 	bl	8007ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800415e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004164:	2302      	movs	r3, #2
 8004166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004168:	2300      	movs	r3, #0
 800416a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800416c:	2303      	movs	r3, #3
 800416e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8004170:	230a      	movs	r3, #10
 8004172:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004174:	f107 0314 	add.w	r3, r7, #20
 8004178:	4619      	mov	r1, r3
 800417a:	4817      	ldr	r0, [pc, #92]	@ (80041d8 <HAL_TIM_MspPostInit+0xf0>)
 800417c:	f003 fd90 	bl	8007ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8004180:	e021      	b.n	80041c6 <HAL_TIM_MspPostInit+0xde>
  else if(htim->Instance==TIM15)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a15      	ldr	r2, [pc, #84]	@ (80041dc <HAL_TIM_MspPostInit+0xf4>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d11c      	bne.n	80041c6 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800418c:	4b11      	ldr	r3, [pc, #68]	@ (80041d4 <HAL_TIM_MspPostInit+0xec>)
 800418e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004190:	4a10      	ldr	r2, [pc, #64]	@ (80041d4 <HAL_TIM_MspPostInit+0xec>)
 8004192:	f043 0302 	orr.w	r3, r3, #2
 8004196:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004198:	4b0e      	ldr	r3, [pc, #56]	@ (80041d4 <HAL_TIM_MspPostInit+0xec>)
 800419a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	60bb      	str	r3, [r7, #8]
 80041a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80041a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80041a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041aa:	2302      	movs	r3, #2
 80041ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80041ae:	2301      	movs	r3, #1
 80041b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041b2:	2303      	movs	r3, #3
 80041b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 80041b6:	2301      	movs	r3, #1
 80041b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041ba:	f107 0314 	add.w	r3, r7, #20
 80041be:	4619      	mov	r1, r3
 80041c0:	4805      	ldr	r0, [pc, #20]	@ (80041d8 <HAL_TIM_MspPostInit+0xf0>)
 80041c2:	f003 fd6d 	bl	8007ca0 <HAL_GPIO_Init>
}
 80041c6:	bf00      	nop
 80041c8:	3728      	adds	r7, #40	@ 0x28
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	40013400 	.word	0x40013400
 80041d4:	40021000 	.word	0x40021000
 80041d8:	48000400 	.word	0x48000400
 80041dc:	40014000 	.word	0x40014000

080041e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80041e4:	f007 ffd8 	bl	800c198 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80041e8:	bf00      	nop
 80041ea:	e7fd      	b.n	80041e8 <NMI_Handler+0x8>

080041ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041f0:	bf00      	nop
 80041f2:	e7fd      	b.n	80041f0 <HardFault_Handler+0x4>

080041f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041f8:	bf00      	nop
 80041fa:	e7fd      	b.n	80041f8 <MemManage_Handler+0x4>

080041fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004200:	bf00      	nop
 8004202:	e7fd      	b.n	8004200 <BusFault_Handler+0x4>

08004204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004208:	bf00      	nop
 800420a:	e7fd      	b.n	8004208 <UsageFault_Handler+0x4>

0800420c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004210:	bf00      	nop
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800421a:	b480      	push	{r7}
 800421c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800421e:	bf00      	nop
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800422c:	bf00      	nop
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800423a:	f000 fae5 	bl	8004808 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800423e:	bf00      	nop
 8004240:	bd80      	pop	{r7, pc}

08004242 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004246:	2001      	movs	r0, #1
 8004248:	f003 fec4 	bl	8007fd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800424c:	bf00      	nop
 800424e:	bd80      	pop	{r7, pc}

08004250 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004254:	2002      	movs	r0, #2
 8004256:	f003 febd 	bl	8007fd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800425a:	bf00      	nop
 800425c:	bd80      	pop	{r7, pc}

0800425e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004262:	2004      	movs	r0, #4
 8004264:	f003 feb6 	bl	8007fd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004268:	bf00      	nop
 800426a:	bd80      	pop	{r7, pc}

0800426c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004270:	2008      	movs	r0, #8
 8004272:	f003 feaf 	bl	8007fd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004276:	bf00      	nop
 8004278:	bd80      	pop	{r7, pc}

0800427a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800427e:	2010      	movs	r0, #16
 8004280:	f003 fea8 	bl	8007fd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004284:	bf00      	nop
 8004286:	bd80      	pop	{r7, pc}

08004288 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch3);
 800428c:	4802      	ldr	r0, [pc, #8]	@ (8004298 <DMA1_Channel1_IRQHandler+0x10>)
 800428e:	f003 fbb8 	bl	8007a02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004292:	bf00      	nop
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	20000cd8 	.word	0x20000cd8

0800429c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim15_ch1);
 80042a0:	4802      	ldr	r0, [pc, #8]	@ (80042ac <DMA1_Channel2_IRQHandler+0x10>)
 80042a2:	f003 fbae 	bl	8007a02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80042a6:	bf00      	nop
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	20000d38 	.word	0x20000d38

080042b0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80042b4:	4802      	ldr	r0, [pc, #8]	@ (80042c0 <DMA1_Channel3_IRQHandler+0x10>)
 80042b6:	f003 fba4 	bl	8007a02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80042ba:	bf00      	nop
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	20000a18 	.word	0x20000a18

080042c4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 80042c8:	4802      	ldr	r0, [pc, #8]	@ (80042d4 <DMA1_Channel4_IRQHandler+0x10>)
 80042ca:	f003 fb9a 	bl	8007a02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80042ce:	bf00      	nop
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	200005c0 	.word	0x200005c0

080042d8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80042dc:	4802      	ldr	r0, [pc, #8]	@ (80042e8 <DMA1_Channel5_IRQHandler+0x10>)
 80042de:	f003 fb90 	bl	8007a02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80042e2:	bf00      	nop
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	20000500 	.word	0x20000500

080042ec <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80042f0:	4802      	ldr	r0, [pc, #8]	@ (80042fc <DMA1_Channel6_IRQHandler+0x10>)
 80042f2:	f003 fb86 	bl	8007a02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80042f6:	bf00      	nop
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	20000560 	.word	0x20000560

08004300 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004304:	4802      	ldr	r0, [pc, #8]	@ (8004310 <USB_LP_IRQHandler+0x10>)
 8004306:	f005 fd89 	bl	8009e1c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800430a:	bf00      	nop
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	2000499c 	.word	0x2000499c

08004314 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	DEBUG_COUNT++;
 8004318:	4b07      	ldr	r3, [pc, #28]	@ (8004338 <EXTI9_5_IRQHandler+0x24>)
 800431a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431e:	1c50      	adds	r0, r2, #1
 8004320:	f143 0100 	adc.w	r1, r3, #0
 8004324:	4b04      	ldr	r3, [pc, #16]	@ (8004338 <EXTI9_5_IRQHandler+0x24>)
 8004326:	e9c3 0100 	strd	r0, r1, [r3]

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800432a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800432e:	f003 fe51 	bl	8007fd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004332:	bf00      	nop
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	20002db0 	.word	0x20002db0

0800433c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	  FT6336_GetTouchPoint(&TouchPoints);
 8004340:	4808      	ldr	r0, [pc, #32]	@ (8004364 <EXTI15_10_IRQHandler+0x28>)
 8004342:	f7fc ffab 	bl	800129c <FT6336_GetTouchPoint>

	  ST7789_DrawPixel(TouchPoints.point1_x, TouchPoints.point1_y, 0xffffff);
 8004346:	4b07      	ldr	r3, [pc, #28]	@ (8004364 <EXTI15_10_IRQHandler+0x28>)
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	4a06      	ldr	r2, [pc, #24]	@ (8004364 <EXTI15_10_IRQHandler+0x28>)
 800434c:	8851      	ldrh	r1, [r2, #2]
 800434e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004352:	4618      	mov	r0, r3
 8004354:	f7fe fe04 	bl	8002f60 <ST7789_DrawPixel>


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8004358:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800435c:	f003 fe3a 	bl	8007fd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004360:	bf00      	nop
 8004362:	bd80      	pop	{r7, pc}
 8004364:	200003b4 	.word	0x200003b4

08004368 <ADC5_IRQHandler>:

/**
  * @brief This function handles ADC5 global interrupt.
  */
void ADC5_IRQHandler(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC5_IRQn 0 */

	uint32_t value = BUFFER_SYS_ADC[0];
 800436e:	4b22      	ldr	r3, [pc, #136]	@ (80043f8 <ADC5_IRQHandler+0x90>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	607b      	str	r3, [r7, #4]

    if (value >= 0 && value < 1500) {
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f240 52db 	movw	r2, #1499	@ 0x5db
 800437a:	4293      	cmp	r3, r2
 800437c:	d805      	bhi.n	800438a <ADC5_IRQHandler+0x22>
    	input.KEY_ENC0=1;
 800437e:	4a1f      	ldr	r2, [pc, #124]	@ (80043fc <ADC5_IRQHandler+0x94>)
 8004380:	7813      	ldrb	r3, [r2, #0]
 8004382:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004386:	7013      	strb	r3, [r2, #0]
 8004388:	e02e      	b.n	80043e8 <ADC5_IRQHandler+0x80>
    } else if (value >= 1500 && value < 2250) {
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f240 52db 	movw	r2, #1499	@ 0x5db
 8004390:	4293      	cmp	r3, r2
 8004392:	d90a      	bls.n	80043aa <ADC5_IRQHandler+0x42>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f640 02c9 	movw	r2, #2249	@ 0x8c9
 800439a:	4293      	cmp	r3, r2
 800439c:	d805      	bhi.n	80043aa <ADC5_IRQHandler+0x42>
    	input.KEY_ENC1=1;
 800439e:	4a17      	ldr	r2, [pc, #92]	@ (80043fc <ADC5_IRQHandler+0x94>)
 80043a0:	7813      	ldrb	r3, [r2, #0]
 80043a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043a6:	7013      	strb	r3, [r2, #0]
 80043a8:	e01e      	b.n	80043e8 <ADC5_IRQHandler+0x80>
    } else if (value >= 2250 && value < 2750) {
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f640 02c9 	movw	r2, #2249	@ 0x8c9
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d90a      	bls.n	80043ca <ADC5_IRQHandler+0x62>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f640 22bd 	movw	r2, #2749	@ 0xabd
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d805      	bhi.n	80043ca <ADC5_IRQHandler+0x62>
    	input.KEY_ENC2=1;
 80043be:	4a0f      	ldr	r2, [pc, #60]	@ (80043fc <ADC5_IRQHandler+0x94>)
 80043c0:	7853      	ldrb	r3, [r2, #1]
 80043c2:	f043 0301 	orr.w	r3, r3, #1
 80043c6:	7053      	strb	r3, [r2, #1]
 80043c8:	e00e      	b.n	80043e8 <ADC5_IRQHandler+0x80>
    } else if (value >= 2750 && value <= 3500) {
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f640 22bd 	movw	r2, #2749	@ 0xabd
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d909      	bls.n	80043e8 <ADC5_IRQHandler+0x80>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f640 52ac 	movw	r2, #3500	@ 0xdac
 80043da:	4293      	cmp	r3, r2
 80043dc:	d804      	bhi.n	80043e8 <ADC5_IRQHandler+0x80>
    	input.KEY_ENC3=1;
 80043de:	4a07      	ldr	r2, [pc, #28]	@ (80043fc <ADC5_IRQHandler+0x94>)
 80043e0:	7853      	ldrb	r3, [r2, #1]
 80043e2:	f043 0302 	orr.w	r3, r3, #2
 80043e6:	7053      	strb	r3, [r2, #1]
    }


  /* USER CODE END ADC5_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc5);
 80043e8:	4805      	ldr	r0, [pc, #20]	@ (8004400 <ADC5_IRQHandler+0x98>)
 80043ea:	f001 f819 	bl	8005420 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC5_IRQn 1 */

  /* USER CODE END ADC5_IRQn 1 */
}
 80043ee:	bf00      	nop
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	20000d98 	.word	0x20000d98
 80043fc:	20002dc0 	.word	0x20002dc0
 8004400:	20000494 	.word	0x20000494

08004404 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  return 1;
 8004408:	2301      	movs	r3, #1
}
 800440a:	4618      	mov	r0, r3
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <_kill>:

int _kill(int pid, int sig)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800441e:	f010 fb7f 	bl	8014b20 <__errno>
 8004422:	4603      	mov	r3, r0
 8004424:	2216      	movs	r2, #22
 8004426:	601a      	str	r2, [r3, #0]
  return -1;
 8004428:	f04f 33ff 	mov.w	r3, #4294967295
}
 800442c:	4618      	mov	r0, r3
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <_exit>:

void _exit (int status)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800443c:	f04f 31ff 	mov.w	r1, #4294967295
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f7ff ffe7 	bl	8004414 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004446:	bf00      	nop
 8004448:	e7fd      	b.n	8004446 <_exit+0x12>

0800444a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b086      	sub	sp, #24
 800444e:	af00      	add	r7, sp, #0
 8004450:	60f8      	str	r0, [r7, #12]
 8004452:	60b9      	str	r1, [r7, #8]
 8004454:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004456:	2300      	movs	r3, #0
 8004458:	617b      	str	r3, [r7, #20]
 800445a:	e00a      	b.n	8004472 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800445c:	f3af 8000 	nop.w
 8004460:	4601      	mov	r1, r0
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	1c5a      	adds	r2, r3, #1
 8004466:	60ba      	str	r2, [r7, #8]
 8004468:	b2ca      	uxtb	r2, r1
 800446a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	3301      	adds	r3, #1
 8004470:	617b      	str	r3, [r7, #20]
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	429a      	cmp	r2, r3
 8004478:	dbf0      	blt.n	800445c <_read+0x12>
  }

  return len;
 800447a:	687b      	ldr	r3, [r7, #4]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3718      	adds	r7, #24
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004490:	2300      	movs	r3, #0
 8004492:	617b      	str	r3, [r7, #20]
 8004494:	e009      	b.n	80044aa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	1c5a      	adds	r2, r3, #1
 800449a:	60ba      	str	r2, [r7, #8]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fc ff6a 	bl	8001378 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	3301      	adds	r3, #1
 80044a8:	617b      	str	r3, [r7, #20]
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	dbf1      	blt.n	8004496 <_write+0x12>
  }
  return len;
 80044b2:	687b      	ldr	r3, [r7, #4]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3718      	adds	r7, #24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <_close>:

int _close(int file)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80044c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80044e4:	605a      	str	r2, [r3, #4]
  return 0;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <_isatty>:

int _isatty(int file)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80044fc:	2301      	movs	r3, #1
}
 80044fe:	4618      	mov	r0, r3
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800450a:	b480      	push	{r7}
 800450c:	b085      	sub	sp, #20
 800450e:	af00      	add	r7, sp, #0
 8004510:	60f8      	str	r0, [r7, #12]
 8004512:	60b9      	str	r1, [r7, #8]
 8004514:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800452c:	4a14      	ldr	r2, [pc, #80]	@ (8004580 <_sbrk+0x5c>)
 800452e:	4b15      	ldr	r3, [pc, #84]	@ (8004584 <_sbrk+0x60>)
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004538:	4b13      	ldr	r3, [pc, #76]	@ (8004588 <_sbrk+0x64>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d102      	bne.n	8004546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004540:	4b11      	ldr	r3, [pc, #68]	@ (8004588 <_sbrk+0x64>)
 8004542:	4a12      	ldr	r2, [pc, #72]	@ (800458c <_sbrk+0x68>)
 8004544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004546:	4b10      	ldr	r3, [pc, #64]	@ (8004588 <_sbrk+0x64>)
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4413      	add	r3, r2
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	429a      	cmp	r2, r3
 8004552:	d207      	bcs.n	8004564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004554:	f010 fae4 	bl	8014b20 <__errno>
 8004558:	4603      	mov	r3, r0
 800455a:	220c      	movs	r2, #12
 800455c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800455e:	f04f 33ff 	mov.w	r3, #4294967295
 8004562:	e009      	b.n	8004578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004564:	4b08      	ldr	r3, [pc, #32]	@ (8004588 <_sbrk+0x64>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800456a:	4b07      	ldr	r3, [pc, #28]	@ (8004588 <_sbrk+0x64>)
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4413      	add	r3, r2
 8004572:	4a05      	ldr	r2, [pc, #20]	@ (8004588 <_sbrk+0x64>)
 8004574:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004576:	68fb      	ldr	r3, [r7, #12]
}
 8004578:	4618      	mov	r0, r3
 800457a:	3718      	adds	r7, #24
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	20020000 	.word	0x20020000
 8004584:	00000400 	.word	0x00000400
 8004588:	20003ab0 	.word	0x20003ab0
 800458c:	20004fe8 	.word	0x20004fe8

08004590 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004594:	4b06      	ldr	r3, [pc, #24]	@ (80045b0 <SystemInit+0x20>)
 8004596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800459a:	4a05      	ldr	r2, [pc, #20]	@ (80045b0 <SystemInit+0x20>)
 800459c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80045a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80045a4:	bf00      	nop
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	e000ed00 	.word	0xe000ed00

080045b4 <WS2812_Write_Data>:
 * @param  Color:颜色24bit of RGB888
 * @param  index:灯的标号
 * @return None
 */
void WS2812_Write_Data(uint32_t Color, uint8_t index)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	460b      	mov	r3, r1
 80045be:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < 24; i++)
 80045c0:	2300      	movs	r3, #0
 80045c2:	73fb      	strb	r3, [r7, #15]
 80045c4:	e018      	b.n	80045f8 <WS2812_Write_Data+0x44>
		WS2812_Buf[24 * index + i] = (((Color << i) & 0X800000) ? High_Code : Low_Code);
 80045c6:	7bfb      	ldrb	r3, [r7, #15]
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	fa02 f303 	lsl.w	r3, r2, r3
 80045ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <WS2812_Write_Data+0x26>
 80045d6:	215a      	movs	r1, #90	@ 0x5a
 80045d8:	e000      	b.n	80045dc <WS2812_Write_Data+0x28>
 80045da:	212d      	movs	r1, #45	@ 0x2d
 80045dc:	78fa      	ldrb	r2, [r7, #3]
 80045de:	4613      	mov	r3, r2
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	4413      	add	r3, r2
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	461a      	mov	r2, r3
 80045e8:	7bfb      	ldrb	r3, [r7, #15]
 80045ea:	4413      	add	r3, r2
 80045ec:	4a07      	ldr	r2, [pc, #28]	@ (800460c <WS2812_Write_Data+0x58>)
 80045ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < 24; i++)
 80045f2:	7bfb      	ldrb	r3, [r7, #15]
 80045f4:	3301      	adds	r3, #1
 80045f6:	73fb      	strb	r3, [r7, #15]
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
 80045fa:	2b17      	cmp	r3, #23
 80045fc:	d9e3      	bls.n	80045c6 <WS2812_Write_Data+0x12>
}
 80045fe:	bf00      	nop
 8004600:	bf00      	nop
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	20003ab4 	.word	0x20003ab4

08004610 <WS2812_Update>:
 * @brief  WS2812更新指令
 * @param  None
 * @return None
 */
void WS2812_Update(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&WS2812_TIM,WS2812_CHANNEL,(uint32_t *)WS2812_Buf,WS2812_BUF_SIZE);
 8004614:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8004618:	4a03      	ldr	r2, [pc, #12]	@ (8004628 <WS2812_Update+0x18>)
 800461a:	2108      	movs	r1, #8
 800461c:	4803      	ldr	r0, [pc, #12]	@ (800462c <WS2812_Update+0x1c>)
 800461e:	f008 ffbb 	bl	800d598 <HAL_TIM_PWM_Start_DMA>
}
 8004622:	bf00      	nop
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	20003ab4 	.word	0x20003ab4
 800462c:	20000bf4 	.word	0x20000bf4

08004630 <RGBColorToUint32>:

// 将位域结构体转换为 uint32_t 类型
uint32_t RGBColorToUint32(RGBColor color) {
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
    return (color.red << 16) | (color.green << 8) | color.blue;
 8004638:	793b      	ldrb	r3, [r7, #4]
 800463a:	041a      	lsls	r2, r3, #16
 800463c:	797b      	ldrb	r3, [r7, #5]
 800463e:	021b      	lsls	r3, r3, #8
 8004640:	4313      	orrs	r3, r2
 8004642:	79ba      	ldrb	r2, [r7, #6]
 8004644:	4313      	orrs	r3, r2
}
 8004646:	4618      	mov	r0, r3
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
	...

08004654 <WS2812_Write_Colors>:
 * @brief Write a series of RGB colors to WS2812 with brightness adjustment.
 * @param colors Pointer to the original RGBColor array.
 * @param count Number of elements in the array.
 * @return None
 */
void WS2812_Write_Colors(RGBColor *colors, uint8_t count) {
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	460b      	mov	r3, r1
 800465e:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < count; i++) {
 8004660:	2300      	movs	r3, #0
 8004662:	75fb      	strb	r3, [r7, #23]
 8004664:	e046      	b.n	80046f4 <WS2812_Write_Colors+0xa0>
        uint32_t color_value = RGBColorToUint32(colors[i]);
 8004666:	7dfb      	ldrb	r3, [r7, #23]
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	4413      	add	r3, r2
 800466e:	6818      	ldr	r0, [r3, #0]
 8004670:	f7ff ffde 	bl	8004630 <RGBColorToUint32>
 8004674:	6138      	str	r0, [r7, #16]
        // 分离出 RGB 各通道
        uint8_t red = (color_value >> 16) & 0xFF;
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	0c1b      	lsrs	r3, r3, #16
 800467a:	73fb      	strb	r3, [r7, #15]
        uint8_t green = (color_value >> 8) & 0xFF;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	0a1b      	lsrs	r3, r3, #8
 8004680:	73bb      	strb	r3, [r7, #14]
        uint8_t blue = color_value & 0xFF;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	737b      	strb	r3, [r7, #13]

        // 调整各通道亮度
        red = (uint16_t)red * WS2812_Brightness / 255;
 8004686:	7bfb      	ldrb	r3, [r7, #15]
 8004688:	4a1f      	ldr	r2, [pc, #124]	@ (8004708 <WS2812_Write_Colors+0xb4>)
 800468a:	7812      	ldrb	r2, [r2, #0]
 800468c:	fb02 f303 	mul.w	r3, r2, r3
 8004690:	4a1e      	ldr	r2, [pc, #120]	@ (800470c <WS2812_Write_Colors+0xb8>)
 8004692:	fb82 1203 	smull	r1, r2, r2, r3
 8004696:	441a      	add	r2, r3
 8004698:	11d2      	asrs	r2, r2, #7
 800469a:	17db      	asrs	r3, r3, #31
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	73fb      	strb	r3, [r7, #15]
        green = (uint16_t)green * WS2812_Brightness / 255;
 80046a0:	7bbb      	ldrb	r3, [r7, #14]
 80046a2:	4a19      	ldr	r2, [pc, #100]	@ (8004708 <WS2812_Write_Colors+0xb4>)
 80046a4:	7812      	ldrb	r2, [r2, #0]
 80046a6:	fb02 f303 	mul.w	r3, r2, r3
 80046aa:	4a18      	ldr	r2, [pc, #96]	@ (800470c <WS2812_Write_Colors+0xb8>)
 80046ac:	fb82 1203 	smull	r1, r2, r2, r3
 80046b0:	441a      	add	r2, r3
 80046b2:	11d2      	asrs	r2, r2, #7
 80046b4:	17db      	asrs	r3, r3, #31
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	73bb      	strb	r3, [r7, #14]
        blue = (uint16_t)blue * WS2812_Brightness / 255;
 80046ba:	7b7b      	ldrb	r3, [r7, #13]
 80046bc:	4a12      	ldr	r2, [pc, #72]	@ (8004708 <WS2812_Write_Colors+0xb4>)
 80046be:	7812      	ldrb	r2, [r2, #0]
 80046c0:	fb02 f303 	mul.w	r3, r2, r3
 80046c4:	4a11      	ldr	r2, [pc, #68]	@ (800470c <WS2812_Write_Colors+0xb8>)
 80046c6:	fb82 1203 	smull	r1, r2, r2, r3
 80046ca:	441a      	add	r2, r3
 80046cc:	11d2      	asrs	r2, r2, #7
 80046ce:	17db      	asrs	r3, r3, #31
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	737b      	strb	r3, [r7, #13]

        // 重新组合成 uint32_t 类型
        color_value = ((uint32_t)red << 16) | ((uint32_t)green << 8) | blue;
 80046d4:	7bfb      	ldrb	r3, [r7, #15]
 80046d6:	041a      	lsls	r2, r3, #16
 80046d8:	7bbb      	ldrb	r3, [r7, #14]
 80046da:	021b      	lsls	r3, r3, #8
 80046dc:	431a      	orrs	r2, r3
 80046de:	7b7b      	ldrb	r3, [r7, #13]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]

        WS2812_Write_Data(color_value, i);
 80046e4:	7dfb      	ldrb	r3, [r7, #23]
 80046e6:	4619      	mov	r1, r3
 80046e8:	6938      	ldr	r0, [r7, #16]
 80046ea:	f7ff ff63 	bl	80045b4 <WS2812_Write_Data>
    for (uint8_t i = 0; i < count; i++) {
 80046ee:	7dfb      	ldrb	r3, [r7, #23]
 80046f0:	3301      	adds	r3, #1
 80046f2:	75fb      	strb	r3, [r7, #23]
 80046f4:	7dfa      	ldrb	r2, [r7, #23]
 80046f6:	78fb      	ldrb	r3, [r7, #3]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d3b4      	bcc.n	8004666 <WS2812_Write_Colors+0x12>
    }
    WS2812_Update();
 80046fc:	f7ff ff88 	bl	8004610 <WS2812_Update>
}
 8004700:	bf00      	nop
 8004702:	3718      	adds	r7, #24
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	20000044 	.word	0x20000044
 800470c:	80808081 	.word	0x80808081

08004710 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004710:	480d      	ldr	r0, [pc, #52]	@ (8004748 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004712:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004714:	f7ff ff3c 	bl	8004590 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004718:	480c      	ldr	r0, [pc, #48]	@ (800474c <LoopForever+0x6>)
  ldr r1, =_edata
 800471a:	490d      	ldr	r1, [pc, #52]	@ (8004750 <LoopForever+0xa>)
  ldr r2, =_sidata
 800471c:	4a0d      	ldr	r2, [pc, #52]	@ (8004754 <LoopForever+0xe>)
  movs r3, #0
 800471e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004720:	e002      	b.n	8004728 <LoopCopyDataInit>

08004722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004726:	3304      	adds	r3, #4

08004728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800472a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800472c:	d3f9      	bcc.n	8004722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800472e:	4a0a      	ldr	r2, [pc, #40]	@ (8004758 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004730:	4c0a      	ldr	r4, [pc, #40]	@ (800475c <LoopForever+0x16>)
  movs r3, #0
 8004732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004734:	e001      	b.n	800473a <LoopFillZerobss>

08004736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004738:	3204      	adds	r2, #4

0800473a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800473a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800473c:	d3fb      	bcc.n	8004736 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800473e:	f010 f9f5 	bl	8014b2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004742:	f7fc ff57 	bl	80015f4 <main>

08004746 <LoopForever>:

LoopForever:
    b LoopForever
 8004746:	e7fe      	b.n	8004746 <LoopForever>
  ldr   r0, =_estack
 8004748:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800474c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004750:	20000390 	.word	0x20000390
  ldr r2, =_sidata
 8004754:	08025ff8 	.word	0x08025ff8
  ldr r2, =_sbss
 8004758:	20000390 	.word	0x20000390
  ldr r4, =_ebss
 800475c:	20004fe4 	.word	0x20004fe4

08004760 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004760:	e7fe      	b.n	8004760 <ADC1_2_IRQHandler>

08004762 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b082      	sub	sp, #8
 8004766:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004768:	2300      	movs	r3, #0
 800476a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800476c:	2003      	movs	r0, #3
 800476e:	f002 fd6f 	bl	8007250 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004772:	200f      	movs	r0, #15
 8004774:	f000 f80e 	bl	8004794 <HAL_InitTick>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	71fb      	strb	r3, [r7, #7]
 8004782:	e001      	b.n	8004788 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004784:	f7fe fe50 	bl	8003428 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004788:	79fb      	ldrb	r3, [r7, #7]

}
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
	...

08004794 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80047a0:	4b16      	ldr	r3, [pc, #88]	@ (80047fc <HAL_InitTick+0x68>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d022      	beq.n	80047ee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80047a8:	4b15      	ldr	r3, [pc, #84]	@ (8004800 <HAL_InitTick+0x6c>)
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	4b13      	ldr	r3, [pc, #76]	@ (80047fc <HAL_InitTick+0x68>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80047b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80047b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047bc:	4618      	mov	r0, r3
 80047be:	f002 fd7a 	bl	80072b6 <HAL_SYSTICK_Config>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10f      	bne.n	80047e8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b0f      	cmp	r3, #15
 80047cc:	d809      	bhi.n	80047e2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047ce:	2200      	movs	r2, #0
 80047d0:	6879      	ldr	r1, [r7, #4]
 80047d2:	f04f 30ff 	mov.w	r0, #4294967295
 80047d6:	f002 fd46 	bl	8007266 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80047da:	4a0a      	ldr	r2, [pc, #40]	@ (8004804 <HAL_InitTick+0x70>)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6013      	str	r3, [r2, #0]
 80047e0:	e007      	b.n	80047f2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	73fb      	strb	r3, [r7, #15]
 80047e6:	e004      	b.n	80047f2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	73fb      	strb	r3, [r7, #15]
 80047ec:	e001      	b.n	80047f2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80047f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	2000004c 	.word	0x2000004c
 8004800:	20000040 	.word	0x20000040
 8004804:	20000048 	.word	0x20000048

08004808 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800480c:	4b05      	ldr	r3, [pc, #20]	@ (8004824 <HAL_IncTick+0x1c>)
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	4b05      	ldr	r3, [pc, #20]	@ (8004828 <HAL_IncTick+0x20>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4413      	add	r3, r2
 8004816:	4a03      	ldr	r2, [pc, #12]	@ (8004824 <HAL_IncTick+0x1c>)
 8004818:	6013      	str	r3, [r2, #0]
}
 800481a:	bf00      	nop
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	20003cc4 	.word	0x20003cc4
 8004828:	2000004c 	.word	0x2000004c

0800482c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
  return uwTick;
 8004830:	4b03      	ldr	r3, [pc, #12]	@ (8004840 <HAL_GetTick+0x14>)
 8004832:	681b      	ldr	r3, [r3, #0]
}
 8004834:	4618      	mov	r0, r3
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	20003cc4 	.word	0x20003cc4

08004844 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800484c:	f7ff ffee 	bl	800482c <HAL_GetTick>
 8004850:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485c:	d004      	beq.n	8004868 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800485e:	4b09      	ldr	r3, [pc, #36]	@ (8004884 <HAL_Delay+0x40>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	4413      	add	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004868:	bf00      	nop
 800486a:	f7ff ffdf 	bl	800482c <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	429a      	cmp	r2, r3
 8004878:	d8f7      	bhi.n	800486a <HAL_Delay+0x26>
  {
  }
}
 800487a:	bf00      	nop
 800487c:	bf00      	nop
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	2000004c 	.word	0x2000004c

08004888 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8004890:	4b06      	ldr	r3, [pc, #24]	@ (80048ac <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f023 0202 	bic.w	r2, r3, #2
 8004898:	4904      	ldr	r1, [pc, #16]	@ (80048ac <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4313      	orrs	r3, r2
 800489e:	600b      	str	r3, [r1, #0]
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	40010030 	.word	0x40010030

080048b0 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80048b4:	4b05      	ldr	r3, [pc, #20]	@ (80048cc <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a04      	ldr	r2, [pc, #16]	@ (80048cc <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80048ba:	f023 0301 	bic.w	r3, r3, #1
 80048be:	6013      	str	r3, [r2, #0]
}
 80048c0:	bf00      	nop
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	40010030 	.word	0x40010030

080048d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	431a      	orrs	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	609a      	str	r2, [r3, #8]
}
 80048ea:	bf00      	nop
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
 80048fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	431a      	orrs	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	609a      	str	r2, [r3, #8]
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800492c:	4618      	mov	r0, r3
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	3360      	adds	r3, #96	@ 0x60
 800494a:	461a      	mov	r2, r3
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	4b08      	ldr	r3, [pc, #32]	@ (800497c <LL_ADC_SetOffset+0x44>)
 800495a:	4013      	ands	r3, r2
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	4313      	orrs	r3, r2
 8004968:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004970:	bf00      	nop
 8004972:	371c      	adds	r7, #28
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	03fff000 	.word	0x03fff000

08004980 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3360      	adds	r3, #96	@ 0x60
 800498e:	461a      	mov	r2, r3
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4413      	add	r3, r2
 8004996:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b087      	sub	sp, #28
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	3360      	adds	r3, #96	@ 0x60
 80049bc:	461a      	mov	r2, r3
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	431a      	orrs	r2, r3
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80049d6:	bf00      	nop
 80049d8:	371c      	adds	r7, #28
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b087      	sub	sp, #28
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	60f8      	str	r0, [r7, #12]
 80049ea:	60b9      	str	r1, [r7, #8]
 80049ec:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	3360      	adds	r3, #96	@ 0x60
 80049f2:	461a      	mov	r2, r3
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	431a      	orrs	r2, r3
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004a0c:	bf00      	nop
 8004a0e:	371c      	adds	r7, #28
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b087      	sub	sp, #28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	3360      	adds	r3, #96	@ 0x60
 8004a28:	461a      	mov	r2, r3
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004a42:	bf00      	nop
 8004a44:	371c      	adds	r7, #28
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b083      	sub	sp, #12
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
 8004a56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	431a      	orrs	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	615a      	str	r2, [r3, #20]
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e000      	b.n	8004a8e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b087      	sub	sp, #28
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	60f8      	str	r0, [r7, #12]
 8004aa2:	60b9      	str	r1, [r7, #8]
 8004aa4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	3330      	adds	r3, #48	@ 0x30
 8004aaa:	461a      	mov	r2, r3
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	0a1b      	lsrs	r3, r3, #8
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	f003 030c 	and.w	r3, r3, #12
 8004ab6:	4413      	add	r3, r2
 8004ab8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	f003 031f 	and.w	r3, r3, #31
 8004ac4:	211f      	movs	r1, #31
 8004ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aca:	43db      	mvns	r3, r3
 8004acc:	401a      	ands	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	0e9b      	lsrs	r3, r3, #26
 8004ad2:	f003 011f 	and.w	r1, r3, #31
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f003 031f 	and.w	r3, r3, #31
 8004adc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004ae6:	bf00      	nop
 8004ae8:	371c      	adds	r7, #28
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b083      	sub	sp, #12
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004afe:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004b06:	2301      	movs	r3, #1
 8004b08:	e000      	b.n	8004b0c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	3314      	adds	r3, #20
 8004b28:	461a      	mov	r2, r3
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	0e5b      	lsrs	r3, r3, #25
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	f003 0304 	and.w	r3, r3, #4
 8004b34:	4413      	add	r3, r2
 8004b36:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	0d1b      	lsrs	r3, r3, #20
 8004b40:	f003 031f 	and.w	r3, r3, #31
 8004b44:	2107      	movs	r1, #7
 8004b46:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4a:	43db      	mvns	r3, r3
 8004b4c:	401a      	ands	r2, r3
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	0d1b      	lsrs	r3, r3, #20
 8004b52:	f003 031f 	and.w	r3, r3, #31
 8004b56:	6879      	ldr	r1, [r7, #4]
 8004b58:	fa01 f303 	lsl.w	r3, r1, r3
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004b62:	bf00      	nop
 8004b64:	371c      	adds	r7, #28
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
	...

08004b70 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b88:	43db      	mvns	r3, r3
 8004b8a:	401a      	ands	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f003 0318 	and.w	r3, r3, #24
 8004b92:	4908      	ldr	r1, [pc, #32]	@ (8004bb4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004b94:	40d9      	lsrs	r1, r3
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	400b      	ands	r3, r1
 8004b9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004ba6:	bf00      	nop
 8004ba8:	3714      	adds	r7, #20
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	0007ffff 	.word	0x0007ffff

08004bb8 <LL_ADC_SetAnalogWDMonitChannels>:
  *             On this STM32 series, all ADCx are not available on all devices. Refer to device datasheet
  *             for more details.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR,
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	330c      	adds	r3, #12
 8004bc8:	4618      	mov	r0, r3
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	0d1b      	lsrs	r3, r3, #20
 8004bce:	f003 0103 	and.w	r1, r3, #3
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	f003 0201 	and.w	r2, r3, #1
 8004bd8:	4613      	mov	r3, r2
 8004bda:	00db      	lsls	r3, r3, #3
 8004bdc:	4413      	add	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	440b      	add	r3, r1
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4403      	add	r3, r0
 8004be6:	617b      	str	r3, [r7, #20]
                                             ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK)
                                                * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f023 4302 	bic.w	r3, r3, #2181038080	@ 0x82000000
 8004bf2:	f423 1360 	bic.w	r3, r3, #3670016	@ 0x380000
 8004bf6:	43db      	mvns	r3, r3
 8004bf8:	401a      	ands	r2, r3
 8004bfa:	6879      	ldr	r1, [r7, #4]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	400b      	ands	r3, r1
 8004c00:	431a      	orrs	r2, r3
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8004c06:	bf00      	nop
 8004c08:	371c      	adds	r7, #28
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b087      	sub	sp, #28
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	60f8      	str	r0, [r7, #12]
 8004c1a:	60b9      	str	r1, [r7, #8]
 8004c1c:	607a      	str	r2, [r7, #4]
 8004c1e:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1,
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	3320      	adds	r3, #32
 8004c24:	461a      	mov	r2, r3
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	0d1b      	lsrs	r3, r3, #20
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	f003 030c 	and.w	r3, r3, #12
 8004c30:	4413      	add	r3, r2
 8004c32:	617b      	str	r3, [r7, #20]
                                             ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 22f0 	and.w	r2, r3, #4026593280	@ 0xf000f000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	0419      	lsls	r1, r3, #16
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	430b      	orrs	r3, r1
 8004c44:	431a      	orrs	r2, r3
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 8004c4a:	bf00      	nop
 8004c4c:	371c      	adds	r7, #28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 031f 	and.w	r3, r3, #31
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b083      	sub	sp, #12
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004c9e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	6093      	str	r3, [r2, #8]
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004cc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004cc6:	d101      	bne.n	8004ccc <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e000      	b.n	8004cce <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004cea:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004cee:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d16:	d101      	bne.n	8004d1c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e000      	b.n	8004d1e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b083      	sub	sp, #12
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004d3a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004d3e:	f043 0201 	orr.w	r2, r3, #1
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr

08004d52 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b083      	sub	sp, #12
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d101      	bne.n	8004d6a <LL_ADC_IsEnabled+0x18>
 8004d66:	2301      	movs	r3, #1
 8004d68:	e000      	b.n	8004d6c <LL_ADC_IsEnabled+0x1a>
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004d88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004d8c:	f043 0204 	orr.w	r2, r3, #4
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f003 0304 	and.w	r3, r3, #4
 8004db0:	2b04      	cmp	r3, #4
 8004db2:	d101      	bne.n	8004db8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004db4:	2301      	movs	r3, #1
 8004db6:	e000      	b.n	8004dba <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b083      	sub	sp, #12
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f003 0308 	and.w	r3, r3, #8
 8004dd6:	2b08      	cmp	r3, #8
 8004dd8:	d101      	bne.n	8004dde <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e000      	b.n	8004de0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2280      	movs	r2, #128	@ 0x80
 8004df8:	601a      	str	r2, [r3, #0]
}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b083      	sub	sp, #12
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e14:	601a      	str	r2, [r3, #0]
}
 8004e16:	bf00      	nop
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e30:	601a      	str	r2, [r3, #0]
}
 8004e32:	bf00      	nop
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b083      	sub	sp, #12
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	605a      	str	r2, [r3, #4]
}
 8004e52:	bf00      	nop
 8004e54:	370c      	adds	r7, #12
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr

08004e5e <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8004e5e:	b480      	push	{r7}
 8004e60:	b083      	sub	sp, #12
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	605a      	str	r2, [r3, #4]
}
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr

08004e7e <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b083      	sub	sp, #12
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	605a      	str	r2, [r3, #4]
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b083      	sub	sp, #12
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	605a      	str	r2, [r3, #4]
}
 8004eb2:	bf00      	nop
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	605a      	str	r2, [r3, #4]
}
 8004ed2:	bf00      	nop
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	605a      	str	r2, [r3, #4]
}
 8004ef2:	bf00      	nop
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
	...

08004f00 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004f00:	b590      	push	{r4, r7, lr}
 8004f02:	b089      	sub	sp, #36	@ 0x24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e1a9      	b.n	800526e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d109      	bne.n	8004f3c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f7fe faa5 	bl	8003478 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7ff feb6 	bl	8004cb2 <LL_ADC_IsDeepPowerDownEnabled>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d004      	beq.n	8004f56 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7ff fe9c 	bl	8004c8e <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7ff fed1 	bl	8004d02 <LL_ADC_IsInternalRegulatorEnabled>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d115      	bne.n	8004f92 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7ff feb5 	bl	8004cda <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f70:	4b9c      	ldr	r3, [pc, #624]	@ (80051e4 <HAL_ADC_Init+0x2e4>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	099b      	lsrs	r3, r3, #6
 8004f76:	4a9c      	ldr	r2, [pc, #624]	@ (80051e8 <HAL_ADC_Init+0x2e8>)
 8004f78:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7c:	099b      	lsrs	r3, r3, #6
 8004f7e:	3301      	adds	r3, #1
 8004f80:	005b      	lsls	r3, r3, #1
 8004f82:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004f84:	e002      	b.n	8004f8c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1f9      	bne.n	8004f86 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7ff feb3 	bl	8004d02 <LL_ADC_IsInternalRegulatorEnabled>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10d      	bne.n	8004fbe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fa6:	f043 0210 	orr.w	r2, r3, #16
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fb2:	f043 0201 	orr.w	r2, r3, #1
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7ff feec 	bl	8004da0 <LL_ADC_REG_IsConversionOngoing>
 8004fc8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fce:	f003 0310 	and.w	r3, r3, #16
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f040 8142 	bne.w	800525c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f040 813e 	bne.w	800525c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fe4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004fe8:	f043 0202 	orr.w	r2, r3, #2
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7ff feac 	bl	8004d52 <LL_ADC_IsEnabled>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d141      	bne.n	8005084 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005008:	d004      	beq.n	8005014 <HAL_ADC_Init+0x114>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a77      	ldr	r2, [pc, #476]	@ (80051ec <HAL_ADC_Init+0x2ec>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d10f      	bne.n	8005034 <HAL_ADC_Init+0x134>
 8005014:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005018:	f7ff fe9b 	bl	8004d52 <LL_ADC_IsEnabled>
 800501c:	4604      	mov	r4, r0
 800501e:	4873      	ldr	r0, [pc, #460]	@ (80051ec <HAL_ADC_Init+0x2ec>)
 8005020:	f7ff fe97 	bl	8004d52 <LL_ADC_IsEnabled>
 8005024:	4603      	mov	r3, r0
 8005026:	4323      	orrs	r3, r4
 8005028:	2b00      	cmp	r3, #0
 800502a:	bf0c      	ite	eq
 800502c:	2301      	moveq	r3, #1
 800502e:	2300      	movne	r3, #0
 8005030:	b2db      	uxtb	r3, r3
 8005032:	e012      	b.n	800505a <HAL_ADC_Init+0x15a>
 8005034:	486e      	ldr	r0, [pc, #440]	@ (80051f0 <HAL_ADC_Init+0x2f0>)
 8005036:	f7ff fe8c 	bl	8004d52 <LL_ADC_IsEnabled>
 800503a:	4604      	mov	r4, r0
 800503c:	486d      	ldr	r0, [pc, #436]	@ (80051f4 <HAL_ADC_Init+0x2f4>)
 800503e:	f7ff fe88 	bl	8004d52 <LL_ADC_IsEnabled>
 8005042:	4603      	mov	r3, r0
 8005044:	431c      	orrs	r4, r3
 8005046:	486c      	ldr	r0, [pc, #432]	@ (80051f8 <HAL_ADC_Init+0x2f8>)
 8005048:	f7ff fe83 	bl	8004d52 <LL_ADC_IsEnabled>
 800504c:	4603      	mov	r3, r0
 800504e:	4323      	orrs	r3, r4
 8005050:	2b00      	cmp	r3, #0
 8005052:	bf0c      	ite	eq
 8005054:	2301      	moveq	r3, #1
 8005056:	2300      	movne	r3, #0
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d012      	beq.n	8005084 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005066:	d004      	beq.n	8005072 <HAL_ADC_Init+0x172>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a5f      	ldr	r2, [pc, #380]	@ (80051ec <HAL_ADC_Init+0x2ec>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d101      	bne.n	8005076 <HAL_ADC_Init+0x176>
 8005072:	4a62      	ldr	r2, [pc, #392]	@ (80051fc <HAL_ADC_Init+0x2fc>)
 8005074:	e000      	b.n	8005078 <HAL_ADC_Init+0x178>
 8005076:	4a62      	ldr	r2, [pc, #392]	@ (8005200 <HAL_ADC_Init+0x300>)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	4619      	mov	r1, r3
 800507e:	4610      	mov	r0, r2
 8005080:	f7ff fc26 	bl	80048d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	7f5b      	ldrb	r3, [r3, #29]
 8005088:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800508e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005094:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800509a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80050a2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80050a4:	4313      	orrs	r3, r2
 80050a6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d106      	bne.n	80050c0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b6:	3b01      	subs	r3, #1
 80050b8:	045b      	lsls	r3, r3, #17
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	4313      	orrs	r3, r2
 80050be:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d009      	beq.n	80050dc <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050cc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	4313      	orrs	r3, r2
 80050da:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68da      	ldr	r2, [r3, #12]
 80050e2:	4b48      	ldr	r3, [pc, #288]	@ (8005204 <HAL_ADC_Init+0x304>)
 80050e4:	4013      	ands	r3, r2
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	6812      	ldr	r2, [r2, #0]
 80050ea:	69b9      	ldr	r1, [r7, #24]
 80050ec:	430b      	orrs	r3, r1
 80050ee:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff fe5b 	bl	8004dc6 <LL_ADC_INJ_IsConversionOngoing>
 8005110:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d17f      	bne.n	8005218 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d17c      	bne.n	8005218 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005122:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800512a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800512c:	4313      	orrs	r3, r2
 800512e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800513a:	f023 0302 	bic.w	r3, r3, #2
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	6812      	ldr	r2, [r2, #0]
 8005142:	69b9      	ldr	r1, [r7, #24]
 8005144:	430b      	orrs	r3, r1
 8005146:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d017      	beq.n	8005180 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	691a      	ldr	r2, [r3, #16]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800515e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005168:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800516c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	6911      	ldr	r1, [r2, #16]
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	6812      	ldr	r2, [r2, #0]
 8005178:	430b      	orrs	r3, r1
 800517a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800517e:	e013      	b.n	80051a8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	691a      	ldr	r2, [r3, #16]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800518e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	6812      	ldr	r2, [r2, #0]
 800519c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80051a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80051a4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d12a      	bne.n	8005208 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80051bc:	f023 0304 	bic.w	r3, r3, #4
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80051c8:	4311      	orrs	r1, r2
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80051ce:	4311      	orrs	r1, r2
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80051d4:	430a      	orrs	r2, r1
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f042 0201 	orr.w	r2, r2, #1
 80051e0:	611a      	str	r2, [r3, #16]
 80051e2:	e019      	b.n	8005218 <HAL_ADC_Init+0x318>
 80051e4:	20000040 	.word	0x20000040
 80051e8:	053e2d63 	.word	0x053e2d63
 80051ec:	50000100 	.word	0x50000100
 80051f0:	50000400 	.word	0x50000400
 80051f4:	50000500 	.word	0x50000500
 80051f8:	50000600 	.word	0x50000600
 80051fc:	50000300 	.word	0x50000300
 8005200:	50000700 	.word	0x50000700
 8005204:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	691a      	ldr	r2, [r3, #16]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f022 0201 	bic.w	r2, r2, #1
 8005216:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d10c      	bne.n	800523a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005226:	f023 010f 	bic.w	r1, r3, #15
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	1e5a      	subs	r2, r3, #1
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	631a      	str	r2, [r3, #48]	@ 0x30
 8005238:	e007      	b.n	800524a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f022 020f 	bic.w	r2, r2, #15
 8005248:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800524e:	f023 0303 	bic.w	r3, r3, #3
 8005252:	f043 0201 	orr.w	r2, r3, #1
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	65da      	str	r2, [r3, #92]	@ 0x5c
 800525a:	e007      	b.n	800526c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005260:	f043 0210 	orr.w	r2, r3, #16
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800526c:	7ffb      	ldrb	r3, [r7, #31]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3724      	adds	r7, #36	@ 0x24
 8005272:	46bd      	mov	sp, r7
 8005274:	bd90      	pop	{r4, r7, pc}
 8005276:	bf00      	nop

08005278 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800528c:	d004      	beq.n	8005298 <HAL_ADC_Start_DMA+0x20>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a5a      	ldr	r2, [pc, #360]	@ (80053fc <HAL_ADC_Start_DMA+0x184>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d101      	bne.n	800529c <HAL_ADC_Start_DMA+0x24>
 8005298:	4b59      	ldr	r3, [pc, #356]	@ (8005400 <HAL_ADC_Start_DMA+0x188>)
 800529a:	e000      	b.n	800529e <HAL_ADC_Start_DMA+0x26>
 800529c:	4b59      	ldr	r3, [pc, #356]	@ (8005404 <HAL_ADC_Start_DMA+0x18c>)
 800529e:	4618      	mov	r0, r3
 80052a0:	f7ff fcd9 	bl	8004c56 <LL_ADC_GetMultimode>
 80052a4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7ff fd78 	bl	8004da0 <LL_ADC_REG_IsConversionOngoing>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f040 809b 	bne.w	80053ee <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d101      	bne.n	80052c6 <HAL_ADC_Start_DMA+0x4e>
 80052c2:	2302      	movs	r3, #2
 80052c4:	e096      	b.n	80053f4 <HAL_ADC_Start_DMA+0x17c>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a4d      	ldr	r2, [pc, #308]	@ (8005408 <HAL_ADC_Start_DMA+0x190>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d008      	beq.n	80052ea <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d005      	beq.n	80052ea <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	2b05      	cmp	r3, #5
 80052e2:	d002      	beq.n	80052ea <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	2b09      	cmp	r3, #9
 80052e8:	d17a      	bne.n	80053e0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f001 f96c 	bl	80065c8 <ADC_Enable>
 80052f0:	4603      	mov	r3, r0
 80052f2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80052f4:	7dfb      	ldrb	r3, [r7, #23]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d16d      	bne.n	80053d6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052fe:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005302:	f023 0301 	bic.w	r3, r3, #1
 8005306:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a3a      	ldr	r2, [pc, #232]	@ (80053fc <HAL_ADC_Start_DMA+0x184>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d009      	beq.n	800532c <HAL_ADC_Start_DMA+0xb4>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a3b      	ldr	r2, [pc, #236]	@ (800540c <HAL_ADC_Start_DMA+0x194>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d002      	beq.n	8005328 <HAL_ADC_Start_DMA+0xb0>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	e003      	b.n	8005330 <HAL_ADC_Start_DMA+0xb8>
 8005328:	4b39      	ldr	r3, [pc, #228]	@ (8005410 <HAL_ADC_Start_DMA+0x198>)
 800532a:	e001      	b.n	8005330 <HAL_ADC_Start_DMA+0xb8>
 800532c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	6812      	ldr	r2, [r2, #0]
 8005334:	4293      	cmp	r3, r2
 8005336:	d002      	beq.n	800533e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d105      	bne.n	800534a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005342:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800534e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d006      	beq.n	8005364 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800535a:	f023 0206 	bic.w	r2, r3, #6
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	661a      	str	r2, [r3, #96]	@ 0x60
 8005362:	e002      	b.n	800536a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800536e:	4a29      	ldr	r2, [pc, #164]	@ (8005414 <HAL_ADC_Start_DMA+0x19c>)
 8005370:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005376:	4a28      	ldr	r2, [pc, #160]	@ (8005418 <HAL_ADC_Start_DMA+0x1a0>)
 8005378:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800537e:	4a27      	ldr	r2, [pc, #156]	@ (800541c <HAL_ADC_Start_DMA+0x1a4>)
 8005380:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	221c      	movs	r2, #28
 8005388:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f042 0210 	orr.w	r2, r2, #16
 80053a0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68da      	ldr	r2, [r3, #12]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f042 0201 	orr.w	r2, r2, #1
 80053b0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	3340      	adds	r3, #64	@ 0x40
 80053bc:	4619      	mov	r1, r3
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f002 faa3 	bl	800790c <HAL_DMA_Start_IT>
 80053c6:	4603      	mov	r3, r0
 80053c8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7ff fcd2 	bl	8004d78 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80053d4:	e00d      	b.n	80053f2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80053de:	e008      	b.n	80053f2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80053ec:	e001      	b.n	80053f2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80053ee:	2302      	movs	r3, #2
 80053f0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80053f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3718      	adds	r7, #24
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	50000100 	.word	0x50000100
 8005400:	50000300 	.word	0x50000300
 8005404:	50000700 	.word	0x50000700
 8005408:	50000600 	.word	0x50000600
 800540c:	50000500 	.word	0x50000500
 8005410:	50000400 	.word	0x50000400
 8005414:	080066f5 	.word	0x080066f5
 8005418:	080067cd 	.word	0x080067cd
 800541c:	080067e9 	.word	0x080067e9

08005420 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b08a      	sub	sp, #40	@ 0x28
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005428:	2300      	movs	r3, #0
 800542a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005444:	d004      	beq.n	8005450 <HAL_ADC_IRQHandler+0x30>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a8e      	ldr	r2, [pc, #568]	@ (8005684 <HAL_ADC_IRQHandler+0x264>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d101      	bne.n	8005454 <HAL_ADC_IRQHandler+0x34>
 8005450:	4b8d      	ldr	r3, [pc, #564]	@ (8005688 <HAL_ADC_IRQHandler+0x268>)
 8005452:	e000      	b.n	8005456 <HAL_ADC_IRQHandler+0x36>
 8005454:	4b8d      	ldr	r3, [pc, #564]	@ (800568c <HAL_ADC_IRQHandler+0x26c>)
 8005456:	4618      	mov	r0, r3
 8005458:	f7ff fbfd 	bl	8004c56 <LL_ADC_GetMultimode>
 800545c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b00      	cmp	r3, #0
 8005466:	d017      	beq.n	8005498 <HAL_ADC_IRQHandler+0x78>
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d012      	beq.n	8005498 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005476:	f003 0310 	and.w	r3, r3, #16
 800547a:	2b00      	cmp	r3, #0
 800547c:	d105      	bne.n	800548a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005482:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f001 fa14 	bl	80068b8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2202      	movs	r2, #2
 8005496:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	f003 0304 	and.w	r3, r3, #4
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d004      	beq.n	80054ac <HAL_ADC_IRQHandler+0x8c>
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10b      	bne.n	80054c4 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 8094 	beq.w	80055e0 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	f003 0308 	and.w	r3, r3, #8
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f000 808e 	beq.w	80055e0 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054c8:	f003 0310 	and.w	r3, r3, #16
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d105      	bne.n	80054dc <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054d4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7ff fac7 	bl	8004a74 <LL_ADC_REG_IsTriggerSourceSWStart>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d072      	beq.n	80055d2 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a64      	ldr	r2, [pc, #400]	@ (8005684 <HAL_ADC_IRQHandler+0x264>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d009      	beq.n	800550a <HAL_ADC_IRQHandler+0xea>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a65      	ldr	r2, [pc, #404]	@ (8005690 <HAL_ADC_IRQHandler+0x270>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d002      	beq.n	8005506 <HAL_ADC_IRQHandler+0xe6>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	e003      	b.n	800550e <HAL_ADC_IRQHandler+0xee>
 8005506:	4b63      	ldr	r3, [pc, #396]	@ (8005694 <HAL_ADC_IRQHandler+0x274>)
 8005508:	e001      	b.n	800550e <HAL_ADC_IRQHandler+0xee>
 800550a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	6812      	ldr	r2, [r2, #0]
 8005512:	4293      	cmp	r3, r2
 8005514:	d008      	beq.n	8005528 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d005      	beq.n	8005528 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	2b05      	cmp	r3, #5
 8005520:	d002      	beq.n	8005528 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	2b09      	cmp	r3, #9
 8005526:	d104      	bne.n	8005532 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	623b      	str	r3, [r7, #32]
 8005530:	e014      	b.n	800555c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a53      	ldr	r2, [pc, #332]	@ (8005684 <HAL_ADC_IRQHandler+0x264>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d009      	beq.n	8005550 <HAL_ADC_IRQHandler+0x130>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a53      	ldr	r2, [pc, #332]	@ (8005690 <HAL_ADC_IRQHandler+0x270>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d002      	beq.n	800554c <HAL_ADC_IRQHandler+0x12c>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	e003      	b.n	8005554 <HAL_ADC_IRQHandler+0x134>
 800554c:	4b51      	ldr	r3, [pc, #324]	@ (8005694 <HAL_ADC_IRQHandler+0x274>)
 800554e:	e001      	b.n	8005554 <HAL_ADC_IRQHandler+0x134>
 8005550:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005554:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d135      	bne.n	80055d2 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0308 	and.w	r3, r3, #8
 8005570:	2b08      	cmp	r3, #8
 8005572:	d12e      	bne.n	80055d2 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4618      	mov	r0, r3
 800557a:	f7ff fc11 	bl	8004da0 <LL_ADC_REG_IsConversionOngoing>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d11a      	bne.n	80055ba <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f022 020c 	bic.w	r2, r2, #12
 8005592:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005598:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d112      	bne.n	80055d2 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055b0:	f043 0201 	orr.w	r2, r3, #1
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80055b8:	e00b      	b.n	80055d2 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055be:	f043 0210 	orr.w	r2, r3, #16
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055ca:	f043 0201 	orr.w	r2, r3, #1
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f984 	bl	80058e0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	220c      	movs	r2, #12
 80055de:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	f003 0320 	and.w	r3, r3, #32
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d004      	beq.n	80055f4 <HAL_ADC_IRQHandler+0x1d4>
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	f003 0320 	and.w	r3, r3, #32
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10b      	bne.n	800560c <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f000 80b3 	beq.w	8005766 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 80ad 	beq.w	8005766 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005610:	f003 0310 	and.w	r3, r3, #16
 8005614:	2b00      	cmp	r3, #0
 8005616:	d105      	bne.n	8005624 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800561c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4618      	mov	r0, r3
 800562a:	f7ff fa62 	bl	8004af2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800562e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4618      	mov	r0, r3
 8005636:	f7ff fa1d 	bl	8004a74 <LL_ADC_REG_IsTriggerSourceSWStart>
 800563a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a10      	ldr	r2, [pc, #64]	@ (8005684 <HAL_ADC_IRQHandler+0x264>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d009      	beq.n	800565a <HAL_ADC_IRQHandler+0x23a>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a11      	ldr	r2, [pc, #68]	@ (8005690 <HAL_ADC_IRQHandler+0x270>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d002      	beq.n	8005656 <HAL_ADC_IRQHandler+0x236>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	e003      	b.n	800565e <HAL_ADC_IRQHandler+0x23e>
 8005656:	4b0f      	ldr	r3, [pc, #60]	@ (8005694 <HAL_ADC_IRQHandler+0x274>)
 8005658:	e001      	b.n	800565e <HAL_ADC_IRQHandler+0x23e>
 800565a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	6812      	ldr	r2, [r2, #0]
 8005662:	4293      	cmp	r3, r2
 8005664:	d008      	beq.n	8005678 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d005      	beq.n	8005678 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	2b06      	cmp	r3, #6
 8005670:	d002      	beq.n	8005678 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	2b07      	cmp	r3, #7
 8005676:	d10f      	bne.n	8005698 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	623b      	str	r3, [r7, #32]
 8005680:	e01f      	b.n	80056c2 <HAL_ADC_IRQHandler+0x2a2>
 8005682:	bf00      	nop
 8005684:	50000100 	.word	0x50000100
 8005688:	50000300 	.word	0x50000300
 800568c:	50000700 	.word	0x50000700
 8005690:	50000500 	.word	0x50000500
 8005694:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a8b      	ldr	r2, [pc, #556]	@ (80058cc <HAL_ADC_IRQHandler+0x4ac>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d009      	beq.n	80056b6 <HAL_ADC_IRQHandler+0x296>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a8a      	ldr	r2, [pc, #552]	@ (80058d0 <HAL_ADC_IRQHandler+0x4b0>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d002      	beq.n	80056b2 <HAL_ADC_IRQHandler+0x292>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	e003      	b.n	80056ba <HAL_ADC_IRQHandler+0x29a>
 80056b2:	4b88      	ldr	r3, [pc, #544]	@ (80058d4 <HAL_ADC_IRQHandler+0x4b4>)
 80056b4:	e001      	b.n	80056ba <HAL_ADC_IRQHandler+0x29a>
 80056b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80056ba:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d047      	beq.n	8005758 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d007      	beq.n	80056e2 <HAL_ADC_IRQHandler+0x2c2>
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d03f      	beq.n	8005758 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d13a      	bne.n	8005758 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ec:	2b40      	cmp	r3, #64	@ 0x40
 80056ee:	d133      	bne.n	8005758 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d12e      	bne.n	8005758 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4618      	mov	r0, r3
 8005700:	f7ff fb61 	bl	8004dc6 <LL_ADC_INJ_IsConversionOngoing>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d11a      	bne.n	8005740 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005718:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800571e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800572a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800572e:	2b00      	cmp	r3, #0
 8005730:	d112      	bne.n	8005758 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005736:	f043 0201 	orr.w	r2, r3, #1
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800573e:	e00b      	b.n	8005758 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005744:	f043 0210 	orr.w	r2, r3, #16
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005750:	f043 0201 	orr.w	r2, r3, #1
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f001 f885 	bl	8006868 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2260      	movs	r2, #96	@ 0x60
 8005764:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800576c:	2b00      	cmp	r3, #0
 800576e:	d011      	beq.n	8005794 <HAL_ADC_IRQHandler+0x374>
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00c      	beq.n	8005794 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800577e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 f8be 	bl	8005908 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2280      	movs	r2, #128	@ 0x80
 8005792:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800579a:	2b00      	cmp	r3, #0
 800579c:	d012      	beq.n	80057c4 <HAL_ADC_IRQHandler+0x3a4>
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00d      	beq.n	80057c4 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ac:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f001 f86b 	bl	8006890 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80057c2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d012      	beq.n	80057f4 <HAL_ADC_IRQHandler+0x3d4>
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00d      	beq.n	80057f4 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057dc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f001 f85d 	bl	80068a4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057f2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	f003 0310 	and.w	r3, r3, #16
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d043      	beq.n	8005886 <HAL_ADC_IRQHandler+0x466>
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	f003 0310 	and.w	r3, r3, #16
 8005804:	2b00      	cmp	r3, #0
 8005806:	d03e      	beq.n	8005886 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800580c:	2b00      	cmp	r3, #0
 800580e:	d102      	bne.n	8005816 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8005810:	2301      	movs	r3, #1
 8005812:	627b      	str	r3, [r7, #36]	@ 0x24
 8005814:	e021      	b.n	800585a <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d015      	beq.n	8005848 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005824:	d004      	beq.n	8005830 <HAL_ADC_IRQHandler+0x410>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a28      	ldr	r2, [pc, #160]	@ (80058cc <HAL_ADC_IRQHandler+0x4ac>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d101      	bne.n	8005834 <HAL_ADC_IRQHandler+0x414>
 8005830:	4b29      	ldr	r3, [pc, #164]	@ (80058d8 <HAL_ADC_IRQHandler+0x4b8>)
 8005832:	e000      	b.n	8005836 <HAL_ADC_IRQHandler+0x416>
 8005834:	4b29      	ldr	r3, [pc, #164]	@ (80058dc <HAL_ADC_IRQHandler+0x4bc>)
 8005836:	4618      	mov	r0, r3
 8005838:	f7ff fa1b 	bl	8004c72 <LL_ADC_GetMultiDMATransfer>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00b      	beq.n	800585a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8005842:	2301      	movs	r3, #1
 8005844:	627b      	str	r3, [r7, #36]	@ 0x24
 8005846:	e008      	b.n	800585a <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d001      	beq.n	800585a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8005856:	2301      	movs	r3, #1
 8005858:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800585a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585c:	2b01      	cmp	r3, #1
 800585e:	d10e      	bne.n	800587e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005864:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005870:	f043 0202 	orr.w	r2, r3, #2
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f84f 	bl	800591c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2210      	movs	r2, #16
 8005884:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800588c:	2b00      	cmp	r3, #0
 800588e:	d018      	beq.n	80058c2 <HAL_ADC_IRQHandler+0x4a2>
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005896:	2b00      	cmp	r3, #0
 8005898:	d013      	beq.n	80058c2 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800589e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058aa:	f043 0208 	orr.w	r2, r3, #8
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80058ba:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 ffdd 	bl	800687c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80058c2:	bf00      	nop
 80058c4:	3728      	adds	r7, #40	@ 0x28
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	50000100 	.word	0x50000100
 80058d0:	50000500 	.word	0x50000500
 80058d4:	50000400 	.word	0x50000400
 80058d8:	50000300 	.word	0x50000300
 80058dc:	50000700 	.word	0x50000700

080058e0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b0b6      	sub	sp, #216	@ 0xd8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800593a:	2300      	movs	r3, #0
 800593c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005940:	2300      	movs	r3, #0
 8005942:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800594a:	2b01      	cmp	r3, #1
 800594c:	d102      	bne.n	8005954 <HAL_ADC_ConfigChannel+0x24>
 800594e:	2302      	movs	r3, #2
 8005950:	f000 bc13 	b.w	800617a <HAL_ADC_ConfigChannel+0x84a>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4618      	mov	r0, r3
 8005962:	f7ff fa1d 	bl	8004da0 <LL_ADC_REG_IsConversionOngoing>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	f040 83f3 	bne.w	8006154 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6818      	ldr	r0, [r3, #0]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	6859      	ldr	r1, [r3, #4]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	461a      	mov	r2, r3
 800597c:	f7ff f88d 	bl	8004a9a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4618      	mov	r0, r3
 8005986:	f7ff fa0b 	bl	8004da0 <LL_ADC_REG_IsConversionOngoing>
 800598a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4618      	mov	r0, r3
 8005994:	f7ff fa17 	bl	8004dc6 <LL_ADC_INJ_IsConversionOngoing>
 8005998:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800599c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f040 81d9 	bne.w	8005d58 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80059a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f040 81d4 	bne.w	8005d58 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059b8:	d10f      	bne.n	80059da <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6818      	ldr	r0, [r3, #0]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2200      	movs	r2, #0
 80059c4:	4619      	mov	r1, r3
 80059c6:	f7ff f8a7 	bl	8004b18 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7ff f83b 	bl	8004a4e <LL_ADC_SetSamplingTimeCommonConfig>
 80059d8:	e00e      	b.n	80059f8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6818      	ldr	r0, [r3, #0]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	6819      	ldr	r1, [r3, #0]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	461a      	mov	r2, r3
 80059e8:	f7ff f896 	bl	8004b18 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2100      	movs	r1, #0
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7ff f82b 	bl	8004a4e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	695a      	ldr	r2, [r3, #20]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	08db      	lsrs	r3, r3, #3
 8005a04:	f003 0303 	and.w	r3, r3, #3
 8005a08:	005b      	lsls	r3, r3, #1
 8005a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	2b04      	cmp	r3, #4
 8005a18:	d022      	beq.n	8005a60 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6818      	ldr	r0, [r3, #0]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	6919      	ldr	r1, [r3, #16]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005a2a:	f7fe ff85 	bl	8004938 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6818      	ldr	r0, [r3, #0]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	6919      	ldr	r1, [r3, #16]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	f7fe ffd1 	bl	80049e2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6818      	ldr	r0, [r3, #0]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d102      	bne.n	8005a56 <HAL_ADC_ConfigChannel+0x126>
 8005a50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a54:	e000      	b.n	8005a58 <HAL_ADC_ConfigChannel+0x128>
 8005a56:	2300      	movs	r3, #0
 8005a58:	461a      	mov	r2, r3
 8005a5a:	f7fe ffdd 	bl	8004a18 <LL_ADC_SetOffsetSaturation>
 8005a5e:	e17b      	b.n	8005d58 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2100      	movs	r1, #0
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fe ff8a 	bl	8004980 <LL_ADC_GetOffsetChannel>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10a      	bne.n	8005a8c <HAL_ADC_ConfigChannel+0x15c>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2100      	movs	r1, #0
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7fe ff7f 	bl	8004980 <LL_ADC_GetOffsetChannel>
 8005a82:	4603      	mov	r3, r0
 8005a84:	0e9b      	lsrs	r3, r3, #26
 8005a86:	f003 021f 	and.w	r2, r3, #31
 8005a8a:	e01e      	b.n	8005aca <HAL_ADC_ConfigChannel+0x19a>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2100      	movs	r1, #0
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7fe ff74 	bl	8004980 <LL_ADC_GetOffsetChannel>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005aa2:	fa93 f3a3 	rbit	r3, r3
 8005aa6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005aaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005aae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005ab2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005aba:	2320      	movs	r3, #32
 8005abc:	e004      	b.n	8005ac8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005abe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005ac2:	fab3 f383 	clz	r3, r3
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d105      	bne.n	8005ae2 <HAL_ADC_ConfigChannel+0x1b2>
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	0e9b      	lsrs	r3, r3, #26
 8005adc:	f003 031f 	and.w	r3, r3, #31
 8005ae0:	e018      	b.n	8005b14 <HAL_ADC_ConfigChannel+0x1e4>
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005aee:	fa93 f3a3 	rbit	r3, r3
 8005af2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8005af6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005afa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8005afe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8005b06:	2320      	movs	r3, #32
 8005b08:	e004      	b.n	8005b14 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8005b0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005b0e:	fab3 f383 	clz	r3, r3
 8005b12:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d106      	bne.n	8005b26 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	2100      	movs	r1, #0
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7fe ff43 	bl	80049ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2101      	movs	r1, #1
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7fe ff27 	bl	8004980 <LL_ADC_GetOffsetChannel>
 8005b32:	4603      	mov	r3, r0
 8005b34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d10a      	bne.n	8005b52 <HAL_ADC_ConfigChannel+0x222>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2101      	movs	r1, #1
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7fe ff1c 	bl	8004980 <LL_ADC_GetOffsetChannel>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	0e9b      	lsrs	r3, r3, #26
 8005b4c:	f003 021f 	and.w	r2, r3, #31
 8005b50:	e01e      	b.n	8005b90 <HAL_ADC_ConfigChannel+0x260>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2101      	movs	r1, #1
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7fe ff11 	bl	8004980 <LL_ADC_GetOffsetChannel>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005b68:	fa93 f3a3 	rbit	r3, r3
 8005b6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8005b70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005b74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8005b78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d101      	bne.n	8005b84 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005b80:	2320      	movs	r3, #32
 8005b82:	e004      	b.n	8005b8e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005b84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b88:	fab3 f383 	clz	r3, r3
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d105      	bne.n	8005ba8 <HAL_ADC_ConfigChannel+0x278>
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	0e9b      	lsrs	r3, r3, #26
 8005ba2:	f003 031f 	and.w	r3, r3, #31
 8005ba6:	e018      	b.n	8005bda <HAL_ADC_ConfigChannel+0x2aa>
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005bb4:	fa93 f3a3 	rbit	r3, r3
 8005bb8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005bbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005bc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005bc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d101      	bne.n	8005bd0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005bcc:	2320      	movs	r3, #32
 8005bce:	e004      	b.n	8005bda <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005bd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005bd4:	fab3 f383 	clz	r3, r3
 8005bd8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d106      	bne.n	8005bec <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2200      	movs	r2, #0
 8005be4:	2101      	movs	r1, #1
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7fe fee0 	bl	80049ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2102      	movs	r1, #2
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fe fec4 	bl	8004980 <LL_ADC_GetOffsetChannel>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10a      	bne.n	8005c18 <HAL_ADC_ConfigChannel+0x2e8>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2102      	movs	r1, #2
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7fe feb9 	bl	8004980 <LL_ADC_GetOffsetChannel>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	0e9b      	lsrs	r3, r3, #26
 8005c12:	f003 021f 	and.w	r2, r3, #31
 8005c16:	e01e      	b.n	8005c56 <HAL_ADC_ConfigChannel+0x326>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2102      	movs	r1, #2
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fe feae 	bl	8004980 <LL_ADC_GetOffsetChannel>
 8005c24:	4603      	mov	r3, r0
 8005c26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c2e:	fa93 f3a3 	rbit	r3, r3
 8005c32:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8005c36:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005c3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8005c3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d101      	bne.n	8005c4a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8005c46:	2320      	movs	r3, #32
 8005c48:	e004      	b.n	8005c54 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8005c4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005c4e:	fab3 f383 	clz	r3, r3
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d105      	bne.n	8005c6e <HAL_ADC_ConfigChannel+0x33e>
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	0e9b      	lsrs	r3, r3, #26
 8005c68:	f003 031f 	and.w	r3, r3, #31
 8005c6c:	e016      	b.n	8005c9c <HAL_ADC_ConfigChannel+0x36c>
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c76:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005c7a:	fa93 f3a3 	rbit	r3, r3
 8005c7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8005c80:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005c82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8005c86:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8005c8e:	2320      	movs	r3, #32
 8005c90:	e004      	b.n	8005c9c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005c92:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c96:	fab3 f383 	clz	r3, r3
 8005c9a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d106      	bne.n	8005cae <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	2102      	movs	r1, #2
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7fe fe7f 	bl	80049ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2103      	movs	r1, #3
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7fe fe63 	bl	8004980 <LL_ADC_GetOffsetChannel>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10a      	bne.n	8005cda <HAL_ADC_ConfigChannel+0x3aa>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2103      	movs	r1, #3
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7fe fe58 	bl	8004980 <LL_ADC_GetOffsetChannel>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	0e9b      	lsrs	r3, r3, #26
 8005cd4:	f003 021f 	and.w	r2, r3, #31
 8005cd8:	e017      	b.n	8005d0a <HAL_ADC_ConfigChannel+0x3da>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2103      	movs	r1, #3
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7fe fe4d 	bl	8004980 <LL_ADC_GetOffsetChannel>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005cec:	fa93 f3a3 	rbit	r3, r3
 8005cf0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8005cf2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005cf4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005cf6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005cfc:	2320      	movs	r3, #32
 8005cfe:	e003      	b.n	8005d08 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8005d00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d02:	fab3 f383 	clz	r3, r3
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d105      	bne.n	8005d22 <HAL_ADC_ConfigChannel+0x3f2>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	0e9b      	lsrs	r3, r3, #26
 8005d1c:	f003 031f 	and.w	r3, r3, #31
 8005d20:	e011      	b.n	8005d46 <HAL_ADC_ConfigChannel+0x416>
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d2a:	fa93 f3a3 	rbit	r3, r3
 8005d2e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8005d30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d32:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005d34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8005d3a:	2320      	movs	r3, #32
 8005d3c:	e003      	b.n	8005d46 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8005d3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d40:	fab3 f383 	clz	r3, r3
 8005d44:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d106      	bne.n	8005d58 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	2103      	movs	r1, #3
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7fe fe2a 	bl	80049ac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7fe fff8 	bl	8004d52 <LL_ADC_IsEnabled>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f040 813d 	bne.w	8005fe4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6818      	ldr	r0, [r3, #0]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	6819      	ldr	r1, [r3, #0]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	461a      	mov	r2, r3
 8005d78:	f7fe fefa 	bl	8004b70 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	4aa2      	ldr	r2, [pc, #648]	@ (800600c <HAL_ADC_ConfigChannel+0x6dc>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	f040 812e 	bne.w	8005fe4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10b      	bne.n	8005db0 <HAL_ADC_ConfigChannel+0x480>
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	0e9b      	lsrs	r3, r3, #26
 8005d9e:	3301      	adds	r3, #1
 8005da0:	f003 031f 	and.w	r3, r3, #31
 8005da4:	2b09      	cmp	r3, #9
 8005da6:	bf94      	ite	ls
 8005da8:	2301      	movls	r3, #1
 8005daa:	2300      	movhi	r3, #0
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	e019      	b.n	8005de4 <HAL_ADC_ConfigChannel+0x4b4>
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005db6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005db8:	fa93 f3a3 	rbit	r3, r3
 8005dbc:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8005dbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005dc0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005dc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d101      	bne.n	8005dcc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005dc8:	2320      	movs	r3, #32
 8005dca:	e003      	b.n	8005dd4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005dcc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005dce:	fab3 f383 	clz	r3, r3
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	f003 031f 	and.w	r3, r3, #31
 8005dda:	2b09      	cmp	r3, #9
 8005ddc:	bf94      	ite	ls
 8005dde:	2301      	movls	r3, #1
 8005de0:	2300      	movhi	r3, #0
 8005de2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d079      	beq.n	8005edc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d107      	bne.n	8005e04 <HAL_ADC_ConfigChannel+0x4d4>
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	0e9b      	lsrs	r3, r3, #26
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	069b      	lsls	r3, r3, #26
 8005dfe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005e02:	e015      	b.n	8005e30 <HAL_ADC_ConfigChannel+0x500>
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e0c:	fa93 f3a3 	rbit	r3, r3
 8005e10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005e12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e14:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005e16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d101      	bne.n	8005e20 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005e1c:	2320      	movs	r3, #32
 8005e1e:	e003      	b.n	8005e28 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005e20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e22:	fab3 f383 	clz	r3, r3
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	3301      	adds	r3, #1
 8005e2a:	069b      	lsls	r3, r3, #26
 8005e2c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d109      	bne.n	8005e50 <HAL_ADC_ConfigChannel+0x520>
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	0e9b      	lsrs	r3, r3, #26
 8005e42:	3301      	adds	r3, #1
 8005e44:	f003 031f 	and.w	r3, r3, #31
 8005e48:	2101      	movs	r1, #1
 8005e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e4e:	e017      	b.n	8005e80 <HAL_ADC_ConfigChannel+0x550>
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e58:	fa93 f3a3 	rbit	r3, r3
 8005e5c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005e5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e60:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005e62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d101      	bne.n	8005e6c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005e68:	2320      	movs	r3, #32
 8005e6a:	e003      	b.n	8005e74 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005e6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e6e:	fab3 f383 	clz	r3, r3
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	3301      	adds	r3, #1
 8005e76:	f003 031f 	and.w	r3, r3, #31
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e80:	ea42 0103 	orr.w	r1, r2, r3
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10a      	bne.n	8005ea6 <HAL_ADC_ConfigChannel+0x576>
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	0e9b      	lsrs	r3, r3, #26
 8005e96:	3301      	adds	r3, #1
 8005e98:	f003 021f 	and.w	r2, r3, #31
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	005b      	lsls	r3, r3, #1
 8005ea0:	4413      	add	r3, r2
 8005ea2:	051b      	lsls	r3, r3, #20
 8005ea4:	e018      	b.n	8005ed8 <HAL_ADC_ConfigChannel+0x5a8>
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eae:	fa93 f3a3 	rbit	r3, r3
 8005eb2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005eb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005ebe:	2320      	movs	r3, #32
 8005ec0:	e003      	b.n	8005eca <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005ec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ec4:	fab3 f383 	clz	r3, r3
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	3301      	adds	r3, #1
 8005ecc:	f003 021f 	and.w	r2, r3, #31
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	005b      	lsls	r3, r3, #1
 8005ed4:	4413      	add	r3, r2
 8005ed6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005ed8:	430b      	orrs	r3, r1
 8005eda:	e07e      	b.n	8005fda <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d107      	bne.n	8005ef8 <HAL_ADC_ConfigChannel+0x5c8>
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	0e9b      	lsrs	r3, r3, #26
 8005eee:	3301      	adds	r3, #1
 8005ef0:	069b      	lsls	r3, r3, #26
 8005ef2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005ef6:	e015      	b.n	8005f24 <HAL_ADC_ConfigChannel+0x5f4>
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f00:	fa93 f3a3 	rbit	r3, r3
 8005f04:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f08:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d101      	bne.n	8005f14 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005f10:	2320      	movs	r3, #32
 8005f12:	e003      	b.n	8005f1c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f16:	fab3 f383 	clz	r3, r3
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	069b      	lsls	r3, r3, #26
 8005f20:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d109      	bne.n	8005f44 <HAL_ADC_ConfigChannel+0x614>
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	0e9b      	lsrs	r3, r3, #26
 8005f36:	3301      	adds	r3, #1
 8005f38:	f003 031f 	and.w	r3, r3, #31
 8005f3c:	2101      	movs	r1, #1
 8005f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f42:	e017      	b.n	8005f74 <HAL_ADC_ConfigChannel+0x644>
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f4a:	6a3b      	ldr	r3, [r7, #32]
 8005f4c:	fa93 f3a3 	rbit	r3, r3
 8005f50:	61fb      	str	r3, [r7, #28]
  return result;
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d101      	bne.n	8005f60 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005f5c:	2320      	movs	r3, #32
 8005f5e:	e003      	b.n	8005f68 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f62:	fab3 f383 	clz	r3, r3
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	3301      	adds	r3, #1
 8005f6a:	f003 031f 	and.w	r3, r3, #31
 8005f6e:	2101      	movs	r1, #1
 8005f70:	fa01 f303 	lsl.w	r3, r1, r3
 8005f74:	ea42 0103 	orr.w	r1, r2, r3
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10d      	bne.n	8005fa0 <HAL_ADC_ConfigChannel+0x670>
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	0e9b      	lsrs	r3, r3, #26
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	f003 021f 	and.w	r2, r3, #31
 8005f90:	4613      	mov	r3, r2
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	4413      	add	r3, r2
 8005f96:	3b1e      	subs	r3, #30
 8005f98:	051b      	lsls	r3, r3, #20
 8005f9a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005f9e:	e01b      	b.n	8005fd8 <HAL_ADC_ConfigChannel+0x6a8>
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	fa93 f3a3 	rbit	r3, r3
 8005fac:	613b      	str	r3, [r7, #16]
  return result;
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d101      	bne.n	8005fbc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005fb8:	2320      	movs	r3, #32
 8005fba:	e003      	b.n	8005fc4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	fab3 f383 	clz	r3, r3
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	f003 021f 	and.w	r2, r3, #31
 8005fca:	4613      	mov	r3, r2
 8005fcc:	005b      	lsls	r3, r3, #1
 8005fce:	4413      	add	r3, r2
 8005fd0:	3b1e      	subs	r3, #30
 8005fd2:	051b      	lsls	r3, r3, #20
 8005fd4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005fd8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005fde:	4619      	mov	r1, r3
 8005fe0:	f7fe fd9a 	bl	8004b18 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	4b09      	ldr	r3, [pc, #36]	@ (8006010 <HAL_ADC_ConfigChannel+0x6e0>)
 8005fea:	4013      	ands	r3, r2
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f000 80be 	beq.w	800616e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ffa:	d004      	beq.n	8006006 <HAL_ADC_ConfigChannel+0x6d6>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a04      	ldr	r2, [pc, #16]	@ (8006014 <HAL_ADC_ConfigChannel+0x6e4>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d10a      	bne.n	800601c <HAL_ADC_ConfigChannel+0x6ec>
 8006006:	4b04      	ldr	r3, [pc, #16]	@ (8006018 <HAL_ADC_ConfigChannel+0x6e8>)
 8006008:	e009      	b.n	800601e <HAL_ADC_ConfigChannel+0x6ee>
 800600a:	bf00      	nop
 800600c:	407f0000 	.word	0x407f0000
 8006010:	80080000 	.word	0x80080000
 8006014:	50000100 	.word	0x50000100
 8006018:	50000300 	.word	0x50000300
 800601c:	4b59      	ldr	r3, [pc, #356]	@ (8006184 <HAL_ADC_ConfigChannel+0x854>)
 800601e:	4618      	mov	r0, r3
 8006020:	f7fe fc7c 	bl	800491c <LL_ADC_GetCommonPathInternalCh>
 8006024:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a56      	ldr	r2, [pc, #344]	@ (8006188 <HAL_ADC_ConfigChannel+0x858>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d004      	beq.n	800603c <HAL_ADC_ConfigChannel+0x70c>
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a55      	ldr	r2, [pc, #340]	@ (800618c <HAL_ADC_ConfigChannel+0x85c>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d13a      	bne.n	80060b2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800603c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006040:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d134      	bne.n	80060b2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006050:	d005      	beq.n	800605e <HAL_ADC_ConfigChannel+0x72e>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a4e      	ldr	r2, [pc, #312]	@ (8006190 <HAL_ADC_ConfigChannel+0x860>)
 8006058:	4293      	cmp	r3, r2
 800605a:	f040 8085 	bne.w	8006168 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006066:	d004      	beq.n	8006072 <HAL_ADC_ConfigChannel+0x742>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a49      	ldr	r2, [pc, #292]	@ (8006194 <HAL_ADC_ConfigChannel+0x864>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d101      	bne.n	8006076 <HAL_ADC_ConfigChannel+0x746>
 8006072:	4a49      	ldr	r2, [pc, #292]	@ (8006198 <HAL_ADC_ConfigChannel+0x868>)
 8006074:	e000      	b.n	8006078 <HAL_ADC_ConfigChannel+0x748>
 8006076:	4a43      	ldr	r2, [pc, #268]	@ (8006184 <HAL_ADC_ConfigChannel+0x854>)
 8006078:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800607c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006080:	4619      	mov	r1, r3
 8006082:	4610      	mov	r0, r2
 8006084:	f7fe fc37 	bl	80048f6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006088:	4b44      	ldr	r3, [pc, #272]	@ (800619c <HAL_ADC_ConfigChannel+0x86c>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	099b      	lsrs	r3, r3, #6
 800608e:	4a44      	ldr	r2, [pc, #272]	@ (80061a0 <HAL_ADC_ConfigChannel+0x870>)
 8006090:	fba2 2303 	umull	r2, r3, r2, r3
 8006094:	099b      	lsrs	r3, r3, #6
 8006096:	1c5a      	adds	r2, r3, #1
 8006098:	4613      	mov	r3, r2
 800609a:	005b      	lsls	r3, r3, #1
 800609c:	4413      	add	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80060a2:	e002      	b.n	80060aa <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	3b01      	subs	r3, #1
 80060a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1f9      	bne.n	80060a4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80060b0:	e05a      	b.n	8006168 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a3b      	ldr	r2, [pc, #236]	@ (80061a4 <HAL_ADC_ConfigChannel+0x874>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d125      	bne.n	8006108 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80060bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80060c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d11f      	bne.n	8006108 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a31      	ldr	r2, [pc, #196]	@ (8006194 <HAL_ADC_ConfigChannel+0x864>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d104      	bne.n	80060dc <HAL_ADC_ConfigChannel+0x7ac>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a34      	ldr	r2, [pc, #208]	@ (80061a8 <HAL_ADC_ConfigChannel+0x878>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d047      	beq.n	800616c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060e4:	d004      	beq.n	80060f0 <HAL_ADC_ConfigChannel+0x7c0>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a2a      	ldr	r2, [pc, #168]	@ (8006194 <HAL_ADC_ConfigChannel+0x864>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d101      	bne.n	80060f4 <HAL_ADC_ConfigChannel+0x7c4>
 80060f0:	4a29      	ldr	r2, [pc, #164]	@ (8006198 <HAL_ADC_ConfigChannel+0x868>)
 80060f2:	e000      	b.n	80060f6 <HAL_ADC_ConfigChannel+0x7c6>
 80060f4:	4a23      	ldr	r2, [pc, #140]	@ (8006184 <HAL_ADC_ConfigChannel+0x854>)
 80060f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80060fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80060fe:	4619      	mov	r1, r3
 8006100:	4610      	mov	r0, r2
 8006102:	f7fe fbf8 	bl	80048f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006106:	e031      	b.n	800616c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a27      	ldr	r2, [pc, #156]	@ (80061ac <HAL_ADC_ConfigChannel+0x87c>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d12d      	bne.n	800616e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006112:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006116:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d127      	bne.n	800616e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a1c      	ldr	r2, [pc, #112]	@ (8006194 <HAL_ADC_ConfigChannel+0x864>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d022      	beq.n	800616e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006130:	d004      	beq.n	800613c <HAL_ADC_ConfigChannel+0x80c>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a17      	ldr	r2, [pc, #92]	@ (8006194 <HAL_ADC_ConfigChannel+0x864>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d101      	bne.n	8006140 <HAL_ADC_ConfigChannel+0x810>
 800613c:	4a16      	ldr	r2, [pc, #88]	@ (8006198 <HAL_ADC_ConfigChannel+0x868>)
 800613e:	e000      	b.n	8006142 <HAL_ADC_ConfigChannel+0x812>
 8006140:	4a10      	ldr	r2, [pc, #64]	@ (8006184 <HAL_ADC_ConfigChannel+0x854>)
 8006142:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006146:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800614a:	4619      	mov	r1, r3
 800614c:	4610      	mov	r0, r2
 800614e:	f7fe fbd2 	bl	80048f6 <LL_ADC_SetCommonPathInternalCh>
 8006152:	e00c      	b.n	800616e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006158:	f043 0220 	orr.w	r2, r3, #32
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8006166:	e002      	b.n	800616e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006168:	bf00      	nop
 800616a:	e000      	b.n	800616e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800616c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006176:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800617a:	4618      	mov	r0, r3
 800617c:	37d8      	adds	r7, #216	@ 0xd8
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	50000700 	.word	0x50000700
 8006188:	c3210000 	.word	0xc3210000
 800618c:	90c00010 	.word	0x90c00010
 8006190:	50000600 	.word	0x50000600
 8006194:	50000100 	.word	0x50000100
 8006198:	50000300 	.word	0x50000300
 800619c:	20000040 	.word	0x20000040
 80061a0:	053e2d63 	.word	0x053e2d63
 80061a4:	c7520000 	.word	0xc7520000
 80061a8:	50000500 	.word	0x50000500
 80061ac:	cb840000 	.word	0xcb840000

080061b0 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param pAnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, const ADC_AnalogWDGConfTypeDef *pAnalogWDGConfig)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b08e      	sub	sp, #56	@ 0x38
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061ba:	2300      	movs	r3, #0
 80061bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(pAnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(pAnalogWDGConfig->WatchdogMode));
  assert_param(IS_ADC_ANALOG_WATCHDOG_FILTERING_MODE(pAnalogWDGConfig->FilteringConfig));
  assert_param(IS_FUNCTIONAL_STATE(pAnalogWDGConfig->ITMode));

  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80061c8:	d003      	beq.n	80061d2 <HAL_ADC_AnalogWDGConfig+0x22>
      (pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80061ce:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d101      	bne.n	80061e0 <HAL_ADC_AnalogWDGConfig+0x30>
 80061dc:	2302      	movs	r3, #2
 80061de:	e1ea      	b.n	80065b6 <HAL_ADC_AnalogWDGConfig+0x406>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7fe fdd7 	bl	8004da0 <LL_ADC_REG_IsConversionOngoing>
 80061f2:	62b8      	str	r0, [r7, #40]	@ 0x28
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7fe fde4 	bl	8004dc6 <LL_ADC_INJ_IsConversionOngoing>
 80061fe:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006202:	2b00      	cmp	r3, #0
 8006204:	f040 8175 	bne.w	80064f2 <HAL_ADC_AnalogWDGConfig+0x342>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620a:	2b00      	cmp	r3, #0
 800620c:	f040 8171 	bne.w	80064f2 <HAL_ADC_AnalogWDGConfig+0x342>
     )
  {
    /* Analog watchdog configuration */
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a90      	ldr	r2, [pc, #576]	@ (8006458 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8006216:	4293      	cmp	r3, r2
 8006218:	f040 808d 	bne.w	8006336 <HAL_ADC_AnalogWDGConfig+0x186>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (pAnalogWDGConfig->WatchdogMode)
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8006224:	d034      	beq.n	8006290 <HAL_ADC_AnalogWDGConfig+0xe0>
 8006226:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 800622a:	d856      	bhi.n	80062da <HAL_ADC_AnalogWDGConfig+0x12a>
 800622c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006230:	d04b      	beq.n	80062ca <HAL_ADC_AnalogWDGConfig+0x11a>
 8006232:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006236:	d850      	bhi.n	80062da <HAL_ADC_AnalogWDGConfig+0x12a>
 8006238:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800623c:	d01b      	beq.n	8006276 <HAL_ADC_AnalogWDGConfig+0xc6>
 800623e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006242:	d84a      	bhi.n	80062da <HAL_ADC_AnalogWDGConfig+0x12a>
 8006244:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006248:	d037      	beq.n	80062ba <HAL_ADC_AnalogWDGConfig+0x10a>
 800624a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800624e:	d844      	bhi.n	80062da <HAL_ADC_AnalogWDGConfig+0x12a>
 8006250:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006254:	d029      	beq.n	80062aa <HAL_ADC_AnalogWDGConfig+0xfa>
 8006256:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800625a:	d13e      	bne.n	80062da <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8006268:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 800626c:	461a      	mov	r2, r3
 800626e:	497a      	ldr	r1, [pc, #488]	@ (8006458 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8006270:	f7fe fca2 	bl	8004bb8 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR));
          break;
 8006274:	e039      	b.n	80062ea <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8006282:	f043 73a0 	orr.w	r3, r3, #20971520	@ 0x1400000
 8006286:	461a      	mov	r2, r3
 8006288:	4973      	ldr	r1, [pc, #460]	@ (8006458 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800628a:	f7fe fc95 	bl	8004bb8 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_INJECTED));
          break;
 800628e:	e02c      	b.n	80062ea <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 800629c:	f043 73e0 	orr.w	r3, r3, #29360128	@ 0x1c00000
 80062a0:	461a      	mov	r2, r3
 80062a2:	496d      	ldr	r1, [pc, #436]	@ (8006458 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80062a4:	f7fe fc88 	bl	8004bb8 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 80062a8:	e01f      	b.n	80062ea <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a6b      	ldr	r2, [pc, #428]	@ (800645c <HAL_ADC_AnalogWDGConfig+0x2ac>)
 80062b0:	4969      	ldr	r1, [pc, #420]	@ (8006458 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7fe fc80 	bl	8004bb8 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80062b8:	e017      	b.n	80062ea <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a68      	ldr	r2, [pc, #416]	@ (8006460 <HAL_ADC_AnalogWDGConfig+0x2b0>)
 80062c0:	4965      	ldr	r1, [pc, #404]	@ (8006458 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7fe fc78 	bl	8004bb8 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80062c8:	e00f      	b.n	80062ea <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a65      	ldr	r2, [pc, #404]	@ (8006464 <HAL_ADC_AnalogWDGConfig+0x2b4>)
 80062d0:	4961      	ldr	r1, [pc, #388]	@ (8006458 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7fe fc70 	bl	8004bb8 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80062d8:	e007      	b.n	80062ea <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2200      	movs	r2, #0
 80062e0:	495d      	ldr	r1, [pc, #372]	@ (8006458 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fe fc68 	bl	8004bb8 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80062e8:	bf00      	nop
      }

      /* Set the filtering configuration */
      MODIFY_REG(hadc->Instance->TR1,
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	699a      	ldr	r2, [r3, #24]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	621a      	str	r2, [r3, #32]
                 ADC_TR1_AWDFILT,
                 pAnalogWDGConfig->FilteringConfig);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006304:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4618      	mov	r0, r3
 8006312:	f7fe fd6b 	bl	8004dec <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (pAnalogWDGConfig->ITMode == ENABLE)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	7b1b      	ldrb	r3, [r3, #12]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d105      	bne.n	800632a <HAL_ADC_AnalogWDGConfig+0x17a>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4618      	mov	r0, r3
 8006324:	f7fe fd8b 	bl	8004e3e <LL_ADC_EnableIT_AWD1>
 8006328:	e0e3      	b.n	80064f2 <HAL_ADC_AnalogWDGConfig+0x342>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4618      	mov	r0, r3
 8006330:	f7fe fdb5 	bl	8004e9e <LL_ADC_DisableIT_AWD1>
 8006334:	e0dd      	b.n	80064f2 <HAL_ADC_AnalogWDGConfig+0x342>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (pAnalogWDGConfig->WatchdogMode)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 800633e:	d01d      	beq.n	800637c <HAL_ADC_AnalogWDGConfig+0x1cc>
 8006340:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8006344:	f200 8092 	bhi.w	800646c <HAL_ADC_AnalogWDGConfig+0x2bc>
 8006348:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800634c:	d07b      	beq.n	8006446 <HAL_ADC_AnalogWDGConfig+0x296>
 800634e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006352:	f200 808b 	bhi.w	800646c <HAL_ADC_AnalogWDGConfig+0x2bc>
 8006356:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800635a:	d00f      	beq.n	800637c <HAL_ADC_AnalogWDGConfig+0x1cc>
 800635c:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006360:	f200 8084 	bhi.w	800646c <HAL_ADC_AnalogWDGConfig+0x2bc>
 8006364:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006368:	d06d      	beq.n	8006446 <HAL_ADC_AnalogWDGConfig+0x296>
 800636a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800636e:	d87d      	bhi.n	800646c <HAL_ADC_AnalogWDGConfig+0x2bc>
 8006370:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006374:	d067      	beq.n	8006446 <HAL_ADC_AnalogWDGConfig+0x296>
 8006376:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800637a:	d177      	bne.n	800646c <HAL_ADC_AnalogWDGConfig+0x2bc>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a39      	ldr	r2, [pc, #228]	@ (8006468 <HAL_ADC_AnalogWDGConfig+0x2b8>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d12f      	bne.n	80063e6 <HAL_ADC_AnalogWDGConfig+0x236>
          {
            SET_BIT(hadc->Instance->AWD2CR,
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800638e:	2b00      	cmp	r3, #0
 8006390:	d108      	bne.n	80063a4 <HAL_ADC_AnalogWDGConfig+0x1f4>
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	0e9b      	lsrs	r3, r3, #26
 8006398:	f003 031f 	and.w	r3, r3, #31
 800639c:	2201      	movs	r2, #1
 800639e:	fa02 f303 	lsl.w	r3, r2, r3
 80063a2:	e016      	b.n	80063d2 <HAL_ADC_AnalogWDGConfig+0x222>
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	fa93 f3a3 	rbit	r3, r3
 80063b0:	61bb      	str	r3, [r7, #24]
  return result;
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80063b6:	6a3b      	ldr	r3, [r7, #32]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d101      	bne.n	80063c0 <HAL_ADC_AnalogWDGConfig+0x210>
    return 32U;
 80063bc:	2320      	movs	r3, #32
 80063be:	e003      	b.n	80063c8 <HAL_ADC_AnalogWDGConfig+0x218>
  return __builtin_clz(value);
 80063c0:	6a3b      	ldr	r3, [r7, #32]
 80063c2:	fab3 f383 	clz	r3, r3
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	f003 031f 	and.w	r3, r3, #31
 80063cc:	2201      	movs	r2, #1
 80063ce:	fa02 f303 	lsl.w	r3, r2, r3
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	6812      	ldr	r2, [r2, #0]
 80063d6:	f8d2 10a0 	ldr.w	r1, [r2, #160]	@ 0xa0
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	6812      	ldr	r2, [r2, #0]
 80063de:	430b      	orrs	r3, r1
 80063e0:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
          else
          {
            SET_BIT(hadc->Instance->AWD3CR,
                    (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 80063e4:	e04b      	b.n	800647e <HAL_ADC_AnalogWDGConfig+0x2ce>
            SET_BIT(hadc->Instance->AWD3CR,
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d108      	bne.n	8006404 <HAL_ADC_AnalogWDGConfig+0x254>
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	0e9b      	lsrs	r3, r3, #26
 80063f8:	f003 031f 	and.w	r3, r3, #31
 80063fc:	2201      	movs	r2, #1
 80063fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006402:	e016      	b.n	8006432 <HAL_ADC_AnalogWDGConfig+0x282>
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	fa93 f3a3 	rbit	r3, r3
 8006410:	60fb      	str	r3, [r7, #12]
  return result;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d101      	bne.n	8006420 <HAL_ADC_AnalogWDGConfig+0x270>
    return 32U;
 800641c:	2320      	movs	r3, #32
 800641e:	e003      	b.n	8006428 <HAL_ADC_AnalogWDGConfig+0x278>
  return __builtin_clz(value);
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	fab3 f383 	clz	r3, r3
 8006426:	b2db      	uxtb	r3, r3
 8006428:	f003 031f 	and.w	r3, r3, #31
 800642c:	2201      	movs	r2, #1
 800642e:	fa02 f303 	lsl.w	r3, r2, r3
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	6812      	ldr	r2, [r2, #0]
 8006436:	f8d2 10a4 	ldr.w	r1, [r2, #164]	@ 0xa4
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	6812      	ldr	r2, [r2, #0]
 800643e:	430b      	orrs	r3, r1
 8006440:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
          break;
 8006444:	e01b      	b.n	800647e <HAL_ADC_AnalogWDGConfig+0x2ce>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6818      	ldr	r0, [r3, #0]
                                          pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 800644e:	4a05      	ldr	r2, [pc, #20]	@ (8006464 <HAL_ADC_AnalogWDGConfig+0x2b4>)
 8006450:	4619      	mov	r1, r3
 8006452:	f7fe fbb1 	bl	8004bb8 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006456:	e012      	b.n	800647e <HAL_ADC_AnalogWDGConfig+0x2ce>
 8006458:	7dc00000 	.word	0x7dc00000
 800645c:	0087ffff 	.word	0x0087ffff
 8006460:	0107ffff 	.word	0x0107ffff
 8006464:	0187ffff 	.word	0x0187ffff
 8006468:	0017ffff 	.word	0x0017ffff

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6818      	ldr	r0, [r3, #0]
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2200      	movs	r2, #0
 8006476:	4619      	mov	r1, r3
 8006478:	f7fe fb9e 	bl	8004bb8 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800647c:	bf00      	nop
      }

      if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a4f      	ldr	r2, [pc, #316]	@ (80065c0 <HAL_ADC_AnalogWDGConfig+0x410>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d11a      	bne.n	80064be <HAL_ADC_AnalogWDGConfig+0x30e>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800648c:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4618      	mov	r0, r3
 800649a:	f7fe fcb4 	bl	8004e06 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	7b1b      	ldrb	r3, [r3, #12]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d105      	bne.n	80064b2 <HAL_ADC_AnalogWDGConfig+0x302>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7fe fcd7 	bl	8004e5e <LL_ADC_EnableIT_AWD2>
 80064b0:	e01f      	b.n	80064f2 <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7fe fd01 	bl	8004ebe <LL_ADC_DisableIT_AWD2>
 80064bc:	e019      	b.n	80064f2 <HAL_ADC_AnalogWDGConfig+0x342>
      }
      /* (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064c2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7fe fca7 	bl	8004e22 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	7b1b      	ldrb	r3, [r3, #12]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d105      	bne.n	80064e8 <HAL_ADC_AnalogWDGConfig+0x338>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7fe fccc 	bl	8004e7e <LL_ADC_EnableIT_AWD3>
 80064e6:	e004      	b.n	80064f2 <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7fe fcf6 	bl	8004ede <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a33      	ldr	r2, [pc, #204]	@ (80065c4 <HAL_ADC_AnalogWDGConfig+0x414>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d118      	bne.n	800652e <HAL_ADC_AnalogWDGConfig+0x37e>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	691a      	ldr	r2, [r3, #16]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	08db      	lsrs	r3, r3, #3
 8006508:	f003 0303 	and.w	r3, r3, #3
 800650c:	005b      	lsls	r3, r3, #1
 800650e:	fa02 f303 	lsl.w	r3, r2, r3
 8006512:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	695a      	ldr	r2, [r3, #20]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	08db      	lsrs	r3, r3, #3
 8006520:	f003 0303 	and.w	r3, r3, #3
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	fa02 f303 	lsl.w	r3, r2, r3
 800652a:	633b      	str	r3, [r7, #48]	@ 0x30
 800652c:	e035      	b.n	800659a <HAL_ADC_AnalogWDGConfig+0x3ea>
  else
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f003 0318 	and.w	r3, r3, #24
 8006538:	2b18      	cmp	r3, #24
 800653a:	d00f      	beq.n	800655c <HAL_ADC_AnalogWDGConfig+0x3ac>
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	691a      	ldr	r2, [r3, #16]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	08db      	lsrs	r3, r3, #3
 8006548:	f003 0303 	and.w	r3, r3, #3
 800654c:	f1c3 0302 	rsb	r3, r3, #2
 8006550:	005b      	lsls	r3, r3, #1
 8006552:	f003 031e 	and.w	r3, r3, #30
 8006556:	fa22 f303 	lsr.w	r3, r2, r3
 800655a:	e002      	b.n	8006562 <HAL_ADC_AnalogWDGConfig+0x3b2>
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp_awd_low_threshold_shifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	f003 0318 	and.w	r3, r3, #24
 800656e:	2b18      	cmp	r3, #24
 8006570:	d00f      	beq.n	8006592 <HAL_ADC_AnalogWDGConfig+0x3e2>
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	695a      	ldr	r2, [r3, #20]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	08db      	lsrs	r3, r3, #3
 800657e:	f003 0303 	and.w	r3, r3, #3
 8006582:	f1c3 0302 	rsb	r3, r3, #2
 8006586:	005b      	lsls	r3, r3, #1
 8006588:	f003 031e 	and.w	r3, r3, #30
 800658c:	fa22 f303 	lsr.w	r3, r2, r3
 8006590:	e002      	b.n	8006598 <HAL_ADC_AnalogWDGConfig+0x3e8>
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, tmp_awd_high_threshold_shifted,
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6818      	ldr	r0, [r3, #0]
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	6819      	ldr	r1, [r3, #0]
 80065a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80065a6:	f7fe fb34 	bl	8004c12 <LL_ADC_ConfigAnalogWDThresholds>
                                  tmp_awd_low_threshold_shifted);

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80065b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3738      	adds	r7, #56	@ 0x38
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	0017ffff 	.word	0x0017ffff
 80065c4:	7dc00000 	.word	0x7dc00000

080065c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80065d0:	2300      	movs	r3, #0
 80065d2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4618      	mov	r0, r3
 80065da:	f7fe fbba 	bl	8004d52 <LL_ADC_IsEnabled>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d176      	bne.n	80066d2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689a      	ldr	r2, [r3, #8]
 80065ea:	4b3c      	ldr	r3, [pc, #240]	@ (80066dc <ADC_Enable+0x114>)
 80065ec:	4013      	ands	r3, r2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00d      	beq.n	800660e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065f6:	f043 0210 	orr.w	r2, r3, #16
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006602:	f043 0201 	orr.w	r2, r3, #1
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e062      	b.n	80066d4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4618      	mov	r0, r3
 8006614:	f7fe fb89 	bl	8004d2a <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006620:	d004      	beq.n	800662c <ADC_Enable+0x64>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a2e      	ldr	r2, [pc, #184]	@ (80066e0 <ADC_Enable+0x118>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d101      	bne.n	8006630 <ADC_Enable+0x68>
 800662c:	4b2d      	ldr	r3, [pc, #180]	@ (80066e4 <ADC_Enable+0x11c>)
 800662e:	e000      	b.n	8006632 <ADC_Enable+0x6a>
 8006630:	4b2d      	ldr	r3, [pc, #180]	@ (80066e8 <ADC_Enable+0x120>)
 8006632:	4618      	mov	r0, r3
 8006634:	f7fe f972 	bl	800491c <LL_ADC_GetCommonPathInternalCh>
 8006638:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800663a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800663e:	2b00      	cmp	r3, #0
 8006640:	d013      	beq.n	800666a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006642:	4b2a      	ldr	r3, [pc, #168]	@ (80066ec <ADC_Enable+0x124>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	099b      	lsrs	r3, r3, #6
 8006648:	4a29      	ldr	r2, [pc, #164]	@ (80066f0 <ADC_Enable+0x128>)
 800664a:	fba2 2303 	umull	r2, r3, r2, r3
 800664e:	099b      	lsrs	r3, r3, #6
 8006650:	1c5a      	adds	r2, r3, #1
 8006652:	4613      	mov	r3, r2
 8006654:	005b      	lsls	r3, r3, #1
 8006656:	4413      	add	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800665c:	e002      	b.n	8006664 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	3b01      	subs	r3, #1
 8006662:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1f9      	bne.n	800665e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800666a:	f7fe f8df 	bl	800482c <HAL_GetTick>
 800666e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006670:	e028      	b.n	80066c4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4618      	mov	r0, r3
 8006678:	f7fe fb6b 	bl	8004d52 <LL_ADC_IsEnabled>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d104      	bne.n	800668c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4618      	mov	r0, r3
 8006688:	f7fe fb4f 	bl	8004d2a <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800668c:	f7fe f8ce 	bl	800482c <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	2b02      	cmp	r3, #2
 8006698:	d914      	bls.n	80066c4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0301 	and.w	r3, r3, #1
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d00d      	beq.n	80066c4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066ac:	f043 0210 	orr.w	r2, r3, #16
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066b8:	f043 0201 	orr.w	r2, r3, #1
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e007      	b.n	80066d4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d1cf      	bne.n	8006672 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3710      	adds	r7, #16
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	8000003f 	.word	0x8000003f
 80066e0:	50000100 	.word	0x50000100
 80066e4:	50000300 	.word	0x50000300
 80066e8:	50000700 	.word	0x50000700
 80066ec:	20000040 	.word	0x20000040
 80066f0:	053e2d63 	.word	0x053e2d63

080066f4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006700:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006706:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800670a:	2b00      	cmp	r3, #0
 800670c:	d14b      	bne.n	80067a6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006712:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0308 	and.w	r3, r3, #8
 8006724:	2b00      	cmp	r3, #0
 8006726:	d021      	beq.n	800676c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4618      	mov	r0, r3
 800672e:	f7fe f9a1 	bl	8004a74 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d032      	beq.n	800679e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006742:	2b00      	cmp	r3, #0
 8006744:	d12b      	bne.n	800679e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800674a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006756:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d11f      	bne.n	800679e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006762:	f043 0201 	orr.w	r2, r3, #1
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	65da      	str	r2, [r3, #92]	@ 0x5c
 800676a:	e018      	b.n	800679e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	f003 0302 	and.w	r3, r3, #2
 8006776:	2b00      	cmp	r3, #0
 8006778:	d111      	bne.n	800679e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800677e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800678a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d105      	bne.n	800679e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006796:	f043 0201 	orr.w	r2, r3, #1
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f7ff f89e 	bl	80058e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80067a4:	e00e      	b.n	80067c4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067aa:	f003 0310 	and.w	r3, r3, #16
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f7ff f8b2 	bl	800591c <HAL_ADC_ErrorCallback>
}
 80067b8:	e004      	b.n	80067c4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	4798      	blx	r3
}
 80067c4:	bf00      	nop
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067d8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f7ff f88a 	bl	80058f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80067e0:	bf00      	nop
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067fa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006806:	f043 0204 	orr.w	r2, r3, #4
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f7ff f884 	bl	800591c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006814:	bf00      	nop
 8006816:	3710      	adds	r7, #16
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <LL_ADC_IsEnabled>:
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	f003 0301 	and.w	r3, r3, #1
 800682c:	2b01      	cmp	r3, #1
 800682e:	d101      	bne.n	8006834 <LL_ADC_IsEnabled+0x18>
 8006830:	2301      	movs	r3, #1
 8006832:	e000      	b.n	8006836 <LL_ADC_IsEnabled+0x1a>
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr

08006842 <LL_ADC_REG_IsConversionOngoing>:
{
 8006842:	b480      	push	{r7}
 8006844:	b083      	sub	sp, #12
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f003 0304 	and.w	r3, r3, #4
 8006852:	2b04      	cmp	r3, #4
 8006854:	d101      	bne.n	800685a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006856:	2301      	movs	r3, #1
 8006858:	e000      	b.n	800685c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80068cc:	b590      	push	{r4, r7, lr}
 80068ce:	b0a1      	sub	sp, #132	@ 0x84
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80068d6:	2300      	movs	r3, #0
 80068d8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d101      	bne.n	80068ea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80068e6:	2302      	movs	r3, #2
 80068e8:	e0e7      	b.n	8006aba <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80068f2:	2300      	movs	r3, #0
 80068f4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80068f6:	2300      	movs	r3, #0
 80068f8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006902:	d102      	bne.n	800690a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006904:	4b6f      	ldr	r3, [pc, #444]	@ (8006ac4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006906:	60bb      	str	r3, [r7, #8]
 8006908:	e009      	b.n	800691e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a6e      	ldr	r2, [pc, #440]	@ (8006ac8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d102      	bne.n	800691a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8006914:	4b6d      	ldr	r3, [pc, #436]	@ (8006acc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006916:	60bb      	str	r3, [r7, #8]
 8006918:	e001      	b.n	800691e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800691a:	2300      	movs	r3, #0
 800691c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d10b      	bne.n	800693c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006928:	f043 0220 	orr.w	r2, r3, #32
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e0be      	b.n	8006aba <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	4618      	mov	r0, r3
 8006940:	f7ff ff7f 	bl	8006842 <LL_ADC_REG_IsConversionOngoing>
 8006944:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4618      	mov	r0, r3
 800694c:	f7ff ff79 	bl	8006842 <LL_ADC_REG_IsConversionOngoing>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	f040 80a0 	bne.w	8006a98 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8006958:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800695a:	2b00      	cmp	r3, #0
 800695c:	f040 809c 	bne.w	8006a98 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006968:	d004      	beq.n	8006974 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a55      	ldr	r2, [pc, #340]	@ (8006ac4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d101      	bne.n	8006978 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006974:	4b56      	ldr	r3, [pc, #344]	@ (8006ad0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8006976:	e000      	b.n	800697a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8006978:	4b56      	ldr	r3, [pc, #344]	@ (8006ad4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800697a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d04b      	beq.n	8006a1c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006984:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	6859      	ldr	r1, [r3, #4]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006996:	035b      	lsls	r3, r3, #13
 8006998:	430b      	orrs	r3, r1
 800699a:	431a      	orrs	r2, r3
 800699c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800699e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80069a8:	d004      	beq.n	80069b4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a45      	ldr	r2, [pc, #276]	@ (8006ac4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d10f      	bne.n	80069d4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80069b4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80069b8:	f7ff ff30 	bl	800681c <LL_ADC_IsEnabled>
 80069bc:	4604      	mov	r4, r0
 80069be:	4841      	ldr	r0, [pc, #260]	@ (8006ac4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80069c0:	f7ff ff2c 	bl	800681c <LL_ADC_IsEnabled>
 80069c4:	4603      	mov	r3, r0
 80069c6:	4323      	orrs	r3, r4
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	bf0c      	ite	eq
 80069cc:	2301      	moveq	r3, #1
 80069ce:	2300      	movne	r3, #0
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	e012      	b.n	80069fa <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80069d4:	483c      	ldr	r0, [pc, #240]	@ (8006ac8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80069d6:	f7ff ff21 	bl	800681c <LL_ADC_IsEnabled>
 80069da:	4604      	mov	r4, r0
 80069dc:	483b      	ldr	r0, [pc, #236]	@ (8006acc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80069de:	f7ff ff1d 	bl	800681c <LL_ADC_IsEnabled>
 80069e2:	4603      	mov	r3, r0
 80069e4:	431c      	orrs	r4, r3
 80069e6:	483c      	ldr	r0, [pc, #240]	@ (8006ad8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80069e8:	f7ff ff18 	bl	800681c <LL_ADC_IsEnabled>
 80069ec:	4603      	mov	r3, r0
 80069ee:	4323      	orrs	r3, r4
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	bf0c      	ite	eq
 80069f4:	2301      	moveq	r3, #1
 80069f6:	2300      	movne	r3, #0
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d056      	beq.n	8006aac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80069fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006a06:	f023 030f 	bic.w	r3, r3, #15
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	6811      	ldr	r1, [r2, #0]
 8006a0e:	683a      	ldr	r2, [r7, #0]
 8006a10:	6892      	ldr	r2, [r2, #8]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	431a      	orrs	r2, r3
 8006a16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a18:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006a1a:	e047      	b.n	8006aac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006a1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006a24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a26:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a30:	d004      	beq.n	8006a3c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a23      	ldr	r2, [pc, #140]	@ (8006ac4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d10f      	bne.n	8006a5c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8006a3c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006a40:	f7ff feec 	bl	800681c <LL_ADC_IsEnabled>
 8006a44:	4604      	mov	r4, r0
 8006a46:	481f      	ldr	r0, [pc, #124]	@ (8006ac4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006a48:	f7ff fee8 	bl	800681c <LL_ADC_IsEnabled>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	4323      	orrs	r3, r4
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	bf0c      	ite	eq
 8006a54:	2301      	moveq	r3, #1
 8006a56:	2300      	movne	r3, #0
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	e012      	b.n	8006a82 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8006a5c:	481a      	ldr	r0, [pc, #104]	@ (8006ac8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006a5e:	f7ff fedd 	bl	800681c <LL_ADC_IsEnabled>
 8006a62:	4604      	mov	r4, r0
 8006a64:	4819      	ldr	r0, [pc, #100]	@ (8006acc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006a66:	f7ff fed9 	bl	800681c <LL_ADC_IsEnabled>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	431c      	orrs	r4, r3
 8006a6e:	481a      	ldr	r0, [pc, #104]	@ (8006ad8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006a70:	f7ff fed4 	bl	800681c <LL_ADC_IsEnabled>
 8006a74:	4603      	mov	r3, r0
 8006a76:	4323      	orrs	r3, r4
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	bf0c      	ite	eq
 8006a7c:	2301      	moveq	r3, #1
 8006a7e:	2300      	movne	r3, #0
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d012      	beq.n	8006aac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006a86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006a8e:	f023 030f 	bic.w	r3, r3, #15
 8006a92:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006a94:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006a96:	e009      	b.n	8006aac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a9c:	f043 0220 	orr.w	r2, r3, #32
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8006aaa:	e000      	b.n	8006aae <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006aac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006ab6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3784      	adds	r7, #132	@ 0x84
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd90      	pop	{r4, r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	50000100 	.word	0x50000100
 8006ac8:	50000400 	.word	0x50000400
 8006acc:	50000500 	.word	0x50000500
 8006ad0:	50000300 	.word	0x50000300
 8006ad4:	50000700 	.word	0x50000700
 8006ad8:	50000600 	.word	0x50000600

08006adc <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006ae4:	4b05      	ldr	r3, [pc, #20]	@ (8006afc <LL_EXTI_EnableIT_0_31+0x20>)
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	4904      	ldr	r1, [pc, #16]	@ (8006afc <LL_EXTI_EnableIT_0_31+0x20>)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	600b      	str	r3, [r1, #0]
}
 8006af0:	bf00      	nop
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr
 8006afc:	40010400 	.word	0x40010400

08006b00 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006b08:	4b05      	ldr	r3, [pc, #20]	@ (8006b20 <LL_EXTI_EnableIT_32_63+0x20>)
 8006b0a:	6a1a      	ldr	r2, [r3, #32]
 8006b0c:	4904      	ldr	r1, [pc, #16]	@ (8006b20 <LL_EXTI_EnableIT_32_63+0x20>)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	620b      	str	r3, [r1, #32]
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr
 8006b20:	40010400 	.word	0x40010400

08006b24 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8006b2c:	4b06      	ldr	r3, [pc, #24]	@ (8006b48 <LL_EXTI_DisableIT_0_31+0x24>)
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	43db      	mvns	r3, r3
 8006b34:	4904      	ldr	r1, [pc, #16]	@ (8006b48 <LL_EXTI_DisableIT_0_31+0x24>)
 8006b36:	4013      	ands	r3, r2
 8006b38:	600b      	str	r3, [r1, #0]
}
 8006b3a:	bf00      	nop
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	40010400 	.word	0x40010400

08006b4c <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8006b54:	4b06      	ldr	r3, [pc, #24]	@ (8006b70 <LL_EXTI_DisableIT_32_63+0x24>)
 8006b56:	6a1a      	ldr	r2, [r3, #32]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	43db      	mvns	r3, r3
 8006b5c:	4904      	ldr	r1, [pc, #16]	@ (8006b70 <LL_EXTI_DisableIT_32_63+0x24>)
 8006b5e:	4013      	ands	r3, r2
 8006b60:	620b      	str	r3, [r1, #32]
}
 8006b62:	bf00      	nop
 8006b64:	370c      	adds	r7, #12
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	40010400 	.word	0x40010400

08006b74 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8006b7c:	4b05      	ldr	r3, [pc, #20]	@ (8006b94 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	4904      	ldr	r1, [pc, #16]	@ (8006b94 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	604b      	str	r3, [r1, #4]

}
 8006b88:	bf00      	nop
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	40010400 	.word	0x40010400

08006b98 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8006ba0:	4b05      	ldr	r3, [pc, #20]	@ (8006bb8 <LL_EXTI_EnableEvent_32_63+0x20>)
 8006ba2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ba4:	4904      	ldr	r1, [pc, #16]	@ (8006bb8 <LL_EXTI_EnableEvent_32_63+0x20>)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006bac:	bf00      	nop
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr
 8006bb8:	40010400 	.word	0x40010400

08006bbc <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006bc4:	4b06      	ldr	r3, [pc, #24]	@ (8006be0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006bc6:	685a      	ldr	r2, [r3, #4]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	43db      	mvns	r3, r3
 8006bcc:	4904      	ldr	r1, [pc, #16]	@ (8006be0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006bce:	4013      	ands	r3, r2
 8006bd0:	604b      	str	r3, [r1, #4]
}
 8006bd2:	bf00      	nop
 8006bd4:	370c      	adds	r7, #12
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	40010400 	.word	0x40010400

08006be4 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8006bec:	4b06      	ldr	r3, [pc, #24]	@ (8006c08 <LL_EXTI_DisableEvent_32_63+0x24>)
 8006bee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	43db      	mvns	r3, r3
 8006bf4:	4904      	ldr	r1, [pc, #16]	@ (8006c08 <LL_EXTI_DisableEvent_32_63+0x24>)
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006bfa:	bf00      	nop
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	40010400 	.word	0x40010400

08006c0c <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8006c14:	4b05      	ldr	r3, [pc, #20]	@ (8006c2c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006c16:	689a      	ldr	r2, [r3, #8]
 8006c18:	4904      	ldr	r1, [pc, #16]	@ (8006c2c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	608b      	str	r3, [r1, #8]

}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr
 8006c2c:	40010400 	.word	0x40010400

08006c30 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8006c38:	4b05      	ldr	r3, [pc, #20]	@ (8006c50 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006c3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c3c:	4904      	ldr	r1, [pc, #16]	@ (8006c50 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr
 8006c50:	40010400 	.word	0x40010400

08006c54 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006c5c:	4b06      	ldr	r3, [pc, #24]	@ (8006c78 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006c5e:	689a      	ldr	r2, [r3, #8]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	43db      	mvns	r3, r3
 8006c64:	4904      	ldr	r1, [pc, #16]	@ (8006c78 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006c66:	4013      	ands	r3, r2
 8006c68:	608b      	str	r3, [r1, #8]

}
 8006c6a:	bf00      	nop
 8006c6c:	370c      	adds	r7, #12
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	40010400 	.word	0x40010400

08006c7c <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8006c84:	4b06      	ldr	r3, [pc, #24]	@ (8006ca0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8006c86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	43db      	mvns	r3, r3
 8006c8c:	4904      	ldr	r1, [pc, #16]	@ (8006ca0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8006c8e:	4013      	ands	r3, r2
 8006c90:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8006c92:	bf00      	nop
 8006c94:	370c      	adds	r7, #12
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	40010400 	.word	0x40010400

08006ca4 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8006cac:	4b05      	ldr	r3, [pc, #20]	@ (8006cc4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006cae:	68da      	ldr	r2, [r3, #12]
 8006cb0:	4904      	ldr	r1, [pc, #16]	@ (8006cc4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	60cb      	str	r3, [r1, #12]
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr
 8006cc4:	40010400 	.word	0x40010400

08006cc8 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8006cd0:	4b05      	ldr	r3, [pc, #20]	@ (8006ce8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8006cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cd4:	4904      	ldr	r1, [pc, #16]	@ (8006ce8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr
 8006ce8:	40010400 	.word	0x40010400

08006cec <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8006cf4:	4b06      	ldr	r3, [pc, #24]	@ (8006d10 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006cf6:	68da      	ldr	r2, [r3, #12]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	43db      	mvns	r3, r3
 8006cfc:	4904      	ldr	r1, [pc, #16]	@ (8006d10 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006cfe:	4013      	ands	r3, r2
 8006d00:	60cb      	str	r3, [r1, #12]
}
 8006d02:	bf00      	nop
 8006d04:	370c      	adds	r7, #12
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	40010400 	.word	0x40010400

08006d14 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8006d1c:	4b06      	ldr	r3, [pc, #24]	@ (8006d38 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8006d1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	43db      	mvns	r3, r3
 8006d24:	4904      	ldr	r1, [pc, #16]	@ (8006d38 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8006d26:	4013      	ands	r3, r2
 8006d28:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8006d2a:	bf00      	nop
 8006d2c:	370c      	adds	r7, #12
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	40010400 	.word	0x40010400

08006d3c <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8006d44:	4a04      	ldr	r2, [pc, #16]	@ (8006d58 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6153      	str	r3, [r2, #20]
}
 8006d4a:	bf00      	nop
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	40010400 	.word	0x40010400

08006d5c <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8006d64:	4a04      	ldr	r2, [pc, #16]	@ (8006d78 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8006d6a:	bf00      	nop
 8006d6c:	370c      	adds	r7, #12
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	40010400 	.word	0x40010400

08006d7c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b088      	sub	sp, #32
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8006d84:	2300      	movs	r3, #0
 8006d86:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d102      	bne.n	8006d98 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	77fb      	strb	r3, [r7, #31]
 8006d96:	e181      	b.n	800709c <HAL_COMP_Init+0x320>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006da2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006da6:	d102      	bne.n	8006dae <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	77fb      	strb	r3, [r7, #31]
 8006dac:	e176      	b.n	800709c <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	7f5b      	ldrb	r3, [r3, #29]
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d108      	bne.n	8006dca <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f7fc fcd7 	bl	8003778 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006dd4:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	695b      	ldr	r3, [r3, #20]
 8006de4:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 8006df0:	4313      	orrs	r3, r2
 8006df2:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	4b90      	ldr	r3, [pc, #576]	@ (800703c <HAL_COMP_Init+0x2c0>)
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	6812      	ldr	r2, [r2, #0]
 8006e02:	6979      	ldr	r1, [r7, #20]
 8006e04:	430b      	orrs	r3, r1
 8006e06:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d016      	beq.n	8006e44 <HAL_COMP_Init+0xc8>
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d113      	bne.n	8006e44 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006e1c:	4b88      	ldr	r3, [pc, #544]	@ (8007040 <HAL_COMP_Init+0x2c4>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	099b      	lsrs	r3, r3, #6
 8006e22:	4a88      	ldr	r2, [pc, #544]	@ (8007044 <HAL_COMP_Init+0x2c8>)
 8006e24:	fba2 2303 	umull	r2, r3, r2, r3
 8006e28:	099b      	lsrs	r3, r3, #6
 8006e2a:	1c5a      	adds	r2, r3, #1
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	4413      	add	r3, r2
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8006e36:	e002      	b.n	8006e3e <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1f9      	bne.n	8006e38 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a7f      	ldr	r2, [pc, #508]	@ (8007048 <HAL_COMP_Init+0x2cc>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d028      	beq.n	8006ea0 <HAL_COMP_Init+0x124>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a7e      	ldr	r2, [pc, #504]	@ (800704c <HAL_COMP_Init+0x2d0>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d020      	beq.n	8006e9a <HAL_COMP_Init+0x11e>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a7c      	ldr	r2, [pc, #496]	@ (8007050 <HAL_COMP_Init+0x2d4>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d018      	beq.n	8006e94 <HAL_COMP_Init+0x118>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a7b      	ldr	r2, [pc, #492]	@ (8007054 <HAL_COMP_Init+0x2d8>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d010      	beq.n	8006e8e <HAL_COMP_Init+0x112>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a79      	ldr	r2, [pc, #484]	@ (8007058 <HAL_COMP_Init+0x2dc>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d008      	beq.n	8006e88 <HAL_COMP_Init+0x10c>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a78      	ldr	r2, [pc, #480]	@ (800705c <HAL_COMP_Init+0x2e0>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d101      	bne.n	8006e84 <HAL_COMP_Init+0x108>
 8006e80:	2301      	movs	r3, #1
 8006e82:	e00f      	b.n	8006ea4 <HAL_COMP_Init+0x128>
 8006e84:	2302      	movs	r3, #2
 8006e86:	e00d      	b.n	8006ea4 <HAL_COMP_Init+0x128>
 8006e88:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006e8c:	e00a      	b.n	8006ea4 <HAL_COMP_Init+0x128>
 8006e8e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006e92:	e007      	b.n	8006ea4 <HAL_COMP_Init+0x128>
 8006e94:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8006e98:	e004      	b.n	8006ea4 <HAL_COMP_Init+0x128>
 8006e9a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006e9e:	e001      	b.n	8006ea4 <HAL_COMP_Init+0x128>
 8006ea0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006ea4:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	f003 0303 	and.w	r3, r3, #3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 80b6 	beq.w	8007020 <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	699b      	ldr	r3, [r3, #24]
 8006eb8:	f003 0310 	and.w	r3, r3, #16
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d011      	beq.n	8006ee4 <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a65      	ldr	r2, [pc, #404]	@ (800705c <HAL_COMP_Init+0x2e0>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d004      	beq.n	8006ed4 <HAL_COMP_Init+0x158>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a64      	ldr	r2, [pc, #400]	@ (8007060 <HAL_COMP_Init+0x2e4>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d103      	bne.n	8006edc <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8006ed4:	6938      	ldr	r0, [r7, #16]
 8006ed6:	f7ff feab 	bl	8006c30 <LL_EXTI_EnableRisingTrig_32_63>
 8006eda:	e014      	b.n	8006f06 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8006edc:	6938      	ldr	r0, [r7, #16]
 8006ede:	f7ff fe95 	bl	8006c0c <LL_EXTI_EnableRisingTrig_0_31>
 8006ee2:	e010      	b.n	8006f06 <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a5c      	ldr	r2, [pc, #368]	@ (800705c <HAL_COMP_Init+0x2e0>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d004      	beq.n	8006ef8 <HAL_COMP_Init+0x17c>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a5b      	ldr	r2, [pc, #364]	@ (8007060 <HAL_COMP_Init+0x2e4>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d103      	bne.n	8006f00 <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8006ef8:	6938      	ldr	r0, [r7, #16]
 8006efa:	f7ff febf 	bl	8006c7c <LL_EXTI_DisableRisingTrig_32_63>
 8006efe:	e002      	b.n	8006f06 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8006f00:	6938      	ldr	r0, [r7, #16]
 8006f02:	f7ff fea7 	bl	8006c54 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	f003 0320 	and.w	r3, r3, #32
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d011      	beq.n	8006f36 <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a51      	ldr	r2, [pc, #324]	@ (800705c <HAL_COMP_Init+0x2e0>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d004      	beq.n	8006f26 <HAL_COMP_Init+0x1aa>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a4f      	ldr	r2, [pc, #316]	@ (8007060 <HAL_COMP_Init+0x2e4>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d103      	bne.n	8006f2e <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8006f26:	6938      	ldr	r0, [r7, #16]
 8006f28:	f7ff fece 	bl	8006cc8 <LL_EXTI_EnableFallingTrig_32_63>
 8006f2c:	e014      	b.n	8006f58 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8006f2e:	6938      	ldr	r0, [r7, #16]
 8006f30:	f7ff feb8 	bl	8006ca4 <LL_EXTI_EnableFallingTrig_0_31>
 8006f34:	e010      	b.n	8006f58 <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a48      	ldr	r2, [pc, #288]	@ (800705c <HAL_COMP_Init+0x2e0>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d004      	beq.n	8006f4a <HAL_COMP_Init+0x1ce>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a46      	ldr	r2, [pc, #280]	@ (8007060 <HAL_COMP_Init+0x2e4>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d103      	bne.n	8006f52 <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8006f4a:	6938      	ldr	r0, [r7, #16]
 8006f4c:	f7ff fee2 	bl	8006d14 <LL_EXTI_DisableFallingTrig_32_63>
 8006f50:	e002      	b.n	8006f58 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8006f52:	6938      	ldr	r0, [r7, #16]
 8006f54:	f7ff feca 	bl	8006cec <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a3f      	ldr	r2, [pc, #252]	@ (800705c <HAL_COMP_Init+0x2e0>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d004      	beq.n	8006f6c <HAL_COMP_Init+0x1f0>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a3e      	ldr	r2, [pc, #248]	@ (8007060 <HAL_COMP_Init+0x2e4>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d103      	bne.n	8006f74 <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8006f6c:	6938      	ldr	r0, [r7, #16]
 8006f6e:	f7ff fef5 	bl	8006d5c <LL_EXTI_ClearFlag_32_63>
 8006f72:	e002      	b.n	8006f7a <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8006f74:	6938      	ldr	r0, [r7, #16]
 8006f76:	f7ff fee1 	bl	8006d3c <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	f003 0302 	and.w	r3, r3, #2
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d011      	beq.n	8006faa <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a34      	ldr	r2, [pc, #208]	@ (800705c <HAL_COMP_Init+0x2e0>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d004      	beq.n	8006f9a <HAL_COMP_Init+0x21e>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a32      	ldr	r2, [pc, #200]	@ (8007060 <HAL_COMP_Init+0x2e4>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d103      	bne.n	8006fa2 <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8006f9a:	6938      	ldr	r0, [r7, #16]
 8006f9c:	f7ff fdfc 	bl	8006b98 <LL_EXTI_EnableEvent_32_63>
 8006fa0:	e014      	b.n	8006fcc <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8006fa2:	6938      	ldr	r0, [r7, #16]
 8006fa4:	f7ff fde6 	bl	8006b74 <LL_EXTI_EnableEvent_0_31>
 8006fa8:	e010      	b.n	8006fcc <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a2b      	ldr	r2, [pc, #172]	@ (800705c <HAL_COMP_Init+0x2e0>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d004      	beq.n	8006fbe <HAL_COMP_Init+0x242>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a29      	ldr	r2, [pc, #164]	@ (8007060 <HAL_COMP_Init+0x2e4>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d103      	bne.n	8006fc6 <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8006fbe:	6938      	ldr	r0, [r7, #16]
 8006fc0:	f7ff fe10 	bl	8006be4 <LL_EXTI_DisableEvent_32_63>
 8006fc4:	e002      	b.n	8006fcc <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8006fc6:	6938      	ldr	r0, [r7, #16]
 8006fc8:	f7ff fdf8 	bl	8006bbc <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d011      	beq.n	8006ffc <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a1f      	ldr	r2, [pc, #124]	@ (800705c <HAL_COMP_Init+0x2e0>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d004      	beq.n	8006fec <HAL_COMP_Init+0x270>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a1e      	ldr	r2, [pc, #120]	@ (8007060 <HAL_COMP_Init+0x2e4>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d103      	bne.n	8006ff4 <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8006fec:	6938      	ldr	r0, [r7, #16]
 8006fee:	f7ff fd87 	bl	8006b00 <LL_EXTI_EnableIT_32_63>
 8006ff2:	e04b      	b.n	800708c <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8006ff4:	6938      	ldr	r0, [r7, #16]
 8006ff6:	f7ff fd71 	bl	8006adc <LL_EXTI_EnableIT_0_31>
 8006ffa:	e047      	b.n	800708c <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a16      	ldr	r2, [pc, #88]	@ (800705c <HAL_COMP_Init+0x2e0>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d004      	beq.n	8007010 <HAL_COMP_Init+0x294>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a15      	ldr	r2, [pc, #84]	@ (8007060 <HAL_COMP_Init+0x2e4>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d103      	bne.n	8007018 <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8007010:	6938      	ldr	r0, [r7, #16]
 8007012:	f7ff fd9b 	bl	8006b4c <LL_EXTI_DisableIT_32_63>
 8007016:	e039      	b.n	800708c <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8007018:	6938      	ldr	r0, [r7, #16]
 800701a:	f7ff fd83 	bl	8006b24 <LL_EXTI_DisableIT_0_31>
 800701e:	e035      	b.n	800708c <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a0d      	ldr	r2, [pc, #52]	@ (800705c <HAL_COMP_Init+0x2e0>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d004      	beq.n	8007034 <HAL_COMP_Init+0x2b8>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a0c      	ldr	r2, [pc, #48]	@ (8007060 <HAL_COMP_Init+0x2e4>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d117      	bne.n	8007064 <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8007034:	6938      	ldr	r0, [r7, #16]
 8007036:	f7ff fdd5 	bl	8006be4 <LL_EXTI_DisableEvent_32_63>
 800703a:	e016      	b.n	800706a <HAL_COMP_Init+0x2ee>
 800703c:	ff007e0f 	.word	0xff007e0f
 8007040:	20000040 	.word	0x20000040
 8007044:	053e2d63 	.word	0x053e2d63
 8007048:	40010200 	.word	0x40010200
 800704c:	40010204 	.word	0x40010204
 8007050:	40010208 	.word	0x40010208
 8007054:	4001020c 	.word	0x4001020c
 8007058:	40010210 	.word	0x40010210
 800705c:	40010214 	.word	0x40010214
 8007060:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8007064:	6938      	ldr	r0, [r7, #16]
 8007066:	f7ff fda9 	bl	8006bbc <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a0e      	ldr	r2, [pc, #56]	@ (80070a8 <HAL_COMP_Init+0x32c>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d004      	beq.n	800707e <HAL_COMP_Init+0x302>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a0c      	ldr	r2, [pc, #48]	@ (80070ac <HAL_COMP_Init+0x330>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d103      	bne.n	8007086 <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 800707e:	6938      	ldr	r0, [r7, #16]
 8007080:	f7ff fd64 	bl	8006b4c <LL_EXTI_DisableIT_32_63>
 8007084:	e002      	b.n	800708c <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8007086:	6938      	ldr	r0, [r7, #16]
 8007088:	f7ff fd4c 	bl	8006b24 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	7f5b      	ldrb	r3, [r3, #29]
 8007090:	b2db      	uxtb	r3, r3
 8007092:	2b00      	cmp	r3, #0
 8007094:	d102      	bne.n	800709c <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2201      	movs	r2, #1
 800709a:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800709c:	7ffb      	ldrb	r3, [r7, #31]
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3720      	adds	r7, #32
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	40010214 	.word	0x40010214
 80070ac:	40010218 	.word	0x40010218

080070b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f003 0307 	and.w	r3, r3, #7
 80070be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80070c0:	4b0c      	ldr	r3, [pc, #48]	@ (80070f4 <__NVIC_SetPriorityGrouping+0x44>)
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80070c6:	68ba      	ldr	r2, [r7, #8]
 80070c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80070cc:	4013      	ands	r3, r2
 80070ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80070d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80070dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80070e2:	4a04      	ldr	r2, [pc, #16]	@ (80070f4 <__NVIC_SetPriorityGrouping+0x44>)
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	60d3      	str	r3, [r2, #12]
}
 80070e8:	bf00      	nop
 80070ea:	3714      	adds	r7, #20
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr
 80070f4:	e000ed00 	.word	0xe000ed00

080070f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80070f8:	b480      	push	{r7}
 80070fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80070fc:	4b04      	ldr	r3, [pc, #16]	@ (8007110 <__NVIC_GetPriorityGrouping+0x18>)
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	0a1b      	lsrs	r3, r3, #8
 8007102:	f003 0307 	and.w	r3, r3, #7
}
 8007106:	4618      	mov	r0, r3
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr
 8007110:	e000ed00 	.word	0xe000ed00

08007114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	4603      	mov	r3, r0
 800711c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800711e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007122:	2b00      	cmp	r3, #0
 8007124:	db0b      	blt.n	800713e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007126:	79fb      	ldrb	r3, [r7, #7]
 8007128:	f003 021f 	and.w	r2, r3, #31
 800712c:	4907      	ldr	r1, [pc, #28]	@ (800714c <__NVIC_EnableIRQ+0x38>)
 800712e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007132:	095b      	lsrs	r3, r3, #5
 8007134:	2001      	movs	r0, #1
 8007136:	fa00 f202 	lsl.w	r2, r0, r2
 800713a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800713e:	bf00      	nop
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	e000e100 	.word	0xe000e100

08007150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	4603      	mov	r3, r0
 8007158:	6039      	str	r1, [r7, #0]
 800715a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800715c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007160:	2b00      	cmp	r3, #0
 8007162:	db0a      	blt.n	800717a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	b2da      	uxtb	r2, r3
 8007168:	490c      	ldr	r1, [pc, #48]	@ (800719c <__NVIC_SetPriority+0x4c>)
 800716a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800716e:	0112      	lsls	r2, r2, #4
 8007170:	b2d2      	uxtb	r2, r2
 8007172:	440b      	add	r3, r1
 8007174:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007178:	e00a      	b.n	8007190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	b2da      	uxtb	r2, r3
 800717e:	4908      	ldr	r1, [pc, #32]	@ (80071a0 <__NVIC_SetPriority+0x50>)
 8007180:	79fb      	ldrb	r3, [r7, #7]
 8007182:	f003 030f 	and.w	r3, r3, #15
 8007186:	3b04      	subs	r3, #4
 8007188:	0112      	lsls	r2, r2, #4
 800718a:	b2d2      	uxtb	r2, r2
 800718c:	440b      	add	r3, r1
 800718e:	761a      	strb	r2, [r3, #24]
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr
 800719c:	e000e100 	.word	0xe000e100
 80071a0:	e000ed00 	.word	0xe000ed00

080071a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b089      	sub	sp, #36	@ 0x24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f003 0307 	and.w	r3, r3, #7
 80071b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	f1c3 0307 	rsb	r3, r3, #7
 80071be:	2b04      	cmp	r3, #4
 80071c0:	bf28      	it	cs
 80071c2:	2304      	movcs	r3, #4
 80071c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	3304      	adds	r3, #4
 80071ca:	2b06      	cmp	r3, #6
 80071cc:	d902      	bls.n	80071d4 <NVIC_EncodePriority+0x30>
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	3b03      	subs	r3, #3
 80071d2:	e000      	b.n	80071d6 <NVIC_EncodePriority+0x32>
 80071d4:	2300      	movs	r3, #0
 80071d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071d8:	f04f 32ff 	mov.w	r2, #4294967295
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	fa02 f303 	lsl.w	r3, r2, r3
 80071e2:	43da      	mvns	r2, r3
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	401a      	ands	r2, r3
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80071ec:	f04f 31ff 	mov.w	r1, #4294967295
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	fa01 f303 	lsl.w	r3, r1, r3
 80071f6:	43d9      	mvns	r1, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071fc:	4313      	orrs	r3, r2
         );
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3724      	adds	r7, #36	@ 0x24
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
	...

0800720c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	3b01      	subs	r3, #1
 8007218:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800721c:	d301      	bcc.n	8007222 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800721e:	2301      	movs	r3, #1
 8007220:	e00f      	b.n	8007242 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007222:	4a0a      	ldr	r2, [pc, #40]	@ (800724c <SysTick_Config+0x40>)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	3b01      	subs	r3, #1
 8007228:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800722a:	210f      	movs	r1, #15
 800722c:	f04f 30ff 	mov.w	r0, #4294967295
 8007230:	f7ff ff8e 	bl	8007150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007234:	4b05      	ldr	r3, [pc, #20]	@ (800724c <SysTick_Config+0x40>)
 8007236:	2200      	movs	r2, #0
 8007238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800723a:	4b04      	ldr	r3, [pc, #16]	@ (800724c <SysTick_Config+0x40>)
 800723c:	2207      	movs	r2, #7
 800723e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	e000e010 	.word	0xe000e010

08007250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7ff ff29 	bl	80070b0 <__NVIC_SetPriorityGrouping>
}
 800725e:	bf00      	nop
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b086      	sub	sp, #24
 800726a:	af00      	add	r7, sp, #0
 800726c:	4603      	mov	r3, r0
 800726e:	60b9      	str	r1, [r7, #8]
 8007270:	607a      	str	r2, [r7, #4]
 8007272:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007274:	f7ff ff40 	bl	80070f8 <__NVIC_GetPriorityGrouping>
 8007278:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	68b9      	ldr	r1, [r7, #8]
 800727e:	6978      	ldr	r0, [r7, #20]
 8007280:	f7ff ff90 	bl	80071a4 <NVIC_EncodePriority>
 8007284:	4602      	mov	r2, r0
 8007286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800728a:	4611      	mov	r1, r2
 800728c:	4618      	mov	r0, r3
 800728e:	f7ff ff5f 	bl	8007150 <__NVIC_SetPriority>
}
 8007292:	bf00      	nop
 8007294:	3718      	adds	r7, #24
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b082      	sub	sp, #8
 800729e:	af00      	add	r7, sp, #0
 80072a0:	4603      	mov	r3, r0
 80072a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80072a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7ff ff33 	bl	8007114 <__NVIC_EnableIRQ>
}
 80072ae:	bf00      	nop
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b082      	sub	sp, #8
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f7ff ffa4 	bl	800720c <SysTick_Config>
 80072c4:	4603      	mov	r3, r0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b082      	sub	sp, #8
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d101      	bne.n	80072e0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e014      	b.n	800730a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	791b      	ldrb	r3, [r3, #4]
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d105      	bne.n	80072f6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f7fc fa97 	bl	8003824 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2202      	movs	r2, #2
 80072fa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3708      	adds	r7, #8
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
	...

08007314 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d101      	bne.n	8007328 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e056      	b.n	80073d6 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	795b      	ldrb	r3, [r3, #5]
 800732c:	2b01      	cmp	r3, #1
 800732e:	d101      	bne.n	8007334 <HAL_DAC_Start+0x20>
 8007330:	2302      	movs	r3, #2
 8007332:	e050      	b.n	80073d6 <HAL_DAC_Start+0xc2>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2202      	movs	r2, #2
 800733e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	6819      	ldr	r1, [r3, #0]
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	f003 0310 	and.w	r3, r3, #16
 800734c:	2201      	movs	r2, #1
 800734e:	409a      	lsls	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	430a      	orrs	r2, r1
 8007356:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007358:	4b22      	ldr	r3, [pc, #136]	@ (80073e4 <HAL_DAC_Start+0xd0>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	099b      	lsrs	r3, r3, #6
 800735e:	4a22      	ldr	r2, [pc, #136]	@ (80073e8 <HAL_DAC_Start+0xd4>)
 8007360:	fba2 2303 	umull	r2, r3, r2, r3
 8007364:	099b      	lsrs	r3, r3, #6
 8007366:	3301      	adds	r3, #1
 8007368:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 800736a:	e002      	b.n	8007372 <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	3b01      	subs	r3, #1
 8007370:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1f9      	bne.n	800736c <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10f      	bne.n	800739e <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8007388:	2b02      	cmp	r3, #2
 800738a:	d11d      	bne.n	80073c8 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	685a      	ldr	r2, [r3, #4]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f042 0201 	orr.w	r2, r2, #1
 800739a:	605a      	str	r2, [r3, #4]
 800739c:	e014      	b.n	80073c8 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	f003 0310 	and.w	r3, r3, #16
 80073ae:	2102      	movs	r1, #2
 80073b0:	fa01 f303 	lsl.w	r3, r1, r3
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d107      	bne.n	80073c8 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	685a      	ldr	r2, [r3, #4]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f042 0202 	orr.w	r2, r2, #2
 80073c6:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	20000040 	.word	0x20000040
 80073e8:	053e2d63 	.word	0x053e2d63

080073ec <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b087      	sub	sp, #28
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
 80073f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80073fa:	2300      	movs	r3, #0
 80073fc:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d101      	bne.n	8007408 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e018      	b.n	800743a <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d105      	bne.n	8007426 <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4413      	add	r3, r2
 8007420:	3308      	adds	r3, #8
 8007422:	617b      	str	r3, [r7, #20]
 8007424:	e004      	b.n	8007430 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4413      	add	r3, r2
 800742c:	3314      	adds	r3, #20
 800742e:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	461a      	mov	r2, r3
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	371c      	adds	r7, #28
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
	...

08007448 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b08a      	sub	sp, #40	@ 0x28
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007454:	2300      	movs	r3, #0
 8007456:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d002      	beq.n	8007464 <HAL_DAC_ConfigChannel+0x1c>
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d101      	bne.n	8007468 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	e1a1      	b.n	80077ac <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	795b      	ldrb	r3, [r3, #5]
 8007472:	2b01      	cmp	r3, #1
 8007474:	d101      	bne.n	800747a <HAL_DAC_ConfigChannel+0x32>
 8007476:	2302      	movs	r3, #2
 8007478:	e198      	b.n	80077ac <HAL_DAC_ConfigChannel+0x364>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2201      	movs	r2, #1
 800747e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2202      	movs	r2, #2
 8007484:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	2b04      	cmp	r3, #4
 800748c:	d17a      	bne.n	8007584 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800748e:	f7fd f9cd 	bl	800482c <HAL_GetTick>
 8007492:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d13d      	bne.n	8007516 <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800749a:	e018      	b.n	80074ce <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800749c:	f7fd f9c6 	bl	800482c <HAL_GetTick>
 80074a0:	4602      	mov	r2, r0
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d911      	bls.n	80074ce <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00a      	beq.n	80074ce <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	f043 0208 	orr.w	r2, r3, #8
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2203      	movs	r2, #3
 80074c8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80074ca:	2303      	movs	r3, #3
 80074cc:	e16e      	b.n	80077ac <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1df      	bne.n	800749c <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68ba      	ldr	r2, [r7, #8]
 80074e2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80074e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80074e6:	e020      	b.n	800752a <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80074e8:	f7fd f9a0 	bl	800482c <HAL_GetTick>
 80074ec:	4602      	mov	r2, r0
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d90f      	bls.n	8007516 <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	da0a      	bge.n	8007516 <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	f043 0208 	orr.w	r2, r3, #8
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2203      	movs	r2, #3
 8007510:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	e14a      	b.n	80077ac <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800751c:	2b00      	cmp	r3, #0
 800751e:	dbe3      	blt.n	80074e8 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007528:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f003 0310 	and.w	r3, r3, #16
 8007536:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800753a:	fa01 f303 	lsl.w	r3, r1, r3
 800753e:	43db      	mvns	r3, r3
 8007540:	ea02 0103 	and.w	r1, r2, r3
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f003 0310 	and.w	r3, r3, #16
 800754e:	409a      	lsls	r2, r3
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	430a      	orrs	r2, r1
 8007556:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f003 0310 	and.w	r3, r3, #16
 8007564:	21ff      	movs	r1, #255	@ 0xff
 8007566:	fa01 f303 	lsl.w	r3, r1, r3
 800756a:	43db      	mvns	r3, r3
 800756c:	ea02 0103 	and.w	r1, r2, r3
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f003 0310 	and.w	r3, r3, #16
 800757a:	409a      	lsls	r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	430a      	orrs	r2, r1
 8007582:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	69db      	ldr	r3, [r3, #28]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d11d      	bne.n	80075c8 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007592:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f003 0310 	and.w	r3, r3, #16
 800759a:	221f      	movs	r2, #31
 800759c:	fa02 f303 	lsl.w	r3, r2, r3
 80075a0:	43db      	mvns	r3, r3
 80075a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075a4:	4013      	ands	r3, r2
 80075a6:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	6a1b      	ldr	r3, [r3, #32]
 80075ac:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f003 0310 	and.w	r3, r3, #16
 80075b4:	697a      	ldr	r2, [r7, #20]
 80075b6:	fa02 f303 	lsl.w	r3, r2, r3
 80075ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075bc:	4313      	orrs	r3, r2
 80075be:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075ce:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f003 0310 	and.w	r3, r3, #16
 80075d6:	2207      	movs	r2, #7
 80075d8:	fa02 f303 	lsl.w	r3, r2, r3
 80075dc:	43db      	mvns	r3, r3
 80075de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075e0:	4013      	ands	r3, r2
 80075e2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	699b      	ldr	r3, [r3, #24]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d102      	bne.n	80075f2 <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 80075ec:	2300      	movs	r3, #0
 80075ee:	623b      	str	r3, [r7, #32]
 80075f0:	e00f      	b.n	8007612 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	699b      	ldr	r3, [r3, #24]
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d102      	bne.n	8007600 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80075fa:	2301      	movs	r3, #1
 80075fc:	623b      	str	r3, [r7, #32]
 80075fe:	e008      	b.n	8007612 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	695b      	ldr	r3, [r3, #20]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d102      	bne.n	800760e <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8007608:	2301      	movs	r3, #1
 800760a:	623b      	str	r3, [r7, #32]
 800760c:	e001      	b.n	8007612 <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800760e:	2300      	movs	r3, #0
 8007610:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	689a      	ldr	r2, [r3, #8]
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	4313      	orrs	r3, r2
 800761c:	6a3a      	ldr	r2, [r7, #32]
 800761e:	4313      	orrs	r3, r2
 8007620:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f003 0310 	and.w	r3, r3, #16
 8007628:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800762c:	fa02 f303 	lsl.w	r3, r2, r3
 8007630:	43db      	mvns	r3, r3
 8007632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007634:	4013      	ands	r3, r2
 8007636:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	791b      	ldrb	r3, [r3, #4]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d102      	bne.n	8007646 <HAL_DAC_ConfigChannel+0x1fe>
 8007640:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007644:	e000      	b.n	8007648 <HAL_DAC_ConfigChannel+0x200>
 8007646:	2300      	movs	r3, #0
 8007648:	697a      	ldr	r2, [r7, #20]
 800764a:	4313      	orrs	r3, r2
 800764c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f003 0310 	and.w	r3, r3, #16
 8007654:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007658:	fa02 f303 	lsl.w	r3, r2, r3
 800765c:	43db      	mvns	r3, r3
 800765e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007660:	4013      	ands	r3, r2
 8007662:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	795b      	ldrb	r3, [r3, #5]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d102      	bne.n	8007672 <HAL_DAC_ConfigChannel+0x22a>
 800766c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007670:	e000      	b.n	8007674 <HAL_DAC_ConfigChannel+0x22c>
 8007672:	2300      	movs	r3, #0
 8007674:	697a      	ldr	r2, [r7, #20]
 8007676:	4313      	orrs	r3, r2
 8007678:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800767a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8007680:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2b02      	cmp	r3, #2
 8007688:	d114      	bne.n	80076b4 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800768a:	f004 fd3d 	bl	800c108 <HAL_RCC_GetHCLKFreq>
 800768e:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	4a48      	ldr	r2, [pc, #288]	@ (80077b4 <HAL_DAC_ConfigChannel+0x36c>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d904      	bls.n	80076a2 <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8007698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800769e:	627b      	str	r3, [r7, #36]	@ 0x24
 80076a0:	e00f      	b.n	80076c2 <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	4a44      	ldr	r2, [pc, #272]	@ (80077b8 <HAL_DAC_ConfigChannel+0x370>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d90a      	bls.n	80076c0 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80076aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80076b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80076b2:	e006      	b.n	80076c2 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076ba:	4313      	orrs	r3, r2
 80076bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80076be:	e000      	b.n	80076c2 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80076c0:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f003 0310 	and.w	r3, r3, #16
 80076c8:	697a      	ldr	r2, [r7, #20]
 80076ca:	fa02 f303 	lsl.w	r3, r2, r3
 80076ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076d0:	4313      	orrs	r3, r2
 80076d2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076da:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6819      	ldr	r1, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f003 0310 	and.w	r3, r3, #16
 80076e8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80076ec:	fa02 f303 	lsl.w	r3, r2, r3
 80076f0:	43da      	mvns	r2, r3
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	400a      	ands	r2, r1
 80076f8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f003 0310 	and.w	r3, r3, #16
 8007708:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800770c:	fa02 f303 	lsl.w	r3, r2, r3
 8007710:	43db      	mvns	r3, r3
 8007712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007714:	4013      	ands	r3, r2
 8007716:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f003 0310 	and.w	r3, r3, #16
 8007724:	697a      	ldr	r2, [r7, #20]
 8007726:	fa02 f303 	lsl.w	r3, r2, r3
 800772a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800772c:	4313      	orrs	r3, r2
 800772e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007736:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	6819      	ldr	r1, [r3, #0]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f003 0310 	and.w	r3, r3, #16
 8007744:	22c0      	movs	r2, #192	@ 0xc0
 8007746:	fa02 f303 	lsl.w	r3, r2, r3
 800774a:	43da      	mvns	r2, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	400a      	ands	r2, r1
 8007752:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	089b      	lsrs	r3, r3, #2
 800775a:	f003 030f 	and.w	r3, r3, #15
 800775e:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	089b      	lsrs	r3, r3, #2
 8007766:	021b      	lsls	r3, r3, #8
 8007768:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	4313      	orrs	r3, r2
 8007770:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f003 0310 	and.w	r3, r3, #16
 800777e:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8007782:	fa01 f303 	lsl.w	r3, r1, r3
 8007786:	43db      	mvns	r3, r3
 8007788:	ea02 0103 	and.w	r1, r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f003 0310 	and.w	r3, r3, #16
 8007792:	697a      	ldr	r2, [r7, #20]
 8007794:	409a      	lsls	r2, r3
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	430a      	orrs	r2, r1
 800779c:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2201      	movs	r2, #1
 80077a2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80077aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3728      	adds	r7, #40	@ 0x28
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	09896800 	.word	0x09896800
 80077b8:	04c4b400 	.word	0x04c4b400

080077bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d101      	bne.n	80077ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e08d      	b.n	80078ea <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	461a      	mov	r2, r3
 80077d4:	4b47      	ldr	r3, [pc, #284]	@ (80078f4 <HAL_DMA_Init+0x138>)
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d80f      	bhi.n	80077fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	461a      	mov	r2, r3
 80077e0:	4b45      	ldr	r3, [pc, #276]	@ (80078f8 <HAL_DMA_Init+0x13c>)
 80077e2:	4413      	add	r3, r2
 80077e4:	4a45      	ldr	r2, [pc, #276]	@ (80078fc <HAL_DMA_Init+0x140>)
 80077e6:	fba2 2303 	umull	r2, r3, r2, r3
 80077ea:	091b      	lsrs	r3, r3, #4
 80077ec:	009a      	lsls	r2, r3, #2
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a42      	ldr	r2, [pc, #264]	@ (8007900 <HAL_DMA_Init+0x144>)
 80077f6:	641a      	str	r2, [r3, #64]	@ 0x40
 80077f8:	e00e      	b.n	8007818 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	461a      	mov	r2, r3
 8007800:	4b40      	ldr	r3, [pc, #256]	@ (8007904 <HAL_DMA_Init+0x148>)
 8007802:	4413      	add	r3, r2
 8007804:	4a3d      	ldr	r2, [pc, #244]	@ (80078fc <HAL_DMA_Init+0x140>)
 8007806:	fba2 2303 	umull	r2, r3, r2, r3
 800780a:	091b      	lsrs	r3, r3, #4
 800780c:	009a      	lsls	r2, r3, #2
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a3c      	ldr	r2, [pc, #240]	@ (8007908 <HAL_DMA_Init+0x14c>)
 8007816:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2202      	movs	r2, #2
 800781c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800782e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007832:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800783c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007848:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	699b      	ldr	r3, [r3, #24]
 800784e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007854:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a1b      	ldr	r3, [r3, #32]
 800785a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	4313      	orrs	r3, r2
 8007860:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 f9b6 	bl	8007bdc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007878:	d102      	bne.n	8007880 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685a      	ldr	r2, [r3, #4]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007888:	b2d2      	uxtb	r2, r2
 800788a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007894:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d010      	beq.n	80078c0 <HAL_DMA_Init+0x104>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	2b04      	cmp	r3, #4
 80078a4:	d80c      	bhi.n	80078c0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f9d6 	bl	8007c58 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078b0:	2200      	movs	r2, #0
 80078b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80078bc:	605a      	str	r2, [r3, #4]
 80078be:	e008      	b.n	80078d2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	40020407 	.word	0x40020407
 80078f8:	bffdfff8 	.word	0xbffdfff8
 80078fc:	cccccccd 	.word	0xcccccccd
 8007900:	40020000 	.word	0x40020000
 8007904:	bffdfbf8 	.word	0xbffdfbf8
 8007908:	40020400 	.word	0x40020400

0800790c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b086      	sub	sp, #24
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	607a      	str	r2, [r7, #4]
 8007918:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800791a:	2300      	movs	r3, #0
 800791c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007924:	2b01      	cmp	r3, #1
 8007926:	d101      	bne.n	800792c <HAL_DMA_Start_IT+0x20>
 8007928:	2302      	movs	r3, #2
 800792a:	e066      	b.n	80079fa <HAL_DMA_Start_IT+0xee>
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800793a:	b2db      	uxtb	r3, r3
 800793c:	2b01      	cmp	r3, #1
 800793e:	d155      	bne.n	80079ec <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2202      	movs	r2, #2
 8007944:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2200      	movs	r2, #0
 800794c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f022 0201 	bic.w	r2, r2, #1
 800795c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	68b9      	ldr	r1, [r7, #8]
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f000 f8fb 	bl	8007b60 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800796e:	2b00      	cmp	r3, #0
 8007970:	d008      	beq.n	8007984 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f042 020e 	orr.w	r2, r2, #14
 8007980:	601a      	str	r2, [r3, #0]
 8007982:	e00f      	b.n	80079a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f022 0204 	bic.w	r2, r2, #4
 8007992:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f042 020a 	orr.w	r2, r2, #10
 80079a2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d007      	beq.n	80079c2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80079c0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d007      	beq.n	80079da <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80079d8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f042 0201 	orr.w	r2, r2, #1
 80079e8:	601a      	str	r2, [r3, #0]
 80079ea:	e005      	b.n	80079f8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80079f4:	2302      	movs	r3, #2
 80079f6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80079f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3718      	adds	r7, #24
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b084      	sub	sp, #16
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a1e:	f003 031f 	and.w	r3, r3, #31
 8007a22:	2204      	movs	r2, #4
 8007a24:	409a      	lsls	r2, r3
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	4013      	ands	r3, r2
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d026      	beq.n	8007a7c <HAL_DMA_IRQHandler+0x7a>
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	f003 0304 	and.w	r3, r3, #4
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d021      	beq.n	8007a7c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 0320 	and.w	r3, r3, #32
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d107      	bne.n	8007a56 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f022 0204 	bic.w	r2, r2, #4
 8007a54:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a5a:	f003 021f 	and.w	r2, r3, #31
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a62:	2104      	movs	r1, #4
 8007a64:	fa01 f202 	lsl.w	r2, r1, r2
 8007a68:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d071      	beq.n	8007b56 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007a7a:	e06c      	b.n	8007b56 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a80:	f003 031f 	and.w	r3, r3, #31
 8007a84:	2202      	movs	r2, #2
 8007a86:	409a      	lsls	r2, r3
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d02e      	beq.n	8007aee <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	f003 0302 	and.w	r3, r3, #2
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d029      	beq.n	8007aee <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 0320 	and.w	r3, r3, #32
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10b      	bne.n	8007ac0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f022 020a 	bic.w	r2, r2, #10
 8007ab6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ac4:	f003 021f 	and.w	r2, r3, #31
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007acc:	2102      	movs	r1, #2
 8007ace:	fa01 f202 	lsl.w	r2, r1, r2
 8007ad2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d038      	beq.n	8007b56 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007aec:	e033      	b.n	8007b56 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007af2:	f003 031f 	and.w	r3, r3, #31
 8007af6:	2208      	movs	r2, #8
 8007af8:	409a      	lsls	r2, r3
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	4013      	ands	r3, r2
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d02a      	beq.n	8007b58 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	f003 0308 	and.w	r3, r3, #8
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d025      	beq.n	8007b58 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f022 020e 	bic.w	r2, r2, #14
 8007b1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b20:	f003 021f 	and.w	r2, r3, #31
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b28:	2101      	movs	r1, #1
 8007b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8007b2e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d004      	beq.n	8007b58 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007b56:	bf00      	nop
 8007b58:	bf00      	nop
}
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b085      	sub	sp, #20
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
 8007b6c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007b76:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d004      	beq.n	8007b8a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007b88:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b8e:	f003 021f 	and.w	r2, r3, #31
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b96:	2101      	movs	r1, #1
 8007b98:	fa01 f202 	lsl.w	r2, r1, r2
 8007b9c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	683a      	ldr	r2, [r7, #0]
 8007ba4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	2b10      	cmp	r3, #16
 8007bac:	d108      	bne.n	8007bc0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68ba      	ldr	r2, [r7, #8]
 8007bbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007bbe:	e007      	b.n	8007bd0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	60da      	str	r2, [r3, #12]
}
 8007bd0:	bf00      	nop
 8007bd2:	3714      	adds	r7, #20
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b087      	sub	sp, #28
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	461a      	mov	r2, r3
 8007bea:	4b16      	ldr	r3, [pc, #88]	@ (8007c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d802      	bhi.n	8007bf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007bf0:	4b15      	ldr	r3, [pc, #84]	@ (8007c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007bf2:	617b      	str	r3, [r7, #20]
 8007bf4:	e001      	b.n	8007bfa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8007bf6:	4b15      	ldr	r3, [pc, #84]	@ (8007c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007bf8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	3b08      	subs	r3, #8
 8007c06:	4a12      	ldr	r2, [pc, #72]	@ (8007c50 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007c08:	fba2 2303 	umull	r2, r3, r2, r3
 8007c0c:	091b      	lsrs	r3, r3, #4
 8007c0e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c14:	089b      	lsrs	r3, r3, #2
 8007c16:	009a      	lsls	r2, r3, #2
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a0b      	ldr	r2, [pc, #44]	@ (8007c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007c26:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f003 031f 	and.w	r3, r3, #31
 8007c2e:	2201      	movs	r2, #1
 8007c30:	409a      	lsls	r2, r3
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007c36:	bf00      	nop
 8007c38:	371c      	adds	r7, #28
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop
 8007c44:	40020407 	.word	0x40020407
 8007c48:	40020800 	.word	0x40020800
 8007c4c:	40020820 	.word	0x40020820
 8007c50:	cccccccd 	.word	0xcccccccd
 8007c54:	40020880 	.word	0x40020880

08007c58 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007c68:	68fa      	ldr	r2, [r7, #12]
 8007c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8007c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007c6c:	4413      	add	r3, r2
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	461a      	mov	r2, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a08      	ldr	r2, [pc, #32]	@ (8007c9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007c7a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	f003 031f 	and.w	r3, r3, #31
 8007c84:	2201      	movs	r2, #1
 8007c86:	409a      	lsls	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007c8c:	bf00      	nop
 8007c8e:	3714      	adds	r7, #20
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr
 8007c98:	1000823f 	.word	0x1000823f
 8007c9c:	40020940 	.word	0x40020940

08007ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b087      	sub	sp, #28
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007caa:	2300      	movs	r3, #0
 8007cac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007cae:	e15a      	b.n	8007f66 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	2101      	movs	r1, #1
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	f000 814c 	beq.w	8007f60 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	f003 0303 	and.w	r3, r3, #3
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d005      	beq.n	8007ce0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d130      	bne.n	8007d42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	005b      	lsls	r3, r3, #1
 8007cea:	2203      	movs	r2, #3
 8007cec:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf0:	43db      	mvns	r3, r3
 8007cf2:	693a      	ldr	r2, [r7, #16]
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	68da      	ldr	r2, [r3, #12]
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	005b      	lsls	r3, r3, #1
 8007d00:	fa02 f303 	lsl.w	r3, r2, r3
 8007d04:	693a      	ldr	r2, [r7, #16]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	693a      	ldr	r2, [r7, #16]
 8007d0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007d16:	2201      	movs	r2, #1
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d1e:	43db      	mvns	r3, r3
 8007d20:	693a      	ldr	r2, [r7, #16]
 8007d22:	4013      	ands	r3, r2
 8007d24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	091b      	lsrs	r3, r3, #4
 8007d2c:	f003 0201 	and.w	r2, r3, #1
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	fa02 f303 	lsl.w	r3, r2, r3
 8007d36:	693a      	ldr	r2, [r7, #16]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	693a      	ldr	r2, [r7, #16]
 8007d40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	f003 0303 	and.w	r3, r3, #3
 8007d4a:	2b03      	cmp	r3, #3
 8007d4c:	d017      	beq.n	8007d7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	005b      	lsls	r3, r3, #1
 8007d58:	2203      	movs	r2, #3
 8007d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d5e:	43db      	mvns	r3, r3
 8007d60:	693a      	ldr	r2, [r7, #16]
 8007d62:	4013      	ands	r3, r2
 8007d64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	689a      	ldr	r2, [r3, #8]
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	005b      	lsls	r3, r3, #1
 8007d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d72:	693a      	ldr	r2, [r7, #16]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	693a      	ldr	r2, [r7, #16]
 8007d7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	f003 0303 	and.w	r3, r3, #3
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	d123      	bne.n	8007dd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	08da      	lsrs	r2, r3, #3
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	3208      	adds	r2, #8
 8007d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	f003 0307 	and.w	r3, r3, #7
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	220f      	movs	r2, #15
 8007da2:	fa02 f303 	lsl.w	r3, r2, r3
 8007da6:	43db      	mvns	r3, r3
 8007da8:	693a      	ldr	r2, [r7, #16]
 8007daa:	4013      	ands	r3, r2
 8007dac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	691a      	ldr	r2, [r3, #16]
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	f003 0307 	and.w	r3, r3, #7
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	fa02 f303 	lsl.w	r3, r2, r3
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	08da      	lsrs	r2, r3, #3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	3208      	adds	r2, #8
 8007dcc:	6939      	ldr	r1, [r7, #16]
 8007dce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	005b      	lsls	r3, r3, #1
 8007ddc:	2203      	movs	r2, #3
 8007dde:	fa02 f303 	lsl.w	r3, r2, r3
 8007de2:	43db      	mvns	r3, r3
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	4013      	ands	r3, r2
 8007de8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	f003 0203 	and.w	r2, r3, #3
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	005b      	lsls	r3, r3, #1
 8007df6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfa:	693a      	ldr	r2, [r7, #16]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	693a      	ldr	r2, [r7, #16]
 8007e04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f000 80a6 	beq.w	8007f60 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e14:	4b5b      	ldr	r3, [pc, #364]	@ (8007f84 <HAL_GPIO_Init+0x2e4>)
 8007e16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e18:	4a5a      	ldr	r2, [pc, #360]	@ (8007f84 <HAL_GPIO_Init+0x2e4>)
 8007e1a:	f043 0301 	orr.w	r3, r3, #1
 8007e1e:	6613      	str	r3, [r2, #96]	@ 0x60
 8007e20:	4b58      	ldr	r3, [pc, #352]	@ (8007f84 <HAL_GPIO_Init+0x2e4>)
 8007e22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e24:	f003 0301 	and.w	r3, r3, #1
 8007e28:	60bb      	str	r3, [r7, #8]
 8007e2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e2c:	4a56      	ldr	r2, [pc, #344]	@ (8007f88 <HAL_GPIO_Init+0x2e8>)
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	089b      	lsrs	r3, r3, #2
 8007e32:	3302      	adds	r3, #2
 8007e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	f003 0303 	and.w	r3, r3, #3
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	220f      	movs	r2, #15
 8007e44:	fa02 f303 	lsl.w	r3, r2, r3
 8007e48:	43db      	mvns	r3, r3
 8007e4a:	693a      	ldr	r2, [r7, #16]
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007e56:	d01f      	beq.n	8007e98 <HAL_GPIO_Init+0x1f8>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a4c      	ldr	r2, [pc, #304]	@ (8007f8c <HAL_GPIO_Init+0x2ec>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d019      	beq.n	8007e94 <HAL_GPIO_Init+0x1f4>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a4b      	ldr	r2, [pc, #300]	@ (8007f90 <HAL_GPIO_Init+0x2f0>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d013      	beq.n	8007e90 <HAL_GPIO_Init+0x1f0>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a4a      	ldr	r2, [pc, #296]	@ (8007f94 <HAL_GPIO_Init+0x2f4>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d00d      	beq.n	8007e8c <HAL_GPIO_Init+0x1ec>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a49      	ldr	r2, [pc, #292]	@ (8007f98 <HAL_GPIO_Init+0x2f8>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d007      	beq.n	8007e88 <HAL_GPIO_Init+0x1e8>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a48      	ldr	r2, [pc, #288]	@ (8007f9c <HAL_GPIO_Init+0x2fc>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d101      	bne.n	8007e84 <HAL_GPIO_Init+0x1e4>
 8007e80:	2305      	movs	r3, #5
 8007e82:	e00a      	b.n	8007e9a <HAL_GPIO_Init+0x1fa>
 8007e84:	2306      	movs	r3, #6
 8007e86:	e008      	b.n	8007e9a <HAL_GPIO_Init+0x1fa>
 8007e88:	2304      	movs	r3, #4
 8007e8a:	e006      	b.n	8007e9a <HAL_GPIO_Init+0x1fa>
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	e004      	b.n	8007e9a <HAL_GPIO_Init+0x1fa>
 8007e90:	2302      	movs	r3, #2
 8007e92:	e002      	b.n	8007e9a <HAL_GPIO_Init+0x1fa>
 8007e94:	2301      	movs	r3, #1
 8007e96:	e000      	b.n	8007e9a <HAL_GPIO_Init+0x1fa>
 8007e98:	2300      	movs	r3, #0
 8007e9a:	697a      	ldr	r2, [r7, #20]
 8007e9c:	f002 0203 	and.w	r2, r2, #3
 8007ea0:	0092      	lsls	r2, r2, #2
 8007ea2:	4093      	lsls	r3, r2
 8007ea4:	693a      	ldr	r2, [r7, #16]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007eaa:	4937      	ldr	r1, [pc, #220]	@ (8007f88 <HAL_GPIO_Init+0x2e8>)
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	089b      	lsrs	r3, r3, #2
 8007eb0:	3302      	adds	r3, #2
 8007eb2:	693a      	ldr	r2, [r7, #16]
 8007eb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007eb8:	4b39      	ldr	r3, [pc, #228]	@ (8007fa0 <HAL_GPIO_Init+0x300>)
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	43db      	mvns	r3, r3
 8007ec2:	693a      	ldr	r2, [r7, #16]
 8007ec4:	4013      	ands	r3, r2
 8007ec6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d003      	beq.n	8007edc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007ed4:	693a      	ldr	r2, [r7, #16]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007edc:	4a30      	ldr	r2, [pc, #192]	@ (8007fa0 <HAL_GPIO_Init+0x300>)
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007ee2:	4b2f      	ldr	r3, [pc, #188]	@ (8007fa0 <HAL_GPIO_Init+0x300>)
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	43db      	mvns	r3, r3
 8007eec:	693a      	ldr	r2, [r7, #16]
 8007eee:	4013      	ands	r3, r2
 8007ef0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d003      	beq.n	8007f06 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007efe:	693a      	ldr	r2, [r7, #16]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007f06:	4a26      	ldr	r2, [pc, #152]	@ (8007fa0 <HAL_GPIO_Init+0x300>)
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007f0c:	4b24      	ldr	r3, [pc, #144]	@ (8007fa0 <HAL_GPIO_Init+0x300>)
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	43db      	mvns	r3, r3
 8007f16:	693a      	ldr	r2, [r7, #16]
 8007f18:	4013      	ands	r3, r2
 8007f1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d003      	beq.n	8007f30 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007f28:	693a      	ldr	r2, [r7, #16]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007f30:	4a1b      	ldr	r2, [pc, #108]	@ (8007fa0 <HAL_GPIO_Init+0x300>)
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007f36:	4b1a      	ldr	r3, [pc, #104]	@ (8007fa0 <HAL_GPIO_Init+0x300>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	43db      	mvns	r3, r3
 8007f40:	693a      	ldr	r2, [r7, #16]
 8007f42:	4013      	ands	r3, r2
 8007f44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d003      	beq.n	8007f5a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007f52:	693a      	ldr	r2, [r7, #16]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007f5a:	4a11      	ldr	r2, [pc, #68]	@ (8007fa0 <HAL_GPIO_Init+0x300>)
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	3301      	adds	r3, #1
 8007f64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f47f ae9d 	bne.w	8007cb0 <HAL_GPIO_Init+0x10>
  }
}
 8007f76:	bf00      	nop
 8007f78:	bf00      	nop
 8007f7a:	371c      	adds	r7, #28
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr
 8007f84:	40021000 	.word	0x40021000
 8007f88:	40010000 	.word	0x40010000
 8007f8c:	48000400 	.word	0x48000400
 8007f90:	48000800 	.word	0x48000800
 8007f94:	48000c00 	.word	0x48000c00
 8007f98:	48001000 	.word	0x48001000
 8007f9c:	48001400 	.word	0x48001400
 8007fa0:	40010400 	.word	0x40010400

08007fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	460b      	mov	r3, r1
 8007fae:	807b      	strh	r3, [r7, #2]
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007fb4:	787b      	ldrb	r3, [r7, #1]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d003      	beq.n	8007fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007fba:	887a      	ldrh	r2, [r7, #2]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007fc0:	e002      	b.n	8007fc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007fc2:	887a      	ldrh	r2, [r7, #2]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007fc8:	bf00      	nop
 8007fca:	370c      	adds	r7, #12
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	4603      	mov	r3, r0
 8007fdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007fde:	4b08      	ldr	r3, [pc, #32]	@ (8008000 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007fe0:	695a      	ldr	r2, [r3, #20]
 8007fe2:	88fb      	ldrh	r3, [r7, #6]
 8007fe4:	4013      	ands	r3, r2
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d006      	beq.n	8007ff8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007fea:	4a05      	ldr	r2, [pc, #20]	@ (8008000 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007fec:	88fb      	ldrh	r3, [r7, #6]
 8007fee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007ff0:	88fb      	ldrh	r3, [r7, #6]
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f000 f806 	bl	8008004 <HAL_GPIO_EXTI_Callback>
  }
}
 8007ff8:	bf00      	nop
 8007ffa:	3708      	adds	r7, #8
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	40010400 	.word	0x40010400

08008004 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	4603      	mov	r3, r0
 800800c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800800e:	bf00      	nop
 8008010:	370c      	adds	r7, #12
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr
	...

0800801c <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef *hhrtim)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b086      	sub	sp, #24
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if (hhrtim == NULL)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d101      	bne.n	800802e <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	e0be      	b.n	80081ac <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2202      	movs	r2, #2
 8008032:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	f003 0301 	and.w	r3, r3, #1
 8008076:	2b00      	cmp	r3, #0
 8008078:	d02e      	beq.n	80080d8 <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a4d      	ldr	r2, [pc, #308]	@ (80081b4 <HAL_HRTIM_Init+0x198>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d10b      	bne.n	800809c <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8008084:	4b4c      	ldr	r3, [pc, #304]	@ (80081b8 <HAL_HRTIM_Init+0x19c>)
 8008086:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008088:	4a4b      	ldr	r2, [pc, #300]	@ (80081b8 <HAL_HRTIM_Init+0x19c>)
 800808a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800808e:	6613      	str	r3, [r2, #96]	@ 0x60
 8008090:	4b49      	ldr	r3, [pc, #292]	@ (80081b8 <HAL_HRTIM_Init+0x19c>)
 8008092:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008094:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008098:	60fb      	str	r3, [r7, #12]
 800809a:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80080aa:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80080b4:	693a      	ldr	r2, [r7, #16]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80080c0:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	695b      	ldr	r3, [r3, #20]
 80080c6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80080ca:	693a      	ldr	r2, [r7, #16]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	693a      	ldr	r2, [r7, #16]
 80080d6:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f7fb fc23 	bl	8003924 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	f003 0302 	and.w	r3, r3, #2
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d012      	beq.n	8008110 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080f8:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	4313      	orrs	r3, r2
 8008106:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	693a      	ldr	r2, [r7, #16]
 800810e:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8008120:	2300      	movs	r3, #0
 8008122:	75fb      	strb	r3, [r7, #23]
 8008124:	e03e      	b.n	80081a4 <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8008126:	7dfa      	ldrb	r2, [r7, #23]
 8008128:	6879      	ldr	r1, [r7, #4]
 800812a:	4613      	mov	r3, r2
 800812c:	00db      	lsls	r3, r3, #3
 800812e:	1a9b      	subs	r3, r3, r2
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	440b      	add	r3, r1
 8008134:	3318      	adds	r3, #24
 8008136:	2200      	movs	r2, #0
 8008138:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 800813a:	7dfa      	ldrb	r2, [r7, #23]
 800813c:	6879      	ldr	r1, [r7, #4]
 800813e:	4613      	mov	r3, r2
 8008140:	00db      	lsls	r3, r3, #3
 8008142:	1a9b      	subs	r3, r3, r2
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	440b      	add	r3, r1
 8008148:	331c      	adds	r3, #28
 800814a:	2200      	movs	r2, #0
 800814c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 800814e:	7dfa      	ldrb	r2, [r7, #23]
 8008150:	6879      	ldr	r1, [r7, #4]
 8008152:	4613      	mov	r3, r2
 8008154:	00db      	lsls	r3, r3, #3
 8008156:	1a9b      	subs	r3, r3, r2
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	440b      	add	r3, r1
 800815c:	3320      	adds	r3, #32
 800815e:	2200      	movs	r2, #0
 8008160:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8008162:	7dfa      	ldrb	r2, [r7, #23]
 8008164:	6879      	ldr	r1, [r7, #4]
 8008166:	4613      	mov	r3, r2
 8008168:	00db      	lsls	r3, r3, #3
 800816a:	1a9b      	subs	r3, r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	440b      	add	r3, r1
 8008170:	3324      	adds	r3, #36	@ 0x24
 8008172:	2200      	movs	r2, #0
 8008174:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8008176:	7dfa      	ldrb	r2, [r7, #23]
 8008178:	6879      	ldr	r1, [r7, #4]
 800817a:	4613      	mov	r3, r2
 800817c:	00db      	lsls	r3, r3, #3
 800817e:	1a9b      	subs	r3, r3, r2
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	440b      	add	r3, r1
 8008184:	3328      	adds	r3, #40	@ 0x28
 8008186:	2200      	movs	r2, #0
 8008188:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 800818a:	7dfa      	ldrb	r2, [r7, #23]
 800818c:	6879      	ldr	r1, [r7, #4]
 800818e:	4613      	mov	r3, r2
 8008190:	00db      	lsls	r3, r3, #3
 8008192:	1a9b      	subs	r3, r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	440b      	add	r3, r1
 8008198:	3330      	adds	r3, #48	@ 0x30
 800819a:	2200      	movs	r2, #0
 800819c:	601a      	str	r2, [r3, #0]
       timer_idx++)
 800819e:	7dfb      	ldrb	r3, [r7, #23]
 80081a0:	3301      	adds	r3, #1
 80081a2:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 80081a4:	7dfb      	ldrb	r3, [r7, #23]
 80081a6:	2b06      	cmp	r3, #6
 80081a8:	d9bd      	bls.n	8008126 <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3718      	adds	r7, #24
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	40016800 	.word	0x40016800
 80081b8:	40021000 	.word	0x40021000

080081bc <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t CalibrationRate)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d101      	bne.n	80081d4 <HAL_HRTIM_DLLCalibrationStart+0x18>
 80081d0:	2302      	movs	r3, #2
 80081d2:	e045      	b.n	8008260 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2202      	movs	r2, #2
 80081e0:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ea:	d114      	bne.n	8008216 <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f022 0202 	bic.w	r2, r2, #2
 80081fc:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f042 0201 	orr.w	r2, r2, #1
 8008210:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
 8008214:	e01f      	b.n	8008256 <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f042 0202 	orr.w	r2, r2, #2
 8008226:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 8008232:	f023 010c 	bic.w	r1, r3, #12
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	683a      	ldr	r2, [r7, #0]
 800823c:	430a      	orrs	r2, r1
 800823e:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f042 0201 	orr.w	r2, r2, #1
 8008252:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2201      	movs	r2, #1
 800825a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef *hhrtim,
                                                  uint32_t Timeout)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 8008276:	f7fc fad9 	bl	800482c <HAL_GetTick>
 800827a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 800827c:	e014      	b.n	80082a8 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008284:	d010      	beq.n	80082a8 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008286:	f7fc fad1 	bl	800482c <HAL_GetTick>
 800828a:	4602      	mov	r2, r0
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	1ad3      	subs	r3, r2, r3
 8008290:	683a      	ldr	r2, [r7, #0]
 8008292:	429a      	cmp	r2, r3
 8008294:	d302      	bcc.n	800829c <HAL_HRTIM_PollForDLLCalibration+0x30>
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d105      	bne.n	80082a8 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2207      	movs	r2, #7
 80082a0:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
        return HAL_TIMEOUT;
 80082a4:	2303      	movs	r3, #3
 80082a6:	e011      	b.n	80082cc <HAL_HRTIM_PollForDLLCalibration+0x60>
  while (__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 80082b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80082b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082b8:	d1e1      	bne.n	800827e <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2201      	movs	r2, #1
 80082be:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3710      	adds	r7, #16
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d101      	bne.n	80082f0 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
    return HAL_BUSY;
 80082ec:	2302      	movs	r3, #2
 80082ee:	e015      	b.n	800831c <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2202      	movs	r2, #2
 80082f4:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	2b06      	cmp	r3, #6
 80082fc:	d104      	bne.n	8008308 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 80082fe:	6879      	ldr	r1, [r7, #4]
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f000 fac6 	bl	8008892 <HRTIM_MasterBase_Config>
 8008306:	e004      	b.n	8008312 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	68b9      	ldr	r1, [r7, #8]
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f000 faef 	bl	80088f0 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2201      	movs	r2, #1
 8008316:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3710      	adds	r7, #16
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8008336:	b2db      	uxtb	r3, r3
 8008338:	2b02      	cmp	r3, #2
 800833a:	d101      	bne.n	8008340 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
    return HAL_BUSY;
 800833c:	2302      	movs	r3, #2
 800833e:	e07a      	b.n	8008436 <HAL_HRTIM_WaveformTimerConfig+0x112>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8008346:	2b01      	cmp	r3, #1
 8008348:	d101      	bne.n	800834e <HAL_HRTIM_WaveformTimerConfig+0x2a>
 800834a:	2302      	movs	r3, #2
 800834c:	e073      	b.n	8008436 <HAL_HRTIM_WaveformTimerConfig+0x112>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2201      	movs	r2, #1
 8008352:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2202      	movs	r2, #2
 800835a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	2b06      	cmp	r3, #6
 8008362:	d104      	bne.n	800836e <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8008364:	6879      	ldr	r1, [r7, #4]
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f000 fb02 	bl	8008970 <HRTIM_MasterWaveform_Config>
 800836c:	e004      	b.n	8008378 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	68b9      	ldr	r1, [r7, #8]
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f000 fb9a 	bl	8008aac <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6819      	ldr	r1, [r3, #0]
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	68ba      	ldr	r2, [r7, #8]
 8008380:	4613      	mov	r3, r2
 8008382:	00db      	lsls	r3, r3, #3
 8008384:	1a9b      	subs	r3, r3, r2
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	4403      	add	r3, r0
 800838a:	3320      	adds	r3, #32
 800838c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6859      	ldr	r1, [r3, #4]
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	68ba      	ldr	r2, [r7, #8]
 8008396:	4613      	mov	r3, r2
 8008398:	00db      	lsls	r3, r3, #3
 800839a:	1a9b      	subs	r3, r3, r2
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	4403      	add	r3, r0
 80083a0:	3324      	adds	r3, #36	@ 0x24
 80083a2:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6899      	ldr	r1, [r3, #8]
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	68ba      	ldr	r2, [r7, #8]
 80083ac:	4613      	mov	r3, r2
 80083ae:	00db      	lsls	r3, r3, #3
 80083b0:	1a9b      	subs	r3, r3, r2
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	4403      	add	r3, r0
 80083b6:	3328      	adds	r3, #40	@ 0x28
 80083b8:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	68d9      	ldr	r1, [r3, #12]
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	4613      	mov	r3, r2
 80083c4:	00db      	lsls	r3, r3, #3
 80083c6:	1a9b      	subs	r3, r3, r2
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	4403      	add	r3, r0
 80083cc:	332c      	adds	r3, #44	@ 0x2c
 80083ce:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6919      	ldr	r1, [r3, #16]
 80083d4:	68f8      	ldr	r0, [r7, #12]
 80083d6:	68ba      	ldr	r2, [r7, #8]
 80083d8:	4613      	mov	r3, r2
 80083da:	00db      	lsls	r3, r3, #3
 80083dc:	1a9b      	subs	r3, r3, r2
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	4403      	add	r3, r0
 80083e2:	3330      	adds	r3, #48	@ 0x30
 80083e4:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80083e6:	68b9      	ldr	r1, [r7, #8]
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	f000 fe2d 	bl	8009048 <HRTIM_ForceRegistersUpdate>

  /* Configure slave timer update re-synchronization */
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	2b06      	cmp	r3, #6
 80083f2:	d017      	beq.n	8008424 <HAL_HRTIM_WaveformTimerConfig+0x100>
      && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d113      	bne.n	8008424 <HAL_HRTIM_WaveformTimerConfig+0x100>
  {
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	3301      	adds	r3, #1
 8008404:	01db      	lsls	r3, r3, #7
 8008406:	4413      	add	r3, r2
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008412:	025b      	lsls	r3, r3, #9
 8008414:	68f9      	ldr	r1, [r7, #12]
 8008416:	6809      	ldr	r1, [r1, #0]
 8008418:	431a      	orrs	r2, r3
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	3301      	adds	r3, #1
 800841e:	01db      	lsls	r3, r3, #7
 8008420:	440b      	add	r3, r1
 8008422:	601a      	str	r2, [r3, #0]
               HRTIM_TIMCR_RSYNCU_Msk,
               pTimerCfg->ReSyncUpdate << HRTIM_TIMCR_RSYNCU_Pos);
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2201      	movs	r2, #1
 8008428:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2200      	movs	r2, #0
 8008430:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t TimerIdx,
                                                 const HRTIM_TimerCtlTypeDef *pTimerCtl)
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b084      	sub	sp, #16
 8008442:	af00      	add	r7, sp, #0
 8008444:	60f8      	str	r0, [r7, #12]
 8008446:	60b9      	str	r1, [r7, #8]
 8008448:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
  assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
  assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
  assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8008450:	b2db      	uxtb	r3, r3
 8008452:	2b02      	cmp	r3, #2
 8008454:	d101      	bne.n	800845a <HAL_HRTIM_WaveformTimerControl+0x1c>
  {
    return HAL_BUSY;
 8008456:	2302      	movs	r3, #2
 8008458:	e020      	b.n	800849c <HAL_HRTIM_WaveformTimerControl+0x5e>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8008460:	2b01      	cmp	r3, #1
 8008462:	d101      	bne.n	8008468 <HAL_HRTIM_WaveformTimerControl+0x2a>
 8008464:	2302      	movs	r3, #2
 8008466:	e019      	b.n	800849c <HAL_HRTIM_WaveformTimerControl+0x5e>
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2202      	movs	r2, #2
 8008474:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure timing unit */
  HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	68b9      	ldr	r1, [r7, #8]
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f000 fc9b 	bl	8008db8 <HRTIM_TimingUnitWaveform_Control>

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8008482:	68b9      	ldr	r1, [r7, #8]
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	f000 fddf 	bl	8009048 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2201      	movs	r2, #1
 800848e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2200      	movs	r2, #0
 8008496:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	3710      	adds	r7, #16
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef *hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef *pCompareCfg)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b085      	sub	sp, #20
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	607a      	str	r2, [r7, #4]
 80084b0:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d101      	bne.n	80084c2 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
    return HAL_BUSY;
 80084be:	2302      	movs	r3, #2
 80084c0:	e157      	b.n	8008772 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d101      	bne.n	80084d0 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 80084cc:	2302      	movs	r3, #2
 80084ce:	e150      	b.n	8008772 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2202      	movs	r2, #2
 80084dc:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	2b06      	cmp	r3, #6
 80084e4:	d140      	bne.n	8008568 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	3b01      	subs	r3, #1
 80084ea:	2b07      	cmp	r3, #7
 80084ec:	d82a      	bhi.n	8008544 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 80084ee:	a201      	add	r2, pc, #4	@ (adr r2, 80084f4 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 80084f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f4:	08008515 	.word	0x08008515
 80084f8:	08008521 	.word	0x08008521
 80084fc:	08008545 	.word	0x08008545
 8008500:	0800852d 	.word	0x0800852d
 8008504:	08008545 	.word	0x08008545
 8008508:	08008545 	.word	0x08008545
 800850c:	08008545 	.word	0x08008545
 8008510:	08008539 	.word	0x08008539
    {
      case HRTIM_COMPAREUNIT_1:
      {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	683a      	ldr	r2, [r7, #0]
 800851a:	6812      	ldr	r2, [r2, #0]
 800851c:	61da      	str	r2, [r3, #28]
        break;
 800851e:	e01a      	b.n	8008556 <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      case HRTIM_COMPAREUNIT_2:
      {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	683a      	ldr	r2, [r7, #0]
 8008526:	6812      	ldr	r2, [r2, #0]
 8008528:	625a      	str	r2, [r3, #36]	@ 0x24
        break;
 800852a:	e014      	b.n	8008556 <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      case HRTIM_COMPAREUNIT_3:
      {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	683a      	ldr	r2, [r7, #0]
 8008532:	6812      	ldr	r2, [r2, #0]
 8008534:	629a      	str	r2, [r3, #40]	@ 0x28
        break;
 8008536:	e00e      	b.n	8008556 <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      case HRTIM_COMPAREUNIT_4:
      {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	683a      	ldr	r2, [r7, #0]
 800853e:	6812      	ldr	r2, [r2, #0]
 8008540:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 8008542:	e008      	b.n	8008556 <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      default:
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2207      	movs	r2, #7
 8008548:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2200      	movs	r2, #0
 8008550:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

        break;
 8008554:	bf00      	nop
      }
    }

    if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 800855c:	b2db      	uxtb	r3, r3
 800855e:	2b07      	cmp	r3, #7
 8008560:	f040 80fe 	bne.w	8008760 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
      return HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	e104      	b.n	8008772 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	3b01      	subs	r3, #1
 800856c:	2b07      	cmp	r3, #7
 800856e:	f200 80e3 	bhi.w	8008738 <HAL_HRTIM_WaveformCompareConfig+0x294>
 8008572:	a201      	add	r2, pc, #4	@ (adr r2, 8008578 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8008574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008578:	08008599 	.word	0x08008599
 800857c:	080085ad 	.word	0x080085ad
 8008580:	08008739 	.word	0x08008739
 8008584:	08008669 	.word	0x08008669
 8008588:	08008739 	.word	0x08008739
 800858c:	08008739 	.word	0x08008739
 8008590:	08008739 	.word	0x08008739
 8008594:	0800867d 	.word	0x0800867d
    {
      case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6819      	ldr	r1, [r3, #0]
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	01db      	lsls	r3, r3, #7
 80085a4:	440b      	add	r3, r1
 80085a6:	339c      	adds	r3, #156	@ 0x9c
 80085a8:	601a      	str	r2, [r3, #0]
        break;
 80085aa:	e0d1      	b.n	8008750 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6819      	ldr	r1, [r3, #0]
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	01db      	lsls	r3, r3, #7
 80085b8:	440b      	add	r3, r1
 80085ba:	33a4      	adds	r3, #164	@ 0xa4
 80085bc:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d03f      	beq.n	8008646 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	3301      	adds	r3, #1
 80085ce:	01db      	lsls	r3, r3, #7
 80085d0:	4413      	add	r3, r2
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	6811      	ldr	r1, [r2, #0]
 80085d8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	3301      	adds	r3, #1
 80085e0:	01db      	lsls	r3, r3, #7
 80085e2:	440b      	add	r3, r1
 80085e4:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	3301      	adds	r3, #1
 80085ee:	01db      	lsls	r3, r3, #7
 80085f0:	4413      	add	r3, r2
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	68f9      	ldr	r1, [r7, #12]
 80085fa:	6809      	ldr	r1, [r1, #0]
 80085fc:	431a      	orrs	r2, r3
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	3301      	adds	r3, #1
 8008602:	01db      	lsls	r3, r3, #7
 8008604:	440b      	add	r3, r1
 8008606:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008610:	d109      	bne.n	8008626 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6819      	ldr	r1, [r3, #0]
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	689a      	ldr	r2, [r3, #8]
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	01db      	lsls	r3, r3, #7
 800861e:	440b      	add	r3, r1
 8008620:	339c      	adds	r3, #156	@ 0x9c
 8008622:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
        break;
 8008624:	e091      	b.n	800874a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800862e:	f040 808c 	bne.w	800874a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	6819      	ldr	r1, [r3, #0]
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	689a      	ldr	r2, [r3, #8]
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	01db      	lsls	r3, r3, #7
 800863e:	440b      	add	r3, r1
 8008640:	33a8      	adds	r3, #168	@ 0xa8
 8008642:	601a      	str	r2, [r3, #0]
        break;
 8008644:	e081      	b.n	800874a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	3301      	adds	r3, #1
 800864e:	01db      	lsls	r3, r3, #7
 8008650:	4413      	add	r3, r2
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	68fa      	ldr	r2, [r7, #12]
 8008656:	6811      	ldr	r1, [r2, #0]
 8008658:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	3301      	adds	r3, #1
 8008660:	01db      	lsls	r3, r3, #7
 8008662:	440b      	add	r3, r1
 8008664:	601a      	str	r2, [r3, #0]
        break;
 8008666:	e070      	b.n	800874a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

      case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6819      	ldr	r1, [r3, #0]
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	01db      	lsls	r3, r3, #7
 8008674:	440b      	add	r3, r1
 8008676:	33a8      	adds	r3, #168	@ 0xa8
 8008678:	601a      	str	r2, [r3, #0]
        break;
 800867a:	e069      	b.n	8008750 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6819      	ldr	r1, [r3, #0]
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	01db      	lsls	r3, r3, #7
 8008688:	440b      	add	r3, r1
 800868a:	33ac      	adds	r3, #172	@ 0xac
 800868c:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d03f      	beq.n	8008716 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	3301      	adds	r3, #1
 800869e:	01db      	lsls	r3, r3, #7
 80086a0:	4413      	add	r3, r2
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	6811      	ldr	r1, [r2, #0]
 80086a8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	3301      	adds	r3, #1
 80086b0:	01db      	lsls	r3, r3, #7
 80086b2:	440b      	add	r3, r1
 80086b4:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	3301      	adds	r3, #1
 80086be:	01db      	lsls	r3, r3, #7
 80086c0:	4413      	add	r3, r2
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	68f9      	ldr	r1, [r7, #12]
 80086cc:	6809      	ldr	r1, [r1, #0]
 80086ce:	431a      	orrs	r2, r3
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	3301      	adds	r3, #1
 80086d4:	01db      	lsls	r3, r3, #7
 80086d6:	440b      	add	r3, r1
 80086d8:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086e2:	d109      	bne.n	80086f8 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6819      	ldr	r1, [r3, #0]
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	689a      	ldr	r2, [r3, #8]
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	01db      	lsls	r3, r3, #7
 80086f0:	440b      	add	r3, r1
 80086f2:	339c      	adds	r3, #156	@ 0x9c
 80086f4:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
        break;
 80086f6:	e02a      	b.n	800874e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008700:	d125      	bne.n	800874e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	6819      	ldr	r1, [r3, #0]
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	689a      	ldr	r2, [r3, #8]
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	01db      	lsls	r3, r3, #7
 800870e:	440b      	add	r3, r1
 8008710:	33a8      	adds	r3, #168	@ 0xa8
 8008712:	601a      	str	r2, [r3, #0]
        break;
 8008714:	e01b      	b.n	800874e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	3301      	adds	r3, #1
 800871e:	01db      	lsls	r3, r3, #7
 8008720:	4413      	add	r3, r2
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	6811      	ldr	r1, [r2, #0]
 8008728:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	3301      	adds	r3, #1
 8008730:	01db      	lsls	r3, r3, #7
 8008732:	440b      	add	r3, r1
 8008734:	601a      	str	r2, [r3, #0]
        break;
 8008736:	e00a      	b.n	800874e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

      default:
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2207      	movs	r2, #7
 800873c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2200      	movs	r2, #0
 8008744:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

        break;
 8008748:	e002      	b.n	8008750 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
        break;
 800874a:	bf00      	nop
 800874c:	e000      	b.n	8008750 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
        break;
 800874e:	bf00      	nop
      }
    }

    if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8008756:	b2db      	uxtb	r3, r3
 8008758:	2b07      	cmp	r3, #7
 800875a:	d101      	bne.n	8008760 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
      return HAL_ERROR;
 800875c:	2301      	movs	r3, #1
 800875e:	e008      	b.n	8008772 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	3714      	adds	r7, #20
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr
 800877e:	bf00      	nop

08008780 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t TimerIdx,
                                                 uint32_t Output,
                                                 const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]
 800878c:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8008794:	b2db      	uxtb	r3, r3
 8008796:	2b02      	cmp	r3, #2
 8008798:	d101      	bne.n	800879e <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
    return HAL_BUSY;
 800879a:	2302      	movs	r3, #2
 800879c:	e01d      	b.n	80087da <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d101      	bne.n	80087ac <HAL_HRTIM_WaveformOutputConfig+0x2c>
 80087a8:	2302      	movs	r3, #2
 80087aa:	e016      	b.n	80087da <HAL_HRTIM_WaveformOutputConfig+0x5a>
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2202      	movs	r2, #2
 80087b8:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	68b9      	ldr	r1, [r7, #8]
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f000 fb58 	bl	8008e78 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2201      	movs	r2, #1
 80087cc:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80087d8:	2300      	movs	r3, #0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3710      	adds	r7, #16
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t OutputsToStart)
{
 80087e2:	b480      	push	{r7}
 80087e4:	b083      	sub	sp, #12
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d101      	bne.n	80087fa <HAL_HRTIM_WaveformOutputStart+0x18>
 80087f6:	2302      	movs	r3, #2
 80087f8:	e01a      	b.n	8008830 <HAL_HRTIM_WaveformOutputStart+0x4e>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2201      	movs	r2, #1
 80087fe:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2202      	movs	r2, #2
 8008806:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f8d3 1394 	ldr.w	r1, [r3, #916]	@ 0x394
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	683a      	ldr	r2, [r7, #0]
 8008818:	430a      	orrs	r2, r1
 800881a:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2201      	movs	r2, #1
 8008822:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 800882e:	2300      	movs	r3, #0
}
 8008830:	4618      	mov	r0, r3
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <HAL_HRTIM_WaveformCountStart>:
  *                   @arg HRTIM_TIMERID_TIMER_F
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart(HRTIM_HandleTypeDef *hhrtim,
                                               uint32_t Timers)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800884c:	2b01      	cmp	r3, #1
 800884e:	d101      	bne.n	8008854 <HAL_HRTIM_WaveformCountStart+0x18>
 8008850:	2302      	movs	r3, #2
 8008852:	e018      	b.n	8008886 <HAL_HRTIM_WaveformCountStart+0x4a>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2202      	movs	r2, #2
 8008860:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	6819      	ldr	r1, [r3, #0]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	683a      	ldr	r2, [r7, #0]
 8008870:	430a      	orrs	r2, r1
 8008872:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	370c      	adds	r7, #12
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr

08008892 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 8008892:	b480      	push	{r7}
 8008894:	b085      	sub	sp, #20
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
 800889a:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f023 0307 	bic.w	r3, r3, #7
 80088aa:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	68fa      	ldr	r2, [r7, #12]
 80088b2:	4313      	orrs	r3, r2
 80088b4:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f023 0318 	bic.w	r3, r3, #24
 80088bc:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	68fa      	ldr	r2, [r7, #12]
 80088c4:	4313      	orrs	r3, r2
 80088c6:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	683a      	ldr	r2, [r7, #0]
 80088d6:	6812      	ldr	r2, [r2, #0]
 80088d8:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	683a      	ldr	r2, [r7, #0]
 80088e0:	6852      	ldr	r2, [r2, #4]
 80088e2:	619a      	str	r2, [r3, #24]
}
 80088e4:	bf00      	nop
 80088e6:	3714      	adds	r7, #20
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                        uint32_t TimerIdx,
                                        const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b087      	sub	sp, #28
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	60f8      	str	r0, [r7, #12]
 80088f8:	60b9      	str	r1, [r7, #8]
 80088fa:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	3301      	adds	r3, #1
 8008904:	01db      	lsls	r3, r3, #7
 8008906:	4413      	add	r3, r2
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	f023 0307 	bic.w	r3, r3, #7
 8008912:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	697a      	ldr	r2, [r7, #20]
 800891a:	4313      	orrs	r3, r2
 800891c:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	f023 0318 	bic.w	r3, r3, #24
 8008924:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	697a      	ldr	r2, [r7, #20]
 800892c:	4313      	orrs	r3, r2
 800892e:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	3301      	adds	r3, #1
 8008938:	01db      	lsls	r3, r3, #7
 800893a:	4413      	add	r3, r2
 800893c:	697a      	ldr	r2, [r7, #20]
 800893e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6819      	ldr	r1, [r3, #0]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	01db      	lsls	r3, r3, #7
 800894c:	440b      	add	r3, r1
 800894e:	3394      	adds	r3, #148	@ 0x94
 8008950:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6819      	ldr	r1, [r3, #0]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	685a      	ldr	r2, [r3, #4]
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	01db      	lsls	r3, r3, #7
 800895e:	440b      	add	r3, r1
 8008960:	3398      	adds	r3, #152	@ 0x98
 8008962:	601a      	str	r2, [r3, #0]
}
 8008964:	bf00      	nop
 8008966:	371c      	adds	r7, #28
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                        const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8008970:	b480      	push	{r7}
 8008972:	b085      	sub	sp, #20
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 800898a:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f023 0320 	bic.w	r3, r3, #32
 8008992:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	695b      	ldr	r3, [r3, #20]
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	4313      	orrs	r3, r2
 800899c:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80089a4:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	695b      	ldr	r3, [r3, #20]
 80089aa:	2b20      	cmp	r3, #32
 80089ac:	d003      	beq.n	80089b6 <HRTIM_MasterWaveform_Config+0x46>
      || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	699b      	ldr	r3, [r3, #24]
 80089b2:	2b02      	cmp	r3, #2
 80089b4:	d108      	bne.n	80089c8 <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80089bc:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f043 0320 	orr.w	r3, r3, #32
 80089c4:	60fb      	str	r3, [r7, #12]
 80089c6:	e021      	b.n	8008a0c <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	2b03      	cmp	r3, #3
 80089ce:	d108      	bne.n	80089e2 <HRTIM_MasterWaveform_Config+0x72>
  {
    hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089d6:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80089de:	60fb      	str	r3, [r7, #12]
 80089e0:	e014      	b.n	8008a0c <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	699b      	ldr	r3, [r3, #24]
 80089e6:	2b04      	cmp	r3, #4
 80089e8:	d108      	bne.n	80089fc <HRTIM_MasterWaveform_Config+0x8c>
  {
    hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089f0:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089f8:	60fb      	str	r3, [r7, #12]
 80089fa:	e007      	b.n	8008a0c <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
    hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f023 0320 	bic.w	r3, r3, #32
 8008a02:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008a12:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	69db      	ldr	r3, [r3, #28]
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008a24:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	6a1b      	ldr	r3, [r3, #32]
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8008a36:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a3c:	68fa      	ldr	r2, [r7, #12]
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8008a48:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a4e:	68fa      	ldr	r2, [r7, #12]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8008a5a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	4313      	orrs	r3, r2
 8008a66:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008a6e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a74:	68fa      	ldr	r2, [r7, #12]
 8008a76:	4313      	orrs	r3, r2
 8008a78:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a80:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a86:	68ba      	ldr	r2, [r7, #8]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	68ba      	ldr	r2, [r7, #8]
 8008a9a:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8008a9e:	bf00      	nop
 8008aa0:	3714      	adds	r7, #20
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr
	...

08008aac <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b08b      	sub	sp, #44	@ 0x2c
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	3301      	adds	r3, #1
 8008ac0:	01db      	lsls	r3, r3, #7
 8008ac2:	4413      	add	r3, r2
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	68fa      	ldr	r2, [r7, #12]
 8008ac8:	6811      	ldr	r1, [r2, #0]
 8008aca:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	01db      	lsls	r3, r3, #7
 8008ad4:	440b      	add	r3, r1
 8008ad6:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	01db      	lsls	r3, r3, #7
 8008ae2:	4413      	add	r3, r2
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	01db      	lsls	r3, r3, #7
 8008af0:	4413      	add	r3, r2
 8008af2:	33e8      	adds	r3, #232	@ 0xe8
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	01db      	lsls	r3, r3, #7
 8008b00:	4413      	add	r3, r2
 8008b02:	33e4      	adds	r3, #228	@ 0xe4
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8008b10:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8008b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b14:	f023 0320 	bic.w	r3, r3, #32
 8008b18:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	695b      	ldr	r3, [r3, #20]
 8008b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b20:	4313      	orrs	r3, r2
 8008b22:	627b      	str	r3, [r7, #36]	@ 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	695b      	ldr	r3, [r3, #20]
 8008b28:	2b20      	cmp	r3, #32
 8008b2a:	d003      	beq.n	8008b34 <HRTIM_TimingUnitWaveform_Config+0x88>
      || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	699b      	ldr	r3, [r3, #24]
 8008b30:	2b02      	cmp	r3, #2
 8008b32:	d108      	bne.n	8008b46 <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8008b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b36:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8008b3a:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b3e:	f043 0320 	orr.w	r3, r3, #32
 8008b42:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b44:	e021      	b.n	8008b8a <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	699b      	ldr	r3, [r3, #24]
 8008b4a:	2b03      	cmp	r3, #3
 8008b4c:	d108      	bne.n	8008b60 <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
    hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 8008b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b54:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 8008b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b5e:	e014      	b.n	8008b8a <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	699b      	ldr	r3, [r3, #24]
 8008b64:	2b04      	cmp	r3, #4
 8008b66:	d108      	bne.n	8008b7a <HRTIM_TimingUnitWaveform_Config+0xce>
  {
    hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 8008b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b6e:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 8008b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b76:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b78:	e007      	b.n	8008b8a <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
    hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8008b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b7c:	f023 0320 	bic.w	r3, r3, #32
 8008b80:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8008b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b84:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8008b88:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8008b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b8c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008b90:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	69db      	ldr	r3, [r3, #28]
 8008b96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8008b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b9e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6a1b      	ldr	r3, [r3, #32]
 8008ba8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008baa:	4313      	orrs	r3, r2
 8008bac:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8008bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8008bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8008bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc2:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8008bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8008bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008be0:	4313      	orrs	r3, r2
 8008be2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8008be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008bea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bf4:	d103      	bne.n	8008bfe <HRTIM_TimingUnitWaveform_Config+0x152>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8008bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8008bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c04:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8008c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008c16:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8008c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c24:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 8008c28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c2c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c34:	4313      	orrs	r3, r2
 8008c36:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8008c38:	69bb      	ldr	r3, [r7, #24]
 8008c3a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008c3e:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c48:	69ba      	ldr	r2, [r7, #24]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008c54:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c5a:	69ba      	ldr	r2, [r7, #24]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	61bb      	str	r3, [r7, #24]

  /* Enable/Disable dead time insertion at timer level */
  hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8008c60:	6a3b      	ldr	r3, [r7, #32]
 8008c62:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c66:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c6c:	6a3a      	ldr	r2, [r7, #32]
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if (((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c76:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8008c7a:	d004      	beq.n	8008c86 <HRTIM_TimingUnitWaveform_Config+0x1da>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c80:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 8008c84:	d103      	bne.n	8008c8e <HRTIM_TimingUnitWaveform_Config+0x1e2>
      || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c8a:	2b40      	cmp	r3, #64	@ 0x40
 8008c8c:	d108      	bne.n	8008ca0 <HRTIM_TimingUnitWaveform_Config+0x1f4>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT | HRTIM_OUTR_DLYPRTEN);
 8008c8e:	6a3b      	ldr	r3, [r7, #32]
 8008c90:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 8008c94:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c9a:	6a3a      	ldr	r2, [r7, #32]
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8008ca0:	6a3b      	ldr	r3, [r7, #32]
 8008ca2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ca6:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cac:	6a3a      	ldr	r2, [r7, #32]
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cb6:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	2b05      	cmp	r3, #5
 8008cbc:	d850      	bhi.n	8008d60 <HRTIM_TimingUnitWaveform_Config+0x2b4>
 8008cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8008cc4 <HRTIM_TimingUnitWaveform_Config+0x218>)
 8008cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc4:	08008cdd 	.word	0x08008cdd
 8008cc8:	08008cf3 	.word	0x08008cf3
 8008ccc:	08008d09 	.word	0x08008d09
 8008cd0:	08008d1f 	.word	0x08008d1f
 8008cd4:	08008d35 	.word	0x08008d35
 8008cd8:	08008d4b 	.word	0x08008d4b
  {
    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008ce2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 1U);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ce8:	005b      	lsls	r3, r3, #1
 8008cea:	69fa      	ldr	r2, [r7, #28]
 8008cec:	4313      	orrs	r3, r2
 8008cee:	61fb      	str	r3, [r7, #28]
      break;
 8008cf0:	e037      	b.n	8008d62 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008cf8:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 2U);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	69fa      	ldr	r2, [r7, #28]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	61fb      	str	r3, [r7, #28]
      break;
 8008d06:	e02c      	b.n	8008d62 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8008d0e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 3U);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d14:	00db      	lsls	r3, r3, #3
 8008d16:	69fa      	ldr	r2, [r7, #28]
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	61fb      	str	r3, [r7, #28]
      break;
 8008d1c:	e021      	b.n	8008d62 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008d24:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 4U);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d2a:	011b      	lsls	r3, r3, #4
 8008d2c:	69fa      	ldr	r2, [r7, #28]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	61fb      	str	r3, [r7, #28]
      break;
 8008d32:	e016      	b.n	8008d62 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008d3a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 5U);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d40:	015b      	lsls	r3, r3, #5
 8008d42:	69fa      	ldr	r2, [r7, #28]
 8008d44:	4313      	orrs	r3, r2
 8008d46:	61fb      	str	r3, [r7, #28]
      break;
 8008d48:	e00b      	b.n	8008d62 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8008d50:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 6U);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d56:	019b      	lsls	r3, r3, #6
 8008d58:	69fa      	ldr	r2, [r7, #28]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	61fb      	str	r3, [r7, #28]
      break;
 8008d5e:	e000      	b.n	8008d62 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    default:
      break;
 8008d60:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	3301      	adds	r3, #1
 8008d6a:	01db      	lsls	r3, r3, #7
 8008d6c:	4413      	add	r3, r2
 8008d6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d70:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	01db      	lsls	r3, r3, #7
 8008d7a:	4413      	add	r3, r2
 8008d7c:	33e8      	adds	r3, #232	@ 0xe8
 8008d7e:	69ba      	ldr	r2, [r7, #24]
 8008d80:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	01db      	lsls	r3, r3, #7
 8008d8a:	4413      	add	r3, r2
 8008d8c:	33e4      	adds	r3, #228	@ 0xe4
 8008d8e:	6a3a      	ldr	r2, [r7, #32]
 8008d90:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	01db      	lsls	r3, r3, #7
 8008d9a:	4413      	add	r3, r2
 8008d9c:	33d4      	adds	r3, #212	@ 0xd4
 8008d9e:	697a      	ldr	r2, [r7, #20]
 8008da0:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	69fa      	ldr	r2, [r7, #28]
 8008da8:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8008dac:	bf00      	nop
 8008dae:	372c      	adds	r7, #44	@ 0x2c
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCtlTypeDef *pTimerCtl)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b087      	sub	sp, #28
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr2;

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	01db      	lsls	r3, r3, #7
 8008dcc:	4413      	add	r3, r2
 8008dce:	33ec      	adds	r3, #236	@ 0xec
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	617b      	str	r3, [r7, #20]

  /* Set the UpDown counting Mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	f023 0310 	bic.w	r3, r3, #16
 8008dda:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	011b      	lsls	r3, r3, #4
 8008de2:	697a      	ldr	r2, [r7, #20]
 8008de4:	4313      	orrs	r3, r2
 8008de6:	617b      	str	r3, [r7, #20]

  /* Set the TrigHalf Mode : requires the counter to be disabled */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008dee:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->TrigHalf;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	697a      	ldr	r2, [r7, #20]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	617b      	str	r3, [r7, #20]

  /* define the compare event operating mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e00:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	68db      	ldr	r3, [r3, #12]
 8008e06:	697a      	ldr	r2, [r7, #20]
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	617b      	str	r3, [r7, #20]

  /* define the compare event operating mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008e12:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	697a      	ldr	r2, [r7, #20]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	617b      	str	r3, [r7, #20]

  if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	699b      	ldr	r3, [r3, #24]
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d11a      	bne.n	8008e5c <HRTIM_TimingUnitWaveform_Control+0xa4>
  {
    /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	f023 0304 	bic.w	r3, r3, #4
 8008e2c:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	697a      	ldr	r2, [r7, #20]
 8008e34:	4313      	orrs	r3, r2
 8008e36:	617b      	str	r3, [r7, #20]

    /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	f023 0302 	bic.w	r3, r3, #2
 8008e3e:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	695b      	ldr	r3, [r3, #20]
 8008e44:	697a      	ldr	r2, [r7, #20]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	617b      	str	r3, [r7, #20]

    /* Enable the DualChannel DAC trigger */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	f023 0301 	bic.w	r3, r3, #1
 8008e50:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	699b      	ldr	r3, [r3, #24]
 8008e56:	697a      	ldr	r2, [r7, #20]
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	617b      	str	r3, [r7, #20]
  }
  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	01db      	lsls	r3, r3, #7
 8008e64:	4413      	add	r3, r2
 8008e66:	33ec      	adds	r3, #236	@ 0xec
 8008e68:	697a      	ldr	r2, [r7, #20]
 8008e6a:	601a      	str	r2, [r3, #0]

}
 8008e6c:	bf00      	nop
 8008e6e:	371c      	adds	r7, #28
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b089      	sub	sp, #36	@ 0x24
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	607a      	str	r2, [r7, #4]
 8008e84:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8008e86:	2300      	movs	r3, #0
 8008e88:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	01db      	lsls	r3, r3, #7
 8008e92:	4413      	add	r3, r2
 8008e94:	33e4      	adds	r3, #228	@ 0xe4
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	01db      	lsls	r3, r3, #7
 8008ea2:	4413      	add	r3, r2
 8008ea4:	33b8      	adds	r3, #184	@ 0xb8
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	617b      	str	r3, [r7, #20]

  switch (Output)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008eb0:	d05d      	beq.n	8008f6e <HRTIM_OutputConfig+0xf6>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008eb8:	d86e      	bhi.n	8008f98 <HRTIM_OutputConfig+0x120>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ec0:	d042      	beq.n	8008f48 <HRTIM_OutputConfig+0xd0>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ec8:	d866      	bhi.n	8008f98 <HRTIM_OutputConfig+0x120>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ed0:	d04d      	beq.n	8008f6e <HRTIM_OutputConfig+0xf6>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ed8:	d85e      	bhi.n	8008f98 <HRTIM_OutputConfig+0x120>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ee0:	d032      	beq.n	8008f48 <HRTIM_OutputConfig+0xd0>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ee8:	d856      	bhi.n	8008f98 <HRTIM_OutputConfig+0x120>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2b80      	cmp	r3, #128	@ 0x80
 8008eee:	d03e      	beq.n	8008f6e <HRTIM_OutputConfig+0xf6>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2b80      	cmp	r3, #128	@ 0x80
 8008ef4:	d850      	bhi.n	8008f98 <HRTIM_OutputConfig+0x120>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2b40      	cmp	r3, #64	@ 0x40
 8008efa:	d025      	beq.n	8008f48 <HRTIM_OutputConfig+0xd0>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2b40      	cmp	r3, #64	@ 0x40
 8008f00:	d84a      	bhi.n	8008f98 <HRTIM_OutputConfig+0x120>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d01f      	beq.n	8008f48 <HRTIM_OutputConfig+0xd0>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d044      	beq.n	8008f98 <HRTIM_OutputConfig+0x120>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2b20      	cmp	r3, #32
 8008f12:	d841      	bhi.n	8008f98 <HRTIM_OutputConfig+0x120>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2b02      	cmp	r3, #2
 8008f18:	d33e      	bcc.n	8008f98 <HRTIM_OutputConfig+0x120>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	3b02      	subs	r3, #2
 8008f1e:	2201      	movs	r2, #1
 8008f20:	409a      	lsls	r2, r3
 8008f22:	4b48      	ldr	r3, [pc, #288]	@ (8009044 <HRTIM_OutputConfig+0x1cc>)
 8008f24:	4013      	ands	r3, r2
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	bf14      	ite	ne
 8008f2a:	2301      	movne	r3, #1
 8008f2c:	2300      	moveq	r3, #0
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d11c      	bne.n	8008f6e <HRTIM_OutputConfig+0xf6>
 8008f34:	f244 0304 	movw	r3, #16388	@ 0x4004
 8008f38:	4013      	ands	r3, r2
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	bf14      	ite	ne
 8008f3e:	2301      	movne	r3, #1
 8008f40:	2300      	moveq	r3, #0
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d027      	beq.n	8008f98 <HRTIM_OutputConfig+0x120>
    case HRTIM_OUTPUT_TD1:
    case HRTIM_OUTPUT_TE1:
    case HRTIM_OUTPUT_TF1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6819      	ldr	r1, [r3, #0]
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	685a      	ldr	r2, [r3, #4]
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	01db      	lsls	r3, r3, #7
 8008f54:	440b      	add	r3, r1
 8008f56:	33bc      	adds	r3, #188	@ 0xbc
 8008f58:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6819      	ldr	r1, [r3, #0]
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	689a      	ldr	r2, [r3, #8]
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	01db      	lsls	r3, r3, #7
 8008f66:	440b      	add	r3, r1
 8008f68:	33c0      	adds	r3, #192	@ 0xc0
 8008f6a:	601a      	str	r2, [r3, #0]
      break;
 8008f6c:	e015      	b.n	8008f9a <HRTIM_OutputConfig+0x122>
    case HRTIM_OUTPUT_TD2:
    case HRTIM_OUTPUT_TE2:
    case HRTIM_OUTPUT_TF2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	6819      	ldr	r1, [r3, #0]
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	685a      	ldr	r2, [r3, #4]
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	01db      	lsls	r3, r3, #7
 8008f7a:	440b      	add	r3, r1
 8008f7c:	33c4      	adds	r3, #196	@ 0xc4
 8008f7e:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	6819      	ldr	r1, [r3, #0]
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	689a      	ldr	r2, [r3, #8]
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	01db      	lsls	r3, r3, #7
 8008f8c:	440b      	add	r3, r1
 8008f8e:	33c8      	adds	r3, #200	@ 0xc8
 8008f90:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8008f92:	2310      	movs	r3, #16
 8008f94:	61bb      	str	r3, [r7, #24]
      break;
 8008f96:	e000      	b.n	8008f9a <HRTIM_OutputConfig+0x122>
    }

    default:
      break;
 8008f98:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1 |
                   HRTIM_OUTR_FAULT1 |
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8008f9a:	22fe      	movs	r2, #254	@ 0xfe
 8008f9c:	69bb      	ldr	r3, [r7, #24]
 8008f9e:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8008fa2:	43db      	mvns	r3, r3
 8008fa4:	69fa      	ldr	r2, [r7, #28]
 8008fa6:	4013      	ands	r3, r2
 8008fa8:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fb4:	69fa      	ldr	r2, [r7, #28]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	68da      	ldr	r2, [r3, #12]
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fc4:	69fa      	ldr	r2, [r7, #28]
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	691a      	ldr	r2, [r3, #16]
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd4:	69fa      	ldr	r2, [r7, #28]
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	695a      	ldr	r2, [r3, #20]
 8008fde:	69bb      	ldr	r3, [r7, #24]
 8008fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe4:	69fa      	ldr	r2, [r7, #28]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	699a      	ldr	r2, [r3, #24]
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff4:	69fa      	ldr	r2, [r7, #28]
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	691b      	ldr	r3, [r3, #16]
 8008ffe:	2b08      	cmp	r3, #8
 8009000:	d111      	bne.n	8009026 <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8009008:	2b00      	cmp	r3, #0
 800900a:	d10c      	bne.n	8009026 <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8009012:	2b00      	cmp	r3, #0
 8009014:	d107      	bne.n	8009026 <HRTIM_OutputConfig+0x1ae>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	69da      	ldr	r2, [r3, #28]
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	fa02 f303 	lsl.w	r3, r2, r3
 8009020:	69fa      	ldr	r2, [r7, #28]
 8009022:	4313      	orrs	r3, r2
 8009024:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	01db      	lsls	r3, r3, #7
 800902e:	4413      	add	r3, r2
 8009030:	33e4      	adds	r3, #228	@ 0xe4
 8009032:	69fa      	ldr	r2, [r7, #28]
 8009034:	601a      	str	r2, [r3, #0]
}
 8009036:	bf00      	nop
 8009038:	3724      	adds	r7, #36	@ 0x24
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr
 8009042:	bf00      	nop
 8009044:	40000041 	.word	0x40000041

08009048 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef *hhrtim,
                                       uint32_t TimerIdx)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	2b06      	cmp	r3, #6
 8009056:	d85e      	bhi.n	8009116 <HRTIM_ForceRegistersUpdate+0xce>
 8009058:	a201      	add	r2, pc, #4	@ (adr r2, 8009060 <HRTIM_ForceRegistersUpdate+0x18>)
 800905a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800905e:	bf00      	nop
 8009060:	08009093 	.word	0x08009093
 8009064:	080090a9 	.word	0x080090a9
 8009068:	080090bf 	.word	0x080090bf
 800906c:	080090d5 	.word	0x080090d5
 8009070:	080090eb 	.word	0x080090eb
 8009074:	08009101 	.word	0x08009101
 8009078:	0800907d 	.word	0x0800907d
  {
    case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f042 0201 	orr.w	r2, r2, #1
 800908c:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8009090:	e042      	b.n	8009118 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f042 0202 	orr.w	r2, r2, #2
 80090a2:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80090a6:	e037      	b.n	8009118 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f042 0204 	orr.w	r2, r2, #4
 80090b8:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80090bc:	e02c      	b.n	8009118 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f042 0208 	orr.w	r2, r2, #8
 80090ce:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80090d2:	e021      	b.n	8009118 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f042 0210 	orr.w	r2, r2, #16
 80090e4:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80090e8:	e016      	b.n	8009118 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f042 0220 	orr.w	r2, r2, #32
 80090fa:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80090fe:	e00b      	b.n	8009118 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009110:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8009114:	e000      	b.n	8009118 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    default:
      break;
 8009116:	bf00      	nop
  }
}
 8009118:	bf00      	nop
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d101      	bne.n	8009136 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	e08d      	b.n	8009252 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800913c:	b2db      	uxtb	r3, r3
 800913e:	2b00      	cmp	r3, #0
 8009140:	d106      	bne.n	8009150 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f7fa fc42 	bl	80039d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2224      	movs	r2, #36	@ 0x24
 8009154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f022 0201 	bic.w	r2, r2, #1
 8009166:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	685a      	ldr	r2, [r3, #4]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009174:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	689a      	ldr	r2, [r3, #8]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009184:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	2b01      	cmp	r3, #1
 800918c:	d107      	bne.n	800919e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	689a      	ldr	r2, [r3, #8]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800919a:	609a      	str	r2, [r3, #8]
 800919c:	e006      	b.n	80091ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	689a      	ldr	r2, [r3, #8]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80091aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	2b02      	cmp	r3, #2
 80091b2:	d108      	bne.n	80091c6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	685a      	ldr	r2, [r3, #4]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80091c2:	605a      	str	r2, [r3, #4]
 80091c4:	e007      	b.n	80091d6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	685a      	ldr	r2, [r3, #4]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80091d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	6812      	ldr	r2, [r2, #0]
 80091e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80091e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	68da      	ldr	r2, [r3, #12]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80091f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	691a      	ldr	r2, [r3, #16]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	695b      	ldr	r3, [r3, #20]
 8009202:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	699b      	ldr	r3, [r3, #24]
 800920a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	430a      	orrs	r2, r1
 8009212:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	69d9      	ldr	r1, [r3, #28]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6a1a      	ldr	r2, [r3, #32]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	430a      	orrs	r2, r1
 8009222:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f042 0201 	orr.w	r2, r2, #1
 8009232:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2220      	movs	r2, #32
 800923e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009250:	2300      	movs	r3, #0
}
 8009252:	4618      	mov	r0, r3
 8009254:	3708      	adds	r7, #8
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
	...

0800925c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b088      	sub	sp, #32
 8009260:	af02      	add	r7, sp, #8
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	4608      	mov	r0, r1
 8009266:	4611      	mov	r1, r2
 8009268:	461a      	mov	r2, r3
 800926a:	4603      	mov	r3, r0
 800926c:	817b      	strh	r3, [r7, #10]
 800926e:	460b      	mov	r3, r1
 8009270:	813b      	strh	r3, [r7, #8]
 8009272:	4613      	mov	r3, r2
 8009274:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800927c:	b2db      	uxtb	r3, r3
 800927e:	2b20      	cmp	r3, #32
 8009280:	f040 80fd 	bne.w	800947e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009284:	6a3b      	ldr	r3, [r7, #32]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d002      	beq.n	8009290 <HAL_I2C_Mem_Read+0x34>
 800928a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800928c:	2b00      	cmp	r3, #0
 800928e:	d105      	bne.n	800929c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009296:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8009298:	2301      	movs	r3, #1
 800929a:	e0f1      	b.n	8009480 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d101      	bne.n	80092aa <HAL_I2C_Mem_Read+0x4e>
 80092a6:	2302      	movs	r3, #2
 80092a8:	e0ea      	b.n	8009480 <HAL_I2C_Mem_Read+0x224>
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2201      	movs	r2, #1
 80092ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80092b2:	f7fb fabb 	bl	800482c <HAL_GetTick>
 80092b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	9300      	str	r3, [sp, #0]
 80092bc:	2319      	movs	r3, #25
 80092be:	2201      	movs	r2, #1
 80092c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f000 f95b 	bl	8009580 <I2C_WaitOnFlagUntilTimeout>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d001      	beq.n	80092d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	e0d5      	b.n	8009480 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2222      	movs	r2, #34	@ 0x22
 80092d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2240      	movs	r2, #64	@ 0x40
 80092e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2200      	movs	r2, #0
 80092e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6a3a      	ldr	r2, [r7, #32]
 80092ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80092f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2200      	movs	r2, #0
 80092fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80092fc:	88f8      	ldrh	r0, [r7, #6]
 80092fe:	893a      	ldrh	r2, [r7, #8]
 8009300:	8979      	ldrh	r1, [r7, #10]
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	9301      	str	r3, [sp, #4]
 8009306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009308:	9300      	str	r3, [sp, #0]
 800930a:	4603      	mov	r3, r0
 800930c:	68f8      	ldr	r0, [r7, #12]
 800930e:	f000 f8bf 	bl	8009490 <I2C_RequestMemoryRead>
 8009312:	4603      	mov	r3, r0
 8009314:	2b00      	cmp	r3, #0
 8009316:	d005      	beq.n	8009324 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2200      	movs	r2, #0
 800931c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8009320:	2301      	movs	r3, #1
 8009322:	e0ad      	b.n	8009480 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009328:	b29b      	uxth	r3, r3
 800932a:	2bff      	cmp	r3, #255	@ 0xff
 800932c:	d90e      	bls.n	800934c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	22ff      	movs	r2, #255	@ 0xff
 8009332:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009338:	b2da      	uxtb	r2, r3
 800933a:	8979      	ldrh	r1, [r7, #10]
 800933c:	4b52      	ldr	r3, [pc, #328]	@ (8009488 <HAL_I2C_Mem_Read+0x22c>)
 800933e:	9300      	str	r3, [sp, #0]
 8009340:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009344:	68f8      	ldr	r0, [r7, #12]
 8009346:	f000 fadf 	bl	8009908 <I2C_TransferConfig>
 800934a:	e00f      	b.n	800936c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009350:	b29a      	uxth	r2, r3
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800935a:	b2da      	uxtb	r2, r3
 800935c:	8979      	ldrh	r1, [r7, #10]
 800935e:	4b4a      	ldr	r3, [pc, #296]	@ (8009488 <HAL_I2C_Mem_Read+0x22c>)
 8009360:	9300      	str	r3, [sp, #0]
 8009362:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	f000 face 	bl	8009908 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009372:	2200      	movs	r2, #0
 8009374:	2104      	movs	r1, #4
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	f000 f902 	bl	8009580 <I2C_WaitOnFlagUntilTimeout>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d001      	beq.n	8009386 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	e07c      	b.n	8009480 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009390:	b2d2      	uxtb	r2, r2
 8009392:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009398:	1c5a      	adds	r2, r3, #1
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093a2:	3b01      	subs	r3, #1
 80093a4:	b29a      	uxth	r2, r3
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	3b01      	subs	r3, #1
 80093b2:	b29a      	uxth	r2, r3
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093bc:	b29b      	uxth	r3, r3
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d034      	beq.n	800942c <HAL_I2C_Mem_Read+0x1d0>
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d130      	bne.n	800942c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	9300      	str	r3, [sp, #0]
 80093ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d0:	2200      	movs	r2, #0
 80093d2:	2180      	movs	r1, #128	@ 0x80
 80093d4:	68f8      	ldr	r0, [r7, #12]
 80093d6:	f000 f8d3 	bl	8009580 <I2C_WaitOnFlagUntilTimeout>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d001      	beq.n	80093e4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80093e0:	2301      	movs	r3, #1
 80093e2:	e04d      	b.n	8009480 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	2bff      	cmp	r3, #255	@ 0xff
 80093ec:	d90e      	bls.n	800940c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	22ff      	movs	r2, #255	@ 0xff
 80093f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093f8:	b2da      	uxtb	r2, r3
 80093fa:	8979      	ldrh	r1, [r7, #10]
 80093fc:	2300      	movs	r3, #0
 80093fe:	9300      	str	r3, [sp, #0]
 8009400:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f000 fa7f 	bl	8009908 <I2C_TransferConfig>
 800940a:	e00f      	b.n	800942c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009410:	b29a      	uxth	r2, r3
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800941a:	b2da      	uxtb	r2, r3
 800941c:	8979      	ldrh	r1, [r7, #10]
 800941e:	2300      	movs	r3, #0
 8009420:	9300      	str	r3, [sp, #0]
 8009422:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009426:	68f8      	ldr	r0, [r7, #12]
 8009428:	f000 fa6e 	bl	8009908 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009430:	b29b      	uxth	r3, r3
 8009432:	2b00      	cmp	r3, #0
 8009434:	d19a      	bne.n	800936c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009436:	697a      	ldr	r2, [r7, #20]
 8009438:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f000 f940 	bl	80096c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d001      	beq.n	800944a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	e01a      	b.n	8009480 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2220      	movs	r2, #32
 8009450:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	6859      	ldr	r1, [r3, #4]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	4b0b      	ldr	r3, [pc, #44]	@ (800948c <HAL_I2C_Mem_Read+0x230>)
 800945e:	400b      	ands	r3, r1
 8009460:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2220      	movs	r2, #32
 8009466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2200      	movs	r2, #0
 800946e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2200      	movs	r2, #0
 8009476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800947a:	2300      	movs	r3, #0
 800947c:	e000      	b.n	8009480 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800947e:	2302      	movs	r3, #2
  }
}
 8009480:	4618      	mov	r0, r3
 8009482:	3718      	adds	r7, #24
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}
 8009488:	80002400 	.word	0x80002400
 800948c:	fe00e800 	.word	0xfe00e800

08009490 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b086      	sub	sp, #24
 8009494:	af02      	add	r7, sp, #8
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	4608      	mov	r0, r1
 800949a:	4611      	mov	r1, r2
 800949c:	461a      	mov	r2, r3
 800949e:	4603      	mov	r3, r0
 80094a0:	817b      	strh	r3, [r7, #10]
 80094a2:	460b      	mov	r3, r1
 80094a4:	813b      	strh	r3, [r7, #8]
 80094a6:	4613      	mov	r3, r2
 80094a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80094aa:	88fb      	ldrh	r3, [r7, #6]
 80094ac:	b2da      	uxtb	r2, r3
 80094ae:	8979      	ldrh	r1, [r7, #10]
 80094b0:	4b20      	ldr	r3, [pc, #128]	@ (8009534 <I2C_RequestMemoryRead+0xa4>)
 80094b2:	9300      	str	r3, [sp, #0]
 80094b4:	2300      	movs	r3, #0
 80094b6:	68f8      	ldr	r0, [r7, #12]
 80094b8:	f000 fa26 	bl	8009908 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094bc:	69fa      	ldr	r2, [r7, #28]
 80094be:	69b9      	ldr	r1, [r7, #24]
 80094c0:	68f8      	ldr	r0, [r7, #12]
 80094c2:	f000 f8b6 	bl	8009632 <I2C_WaitOnTXISFlagUntilTimeout>
 80094c6:	4603      	mov	r3, r0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d001      	beq.n	80094d0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80094cc:	2301      	movs	r3, #1
 80094ce:	e02c      	b.n	800952a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80094d0:	88fb      	ldrh	r3, [r7, #6]
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d105      	bne.n	80094e2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80094d6:	893b      	ldrh	r3, [r7, #8]
 80094d8:	b2da      	uxtb	r2, r3
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	629a      	str	r2, [r3, #40]	@ 0x28
 80094e0:	e015      	b.n	800950e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80094e2:	893b      	ldrh	r3, [r7, #8]
 80094e4:	0a1b      	lsrs	r3, r3, #8
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	b2da      	uxtb	r2, r3
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094f0:	69fa      	ldr	r2, [r7, #28]
 80094f2:	69b9      	ldr	r1, [r7, #24]
 80094f4:	68f8      	ldr	r0, [r7, #12]
 80094f6:	f000 f89c 	bl	8009632 <I2C_WaitOnTXISFlagUntilTimeout>
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d001      	beq.n	8009504 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009500:	2301      	movs	r3, #1
 8009502:	e012      	b.n	800952a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009504:	893b      	ldrh	r3, [r7, #8]
 8009506:	b2da      	uxtb	r2, r3
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800950e:	69fb      	ldr	r3, [r7, #28]
 8009510:	9300      	str	r3, [sp, #0]
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	2200      	movs	r2, #0
 8009516:	2140      	movs	r1, #64	@ 0x40
 8009518:	68f8      	ldr	r0, [r7, #12]
 800951a:	f000 f831 	bl	8009580 <I2C_WaitOnFlagUntilTimeout>
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d001      	beq.n	8009528 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009524:	2301      	movs	r3, #1
 8009526:	e000      	b.n	800952a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3710      	adds	r7, #16
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
 8009532:	bf00      	nop
 8009534:	80002000 	.word	0x80002000

08009538 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	699b      	ldr	r3, [r3, #24]
 8009546:	f003 0302 	and.w	r3, r3, #2
 800954a:	2b02      	cmp	r3, #2
 800954c:	d103      	bne.n	8009556 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	2200      	movs	r2, #0
 8009554:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	699b      	ldr	r3, [r3, #24]
 800955c:	f003 0301 	and.w	r3, r3, #1
 8009560:	2b01      	cmp	r3, #1
 8009562:	d007      	beq.n	8009574 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	699a      	ldr	r2, [r3, #24]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f042 0201 	orr.w	r2, r2, #1
 8009572:	619a      	str	r2, [r3, #24]
  }
}
 8009574:	bf00      	nop
 8009576:	370c      	adds	r7, #12
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr

08009580 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	60b9      	str	r1, [r7, #8]
 800958a:	603b      	str	r3, [r7, #0]
 800958c:	4613      	mov	r3, r2
 800958e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009590:	e03b      	b.n	800960a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009592:	69ba      	ldr	r2, [r7, #24]
 8009594:	6839      	ldr	r1, [r7, #0]
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	f000 f8d6 	bl	8009748 <I2C_IsErrorOccurred>
 800959c:	4603      	mov	r3, r0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d001      	beq.n	80095a6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80095a2:	2301      	movs	r3, #1
 80095a4:	e041      	b.n	800962a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ac:	d02d      	beq.n	800960a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095ae:	f7fb f93d 	bl	800482c <HAL_GetTick>
 80095b2:	4602      	mov	r2, r0
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	1ad3      	subs	r3, r2, r3
 80095b8:	683a      	ldr	r2, [r7, #0]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d302      	bcc.n	80095c4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d122      	bne.n	800960a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	699a      	ldr	r2, [r3, #24]
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	4013      	ands	r3, r2
 80095ce:	68ba      	ldr	r2, [r7, #8]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	bf0c      	ite	eq
 80095d4:	2301      	moveq	r3, #1
 80095d6:	2300      	movne	r3, #0
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	461a      	mov	r2, r3
 80095dc:	79fb      	ldrb	r3, [r7, #7]
 80095de:	429a      	cmp	r2, r3
 80095e0:	d113      	bne.n	800960a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095e6:	f043 0220 	orr.w	r2, r3, #32
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2220      	movs	r2, #32
 80095f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2200      	movs	r2, #0
 80095fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2200      	movs	r2, #0
 8009602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8009606:	2301      	movs	r3, #1
 8009608:	e00f      	b.n	800962a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	699a      	ldr	r2, [r3, #24]
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	4013      	ands	r3, r2
 8009614:	68ba      	ldr	r2, [r7, #8]
 8009616:	429a      	cmp	r2, r3
 8009618:	bf0c      	ite	eq
 800961a:	2301      	moveq	r3, #1
 800961c:	2300      	movne	r3, #0
 800961e:	b2db      	uxtb	r3, r3
 8009620:	461a      	mov	r2, r3
 8009622:	79fb      	ldrb	r3, [r7, #7]
 8009624:	429a      	cmp	r2, r3
 8009626:	d0b4      	beq.n	8009592 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009628:	2300      	movs	r3, #0
}
 800962a:	4618      	mov	r0, r3
 800962c:	3710      	adds	r7, #16
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009632:	b580      	push	{r7, lr}
 8009634:	b084      	sub	sp, #16
 8009636:	af00      	add	r7, sp, #0
 8009638:	60f8      	str	r0, [r7, #12]
 800963a:	60b9      	str	r1, [r7, #8]
 800963c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800963e:	e033      	b.n	80096a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	68b9      	ldr	r1, [r7, #8]
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f000 f87f 	bl	8009748 <I2C_IsErrorOccurred>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d001      	beq.n	8009654 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009650:	2301      	movs	r3, #1
 8009652:	e031      	b.n	80096b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800965a:	d025      	beq.n	80096a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800965c:	f7fb f8e6 	bl	800482c <HAL_GetTick>
 8009660:	4602      	mov	r2, r0
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	1ad3      	subs	r3, r2, r3
 8009666:	68ba      	ldr	r2, [r7, #8]
 8009668:	429a      	cmp	r2, r3
 800966a:	d302      	bcc.n	8009672 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d11a      	bne.n	80096a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	699b      	ldr	r3, [r3, #24]
 8009678:	f003 0302 	and.w	r3, r3, #2
 800967c:	2b02      	cmp	r3, #2
 800967e:	d013      	beq.n	80096a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009684:	f043 0220 	orr.w	r2, r3, #32
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2220      	movs	r2, #32
 8009690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2200      	movs	r2, #0
 8009698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2200      	movs	r2, #0
 80096a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	e007      	b.n	80096b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	699b      	ldr	r3, [r3, #24]
 80096ae:	f003 0302 	and.w	r3, r3, #2
 80096b2:	2b02      	cmp	r3, #2
 80096b4:	d1c4      	bne.n	8009640 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3710      	adds	r7, #16
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80096cc:	e02f      	b.n	800972e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	68b9      	ldr	r1, [r7, #8]
 80096d2:	68f8      	ldr	r0, [r7, #12]
 80096d4:	f000 f838 	bl	8009748 <I2C_IsErrorOccurred>
 80096d8:	4603      	mov	r3, r0
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d001      	beq.n	80096e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	e02d      	b.n	800973e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096e2:	f7fb f8a3 	bl	800482c <HAL_GetTick>
 80096e6:	4602      	mov	r2, r0
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	1ad3      	subs	r3, r2, r3
 80096ec:	68ba      	ldr	r2, [r7, #8]
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d302      	bcc.n	80096f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d11a      	bne.n	800972e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	699b      	ldr	r3, [r3, #24]
 80096fe:	f003 0320 	and.w	r3, r3, #32
 8009702:	2b20      	cmp	r3, #32
 8009704:	d013      	beq.n	800972e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800970a:	f043 0220 	orr.w	r2, r3, #32
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2220      	movs	r2, #32
 8009716:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2200      	movs	r2, #0
 800971e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2200      	movs	r2, #0
 8009726:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	e007      	b.n	800973e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	699b      	ldr	r3, [r3, #24]
 8009734:	f003 0320 	and.w	r3, r3, #32
 8009738:	2b20      	cmp	r3, #32
 800973a:	d1c8      	bne.n	80096ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800973c:	2300      	movs	r3, #0
}
 800973e:	4618      	mov	r0, r3
 8009740:	3710      	adds	r7, #16
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
	...

08009748 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b08a      	sub	sp, #40	@ 0x28
 800974c:	af00      	add	r7, sp, #0
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	60b9      	str	r1, [r7, #8]
 8009752:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009754:	2300      	movs	r3, #0
 8009756:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	699b      	ldr	r3, [r3, #24]
 8009760:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009762:	2300      	movs	r3, #0
 8009764:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	f003 0310 	and.w	r3, r3, #16
 8009770:	2b00      	cmp	r3, #0
 8009772:	d068      	beq.n	8009846 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2210      	movs	r2, #16
 800977a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800977c:	e049      	b.n	8009812 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009784:	d045      	beq.n	8009812 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009786:	f7fb f851 	bl	800482c <HAL_GetTick>
 800978a:	4602      	mov	r2, r0
 800978c:	69fb      	ldr	r3, [r7, #28]
 800978e:	1ad3      	subs	r3, r2, r3
 8009790:	68ba      	ldr	r2, [r7, #8]
 8009792:	429a      	cmp	r2, r3
 8009794:	d302      	bcc.n	800979c <I2C_IsErrorOccurred+0x54>
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d13a      	bne.n	8009812 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80097a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80097ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	699b      	ldr	r3, [r3, #24]
 80097b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80097ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097be:	d121      	bne.n	8009804 <I2C_IsErrorOccurred+0xbc>
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097c6:	d01d      	beq.n	8009804 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80097c8:	7cfb      	ldrb	r3, [r7, #19]
 80097ca:	2b20      	cmp	r3, #32
 80097cc:	d01a      	beq.n	8009804 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	685a      	ldr	r2, [r3, #4]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80097dc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80097de:	f7fb f825 	bl	800482c <HAL_GetTick>
 80097e2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80097e4:	e00e      	b.n	8009804 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80097e6:	f7fb f821 	bl	800482c <HAL_GetTick>
 80097ea:	4602      	mov	r2, r0
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	1ad3      	subs	r3, r2, r3
 80097f0:	2b19      	cmp	r3, #25
 80097f2:	d907      	bls.n	8009804 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80097f4:	6a3b      	ldr	r3, [r7, #32]
 80097f6:	f043 0320 	orr.w	r3, r3, #32
 80097fa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80097fc:	2301      	movs	r3, #1
 80097fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8009802:	e006      	b.n	8009812 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	699b      	ldr	r3, [r3, #24]
 800980a:	f003 0320 	and.w	r3, r3, #32
 800980e:	2b20      	cmp	r3, #32
 8009810:	d1e9      	bne.n	80097e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	699b      	ldr	r3, [r3, #24]
 8009818:	f003 0320 	and.w	r3, r3, #32
 800981c:	2b20      	cmp	r3, #32
 800981e:	d003      	beq.n	8009828 <I2C_IsErrorOccurred+0xe0>
 8009820:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009824:	2b00      	cmp	r3, #0
 8009826:	d0aa      	beq.n	800977e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009828:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800982c:	2b00      	cmp	r3, #0
 800982e:	d103      	bne.n	8009838 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2220      	movs	r2, #32
 8009836:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009838:	6a3b      	ldr	r3, [r7, #32]
 800983a:	f043 0304 	orr.w	r3, r3, #4
 800983e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009840:	2301      	movs	r3, #1
 8009842:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	699b      	ldr	r3, [r3, #24]
 800984c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00b      	beq.n	8009870 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009858:	6a3b      	ldr	r3, [r7, #32]
 800985a:	f043 0301 	orr.w	r3, r3, #1
 800985e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009868:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800986a:	2301      	movs	r3, #1
 800986c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009870:	69bb      	ldr	r3, [r7, #24]
 8009872:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00b      	beq.n	8009892 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800987a:	6a3b      	ldr	r3, [r7, #32]
 800987c:	f043 0308 	orr.w	r3, r3, #8
 8009880:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800988a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800988c:	2301      	movs	r3, #1
 800988e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009898:	2b00      	cmp	r3, #0
 800989a:	d00b      	beq.n	80098b4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800989c:	6a3b      	ldr	r3, [r7, #32]
 800989e:	f043 0302 	orr.w	r3, r3, #2
 80098a2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80098ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80098ae:	2301      	movs	r3, #1
 80098b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80098b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d01c      	beq.n	80098f6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	f7ff fe3b 	bl	8009538 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	6859      	ldr	r1, [r3, #4]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	4b0d      	ldr	r3, [pc, #52]	@ (8009904 <I2C_IsErrorOccurred+0x1bc>)
 80098ce:	400b      	ands	r3, r1
 80098d0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80098d6:	6a3b      	ldr	r3, [r7, #32]
 80098d8:	431a      	orrs	r2, r3
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2220      	movs	r2, #32
 80098e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2200      	movs	r2, #0
 80098ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2200      	movs	r2, #0
 80098f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80098f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3728      	adds	r7, #40	@ 0x28
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	fe00e800 	.word	0xfe00e800

08009908 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009908:	b480      	push	{r7}
 800990a:	b087      	sub	sp, #28
 800990c:	af00      	add	r7, sp, #0
 800990e:	60f8      	str	r0, [r7, #12]
 8009910:	607b      	str	r3, [r7, #4]
 8009912:	460b      	mov	r3, r1
 8009914:	817b      	strh	r3, [r7, #10]
 8009916:	4613      	mov	r3, r2
 8009918:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800991a:	897b      	ldrh	r3, [r7, #10]
 800991c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009920:	7a7b      	ldrb	r3, [r7, #9]
 8009922:	041b      	lsls	r3, r3, #16
 8009924:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009928:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800992e:	6a3b      	ldr	r3, [r7, #32]
 8009930:	4313      	orrs	r3, r2
 8009932:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009936:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	685a      	ldr	r2, [r3, #4]
 800993e:	6a3b      	ldr	r3, [r7, #32]
 8009940:	0d5b      	lsrs	r3, r3, #21
 8009942:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009946:	4b08      	ldr	r3, [pc, #32]	@ (8009968 <I2C_TransferConfig+0x60>)
 8009948:	430b      	orrs	r3, r1
 800994a:	43db      	mvns	r3, r3
 800994c:	ea02 0103 	and.w	r1, r2, r3
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	697a      	ldr	r2, [r7, #20]
 8009956:	430a      	orrs	r2, r1
 8009958:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800995a:	bf00      	nop
 800995c:	371c      	adds	r7, #28
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr
 8009966:	bf00      	nop
 8009968:	03ff63ff 	.word	0x03ff63ff

0800996c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800997c:	b2db      	uxtb	r3, r3
 800997e:	2b20      	cmp	r3, #32
 8009980:	d138      	bne.n	80099f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009988:	2b01      	cmp	r3, #1
 800998a:	d101      	bne.n	8009990 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800998c:	2302      	movs	r3, #2
 800998e:	e032      	b.n	80099f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2224      	movs	r2, #36	@ 0x24
 800999c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	681a      	ldr	r2, [r3, #0]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f022 0201 	bic.w	r2, r2, #1
 80099ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80099be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	6819      	ldr	r1, [r3, #0]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	683a      	ldr	r2, [r7, #0]
 80099cc:	430a      	orrs	r2, r1
 80099ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	681a      	ldr	r2, [r3, #0]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f042 0201 	orr.w	r2, r2, #1
 80099de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2220      	movs	r2, #32
 80099e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2200      	movs	r2, #0
 80099ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80099f0:	2300      	movs	r3, #0
 80099f2:	e000      	b.n	80099f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80099f4:	2302      	movs	r3, #2
  }
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	370c      	adds	r7, #12
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr

08009a02 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009a02:	b480      	push	{r7}
 8009a04:	b085      	sub	sp, #20
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
 8009a0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	2b20      	cmp	r3, #32
 8009a16:	d139      	bne.n	8009a8c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	d101      	bne.n	8009a26 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009a22:	2302      	movs	r3, #2
 8009a24:	e033      	b.n	8009a8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2201      	movs	r2, #1
 8009a2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2224      	movs	r2, #36	@ 0x24
 8009a32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f022 0201 	bic.w	r2, r2, #1
 8009a44:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009a54:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	021b      	lsls	r3, r3, #8
 8009a5a:	68fa      	ldr	r2, [r7, #12]
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	68fa      	ldr	r2, [r7, #12]
 8009a66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f042 0201 	orr.w	r2, r2, #1
 8009a76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2220      	movs	r2, #32
 8009a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	e000      	b.n	8009a8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009a8c:	2302      	movs	r3, #2
  }
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3714      	adds	r7, #20
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr
	...

08009a9c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d101      	bne.n	8009ab2 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e0bb      	b.n	8009c2a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8009ab8:	b2db      	uxtb	r3, r3
 8009aba:	2b05      	cmp	r3, #5
 8009abc:	d101      	bne.n	8009ac2 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e0b3      	b.n	8009c2a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	2b02      	cmp	r3, #2
 8009acc:	d101      	bne.n	8009ad2 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e0ab      	b.n	8009c2a <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009ad2:	4b58      	ldr	r3, [pc, #352]	@ (8009c34 <HAL_OPAMP_Init+0x198>)
 8009ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ad6:	4a57      	ldr	r2, [pc, #348]	@ (8009c34 <HAL_OPAMP_Init+0x198>)
 8009ad8:	f043 0301 	orr.w	r3, r3, #1
 8009adc:	6613      	str	r3, [r2, #96]	@ 0x60
 8009ade:	4b55      	ldr	r3, [pc, #340]	@ (8009c34 <HAL_OPAMP_Init+0x198>)
 8009ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ae2:	f003 0301 	and.w	r3, r3, #1
 8009ae6:	60bb      	str	r3, [r7, #8]
 8009ae8:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d103      	bne.n	8009afe <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f7fa f81c 	bl	8003b3c <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	2b40      	cmp	r3, #64	@ 0x40
 8009b0a:	d003      	beq.n	8009b14 <HAL_OPAMP_Init+0x78>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	2b60      	cmp	r3, #96	@ 0x60
 8009b12:	d133      	bne.n	8009b7c <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f023 0110 	bic.w	r1, r3, #16
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	430a      	orrs	r2, r1
 8009b28:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	4b41      	ldr	r3, [pc, #260]	@ (8009c38 <HAL_OPAMP_Init+0x19c>)
 8009b32:	4013      	ands	r3, r2
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	6851      	ldr	r1, [r2, #4]
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	6892      	ldr	r2, [r2, #8]
 8009b3c:	4311      	orrs	r1, r2
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	6912      	ldr	r2, [r2, #16]
 8009b42:	430a      	orrs	r2, r1
 8009b44:	6879      	ldr	r1, [r7, #4]
 8009b46:	7d09      	ldrb	r1, [r1, #20]
 8009b48:	2901      	cmp	r1, #1
 8009b4a:	d102      	bne.n	8009b52 <HAL_OPAMP_Init+0xb6>
 8009b4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009b50:	e000      	b.n	8009b54 <HAL_OPAMP_Init+0xb8>
 8009b52:	2100      	movs	r1, #0
 8009b54:	4311      	orrs	r1, r2
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009b5a:	4311      	orrs	r1, r2
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8009b60:	4311      	orrs	r1, r2
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009b66:	04d2      	lsls	r2, r2, #19
 8009b68:	4311      	orrs	r1, r2
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009b6e:	0612      	lsls	r2, r2, #24
 8009b70:	4311      	orrs	r1, r2
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	6812      	ldr	r2, [r2, #0]
 8009b76:	430b      	orrs	r3, r1
 8009b78:	6013      	str	r3, [r2, #0]
 8009b7a:	e035      	b.n	8009be8 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f023 0110 	bic.w	r1, r3, #16
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	430a      	orrs	r2, r1
 8009b90:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	4b27      	ldr	r3, [pc, #156]	@ (8009c38 <HAL_OPAMP_Init+0x19c>)
 8009b9a:	4013      	ands	r3, r2
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	6851      	ldr	r1, [r2, #4]
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	6892      	ldr	r2, [r2, #8]
 8009ba4:	4311      	orrs	r1, r2
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	68d2      	ldr	r2, [r2, #12]
 8009baa:	4311      	orrs	r1, r2
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	6912      	ldr	r2, [r2, #16]
 8009bb0:	430a      	orrs	r2, r1
 8009bb2:	6879      	ldr	r1, [r7, #4]
 8009bb4:	7d09      	ldrb	r1, [r1, #20]
 8009bb6:	2901      	cmp	r1, #1
 8009bb8:	d102      	bne.n	8009bc0 <HAL_OPAMP_Init+0x124>
 8009bba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009bbe:	e000      	b.n	8009bc2 <HAL_OPAMP_Init+0x126>
 8009bc0:	2100      	movs	r1, #0
 8009bc2:	4311      	orrs	r1, r2
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009bc8:	4311      	orrs	r1, r2
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8009bce:	4311      	orrs	r1, r2
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009bd4:	04d2      	lsls	r2, r2, #19
 8009bd6:	4311      	orrs	r1, r2
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009bdc:	0612      	lsls	r2, r2, #24
 8009bde:	4311      	orrs	r1, r2
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	6812      	ldr	r2, [r2, #0]
 8009be4:	430b      	orrs	r3, r1
 8009be6:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	699b      	ldr	r3, [r3, #24]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	db10      	blt.n	8009c14 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	699b      	ldr	r3, [r3, #24]
 8009bf8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	699a      	ldr	r2, [r3, #24]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	69db      	ldr	r3, [r3, #28]
 8009c04:	431a      	orrs	r2, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6a1b      	ldr	r3, [r3, #32]
 8009c0a:	431a      	orrs	r2, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	430a      	orrs	r2, r1
 8009c12:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d103      	bne.n	8009c28 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2201      	movs	r2, #1
 8009c24:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8009c28:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3710      	adds	r7, #16
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
 8009c32:	bf00      	nop
 8009c34:	40021000 	.word	0x40021000
 8009c38:	e0003e11 	.word	0xe0003e11

08009c3c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d101      	bne.n	8009c4e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e0c0      	b.n	8009dd0 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d106      	bne.n	8009c68 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f009 fc62 	bl	801352c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2203      	movs	r2, #3
 8009c6c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4618      	mov	r0, r3
 8009c76:	f005 ffe6 	bl	800fc46 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	73fb      	strb	r3, [r7, #15]
 8009c7e:	e03e      	b.n	8009cfe <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009c80:	7bfa      	ldrb	r2, [r7, #15]
 8009c82:	6879      	ldr	r1, [r7, #4]
 8009c84:	4613      	mov	r3, r2
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	4413      	add	r3, r2
 8009c8a:	00db      	lsls	r3, r3, #3
 8009c8c:	440b      	add	r3, r1
 8009c8e:	3311      	adds	r3, #17
 8009c90:	2201      	movs	r2, #1
 8009c92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009c94:	7bfa      	ldrb	r2, [r7, #15]
 8009c96:	6879      	ldr	r1, [r7, #4]
 8009c98:	4613      	mov	r3, r2
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	4413      	add	r3, r2
 8009c9e:	00db      	lsls	r3, r3, #3
 8009ca0:	440b      	add	r3, r1
 8009ca2:	3310      	adds	r3, #16
 8009ca4:	7bfa      	ldrb	r2, [r7, #15]
 8009ca6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009ca8:	7bfa      	ldrb	r2, [r7, #15]
 8009caa:	6879      	ldr	r1, [r7, #4]
 8009cac:	4613      	mov	r3, r2
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	4413      	add	r3, r2
 8009cb2:	00db      	lsls	r3, r3, #3
 8009cb4:	440b      	add	r3, r1
 8009cb6:	3313      	adds	r3, #19
 8009cb8:	2200      	movs	r2, #0
 8009cba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009cbc:	7bfa      	ldrb	r2, [r7, #15]
 8009cbe:	6879      	ldr	r1, [r7, #4]
 8009cc0:	4613      	mov	r3, r2
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	4413      	add	r3, r2
 8009cc6:	00db      	lsls	r3, r3, #3
 8009cc8:	440b      	add	r3, r1
 8009cca:	3320      	adds	r3, #32
 8009ccc:	2200      	movs	r2, #0
 8009cce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009cd0:	7bfa      	ldrb	r2, [r7, #15]
 8009cd2:	6879      	ldr	r1, [r7, #4]
 8009cd4:	4613      	mov	r3, r2
 8009cd6:	009b      	lsls	r3, r3, #2
 8009cd8:	4413      	add	r3, r2
 8009cda:	00db      	lsls	r3, r3, #3
 8009cdc:	440b      	add	r3, r1
 8009cde:	3324      	adds	r3, #36	@ 0x24
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009ce4:	7bfb      	ldrb	r3, [r7, #15]
 8009ce6:	6879      	ldr	r1, [r7, #4]
 8009ce8:	1c5a      	adds	r2, r3, #1
 8009cea:	4613      	mov	r3, r2
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	4413      	add	r3, r2
 8009cf0:	00db      	lsls	r3, r3, #3
 8009cf2:	440b      	add	r3, r1
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009cf8:	7bfb      	ldrb	r3, [r7, #15]
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	73fb      	strb	r3, [r7, #15]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	791b      	ldrb	r3, [r3, #4]
 8009d02:	7bfa      	ldrb	r2, [r7, #15]
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d3bb      	bcc.n	8009c80 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009d08:	2300      	movs	r3, #0
 8009d0a:	73fb      	strb	r3, [r7, #15]
 8009d0c:	e044      	b.n	8009d98 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009d0e:	7bfa      	ldrb	r2, [r7, #15]
 8009d10:	6879      	ldr	r1, [r7, #4]
 8009d12:	4613      	mov	r3, r2
 8009d14:	009b      	lsls	r3, r3, #2
 8009d16:	4413      	add	r3, r2
 8009d18:	00db      	lsls	r3, r3, #3
 8009d1a:	440b      	add	r3, r1
 8009d1c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8009d20:	2200      	movs	r2, #0
 8009d22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009d24:	7bfa      	ldrb	r2, [r7, #15]
 8009d26:	6879      	ldr	r1, [r7, #4]
 8009d28:	4613      	mov	r3, r2
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	4413      	add	r3, r2
 8009d2e:	00db      	lsls	r3, r3, #3
 8009d30:	440b      	add	r3, r1
 8009d32:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009d36:	7bfa      	ldrb	r2, [r7, #15]
 8009d38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009d3a:	7bfa      	ldrb	r2, [r7, #15]
 8009d3c:	6879      	ldr	r1, [r7, #4]
 8009d3e:	4613      	mov	r3, r2
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	4413      	add	r3, r2
 8009d44:	00db      	lsls	r3, r3, #3
 8009d46:	440b      	add	r3, r1
 8009d48:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009d50:	7bfa      	ldrb	r2, [r7, #15]
 8009d52:	6879      	ldr	r1, [r7, #4]
 8009d54:	4613      	mov	r3, r2
 8009d56:	009b      	lsls	r3, r3, #2
 8009d58:	4413      	add	r3, r2
 8009d5a:	00db      	lsls	r3, r3, #3
 8009d5c:	440b      	add	r3, r1
 8009d5e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8009d62:	2200      	movs	r2, #0
 8009d64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009d66:	7bfa      	ldrb	r2, [r7, #15]
 8009d68:	6879      	ldr	r1, [r7, #4]
 8009d6a:	4613      	mov	r3, r2
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	4413      	add	r3, r2
 8009d70:	00db      	lsls	r3, r3, #3
 8009d72:	440b      	add	r3, r1
 8009d74:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009d78:	2200      	movs	r2, #0
 8009d7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009d7c:	7bfa      	ldrb	r2, [r7, #15]
 8009d7e:	6879      	ldr	r1, [r7, #4]
 8009d80:	4613      	mov	r3, r2
 8009d82:	009b      	lsls	r3, r3, #2
 8009d84:	4413      	add	r3, r2
 8009d86:	00db      	lsls	r3, r3, #3
 8009d88:	440b      	add	r3, r1
 8009d8a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8009d8e:	2200      	movs	r2, #0
 8009d90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009d92:	7bfb      	ldrb	r3, [r7, #15]
 8009d94:	3301      	adds	r3, #1
 8009d96:	73fb      	strb	r3, [r7, #15]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	791b      	ldrb	r3, [r3, #4]
 8009d9c:	7bfa      	ldrb	r2, [r7, #15]
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d3b5      	bcc.n	8009d0e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6818      	ldr	r0, [r3, #0]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	3304      	adds	r3, #4
 8009daa:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009dae:	f005 ff65 	bl	800fc7c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2200      	movs	r2, #0
 8009db6:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2201      	movs	r2, #1
 8009dbc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	7a9b      	ldrb	r3, [r3, #10]
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d102      	bne.n	8009dce <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f001 fc0e 	bl	800b5ea <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8009dce:	2300      	movs	r3, #0
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3710      	adds	r7, #16
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b082      	sub	sp, #8
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d101      	bne.n	8009dee <HAL_PCD_Start+0x16>
 8009dea:	2302      	movs	r3, #2
 8009dec:	e012      	b.n	8009e14 <HAL_PCD_Start+0x3c>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2201      	movs	r2, #1
 8009df2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f005 ff0c 	bl	800fc18 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4618      	mov	r0, r3
 8009e06:	f007 fce9 	bl	80117dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8009e12:	2300      	movs	r3, #0
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3708      	adds	r7, #8
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b084      	sub	sp, #16
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f007 fcee 	bl	801180a <USB_ReadInterrupts>
 8009e2e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d003      	beq.n	8009e42 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 fb06 	bl	800a44c <PCD_EP_ISR_Handler>

    return;
 8009e40:	e110      	b.n	800a064 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d013      	beq.n	8009e74 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009e54:	b29a      	uxth	r2, r3
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009e5e:	b292      	uxth	r2, r2
 8009e60:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f009 fbf2 	bl	801364e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8009e6a:	2100      	movs	r1, #0
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 f8fc 	bl	800a06a <HAL_PCD_SetAddress>

    return;
 8009e72:	e0f7      	b.n	800a064 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d00c      	beq.n	8009e98 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009e86:	b29a      	uxth	r2, r3
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009e90:	b292      	uxth	r2, r2
 8009e92:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8009e96:	e0e5      	b.n	800a064 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00c      	beq.n	8009ebc <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009eaa:	b29a      	uxth	r2, r3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009eb4:	b292      	uxth	r2, r2
 8009eb6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8009eba:	e0d3      	b.n	800a064 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d034      	beq.n	8009f30 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009ece:	b29a      	uxth	r2, r3
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f022 0204 	bic.w	r2, r2, #4
 8009ed8:	b292      	uxth	r2, r2
 8009eda:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009ee6:	b29a      	uxth	r2, r3
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f022 0208 	bic.w	r2, r2, #8
 8009ef0:	b292      	uxth	r2, r2
 8009ef2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d107      	bne.n	8009f10 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009f08:	2100      	movs	r1, #0
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f009 fd92 	bl	8013a34 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f009 fbd5 	bl	80136c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009f1e:	b29a      	uxth	r2, r3
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009f28:	b292      	uxth	r2, r2
 8009f2a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8009f2e:	e099      	b.n	800a064 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d027      	beq.n	8009f8a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009f42:	b29a      	uxth	r2, r3
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f042 0208 	orr.w	r2, r2, #8
 8009f4c:	b292      	uxth	r2, r2
 8009f4e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009f5a:	b29a      	uxth	r2, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009f64:	b292      	uxth	r2, r2
 8009f66:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009f72:	b29a      	uxth	r2, r3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f042 0204 	orr.w	r2, r2, #4
 8009f7c:	b292      	uxth	r2, r2
 8009f7e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f009 fb82 	bl	801368c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8009f88:	e06c      	b.n	800a064 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d040      	beq.n	800a016 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009f9c:	b29a      	uxth	r2, r3
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009fa6:	b292      	uxth	r2, r2
 8009fa8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d12b      	bne.n	800a00e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009fbe:	b29a      	uxth	r2, r3
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f042 0204 	orr.w	r2, r2, #4
 8009fc8:	b292      	uxth	r2, r2
 8009fca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009fd6:	b29a      	uxth	r2, r3
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f042 0208 	orr.w	r2, r2, #8
 8009fe0:	b292      	uxth	r2, r2
 8009fe2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2201      	movs	r2, #1
 8009fea:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	089b      	lsrs	r3, r3, #2
 8009ffa:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a004:	2101      	movs	r1, #1
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f009 fd14 	bl	8013a34 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800a00c:	e02a      	b.n	800a064 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f009 fb3c 	bl	801368c <HAL_PCD_SuspendCallback>
    return;
 800a014:	e026      	b.n	800a064 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d00f      	beq.n	800a040 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a028:	b29a      	uxth	r2, r3
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800a032:	b292      	uxth	r2, r2
 800a034:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f009 fafa 	bl	8013632 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800a03e:	e011      	b.n	800a064 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a046:	2b00      	cmp	r3, #0
 800a048:	d00c      	beq.n	800a064 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a052:	b29a      	uxth	r2, r3
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a05c:	b292      	uxth	r2, r2
 800a05e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a062:	bf00      	nop
  }
}
 800a064:	3710      	adds	r7, #16
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}

0800a06a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a06a:	b580      	push	{r7, lr}
 800a06c:	b082      	sub	sp, #8
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
 800a072:	460b      	mov	r3, r1
 800a074:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	d101      	bne.n	800a084 <HAL_PCD_SetAddress+0x1a>
 800a080:	2302      	movs	r3, #2
 800a082:	e012      	b.n	800a0aa <HAL_PCD_SetAddress+0x40>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2201      	movs	r2, #1
 800a088:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	78fa      	ldrb	r2, [r7, #3]
 800a090:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	78fa      	ldrb	r2, [r7, #3]
 800a098:	4611      	mov	r1, r2
 800a09a:	4618      	mov	r0, r3
 800a09c:	f007 fb8a 	bl	80117b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a0a8:	2300      	movs	r3, #0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3708      	adds	r7, #8
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b084      	sub	sp, #16
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
 800a0ba:	4608      	mov	r0, r1
 800a0bc:	4611      	mov	r1, r2
 800a0be:	461a      	mov	r2, r3
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	70fb      	strb	r3, [r7, #3]
 800a0c4:	460b      	mov	r3, r1
 800a0c6:	803b      	strh	r3, [r7, #0]
 800a0c8:	4613      	mov	r3, r2
 800a0ca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a0d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	da0e      	bge.n	800a0f6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a0d8:	78fb      	ldrb	r3, [r7, #3]
 800a0da:	f003 0207 	and.w	r2, r3, #7
 800a0de:	4613      	mov	r3, r2
 800a0e0:	009b      	lsls	r3, r3, #2
 800a0e2:	4413      	add	r3, r2
 800a0e4:	00db      	lsls	r3, r3, #3
 800a0e6:	3310      	adds	r3, #16
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	4413      	add	r3, r2
 800a0ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	705a      	strb	r2, [r3, #1]
 800a0f4:	e00e      	b.n	800a114 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a0f6:	78fb      	ldrb	r3, [r7, #3]
 800a0f8:	f003 0207 	and.w	r2, r3, #7
 800a0fc:	4613      	mov	r3, r2
 800a0fe:	009b      	lsls	r3, r3, #2
 800a100:	4413      	add	r3, r2
 800a102:	00db      	lsls	r3, r3, #3
 800a104:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	4413      	add	r3, r2
 800a10c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2200      	movs	r2, #0
 800a112:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a114:	78fb      	ldrb	r3, [r7, #3]
 800a116:	f003 0307 	and.w	r3, r3, #7
 800a11a:	b2da      	uxtb	r2, r3
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800a120:	883b      	ldrh	r3, [r7, #0]
 800a122:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	78ba      	ldrb	r2, [r7, #2]
 800a12e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a130:	78bb      	ldrb	r3, [r7, #2]
 800a132:	2b02      	cmp	r3, #2
 800a134:	d102      	bne.n	800a13c <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2200      	movs	r2, #0
 800a13a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a142:	2b01      	cmp	r3, #1
 800a144:	d101      	bne.n	800a14a <HAL_PCD_EP_Open+0x98>
 800a146:	2302      	movs	r3, #2
 800a148:	e00e      	b.n	800a168 <HAL_PCD_EP_Open+0xb6>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2201      	movs	r2, #1
 800a14e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	68f9      	ldr	r1, [r7, #12]
 800a158:	4618      	mov	r0, r3
 800a15a:	f005 fdad 	bl	800fcb8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2200      	movs	r2, #0
 800a162:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800a166:	7afb      	ldrb	r3, [r7, #11]
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3710      	adds	r7, #16
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b084      	sub	sp, #16
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	460b      	mov	r3, r1
 800a17a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a17c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a180:	2b00      	cmp	r3, #0
 800a182:	da0e      	bge.n	800a1a2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a184:	78fb      	ldrb	r3, [r7, #3]
 800a186:	f003 0207 	and.w	r2, r3, #7
 800a18a:	4613      	mov	r3, r2
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	4413      	add	r3, r2
 800a190:	00db      	lsls	r3, r3, #3
 800a192:	3310      	adds	r3, #16
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	4413      	add	r3, r2
 800a198:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2201      	movs	r2, #1
 800a19e:	705a      	strb	r2, [r3, #1]
 800a1a0:	e00e      	b.n	800a1c0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a1a2:	78fb      	ldrb	r3, [r7, #3]
 800a1a4:	f003 0207 	and.w	r2, r3, #7
 800a1a8:	4613      	mov	r3, r2
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	4413      	add	r3, r2
 800a1ae:	00db      	lsls	r3, r3, #3
 800a1b0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	4413      	add	r3, r2
 800a1b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800a1c0:	78fb      	ldrb	r3, [r7, #3]
 800a1c2:	f003 0307 	and.w	r3, r3, #7
 800a1c6:	b2da      	uxtb	r2, r3
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d101      	bne.n	800a1da <HAL_PCD_EP_Close+0x6a>
 800a1d6:	2302      	movs	r3, #2
 800a1d8:	e00e      	b.n	800a1f8 <HAL_PCD_EP_Close+0x88>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	68f9      	ldr	r1, [r7, #12]
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f006 fa4d 	bl	8010688 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800a1f6:	2300      	movs	r3, #0
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3710      	adds	r7, #16
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b086      	sub	sp, #24
 800a204:	af00      	add	r7, sp, #0
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	607a      	str	r2, [r7, #4]
 800a20a:	603b      	str	r3, [r7, #0]
 800a20c:	460b      	mov	r3, r1
 800a20e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a210:	7afb      	ldrb	r3, [r7, #11]
 800a212:	f003 0207 	and.w	r2, r3, #7
 800a216:	4613      	mov	r3, r2
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	4413      	add	r3, r2
 800a21c:	00db      	lsls	r3, r3, #3
 800a21e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a222:	68fa      	ldr	r2, [r7, #12]
 800a224:	4413      	add	r3, r2
 800a226:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	683a      	ldr	r2, [r7, #0]
 800a232:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	2200      	movs	r2, #0
 800a238:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	2200      	movs	r2, #0
 800a23e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a240:	7afb      	ldrb	r3, [r7, #11]
 800a242:	f003 0307 	and.w	r3, r3, #7
 800a246:	b2da      	uxtb	r2, r3
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	6979      	ldr	r1, [r7, #20]
 800a252:	4618      	mov	r0, r3
 800a254:	f006 fc05 	bl	8010a62 <USB_EPStartXfer>

  return HAL_OK;
 800a258:	2300      	movs	r3, #0
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3718      	adds	r7, #24
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}

0800a262 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800a262:	b480      	push	{r7}
 800a264:	b083      	sub	sp, #12
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
 800a26a:	460b      	mov	r3, r1
 800a26c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a26e:	78fb      	ldrb	r3, [r7, #3]
 800a270:	f003 0207 	and.w	r2, r3, #7
 800a274:	6879      	ldr	r1, [r7, #4]
 800a276:	4613      	mov	r3, r2
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	4413      	add	r3, r2
 800a27c:	00db      	lsls	r3, r3, #3
 800a27e:	440b      	add	r3, r1
 800a280:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800a284:	681b      	ldr	r3, [r3, #0]
}
 800a286:	4618      	mov	r0, r3
 800a288:	370c      	adds	r7, #12
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr

0800a292 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a292:	b580      	push	{r7, lr}
 800a294:	b086      	sub	sp, #24
 800a296:	af00      	add	r7, sp, #0
 800a298:	60f8      	str	r0, [r7, #12]
 800a29a:	607a      	str	r2, [r7, #4]
 800a29c:	603b      	str	r3, [r7, #0]
 800a29e:	460b      	mov	r3, r1
 800a2a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a2a2:	7afb      	ldrb	r3, [r7, #11]
 800a2a4:	f003 0207 	and.w	r2, r3, #7
 800a2a8:	4613      	mov	r3, r2
 800a2aa:	009b      	lsls	r3, r3, #2
 800a2ac:	4413      	add	r3, r2
 800a2ae:	00db      	lsls	r3, r3, #3
 800a2b0:	3310      	adds	r3, #16
 800a2b2:	68fa      	ldr	r2, [r7, #12]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	687a      	ldr	r2, [r7, #4]
 800a2bc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	683a      	ldr	r2, [r7, #0]
 800a2c2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	683a      	ldr	r2, [r7, #0]
 800a2d0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a2de:	7afb      	ldrb	r3, [r7, #11]
 800a2e0:	f003 0307 	and.w	r3, r3, #7
 800a2e4:	b2da      	uxtb	r2, r3
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	6979      	ldr	r1, [r7, #20]
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f006 fbb6 	bl	8010a62 <USB_EPStartXfer>

  return HAL_OK;
 800a2f6:	2300      	movs	r3, #0
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3718      	adds	r7, #24
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	460b      	mov	r3, r1
 800a30a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a30c:	78fb      	ldrb	r3, [r7, #3]
 800a30e:	f003 0307 	and.w	r3, r3, #7
 800a312:	687a      	ldr	r2, [r7, #4]
 800a314:	7912      	ldrb	r2, [r2, #4]
 800a316:	4293      	cmp	r3, r2
 800a318:	d901      	bls.n	800a31e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a31a:	2301      	movs	r3, #1
 800a31c:	e03e      	b.n	800a39c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a31e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a322:	2b00      	cmp	r3, #0
 800a324:	da0e      	bge.n	800a344 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a326:	78fb      	ldrb	r3, [r7, #3]
 800a328:	f003 0207 	and.w	r2, r3, #7
 800a32c:	4613      	mov	r3, r2
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	4413      	add	r3, r2
 800a332:	00db      	lsls	r3, r3, #3
 800a334:	3310      	adds	r3, #16
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	4413      	add	r3, r2
 800a33a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2201      	movs	r2, #1
 800a340:	705a      	strb	r2, [r3, #1]
 800a342:	e00c      	b.n	800a35e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a344:	78fa      	ldrb	r2, [r7, #3]
 800a346:	4613      	mov	r3, r2
 800a348:	009b      	lsls	r3, r3, #2
 800a34a:	4413      	add	r3, r2
 800a34c:	00db      	lsls	r3, r3, #3
 800a34e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	4413      	add	r3, r2
 800a356:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2200      	movs	r2, #0
 800a35c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2201      	movs	r2, #1
 800a362:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a364:	78fb      	ldrb	r3, [r7, #3]
 800a366:	f003 0307 	and.w	r3, r3, #7
 800a36a:	b2da      	uxtb	r2, r3
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a376:	2b01      	cmp	r3, #1
 800a378:	d101      	bne.n	800a37e <HAL_PCD_EP_SetStall+0x7e>
 800a37a:	2302      	movs	r3, #2
 800a37c:	e00e      	b.n	800a39c <HAL_PCD_EP_SetStall+0x9c>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2201      	movs	r2, #1
 800a382:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	68f9      	ldr	r1, [r7, #12]
 800a38c:	4618      	mov	r0, r3
 800a38e:	f007 f917 	bl	80115c0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a39a:	2300      	movs	r3, #0
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3710      	adds	r7, #16
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b084      	sub	sp, #16
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a3b0:	78fb      	ldrb	r3, [r7, #3]
 800a3b2:	f003 030f 	and.w	r3, r3, #15
 800a3b6:	687a      	ldr	r2, [r7, #4]
 800a3b8:	7912      	ldrb	r2, [r2, #4]
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d901      	bls.n	800a3c2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e040      	b.n	800a444 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a3c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	da0e      	bge.n	800a3e8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a3ca:	78fb      	ldrb	r3, [r7, #3]
 800a3cc:	f003 0207 	and.w	r2, r3, #7
 800a3d0:	4613      	mov	r3, r2
 800a3d2:	009b      	lsls	r3, r3, #2
 800a3d4:	4413      	add	r3, r2
 800a3d6:	00db      	lsls	r3, r3, #3
 800a3d8:	3310      	adds	r3, #16
 800a3da:	687a      	ldr	r2, [r7, #4]
 800a3dc:	4413      	add	r3, r2
 800a3de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	705a      	strb	r2, [r3, #1]
 800a3e6:	e00e      	b.n	800a406 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a3e8:	78fb      	ldrb	r3, [r7, #3]
 800a3ea:	f003 0207 	and.w	r2, r3, #7
 800a3ee:	4613      	mov	r3, r2
 800a3f0:	009b      	lsls	r3, r3, #2
 800a3f2:	4413      	add	r3, r2
 800a3f4:	00db      	lsls	r3, r3, #3
 800a3f6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a3fa:	687a      	ldr	r2, [r7, #4]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2200      	movs	r2, #0
 800a404:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2200      	movs	r2, #0
 800a40a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a40c:	78fb      	ldrb	r3, [r7, #3]
 800a40e:	f003 0307 	and.w	r3, r3, #7
 800a412:	b2da      	uxtb	r2, r3
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d101      	bne.n	800a426 <HAL_PCD_EP_ClrStall+0x82>
 800a422:	2302      	movs	r3, #2
 800a424:	e00e      	b.n	800a444 <HAL_PCD_EP_ClrStall+0xa0>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2201      	movs	r2, #1
 800a42a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	68f9      	ldr	r1, [r7, #12]
 800a434:	4618      	mov	r0, r3
 800a436:	f007 f914 	bl	8011662 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2200      	movs	r2, #0
 800a43e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a442:	2300      	movs	r3, #0
}
 800a444:	4618      	mov	r0, r3
 800a446:	3710      	adds	r7, #16
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b092      	sub	sp, #72	@ 0x48
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a454:	e333      	b.n	800aabe <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a45e:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800a460:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a462:	b2db      	uxtb	r3, r3
 800a464:	f003 030f 	and.w	r3, r3, #15
 800a468:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800a46c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a470:	2b00      	cmp	r3, #0
 800a472:	f040 8108 	bne.w	800a686 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800a476:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a478:	f003 0310 	and.w	r3, r3, #16
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d14c      	bne.n	800a51a <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	881b      	ldrh	r3, [r3, #0]
 800a486:	b29b      	uxth	r3, r3
 800a488:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800a48c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a490:	813b      	strh	r3, [r7, #8]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	893b      	ldrh	r3, [r7, #8]
 800a498:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a49c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	3310      	adds	r3, #16
 800a4a8:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	00db      	lsls	r3, r3, #3
 800a4bc:	4413      	add	r3, r2
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	6812      	ldr	r2, [r2, #0]
 800a4c2:	4413      	add	r3, r2
 800a4c4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a4c8:	881b      	ldrh	r3, [r3, #0]
 800a4ca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a4ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4d0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800a4d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4d4:	695a      	ldr	r2, [r3, #20]
 800a4d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4d8:	69db      	ldr	r3, [r3, #28]
 800a4da:	441a      	add	r2, r3
 800a4dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4de:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800a4e0:	2100      	movs	r1, #0
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f009 f88b 	bl	80135fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	7b1b      	ldrb	r3, [r3, #12]
 800a4ec:	b2db      	uxtb	r3, r3
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	f000 82e5 	beq.w	800aabe <PCD_EP_ISR_Handler+0x672>
 800a4f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4f6:	699b      	ldr	r3, [r3, #24]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	f040 82e0 	bne.w	800aabe <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	7b1b      	ldrb	r3, [r3, #12]
 800a502:	b2db      	uxtb	r3, r3
 800a504:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a508:	b2da      	uxtb	r2, r3
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2200      	movs	r2, #0
 800a516:	731a      	strb	r2, [r3, #12]
 800a518:	e2d1      	b.n	800aabe <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a520:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	881b      	ldrh	r3, [r3, #0]
 800a528:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800a52a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a52c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a530:	2b00      	cmp	r3, #0
 800a532:	d032      	beq.n	800a59a <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	461a      	mov	r2, r3
 800a540:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a542:	781b      	ldrb	r3, [r3, #0]
 800a544:	00db      	lsls	r3, r3, #3
 800a546:	4413      	add	r3, r2
 800a548:	687a      	ldr	r2, [r7, #4]
 800a54a:	6812      	ldr	r2, [r2, #0]
 800a54c:	4413      	add	r3, r2
 800a54e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a552:	881b      	ldrh	r3, [r3, #0]
 800a554:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a558:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a55a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6818      	ldr	r0, [r3, #0]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800a566:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a568:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800a56a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a56c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a56e:	b29b      	uxth	r3, r3
 800a570:	f007 f99d 	bl	80118ae <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	881b      	ldrh	r3, [r3, #0]
 800a57a:	b29a      	uxth	r2, r3
 800a57c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800a580:	4013      	ands	r3, r2
 800a582:	817b      	strh	r3, [r7, #10]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	897a      	ldrh	r2, [r7, #10]
 800a58a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a58e:	b292      	uxth	r2, r2
 800a590:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f009 f806 	bl	80135a4 <HAL_PCD_SetupStageCallback>
 800a598:	e291      	b.n	800aabe <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a59a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	f280 828d 	bge.w	800aabe <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	881b      	ldrh	r3, [r3, #0]
 800a5aa:	b29a      	uxth	r2, r3
 800a5ac:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800a5b0:	4013      	ands	r3, r2
 800a5b2:	81fb      	strh	r3, [r7, #14]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	89fa      	ldrh	r2, [r7, #14]
 800a5ba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a5be:	b292      	uxth	r2, r2
 800a5c0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	00db      	lsls	r3, r3, #3
 800a5d4:	4413      	add	r3, r2
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	6812      	ldr	r2, [r2, #0]
 800a5da:	4413      	add	r3, r2
 800a5dc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a5e0:	881b      	ldrh	r3, [r3, #0]
 800a5e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a5e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5e8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800a5ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5ec:	69db      	ldr	r3, [r3, #28]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d019      	beq.n	800a626 <PCD_EP_ISR_Handler+0x1da>
 800a5f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5f4:	695b      	ldr	r3, [r3, #20]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d015      	beq.n	800a626 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6818      	ldr	r0, [r3, #0]
 800a5fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a600:	6959      	ldr	r1, [r3, #20]
 800a602:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a604:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800a606:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a608:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	f007 f94f 	bl	80118ae <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800a610:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a612:	695a      	ldr	r2, [r3, #20]
 800a614:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a616:	69db      	ldr	r3, [r3, #28]
 800a618:	441a      	add	r2, r3
 800a61a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a61c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800a61e:	2100      	movs	r1, #0
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f008 ffd1 	bl	80135c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	881b      	ldrh	r3, [r3, #0]
 800a62c:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800a62e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a630:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a634:	2b00      	cmp	r3, #0
 800a636:	f040 8242 	bne.w	800aabe <PCD_EP_ISR_Handler+0x672>
 800a63a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a63c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a640:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a644:	f000 823b 	beq.w	800aabe <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	881b      	ldrh	r3, [r3, #0]
 800a64e:	b29b      	uxth	r3, r3
 800a650:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a654:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a658:	81bb      	strh	r3, [r7, #12]
 800a65a:	89bb      	ldrh	r3, [r7, #12]
 800a65c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a660:	81bb      	strh	r3, [r7, #12]
 800a662:	89bb      	ldrh	r3, [r7, #12]
 800a664:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a668:	81bb      	strh	r3, [r7, #12]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681a      	ldr	r2, [r3, #0]
 800a66e:	89bb      	ldrh	r3, [r7, #12]
 800a670:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a674:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a678:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a67c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a680:	b29b      	uxth	r3, r3
 800a682:	8013      	strh	r3, [r2, #0]
 800a684:	e21b      	b.n	800aabe <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	461a      	mov	r2, r3
 800a68c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	4413      	add	r3, r2
 800a694:	881b      	ldrh	r3, [r3, #0]
 800a696:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a698:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	f280 80f1 	bge.w	800a884 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	4413      	add	r3, r2
 800a6b0:	881b      	ldrh	r3, [r3, #0]
 800a6b2:	b29a      	uxth	r2, r3
 800a6b4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800a6b8:	4013      	ands	r3, r2
 800a6ba:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	4413      	add	r3, r2
 800a6ca:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800a6cc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a6d0:	b292      	uxth	r2, r2
 800a6d2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800a6d4:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800a6d8:	4613      	mov	r3, r2
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	4413      	add	r3, r2
 800a6de:	00db      	lsls	r3, r3, #3
 800a6e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800a6ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6ec:	7b1b      	ldrb	r3, [r3, #12]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d123      	bne.n	800a73a <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a700:	781b      	ldrb	r3, [r3, #0]
 800a702:	00db      	lsls	r3, r3, #3
 800a704:	4413      	add	r3, r2
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	6812      	ldr	r2, [r2, #0]
 800a70a:	4413      	add	r3, r2
 800a70c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a710:	881b      	ldrh	r3, [r3, #0]
 800a712:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a716:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 800a71a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a71e:	2b00      	cmp	r3, #0
 800a720:	f000 808b 	beq.w	800a83a <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6818      	ldr	r0, [r3, #0]
 800a728:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a72a:	6959      	ldr	r1, [r3, #20]
 800a72c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a72e:	88da      	ldrh	r2, [r3, #6]
 800a730:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a734:	f007 f8bb 	bl	80118ae <USB_ReadPMA>
 800a738:	e07f      	b.n	800a83a <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800a73a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a73c:	78db      	ldrb	r3, [r3, #3]
 800a73e:	2b02      	cmp	r3, #2
 800a740:	d109      	bne.n	800a756 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800a742:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a744:	461a      	mov	r2, r3
 800a746:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f000 f9c6 	bl	800aada <HAL_PCD_EP_DB_Receive>
 800a74e:	4603      	mov	r3, r0
 800a750:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a754:	e071      	b.n	800a83a <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	461a      	mov	r2, r3
 800a75c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	009b      	lsls	r3, r3, #2
 800a762:	4413      	add	r3, r2
 800a764:	881b      	ldrh	r3, [r3, #0]
 800a766:	b29b      	uxth	r3, r3
 800a768:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a76c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a770:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	461a      	mov	r2, r3
 800a778:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a77a:	781b      	ldrb	r3, [r3, #0]
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	441a      	add	r2, r3
 800a780:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a782:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a786:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a78a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a78e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a792:	b29b      	uxth	r3, r3
 800a794:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	461a      	mov	r2, r3
 800a79c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	009b      	lsls	r3, r3, #2
 800a7a2:	4413      	add	r3, r2
 800a7a4:	881b      	ldrh	r3, [r3, #0]
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d022      	beq.n	800a7f6 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7be:	781b      	ldrb	r3, [r3, #0]
 800a7c0:	00db      	lsls	r3, r3, #3
 800a7c2:	4413      	add	r3, r2
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	6812      	ldr	r2, [r2, #0]
 800a7c8:	4413      	add	r3, r2
 800a7ca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a7ce:	881b      	ldrh	r3, [r3, #0]
 800a7d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a7d4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800a7d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d02c      	beq.n	800a83a <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6818      	ldr	r0, [r3, #0]
 800a7e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7e6:	6959      	ldr	r1, [r3, #20]
 800a7e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7ea:	891a      	ldrh	r2, [r3, #8]
 800a7ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a7f0:	f007 f85d 	bl	80118ae <USB_ReadPMA>
 800a7f4:	e021      	b.n	800a83a <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7fe:	b29b      	uxth	r3, r3
 800a800:	461a      	mov	r2, r3
 800a802:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	00db      	lsls	r3, r3, #3
 800a808:	4413      	add	r3, r2
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	6812      	ldr	r2, [r2, #0]
 800a80e:	4413      	add	r3, r2
 800a810:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a814:	881b      	ldrh	r3, [r3, #0]
 800a816:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a81a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800a81e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a822:	2b00      	cmp	r3, #0
 800a824:	d009      	beq.n	800a83a <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6818      	ldr	r0, [r3, #0]
 800a82a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a82c:	6959      	ldr	r1, [r3, #20]
 800a82e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a830:	895a      	ldrh	r2, [r3, #10]
 800a832:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a836:	f007 f83a 	bl	80118ae <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800a83a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a83c:	69da      	ldr	r2, [r3, #28]
 800a83e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a842:	441a      	add	r2, r3
 800a844:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a846:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800a848:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a84a:	695a      	ldr	r2, [r3, #20]
 800a84c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a850:	441a      	add	r2, r3
 800a852:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a854:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800a856:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a858:	699b      	ldr	r3, [r3, #24]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d005      	beq.n	800a86a <PCD_EP_ISR_Handler+0x41e>
 800a85e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800a862:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a864:	691b      	ldr	r3, [r3, #16]
 800a866:	429a      	cmp	r2, r3
 800a868:	d206      	bcs.n	800a878 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800a86a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	4619      	mov	r1, r3
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f008 fea9 	bl	80135c8 <HAL_PCD_DataOutStageCallback>
 800a876:	e005      	b.n	800a884 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a87e:	4618      	mov	r0, r3
 800a880:	f006 f8ef 	bl	8010a62 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800a884:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	f000 8117 	beq.w	800aabe <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800a890:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800a894:	4613      	mov	r3, r2
 800a896:	009b      	lsls	r3, r3, #2
 800a898:	4413      	add	r3, r2
 800a89a:	00db      	lsls	r3, r3, #3
 800a89c:	3310      	adds	r3, #16
 800a89e:	687a      	ldr	r2, [r7, #4]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a8ae:	009b      	lsls	r3, r3, #2
 800a8b0:	4413      	add	r3, r2
 800a8b2:	881b      	ldrh	r3, [r3, #0]
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800a8ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8be:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a8ca:	009b      	lsls	r3, r3, #2
 800a8cc:	441a      	add	r2, r3
 800a8ce:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a8d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800a8dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8de:	78db      	ldrb	r3, [r3, #3]
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	f040 80a1 	bne.w	800aa28 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800a8e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800a8ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8ee:	7b1b      	ldrb	r3, [r3, #12]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	f000 8092 	beq.w	800aa1a <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a8f6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a8f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d046      	beq.n	800a98e <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a900:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a902:	785b      	ldrb	r3, [r3, #1]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d126      	bne.n	800a956 <PCD_EP_ISR_Handler+0x50a>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	617b      	str	r3, [r7, #20]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a916:	b29b      	uxth	r3, r3
 800a918:	461a      	mov	r2, r3
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	4413      	add	r3, r2
 800a91e:	617b      	str	r3, [r7, #20]
 800a920:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	00da      	lsls	r2, r3, #3
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	4413      	add	r3, r2
 800a92a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a92e:	613b      	str	r3, [r7, #16]
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	881b      	ldrh	r3, [r3, #0]
 800a934:	b29b      	uxth	r3, r3
 800a936:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a93a:	b29a      	uxth	r2, r3
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	801a      	strh	r2, [r3, #0]
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	881b      	ldrh	r3, [r3, #0]
 800a944:	b29b      	uxth	r3, r3
 800a946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a94a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a94e:	b29a      	uxth	r2, r3
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	801a      	strh	r2, [r3, #0]
 800a954:	e061      	b.n	800aa1a <PCD_EP_ISR_Handler+0x5ce>
 800a956:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a958:	785b      	ldrb	r3, [r3, #1]
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d15d      	bne.n	800aa1a <PCD_EP_ISR_Handler+0x5ce>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	61fb      	str	r3, [r7, #28]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	461a      	mov	r2, r3
 800a970:	69fb      	ldr	r3, [r7, #28]
 800a972:	4413      	add	r3, r2
 800a974:	61fb      	str	r3, [r7, #28]
 800a976:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	00da      	lsls	r2, r3, #3
 800a97c:	69fb      	ldr	r3, [r7, #28]
 800a97e:	4413      	add	r3, r2
 800a980:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a984:	61bb      	str	r3, [r7, #24]
 800a986:	69bb      	ldr	r3, [r7, #24]
 800a988:	2200      	movs	r2, #0
 800a98a:	801a      	strh	r2, [r3, #0]
 800a98c:	e045      	b.n	800aa1a <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a994:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a996:	785b      	ldrb	r3, [r3, #1]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d126      	bne.n	800a9ea <PCD_EP_ISR_Handler+0x59e>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b0:	4413      	add	r3, r2
 800a9b2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	00da      	lsls	r2, r3, #3
 800a9ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9bc:	4413      	add	r3, r2
 800a9be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a9c2:	623b      	str	r3, [r7, #32]
 800a9c4:	6a3b      	ldr	r3, [r7, #32]
 800a9c6:	881b      	ldrh	r3, [r3, #0]
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a9ce:	b29a      	uxth	r2, r3
 800a9d0:	6a3b      	ldr	r3, [r7, #32]
 800a9d2:	801a      	strh	r2, [r3, #0]
 800a9d4:	6a3b      	ldr	r3, [r7, #32]
 800a9d6:	881b      	ldrh	r3, [r3, #0]
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9e2:	b29a      	uxth	r2, r3
 800a9e4:	6a3b      	ldr	r3, [r7, #32]
 800a9e6:	801a      	strh	r2, [r3, #0]
 800a9e8:	e017      	b.n	800aa1a <PCD_EP_ISR_Handler+0x5ce>
 800a9ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9ec:	785b      	ldrb	r3, [r3, #1]
 800a9ee:	2b01      	cmp	r3, #1
 800a9f0:	d113      	bne.n	800aa1a <PCD_EP_ISR_Handler+0x5ce>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa00:	4413      	add	r3, r2
 800aa02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	00da      	lsls	r2, r3, #3
 800aa0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa0c:	4413      	add	r3, r2
 800aa0e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aa12:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aa14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa16:	2200      	movs	r2, #0
 800aa18:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800aa1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	4619      	mov	r1, r3
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f008 fdec 	bl	80135fe <HAL_PCD_DataInStageCallback>
 800aa26:	e04a      	b.n	800aabe <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800aa28:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aa2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d13f      	bne.n	800aab2 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	00db      	lsls	r3, r3, #3
 800aa44:	4413      	add	r3, r2
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	6812      	ldr	r2, [r2, #0]
 800aa4a:	4413      	add	r3, r2
 800aa4c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aa50:	881b      	ldrh	r3, [r3, #0]
 800aa52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa56:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 800aa58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa5a:	699a      	ldr	r2, [r3, #24]
 800aa5c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d906      	bls.n	800aa70 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800aa62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa64:	699a      	ldr	r2, [r3, #24]
 800aa66:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800aa68:	1ad2      	subs	r2, r2, r3
 800aa6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa6c:	619a      	str	r2, [r3, #24]
 800aa6e:	e002      	b.n	800aa76 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800aa70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa72:	2200      	movs	r2, #0
 800aa74:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800aa76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa78:	699b      	ldr	r3, [r3, #24]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d106      	bne.n	800aa8c <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800aa7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	4619      	mov	r1, r3
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f008 fdba 	bl	80135fe <HAL_PCD_DataInStageCallback>
 800aa8a:	e018      	b.n	800aabe <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800aa8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa8e:	695a      	ldr	r2, [r3, #20]
 800aa90:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800aa92:	441a      	add	r2, r3
 800aa94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa96:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800aa98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa9a:	69da      	ldr	r2, [r3, #28]
 800aa9c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800aa9e:	441a      	add	r2, r3
 800aaa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aaa2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f005 ffd9 	bl	8010a62 <USB_EPStartXfer>
 800aab0:	e005      	b.n	800aabe <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800aab2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aab4:	461a      	mov	r2, r3
 800aab6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 f917 	bl	800acec <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	b21b      	sxth	r3, r3
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	f6ff acc3 	blt.w	800a456 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800aad0:	2300      	movs	r3, #0
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3748      	adds	r7, #72	@ 0x48
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}

0800aada <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800aada:	b580      	push	{r7, lr}
 800aadc:	b088      	sub	sp, #32
 800aade:	af00      	add	r7, sp, #0
 800aae0:	60f8      	str	r0, [r7, #12]
 800aae2:	60b9      	str	r1, [r7, #8]
 800aae4:	4613      	mov	r3, r2
 800aae6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800aae8:	88fb      	ldrh	r3, [r7, #6]
 800aaea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d07c      	beq.n	800abec <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	461a      	mov	r2, r3
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	00db      	lsls	r3, r3, #3
 800ab04:	4413      	add	r3, r2
 800ab06:	68fa      	ldr	r2, [r7, #12]
 800ab08:	6812      	ldr	r2, [r2, #0]
 800ab0a:	4413      	add	r3, r2
 800ab0c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ab10:	881b      	ldrh	r3, [r3, #0]
 800ab12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab16:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	699a      	ldr	r2, [r3, #24]
 800ab1c:	8b7b      	ldrh	r3, [r7, #26]
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d306      	bcc.n	800ab30 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	699a      	ldr	r2, [r3, #24]
 800ab26:	8b7b      	ldrh	r3, [r7, #26]
 800ab28:	1ad2      	subs	r2, r2, r3
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	619a      	str	r2, [r3, #24]
 800ab2e:	e002      	b.n	800ab36 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	2200      	movs	r2, #0
 800ab34:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	699b      	ldr	r3, [r3, #24]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d123      	bne.n	800ab86 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	461a      	mov	r2, r3
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	4413      	add	r3, r2
 800ab4c:	881b      	ldrh	r3, [r3, #0]
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ab54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab58:	833b      	strh	r3, [r7, #24]
 800ab5a:	8b3b      	ldrh	r3, [r7, #24]
 800ab5c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ab60:	833b      	strh	r3, [r7, #24]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	461a      	mov	r2, r3
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	009b      	lsls	r3, r3, #2
 800ab6e:	441a      	add	r2, r3
 800ab70:	8b3b      	ldrh	r3, [r7, #24]
 800ab72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab82:	b29b      	uxth	r3, r3
 800ab84:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ab86:	88fb      	ldrh	r3, [r7, #6]
 800ab88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d01f      	beq.n	800abd0 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	461a      	mov	r2, r3
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	781b      	ldrb	r3, [r3, #0]
 800ab9a:	009b      	lsls	r3, r3, #2
 800ab9c:	4413      	add	r3, r2
 800ab9e:	881b      	ldrh	r3, [r3, #0]
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abaa:	82fb      	strh	r3, [r7, #22]
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	461a      	mov	r2, r3
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	781b      	ldrb	r3, [r3, #0]
 800abb6:	009b      	lsls	r3, r3, #2
 800abb8:	441a      	add	r2, r3
 800abba:	8afb      	ldrh	r3, [r7, #22]
 800abbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800abc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800abc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800abc8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800abcc:	b29b      	uxth	r3, r3
 800abce:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800abd0:	8b7b      	ldrh	r3, [r7, #26]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	f000 8085 	beq.w	800ace2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	6818      	ldr	r0, [r3, #0]
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	6959      	ldr	r1, [r3, #20]
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	891a      	ldrh	r2, [r3, #8]
 800abe4:	8b7b      	ldrh	r3, [r7, #26]
 800abe6:	f006 fe62 	bl	80118ae <USB_ReadPMA>
 800abea:	e07a      	b.n	800ace2 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	461a      	mov	r2, r3
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	00db      	lsls	r3, r3, #3
 800abfe:	4413      	add	r3, r2
 800ac00:	68fa      	ldr	r2, [r7, #12]
 800ac02:	6812      	ldr	r2, [r2, #0]
 800ac04:	4413      	add	r3, r2
 800ac06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ac0a:	881b      	ldrh	r3, [r3, #0]
 800ac0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac10:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	699a      	ldr	r2, [r3, #24]
 800ac16:	8b7b      	ldrh	r3, [r7, #26]
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d306      	bcc.n	800ac2a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	699a      	ldr	r2, [r3, #24]
 800ac20:	8b7b      	ldrh	r3, [r7, #26]
 800ac22:	1ad2      	subs	r2, r2, r3
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	619a      	str	r2, [r3, #24]
 800ac28:	e002      	b.n	800ac30 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	699b      	ldr	r3, [r3, #24]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d123      	bne.n	800ac80 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	461a      	mov	r2, r3
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	009b      	lsls	r3, r3, #2
 800ac44:	4413      	add	r3, r2
 800ac46:	881b      	ldrh	r3, [r3, #0]
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ac4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac52:	83fb      	strh	r3, [r7, #30]
 800ac54:	8bfb      	ldrh	r3, [r7, #30]
 800ac56:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ac5a:	83fb      	strh	r3, [r7, #30]
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	461a      	mov	r2, r3
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	009b      	lsls	r3, r3, #2
 800ac68:	441a      	add	r2, r3
 800ac6a:	8bfb      	ldrh	r3, [r7, #30]
 800ac6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800ac80:	88fb      	ldrh	r3, [r7, #6]
 800ac82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d11f      	bne.n	800acca <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	461a      	mov	r2, r3
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	4413      	add	r3, r2
 800ac98:	881b      	ldrh	r3, [r3, #0]
 800ac9a:	b29b      	uxth	r3, r3
 800ac9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aca0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aca4:	83bb      	strh	r3, [r7, #28]
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	461a      	mov	r2, r3
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	441a      	add	r2, r3
 800acb4:	8bbb      	ldrh	r3, [r7, #28]
 800acb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800acba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800acbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800acc2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800acca:	8b7b      	ldrh	r3, [r7, #26]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d008      	beq.n	800ace2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	6818      	ldr	r0, [r3, #0]
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	6959      	ldr	r1, [r3, #20]
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	895a      	ldrh	r2, [r3, #10]
 800acdc:	8b7b      	ldrh	r3, [r7, #26]
 800acde:	f006 fde6 	bl	80118ae <USB_ReadPMA>
    }
  }

  return count;
 800ace2:	8b7b      	ldrh	r3, [r7, #26]
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3720      	adds	r7, #32
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b0a6      	sub	sp, #152	@ 0x98
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	60b9      	str	r1, [r7, #8]
 800acf6:	4613      	mov	r3, r2
 800acf8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800acfa:	88fb      	ldrh	r3, [r7, #6]
 800acfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	f000 81f7 	beq.w	800b0f4 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad0e:	b29b      	uxth	r3, r3
 800ad10:	461a      	mov	r2, r3
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	781b      	ldrb	r3, [r3, #0]
 800ad16:	00db      	lsls	r3, r3, #3
 800ad18:	4413      	add	r3, r2
 800ad1a:	68fa      	ldr	r2, [r7, #12]
 800ad1c:	6812      	ldr	r2, [r2, #0]
 800ad1e:	4413      	add	r3, r2
 800ad20:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ad24:	881b      	ldrh	r3, [r3, #0]
 800ad26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad2a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	699a      	ldr	r2, [r3, #24]
 800ad32:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ad36:	429a      	cmp	r2, r3
 800ad38:	d907      	bls.n	800ad4a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	699a      	ldr	r2, [r3, #24]
 800ad3e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ad42:	1ad2      	subs	r2, r2, r3
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	619a      	str	r2, [r3, #24]
 800ad48:	e002      	b.n	800ad50 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	699b      	ldr	r3, [r3, #24]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	f040 80e1 	bne.w	800af1c <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	785b      	ldrb	r3, [r3, #1]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d126      	bne.n	800adb0 <HAL_PCD_EP_DB_Transmit+0xc4>
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad70:	b29b      	uxth	r3, r3
 800ad72:	461a      	mov	r2, r3
 800ad74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad76:	4413      	add	r3, r2
 800ad78:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	00da      	lsls	r2, r3, #3
 800ad80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad82:	4413      	add	r3, r2
 800ad84:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ad88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ad8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad8c:	881b      	ldrh	r3, [r3, #0]
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad94:	b29a      	uxth	r2, r3
 800ad96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad98:	801a      	strh	r2, [r3, #0]
 800ad9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad9c:	881b      	ldrh	r3, [r3, #0]
 800ad9e:	b29b      	uxth	r3, r3
 800ada0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ada4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ada8:	b29a      	uxth	r2, r3
 800adaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adac:	801a      	strh	r2, [r3, #0]
 800adae:	e01a      	b.n	800ade6 <HAL_PCD_EP_DB_Transmit+0xfa>
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	785b      	ldrb	r3, [r3, #1]
 800adb4:	2b01      	cmp	r3, #1
 800adb6:	d116      	bne.n	800ade6 <HAL_PCD_EP_DB_Transmit+0xfa>
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	461a      	mov	r2, r3
 800adca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adcc:	4413      	add	r3, r2
 800adce:	63bb      	str	r3, [r7, #56]	@ 0x38
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	781b      	ldrb	r3, [r3, #0]
 800add4:	00da      	lsls	r2, r3, #3
 800add6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800add8:	4413      	add	r3, r2
 800adda:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800adde:	637b      	str	r3, [r7, #52]	@ 0x34
 800ade0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ade2:	2200      	movs	r2, #0
 800ade4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	785b      	ldrb	r3, [r3, #1]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d126      	bne.n	800ae42 <HAL_PCD_EP_DB_Transmit+0x156>
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	623b      	str	r3, [r7, #32]
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae02:	b29b      	uxth	r3, r3
 800ae04:	461a      	mov	r2, r3
 800ae06:	6a3b      	ldr	r3, [r7, #32]
 800ae08:	4413      	add	r3, r2
 800ae0a:	623b      	str	r3, [r7, #32]
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	00da      	lsls	r2, r3, #3
 800ae12:	6a3b      	ldr	r3, [r7, #32]
 800ae14:	4413      	add	r3, r2
 800ae16:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ae1a:	61fb      	str	r3, [r7, #28]
 800ae1c:	69fb      	ldr	r3, [r7, #28]
 800ae1e:	881b      	ldrh	r3, [r3, #0]
 800ae20:	b29b      	uxth	r3, r3
 800ae22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae26:	b29a      	uxth	r2, r3
 800ae28:	69fb      	ldr	r3, [r7, #28]
 800ae2a:	801a      	strh	r2, [r3, #0]
 800ae2c:	69fb      	ldr	r3, [r7, #28]
 800ae2e:	881b      	ldrh	r3, [r3, #0]
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae3a:	b29a      	uxth	r2, r3
 800ae3c:	69fb      	ldr	r3, [r7, #28]
 800ae3e:	801a      	strh	r2, [r3, #0]
 800ae40:	e017      	b.n	800ae72 <HAL_PCD_EP_DB_Transmit+0x186>
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	785b      	ldrb	r3, [r3, #1]
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	d113      	bne.n	800ae72 <HAL_PCD_EP_DB_Transmit+0x186>
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	461a      	mov	r2, r3
 800ae56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae58:	4413      	add	r3, r2
 800ae5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	00da      	lsls	r2, r3, #3
 800ae62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae64:	4413      	add	r3, r2
 800ae66:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ae6a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae6e:	2200      	movs	r2, #0
 800ae70:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	78db      	ldrb	r3, [r3, #3]
 800ae76:	2b02      	cmp	r3, #2
 800ae78:	d123      	bne.n	800aec2 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	461a      	mov	r2, r3
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	781b      	ldrb	r3, [r3, #0]
 800ae84:	009b      	lsls	r3, r3, #2
 800ae86:	4413      	add	r3, r2
 800ae88:	881b      	ldrh	r3, [r3, #0]
 800ae8a:	b29b      	uxth	r3, r3
 800ae8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae94:	837b      	strh	r3, [r7, #26]
 800ae96:	8b7b      	ldrh	r3, [r7, #26]
 800ae98:	f083 0320 	eor.w	r3, r3, #32
 800ae9c:	837b      	strh	r3, [r7, #26]
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	461a      	mov	r2, r3
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	781b      	ldrb	r3, [r3, #0]
 800aea8:	009b      	lsls	r3, r3, #2
 800aeaa:	441a      	add	r2, r3
 800aeac:	8b7b      	ldrh	r3, [r7, #26]
 800aeae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aeb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aeb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aeba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	4619      	mov	r1, r3
 800aec8:	68f8      	ldr	r0, [r7, #12]
 800aeca:	f008 fb98 	bl	80135fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800aece:	88fb      	ldrh	r3, [r7, #6]
 800aed0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d01f      	beq.n	800af18 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	461a      	mov	r2, r3
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	4413      	add	r3, r2
 800aee6:	881b      	ldrh	r3, [r3, #0]
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aeee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aef2:	833b      	strh	r3, [r7, #24]
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	461a      	mov	r2, r3
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	009b      	lsls	r3, r3, #2
 800af00:	441a      	add	r2, r3
 800af02:	8b3b      	ldrh	r3, [r7, #24]
 800af04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800af10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af14:	b29b      	uxth	r3, r3
 800af16:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800af18:	2300      	movs	r3, #0
 800af1a:	e31f      	b.n	800b55c <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800af1c:	88fb      	ldrh	r3, [r7, #6]
 800af1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800af22:	2b00      	cmp	r3, #0
 800af24:	d021      	beq.n	800af6a <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	461a      	mov	r2, r3
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	781b      	ldrb	r3, [r3, #0]
 800af30:	009b      	lsls	r3, r3, #2
 800af32:	4413      	add	r3, r2
 800af34:	881b      	ldrh	r3, [r3, #0]
 800af36:	b29b      	uxth	r3, r3
 800af38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af40:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	461a      	mov	r2, r3
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	441a      	add	r2, r3
 800af52:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800af56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af5e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800af62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af66:	b29b      	uxth	r3, r3
 800af68:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800af70:	2b01      	cmp	r3, #1
 800af72:	f040 82ca 	bne.w	800b50a <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	695a      	ldr	r2, [r3, #20]
 800af7a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800af7e:	441a      	add	r2, r3
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	69da      	ldr	r2, [r3, #28]
 800af88:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800af8c:	441a      	add	r2, r3
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	6a1a      	ldr	r2, [r3, #32]
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	691b      	ldr	r3, [r3, #16]
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d309      	bcc.n	800afb2 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	691b      	ldr	r3, [r3, #16]
 800afa2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	6a1a      	ldr	r2, [r3, #32]
 800afa8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800afaa:	1ad2      	subs	r2, r2, r3
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	621a      	str	r2, [r3, #32]
 800afb0:	e015      	b.n	800afde <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	6a1b      	ldr	r3, [r3, #32]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d107      	bne.n	800afca <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 800afba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800afbe:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	2200      	movs	r2, #0
 800afc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800afc8:	e009      	b.n	800afde <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	2200      	movs	r2, #0
 800afce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	6a1b      	ldr	r3, [r3, #32]
 800afd6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	2200      	movs	r2, #0
 800afdc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	785b      	ldrb	r3, [r3, #1]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d15f      	bne.n	800b0a6 <HAL_PCD_EP_DB_Transmit+0x3ba>
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	643b      	str	r3, [r7, #64]	@ 0x40
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	461a      	mov	r2, r3
 800aff8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800affa:	4413      	add	r3, r2
 800affc:	643b      	str	r3, [r7, #64]	@ 0x40
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	781b      	ldrb	r3, [r3, #0]
 800b002:	00da      	lsls	r2, r3, #3
 800b004:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b006:	4413      	add	r3, r2
 800b008:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b00c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b00e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b010:	881b      	ldrh	r3, [r3, #0]
 800b012:	b29b      	uxth	r3, r3
 800b014:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b018:	b29a      	uxth	r2, r3
 800b01a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b01c:	801a      	strh	r2, [r3, #0]
 800b01e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b020:	2b00      	cmp	r3, #0
 800b022:	d10a      	bne.n	800b03a <HAL_PCD_EP_DB_Transmit+0x34e>
 800b024:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b026:	881b      	ldrh	r3, [r3, #0]
 800b028:	b29b      	uxth	r3, r3
 800b02a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b02e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b032:	b29a      	uxth	r2, r3
 800b034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b036:	801a      	strh	r2, [r3, #0]
 800b038:	e051      	b.n	800b0de <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b03a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b03c:	2b3e      	cmp	r3, #62	@ 0x3e
 800b03e:	d816      	bhi.n	800b06e <HAL_PCD_EP_DB_Transmit+0x382>
 800b040:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b042:	085b      	lsrs	r3, r3, #1
 800b044:	653b      	str	r3, [r7, #80]	@ 0x50
 800b046:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b048:	f003 0301 	and.w	r3, r3, #1
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d002      	beq.n	800b056 <HAL_PCD_EP_DB_Transmit+0x36a>
 800b050:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b052:	3301      	adds	r3, #1
 800b054:	653b      	str	r3, [r7, #80]	@ 0x50
 800b056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b058:	881b      	ldrh	r3, [r3, #0]
 800b05a:	b29a      	uxth	r2, r3
 800b05c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b05e:	b29b      	uxth	r3, r3
 800b060:	029b      	lsls	r3, r3, #10
 800b062:	b29b      	uxth	r3, r3
 800b064:	4313      	orrs	r3, r2
 800b066:	b29a      	uxth	r2, r3
 800b068:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b06a:	801a      	strh	r2, [r3, #0]
 800b06c:	e037      	b.n	800b0de <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b06e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b070:	095b      	lsrs	r3, r3, #5
 800b072:	653b      	str	r3, [r7, #80]	@ 0x50
 800b074:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b076:	f003 031f 	and.w	r3, r3, #31
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d102      	bne.n	800b084 <HAL_PCD_EP_DB_Transmit+0x398>
 800b07e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b080:	3b01      	subs	r3, #1
 800b082:	653b      	str	r3, [r7, #80]	@ 0x50
 800b084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b086:	881b      	ldrh	r3, [r3, #0]
 800b088:	b29a      	uxth	r2, r3
 800b08a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b08c:	b29b      	uxth	r3, r3
 800b08e:	029b      	lsls	r3, r3, #10
 800b090:	b29b      	uxth	r3, r3
 800b092:	4313      	orrs	r3, r2
 800b094:	b29b      	uxth	r3, r3
 800b096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b09a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b09e:	b29a      	uxth	r2, r3
 800b0a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0a2:	801a      	strh	r2, [r3, #0]
 800b0a4:	e01b      	b.n	800b0de <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	785b      	ldrb	r3, [r3, #1]
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d117      	bne.n	800b0de <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b0bc:	b29b      	uxth	r3, r3
 800b0be:	461a      	mov	r2, r3
 800b0c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0c2:	4413      	add	r3, r2
 800b0c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	781b      	ldrb	r3, [r3, #0]
 800b0ca:	00da      	lsls	r2, r3, #3
 800b0cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0ce:	4413      	add	r3, r2
 800b0d0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b0d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b0d8:	b29a      	uxth	r2, r3
 800b0da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b0dc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	6818      	ldr	r0, [r3, #0]
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	6959      	ldr	r1, [r3, #20]
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	891a      	ldrh	r2, [r3, #8]
 800b0ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b0ec:	b29b      	uxth	r3, r3
 800b0ee:	f006 fb9c 	bl	801182a <USB_WritePMA>
 800b0f2:	e20a      	b.n	800b50a <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	461a      	mov	r2, r3
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	00db      	lsls	r3, r3, #3
 800b106:	4413      	add	r3, r2
 800b108:	68fa      	ldr	r2, [r7, #12]
 800b10a:	6812      	ldr	r2, [r2, #0]
 800b10c:	4413      	add	r3, r2
 800b10e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b112:	881b      	ldrh	r3, [r3, #0]
 800b114:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b118:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	699a      	ldr	r2, [r3, #24]
 800b120:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b124:	429a      	cmp	r2, r3
 800b126:	d307      	bcc.n	800b138 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	699a      	ldr	r2, [r3, #24]
 800b12c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b130:	1ad2      	subs	r2, r2, r3
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	619a      	str	r2, [r3, #24]
 800b136:	e002      	b.n	800b13e <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	2200      	movs	r2, #0
 800b13c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	699b      	ldr	r3, [r3, #24]
 800b142:	2b00      	cmp	r3, #0
 800b144:	f040 80f6 	bne.w	800b334 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	785b      	ldrb	r3, [r3, #1]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d126      	bne.n	800b19e <HAL_PCD_EP_DB_Transmit+0x4b2>
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	677b      	str	r3, [r7, #116]	@ 0x74
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b15e:	b29b      	uxth	r3, r3
 800b160:	461a      	mov	r2, r3
 800b162:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b164:	4413      	add	r3, r2
 800b166:	677b      	str	r3, [r7, #116]	@ 0x74
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	00da      	lsls	r2, r3, #3
 800b16e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b170:	4413      	add	r3, r2
 800b172:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b176:	673b      	str	r3, [r7, #112]	@ 0x70
 800b178:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b17a:	881b      	ldrh	r3, [r3, #0]
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b182:	b29a      	uxth	r2, r3
 800b184:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b186:	801a      	strh	r2, [r3, #0]
 800b188:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b18a:	881b      	ldrh	r3, [r3, #0]
 800b18c:	b29b      	uxth	r3, r3
 800b18e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b192:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b196:	b29a      	uxth	r2, r3
 800b198:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b19a:	801a      	strh	r2, [r3, #0]
 800b19c:	e01a      	b.n	800b1d4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	785b      	ldrb	r3, [r3, #1]
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d116      	bne.n	800b1d4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b1b4:	b29b      	uxth	r3, r3
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b1ba:	4413      	add	r3, r2
 800b1bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	00da      	lsls	r2, r3, #3
 800b1c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b1c6:	4413      	add	r3, r2
 800b1c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b1cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b1ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	785b      	ldrb	r3, [r3, #1]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d12f      	bne.n	800b244 <HAL_PCD_EP_DB_Transmit+0x558>
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	461a      	mov	r2, r3
 800b1f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b1fc:	4413      	add	r3, r2
 800b1fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	781b      	ldrb	r3, [r3, #0]
 800b206:	00da      	lsls	r2, r3, #3
 800b208:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b20c:	4413      	add	r3, r2
 800b20e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b212:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b216:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b21a:	881b      	ldrh	r3, [r3, #0]
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b222:	b29a      	uxth	r2, r3
 800b224:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b228:	801a      	strh	r2, [r3, #0]
 800b22a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b22e:	881b      	ldrh	r3, [r3, #0]
 800b230:	b29b      	uxth	r3, r3
 800b232:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b236:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b23a:	b29a      	uxth	r2, r3
 800b23c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b240:	801a      	strh	r2, [r3, #0]
 800b242:	e01c      	b.n	800b27e <HAL_PCD_EP_DB_Transmit+0x592>
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	785b      	ldrb	r3, [r3, #1]
 800b248:	2b01      	cmp	r3, #1
 800b24a:	d118      	bne.n	800b27e <HAL_PCD_EP_DB_Transmit+0x592>
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b254:	b29b      	uxth	r3, r3
 800b256:	461a      	mov	r2, r3
 800b258:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b25c:	4413      	add	r3, r2
 800b25e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	781b      	ldrb	r3, [r3, #0]
 800b266:	00da      	lsls	r2, r3, #3
 800b268:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b26c:	4413      	add	r3, r2
 800b26e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b272:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b276:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b27a:	2200      	movs	r2, #0
 800b27c:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	78db      	ldrb	r3, [r3, #3]
 800b282:	2b02      	cmp	r3, #2
 800b284:	d127      	bne.n	800b2d6 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	461a      	mov	r2, r3
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	009b      	lsls	r3, r3, #2
 800b292:	4413      	add	r3, r2
 800b294:	881b      	ldrh	r3, [r3, #0]
 800b296:	b29b      	uxth	r3, r3
 800b298:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b29c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b2a0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b2a4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b2a8:	f083 0320 	eor.w	r3, r3, #32
 800b2ac:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	781b      	ldrb	r3, [r3, #0]
 800b2ba:	009b      	lsls	r3, r3, #2
 800b2bc:	441a      	add	r2, r3
 800b2be:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b2c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b2c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b2ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b2ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	4619      	mov	r1, r3
 800b2dc:	68f8      	ldr	r0, [r7, #12]
 800b2de:	f008 f98e 	bl	80135fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b2e2:	88fb      	ldrh	r3, [r7, #6]
 800b2e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d121      	bne.n	800b330 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	009b      	lsls	r3, r3, #2
 800b2f8:	4413      	add	r3, r2
 800b2fa:	881b      	ldrh	r3, [r3, #0]
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b306:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	461a      	mov	r2, r3
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	009b      	lsls	r3, r3, #2
 800b316:	441a      	add	r2, r3
 800b318:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b31c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b320:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b324:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b328:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b32c:	b29b      	uxth	r3, r3
 800b32e:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800b330:	2300      	movs	r3, #0
 800b332:	e113      	b.n	800b55c <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b334:	88fb      	ldrh	r3, [r7, #6]
 800b336:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d121      	bne.n	800b382 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	461a      	mov	r2, r3
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	009b      	lsls	r3, r3, #2
 800b34a:	4413      	add	r3, r2
 800b34c:	881b      	ldrh	r3, [r3, #0]
 800b34e:	b29b      	uxth	r3, r3
 800b350:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b354:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b358:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	461a      	mov	r2, r3
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	009b      	lsls	r3, r3, #2
 800b368:	441a      	add	r2, r3
 800b36a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800b36e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b372:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b376:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b37a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b37e:	b29b      	uxth	r3, r3
 800b380:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b388:	2b01      	cmp	r3, #1
 800b38a:	f040 80be 	bne.w	800b50a <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	695a      	ldr	r2, [r3, #20]
 800b392:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b396:	441a      	add	r2, r3
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	69da      	ldr	r2, [r3, #28]
 800b3a0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b3a4:	441a      	add	r2, r3
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	6a1a      	ldr	r2, [r3, #32]
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	691b      	ldr	r3, [r3, #16]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d309      	bcc.n	800b3ca <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	691b      	ldr	r3, [r3, #16]
 800b3ba:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	6a1a      	ldr	r2, [r3, #32]
 800b3c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b3c2:	1ad2      	subs	r2, r2, r3
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	621a      	str	r2, [r3, #32]
 800b3c8:	e015      	b.n	800b3f6 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	6a1b      	ldr	r3, [r3, #32]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d107      	bne.n	800b3e2 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800b3d2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b3d6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800b3e0:	e009      	b.n	800b3f6 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	6a1b      	ldr	r3, [r3, #32]
 800b3e6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	785b      	ldrb	r3, [r3, #1]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d15f      	bne.n	800b4c4 <HAL_PCD_EP_DB_Transmit+0x7d8>
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b412:	b29b      	uxth	r3, r3
 800b414:	461a      	mov	r2, r3
 800b416:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b418:	4413      	add	r3, r2
 800b41a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	781b      	ldrb	r3, [r3, #0]
 800b420:	00da      	lsls	r2, r3, #3
 800b422:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b424:	4413      	add	r3, r2
 800b426:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b42a:	667b      	str	r3, [r7, #100]	@ 0x64
 800b42c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b42e:	881b      	ldrh	r3, [r3, #0]
 800b430:	b29b      	uxth	r3, r3
 800b432:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b436:	b29a      	uxth	r2, r3
 800b438:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b43a:	801a      	strh	r2, [r3, #0]
 800b43c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d10a      	bne.n	800b458 <HAL_PCD_EP_DB_Transmit+0x76c>
 800b442:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b444:	881b      	ldrh	r3, [r3, #0]
 800b446:	b29b      	uxth	r3, r3
 800b448:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b44c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b450:	b29a      	uxth	r2, r3
 800b452:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b454:	801a      	strh	r2, [r3, #0]
 800b456:	e04e      	b.n	800b4f6 <HAL_PCD_EP_DB_Transmit+0x80a>
 800b458:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b45a:	2b3e      	cmp	r3, #62	@ 0x3e
 800b45c:	d816      	bhi.n	800b48c <HAL_PCD_EP_DB_Transmit+0x7a0>
 800b45e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b460:	085b      	lsrs	r3, r3, #1
 800b462:	663b      	str	r3, [r7, #96]	@ 0x60
 800b464:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b466:	f003 0301 	and.w	r3, r3, #1
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d002      	beq.n	800b474 <HAL_PCD_EP_DB_Transmit+0x788>
 800b46e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b470:	3301      	adds	r3, #1
 800b472:	663b      	str	r3, [r7, #96]	@ 0x60
 800b474:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b476:	881b      	ldrh	r3, [r3, #0]
 800b478:	b29a      	uxth	r2, r3
 800b47a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b47c:	b29b      	uxth	r3, r3
 800b47e:	029b      	lsls	r3, r3, #10
 800b480:	b29b      	uxth	r3, r3
 800b482:	4313      	orrs	r3, r2
 800b484:	b29a      	uxth	r2, r3
 800b486:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b488:	801a      	strh	r2, [r3, #0]
 800b48a:	e034      	b.n	800b4f6 <HAL_PCD_EP_DB_Transmit+0x80a>
 800b48c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b48e:	095b      	lsrs	r3, r3, #5
 800b490:	663b      	str	r3, [r7, #96]	@ 0x60
 800b492:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b494:	f003 031f 	and.w	r3, r3, #31
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d102      	bne.n	800b4a2 <HAL_PCD_EP_DB_Transmit+0x7b6>
 800b49c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b49e:	3b01      	subs	r3, #1
 800b4a0:	663b      	str	r3, [r7, #96]	@ 0x60
 800b4a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b4a4:	881b      	ldrh	r3, [r3, #0]
 800b4a6:	b29a      	uxth	r2, r3
 800b4a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	029b      	lsls	r3, r3, #10
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	4313      	orrs	r3, r2
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4bc:	b29a      	uxth	r2, r3
 800b4be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b4c0:	801a      	strh	r2, [r3, #0]
 800b4c2:	e018      	b.n	800b4f6 <HAL_PCD_EP_DB_Transmit+0x80a>
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	785b      	ldrb	r3, [r3, #1]
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d114      	bne.n	800b4f6 <HAL_PCD_EP_DB_Transmit+0x80a>
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b4da:	4413      	add	r3, r2
 800b4dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	00da      	lsls	r2, r3, #3
 800b4e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b4e6:	4413      	add	r3, r2
 800b4e8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b4ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b4ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b4f0:	b29a      	uxth	r2, r3
 800b4f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4f4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	6818      	ldr	r0, [r3, #0]
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	6959      	ldr	r1, [r3, #20]
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	895a      	ldrh	r2, [r3, #10]
 800b502:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b504:	b29b      	uxth	r3, r3
 800b506:	f006 f990 	bl	801182a <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	461a      	mov	r2, r3
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	009b      	lsls	r3, r3, #2
 800b516:	4413      	add	r3, r2
 800b518:	881b      	ldrh	r3, [r3, #0]
 800b51a:	b29b      	uxth	r3, r3
 800b51c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b520:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b524:	82fb      	strh	r3, [r7, #22]
 800b526:	8afb      	ldrh	r3, [r7, #22]
 800b528:	f083 0310 	eor.w	r3, r3, #16
 800b52c:	82fb      	strh	r3, [r7, #22]
 800b52e:	8afb      	ldrh	r3, [r7, #22]
 800b530:	f083 0320 	eor.w	r3, r3, #32
 800b534:	82fb      	strh	r3, [r7, #22]
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	461a      	mov	r2, r3
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	441a      	add	r2, r3
 800b544:	8afb      	ldrh	r3, [r7, #22]
 800b546:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b54a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b54e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b552:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b556:	b29b      	uxth	r3, r3
 800b558:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800b55a:	2300      	movs	r3, #0
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3798      	adds	r7, #152	@ 0x98
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800b564:	b480      	push	{r7}
 800b566:	b087      	sub	sp, #28
 800b568:	af00      	add	r7, sp, #0
 800b56a:	60f8      	str	r0, [r7, #12]
 800b56c:	607b      	str	r3, [r7, #4]
 800b56e:	460b      	mov	r3, r1
 800b570:	817b      	strh	r3, [r7, #10]
 800b572:	4613      	mov	r3, r2
 800b574:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800b576:	897b      	ldrh	r3, [r7, #10]
 800b578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b57c:	b29b      	uxth	r3, r3
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d00b      	beq.n	800b59a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b582:	897b      	ldrh	r3, [r7, #10]
 800b584:	f003 0207 	and.w	r2, r3, #7
 800b588:	4613      	mov	r3, r2
 800b58a:	009b      	lsls	r3, r3, #2
 800b58c:	4413      	add	r3, r2
 800b58e:	00db      	lsls	r3, r3, #3
 800b590:	3310      	adds	r3, #16
 800b592:	68fa      	ldr	r2, [r7, #12]
 800b594:	4413      	add	r3, r2
 800b596:	617b      	str	r3, [r7, #20]
 800b598:	e009      	b.n	800b5ae <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b59a:	897a      	ldrh	r2, [r7, #10]
 800b59c:	4613      	mov	r3, r2
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	4413      	add	r3, r2
 800b5a2:	00db      	lsls	r3, r3, #3
 800b5a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b5a8:	68fa      	ldr	r2, [r7, #12]
 800b5aa:	4413      	add	r3, r2
 800b5ac:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800b5ae:	893b      	ldrh	r3, [r7, #8]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d107      	bne.n	800b5c4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	b29a      	uxth	r2, r3
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	80da      	strh	r2, [r3, #6]
 800b5c2:	e00b      	b.n	800b5dc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	2201      	movs	r2, #1
 800b5c8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	b29a      	uxth	r2, r3
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	0c1b      	lsrs	r3, r3, #16
 800b5d6:	b29a      	uxth	r2, r3
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b5dc:	2300      	movs	r3, #0
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	371c      	adds	r7, #28
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr

0800b5ea <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b5ea:	b480      	push	{r7}
 800b5ec:	b085      	sub	sp, #20
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2200      	movs	r2, #0
 800b604:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800b60e:	b29b      	uxth	r3, r3
 800b610:	f043 0301 	orr.w	r3, r3, #1
 800b614:	b29a      	uxth	r2, r3
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800b622:	b29b      	uxth	r3, r3
 800b624:	f043 0302 	orr.w	r3, r3, #2
 800b628:	b29a      	uxth	r2, r3
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800b630:	2300      	movs	r3, #0
}
 800b632:	4618      	mov	r0, r3
 800b634:	3714      	adds	r7, #20
 800b636:	46bd      	mov	sp, r7
 800b638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63c:	4770      	bx	lr
	...

0800b640 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b640:	b480      	push	{r7}
 800b642:	b085      	sub	sp, #20
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d141      	bne.n	800b6d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b64e:	4b4b      	ldr	r3, [pc, #300]	@ (800b77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b656:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b65a:	d131      	bne.n	800b6c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b65c:	4b47      	ldr	r3, [pc, #284]	@ (800b77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b65e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b662:	4a46      	ldr	r2, [pc, #280]	@ (800b77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b664:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b668:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b66c:	4b43      	ldr	r3, [pc, #268]	@ (800b77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b674:	4a41      	ldr	r2, [pc, #260]	@ (800b77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b676:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b67a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b67c:	4b40      	ldr	r3, [pc, #256]	@ (800b780 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	2232      	movs	r2, #50	@ 0x32
 800b682:	fb02 f303 	mul.w	r3, r2, r3
 800b686:	4a3f      	ldr	r2, [pc, #252]	@ (800b784 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b688:	fba2 2303 	umull	r2, r3, r2, r3
 800b68c:	0c9b      	lsrs	r3, r3, #18
 800b68e:	3301      	adds	r3, #1
 800b690:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b692:	e002      	b.n	800b69a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	3b01      	subs	r3, #1
 800b698:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b69a:	4b38      	ldr	r3, [pc, #224]	@ (800b77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b69c:	695b      	ldr	r3, [r3, #20]
 800b69e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b6a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b6a6:	d102      	bne.n	800b6ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d1f2      	bne.n	800b694 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b6ae:	4b33      	ldr	r3, [pc, #204]	@ (800b77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b6b0:	695b      	ldr	r3, [r3, #20]
 800b6b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b6b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b6ba:	d158      	bne.n	800b76e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b6bc:	2303      	movs	r3, #3
 800b6be:	e057      	b.n	800b770 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b6c0:	4b2e      	ldr	r3, [pc, #184]	@ (800b77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b6c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6c6:	4a2d      	ldr	r2, [pc, #180]	@ (800b77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b6c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b6cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800b6d0:	e04d      	b.n	800b76e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6d8:	d141      	bne.n	800b75e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b6da:	4b28      	ldr	r3, [pc, #160]	@ (800b77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b6e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b6e6:	d131      	bne.n	800b74c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b6e8:	4b24      	ldr	r3, [pc, #144]	@ (800b77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b6ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6ee:	4a23      	ldr	r2, [pc, #140]	@ (800b77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b6f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b6f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b6f8:	4b20      	ldr	r3, [pc, #128]	@ (800b77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b700:	4a1e      	ldr	r2, [pc, #120]	@ (800b77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b702:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b706:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b708:	4b1d      	ldr	r3, [pc, #116]	@ (800b780 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	2232      	movs	r2, #50	@ 0x32
 800b70e:	fb02 f303 	mul.w	r3, r2, r3
 800b712:	4a1c      	ldr	r2, [pc, #112]	@ (800b784 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b714:	fba2 2303 	umull	r2, r3, r2, r3
 800b718:	0c9b      	lsrs	r3, r3, #18
 800b71a:	3301      	adds	r3, #1
 800b71c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b71e:	e002      	b.n	800b726 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	3b01      	subs	r3, #1
 800b724:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b726:	4b15      	ldr	r3, [pc, #84]	@ (800b77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b728:	695b      	ldr	r3, [r3, #20]
 800b72a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b72e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b732:	d102      	bne.n	800b73a <HAL_PWREx_ControlVoltageScaling+0xfa>
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d1f2      	bne.n	800b720 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b73a:	4b10      	ldr	r3, [pc, #64]	@ (800b77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b73c:	695b      	ldr	r3, [r3, #20]
 800b73e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b742:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b746:	d112      	bne.n	800b76e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b748:	2303      	movs	r3, #3
 800b74a:	e011      	b.n	800b770 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b74c:	4b0b      	ldr	r3, [pc, #44]	@ (800b77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b74e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b752:	4a0a      	ldr	r2, [pc, #40]	@ (800b77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b754:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b758:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800b75c:	e007      	b.n	800b76e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b75e:	4b07      	ldr	r3, [pc, #28]	@ (800b77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b766:	4a05      	ldr	r2, [pc, #20]	@ (800b77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b768:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b76c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800b76e:	2300      	movs	r3, #0
}
 800b770:	4618      	mov	r0, r3
 800b772:	3714      	adds	r7, #20
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr
 800b77c:	40007000 	.word	0x40007000
 800b780:	20000040 	.word	0x20000040
 800b784:	431bde83 	.word	0x431bde83

0800b788 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800b788:	b480      	push	{r7}
 800b78a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800b78c:	4b05      	ldr	r3, [pc, #20]	@ (800b7a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b78e:	689b      	ldr	r3, [r3, #8]
 800b790:	4a04      	ldr	r2, [pc, #16]	@ (800b7a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b792:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b796:	6093      	str	r3, [r2, #8]
}
 800b798:	bf00      	nop
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr
 800b7a2:	bf00      	nop
 800b7a4:	40007000 	.word	0x40007000

0800b7a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b088      	sub	sp, #32
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d101      	bne.n	800b7ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	e2fe      	b.n	800bdb8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f003 0301 	and.w	r3, r3, #1
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d075      	beq.n	800b8b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b7c6:	4b97      	ldr	r3, [pc, #604]	@ (800ba24 <HAL_RCC_OscConfig+0x27c>)
 800b7c8:	689b      	ldr	r3, [r3, #8]
 800b7ca:	f003 030c 	and.w	r3, r3, #12
 800b7ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b7d0:	4b94      	ldr	r3, [pc, #592]	@ (800ba24 <HAL_RCC_OscConfig+0x27c>)
 800b7d2:	68db      	ldr	r3, [r3, #12]
 800b7d4:	f003 0303 	and.w	r3, r3, #3
 800b7d8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800b7da:	69bb      	ldr	r3, [r7, #24]
 800b7dc:	2b0c      	cmp	r3, #12
 800b7de:	d102      	bne.n	800b7e6 <HAL_RCC_OscConfig+0x3e>
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	2b03      	cmp	r3, #3
 800b7e4:	d002      	beq.n	800b7ec <HAL_RCC_OscConfig+0x44>
 800b7e6:	69bb      	ldr	r3, [r7, #24]
 800b7e8:	2b08      	cmp	r3, #8
 800b7ea:	d10b      	bne.n	800b804 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b7ec:	4b8d      	ldr	r3, [pc, #564]	@ (800ba24 <HAL_RCC_OscConfig+0x27c>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d05b      	beq.n	800b8b0 <HAL_RCC_OscConfig+0x108>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	685b      	ldr	r3, [r3, #4]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d157      	bne.n	800b8b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b800:	2301      	movs	r3, #1
 800b802:	e2d9      	b.n	800bdb8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	685b      	ldr	r3, [r3, #4]
 800b808:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b80c:	d106      	bne.n	800b81c <HAL_RCC_OscConfig+0x74>
 800b80e:	4b85      	ldr	r3, [pc, #532]	@ (800ba24 <HAL_RCC_OscConfig+0x27c>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	4a84      	ldr	r2, [pc, #528]	@ (800ba24 <HAL_RCC_OscConfig+0x27c>)
 800b814:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b818:	6013      	str	r3, [r2, #0]
 800b81a:	e01d      	b.n	800b858 <HAL_RCC_OscConfig+0xb0>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	685b      	ldr	r3, [r3, #4]
 800b820:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b824:	d10c      	bne.n	800b840 <HAL_RCC_OscConfig+0x98>
 800b826:	4b7f      	ldr	r3, [pc, #508]	@ (800ba24 <HAL_RCC_OscConfig+0x27c>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	4a7e      	ldr	r2, [pc, #504]	@ (800ba24 <HAL_RCC_OscConfig+0x27c>)
 800b82c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b830:	6013      	str	r3, [r2, #0]
 800b832:	4b7c      	ldr	r3, [pc, #496]	@ (800ba24 <HAL_RCC_OscConfig+0x27c>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4a7b      	ldr	r2, [pc, #492]	@ (800ba24 <HAL_RCC_OscConfig+0x27c>)
 800b838:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b83c:	6013      	str	r3, [r2, #0]
 800b83e:	e00b      	b.n	800b858 <HAL_RCC_OscConfig+0xb0>
 800b840:	4b78      	ldr	r3, [pc, #480]	@ (800ba24 <HAL_RCC_OscConfig+0x27c>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	4a77      	ldr	r2, [pc, #476]	@ (800ba24 <HAL_RCC_OscConfig+0x27c>)
 800b846:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b84a:	6013      	str	r3, [r2, #0]
 800b84c:	4b75      	ldr	r3, [pc, #468]	@ (800ba24 <HAL_RCC_OscConfig+0x27c>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4a74      	ldr	r2, [pc, #464]	@ (800ba24 <HAL_RCC_OscConfig+0x27c>)
 800b852:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d013      	beq.n	800b888 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b860:	f7f8 ffe4 	bl	800482c <HAL_GetTick>
 800b864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b866:	e008      	b.n	800b87a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b868:	f7f8 ffe0 	bl	800482c <HAL_GetTick>
 800b86c:	4602      	mov	r2, r0
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	1ad3      	subs	r3, r2, r3
 800b872:	2b64      	cmp	r3, #100	@ 0x64
 800b874:	d901      	bls.n	800b87a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b876:	2303      	movs	r3, #3
 800b878:	e29e      	b.n	800bdb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b87a:	4b6a      	ldr	r3, [pc, #424]	@ (800ba24 <HAL_RCC_OscConfig+0x27c>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b882:	2b00      	cmp	r3, #0
 800b884:	d0f0      	beq.n	800b868 <HAL_RCC_OscConfig+0xc0>
 800b886:	e014      	b.n	800b8b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b888:	f7f8 ffd0 	bl	800482c <HAL_GetTick>
 800b88c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b88e:	e008      	b.n	800b8a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b890:	f7f8 ffcc 	bl	800482c <HAL_GetTick>
 800b894:	4602      	mov	r2, r0
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	1ad3      	subs	r3, r2, r3
 800b89a:	2b64      	cmp	r3, #100	@ 0x64
 800b89c:	d901      	bls.n	800b8a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b89e:	2303      	movs	r3, #3
 800b8a0:	e28a      	b.n	800bdb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b8a2:	4b60      	ldr	r3, [pc, #384]	@ (800ba24 <HAL_RCC_OscConfig+0x27c>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d1f0      	bne.n	800b890 <HAL_RCC_OscConfig+0xe8>
 800b8ae:	e000      	b.n	800b8b2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b8b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f003 0302 	and.w	r3, r3, #2
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d075      	beq.n	800b9aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b8be:	4b59      	ldr	r3, [pc, #356]	@ (800ba24 <HAL_RCC_OscConfig+0x27c>)
 800b8c0:	689b      	ldr	r3, [r3, #8]
 800b8c2:	f003 030c 	and.w	r3, r3, #12
 800b8c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b8c8:	4b56      	ldr	r3, [pc, #344]	@ (800ba24 <HAL_RCC_OscConfig+0x27c>)
 800b8ca:	68db      	ldr	r3, [r3, #12]
 800b8cc:	f003 0303 	and.w	r3, r3, #3
 800b8d0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800b8d2:	69bb      	ldr	r3, [r7, #24]
 800b8d4:	2b0c      	cmp	r3, #12
 800b8d6:	d102      	bne.n	800b8de <HAL_RCC_OscConfig+0x136>
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	2b02      	cmp	r3, #2
 800b8dc:	d002      	beq.n	800b8e4 <HAL_RCC_OscConfig+0x13c>
 800b8de:	69bb      	ldr	r3, [r7, #24]
 800b8e0:	2b04      	cmp	r3, #4
 800b8e2:	d11f      	bne.n	800b924 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b8e4:	4b4f      	ldr	r3, [pc, #316]	@ (800ba24 <HAL_RCC_OscConfig+0x27c>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d005      	beq.n	800b8fc <HAL_RCC_OscConfig+0x154>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	68db      	ldr	r3, [r3, #12]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d101      	bne.n	800b8fc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	e25d      	b.n	800bdb8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b8fc:	4b49      	ldr	r3, [pc, #292]	@ (800ba24 <HAL_RCC_OscConfig+0x27c>)
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	691b      	ldr	r3, [r3, #16]
 800b908:	061b      	lsls	r3, r3, #24
 800b90a:	4946      	ldr	r1, [pc, #280]	@ (800ba24 <HAL_RCC_OscConfig+0x27c>)
 800b90c:	4313      	orrs	r3, r2
 800b90e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b910:	4b45      	ldr	r3, [pc, #276]	@ (800ba28 <HAL_RCC_OscConfig+0x280>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	4618      	mov	r0, r3
 800b916:	f7f8 ff3d 	bl	8004794 <HAL_InitTick>
 800b91a:	4603      	mov	r3, r0
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d043      	beq.n	800b9a8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b920:	2301      	movs	r3, #1
 800b922:	e249      	b.n	800bdb8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	68db      	ldr	r3, [r3, #12]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d023      	beq.n	800b974 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b92c:	4b3d      	ldr	r3, [pc, #244]	@ (800ba24 <HAL_RCC_OscConfig+0x27c>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	4a3c      	ldr	r2, [pc, #240]	@ (800ba24 <HAL_RCC_OscConfig+0x27c>)
 800b932:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b938:	f7f8 ff78 	bl	800482c <HAL_GetTick>
 800b93c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b93e:	e008      	b.n	800b952 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b940:	f7f8 ff74 	bl	800482c <HAL_GetTick>
 800b944:	4602      	mov	r2, r0
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	1ad3      	subs	r3, r2, r3
 800b94a:	2b02      	cmp	r3, #2
 800b94c:	d901      	bls.n	800b952 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b94e:	2303      	movs	r3, #3
 800b950:	e232      	b.n	800bdb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b952:	4b34      	ldr	r3, [pc, #208]	@ (800ba24 <HAL_RCC_OscConfig+0x27c>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d0f0      	beq.n	800b940 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b95e:	4b31      	ldr	r3, [pc, #196]	@ (800ba24 <HAL_RCC_OscConfig+0x27c>)
 800b960:	685b      	ldr	r3, [r3, #4]
 800b962:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	691b      	ldr	r3, [r3, #16]
 800b96a:	061b      	lsls	r3, r3, #24
 800b96c:	492d      	ldr	r1, [pc, #180]	@ (800ba24 <HAL_RCC_OscConfig+0x27c>)
 800b96e:	4313      	orrs	r3, r2
 800b970:	604b      	str	r3, [r1, #4]
 800b972:	e01a      	b.n	800b9aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b974:	4b2b      	ldr	r3, [pc, #172]	@ (800ba24 <HAL_RCC_OscConfig+0x27c>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	4a2a      	ldr	r2, [pc, #168]	@ (800ba24 <HAL_RCC_OscConfig+0x27c>)
 800b97a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b97e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b980:	f7f8 ff54 	bl	800482c <HAL_GetTick>
 800b984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b986:	e008      	b.n	800b99a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b988:	f7f8 ff50 	bl	800482c <HAL_GetTick>
 800b98c:	4602      	mov	r2, r0
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	1ad3      	subs	r3, r2, r3
 800b992:	2b02      	cmp	r3, #2
 800b994:	d901      	bls.n	800b99a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b996:	2303      	movs	r3, #3
 800b998:	e20e      	b.n	800bdb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b99a:	4b22      	ldr	r3, [pc, #136]	@ (800ba24 <HAL_RCC_OscConfig+0x27c>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d1f0      	bne.n	800b988 <HAL_RCC_OscConfig+0x1e0>
 800b9a6:	e000      	b.n	800b9aa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b9a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f003 0308 	and.w	r3, r3, #8
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d041      	beq.n	800ba3a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	695b      	ldr	r3, [r3, #20]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d01c      	beq.n	800b9f8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b9be:	4b19      	ldr	r3, [pc, #100]	@ (800ba24 <HAL_RCC_OscConfig+0x27c>)
 800b9c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b9c4:	4a17      	ldr	r2, [pc, #92]	@ (800ba24 <HAL_RCC_OscConfig+0x27c>)
 800b9c6:	f043 0301 	orr.w	r3, r3, #1
 800b9ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b9ce:	f7f8 ff2d 	bl	800482c <HAL_GetTick>
 800b9d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b9d4:	e008      	b.n	800b9e8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b9d6:	f7f8 ff29 	bl	800482c <HAL_GetTick>
 800b9da:	4602      	mov	r2, r0
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	1ad3      	subs	r3, r2, r3
 800b9e0:	2b02      	cmp	r3, #2
 800b9e2:	d901      	bls.n	800b9e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b9e4:	2303      	movs	r3, #3
 800b9e6:	e1e7      	b.n	800bdb8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b9e8:	4b0e      	ldr	r3, [pc, #56]	@ (800ba24 <HAL_RCC_OscConfig+0x27c>)
 800b9ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b9ee:	f003 0302 	and.w	r3, r3, #2
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d0ef      	beq.n	800b9d6 <HAL_RCC_OscConfig+0x22e>
 800b9f6:	e020      	b.n	800ba3a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b9f8:	4b0a      	ldr	r3, [pc, #40]	@ (800ba24 <HAL_RCC_OscConfig+0x27c>)
 800b9fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b9fe:	4a09      	ldr	r2, [pc, #36]	@ (800ba24 <HAL_RCC_OscConfig+0x27c>)
 800ba00:	f023 0301 	bic.w	r3, r3, #1
 800ba04:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba08:	f7f8 ff10 	bl	800482c <HAL_GetTick>
 800ba0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ba0e:	e00d      	b.n	800ba2c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ba10:	f7f8 ff0c 	bl	800482c <HAL_GetTick>
 800ba14:	4602      	mov	r2, r0
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	1ad3      	subs	r3, r2, r3
 800ba1a:	2b02      	cmp	r3, #2
 800ba1c:	d906      	bls.n	800ba2c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800ba1e:	2303      	movs	r3, #3
 800ba20:	e1ca      	b.n	800bdb8 <HAL_RCC_OscConfig+0x610>
 800ba22:	bf00      	nop
 800ba24:	40021000 	.word	0x40021000
 800ba28:	20000048 	.word	0x20000048
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ba2c:	4b8c      	ldr	r3, [pc, #560]	@ (800bc60 <HAL_RCC_OscConfig+0x4b8>)
 800ba2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ba32:	f003 0302 	and.w	r3, r3, #2
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d1ea      	bne.n	800ba10 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f003 0304 	and.w	r3, r3, #4
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	f000 80a6 	beq.w	800bb94 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800ba4c:	4b84      	ldr	r3, [pc, #528]	@ (800bc60 <HAL_RCC_OscConfig+0x4b8>)
 800ba4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d101      	bne.n	800ba5c <HAL_RCC_OscConfig+0x2b4>
 800ba58:	2301      	movs	r3, #1
 800ba5a:	e000      	b.n	800ba5e <HAL_RCC_OscConfig+0x2b6>
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d00d      	beq.n	800ba7e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ba62:	4b7f      	ldr	r3, [pc, #508]	@ (800bc60 <HAL_RCC_OscConfig+0x4b8>)
 800ba64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba66:	4a7e      	ldr	r2, [pc, #504]	@ (800bc60 <HAL_RCC_OscConfig+0x4b8>)
 800ba68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ba6c:	6593      	str	r3, [r2, #88]	@ 0x58
 800ba6e:	4b7c      	ldr	r3, [pc, #496]	@ (800bc60 <HAL_RCC_OscConfig+0x4b8>)
 800ba70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ba76:	60fb      	str	r3, [r7, #12]
 800ba78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ba7e:	4b79      	ldr	r3, [pc, #484]	@ (800bc64 <HAL_RCC_OscConfig+0x4bc>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d118      	bne.n	800babc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ba8a:	4b76      	ldr	r3, [pc, #472]	@ (800bc64 <HAL_RCC_OscConfig+0x4bc>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	4a75      	ldr	r2, [pc, #468]	@ (800bc64 <HAL_RCC_OscConfig+0x4bc>)
 800ba90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ba94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ba96:	f7f8 fec9 	bl	800482c <HAL_GetTick>
 800ba9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ba9c:	e008      	b.n	800bab0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ba9e:	f7f8 fec5 	bl	800482c <HAL_GetTick>
 800baa2:	4602      	mov	r2, r0
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	1ad3      	subs	r3, r2, r3
 800baa8:	2b02      	cmp	r3, #2
 800baaa:	d901      	bls.n	800bab0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800baac:	2303      	movs	r3, #3
 800baae:	e183      	b.n	800bdb8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bab0:	4b6c      	ldr	r3, [pc, #432]	@ (800bc64 <HAL_RCC_OscConfig+0x4bc>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d0f0      	beq.n	800ba9e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	689b      	ldr	r3, [r3, #8]
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d108      	bne.n	800bad6 <HAL_RCC_OscConfig+0x32e>
 800bac4:	4b66      	ldr	r3, [pc, #408]	@ (800bc60 <HAL_RCC_OscConfig+0x4b8>)
 800bac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800baca:	4a65      	ldr	r2, [pc, #404]	@ (800bc60 <HAL_RCC_OscConfig+0x4b8>)
 800bacc:	f043 0301 	orr.w	r3, r3, #1
 800bad0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800bad4:	e024      	b.n	800bb20 <HAL_RCC_OscConfig+0x378>
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	689b      	ldr	r3, [r3, #8]
 800bada:	2b05      	cmp	r3, #5
 800badc:	d110      	bne.n	800bb00 <HAL_RCC_OscConfig+0x358>
 800bade:	4b60      	ldr	r3, [pc, #384]	@ (800bc60 <HAL_RCC_OscConfig+0x4b8>)
 800bae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bae4:	4a5e      	ldr	r2, [pc, #376]	@ (800bc60 <HAL_RCC_OscConfig+0x4b8>)
 800bae6:	f043 0304 	orr.w	r3, r3, #4
 800baea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800baee:	4b5c      	ldr	r3, [pc, #368]	@ (800bc60 <HAL_RCC_OscConfig+0x4b8>)
 800baf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800baf4:	4a5a      	ldr	r2, [pc, #360]	@ (800bc60 <HAL_RCC_OscConfig+0x4b8>)
 800baf6:	f043 0301 	orr.w	r3, r3, #1
 800bafa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800bafe:	e00f      	b.n	800bb20 <HAL_RCC_OscConfig+0x378>
 800bb00:	4b57      	ldr	r3, [pc, #348]	@ (800bc60 <HAL_RCC_OscConfig+0x4b8>)
 800bb02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb06:	4a56      	ldr	r2, [pc, #344]	@ (800bc60 <HAL_RCC_OscConfig+0x4b8>)
 800bb08:	f023 0301 	bic.w	r3, r3, #1
 800bb0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800bb10:	4b53      	ldr	r3, [pc, #332]	@ (800bc60 <HAL_RCC_OscConfig+0x4b8>)
 800bb12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb16:	4a52      	ldr	r2, [pc, #328]	@ (800bc60 <HAL_RCC_OscConfig+0x4b8>)
 800bb18:	f023 0304 	bic.w	r3, r3, #4
 800bb1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	689b      	ldr	r3, [r3, #8]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d016      	beq.n	800bb56 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb28:	f7f8 fe80 	bl	800482c <HAL_GetTick>
 800bb2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bb2e:	e00a      	b.n	800bb46 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb30:	f7f8 fe7c 	bl	800482c <HAL_GetTick>
 800bb34:	4602      	mov	r2, r0
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	1ad3      	subs	r3, r2, r3
 800bb3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d901      	bls.n	800bb46 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800bb42:	2303      	movs	r3, #3
 800bb44:	e138      	b.n	800bdb8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bb46:	4b46      	ldr	r3, [pc, #280]	@ (800bc60 <HAL_RCC_OscConfig+0x4b8>)
 800bb48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb4c:	f003 0302 	and.w	r3, r3, #2
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d0ed      	beq.n	800bb30 <HAL_RCC_OscConfig+0x388>
 800bb54:	e015      	b.n	800bb82 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb56:	f7f8 fe69 	bl	800482c <HAL_GetTick>
 800bb5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bb5c:	e00a      	b.n	800bb74 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb5e:	f7f8 fe65 	bl	800482c <HAL_GetTick>
 800bb62:	4602      	mov	r2, r0
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	1ad3      	subs	r3, r2, r3
 800bb68:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d901      	bls.n	800bb74 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800bb70:	2303      	movs	r3, #3
 800bb72:	e121      	b.n	800bdb8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bb74:	4b3a      	ldr	r3, [pc, #232]	@ (800bc60 <HAL_RCC_OscConfig+0x4b8>)
 800bb76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb7a:	f003 0302 	and.w	r3, r3, #2
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d1ed      	bne.n	800bb5e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800bb82:	7ffb      	ldrb	r3, [r7, #31]
 800bb84:	2b01      	cmp	r3, #1
 800bb86:	d105      	bne.n	800bb94 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bb88:	4b35      	ldr	r3, [pc, #212]	@ (800bc60 <HAL_RCC_OscConfig+0x4b8>)
 800bb8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb8c:	4a34      	ldr	r2, [pc, #208]	@ (800bc60 <HAL_RCC_OscConfig+0x4b8>)
 800bb8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bb92:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f003 0320 	and.w	r3, r3, #32
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d03c      	beq.n	800bc1a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	699b      	ldr	r3, [r3, #24]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d01c      	beq.n	800bbe2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bba8:	4b2d      	ldr	r3, [pc, #180]	@ (800bc60 <HAL_RCC_OscConfig+0x4b8>)
 800bbaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bbae:	4a2c      	ldr	r2, [pc, #176]	@ (800bc60 <HAL_RCC_OscConfig+0x4b8>)
 800bbb0:	f043 0301 	orr.w	r3, r3, #1
 800bbb4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bbb8:	f7f8 fe38 	bl	800482c <HAL_GetTick>
 800bbbc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800bbbe:	e008      	b.n	800bbd2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bbc0:	f7f8 fe34 	bl	800482c <HAL_GetTick>
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	1ad3      	subs	r3, r2, r3
 800bbca:	2b02      	cmp	r3, #2
 800bbcc:	d901      	bls.n	800bbd2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800bbce:	2303      	movs	r3, #3
 800bbd0:	e0f2      	b.n	800bdb8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800bbd2:	4b23      	ldr	r3, [pc, #140]	@ (800bc60 <HAL_RCC_OscConfig+0x4b8>)
 800bbd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bbd8:	f003 0302 	and.w	r3, r3, #2
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d0ef      	beq.n	800bbc0 <HAL_RCC_OscConfig+0x418>
 800bbe0:	e01b      	b.n	800bc1a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800bbe2:	4b1f      	ldr	r3, [pc, #124]	@ (800bc60 <HAL_RCC_OscConfig+0x4b8>)
 800bbe4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bbe8:	4a1d      	ldr	r2, [pc, #116]	@ (800bc60 <HAL_RCC_OscConfig+0x4b8>)
 800bbea:	f023 0301 	bic.w	r3, r3, #1
 800bbee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bbf2:	f7f8 fe1b 	bl	800482c <HAL_GetTick>
 800bbf6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800bbf8:	e008      	b.n	800bc0c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bbfa:	f7f8 fe17 	bl	800482c <HAL_GetTick>
 800bbfe:	4602      	mov	r2, r0
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	1ad3      	subs	r3, r2, r3
 800bc04:	2b02      	cmp	r3, #2
 800bc06:	d901      	bls.n	800bc0c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800bc08:	2303      	movs	r3, #3
 800bc0a:	e0d5      	b.n	800bdb8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800bc0c:	4b14      	ldr	r3, [pc, #80]	@ (800bc60 <HAL_RCC_OscConfig+0x4b8>)
 800bc0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bc12:	f003 0302 	and.w	r3, r3, #2
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d1ef      	bne.n	800bbfa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	69db      	ldr	r3, [r3, #28]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	f000 80c9 	beq.w	800bdb6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bc24:	4b0e      	ldr	r3, [pc, #56]	@ (800bc60 <HAL_RCC_OscConfig+0x4b8>)
 800bc26:	689b      	ldr	r3, [r3, #8]
 800bc28:	f003 030c 	and.w	r3, r3, #12
 800bc2c:	2b0c      	cmp	r3, #12
 800bc2e:	f000 8083 	beq.w	800bd38 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	69db      	ldr	r3, [r3, #28]
 800bc36:	2b02      	cmp	r3, #2
 800bc38:	d15e      	bne.n	800bcf8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bc3a:	4b09      	ldr	r3, [pc, #36]	@ (800bc60 <HAL_RCC_OscConfig+0x4b8>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	4a08      	ldr	r2, [pc, #32]	@ (800bc60 <HAL_RCC_OscConfig+0x4b8>)
 800bc40:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bc44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc46:	f7f8 fdf1 	bl	800482c <HAL_GetTick>
 800bc4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bc4c:	e00c      	b.n	800bc68 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc4e:	f7f8 fded 	bl	800482c <HAL_GetTick>
 800bc52:	4602      	mov	r2, r0
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	1ad3      	subs	r3, r2, r3
 800bc58:	2b02      	cmp	r3, #2
 800bc5a:	d905      	bls.n	800bc68 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800bc5c:	2303      	movs	r3, #3
 800bc5e:	e0ab      	b.n	800bdb8 <HAL_RCC_OscConfig+0x610>
 800bc60:	40021000 	.word	0x40021000
 800bc64:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bc68:	4b55      	ldr	r3, [pc, #340]	@ (800bdc0 <HAL_RCC_OscConfig+0x618>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d1ec      	bne.n	800bc4e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bc74:	4b52      	ldr	r3, [pc, #328]	@ (800bdc0 <HAL_RCC_OscConfig+0x618>)
 800bc76:	68da      	ldr	r2, [r3, #12]
 800bc78:	4b52      	ldr	r3, [pc, #328]	@ (800bdc4 <HAL_RCC_OscConfig+0x61c>)
 800bc7a:	4013      	ands	r3, r2
 800bc7c:	687a      	ldr	r2, [r7, #4]
 800bc7e:	6a11      	ldr	r1, [r2, #32]
 800bc80:	687a      	ldr	r2, [r7, #4]
 800bc82:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800bc84:	3a01      	subs	r2, #1
 800bc86:	0112      	lsls	r2, r2, #4
 800bc88:	4311      	orrs	r1, r2
 800bc8a:	687a      	ldr	r2, [r7, #4]
 800bc8c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800bc8e:	0212      	lsls	r2, r2, #8
 800bc90:	4311      	orrs	r1, r2
 800bc92:	687a      	ldr	r2, [r7, #4]
 800bc94:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bc96:	0852      	lsrs	r2, r2, #1
 800bc98:	3a01      	subs	r2, #1
 800bc9a:	0552      	lsls	r2, r2, #21
 800bc9c:	4311      	orrs	r1, r2
 800bc9e:	687a      	ldr	r2, [r7, #4]
 800bca0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800bca2:	0852      	lsrs	r2, r2, #1
 800bca4:	3a01      	subs	r2, #1
 800bca6:	0652      	lsls	r2, r2, #25
 800bca8:	4311      	orrs	r1, r2
 800bcaa:	687a      	ldr	r2, [r7, #4]
 800bcac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800bcae:	06d2      	lsls	r2, r2, #27
 800bcb0:	430a      	orrs	r2, r1
 800bcb2:	4943      	ldr	r1, [pc, #268]	@ (800bdc0 <HAL_RCC_OscConfig+0x618>)
 800bcb4:	4313      	orrs	r3, r2
 800bcb6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bcb8:	4b41      	ldr	r3, [pc, #260]	@ (800bdc0 <HAL_RCC_OscConfig+0x618>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	4a40      	ldr	r2, [pc, #256]	@ (800bdc0 <HAL_RCC_OscConfig+0x618>)
 800bcbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bcc2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800bcc4:	4b3e      	ldr	r3, [pc, #248]	@ (800bdc0 <HAL_RCC_OscConfig+0x618>)
 800bcc6:	68db      	ldr	r3, [r3, #12]
 800bcc8:	4a3d      	ldr	r2, [pc, #244]	@ (800bdc0 <HAL_RCC_OscConfig+0x618>)
 800bcca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bcce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcd0:	f7f8 fdac 	bl	800482c <HAL_GetTick>
 800bcd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bcd6:	e008      	b.n	800bcea <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bcd8:	f7f8 fda8 	bl	800482c <HAL_GetTick>
 800bcdc:	4602      	mov	r2, r0
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	1ad3      	subs	r3, r2, r3
 800bce2:	2b02      	cmp	r3, #2
 800bce4:	d901      	bls.n	800bcea <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800bce6:	2303      	movs	r3, #3
 800bce8:	e066      	b.n	800bdb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bcea:	4b35      	ldr	r3, [pc, #212]	@ (800bdc0 <HAL_RCC_OscConfig+0x618>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d0f0      	beq.n	800bcd8 <HAL_RCC_OscConfig+0x530>
 800bcf6:	e05e      	b.n	800bdb6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bcf8:	4b31      	ldr	r3, [pc, #196]	@ (800bdc0 <HAL_RCC_OscConfig+0x618>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	4a30      	ldr	r2, [pc, #192]	@ (800bdc0 <HAL_RCC_OscConfig+0x618>)
 800bcfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bd02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd04:	f7f8 fd92 	bl	800482c <HAL_GetTick>
 800bd08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bd0a:	e008      	b.n	800bd1e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bd0c:	f7f8 fd8e 	bl	800482c <HAL_GetTick>
 800bd10:	4602      	mov	r2, r0
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	1ad3      	subs	r3, r2, r3
 800bd16:	2b02      	cmp	r3, #2
 800bd18:	d901      	bls.n	800bd1e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800bd1a:	2303      	movs	r3, #3
 800bd1c:	e04c      	b.n	800bdb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bd1e:	4b28      	ldr	r3, [pc, #160]	@ (800bdc0 <HAL_RCC_OscConfig+0x618>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d1f0      	bne.n	800bd0c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800bd2a:	4b25      	ldr	r3, [pc, #148]	@ (800bdc0 <HAL_RCC_OscConfig+0x618>)
 800bd2c:	68da      	ldr	r2, [r3, #12]
 800bd2e:	4924      	ldr	r1, [pc, #144]	@ (800bdc0 <HAL_RCC_OscConfig+0x618>)
 800bd30:	4b25      	ldr	r3, [pc, #148]	@ (800bdc8 <HAL_RCC_OscConfig+0x620>)
 800bd32:	4013      	ands	r3, r2
 800bd34:	60cb      	str	r3, [r1, #12]
 800bd36:	e03e      	b.n	800bdb6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	69db      	ldr	r3, [r3, #28]
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	d101      	bne.n	800bd44 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800bd40:	2301      	movs	r3, #1
 800bd42:	e039      	b.n	800bdb8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800bd44:	4b1e      	ldr	r3, [pc, #120]	@ (800bdc0 <HAL_RCC_OscConfig+0x618>)
 800bd46:	68db      	ldr	r3, [r3, #12]
 800bd48:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	f003 0203 	and.w	r2, r3, #3
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6a1b      	ldr	r3, [r3, #32]
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d12c      	bne.n	800bdb2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd62:	3b01      	subs	r3, #1
 800bd64:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d123      	bne.n	800bdb2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd74:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d11b      	bne.n	800bdb2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd84:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800bd86:	429a      	cmp	r2, r3
 800bd88:	d113      	bne.n	800bdb2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd94:	085b      	lsrs	r3, r3, #1
 800bd96:	3b01      	subs	r3, #1
 800bd98:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d109      	bne.n	800bdb2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bda8:	085b      	lsrs	r3, r3, #1
 800bdaa:	3b01      	subs	r3, #1
 800bdac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d001      	beq.n	800bdb6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	e000      	b.n	800bdb8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800bdb6:	2300      	movs	r3, #0
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3720      	adds	r7, #32
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}
 800bdc0:	40021000 	.word	0x40021000
 800bdc4:	019f800c 	.word	0x019f800c
 800bdc8:	feeefffc 	.word	0xfeeefffc

0800bdcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b086      	sub	sp, #24
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
 800bdd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d101      	bne.n	800bde4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800bde0:	2301      	movs	r3, #1
 800bde2:	e11e      	b.n	800c022 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bde4:	4b91      	ldr	r3, [pc, #580]	@ (800c02c <HAL_RCC_ClockConfig+0x260>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f003 030f 	and.w	r3, r3, #15
 800bdec:	683a      	ldr	r2, [r7, #0]
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d910      	bls.n	800be14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bdf2:	4b8e      	ldr	r3, [pc, #568]	@ (800c02c <HAL_RCC_ClockConfig+0x260>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f023 020f 	bic.w	r2, r3, #15
 800bdfa:	498c      	ldr	r1, [pc, #560]	@ (800c02c <HAL_RCC_ClockConfig+0x260>)
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	4313      	orrs	r3, r2
 800be00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800be02:	4b8a      	ldr	r3, [pc, #552]	@ (800c02c <HAL_RCC_ClockConfig+0x260>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f003 030f 	and.w	r3, r3, #15
 800be0a:	683a      	ldr	r2, [r7, #0]
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d001      	beq.n	800be14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800be10:	2301      	movs	r3, #1
 800be12:	e106      	b.n	800c022 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f003 0301 	and.w	r3, r3, #1
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d073      	beq.n	800bf08 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	2b03      	cmp	r3, #3
 800be26:	d129      	bne.n	800be7c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800be28:	4b81      	ldr	r3, [pc, #516]	@ (800c030 <HAL_RCC_ClockConfig+0x264>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800be30:	2b00      	cmp	r3, #0
 800be32:	d101      	bne.n	800be38 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800be34:	2301      	movs	r3, #1
 800be36:	e0f4      	b.n	800c022 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800be38:	f000 f9ca 	bl	800c1d0 <RCC_GetSysClockFreqFromPLLSource>
 800be3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	4a7c      	ldr	r2, [pc, #496]	@ (800c034 <HAL_RCC_ClockConfig+0x268>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d93f      	bls.n	800bec6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800be46:	4b7a      	ldr	r3, [pc, #488]	@ (800c030 <HAL_RCC_ClockConfig+0x264>)
 800be48:	689b      	ldr	r3, [r3, #8]
 800be4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d009      	beq.n	800be66 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d033      	beq.n	800bec6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800be62:	2b00      	cmp	r3, #0
 800be64:	d12f      	bne.n	800bec6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800be66:	4b72      	ldr	r3, [pc, #456]	@ (800c030 <HAL_RCC_ClockConfig+0x264>)
 800be68:	689b      	ldr	r3, [r3, #8]
 800be6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800be6e:	4a70      	ldr	r2, [pc, #448]	@ (800c030 <HAL_RCC_ClockConfig+0x264>)
 800be70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be74:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800be76:	2380      	movs	r3, #128	@ 0x80
 800be78:	617b      	str	r3, [r7, #20]
 800be7a:	e024      	b.n	800bec6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	2b02      	cmp	r3, #2
 800be82:	d107      	bne.n	800be94 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800be84:	4b6a      	ldr	r3, [pc, #424]	@ (800c030 <HAL_RCC_ClockConfig+0x264>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d109      	bne.n	800bea4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800be90:	2301      	movs	r3, #1
 800be92:	e0c6      	b.n	800c022 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800be94:	4b66      	ldr	r3, [pc, #408]	@ (800c030 <HAL_RCC_ClockConfig+0x264>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d101      	bne.n	800bea4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800bea0:	2301      	movs	r3, #1
 800bea2:	e0be      	b.n	800c022 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800bea4:	f000 f8ce 	bl	800c044 <HAL_RCC_GetSysClockFreq>
 800bea8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	4a61      	ldr	r2, [pc, #388]	@ (800c034 <HAL_RCC_ClockConfig+0x268>)
 800beae:	4293      	cmp	r3, r2
 800beb0:	d909      	bls.n	800bec6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800beb2:	4b5f      	ldr	r3, [pc, #380]	@ (800c030 <HAL_RCC_ClockConfig+0x264>)
 800beb4:	689b      	ldr	r3, [r3, #8]
 800beb6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800beba:	4a5d      	ldr	r2, [pc, #372]	@ (800c030 <HAL_RCC_ClockConfig+0x264>)
 800bebc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bec0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800bec2:	2380      	movs	r3, #128	@ 0x80
 800bec4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bec6:	4b5a      	ldr	r3, [pc, #360]	@ (800c030 <HAL_RCC_ClockConfig+0x264>)
 800bec8:	689b      	ldr	r3, [r3, #8]
 800beca:	f023 0203 	bic.w	r2, r3, #3
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	685b      	ldr	r3, [r3, #4]
 800bed2:	4957      	ldr	r1, [pc, #348]	@ (800c030 <HAL_RCC_ClockConfig+0x264>)
 800bed4:	4313      	orrs	r3, r2
 800bed6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bed8:	f7f8 fca8 	bl	800482c <HAL_GetTick>
 800bedc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bede:	e00a      	b.n	800bef6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bee0:	f7f8 fca4 	bl	800482c <HAL_GetTick>
 800bee4:	4602      	mov	r2, r0
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	1ad3      	subs	r3, r2, r3
 800beea:	f241 3288 	movw	r2, #5000	@ 0x1388
 800beee:	4293      	cmp	r3, r2
 800bef0:	d901      	bls.n	800bef6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800bef2:	2303      	movs	r3, #3
 800bef4:	e095      	b.n	800c022 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bef6:	4b4e      	ldr	r3, [pc, #312]	@ (800c030 <HAL_RCC_ClockConfig+0x264>)
 800bef8:	689b      	ldr	r3, [r3, #8]
 800befa:	f003 020c 	and.w	r2, r3, #12
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	009b      	lsls	r3, r3, #2
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d1eb      	bne.n	800bee0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f003 0302 	and.w	r3, r3, #2
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d023      	beq.n	800bf5c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f003 0304 	and.w	r3, r3, #4
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d005      	beq.n	800bf2c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bf20:	4b43      	ldr	r3, [pc, #268]	@ (800c030 <HAL_RCC_ClockConfig+0x264>)
 800bf22:	689b      	ldr	r3, [r3, #8]
 800bf24:	4a42      	ldr	r2, [pc, #264]	@ (800c030 <HAL_RCC_ClockConfig+0x264>)
 800bf26:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800bf2a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f003 0308 	and.w	r3, r3, #8
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d007      	beq.n	800bf48 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800bf38:	4b3d      	ldr	r3, [pc, #244]	@ (800c030 <HAL_RCC_ClockConfig+0x264>)
 800bf3a:	689b      	ldr	r3, [r3, #8]
 800bf3c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bf40:	4a3b      	ldr	r2, [pc, #236]	@ (800c030 <HAL_RCC_ClockConfig+0x264>)
 800bf42:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800bf46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bf48:	4b39      	ldr	r3, [pc, #228]	@ (800c030 <HAL_RCC_ClockConfig+0x264>)
 800bf4a:	689b      	ldr	r3, [r3, #8]
 800bf4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	689b      	ldr	r3, [r3, #8]
 800bf54:	4936      	ldr	r1, [pc, #216]	@ (800c030 <HAL_RCC_ClockConfig+0x264>)
 800bf56:	4313      	orrs	r3, r2
 800bf58:	608b      	str	r3, [r1, #8]
 800bf5a:	e008      	b.n	800bf6e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	2b80      	cmp	r3, #128	@ 0x80
 800bf60:	d105      	bne.n	800bf6e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800bf62:	4b33      	ldr	r3, [pc, #204]	@ (800c030 <HAL_RCC_ClockConfig+0x264>)
 800bf64:	689b      	ldr	r3, [r3, #8]
 800bf66:	4a32      	ldr	r2, [pc, #200]	@ (800c030 <HAL_RCC_ClockConfig+0x264>)
 800bf68:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bf6c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bf6e:	4b2f      	ldr	r3, [pc, #188]	@ (800c02c <HAL_RCC_ClockConfig+0x260>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f003 030f 	and.w	r3, r3, #15
 800bf76:	683a      	ldr	r2, [r7, #0]
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d21d      	bcs.n	800bfb8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bf7c:	4b2b      	ldr	r3, [pc, #172]	@ (800c02c <HAL_RCC_ClockConfig+0x260>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f023 020f 	bic.w	r2, r3, #15
 800bf84:	4929      	ldr	r1, [pc, #164]	@ (800c02c <HAL_RCC_ClockConfig+0x260>)
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	4313      	orrs	r3, r2
 800bf8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800bf8c:	f7f8 fc4e 	bl	800482c <HAL_GetTick>
 800bf90:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bf92:	e00a      	b.n	800bfaa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bf94:	f7f8 fc4a 	bl	800482c <HAL_GetTick>
 800bf98:	4602      	mov	r2, r0
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	1ad3      	subs	r3, r2, r3
 800bf9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d901      	bls.n	800bfaa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800bfa6:	2303      	movs	r3, #3
 800bfa8:	e03b      	b.n	800c022 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bfaa:	4b20      	ldr	r3, [pc, #128]	@ (800c02c <HAL_RCC_ClockConfig+0x260>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f003 030f 	and.w	r3, r3, #15
 800bfb2:	683a      	ldr	r2, [r7, #0]
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d1ed      	bne.n	800bf94 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	f003 0304 	and.w	r3, r3, #4
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d008      	beq.n	800bfd6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bfc4:	4b1a      	ldr	r3, [pc, #104]	@ (800c030 <HAL_RCC_ClockConfig+0x264>)
 800bfc6:	689b      	ldr	r3, [r3, #8]
 800bfc8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	68db      	ldr	r3, [r3, #12]
 800bfd0:	4917      	ldr	r1, [pc, #92]	@ (800c030 <HAL_RCC_ClockConfig+0x264>)
 800bfd2:	4313      	orrs	r3, r2
 800bfd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f003 0308 	and.w	r3, r3, #8
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d009      	beq.n	800bff6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bfe2:	4b13      	ldr	r3, [pc, #76]	@ (800c030 <HAL_RCC_ClockConfig+0x264>)
 800bfe4:	689b      	ldr	r3, [r3, #8]
 800bfe6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	691b      	ldr	r3, [r3, #16]
 800bfee:	00db      	lsls	r3, r3, #3
 800bff0:	490f      	ldr	r1, [pc, #60]	@ (800c030 <HAL_RCC_ClockConfig+0x264>)
 800bff2:	4313      	orrs	r3, r2
 800bff4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bff6:	f000 f825 	bl	800c044 <HAL_RCC_GetSysClockFreq>
 800bffa:	4602      	mov	r2, r0
 800bffc:	4b0c      	ldr	r3, [pc, #48]	@ (800c030 <HAL_RCC_ClockConfig+0x264>)
 800bffe:	689b      	ldr	r3, [r3, #8]
 800c000:	091b      	lsrs	r3, r3, #4
 800c002:	f003 030f 	and.w	r3, r3, #15
 800c006:	490c      	ldr	r1, [pc, #48]	@ (800c038 <HAL_RCC_ClockConfig+0x26c>)
 800c008:	5ccb      	ldrb	r3, [r1, r3]
 800c00a:	f003 031f 	and.w	r3, r3, #31
 800c00e:	fa22 f303 	lsr.w	r3, r2, r3
 800c012:	4a0a      	ldr	r2, [pc, #40]	@ (800c03c <HAL_RCC_ClockConfig+0x270>)
 800c014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800c016:	4b0a      	ldr	r3, [pc, #40]	@ (800c040 <HAL_RCC_ClockConfig+0x274>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	4618      	mov	r0, r3
 800c01c:	f7f8 fbba 	bl	8004794 <HAL_InitTick>
 800c020:	4603      	mov	r3, r0
}
 800c022:	4618      	mov	r0, r3
 800c024:	3718      	adds	r7, #24
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}
 800c02a:	bf00      	nop
 800c02c:	40022000 	.word	0x40022000
 800c030:	40021000 	.word	0x40021000
 800c034:	04c4b400 	.word	0x04c4b400
 800c038:	08025b7c 	.word	0x08025b7c
 800c03c:	20000040 	.word	0x20000040
 800c040:	20000048 	.word	0x20000048

0800c044 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c044:	b480      	push	{r7}
 800c046:	b087      	sub	sp, #28
 800c048:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800c04a:	4b2c      	ldr	r3, [pc, #176]	@ (800c0fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800c04c:	689b      	ldr	r3, [r3, #8]
 800c04e:	f003 030c 	and.w	r3, r3, #12
 800c052:	2b04      	cmp	r3, #4
 800c054:	d102      	bne.n	800c05c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c056:	4b2a      	ldr	r3, [pc, #168]	@ (800c100 <HAL_RCC_GetSysClockFreq+0xbc>)
 800c058:	613b      	str	r3, [r7, #16]
 800c05a:	e047      	b.n	800c0ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800c05c:	4b27      	ldr	r3, [pc, #156]	@ (800c0fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800c05e:	689b      	ldr	r3, [r3, #8]
 800c060:	f003 030c 	and.w	r3, r3, #12
 800c064:	2b08      	cmp	r3, #8
 800c066:	d102      	bne.n	800c06e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c068:	4b26      	ldr	r3, [pc, #152]	@ (800c104 <HAL_RCC_GetSysClockFreq+0xc0>)
 800c06a:	613b      	str	r3, [r7, #16]
 800c06c:	e03e      	b.n	800c0ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800c06e:	4b23      	ldr	r3, [pc, #140]	@ (800c0fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800c070:	689b      	ldr	r3, [r3, #8]
 800c072:	f003 030c 	and.w	r3, r3, #12
 800c076:	2b0c      	cmp	r3, #12
 800c078:	d136      	bne.n	800c0e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c07a:	4b20      	ldr	r3, [pc, #128]	@ (800c0fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800c07c:	68db      	ldr	r3, [r3, #12]
 800c07e:	f003 0303 	and.w	r3, r3, #3
 800c082:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c084:	4b1d      	ldr	r3, [pc, #116]	@ (800c0fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800c086:	68db      	ldr	r3, [r3, #12]
 800c088:	091b      	lsrs	r3, r3, #4
 800c08a:	f003 030f 	and.w	r3, r3, #15
 800c08e:	3301      	adds	r3, #1
 800c090:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	2b03      	cmp	r3, #3
 800c096:	d10c      	bne.n	800c0b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c098:	4a1a      	ldr	r2, [pc, #104]	@ (800c104 <HAL_RCC_GetSysClockFreq+0xc0>)
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0a0:	4a16      	ldr	r2, [pc, #88]	@ (800c0fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800c0a2:	68d2      	ldr	r2, [r2, #12]
 800c0a4:	0a12      	lsrs	r2, r2, #8
 800c0a6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c0aa:	fb02 f303 	mul.w	r3, r2, r3
 800c0ae:	617b      	str	r3, [r7, #20]
      break;
 800c0b0:	e00c      	b.n	800c0cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c0b2:	4a13      	ldr	r2, [pc, #76]	@ (800c100 <HAL_RCC_GetSysClockFreq+0xbc>)
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0ba:	4a10      	ldr	r2, [pc, #64]	@ (800c0fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800c0bc:	68d2      	ldr	r2, [r2, #12]
 800c0be:	0a12      	lsrs	r2, r2, #8
 800c0c0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c0c4:	fb02 f303 	mul.w	r3, r2, r3
 800c0c8:	617b      	str	r3, [r7, #20]
      break;
 800c0ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c0cc:	4b0b      	ldr	r3, [pc, #44]	@ (800c0fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800c0ce:	68db      	ldr	r3, [r3, #12]
 800c0d0:	0e5b      	lsrs	r3, r3, #25
 800c0d2:	f003 0303 	and.w	r3, r3, #3
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	005b      	lsls	r3, r3, #1
 800c0da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800c0dc:	697a      	ldr	r2, [r7, #20]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0e4:	613b      	str	r3, [r7, #16]
 800c0e6:	e001      	b.n	800c0ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800c0ec:	693b      	ldr	r3, [r7, #16]
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	371c      	adds	r7, #28
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f8:	4770      	bx	lr
 800c0fa:	bf00      	nop
 800c0fc:	40021000 	.word	0x40021000
 800c100:	00f42400 	.word	0x00f42400
 800c104:	007a1200 	.word	0x007a1200

0800c108 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c108:	b480      	push	{r7}
 800c10a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c10c:	4b03      	ldr	r3, [pc, #12]	@ (800c11c <HAL_RCC_GetHCLKFreq+0x14>)
 800c10e:	681b      	ldr	r3, [r3, #0]
}
 800c110:	4618      	mov	r0, r3
 800c112:	46bd      	mov	sp, r7
 800c114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c118:	4770      	bx	lr
 800c11a:	bf00      	nop
 800c11c:	20000040 	.word	0x20000040

0800c120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800c124:	f7ff fff0 	bl	800c108 <HAL_RCC_GetHCLKFreq>
 800c128:	4602      	mov	r2, r0
 800c12a:	4b06      	ldr	r3, [pc, #24]	@ (800c144 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c12c:	689b      	ldr	r3, [r3, #8]
 800c12e:	0a1b      	lsrs	r3, r3, #8
 800c130:	f003 0307 	and.w	r3, r3, #7
 800c134:	4904      	ldr	r1, [pc, #16]	@ (800c148 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c136:	5ccb      	ldrb	r3, [r1, r3]
 800c138:	f003 031f 	and.w	r3, r3, #31
 800c13c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c140:	4618      	mov	r0, r3
 800c142:	bd80      	pop	{r7, pc}
 800c144:	40021000 	.word	0x40021000
 800c148:	08025b8c 	.word	0x08025b8c

0800c14c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800c150:	f7ff ffda 	bl	800c108 <HAL_RCC_GetHCLKFreq>
 800c154:	4602      	mov	r2, r0
 800c156:	4b06      	ldr	r3, [pc, #24]	@ (800c170 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c158:	689b      	ldr	r3, [r3, #8]
 800c15a:	0adb      	lsrs	r3, r3, #11
 800c15c:	f003 0307 	and.w	r3, r3, #7
 800c160:	4904      	ldr	r1, [pc, #16]	@ (800c174 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c162:	5ccb      	ldrb	r3, [r1, r3]
 800c164:	f003 031f 	and.w	r3, r3, #31
 800c168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	bd80      	pop	{r7, pc}
 800c170:	40021000 	.word	0x40021000
 800c174:	08025b8c 	.word	0x08025b8c

0800c178 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800c178:	b480      	push	{r7}
 800c17a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 800c17c:	4b05      	ldr	r3, [pc, #20]	@ (800c194 <HAL_RCC_EnableCSS+0x1c>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4a04      	ldr	r2, [pc, #16]	@ (800c194 <HAL_RCC_EnableCSS+0x1c>)
 800c182:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c186:	6013      	str	r3, [r2, #0]
}
 800c188:	bf00      	nop
 800c18a:	46bd      	mov	sp, r7
 800c18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c190:	4770      	bx	lr
 800c192:	bf00      	nop
 800c194:	40021000 	.word	0x40021000

0800c198 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800c19c:	4b07      	ldr	r3, [pc, #28]	@ (800c1bc <HAL_RCC_NMI_IRQHandler+0x24>)
 800c19e:	69db      	ldr	r3, [r3, #28]
 800c1a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c1a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c1a8:	d105      	bne.n	800c1b6 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800c1aa:	f000 f809 	bl	800c1c0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800c1ae:	4b03      	ldr	r3, [pc, #12]	@ (800c1bc <HAL_RCC_NMI_IRQHandler+0x24>)
 800c1b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c1b4:	621a      	str	r2, [r3, #32]
  }
}
 800c1b6:	bf00      	nop
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	bf00      	nop
 800c1bc:	40021000 	.word	0x40021000

0800c1c0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800c1c0:	b480      	push	{r7}
 800c1c2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 800c1c4:	bf00      	nop
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr
	...

0800c1d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b087      	sub	sp, #28
 800c1d4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c1d6:	4b1e      	ldr	r3, [pc, #120]	@ (800c250 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c1d8:	68db      	ldr	r3, [r3, #12]
 800c1da:	f003 0303 	and.w	r3, r3, #3
 800c1de:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c1e0:	4b1b      	ldr	r3, [pc, #108]	@ (800c250 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c1e2:	68db      	ldr	r3, [r3, #12]
 800c1e4:	091b      	lsrs	r3, r3, #4
 800c1e6:	f003 030f 	and.w	r3, r3, #15
 800c1ea:	3301      	adds	r3, #1
 800c1ec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	2b03      	cmp	r3, #3
 800c1f2:	d10c      	bne.n	800c20e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c1f4:	4a17      	ldr	r2, [pc, #92]	@ (800c254 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1fc:	4a14      	ldr	r2, [pc, #80]	@ (800c250 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c1fe:	68d2      	ldr	r2, [r2, #12]
 800c200:	0a12      	lsrs	r2, r2, #8
 800c202:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c206:	fb02 f303 	mul.w	r3, r2, r3
 800c20a:	617b      	str	r3, [r7, #20]
    break;
 800c20c:	e00c      	b.n	800c228 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c20e:	4a12      	ldr	r2, [pc, #72]	@ (800c258 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	fbb2 f3f3 	udiv	r3, r2, r3
 800c216:	4a0e      	ldr	r2, [pc, #56]	@ (800c250 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c218:	68d2      	ldr	r2, [r2, #12]
 800c21a:	0a12      	lsrs	r2, r2, #8
 800c21c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c220:	fb02 f303 	mul.w	r3, r2, r3
 800c224:	617b      	str	r3, [r7, #20]
    break;
 800c226:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c228:	4b09      	ldr	r3, [pc, #36]	@ (800c250 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c22a:	68db      	ldr	r3, [r3, #12]
 800c22c:	0e5b      	lsrs	r3, r3, #25
 800c22e:	f003 0303 	and.w	r3, r3, #3
 800c232:	3301      	adds	r3, #1
 800c234:	005b      	lsls	r3, r3, #1
 800c236:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800c238:	697a      	ldr	r2, [r7, #20]
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c240:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800c242:	687b      	ldr	r3, [r7, #4]
}
 800c244:	4618      	mov	r0, r3
 800c246:	371c      	adds	r7, #28
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr
 800c250:	40021000 	.word	0x40021000
 800c254:	007a1200 	.word	0x007a1200
 800c258:	00f42400 	.word	0x00f42400

0800c25c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b086      	sub	sp, #24
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c264:	2300      	movs	r3, #0
 800c266:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c268:	2300      	movs	r3, #0
 800c26a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c274:	2b00      	cmp	r3, #0
 800c276:	f000 8098 	beq.w	800c3aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c27a:	2300      	movs	r3, #0
 800c27c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c27e:	4b43      	ldr	r3, [pc, #268]	@ (800c38c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c286:	2b00      	cmp	r3, #0
 800c288:	d10d      	bne.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c28a:	4b40      	ldr	r3, [pc, #256]	@ (800c38c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c28c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c28e:	4a3f      	ldr	r2, [pc, #252]	@ (800c38c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c290:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c294:	6593      	str	r3, [r2, #88]	@ 0x58
 800c296:	4b3d      	ldr	r3, [pc, #244]	@ (800c38c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c29a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c29e:	60bb      	str	r3, [r7, #8]
 800c2a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c2a6:	4b3a      	ldr	r3, [pc, #232]	@ (800c390 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4a39      	ldr	r2, [pc, #228]	@ (800c390 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c2ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c2b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c2b2:	f7f8 fabb 	bl	800482c <HAL_GetTick>
 800c2b6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c2b8:	e009      	b.n	800c2ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c2ba:	f7f8 fab7 	bl	800482c <HAL_GetTick>
 800c2be:	4602      	mov	r2, r0
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	1ad3      	subs	r3, r2, r3
 800c2c4:	2b02      	cmp	r3, #2
 800c2c6:	d902      	bls.n	800c2ce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800c2c8:	2303      	movs	r3, #3
 800c2ca:	74fb      	strb	r3, [r7, #19]
        break;
 800c2cc:	e005      	b.n	800c2da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c2ce:	4b30      	ldr	r3, [pc, #192]	@ (800c390 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d0ef      	beq.n	800c2ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800c2da:	7cfb      	ldrb	r3, [r7, #19]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d159      	bne.n	800c394 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c2e0:	4b2a      	ldr	r3, [pc, #168]	@ (800c38c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c2e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c2ea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d01e      	beq.n	800c330 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c2f6:	697a      	ldr	r2, [r7, #20]
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	d019      	beq.n	800c330 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c2fc:	4b23      	ldr	r3, [pc, #140]	@ (800c38c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c2fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c302:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c306:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c308:	4b20      	ldr	r3, [pc, #128]	@ (800c38c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c30a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c30e:	4a1f      	ldr	r2, [pc, #124]	@ (800c38c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c310:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c314:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c318:	4b1c      	ldr	r3, [pc, #112]	@ (800c38c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c31a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c31e:	4a1b      	ldr	r2, [pc, #108]	@ (800c38c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c320:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c324:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c328:	4a18      	ldr	r2, [pc, #96]	@ (800c38c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	f003 0301 	and.w	r3, r3, #1
 800c336:	2b00      	cmp	r3, #0
 800c338:	d016      	beq.n	800c368 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c33a:	f7f8 fa77 	bl	800482c <HAL_GetTick>
 800c33e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c340:	e00b      	b.n	800c35a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c342:	f7f8 fa73 	bl	800482c <HAL_GetTick>
 800c346:	4602      	mov	r2, r0
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	1ad3      	subs	r3, r2, r3
 800c34c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c350:	4293      	cmp	r3, r2
 800c352:	d902      	bls.n	800c35a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800c354:	2303      	movs	r3, #3
 800c356:	74fb      	strb	r3, [r7, #19]
            break;
 800c358:	e006      	b.n	800c368 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c35a:	4b0c      	ldr	r3, [pc, #48]	@ (800c38c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c35c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c360:	f003 0302 	and.w	r3, r3, #2
 800c364:	2b00      	cmp	r3, #0
 800c366:	d0ec      	beq.n	800c342 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800c368:	7cfb      	ldrb	r3, [r7, #19]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d10b      	bne.n	800c386 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c36e:	4b07      	ldr	r3, [pc, #28]	@ (800c38c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c374:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c37c:	4903      	ldr	r1, [pc, #12]	@ (800c38c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c37e:	4313      	orrs	r3, r2
 800c380:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800c384:	e008      	b.n	800c398 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c386:	7cfb      	ldrb	r3, [r7, #19]
 800c388:	74bb      	strb	r3, [r7, #18]
 800c38a:	e005      	b.n	800c398 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800c38c:	40021000 	.word	0x40021000
 800c390:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c394:	7cfb      	ldrb	r3, [r7, #19]
 800c396:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c398:	7c7b      	ldrb	r3, [r7, #17]
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	d105      	bne.n	800c3aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c39e:	4ba7      	ldr	r3, [pc, #668]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c3a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c3a2:	4aa6      	ldr	r2, [pc, #664]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c3a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c3a8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f003 0301 	and.w	r3, r3, #1
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d00a      	beq.n	800c3cc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c3b6:	4ba1      	ldr	r3, [pc, #644]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c3b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c3bc:	f023 0203 	bic.w	r2, r3, #3
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	685b      	ldr	r3, [r3, #4]
 800c3c4:	499d      	ldr	r1, [pc, #628]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c3c6:	4313      	orrs	r3, r2
 800c3c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f003 0302 	and.w	r3, r3, #2
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d00a      	beq.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c3d8:	4b98      	ldr	r3, [pc, #608]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c3da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c3de:	f023 020c 	bic.w	r2, r3, #12
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	689b      	ldr	r3, [r3, #8]
 800c3e6:	4995      	ldr	r1, [pc, #596]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c3e8:	4313      	orrs	r3, r2
 800c3ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f003 0304 	and.w	r3, r3, #4
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d00a      	beq.n	800c410 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c3fa:	4b90      	ldr	r3, [pc, #576]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c3fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c400:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	68db      	ldr	r3, [r3, #12]
 800c408:	498c      	ldr	r1, [pc, #560]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c40a:	4313      	orrs	r3, r2
 800c40c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f003 0308 	and.w	r3, r3, #8
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d00a      	beq.n	800c432 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c41c:	4b87      	ldr	r3, [pc, #540]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c41e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c422:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	691b      	ldr	r3, [r3, #16]
 800c42a:	4984      	ldr	r1, [pc, #528]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c42c:	4313      	orrs	r3, r2
 800c42e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f003 0310 	and.w	r3, r3, #16
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d00a      	beq.n	800c454 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c43e:	4b7f      	ldr	r3, [pc, #508]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c444:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	695b      	ldr	r3, [r3, #20]
 800c44c:	497b      	ldr	r1, [pc, #492]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c44e:	4313      	orrs	r3, r2
 800c450:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f003 0320 	and.w	r3, r3, #32
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d00a      	beq.n	800c476 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c460:	4b76      	ldr	r3, [pc, #472]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c466:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	699b      	ldr	r3, [r3, #24]
 800c46e:	4973      	ldr	r1, [pc, #460]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c470:	4313      	orrs	r3, r2
 800c472:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d00a      	beq.n	800c498 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c482:	4b6e      	ldr	r3, [pc, #440]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c488:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	69db      	ldr	r3, [r3, #28]
 800c490:	496a      	ldr	r1, [pc, #424]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c492:	4313      	orrs	r3, r2
 800c494:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d00a      	beq.n	800c4ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c4a4:	4b65      	ldr	r3, [pc, #404]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c4a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c4aa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6a1b      	ldr	r3, [r3, #32]
 800c4b2:	4962      	ldr	r1, [pc, #392]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c4b4:	4313      	orrs	r3, r2
 800c4b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d00a      	beq.n	800c4dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c4c6:	4b5d      	ldr	r3, [pc, #372]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c4c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c4cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4d4:	4959      	ldr	r1, [pc, #356]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d00a      	beq.n	800c4fe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c4e8:	4b54      	ldr	r3, [pc, #336]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c4ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c4ee:	f023 0203 	bic.w	r2, r3, #3
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4f6:	4951      	ldr	r1, [pc, #324]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c4f8:	4313      	orrs	r3, r2
 800c4fa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c506:	2b00      	cmp	r3, #0
 800c508:	d00a      	beq.n	800c520 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c50a:	4b4c      	ldr	r3, [pc, #304]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c50c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c510:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c518:	4948      	ldr	r1, [pc, #288]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c51a:	4313      	orrs	r3, r2
 800c51c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d015      	beq.n	800c558 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c52c:	4b43      	ldr	r3, [pc, #268]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c52e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c532:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c53a:	4940      	ldr	r1, [pc, #256]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c53c:	4313      	orrs	r3, r2
 800c53e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c546:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c54a:	d105      	bne.n	800c558 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c54c:	4b3b      	ldr	r3, [pc, #236]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c54e:	68db      	ldr	r3, [r3, #12]
 800c550:	4a3a      	ldr	r2, [pc, #232]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c552:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c556:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c560:	2b00      	cmp	r3, #0
 800c562:	d015      	beq.n	800c590 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c564:	4b35      	ldr	r3, [pc, #212]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c56a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c572:	4932      	ldr	r1, [pc, #200]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c574:	4313      	orrs	r3, r2
 800c576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c57e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c582:	d105      	bne.n	800c590 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c584:	4b2d      	ldr	r3, [pc, #180]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c586:	68db      	ldr	r3, [r3, #12]
 800c588:	4a2c      	ldr	r2, [pc, #176]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c58a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c58e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d015      	beq.n	800c5c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c59c:	4b27      	ldr	r3, [pc, #156]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c59e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c5a2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5aa:	4924      	ldr	r1, [pc, #144]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c5ac:	4313      	orrs	r3, r2
 800c5ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c5ba:	d105      	bne.n	800c5c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c5bc:	4b1f      	ldr	r3, [pc, #124]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c5be:	68db      	ldr	r3, [r3, #12]
 800c5c0:	4a1e      	ldr	r2, [pc, #120]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c5c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c5c6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d015      	beq.n	800c600 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c5d4:	4b19      	ldr	r3, [pc, #100]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c5d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c5da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5e2:	4916      	ldr	r1, [pc, #88]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c5e4:	4313      	orrs	r3, r2
 800c5e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c5f2:	d105      	bne.n	800c600 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c5f4:	4b11      	ldr	r3, [pc, #68]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c5f6:	68db      	ldr	r3, [r3, #12]
 800c5f8:	4a10      	ldr	r2, [pc, #64]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c5fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c5fe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d019      	beq.n	800c640 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c60c:	4b0b      	ldr	r3, [pc, #44]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c60e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c612:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c61a:	4908      	ldr	r1, [pc, #32]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c61c:	4313      	orrs	r3, r2
 800c61e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c626:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c62a:	d109      	bne.n	800c640 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c62c:	4b03      	ldr	r3, [pc, #12]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c62e:	68db      	ldr	r3, [r3, #12]
 800c630:	4a02      	ldr	r2, [pc, #8]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c632:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c636:	60d3      	str	r3, [r2, #12]
 800c638:	e002      	b.n	800c640 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800c63a:	bf00      	nop
 800c63c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d015      	beq.n	800c678 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800c64c:	4b29      	ldr	r3, [pc, #164]	@ (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c64e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c652:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c65a:	4926      	ldr	r1, [pc, #152]	@ (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c65c:	4313      	orrs	r3, r2
 800c65e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c666:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c66a:	d105      	bne.n	800c678 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c66c:	4b21      	ldr	r3, [pc, #132]	@ (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c66e:	68db      	ldr	r3, [r3, #12]
 800c670:	4a20      	ldr	r2, [pc, #128]	@ (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c672:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c676:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c680:	2b00      	cmp	r3, #0
 800c682:	d015      	beq.n	800c6b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800c684:	4b1b      	ldr	r3, [pc, #108]	@ (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c68a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c692:	4918      	ldr	r1, [pc, #96]	@ (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c694:	4313      	orrs	r3, r2
 800c696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c69e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6a2:	d105      	bne.n	800c6b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c6a4:	4b13      	ldr	r3, [pc, #76]	@ (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c6a6:	68db      	ldr	r3, [r3, #12]
 800c6a8:	4a12      	ldr	r2, [pc, #72]	@ (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c6aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c6ae:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d015      	beq.n	800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c6bc:	4b0d      	ldr	r3, [pc, #52]	@ (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c6be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c6c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c6ca:	490a      	ldr	r1, [pc, #40]	@ (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c6cc:	4313      	orrs	r3, r2
 800c6ce:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c6d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c6da:	d105      	bne.n	800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c6dc:	4b05      	ldr	r3, [pc, #20]	@ (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c6de:	68db      	ldr	r3, [r3, #12]
 800c6e0:	4a04      	ldr	r2, [pc, #16]	@ (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c6e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c6e6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800c6e8:	7cbb      	ldrb	r3, [r7, #18]
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3718      	adds	r7, #24
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
 800c6f2:	bf00      	nop
 800c6f4:	40021000 	.word	0x40021000

0800c6f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b084      	sub	sp, #16
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d101      	bne.n	800c70a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c706:	2301      	movs	r3, #1
 800c708:	e09d      	b.n	800c846 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d108      	bne.n	800c724 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	685b      	ldr	r3, [r3, #4]
 800c716:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c71a:	d009      	beq.n	800c730 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2200      	movs	r2, #0
 800c720:	61da      	str	r2, [r3, #28]
 800c722:	e005      	b.n	800c730 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2200      	movs	r2, #0
 800c728:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2200      	movs	r2, #0
 800c72e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2200      	movs	r2, #0
 800c734:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c73c:	b2db      	uxtb	r3, r3
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d106      	bne.n	800c750 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2200      	movs	r2, #0
 800c746:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f7f7 fab0 	bl	8003cb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2202      	movs	r2, #2
 800c754:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	681a      	ldr	r2, [r3, #0]
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c766:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	68db      	ldr	r3, [r3, #12]
 800c76c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c770:	d902      	bls.n	800c778 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c772:	2300      	movs	r3, #0
 800c774:	60fb      	str	r3, [r7, #12]
 800c776:	e002      	b.n	800c77e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c778:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c77c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	68db      	ldr	r3, [r3, #12]
 800c782:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800c786:	d007      	beq.n	800c798 <HAL_SPI_Init+0xa0>
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	68db      	ldr	r3, [r3, #12]
 800c78c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c790:	d002      	beq.n	800c798 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2200      	movs	r2, #0
 800c796:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	685b      	ldr	r3, [r3, #4]
 800c79c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	689b      	ldr	r3, [r3, #8]
 800c7a4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800c7a8:	431a      	orrs	r2, r3
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	691b      	ldr	r3, [r3, #16]
 800c7ae:	f003 0302 	and.w	r3, r3, #2
 800c7b2:	431a      	orrs	r2, r3
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	695b      	ldr	r3, [r3, #20]
 800c7b8:	f003 0301 	and.w	r3, r3, #1
 800c7bc:	431a      	orrs	r2, r3
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	699b      	ldr	r3, [r3, #24]
 800c7c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c7c6:	431a      	orrs	r2, r3
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	69db      	ldr	r3, [r3, #28]
 800c7cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c7d0:	431a      	orrs	r2, r3
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6a1b      	ldr	r3, [r3, #32]
 800c7d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7da:	ea42 0103 	orr.w	r1, r2, r3
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7e2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	430a      	orrs	r2, r1
 800c7ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	699b      	ldr	r3, [r3, #24]
 800c7f2:	0c1b      	lsrs	r3, r3, #16
 800c7f4:	f003 0204 	and.w	r2, r3, #4
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7fc:	f003 0310 	and.w	r3, r3, #16
 800c800:	431a      	orrs	r2, r3
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c806:	f003 0308 	and.w	r3, r3, #8
 800c80a:	431a      	orrs	r2, r3
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	68db      	ldr	r3, [r3, #12]
 800c810:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800c814:	ea42 0103 	orr.w	r1, r2, r3
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	430a      	orrs	r2, r1
 800c824:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	69da      	ldr	r2, [r3, #28]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c834:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2200      	movs	r2, #0
 800c83a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2201      	movs	r2, #1
 800c840:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800c844:	2300      	movs	r3, #0
}
 800c846:	4618      	mov	r0, r3
 800c848:	3710      	adds	r7, #16
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}

0800c84e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c84e:	b580      	push	{r7, lr}
 800c850:	b088      	sub	sp, #32
 800c852:	af00      	add	r7, sp, #0
 800c854:	60f8      	str	r0, [r7, #12]
 800c856:	60b9      	str	r1, [r7, #8]
 800c858:	603b      	str	r3, [r7, #0]
 800c85a:	4613      	mov	r3, r2
 800c85c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c85e:	f7f7 ffe5 	bl	800482c <HAL_GetTick>
 800c862:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800c864:	88fb      	ldrh	r3, [r7, #6]
 800c866:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c86e:	b2db      	uxtb	r3, r3
 800c870:	2b01      	cmp	r3, #1
 800c872:	d001      	beq.n	800c878 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800c874:	2302      	movs	r3, #2
 800c876:	e15c      	b.n	800cb32 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d002      	beq.n	800c884 <HAL_SPI_Transmit+0x36>
 800c87e:	88fb      	ldrh	r3, [r7, #6]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d101      	bne.n	800c888 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800c884:	2301      	movs	r3, #1
 800c886:	e154      	b.n	800cb32 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800c88e:	2b01      	cmp	r3, #1
 800c890:	d101      	bne.n	800c896 <HAL_SPI_Transmit+0x48>
 800c892:	2302      	movs	r3, #2
 800c894:	e14d      	b.n	800cb32 <HAL_SPI_Transmit+0x2e4>
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	2201      	movs	r2, #1
 800c89a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	2203      	movs	r2, #3
 800c8a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	68ba      	ldr	r2, [r7, #8]
 800c8b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	88fa      	ldrh	r2, [r7, #6]
 800c8b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	88fa      	ldrh	r2, [r7, #6]
 800c8bc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	2200      	movs	r2, #0
 800c8de:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	689b      	ldr	r3, [r3, #8]
 800c8e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c8e8:	d10f      	bne.n	800c90a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	681a      	ldr	r2, [r3, #0]
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c8f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	681a      	ldr	r2, [r3, #0]
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c908:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c914:	2b40      	cmp	r3, #64	@ 0x40
 800c916:	d007      	beq.n	800c928 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	681a      	ldr	r2, [r3, #0]
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c926:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	68db      	ldr	r3, [r3, #12]
 800c92c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c930:	d952      	bls.n	800c9d8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	685b      	ldr	r3, [r3, #4]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d002      	beq.n	800c940 <HAL_SPI_Transmit+0xf2>
 800c93a:	8b7b      	ldrh	r3, [r7, #26]
 800c93c:	2b01      	cmp	r3, #1
 800c93e:	d145      	bne.n	800c9cc <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c944:	881a      	ldrh	r2, [r3, #0]
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c950:	1c9a      	adds	r2, r3, #2
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c95a:	b29b      	uxth	r3, r3
 800c95c:	3b01      	subs	r3, #1
 800c95e:	b29a      	uxth	r2, r3
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c964:	e032      	b.n	800c9cc <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	689b      	ldr	r3, [r3, #8]
 800c96c:	f003 0302 	and.w	r3, r3, #2
 800c970:	2b02      	cmp	r3, #2
 800c972:	d112      	bne.n	800c99a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c978:	881a      	ldrh	r2, [r3, #0]
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c984:	1c9a      	adds	r2, r3, #2
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c98e:	b29b      	uxth	r3, r3
 800c990:	3b01      	subs	r3, #1
 800c992:	b29a      	uxth	r2, r3
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c998:	e018      	b.n	800c9cc <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c99a:	f7f7 ff47 	bl	800482c <HAL_GetTick>
 800c99e:	4602      	mov	r2, r0
 800c9a0:	69fb      	ldr	r3, [r7, #28]
 800c9a2:	1ad3      	subs	r3, r2, r3
 800c9a4:	683a      	ldr	r2, [r7, #0]
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	d803      	bhi.n	800c9b2 <HAL_SPI_Transmit+0x164>
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9b0:	d102      	bne.n	800c9b8 <HAL_SPI_Transmit+0x16a>
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d109      	bne.n	800c9cc <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	2201      	movs	r2, #1
 800c9bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800c9c8:	2303      	movs	r3, #3
 800c9ca:	e0b2      	b.n	800cb32 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c9d0:	b29b      	uxth	r3, r3
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d1c7      	bne.n	800c966 <HAL_SPI_Transmit+0x118>
 800c9d6:	e083      	b.n	800cae0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	685b      	ldr	r3, [r3, #4]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d002      	beq.n	800c9e6 <HAL_SPI_Transmit+0x198>
 800c9e0:	8b7b      	ldrh	r3, [r7, #26]
 800c9e2:	2b01      	cmp	r3, #1
 800c9e4:	d177      	bne.n	800cad6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c9ea:	b29b      	uxth	r3, r3
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	d912      	bls.n	800ca16 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9f4:	881a      	ldrh	r2, [r3, #0]
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca00:	1c9a      	adds	r2, r3, #2
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ca0a:	b29b      	uxth	r3, r3
 800ca0c:	3b02      	subs	r3, #2
 800ca0e:	b29a      	uxth	r2, r3
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ca14:	e05f      	b.n	800cad6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	330c      	adds	r3, #12
 800ca20:	7812      	ldrb	r2, [r2, #0]
 800ca22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca28:	1c5a      	adds	r2, r3, #1
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ca32:	b29b      	uxth	r3, r3
 800ca34:	3b01      	subs	r3, #1
 800ca36:	b29a      	uxth	r2, r3
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800ca3c:	e04b      	b.n	800cad6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	689b      	ldr	r3, [r3, #8]
 800ca44:	f003 0302 	and.w	r3, r3, #2
 800ca48:	2b02      	cmp	r3, #2
 800ca4a:	d12b      	bne.n	800caa4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ca50:	b29b      	uxth	r3, r3
 800ca52:	2b01      	cmp	r3, #1
 800ca54:	d912      	bls.n	800ca7c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca5a:	881a      	ldrh	r2, [r3, #0]
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca66:	1c9a      	adds	r2, r3, #2
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ca70:	b29b      	uxth	r3, r3
 800ca72:	3b02      	subs	r3, #2
 800ca74:	b29a      	uxth	r2, r3
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ca7a:	e02c      	b.n	800cad6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	330c      	adds	r3, #12
 800ca86:	7812      	ldrb	r2, [r2, #0]
 800ca88:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca8e:	1c5a      	adds	r2, r3, #1
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ca98:	b29b      	uxth	r3, r3
 800ca9a:	3b01      	subs	r3, #1
 800ca9c:	b29a      	uxth	r2, r3
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800caa2:	e018      	b.n	800cad6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800caa4:	f7f7 fec2 	bl	800482c <HAL_GetTick>
 800caa8:	4602      	mov	r2, r0
 800caaa:	69fb      	ldr	r3, [r7, #28]
 800caac:	1ad3      	subs	r3, r2, r3
 800caae:	683a      	ldr	r2, [r7, #0]
 800cab0:	429a      	cmp	r2, r3
 800cab2:	d803      	bhi.n	800cabc <HAL_SPI_Transmit+0x26e>
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caba:	d102      	bne.n	800cac2 <HAL_SPI_Transmit+0x274>
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d109      	bne.n	800cad6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	2201      	movs	r2, #1
 800cac6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	2200      	movs	r2, #0
 800cace:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800cad2:	2303      	movs	r3, #3
 800cad4:	e02d      	b.n	800cb32 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cada:	b29b      	uxth	r3, r3
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d1ae      	bne.n	800ca3e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cae0:	69fa      	ldr	r2, [r7, #28]
 800cae2:	6839      	ldr	r1, [r7, #0]
 800cae4:	68f8      	ldr	r0, [r7, #12]
 800cae6:	f000 fad5 	bl	800d094 <SPI_EndRxTxTransaction>
 800caea:	4603      	mov	r3, r0
 800caec:	2b00      	cmp	r3, #0
 800caee:	d002      	beq.n	800caf6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	2220      	movs	r2, #32
 800caf4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	689b      	ldr	r3, [r3, #8]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d10a      	bne.n	800cb14 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cafe:	2300      	movs	r3, #0
 800cb00:	617b      	str	r3, [r7, #20]
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	68db      	ldr	r3, [r3, #12]
 800cb08:	617b      	str	r3, [r7, #20]
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	689b      	ldr	r3, [r3, #8]
 800cb10:	617b      	str	r3, [r7, #20]
 800cb12:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	2201      	movs	r2, #1
 800cb18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d001      	beq.n	800cb30 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	e000      	b.n	800cb32 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800cb30:	2300      	movs	r3, #0
  }
}
 800cb32:	4618      	mov	r0, r3
 800cb34:	3720      	adds	r7, #32
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}
	...

0800cb3c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b084      	sub	sp, #16
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	60f8      	str	r0, [r7, #12]
 800cb44:	60b9      	str	r1, [r7, #8]
 800cb46:	4613      	mov	r3, r2
 800cb48:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800cb50:	b2db      	uxtb	r3, r3
 800cb52:	2b01      	cmp	r3, #1
 800cb54:	d001      	beq.n	800cb5a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800cb56:	2302      	movs	r3, #2
 800cb58:	e0d4      	b.n	800cd04 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d002      	beq.n	800cb66 <HAL_SPI_Transmit_DMA+0x2a>
 800cb60:	88fb      	ldrh	r3, [r7, #6]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d101      	bne.n	800cb6a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800cb66:	2301      	movs	r3, #1
 800cb68:	e0cc      	b.n	800cd04 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800cb70:	2b01      	cmp	r3, #1
 800cb72:	d101      	bne.n	800cb78 <HAL_SPI_Transmit_DMA+0x3c>
 800cb74:	2302      	movs	r3, #2
 800cb76:	e0c5      	b.n	800cd04 <HAL_SPI_Transmit_DMA+0x1c8>
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	2201      	movs	r2, #1
 800cb7c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	2203      	movs	r2, #3
 800cb84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	68ba      	ldr	r2, [r7, #8]
 800cb92:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	88fa      	ldrh	r2, [r7, #6]
 800cb98:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	88fa      	ldrh	r2, [r7, #6]
 800cb9e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	2200      	movs	r2, #0
 800cba4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2200      	movs	r2, #0
 800cbb0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	689b      	ldr	r3, [r3, #8]
 800cbc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cbca:	d10f      	bne.n	800cbec <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	681a      	ldr	r2, [r3, #0]
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cbda:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	681a      	ldr	r2, [r3, #0]
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cbea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cbf0:	4a46      	ldr	r2, [pc, #280]	@ (800cd0c <HAL_SPI_Transmit_DMA+0x1d0>)
 800cbf2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cbf8:	4a45      	ldr	r2, [pc, #276]	@ (800cd10 <HAL_SPI_Transmit_DMA+0x1d4>)
 800cbfa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc00:	4a44      	ldr	r2, [pc, #272]	@ (800cd14 <HAL_SPI_Transmit_DMA+0x1d8>)
 800cc02:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc08:	2200      	movs	r2, #0
 800cc0a:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	685a      	ldr	r2, [r3, #4]
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800cc1a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	68db      	ldr	r3, [r3, #12]
 800cc20:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800cc24:	d82d      	bhi.n	800cc82 <HAL_SPI_Transmit_DMA+0x146>
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc2a:	699b      	ldr	r3, [r3, #24]
 800cc2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cc30:	d127      	bne.n	800cc82 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cc36:	b29b      	uxth	r3, r3
 800cc38:	f003 0301 	and.w	r3, r3, #1
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d10f      	bne.n	800cc60 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	685a      	ldr	r2, [r3, #4]
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800cc4e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cc54:	b29b      	uxth	r3, r3
 800cc56:	085b      	lsrs	r3, r3, #1
 800cc58:	b29a      	uxth	r2, r3
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800cc5e:	e010      	b.n	800cc82 <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	685a      	ldr	r2, [r3, #4]
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cc6e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cc74:	b29b      	uxth	r3, r3
 800cc76:	085b      	lsrs	r3, r3, #1
 800cc78:	b29b      	uxth	r3, r3
 800cc7a:	3301      	adds	r3, #1
 800cc7c:	b29a      	uxth	r2, r3
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	330c      	adds	r3, #12
 800cc92:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cc98:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800cc9a:	f7fa fe37 	bl	800790c <HAL_DMA_Start_IT>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d00b      	beq.n	800ccbc <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cca8:	f043 0210 	orr.w	r2, r3, #16
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800ccb8:	2301      	movs	r3, #1
 800ccba:	e023      	b.n	800cd04 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccc6:	2b40      	cmp	r3, #64	@ 0x40
 800ccc8:	d007      	beq.n	800ccda <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	681a      	ldr	r2, [r3, #0]
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ccd8:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	685a      	ldr	r2, [r3, #4]
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f042 0220 	orr.w	r2, r2, #32
 800ccf0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	685a      	ldr	r2, [r3, #4]
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	f042 0202 	orr.w	r2, r2, #2
 800cd00:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800cd02:	2300      	movs	r3, #0
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	3710      	adds	r7, #16
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}
 800cd0c:	0800cdfb 	.word	0x0800cdfb
 800cd10:	0800cd55 	.word	0x0800cd55
 800cd14:	0800ce17 	.word	0x0800ce17

0800cd18 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b083      	sub	sp, #12
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800cd20:	bf00      	nop
 800cd22:	370c      	adds	r7, #12
 800cd24:	46bd      	mov	sp, r7
 800cd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2a:	4770      	bx	lr

0800cd2c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cd2c:	b480      	push	{r7}
 800cd2e:	b083      	sub	sp, #12
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800cd34:	bf00      	nop
 800cd36:	370c      	adds	r7, #12
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3e:	4770      	bx	lr

0800cd40 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800cd40:	b480      	push	{r7}
 800cd42:	b083      	sub	sp, #12
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800cd48:	bf00      	nop
 800cd4a:	370c      	adds	r7, #12
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd52:	4770      	bx	lr

0800cd54 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b086      	sub	sp, #24
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd60:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cd62:	f7f7 fd63 	bl	800482c <HAL_GetTick>
 800cd66:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f003 0320 	and.w	r3, r3, #32
 800cd72:	2b20      	cmp	r3, #32
 800cd74:	d03b      	beq.n	800cdee <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	685a      	ldr	r2, [r3, #4]
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f022 0220 	bic.w	r2, r2, #32
 800cd84:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	685a      	ldr	r2, [r3, #4]
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	f022 0202 	bic.w	r2, r2, #2
 800cd94:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800cd96:	693a      	ldr	r2, [r7, #16]
 800cd98:	2164      	movs	r1, #100	@ 0x64
 800cd9a:	6978      	ldr	r0, [r7, #20]
 800cd9c:	f000 f97a 	bl	800d094 <SPI_EndRxTxTransaction>
 800cda0:	4603      	mov	r3, r0
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d005      	beq.n	800cdb2 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cdaa:	f043 0220 	orr.w	r2, r3, #32
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	689b      	ldr	r3, [r3, #8]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d10a      	bne.n	800cdd0 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cdba:	2300      	movs	r3, #0
 800cdbc:	60fb      	str	r3, [r7, #12]
 800cdbe:	697b      	ldr	r3, [r7, #20]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	68db      	ldr	r3, [r3, #12]
 800cdc4:	60fb      	str	r3, [r7, #12]
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	689b      	ldr	r3, [r3, #8]
 800cdcc:	60fb      	str	r3, [r7, #12]
 800cdce:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800cdd0:	697b      	ldr	r3, [r7, #20]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	2201      	movs	r2, #1
 800cdda:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cdde:	697b      	ldr	r3, [r7, #20]
 800cde0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d003      	beq.n	800cdee <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800cde6:	6978      	ldr	r0, [r7, #20]
 800cde8:	f7ff ffaa 	bl	800cd40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800cdec:	e002      	b.n	800cdf4 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800cdee:	6978      	ldr	r0, [r7, #20]
 800cdf0:	f7ff ff92 	bl	800cd18 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cdf4:	3718      	adds	r7, #24
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}

0800cdfa <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cdfa:	b580      	push	{r7, lr}
 800cdfc:	b084      	sub	sp, #16
 800cdfe:	af00      	add	r7, sp, #0
 800ce00:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce06:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800ce08:	68f8      	ldr	r0, [r7, #12]
 800ce0a:	f7ff ff8f 	bl	800cd2c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ce0e:	bf00      	nop
 800ce10:	3710      	adds	r7, #16
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}

0800ce16 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ce16:	b580      	push	{r7, lr}
 800ce18:	b084      	sub	sp, #16
 800ce1a:	af00      	add	r7, sp, #0
 800ce1c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce22:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	685a      	ldr	r2, [r3, #4]
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	f022 0203 	bic.w	r2, r2, #3
 800ce32:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce38:	f043 0210 	orr.w	r2, r3, #16
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	2201      	movs	r2, #1
 800ce44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ce48:	68f8      	ldr	r0, [r7, #12]
 800ce4a:	f7ff ff79 	bl	800cd40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ce4e:	bf00      	nop
 800ce50:	3710      	adds	r7, #16
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}
	...

0800ce58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b088      	sub	sp, #32
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	60f8      	str	r0, [r7, #12]
 800ce60:	60b9      	str	r1, [r7, #8]
 800ce62:	603b      	str	r3, [r7, #0]
 800ce64:	4613      	mov	r3, r2
 800ce66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ce68:	f7f7 fce0 	bl	800482c <HAL_GetTick>
 800ce6c:	4602      	mov	r2, r0
 800ce6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce70:	1a9b      	subs	r3, r3, r2
 800ce72:	683a      	ldr	r2, [r7, #0]
 800ce74:	4413      	add	r3, r2
 800ce76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ce78:	f7f7 fcd8 	bl	800482c <HAL_GetTick>
 800ce7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ce7e:	4b39      	ldr	r3, [pc, #228]	@ (800cf64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	015b      	lsls	r3, r3, #5
 800ce84:	0d1b      	lsrs	r3, r3, #20
 800ce86:	69fa      	ldr	r2, [r7, #28]
 800ce88:	fb02 f303 	mul.w	r3, r2, r3
 800ce8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ce8e:	e054      	b.n	800cf3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce96:	d050      	beq.n	800cf3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ce98:	f7f7 fcc8 	bl	800482c <HAL_GetTick>
 800ce9c:	4602      	mov	r2, r0
 800ce9e:	69bb      	ldr	r3, [r7, #24]
 800cea0:	1ad3      	subs	r3, r2, r3
 800cea2:	69fa      	ldr	r2, [r7, #28]
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d902      	bls.n	800ceae <SPI_WaitFlagStateUntilTimeout+0x56>
 800cea8:	69fb      	ldr	r3, [r7, #28]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d13d      	bne.n	800cf2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	685a      	ldr	r2, [r3, #4]
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800cebc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	685b      	ldr	r3, [r3, #4]
 800cec2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800cec6:	d111      	bne.n	800ceec <SPI_WaitFlagStateUntilTimeout+0x94>
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	689b      	ldr	r3, [r3, #8]
 800cecc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ced0:	d004      	beq.n	800cedc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	689b      	ldr	r3, [r3, #8]
 800ced6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ceda:	d107      	bne.n	800ceec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	681a      	ldr	r2, [r3, #0]
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ceea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cef0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cef4:	d10f      	bne.n	800cf16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	681a      	ldr	r2, [r3, #0]
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800cf04:	601a      	str	r2, [r3, #0]
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	681a      	ldr	r2, [r3, #0]
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800cf14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	2201      	movs	r2, #1
 800cf1a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	2200      	movs	r2, #0
 800cf22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800cf26:	2303      	movs	r3, #3
 800cf28:	e017      	b.n	800cf5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d101      	bne.n	800cf34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800cf30:	2300      	movs	r3, #0
 800cf32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	3b01      	subs	r3, #1
 800cf38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	689a      	ldr	r2, [r3, #8]
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	4013      	ands	r3, r2
 800cf44:	68ba      	ldr	r2, [r7, #8]
 800cf46:	429a      	cmp	r2, r3
 800cf48:	bf0c      	ite	eq
 800cf4a:	2301      	moveq	r3, #1
 800cf4c:	2300      	movne	r3, #0
 800cf4e:	b2db      	uxtb	r3, r3
 800cf50:	461a      	mov	r2, r3
 800cf52:	79fb      	ldrb	r3, [r7, #7]
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d19b      	bne.n	800ce90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800cf58:	2300      	movs	r3, #0
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3720      	adds	r7, #32
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
 800cf62:	bf00      	nop
 800cf64:	20000040 	.word	0x20000040

0800cf68 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b08a      	sub	sp, #40	@ 0x28
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	60f8      	str	r0, [r7, #12]
 800cf70:	60b9      	str	r1, [r7, #8]
 800cf72:	607a      	str	r2, [r7, #4]
 800cf74:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800cf76:	2300      	movs	r3, #0
 800cf78:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800cf7a:	f7f7 fc57 	bl	800482c <HAL_GetTick>
 800cf7e:	4602      	mov	r2, r0
 800cf80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf82:	1a9b      	subs	r3, r3, r2
 800cf84:	683a      	ldr	r2, [r7, #0]
 800cf86:	4413      	add	r3, r2
 800cf88:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800cf8a:	f7f7 fc4f 	bl	800482c <HAL_GetTick>
 800cf8e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	330c      	adds	r3, #12
 800cf96:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800cf98:	4b3d      	ldr	r3, [pc, #244]	@ (800d090 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800cf9a:	681a      	ldr	r2, [r3, #0]
 800cf9c:	4613      	mov	r3, r2
 800cf9e:	009b      	lsls	r3, r3, #2
 800cfa0:	4413      	add	r3, r2
 800cfa2:	00da      	lsls	r2, r3, #3
 800cfa4:	1ad3      	subs	r3, r2, r3
 800cfa6:	0d1b      	lsrs	r3, r3, #20
 800cfa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cfaa:	fb02 f303 	mul.w	r3, r2, r3
 800cfae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800cfb0:	e060      	b.n	800d074 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800cfb8:	d107      	bne.n	800cfca <SPI_WaitFifoStateUntilTimeout+0x62>
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d104      	bne.n	800cfca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800cfc0:	69fb      	ldr	r3, [r7, #28]
 800cfc2:	781b      	ldrb	r3, [r3, #0]
 800cfc4:	b2db      	uxtb	r3, r3
 800cfc6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800cfc8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfd0:	d050      	beq.n	800d074 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800cfd2:	f7f7 fc2b 	bl	800482c <HAL_GetTick>
 800cfd6:	4602      	mov	r2, r0
 800cfd8:	6a3b      	ldr	r3, [r7, #32]
 800cfda:	1ad3      	subs	r3, r2, r3
 800cfdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	d902      	bls.n	800cfe8 <SPI_WaitFifoStateUntilTimeout+0x80>
 800cfe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d13d      	bne.n	800d064 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	685a      	ldr	r2, [r3, #4]
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800cff6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d000:	d111      	bne.n	800d026 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	689b      	ldr	r3, [r3, #8]
 800d006:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d00a:	d004      	beq.n	800d016 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	689b      	ldr	r3, [r3, #8]
 800d010:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d014:	d107      	bne.n	800d026 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	681a      	ldr	r2, [r3, #0]
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d024:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d02a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d02e:	d10f      	bne.n	800d050 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	681a      	ldr	r2, [r3, #0]
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d03e:	601a      	str	r2, [r3, #0]
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	681a      	ldr	r2, [r3, #0]
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d04e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	2201      	movs	r2, #1
 800d054:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	2200      	movs	r2, #0
 800d05c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800d060:	2303      	movs	r3, #3
 800d062:	e010      	b.n	800d086 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d064:	69bb      	ldr	r3, [r7, #24]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d101      	bne.n	800d06e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800d06a:	2300      	movs	r3, #0
 800d06c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800d06e:	69bb      	ldr	r3, [r7, #24]
 800d070:	3b01      	subs	r3, #1
 800d072:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	689a      	ldr	r2, [r3, #8]
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	4013      	ands	r3, r2
 800d07e:	687a      	ldr	r2, [r7, #4]
 800d080:	429a      	cmp	r2, r3
 800d082:	d196      	bne.n	800cfb2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800d084:	2300      	movs	r3, #0
}
 800d086:	4618      	mov	r0, r3
 800d088:	3728      	adds	r7, #40	@ 0x28
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}
 800d08e:	bf00      	nop
 800d090:	20000040 	.word	0x20000040

0800d094 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b086      	sub	sp, #24
 800d098:	af02      	add	r7, sp, #8
 800d09a:	60f8      	str	r0, [r7, #12]
 800d09c:	60b9      	str	r1, [r7, #8]
 800d09e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	9300      	str	r3, [sp, #0]
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800d0ac:	68f8      	ldr	r0, [r7, #12]
 800d0ae:	f7ff ff5b 	bl	800cf68 <SPI_WaitFifoStateUntilTimeout>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d007      	beq.n	800d0c8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d0bc:	f043 0220 	orr.w	r2, r3, #32
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d0c4:	2303      	movs	r3, #3
 800d0c6:	e027      	b.n	800d118 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	9300      	str	r3, [sp, #0]
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	2180      	movs	r1, #128	@ 0x80
 800d0d2:	68f8      	ldr	r0, [r7, #12]
 800d0d4:	f7ff fec0 	bl	800ce58 <SPI_WaitFlagStateUntilTimeout>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d007      	beq.n	800d0ee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d0e2:	f043 0220 	orr.w	r2, r3, #32
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d0ea:	2303      	movs	r3, #3
 800d0ec:	e014      	b.n	800d118 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	9300      	str	r3, [sp, #0]
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800d0fa:	68f8      	ldr	r0, [r7, #12]
 800d0fc:	f7ff ff34 	bl	800cf68 <SPI_WaitFifoStateUntilTimeout>
 800d100:	4603      	mov	r3, r0
 800d102:	2b00      	cmp	r3, #0
 800d104:	d007      	beq.n	800d116 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d10a:	f043 0220 	orr.w	r2, r3, #32
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d112:	2303      	movs	r3, #3
 800d114:	e000      	b.n	800d118 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800d116:	2300      	movs	r3, #0
}
 800d118:	4618      	mov	r0, r3
 800d11a:	3710      	adds	r7, #16
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}

0800d120 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b082      	sub	sp, #8
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d101      	bne.n	800d132 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d12e:	2301      	movs	r3, #1
 800d130:	e049      	b.n	800d1c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d138:	b2db      	uxtb	r3, r3
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d106      	bne.n	800d14c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2200      	movs	r2, #0
 800d142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f7f6 ff16 	bl	8003f78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2202      	movs	r2, #2
 800d150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681a      	ldr	r2, [r3, #0]
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	3304      	adds	r3, #4
 800d15c:	4619      	mov	r1, r3
 800d15e:	4610      	mov	r0, r2
 800d160:	f001 f894 	bl	800e28c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2201      	movs	r2, #1
 800d168:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2201      	movs	r2, #1
 800d170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2201      	movs	r2, #1
 800d178:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2201      	movs	r2, #1
 800d180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2201      	movs	r2, #1
 800d188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2201      	movs	r2, #1
 800d190:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2201      	movs	r2, #1
 800d198:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2201      	movs	r2, #1
 800d1a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2201      	movs	r2, #1
 800d1a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2201      	movs	r2, #1
 800d1b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2201      	movs	r2, #1
 800d1b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2201      	movs	r2, #1
 800d1c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d1c4:	2300      	movs	r3, #0
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3708      	adds	r7, #8
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}
	...

0800d1d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b085      	sub	sp, #20
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d1de:	b2db      	uxtb	r3, r3
 800d1e0:	2b01      	cmp	r3, #1
 800d1e2:	d001      	beq.n	800d1e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	e04c      	b.n	800d282 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2202      	movs	r2, #2
 800d1ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	4a26      	ldr	r2, [pc, #152]	@ (800d290 <HAL_TIM_Base_Start+0xc0>)
 800d1f6:	4293      	cmp	r3, r2
 800d1f8:	d022      	beq.n	800d240 <HAL_TIM_Base_Start+0x70>
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d202:	d01d      	beq.n	800d240 <HAL_TIM_Base_Start+0x70>
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	4a22      	ldr	r2, [pc, #136]	@ (800d294 <HAL_TIM_Base_Start+0xc4>)
 800d20a:	4293      	cmp	r3, r2
 800d20c:	d018      	beq.n	800d240 <HAL_TIM_Base_Start+0x70>
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	4a21      	ldr	r2, [pc, #132]	@ (800d298 <HAL_TIM_Base_Start+0xc8>)
 800d214:	4293      	cmp	r3, r2
 800d216:	d013      	beq.n	800d240 <HAL_TIM_Base_Start+0x70>
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	4a1f      	ldr	r2, [pc, #124]	@ (800d29c <HAL_TIM_Base_Start+0xcc>)
 800d21e:	4293      	cmp	r3, r2
 800d220:	d00e      	beq.n	800d240 <HAL_TIM_Base_Start+0x70>
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	4a1e      	ldr	r2, [pc, #120]	@ (800d2a0 <HAL_TIM_Base_Start+0xd0>)
 800d228:	4293      	cmp	r3, r2
 800d22a:	d009      	beq.n	800d240 <HAL_TIM_Base_Start+0x70>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	4a1c      	ldr	r2, [pc, #112]	@ (800d2a4 <HAL_TIM_Base_Start+0xd4>)
 800d232:	4293      	cmp	r3, r2
 800d234:	d004      	beq.n	800d240 <HAL_TIM_Base_Start+0x70>
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	4a1b      	ldr	r2, [pc, #108]	@ (800d2a8 <HAL_TIM_Base_Start+0xd8>)
 800d23c:	4293      	cmp	r3, r2
 800d23e:	d115      	bne.n	800d26c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	689a      	ldr	r2, [r3, #8]
 800d246:	4b19      	ldr	r3, [pc, #100]	@ (800d2ac <HAL_TIM_Base_Start+0xdc>)
 800d248:	4013      	ands	r3, r2
 800d24a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	2b06      	cmp	r3, #6
 800d250:	d015      	beq.n	800d27e <HAL_TIM_Base_Start+0xae>
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d258:	d011      	beq.n	800d27e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	681a      	ldr	r2, [r3, #0]
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	f042 0201 	orr.w	r2, r2, #1
 800d268:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d26a:	e008      	b.n	800d27e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	681a      	ldr	r2, [r3, #0]
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	f042 0201 	orr.w	r2, r2, #1
 800d27a:	601a      	str	r2, [r3, #0]
 800d27c:	e000      	b.n	800d280 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d27e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d280:	2300      	movs	r3, #0
}
 800d282:	4618      	mov	r0, r3
 800d284:	3714      	adds	r7, #20
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr
 800d28e:	bf00      	nop
 800d290:	40012c00 	.word	0x40012c00
 800d294:	40000400 	.word	0x40000400
 800d298:	40000800 	.word	0x40000800
 800d29c:	40000c00 	.word	0x40000c00
 800d2a0:	40013400 	.word	0x40013400
 800d2a4:	40014000 	.word	0x40014000
 800d2a8:	40015000 	.word	0x40015000
 800d2ac:	00010007 	.word	0x00010007

0800d2b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b082      	sub	sp, #8
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d101      	bne.n	800d2c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d2be:	2301      	movs	r3, #1
 800d2c0:	e049      	b.n	800d356 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d2c8:	b2db      	uxtb	r3, r3
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d106      	bne.n	800d2dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d2d6:	6878      	ldr	r0, [r7, #4]
 800d2d8:	f000 f841 	bl	800d35e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2202      	movs	r2, #2
 800d2e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681a      	ldr	r2, [r3, #0]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	3304      	adds	r3, #4
 800d2ec:	4619      	mov	r1, r3
 800d2ee:	4610      	mov	r0, r2
 800d2f0:	f000 ffcc 	bl	800e28c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2201      	movs	r2, #1
 800d300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2201      	movs	r2, #1
 800d308:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2201      	movs	r2, #1
 800d310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2201      	movs	r2, #1
 800d318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2201      	movs	r2, #1
 800d320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2201      	movs	r2, #1
 800d328:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2201      	movs	r2, #1
 800d330:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2201      	movs	r2, #1
 800d338:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2201      	movs	r2, #1
 800d340:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2201      	movs	r2, #1
 800d348:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2201      	movs	r2, #1
 800d350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d354:	2300      	movs	r3, #0
}
 800d356:	4618      	mov	r0, r3
 800d358:	3708      	adds	r7, #8
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}

0800d35e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d35e:	b480      	push	{r7}
 800d360:	b083      	sub	sp, #12
 800d362:	af00      	add	r7, sp, #0
 800d364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d366:	bf00      	nop
 800d368:	370c      	adds	r7, #12
 800d36a:	46bd      	mov	sp, r7
 800d36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d370:	4770      	bx	lr
	...

0800d374 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b084      	sub	sp, #16
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d109      	bne.n	800d398 <HAL_TIM_PWM_Start+0x24>
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d38a:	b2db      	uxtb	r3, r3
 800d38c:	2b01      	cmp	r3, #1
 800d38e:	bf14      	ite	ne
 800d390:	2301      	movne	r3, #1
 800d392:	2300      	moveq	r3, #0
 800d394:	b2db      	uxtb	r3, r3
 800d396:	e03c      	b.n	800d412 <HAL_TIM_PWM_Start+0x9e>
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	2b04      	cmp	r3, #4
 800d39c:	d109      	bne.n	800d3b2 <HAL_TIM_PWM_Start+0x3e>
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d3a4:	b2db      	uxtb	r3, r3
 800d3a6:	2b01      	cmp	r3, #1
 800d3a8:	bf14      	ite	ne
 800d3aa:	2301      	movne	r3, #1
 800d3ac:	2300      	moveq	r3, #0
 800d3ae:	b2db      	uxtb	r3, r3
 800d3b0:	e02f      	b.n	800d412 <HAL_TIM_PWM_Start+0x9e>
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	2b08      	cmp	r3, #8
 800d3b6:	d109      	bne.n	800d3cc <HAL_TIM_PWM_Start+0x58>
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d3be:	b2db      	uxtb	r3, r3
 800d3c0:	2b01      	cmp	r3, #1
 800d3c2:	bf14      	ite	ne
 800d3c4:	2301      	movne	r3, #1
 800d3c6:	2300      	moveq	r3, #0
 800d3c8:	b2db      	uxtb	r3, r3
 800d3ca:	e022      	b.n	800d412 <HAL_TIM_PWM_Start+0x9e>
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	2b0c      	cmp	r3, #12
 800d3d0:	d109      	bne.n	800d3e6 <HAL_TIM_PWM_Start+0x72>
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d3d8:	b2db      	uxtb	r3, r3
 800d3da:	2b01      	cmp	r3, #1
 800d3dc:	bf14      	ite	ne
 800d3de:	2301      	movne	r3, #1
 800d3e0:	2300      	moveq	r3, #0
 800d3e2:	b2db      	uxtb	r3, r3
 800d3e4:	e015      	b.n	800d412 <HAL_TIM_PWM_Start+0x9e>
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	2b10      	cmp	r3, #16
 800d3ea:	d109      	bne.n	800d400 <HAL_TIM_PWM_Start+0x8c>
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d3f2:	b2db      	uxtb	r3, r3
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	bf14      	ite	ne
 800d3f8:	2301      	movne	r3, #1
 800d3fa:	2300      	moveq	r3, #0
 800d3fc:	b2db      	uxtb	r3, r3
 800d3fe:	e008      	b.n	800d412 <HAL_TIM_PWM_Start+0x9e>
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d406:	b2db      	uxtb	r3, r3
 800d408:	2b01      	cmp	r3, #1
 800d40a:	bf14      	ite	ne
 800d40c:	2301      	movne	r3, #1
 800d40e:	2300      	moveq	r3, #0
 800d410:	b2db      	uxtb	r3, r3
 800d412:	2b00      	cmp	r3, #0
 800d414:	d001      	beq.n	800d41a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d416:	2301      	movs	r3, #1
 800d418:	e0a6      	b.n	800d568 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d104      	bne.n	800d42a <HAL_TIM_PWM_Start+0xb6>
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2202      	movs	r2, #2
 800d424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d428:	e023      	b.n	800d472 <HAL_TIM_PWM_Start+0xfe>
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	2b04      	cmp	r3, #4
 800d42e:	d104      	bne.n	800d43a <HAL_TIM_PWM_Start+0xc6>
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2202      	movs	r2, #2
 800d434:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d438:	e01b      	b.n	800d472 <HAL_TIM_PWM_Start+0xfe>
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	2b08      	cmp	r3, #8
 800d43e:	d104      	bne.n	800d44a <HAL_TIM_PWM_Start+0xd6>
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2202      	movs	r2, #2
 800d444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d448:	e013      	b.n	800d472 <HAL_TIM_PWM_Start+0xfe>
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	2b0c      	cmp	r3, #12
 800d44e:	d104      	bne.n	800d45a <HAL_TIM_PWM_Start+0xe6>
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2202      	movs	r2, #2
 800d454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d458:	e00b      	b.n	800d472 <HAL_TIM_PWM_Start+0xfe>
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	2b10      	cmp	r3, #16
 800d45e:	d104      	bne.n	800d46a <HAL_TIM_PWM_Start+0xf6>
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2202      	movs	r2, #2
 800d464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d468:	e003      	b.n	800d472 <HAL_TIM_PWM_Start+0xfe>
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2202      	movs	r2, #2
 800d46e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	2201      	movs	r2, #1
 800d478:	6839      	ldr	r1, [r7, #0]
 800d47a:	4618      	mov	r0, r3
 800d47c:	f001 fb80 	bl	800eb80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	4a3a      	ldr	r2, [pc, #232]	@ (800d570 <HAL_TIM_PWM_Start+0x1fc>)
 800d486:	4293      	cmp	r3, r2
 800d488:	d018      	beq.n	800d4bc <HAL_TIM_PWM_Start+0x148>
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	4a39      	ldr	r2, [pc, #228]	@ (800d574 <HAL_TIM_PWM_Start+0x200>)
 800d490:	4293      	cmp	r3, r2
 800d492:	d013      	beq.n	800d4bc <HAL_TIM_PWM_Start+0x148>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	4a37      	ldr	r2, [pc, #220]	@ (800d578 <HAL_TIM_PWM_Start+0x204>)
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d00e      	beq.n	800d4bc <HAL_TIM_PWM_Start+0x148>
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	4a36      	ldr	r2, [pc, #216]	@ (800d57c <HAL_TIM_PWM_Start+0x208>)
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	d009      	beq.n	800d4bc <HAL_TIM_PWM_Start+0x148>
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	4a34      	ldr	r2, [pc, #208]	@ (800d580 <HAL_TIM_PWM_Start+0x20c>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d004      	beq.n	800d4bc <HAL_TIM_PWM_Start+0x148>
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	4a33      	ldr	r2, [pc, #204]	@ (800d584 <HAL_TIM_PWM_Start+0x210>)
 800d4b8:	4293      	cmp	r3, r2
 800d4ba:	d101      	bne.n	800d4c0 <HAL_TIM_PWM_Start+0x14c>
 800d4bc:	2301      	movs	r3, #1
 800d4be:	e000      	b.n	800d4c2 <HAL_TIM_PWM_Start+0x14e>
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d007      	beq.n	800d4d6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d4d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	4a25      	ldr	r2, [pc, #148]	@ (800d570 <HAL_TIM_PWM_Start+0x1fc>)
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	d022      	beq.n	800d526 <HAL_TIM_PWM_Start+0x1b2>
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d4e8:	d01d      	beq.n	800d526 <HAL_TIM_PWM_Start+0x1b2>
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	4a26      	ldr	r2, [pc, #152]	@ (800d588 <HAL_TIM_PWM_Start+0x214>)
 800d4f0:	4293      	cmp	r3, r2
 800d4f2:	d018      	beq.n	800d526 <HAL_TIM_PWM_Start+0x1b2>
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	4a24      	ldr	r2, [pc, #144]	@ (800d58c <HAL_TIM_PWM_Start+0x218>)
 800d4fa:	4293      	cmp	r3, r2
 800d4fc:	d013      	beq.n	800d526 <HAL_TIM_PWM_Start+0x1b2>
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	4a23      	ldr	r2, [pc, #140]	@ (800d590 <HAL_TIM_PWM_Start+0x21c>)
 800d504:	4293      	cmp	r3, r2
 800d506:	d00e      	beq.n	800d526 <HAL_TIM_PWM_Start+0x1b2>
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	4a19      	ldr	r2, [pc, #100]	@ (800d574 <HAL_TIM_PWM_Start+0x200>)
 800d50e:	4293      	cmp	r3, r2
 800d510:	d009      	beq.n	800d526 <HAL_TIM_PWM_Start+0x1b2>
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	4a18      	ldr	r2, [pc, #96]	@ (800d578 <HAL_TIM_PWM_Start+0x204>)
 800d518:	4293      	cmp	r3, r2
 800d51a:	d004      	beq.n	800d526 <HAL_TIM_PWM_Start+0x1b2>
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	4a18      	ldr	r2, [pc, #96]	@ (800d584 <HAL_TIM_PWM_Start+0x210>)
 800d522:	4293      	cmp	r3, r2
 800d524:	d115      	bne.n	800d552 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	689a      	ldr	r2, [r3, #8]
 800d52c:	4b19      	ldr	r3, [pc, #100]	@ (800d594 <HAL_TIM_PWM_Start+0x220>)
 800d52e:	4013      	ands	r3, r2
 800d530:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	2b06      	cmp	r3, #6
 800d536:	d015      	beq.n	800d564 <HAL_TIM_PWM_Start+0x1f0>
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d53e:	d011      	beq.n	800d564 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	681a      	ldr	r2, [r3, #0]
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	f042 0201 	orr.w	r2, r2, #1
 800d54e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d550:	e008      	b.n	800d564 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	681a      	ldr	r2, [r3, #0]
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f042 0201 	orr.w	r2, r2, #1
 800d560:	601a      	str	r2, [r3, #0]
 800d562:	e000      	b.n	800d566 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d564:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d566:	2300      	movs	r3, #0
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3710      	adds	r7, #16
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}
 800d570:	40012c00 	.word	0x40012c00
 800d574:	40013400 	.word	0x40013400
 800d578:	40014000 	.word	0x40014000
 800d57c:	40014400 	.word	0x40014400
 800d580:	40014800 	.word	0x40014800
 800d584:	40015000 	.word	0x40015000
 800d588:	40000400 	.word	0x40000400
 800d58c:	40000800 	.word	0x40000800
 800d590:	40000c00 	.word	0x40000c00
 800d594:	00010007 	.word	0x00010007

0800d598 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b086      	sub	sp, #24
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	60f8      	str	r0, [r7, #12]
 800d5a0:	60b9      	str	r1, [r7, #8]
 800d5a2:	607a      	str	r2, [r7, #4]
 800d5a4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d109      	bne.n	800d5c4 <HAL_TIM_PWM_Start_DMA+0x2c>
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d5b6:	b2db      	uxtb	r3, r3
 800d5b8:	2b02      	cmp	r3, #2
 800d5ba:	bf0c      	ite	eq
 800d5bc:	2301      	moveq	r3, #1
 800d5be:	2300      	movne	r3, #0
 800d5c0:	b2db      	uxtb	r3, r3
 800d5c2:	e03c      	b.n	800d63e <HAL_TIM_PWM_Start_DMA+0xa6>
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	2b04      	cmp	r3, #4
 800d5c8:	d109      	bne.n	800d5de <HAL_TIM_PWM_Start_DMA+0x46>
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d5d0:	b2db      	uxtb	r3, r3
 800d5d2:	2b02      	cmp	r3, #2
 800d5d4:	bf0c      	ite	eq
 800d5d6:	2301      	moveq	r3, #1
 800d5d8:	2300      	movne	r3, #0
 800d5da:	b2db      	uxtb	r3, r3
 800d5dc:	e02f      	b.n	800d63e <HAL_TIM_PWM_Start_DMA+0xa6>
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	2b08      	cmp	r3, #8
 800d5e2:	d109      	bne.n	800d5f8 <HAL_TIM_PWM_Start_DMA+0x60>
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d5ea:	b2db      	uxtb	r3, r3
 800d5ec:	2b02      	cmp	r3, #2
 800d5ee:	bf0c      	ite	eq
 800d5f0:	2301      	moveq	r3, #1
 800d5f2:	2300      	movne	r3, #0
 800d5f4:	b2db      	uxtb	r3, r3
 800d5f6:	e022      	b.n	800d63e <HAL_TIM_PWM_Start_DMA+0xa6>
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	2b0c      	cmp	r3, #12
 800d5fc:	d109      	bne.n	800d612 <HAL_TIM_PWM_Start_DMA+0x7a>
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d604:	b2db      	uxtb	r3, r3
 800d606:	2b02      	cmp	r3, #2
 800d608:	bf0c      	ite	eq
 800d60a:	2301      	moveq	r3, #1
 800d60c:	2300      	movne	r3, #0
 800d60e:	b2db      	uxtb	r3, r3
 800d610:	e015      	b.n	800d63e <HAL_TIM_PWM_Start_DMA+0xa6>
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	2b10      	cmp	r3, #16
 800d616:	d109      	bne.n	800d62c <HAL_TIM_PWM_Start_DMA+0x94>
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d61e:	b2db      	uxtb	r3, r3
 800d620:	2b02      	cmp	r3, #2
 800d622:	bf0c      	ite	eq
 800d624:	2301      	moveq	r3, #1
 800d626:	2300      	movne	r3, #0
 800d628:	b2db      	uxtb	r3, r3
 800d62a:	e008      	b.n	800d63e <HAL_TIM_PWM_Start_DMA+0xa6>
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d632:	b2db      	uxtb	r3, r3
 800d634:	2b02      	cmp	r3, #2
 800d636:	bf0c      	ite	eq
 800d638:	2301      	moveq	r3, #1
 800d63a:	2300      	movne	r3, #0
 800d63c:	b2db      	uxtb	r3, r3
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d001      	beq.n	800d646 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800d642:	2302      	movs	r3, #2
 800d644:	e1b5      	b.n	800d9b2 <HAL_TIM_PWM_Start_DMA+0x41a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d109      	bne.n	800d660 <HAL_TIM_PWM_Start_DMA+0xc8>
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d652:	b2db      	uxtb	r3, r3
 800d654:	2b01      	cmp	r3, #1
 800d656:	bf0c      	ite	eq
 800d658:	2301      	moveq	r3, #1
 800d65a:	2300      	movne	r3, #0
 800d65c:	b2db      	uxtb	r3, r3
 800d65e:	e03c      	b.n	800d6da <HAL_TIM_PWM_Start_DMA+0x142>
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	2b04      	cmp	r3, #4
 800d664:	d109      	bne.n	800d67a <HAL_TIM_PWM_Start_DMA+0xe2>
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d66c:	b2db      	uxtb	r3, r3
 800d66e:	2b01      	cmp	r3, #1
 800d670:	bf0c      	ite	eq
 800d672:	2301      	moveq	r3, #1
 800d674:	2300      	movne	r3, #0
 800d676:	b2db      	uxtb	r3, r3
 800d678:	e02f      	b.n	800d6da <HAL_TIM_PWM_Start_DMA+0x142>
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	2b08      	cmp	r3, #8
 800d67e:	d109      	bne.n	800d694 <HAL_TIM_PWM_Start_DMA+0xfc>
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d686:	b2db      	uxtb	r3, r3
 800d688:	2b01      	cmp	r3, #1
 800d68a:	bf0c      	ite	eq
 800d68c:	2301      	moveq	r3, #1
 800d68e:	2300      	movne	r3, #0
 800d690:	b2db      	uxtb	r3, r3
 800d692:	e022      	b.n	800d6da <HAL_TIM_PWM_Start_DMA+0x142>
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	2b0c      	cmp	r3, #12
 800d698:	d109      	bne.n	800d6ae <HAL_TIM_PWM_Start_DMA+0x116>
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d6a0:	b2db      	uxtb	r3, r3
 800d6a2:	2b01      	cmp	r3, #1
 800d6a4:	bf0c      	ite	eq
 800d6a6:	2301      	moveq	r3, #1
 800d6a8:	2300      	movne	r3, #0
 800d6aa:	b2db      	uxtb	r3, r3
 800d6ac:	e015      	b.n	800d6da <HAL_TIM_PWM_Start_DMA+0x142>
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	2b10      	cmp	r3, #16
 800d6b2:	d109      	bne.n	800d6c8 <HAL_TIM_PWM_Start_DMA+0x130>
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d6ba:	b2db      	uxtb	r3, r3
 800d6bc:	2b01      	cmp	r3, #1
 800d6be:	bf0c      	ite	eq
 800d6c0:	2301      	moveq	r3, #1
 800d6c2:	2300      	movne	r3, #0
 800d6c4:	b2db      	uxtb	r3, r3
 800d6c6:	e008      	b.n	800d6da <HAL_TIM_PWM_Start_DMA+0x142>
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d6ce:	b2db      	uxtb	r3, r3
 800d6d0:	2b01      	cmp	r3, #1
 800d6d2:	bf0c      	ite	eq
 800d6d4:	2301      	moveq	r3, #1
 800d6d6:	2300      	movne	r3, #0
 800d6d8:	b2db      	uxtb	r3, r3
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d034      	beq.n	800d748 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d002      	beq.n	800d6ea <HAL_TIM_PWM_Start_DMA+0x152>
 800d6e4:	887b      	ldrh	r3, [r7, #2]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d101      	bne.n	800d6ee <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	e161      	b.n	800d9b2 <HAL_TIM_PWM_Start_DMA+0x41a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d104      	bne.n	800d6fe <HAL_TIM_PWM_Start_DMA+0x166>
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	2202      	movs	r2, #2
 800d6f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d6fc:	e026      	b.n	800d74c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	2b04      	cmp	r3, #4
 800d702:	d104      	bne.n	800d70e <HAL_TIM_PWM_Start_DMA+0x176>
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	2202      	movs	r2, #2
 800d708:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d70c:	e01e      	b.n	800d74c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	2b08      	cmp	r3, #8
 800d712:	d104      	bne.n	800d71e <HAL_TIM_PWM_Start_DMA+0x186>
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	2202      	movs	r2, #2
 800d718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d71c:	e016      	b.n	800d74c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	2b0c      	cmp	r3, #12
 800d722:	d104      	bne.n	800d72e <HAL_TIM_PWM_Start_DMA+0x196>
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	2202      	movs	r2, #2
 800d728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d72c:	e00e      	b.n	800d74c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	2b10      	cmp	r3, #16
 800d732:	d104      	bne.n	800d73e <HAL_TIM_PWM_Start_DMA+0x1a6>
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	2202      	movs	r2, #2
 800d738:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d73c:	e006      	b.n	800d74c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	2202      	movs	r2, #2
 800d742:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d746:	e001      	b.n	800d74c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800d748:	2301      	movs	r3, #1
 800d74a:	e132      	b.n	800d9b2 <HAL_TIM_PWM_Start_DMA+0x41a>
  }

  switch (Channel)
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	2b0c      	cmp	r3, #12
 800d750:	f200 80ae 	bhi.w	800d8b0 <HAL_TIM_PWM_Start_DMA+0x318>
 800d754:	a201      	add	r2, pc, #4	@ (adr r2, 800d75c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800d756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d75a:	bf00      	nop
 800d75c:	0800d791 	.word	0x0800d791
 800d760:	0800d8b1 	.word	0x0800d8b1
 800d764:	0800d8b1 	.word	0x0800d8b1
 800d768:	0800d8b1 	.word	0x0800d8b1
 800d76c:	0800d7d9 	.word	0x0800d7d9
 800d770:	0800d8b1 	.word	0x0800d8b1
 800d774:	0800d8b1 	.word	0x0800d8b1
 800d778:	0800d8b1 	.word	0x0800d8b1
 800d77c:	0800d821 	.word	0x0800d821
 800d780:	0800d8b1 	.word	0x0800d8b1
 800d784:	0800d8b1 	.word	0x0800d8b1
 800d788:	0800d8b1 	.word	0x0800d8b1
 800d78c:	0800d869 	.word	0x0800d869
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d794:	4a89      	ldr	r2, [pc, #548]	@ (800d9bc <HAL_TIM_PWM_Start_DMA+0x424>)
 800d796:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d79c:	4a88      	ldr	r2, [pc, #544]	@ (800d9c0 <HAL_TIM_PWM_Start_DMA+0x428>)
 800d79e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7a4:	4a87      	ldr	r2, [pc, #540]	@ (800d9c4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800d7a6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800d7ac:	6879      	ldr	r1, [r7, #4]
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	3334      	adds	r3, #52	@ 0x34
 800d7b4:	461a      	mov	r2, r3
 800d7b6:	887b      	ldrh	r3, [r7, #2]
 800d7b8:	f7fa f8a8 	bl	800790c <HAL_DMA_Start_IT>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d001      	beq.n	800d7c6 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800d7c2:	2301      	movs	r3, #1
 800d7c4:	e0f5      	b.n	800d9b2 <HAL_TIM_PWM_Start_DMA+0x41a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	68da      	ldr	r2, [r3, #12]
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d7d4:	60da      	str	r2, [r3, #12]
      break;
 800d7d6:	e06e      	b.n	800d8b6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7dc:	4a77      	ldr	r2, [pc, #476]	@ (800d9bc <HAL_TIM_PWM_Start_DMA+0x424>)
 800d7de:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7e4:	4a76      	ldr	r2, [pc, #472]	@ (800d9c0 <HAL_TIM_PWM_Start_DMA+0x428>)
 800d7e6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7ec:	4a75      	ldr	r2, [pc, #468]	@ (800d9c4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800d7ee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800d7f4:	6879      	ldr	r1, [r7, #4]
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	3338      	adds	r3, #56	@ 0x38
 800d7fc:	461a      	mov	r2, r3
 800d7fe:	887b      	ldrh	r3, [r7, #2]
 800d800:	f7fa f884 	bl	800790c <HAL_DMA_Start_IT>
 800d804:	4603      	mov	r3, r0
 800d806:	2b00      	cmp	r3, #0
 800d808:	d001      	beq.n	800d80e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800d80a:	2301      	movs	r3, #1
 800d80c:	e0d1      	b.n	800d9b2 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	68da      	ldr	r2, [r3, #12]
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d81c:	60da      	str	r2, [r3, #12]
      break;
 800d81e:	e04a      	b.n	800d8b6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d824:	4a65      	ldr	r2, [pc, #404]	@ (800d9bc <HAL_TIM_PWM_Start_DMA+0x424>)
 800d826:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d82c:	4a64      	ldr	r2, [pc, #400]	@ (800d9c0 <HAL_TIM_PWM_Start_DMA+0x428>)
 800d82e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d834:	4a63      	ldr	r2, [pc, #396]	@ (800d9c4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800d836:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800d83c:	6879      	ldr	r1, [r7, #4]
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	333c      	adds	r3, #60	@ 0x3c
 800d844:	461a      	mov	r2, r3
 800d846:	887b      	ldrh	r3, [r7, #2]
 800d848:	f7fa f860 	bl	800790c <HAL_DMA_Start_IT>
 800d84c:	4603      	mov	r3, r0
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d001      	beq.n	800d856 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800d852:	2301      	movs	r3, #1
 800d854:	e0ad      	b.n	800d9b2 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	68da      	ldr	r2, [r3, #12]
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d864:	60da      	str	r2, [r3, #12]
      break;
 800d866:	e026      	b.n	800d8b6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d86c:	4a53      	ldr	r2, [pc, #332]	@ (800d9bc <HAL_TIM_PWM_Start_DMA+0x424>)
 800d86e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d874:	4a52      	ldr	r2, [pc, #328]	@ (800d9c0 <HAL_TIM_PWM_Start_DMA+0x428>)
 800d876:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d87c:	4a51      	ldr	r2, [pc, #324]	@ (800d9c4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800d87e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d884:	6879      	ldr	r1, [r7, #4]
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	3340      	adds	r3, #64	@ 0x40
 800d88c:	461a      	mov	r2, r3
 800d88e:	887b      	ldrh	r3, [r7, #2]
 800d890:	f7fa f83c 	bl	800790c <HAL_DMA_Start_IT>
 800d894:	4603      	mov	r3, r0
 800d896:	2b00      	cmp	r3, #0
 800d898:	d001      	beq.n	800d89e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800d89a:	2301      	movs	r3, #1
 800d89c:	e089      	b.n	800d9b2 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	68da      	ldr	r2, [r3, #12]
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d8ac:	60da      	str	r2, [r3, #12]
      break;
 800d8ae:	e002      	b.n	800d8b6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800d8b0:	2301      	movs	r3, #1
 800d8b2:	75fb      	strb	r3, [r7, #23]
      break;
 800d8b4:	bf00      	nop
  }

  if (status == HAL_OK)
 800d8b6:	7dfb      	ldrb	r3, [r7, #23]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d179      	bne.n	800d9b0 <HAL_TIM_PWM_Start_DMA+0x418>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	2201      	movs	r2, #1
 800d8c2:	68b9      	ldr	r1, [r7, #8]
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f001 f95b 	bl	800eb80 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	4a3e      	ldr	r2, [pc, #248]	@ (800d9c8 <HAL_TIM_PWM_Start_DMA+0x430>)
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	d018      	beq.n	800d906 <HAL_TIM_PWM_Start_DMA+0x36e>
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	4a3c      	ldr	r2, [pc, #240]	@ (800d9cc <HAL_TIM_PWM_Start_DMA+0x434>)
 800d8da:	4293      	cmp	r3, r2
 800d8dc:	d013      	beq.n	800d906 <HAL_TIM_PWM_Start_DMA+0x36e>
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	4a3b      	ldr	r2, [pc, #236]	@ (800d9d0 <HAL_TIM_PWM_Start_DMA+0x438>)
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	d00e      	beq.n	800d906 <HAL_TIM_PWM_Start_DMA+0x36e>
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	4a39      	ldr	r2, [pc, #228]	@ (800d9d4 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	d009      	beq.n	800d906 <HAL_TIM_PWM_Start_DMA+0x36e>
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	4a38      	ldr	r2, [pc, #224]	@ (800d9d8 <HAL_TIM_PWM_Start_DMA+0x440>)
 800d8f8:	4293      	cmp	r3, r2
 800d8fa:	d004      	beq.n	800d906 <HAL_TIM_PWM_Start_DMA+0x36e>
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	4a36      	ldr	r2, [pc, #216]	@ (800d9dc <HAL_TIM_PWM_Start_DMA+0x444>)
 800d902:	4293      	cmp	r3, r2
 800d904:	d101      	bne.n	800d90a <HAL_TIM_PWM_Start_DMA+0x372>
 800d906:	2301      	movs	r3, #1
 800d908:	e000      	b.n	800d90c <HAL_TIM_PWM_Start_DMA+0x374>
 800d90a:	2300      	movs	r3, #0
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d007      	beq.n	800d920 <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d91e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	4a28      	ldr	r2, [pc, #160]	@ (800d9c8 <HAL_TIM_PWM_Start_DMA+0x430>)
 800d926:	4293      	cmp	r3, r2
 800d928:	d022      	beq.n	800d970 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d932:	d01d      	beq.n	800d970 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	4a29      	ldr	r2, [pc, #164]	@ (800d9e0 <HAL_TIM_PWM_Start_DMA+0x448>)
 800d93a:	4293      	cmp	r3, r2
 800d93c:	d018      	beq.n	800d970 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	4a28      	ldr	r2, [pc, #160]	@ (800d9e4 <HAL_TIM_PWM_Start_DMA+0x44c>)
 800d944:	4293      	cmp	r3, r2
 800d946:	d013      	beq.n	800d970 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	4a26      	ldr	r2, [pc, #152]	@ (800d9e8 <HAL_TIM_PWM_Start_DMA+0x450>)
 800d94e:	4293      	cmp	r3, r2
 800d950:	d00e      	beq.n	800d970 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	4a1d      	ldr	r2, [pc, #116]	@ (800d9cc <HAL_TIM_PWM_Start_DMA+0x434>)
 800d958:	4293      	cmp	r3, r2
 800d95a:	d009      	beq.n	800d970 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	4a1b      	ldr	r2, [pc, #108]	@ (800d9d0 <HAL_TIM_PWM_Start_DMA+0x438>)
 800d962:	4293      	cmp	r3, r2
 800d964:	d004      	beq.n	800d970 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	4a1c      	ldr	r2, [pc, #112]	@ (800d9dc <HAL_TIM_PWM_Start_DMA+0x444>)
 800d96c:	4293      	cmp	r3, r2
 800d96e:	d115      	bne.n	800d99c <HAL_TIM_PWM_Start_DMA+0x404>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	689a      	ldr	r2, [r3, #8]
 800d976:	4b1d      	ldr	r3, [pc, #116]	@ (800d9ec <HAL_TIM_PWM_Start_DMA+0x454>)
 800d978:	4013      	ands	r3, r2
 800d97a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d97c:	693b      	ldr	r3, [r7, #16]
 800d97e:	2b06      	cmp	r3, #6
 800d980:	d015      	beq.n	800d9ae <HAL_TIM_PWM_Start_DMA+0x416>
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d988:	d011      	beq.n	800d9ae <HAL_TIM_PWM_Start_DMA+0x416>
      {
        __HAL_TIM_ENABLE(htim);
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	681a      	ldr	r2, [r3, #0]
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	f042 0201 	orr.w	r2, r2, #1
 800d998:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d99a:	e008      	b.n	800d9ae <HAL_TIM_PWM_Start_DMA+0x416>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	681a      	ldr	r2, [r3, #0]
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	f042 0201 	orr.w	r2, r2, #1
 800d9aa:	601a      	str	r2, [r3, #0]
 800d9ac:	e000      	b.n	800d9b0 <HAL_TIM_PWM_Start_DMA+0x418>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d9ae:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800d9b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	3718      	adds	r7, #24
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}
 800d9ba:	bf00      	nop
 800d9bc:	0800e17b 	.word	0x0800e17b
 800d9c0:	0800e223 	.word	0x0800e223
 800d9c4:	0800e0e9 	.word	0x0800e0e9
 800d9c8:	40012c00 	.word	0x40012c00
 800d9cc:	40013400 	.word	0x40013400
 800d9d0:	40014000 	.word	0x40014000
 800d9d4:	40014400 	.word	0x40014400
 800d9d8:	40014800 	.word	0x40014800
 800d9dc:	40015000 	.word	0x40015000
 800d9e0:	40000400 	.word	0x40000400
 800d9e4:	40000800 	.word	0x40000800
 800d9e8:	40000c00 	.word	0x40000c00
 800d9ec:	00010007 	.word	0x00010007

0800d9f0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b086      	sub	sp, #24
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d101      	bne.n	800da04 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800da00:	2301      	movs	r3, #1
 800da02:	e097      	b.n	800db34 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800da0a:	b2db      	uxtb	r3, r3
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d106      	bne.n	800da1e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2200      	movs	r2, #0
 800da14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f7f6 f9bb 	bl	8003d94 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2202      	movs	r2, #2
 800da22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	689b      	ldr	r3, [r3, #8]
 800da2c:	687a      	ldr	r2, [r7, #4]
 800da2e:	6812      	ldr	r2, [r2, #0]
 800da30:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800da34:	f023 0307 	bic.w	r3, r3, #7
 800da38:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681a      	ldr	r2, [r3, #0]
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	3304      	adds	r3, #4
 800da42:	4619      	mov	r1, r3
 800da44:	4610      	mov	r0, r2
 800da46:	f000 fc21 	bl	800e28c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	689b      	ldr	r3, [r3, #8]
 800da50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	699b      	ldr	r3, [r3, #24]
 800da58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	6a1b      	ldr	r3, [r3, #32]
 800da60:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	697a      	ldr	r2, [r7, #20]
 800da68:	4313      	orrs	r3, r2
 800da6a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800da72:	f023 0303 	bic.w	r3, r3, #3
 800da76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	689a      	ldr	r2, [r3, #8]
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	699b      	ldr	r3, [r3, #24]
 800da80:	021b      	lsls	r3, r3, #8
 800da82:	4313      	orrs	r3, r2
 800da84:	693a      	ldr	r2, [r7, #16]
 800da86:	4313      	orrs	r3, r2
 800da88:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800da8a:	693b      	ldr	r3, [r7, #16]
 800da8c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800da90:	f023 030c 	bic.w	r3, r3, #12
 800da94:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800da96:	693b      	ldr	r3, [r7, #16]
 800da98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800da9c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800daa0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	68da      	ldr	r2, [r3, #12]
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	69db      	ldr	r3, [r3, #28]
 800daaa:	021b      	lsls	r3, r3, #8
 800daac:	4313      	orrs	r3, r2
 800daae:	693a      	ldr	r2, [r7, #16]
 800dab0:	4313      	orrs	r3, r2
 800dab2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	691b      	ldr	r3, [r3, #16]
 800dab8:	011a      	lsls	r2, r3, #4
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	6a1b      	ldr	r3, [r3, #32]
 800dabe:	031b      	lsls	r3, r3, #12
 800dac0:	4313      	orrs	r3, r2
 800dac2:	693a      	ldr	r2, [r7, #16]
 800dac4:	4313      	orrs	r3, r2
 800dac6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800dace:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800dad6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	685a      	ldr	r2, [r3, #4]
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	695b      	ldr	r3, [r3, #20]
 800dae0:	011b      	lsls	r3, r3, #4
 800dae2:	4313      	orrs	r3, r2
 800dae4:	68fa      	ldr	r2, [r7, #12]
 800dae6:	4313      	orrs	r3, r2
 800dae8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	697a      	ldr	r2, [r7, #20]
 800daf0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	693a      	ldr	r2, [r7, #16]
 800daf8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	68fa      	ldr	r2, [r7, #12]
 800db00:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2201      	movs	r2, #1
 800db06:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2201      	movs	r2, #1
 800db0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2201      	movs	r2, #1
 800db16:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2201      	movs	r2, #1
 800db1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	2201      	movs	r2, #1
 800db26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2201      	movs	r2, #1
 800db2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800db32:	2300      	movs	r3, #0
}
 800db34:	4618      	mov	r0, r3
 800db36:	3718      	adds	r7, #24
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}

0800db3c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b084      	sub	sp, #16
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
 800db44:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800db4c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800db54:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800db5c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800db64:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d110      	bne.n	800db8e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800db6c:	7bfb      	ldrb	r3, [r7, #15]
 800db6e:	2b01      	cmp	r3, #1
 800db70:	d102      	bne.n	800db78 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800db72:	7b7b      	ldrb	r3, [r7, #13]
 800db74:	2b01      	cmp	r3, #1
 800db76:	d001      	beq.n	800db7c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800db78:	2301      	movs	r3, #1
 800db7a:	e069      	b.n	800dc50 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2202      	movs	r2, #2
 800db80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2202      	movs	r2, #2
 800db88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800db8c:	e031      	b.n	800dbf2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	2b04      	cmp	r3, #4
 800db92:	d110      	bne.n	800dbb6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800db94:	7bbb      	ldrb	r3, [r7, #14]
 800db96:	2b01      	cmp	r3, #1
 800db98:	d102      	bne.n	800dba0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800db9a:	7b3b      	ldrb	r3, [r7, #12]
 800db9c:	2b01      	cmp	r3, #1
 800db9e:	d001      	beq.n	800dba4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800dba0:	2301      	movs	r3, #1
 800dba2:	e055      	b.n	800dc50 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2202      	movs	r2, #2
 800dba8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2202      	movs	r2, #2
 800dbb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dbb4:	e01d      	b.n	800dbf2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800dbb6:	7bfb      	ldrb	r3, [r7, #15]
 800dbb8:	2b01      	cmp	r3, #1
 800dbba:	d108      	bne.n	800dbce <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800dbbc:	7bbb      	ldrb	r3, [r7, #14]
 800dbbe:	2b01      	cmp	r3, #1
 800dbc0:	d105      	bne.n	800dbce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800dbc2:	7b7b      	ldrb	r3, [r7, #13]
 800dbc4:	2b01      	cmp	r3, #1
 800dbc6:	d102      	bne.n	800dbce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800dbc8:	7b3b      	ldrb	r3, [r7, #12]
 800dbca:	2b01      	cmp	r3, #1
 800dbcc:	d001      	beq.n	800dbd2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800dbce:	2301      	movs	r3, #1
 800dbd0:	e03e      	b.n	800dc50 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	2202      	movs	r2, #2
 800dbd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2202      	movs	r2, #2
 800dbde:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2202      	movs	r2, #2
 800dbe6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2202      	movs	r2, #2
 800dbee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d003      	beq.n	800dc00 <HAL_TIM_Encoder_Start+0xc4>
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	2b04      	cmp	r3, #4
 800dbfc:	d008      	beq.n	800dc10 <HAL_TIM_Encoder_Start+0xd4>
 800dbfe:	e00f      	b.n	800dc20 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	2201      	movs	r2, #1
 800dc06:	2100      	movs	r1, #0
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f000 ffb9 	bl	800eb80 <TIM_CCxChannelCmd>
      break;
 800dc0e:	e016      	b.n	800dc3e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	2201      	movs	r2, #1
 800dc16:	2104      	movs	r1, #4
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f000 ffb1 	bl	800eb80 <TIM_CCxChannelCmd>
      break;
 800dc1e:	e00e      	b.n	800dc3e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	2201      	movs	r2, #1
 800dc26:	2100      	movs	r1, #0
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f000 ffa9 	bl	800eb80 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	2201      	movs	r2, #1
 800dc34:	2104      	movs	r1, #4
 800dc36:	4618      	mov	r0, r3
 800dc38:	f000 ffa2 	bl	800eb80 <TIM_CCxChannelCmd>
      break;
 800dc3c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	681a      	ldr	r2, [r3, #0]
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f042 0201 	orr.w	r2, r2, #1
 800dc4c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800dc4e:	2300      	movs	r3, #0
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3710      	adds	r7, #16
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b086      	sub	sp, #24
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	60f8      	str	r0, [r7, #12]
 800dc60:	60b9      	str	r1, [r7, #8]
 800dc62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dc64:	2300      	movs	r3, #0
 800dc66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dc6e:	2b01      	cmp	r3, #1
 800dc70:	d101      	bne.n	800dc76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800dc72:	2302      	movs	r3, #2
 800dc74:	e0ff      	b.n	800de76 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	2201      	movs	r2, #1
 800dc7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	2b14      	cmp	r3, #20
 800dc82:	f200 80f0 	bhi.w	800de66 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800dc86:	a201      	add	r2, pc, #4	@ (adr r2, 800dc8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800dc88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc8c:	0800dce1 	.word	0x0800dce1
 800dc90:	0800de67 	.word	0x0800de67
 800dc94:	0800de67 	.word	0x0800de67
 800dc98:	0800de67 	.word	0x0800de67
 800dc9c:	0800dd21 	.word	0x0800dd21
 800dca0:	0800de67 	.word	0x0800de67
 800dca4:	0800de67 	.word	0x0800de67
 800dca8:	0800de67 	.word	0x0800de67
 800dcac:	0800dd63 	.word	0x0800dd63
 800dcb0:	0800de67 	.word	0x0800de67
 800dcb4:	0800de67 	.word	0x0800de67
 800dcb8:	0800de67 	.word	0x0800de67
 800dcbc:	0800dda3 	.word	0x0800dda3
 800dcc0:	0800de67 	.word	0x0800de67
 800dcc4:	0800de67 	.word	0x0800de67
 800dcc8:	0800de67 	.word	0x0800de67
 800dccc:	0800dde5 	.word	0x0800dde5
 800dcd0:	0800de67 	.word	0x0800de67
 800dcd4:	0800de67 	.word	0x0800de67
 800dcd8:	0800de67 	.word	0x0800de67
 800dcdc:	0800de25 	.word	0x0800de25
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	68b9      	ldr	r1, [r7, #8]
 800dce6:	4618      	mov	r0, r3
 800dce8:	f000 fb84 	bl	800e3f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	699a      	ldr	r2, [r3, #24]
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	f042 0208 	orr.w	r2, r2, #8
 800dcfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	699a      	ldr	r2, [r3, #24]
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	f022 0204 	bic.w	r2, r2, #4
 800dd0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	6999      	ldr	r1, [r3, #24]
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	691a      	ldr	r2, [r3, #16]
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	430a      	orrs	r2, r1
 800dd1c:	619a      	str	r2, [r3, #24]
      break;
 800dd1e:	e0a5      	b.n	800de6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	68b9      	ldr	r1, [r7, #8]
 800dd26:	4618      	mov	r0, r3
 800dd28:	f000 fbfe 	bl	800e528 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	699a      	ldr	r2, [r3, #24]
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dd3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	699a      	ldr	r2, [r3, #24]
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dd4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	6999      	ldr	r1, [r3, #24]
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	691b      	ldr	r3, [r3, #16]
 800dd56:	021a      	lsls	r2, r3, #8
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	430a      	orrs	r2, r1
 800dd5e:	619a      	str	r2, [r3, #24]
      break;
 800dd60:	e084      	b.n	800de6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	68b9      	ldr	r1, [r7, #8]
 800dd68:	4618      	mov	r0, r3
 800dd6a:	f000 fc71 	bl	800e650 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	69da      	ldr	r2, [r3, #28]
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	f042 0208 	orr.w	r2, r2, #8
 800dd7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	69da      	ldr	r2, [r3, #28]
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	f022 0204 	bic.w	r2, r2, #4
 800dd8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	69d9      	ldr	r1, [r3, #28]
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	691a      	ldr	r2, [r3, #16]
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	430a      	orrs	r2, r1
 800dd9e:	61da      	str	r2, [r3, #28]
      break;
 800dda0:	e064      	b.n	800de6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	68b9      	ldr	r1, [r7, #8]
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f000 fce3 	bl	800e774 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	69da      	ldr	r2, [r3, #28]
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ddbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	69da      	ldr	r2, [r3, #28]
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ddcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	69d9      	ldr	r1, [r3, #28]
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	691b      	ldr	r3, [r3, #16]
 800ddd8:	021a      	lsls	r2, r3, #8
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	430a      	orrs	r2, r1
 800dde0:	61da      	str	r2, [r3, #28]
      break;
 800dde2:	e043      	b.n	800de6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	68b9      	ldr	r1, [r7, #8]
 800ddea:	4618      	mov	r0, r3
 800ddec:	f000 fd56 	bl	800e89c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	f042 0208 	orr.w	r2, r2, #8
 800ddfe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	f022 0204 	bic.w	r2, r2, #4
 800de0e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	691a      	ldr	r2, [r3, #16]
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	430a      	orrs	r2, r1
 800de20:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800de22:	e023      	b.n	800de6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	68b9      	ldr	r1, [r7, #8]
 800de2a:	4618      	mov	r0, r3
 800de2c:	f000 fda0 	bl	800e970 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800de3e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800de4e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	691b      	ldr	r3, [r3, #16]
 800de5a:	021a      	lsls	r2, r3, #8
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	430a      	orrs	r2, r1
 800de62:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800de64:	e002      	b.n	800de6c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800de66:	2301      	movs	r3, #1
 800de68:	75fb      	strb	r3, [r7, #23]
      break;
 800de6a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	2200      	movs	r2, #0
 800de70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800de74:	7dfb      	ldrb	r3, [r7, #23]
}
 800de76:	4618      	mov	r0, r3
 800de78:	3718      	adds	r7, #24
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}
 800de7e:	bf00      	nop

0800de80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b084      	sub	sp, #16
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
 800de88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800de8a:	2300      	movs	r3, #0
 800de8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800de94:	2b01      	cmp	r3, #1
 800de96:	d101      	bne.n	800de9c <HAL_TIM_ConfigClockSource+0x1c>
 800de98:	2302      	movs	r3, #2
 800de9a:	e0f6      	b.n	800e08a <HAL_TIM_ConfigClockSource+0x20a>
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2201      	movs	r2, #1
 800dea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2202      	movs	r2, #2
 800dea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	689b      	ldr	r3, [r3, #8]
 800deb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800deba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800debe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dec6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	68ba      	ldr	r2, [r7, #8]
 800dece:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	4a6f      	ldr	r2, [pc, #444]	@ (800e094 <HAL_TIM_ConfigClockSource+0x214>)
 800ded6:	4293      	cmp	r3, r2
 800ded8:	f000 80c1 	beq.w	800e05e <HAL_TIM_ConfigClockSource+0x1de>
 800dedc:	4a6d      	ldr	r2, [pc, #436]	@ (800e094 <HAL_TIM_ConfigClockSource+0x214>)
 800dede:	4293      	cmp	r3, r2
 800dee0:	f200 80c6 	bhi.w	800e070 <HAL_TIM_ConfigClockSource+0x1f0>
 800dee4:	4a6c      	ldr	r2, [pc, #432]	@ (800e098 <HAL_TIM_ConfigClockSource+0x218>)
 800dee6:	4293      	cmp	r3, r2
 800dee8:	f000 80b9 	beq.w	800e05e <HAL_TIM_ConfigClockSource+0x1de>
 800deec:	4a6a      	ldr	r2, [pc, #424]	@ (800e098 <HAL_TIM_ConfigClockSource+0x218>)
 800deee:	4293      	cmp	r3, r2
 800def0:	f200 80be 	bhi.w	800e070 <HAL_TIM_ConfigClockSource+0x1f0>
 800def4:	4a69      	ldr	r2, [pc, #420]	@ (800e09c <HAL_TIM_ConfigClockSource+0x21c>)
 800def6:	4293      	cmp	r3, r2
 800def8:	f000 80b1 	beq.w	800e05e <HAL_TIM_ConfigClockSource+0x1de>
 800defc:	4a67      	ldr	r2, [pc, #412]	@ (800e09c <HAL_TIM_ConfigClockSource+0x21c>)
 800defe:	4293      	cmp	r3, r2
 800df00:	f200 80b6 	bhi.w	800e070 <HAL_TIM_ConfigClockSource+0x1f0>
 800df04:	4a66      	ldr	r2, [pc, #408]	@ (800e0a0 <HAL_TIM_ConfigClockSource+0x220>)
 800df06:	4293      	cmp	r3, r2
 800df08:	f000 80a9 	beq.w	800e05e <HAL_TIM_ConfigClockSource+0x1de>
 800df0c:	4a64      	ldr	r2, [pc, #400]	@ (800e0a0 <HAL_TIM_ConfigClockSource+0x220>)
 800df0e:	4293      	cmp	r3, r2
 800df10:	f200 80ae 	bhi.w	800e070 <HAL_TIM_ConfigClockSource+0x1f0>
 800df14:	4a63      	ldr	r2, [pc, #396]	@ (800e0a4 <HAL_TIM_ConfigClockSource+0x224>)
 800df16:	4293      	cmp	r3, r2
 800df18:	f000 80a1 	beq.w	800e05e <HAL_TIM_ConfigClockSource+0x1de>
 800df1c:	4a61      	ldr	r2, [pc, #388]	@ (800e0a4 <HAL_TIM_ConfigClockSource+0x224>)
 800df1e:	4293      	cmp	r3, r2
 800df20:	f200 80a6 	bhi.w	800e070 <HAL_TIM_ConfigClockSource+0x1f0>
 800df24:	4a60      	ldr	r2, [pc, #384]	@ (800e0a8 <HAL_TIM_ConfigClockSource+0x228>)
 800df26:	4293      	cmp	r3, r2
 800df28:	f000 8099 	beq.w	800e05e <HAL_TIM_ConfigClockSource+0x1de>
 800df2c:	4a5e      	ldr	r2, [pc, #376]	@ (800e0a8 <HAL_TIM_ConfigClockSource+0x228>)
 800df2e:	4293      	cmp	r3, r2
 800df30:	f200 809e 	bhi.w	800e070 <HAL_TIM_ConfigClockSource+0x1f0>
 800df34:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800df38:	f000 8091 	beq.w	800e05e <HAL_TIM_ConfigClockSource+0x1de>
 800df3c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800df40:	f200 8096 	bhi.w	800e070 <HAL_TIM_ConfigClockSource+0x1f0>
 800df44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800df48:	f000 8089 	beq.w	800e05e <HAL_TIM_ConfigClockSource+0x1de>
 800df4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800df50:	f200 808e 	bhi.w	800e070 <HAL_TIM_ConfigClockSource+0x1f0>
 800df54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800df58:	d03e      	beq.n	800dfd8 <HAL_TIM_ConfigClockSource+0x158>
 800df5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800df5e:	f200 8087 	bhi.w	800e070 <HAL_TIM_ConfigClockSource+0x1f0>
 800df62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800df66:	f000 8086 	beq.w	800e076 <HAL_TIM_ConfigClockSource+0x1f6>
 800df6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800df6e:	d87f      	bhi.n	800e070 <HAL_TIM_ConfigClockSource+0x1f0>
 800df70:	2b70      	cmp	r3, #112	@ 0x70
 800df72:	d01a      	beq.n	800dfaa <HAL_TIM_ConfigClockSource+0x12a>
 800df74:	2b70      	cmp	r3, #112	@ 0x70
 800df76:	d87b      	bhi.n	800e070 <HAL_TIM_ConfigClockSource+0x1f0>
 800df78:	2b60      	cmp	r3, #96	@ 0x60
 800df7a:	d050      	beq.n	800e01e <HAL_TIM_ConfigClockSource+0x19e>
 800df7c:	2b60      	cmp	r3, #96	@ 0x60
 800df7e:	d877      	bhi.n	800e070 <HAL_TIM_ConfigClockSource+0x1f0>
 800df80:	2b50      	cmp	r3, #80	@ 0x50
 800df82:	d03c      	beq.n	800dffe <HAL_TIM_ConfigClockSource+0x17e>
 800df84:	2b50      	cmp	r3, #80	@ 0x50
 800df86:	d873      	bhi.n	800e070 <HAL_TIM_ConfigClockSource+0x1f0>
 800df88:	2b40      	cmp	r3, #64	@ 0x40
 800df8a:	d058      	beq.n	800e03e <HAL_TIM_ConfigClockSource+0x1be>
 800df8c:	2b40      	cmp	r3, #64	@ 0x40
 800df8e:	d86f      	bhi.n	800e070 <HAL_TIM_ConfigClockSource+0x1f0>
 800df90:	2b30      	cmp	r3, #48	@ 0x30
 800df92:	d064      	beq.n	800e05e <HAL_TIM_ConfigClockSource+0x1de>
 800df94:	2b30      	cmp	r3, #48	@ 0x30
 800df96:	d86b      	bhi.n	800e070 <HAL_TIM_ConfigClockSource+0x1f0>
 800df98:	2b20      	cmp	r3, #32
 800df9a:	d060      	beq.n	800e05e <HAL_TIM_ConfigClockSource+0x1de>
 800df9c:	2b20      	cmp	r3, #32
 800df9e:	d867      	bhi.n	800e070 <HAL_TIM_ConfigClockSource+0x1f0>
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d05c      	beq.n	800e05e <HAL_TIM_ConfigClockSource+0x1de>
 800dfa4:	2b10      	cmp	r3, #16
 800dfa6:	d05a      	beq.n	800e05e <HAL_TIM_ConfigClockSource+0x1de>
 800dfa8:	e062      	b.n	800e070 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800dfba:	f000 fdc1 	bl	800eb40 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	689b      	ldr	r3, [r3, #8]
 800dfc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800dfcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	68ba      	ldr	r2, [r7, #8]
 800dfd4:	609a      	str	r2, [r3, #8]
      break;
 800dfd6:	e04f      	b.n	800e078 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800dfe8:	f000 fdaa 	bl	800eb40 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	689a      	ldr	r2, [r3, #8]
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dffa:	609a      	str	r2, [r3, #8]
      break;
 800dffc:	e03c      	b.n	800e078 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e006:	683b      	ldr	r3, [r7, #0]
 800e008:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e00a:	461a      	mov	r2, r3
 800e00c:	f000 fd1c 	bl	800ea48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	2150      	movs	r1, #80	@ 0x50
 800e016:	4618      	mov	r0, r3
 800e018:	f000 fd75 	bl	800eb06 <TIM_ITRx_SetConfig>
      break;
 800e01c:	e02c      	b.n	800e078 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e02a:	461a      	mov	r2, r3
 800e02c:	f000 fd3b 	bl	800eaa6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	2160      	movs	r1, #96	@ 0x60
 800e036:	4618      	mov	r0, r3
 800e038:	f000 fd65 	bl	800eb06 <TIM_ITRx_SetConfig>
      break;
 800e03c:	e01c      	b.n	800e078 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e04a:	461a      	mov	r2, r3
 800e04c:	f000 fcfc 	bl	800ea48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	2140      	movs	r1, #64	@ 0x40
 800e056:	4618      	mov	r0, r3
 800e058:	f000 fd55 	bl	800eb06 <TIM_ITRx_SetConfig>
      break;
 800e05c:	e00c      	b.n	800e078 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681a      	ldr	r2, [r3, #0]
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	4619      	mov	r1, r3
 800e068:	4610      	mov	r0, r2
 800e06a:	f000 fd4c 	bl	800eb06 <TIM_ITRx_SetConfig>
      break;
 800e06e:	e003      	b.n	800e078 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800e070:	2301      	movs	r3, #1
 800e072:	73fb      	strb	r3, [r7, #15]
      break;
 800e074:	e000      	b.n	800e078 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800e076:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2201      	movs	r2, #1
 800e07c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2200      	movs	r2, #0
 800e084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e088:	7bfb      	ldrb	r3, [r7, #15]
}
 800e08a:	4618      	mov	r0, r3
 800e08c:	3710      	adds	r7, #16
 800e08e:	46bd      	mov	sp, r7
 800e090:	bd80      	pop	{r7, pc}
 800e092:	bf00      	nop
 800e094:	00100070 	.word	0x00100070
 800e098:	00100060 	.word	0x00100060
 800e09c:	00100050 	.word	0x00100050
 800e0a0:	00100040 	.word	0x00100040
 800e0a4:	00100030 	.word	0x00100030
 800e0a8:	00100020 	.word	0x00100020

0800e0ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e0ac:	b480      	push	{r7}
 800e0ae:	b083      	sub	sp, #12
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e0b4:	bf00      	nop
 800e0b6:	370c      	adds	r7, #12
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0be:	4770      	bx	lr

0800e0c0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800e0c0:	b480      	push	{r7}
 800e0c2:	b083      	sub	sp, #12
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800e0c8:	bf00      	nop
 800e0ca:	370c      	adds	r7, #12
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d2:	4770      	bx	lr

0800e0d4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800e0d4:	b480      	push	{r7}
 800e0d6:	b083      	sub	sp, #12
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800e0dc:	bf00      	nop
 800e0de:	370c      	adds	r7, #12
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e6:	4770      	bx	lr

0800e0e8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b084      	sub	sp, #16
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0f4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0fa:	687a      	ldr	r2, [r7, #4]
 800e0fc:	429a      	cmp	r2, r3
 800e0fe:	d107      	bne.n	800e110 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	2201      	movs	r2, #1
 800e104:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	2201      	movs	r2, #1
 800e10a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e10e:	e02a      	b.n	800e166 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e114:	687a      	ldr	r2, [r7, #4]
 800e116:	429a      	cmp	r2, r3
 800e118:	d107      	bne.n	800e12a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	2202      	movs	r2, #2
 800e11e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	2201      	movs	r2, #1
 800e124:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e128:	e01d      	b.n	800e166 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e12e:	687a      	ldr	r2, [r7, #4]
 800e130:	429a      	cmp	r2, r3
 800e132:	d107      	bne.n	800e144 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	2204      	movs	r2, #4
 800e138:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	2201      	movs	r2, #1
 800e13e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e142:	e010      	b.n	800e166 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e148:	687a      	ldr	r2, [r7, #4]
 800e14a:	429a      	cmp	r2, r3
 800e14c:	d107      	bne.n	800e15e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	2208      	movs	r2, #8
 800e152:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	2201      	movs	r2, #1
 800e158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e15c:	e003      	b.n	800e166 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	2201      	movs	r2, #1
 800e162:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800e166:	68f8      	ldr	r0, [r7, #12]
 800e168:	f7ff ffb4 	bl	800e0d4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2200      	movs	r2, #0
 800e170:	771a      	strb	r2, [r3, #28]
}
 800e172:	bf00      	nop
 800e174:	3710      	adds	r7, #16
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}

0800e17a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800e17a:	b580      	push	{r7, lr}
 800e17c:	b084      	sub	sp, #16
 800e17e:	af00      	add	r7, sp, #0
 800e180:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e186:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e18c:	687a      	ldr	r2, [r7, #4]
 800e18e:	429a      	cmp	r2, r3
 800e190:	d10b      	bne.n	800e1aa <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	2201      	movs	r2, #1
 800e196:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	69db      	ldr	r3, [r3, #28]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d136      	bne.n	800e20e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	2201      	movs	r2, #1
 800e1a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e1a8:	e031      	b.n	800e20e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1ae:	687a      	ldr	r2, [r7, #4]
 800e1b0:	429a      	cmp	r2, r3
 800e1b2:	d10b      	bne.n	800e1cc <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	2202      	movs	r2, #2
 800e1b8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	69db      	ldr	r3, [r3, #28]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d125      	bne.n	800e20e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	2201      	movs	r2, #1
 800e1c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e1ca:	e020      	b.n	800e20e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1d0:	687a      	ldr	r2, [r7, #4]
 800e1d2:	429a      	cmp	r2, r3
 800e1d4:	d10b      	bne.n	800e1ee <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	2204      	movs	r2, #4
 800e1da:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	69db      	ldr	r3, [r3, #28]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d114      	bne.n	800e20e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2201      	movs	r2, #1
 800e1e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e1ec:	e00f      	b.n	800e20e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e1f2:	687a      	ldr	r2, [r7, #4]
 800e1f4:	429a      	cmp	r2, r3
 800e1f6:	d10a      	bne.n	800e20e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	2208      	movs	r2, #8
 800e1fc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	69db      	ldr	r3, [r3, #28]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d103      	bne.n	800e20e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	2201      	movs	r2, #1
 800e20a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e20e:	68f8      	ldr	r0, [r7, #12]
 800e210:	f7ff ff4c 	bl	800e0ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	2200      	movs	r2, #0
 800e218:	771a      	strb	r2, [r3, #28]
}
 800e21a:	bf00      	nop
 800e21c:	3710      	adds	r7, #16
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}

0800e222 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e222:	b580      	push	{r7, lr}
 800e224:	b084      	sub	sp, #16
 800e226:	af00      	add	r7, sp, #0
 800e228:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e22e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e234:	687a      	ldr	r2, [r7, #4]
 800e236:	429a      	cmp	r2, r3
 800e238:	d103      	bne.n	800e242 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	2201      	movs	r2, #1
 800e23e:	771a      	strb	r2, [r3, #28]
 800e240:	e019      	b.n	800e276 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e246:	687a      	ldr	r2, [r7, #4]
 800e248:	429a      	cmp	r2, r3
 800e24a:	d103      	bne.n	800e254 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	2202      	movs	r2, #2
 800e250:	771a      	strb	r2, [r3, #28]
 800e252:	e010      	b.n	800e276 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e258:	687a      	ldr	r2, [r7, #4]
 800e25a:	429a      	cmp	r2, r3
 800e25c:	d103      	bne.n	800e266 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	2204      	movs	r2, #4
 800e262:	771a      	strb	r2, [r3, #28]
 800e264:	e007      	b.n	800e276 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e26a:	687a      	ldr	r2, [r7, #4]
 800e26c:	429a      	cmp	r2, r3
 800e26e:	d102      	bne.n	800e276 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	2208      	movs	r2, #8
 800e274:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800e276:	68f8      	ldr	r0, [r7, #12]
 800e278:	f7ff ff22 	bl	800e0c0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	2200      	movs	r2, #0
 800e280:	771a      	strb	r2, [r3, #28]
}
 800e282:	bf00      	nop
 800e284:	3710      	adds	r7, #16
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}
	...

0800e28c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e28c:	b480      	push	{r7}
 800e28e:	b085      	sub	sp, #20
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
 800e294:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	4a4c      	ldr	r2, [pc, #304]	@ (800e3d0 <TIM_Base_SetConfig+0x144>)
 800e2a0:	4293      	cmp	r3, r2
 800e2a2:	d017      	beq.n	800e2d4 <TIM_Base_SetConfig+0x48>
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e2aa:	d013      	beq.n	800e2d4 <TIM_Base_SetConfig+0x48>
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	4a49      	ldr	r2, [pc, #292]	@ (800e3d4 <TIM_Base_SetConfig+0x148>)
 800e2b0:	4293      	cmp	r3, r2
 800e2b2:	d00f      	beq.n	800e2d4 <TIM_Base_SetConfig+0x48>
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	4a48      	ldr	r2, [pc, #288]	@ (800e3d8 <TIM_Base_SetConfig+0x14c>)
 800e2b8:	4293      	cmp	r3, r2
 800e2ba:	d00b      	beq.n	800e2d4 <TIM_Base_SetConfig+0x48>
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	4a47      	ldr	r2, [pc, #284]	@ (800e3dc <TIM_Base_SetConfig+0x150>)
 800e2c0:	4293      	cmp	r3, r2
 800e2c2:	d007      	beq.n	800e2d4 <TIM_Base_SetConfig+0x48>
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	4a46      	ldr	r2, [pc, #280]	@ (800e3e0 <TIM_Base_SetConfig+0x154>)
 800e2c8:	4293      	cmp	r3, r2
 800e2ca:	d003      	beq.n	800e2d4 <TIM_Base_SetConfig+0x48>
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	4a45      	ldr	r2, [pc, #276]	@ (800e3e4 <TIM_Base_SetConfig+0x158>)
 800e2d0:	4293      	cmp	r3, r2
 800e2d2:	d108      	bne.n	800e2e6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e2da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	685b      	ldr	r3, [r3, #4]
 800e2e0:	68fa      	ldr	r2, [r7, #12]
 800e2e2:	4313      	orrs	r3, r2
 800e2e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	4a39      	ldr	r2, [pc, #228]	@ (800e3d0 <TIM_Base_SetConfig+0x144>)
 800e2ea:	4293      	cmp	r3, r2
 800e2ec:	d023      	beq.n	800e336 <TIM_Base_SetConfig+0xaa>
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e2f4:	d01f      	beq.n	800e336 <TIM_Base_SetConfig+0xaa>
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	4a36      	ldr	r2, [pc, #216]	@ (800e3d4 <TIM_Base_SetConfig+0x148>)
 800e2fa:	4293      	cmp	r3, r2
 800e2fc:	d01b      	beq.n	800e336 <TIM_Base_SetConfig+0xaa>
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	4a35      	ldr	r2, [pc, #212]	@ (800e3d8 <TIM_Base_SetConfig+0x14c>)
 800e302:	4293      	cmp	r3, r2
 800e304:	d017      	beq.n	800e336 <TIM_Base_SetConfig+0xaa>
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	4a34      	ldr	r2, [pc, #208]	@ (800e3dc <TIM_Base_SetConfig+0x150>)
 800e30a:	4293      	cmp	r3, r2
 800e30c:	d013      	beq.n	800e336 <TIM_Base_SetConfig+0xaa>
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	4a33      	ldr	r2, [pc, #204]	@ (800e3e0 <TIM_Base_SetConfig+0x154>)
 800e312:	4293      	cmp	r3, r2
 800e314:	d00f      	beq.n	800e336 <TIM_Base_SetConfig+0xaa>
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	4a33      	ldr	r2, [pc, #204]	@ (800e3e8 <TIM_Base_SetConfig+0x15c>)
 800e31a:	4293      	cmp	r3, r2
 800e31c:	d00b      	beq.n	800e336 <TIM_Base_SetConfig+0xaa>
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	4a32      	ldr	r2, [pc, #200]	@ (800e3ec <TIM_Base_SetConfig+0x160>)
 800e322:	4293      	cmp	r3, r2
 800e324:	d007      	beq.n	800e336 <TIM_Base_SetConfig+0xaa>
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	4a31      	ldr	r2, [pc, #196]	@ (800e3f0 <TIM_Base_SetConfig+0x164>)
 800e32a:	4293      	cmp	r3, r2
 800e32c:	d003      	beq.n	800e336 <TIM_Base_SetConfig+0xaa>
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	4a2c      	ldr	r2, [pc, #176]	@ (800e3e4 <TIM_Base_SetConfig+0x158>)
 800e332:	4293      	cmp	r3, r2
 800e334:	d108      	bne.n	800e348 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e33c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	68db      	ldr	r3, [r3, #12]
 800e342:	68fa      	ldr	r2, [r7, #12]
 800e344:	4313      	orrs	r3, r2
 800e346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	695b      	ldr	r3, [r3, #20]
 800e352:	4313      	orrs	r3, r2
 800e354:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	68fa      	ldr	r2, [r7, #12]
 800e35a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	689a      	ldr	r2, [r3, #8]
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	681a      	ldr	r2, [r3, #0]
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	4a18      	ldr	r2, [pc, #96]	@ (800e3d0 <TIM_Base_SetConfig+0x144>)
 800e370:	4293      	cmp	r3, r2
 800e372:	d013      	beq.n	800e39c <TIM_Base_SetConfig+0x110>
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	4a1a      	ldr	r2, [pc, #104]	@ (800e3e0 <TIM_Base_SetConfig+0x154>)
 800e378:	4293      	cmp	r3, r2
 800e37a:	d00f      	beq.n	800e39c <TIM_Base_SetConfig+0x110>
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	4a1a      	ldr	r2, [pc, #104]	@ (800e3e8 <TIM_Base_SetConfig+0x15c>)
 800e380:	4293      	cmp	r3, r2
 800e382:	d00b      	beq.n	800e39c <TIM_Base_SetConfig+0x110>
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	4a19      	ldr	r2, [pc, #100]	@ (800e3ec <TIM_Base_SetConfig+0x160>)
 800e388:	4293      	cmp	r3, r2
 800e38a:	d007      	beq.n	800e39c <TIM_Base_SetConfig+0x110>
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	4a18      	ldr	r2, [pc, #96]	@ (800e3f0 <TIM_Base_SetConfig+0x164>)
 800e390:	4293      	cmp	r3, r2
 800e392:	d003      	beq.n	800e39c <TIM_Base_SetConfig+0x110>
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	4a13      	ldr	r2, [pc, #76]	@ (800e3e4 <TIM_Base_SetConfig+0x158>)
 800e398:	4293      	cmp	r3, r2
 800e39a:	d103      	bne.n	800e3a4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	691a      	ldr	r2, [r3, #16]
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2201      	movs	r2, #1
 800e3a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	691b      	ldr	r3, [r3, #16]
 800e3ae:	f003 0301 	and.w	r3, r3, #1
 800e3b2:	2b01      	cmp	r3, #1
 800e3b4:	d105      	bne.n	800e3c2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	691b      	ldr	r3, [r3, #16]
 800e3ba:	f023 0201 	bic.w	r2, r3, #1
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	611a      	str	r2, [r3, #16]
  }
}
 800e3c2:	bf00      	nop
 800e3c4:	3714      	adds	r7, #20
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3cc:	4770      	bx	lr
 800e3ce:	bf00      	nop
 800e3d0:	40012c00 	.word	0x40012c00
 800e3d4:	40000400 	.word	0x40000400
 800e3d8:	40000800 	.word	0x40000800
 800e3dc:	40000c00 	.word	0x40000c00
 800e3e0:	40013400 	.word	0x40013400
 800e3e4:	40015000 	.word	0x40015000
 800e3e8:	40014000 	.word	0x40014000
 800e3ec:	40014400 	.word	0x40014400
 800e3f0:	40014800 	.word	0x40014800

0800e3f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e3f4:	b480      	push	{r7}
 800e3f6:	b087      	sub	sp, #28
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
 800e3fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6a1b      	ldr	r3, [r3, #32]
 800e402:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	6a1b      	ldr	r3, [r3, #32]
 800e408:	f023 0201 	bic.w	r2, r3, #1
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	685b      	ldr	r3, [r3, #4]
 800e414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	699b      	ldr	r3, [r3, #24]
 800e41a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	f023 0303 	bic.w	r3, r3, #3
 800e42e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	68fa      	ldr	r2, [r7, #12]
 800e436:	4313      	orrs	r3, r2
 800e438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e43a:	697b      	ldr	r3, [r7, #20]
 800e43c:	f023 0302 	bic.w	r3, r3, #2
 800e440:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	689b      	ldr	r3, [r3, #8]
 800e446:	697a      	ldr	r2, [r7, #20]
 800e448:	4313      	orrs	r3, r2
 800e44a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	4a30      	ldr	r2, [pc, #192]	@ (800e510 <TIM_OC1_SetConfig+0x11c>)
 800e450:	4293      	cmp	r3, r2
 800e452:	d013      	beq.n	800e47c <TIM_OC1_SetConfig+0x88>
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	4a2f      	ldr	r2, [pc, #188]	@ (800e514 <TIM_OC1_SetConfig+0x120>)
 800e458:	4293      	cmp	r3, r2
 800e45a:	d00f      	beq.n	800e47c <TIM_OC1_SetConfig+0x88>
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	4a2e      	ldr	r2, [pc, #184]	@ (800e518 <TIM_OC1_SetConfig+0x124>)
 800e460:	4293      	cmp	r3, r2
 800e462:	d00b      	beq.n	800e47c <TIM_OC1_SetConfig+0x88>
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	4a2d      	ldr	r2, [pc, #180]	@ (800e51c <TIM_OC1_SetConfig+0x128>)
 800e468:	4293      	cmp	r3, r2
 800e46a:	d007      	beq.n	800e47c <TIM_OC1_SetConfig+0x88>
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	4a2c      	ldr	r2, [pc, #176]	@ (800e520 <TIM_OC1_SetConfig+0x12c>)
 800e470:	4293      	cmp	r3, r2
 800e472:	d003      	beq.n	800e47c <TIM_OC1_SetConfig+0x88>
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	4a2b      	ldr	r2, [pc, #172]	@ (800e524 <TIM_OC1_SetConfig+0x130>)
 800e478:	4293      	cmp	r3, r2
 800e47a:	d10c      	bne.n	800e496 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e47c:	697b      	ldr	r3, [r7, #20]
 800e47e:	f023 0308 	bic.w	r3, r3, #8
 800e482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	68db      	ldr	r3, [r3, #12]
 800e488:	697a      	ldr	r2, [r7, #20]
 800e48a:	4313      	orrs	r3, r2
 800e48c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e48e:	697b      	ldr	r3, [r7, #20]
 800e490:	f023 0304 	bic.w	r3, r3, #4
 800e494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	4a1d      	ldr	r2, [pc, #116]	@ (800e510 <TIM_OC1_SetConfig+0x11c>)
 800e49a:	4293      	cmp	r3, r2
 800e49c:	d013      	beq.n	800e4c6 <TIM_OC1_SetConfig+0xd2>
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	4a1c      	ldr	r2, [pc, #112]	@ (800e514 <TIM_OC1_SetConfig+0x120>)
 800e4a2:	4293      	cmp	r3, r2
 800e4a4:	d00f      	beq.n	800e4c6 <TIM_OC1_SetConfig+0xd2>
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	4a1b      	ldr	r2, [pc, #108]	@ (800e518 <TIM_OC1_SetConfig+0x124>)
 800e4aa:	4293      	cmp	r3, r2
 800e4ac:	d00b      	beq.n	800e4c6 <TIM_OC1_SetConfig+0xd2>
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	4a1a      	ldr	r2, [pc, #104]	@ (800e51c <TIM_OC1_SetConfig+0x128>)
 800e4b2:	4293      	cmp	r3, r2
 800e4b4:	d007      	beq.n	800e4c6 <TIM_OC1_SetConfig+0xd2>
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	4a19      	ldr	r2, [pc, #100]	@ (800e520 <TIM_OC1_SetConfig+0x12c>)
 800e4ba:	4293      	cmp	r3, r2
 800e4bc:	d003      	beq.n	800e4c6 <TIM_OC1_SetConfig+0xd2>
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	4a18      	ldr	r2, [pc, #96]	@ (800e524 <TIM_OC1_SetConfig+0x130>)
 800e4c2:	4293      	cmp	r3, r2
 800e4c4:	d111      	bne.n	800e4ea <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e4c6:	693b      	ldr	r3, [r7, #16]
 800e4c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e4cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e4ce:	693b      	ldr	r3, [r7, #16]
 800e4d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e4d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	695b      	ldr	r3, [r3, #20]
 800e4da:	693a      	ldr	r2, [r7, #16]
 800e4dc:	4313      	orrs	r3, r2
 800e4de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	699b      	ldr	r3, [r3, #24]
 800e4e4:	693a      	ldr	r2, [r7, #16]
 800e4e6:	4313      	orrs	r3, r2
 800e4e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	693a      	ldr	r2, [r7, #16]
 800e4ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	68fa      	ldr	r2, [r7, #12]
 800e4f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e4f6:	683b      	ldr	r3, [r7, #0]
 800e4f8:	685a      	ldr	r2, [r3, #4]
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	697a      	ldr	r2, [r7, #20]
 800e502:	621a      	str	r2, [r3, #32]
}
 800e504:	bf00      	nop
 800e506:	371c      	adds	r7, #28
 800e508:	46bd      	mov	sp, r7
 800e50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50e:	4770      	bx	lr
 800e510:	40012c00 	.word	0x40012c00
 800e514:	40013400 	.word	0x40013400
 800e518:	40014000 	.word	0x40014000
 800e51c:	40014400 	.word	0x40014400
 800e520:	40014800 	.word	0x40014800
 800e524:	40015000 	.word	0x40015000

0800e528 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e528:	b480      	push	{r7}
 800e52a:	b087      	sub	sp, #28
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
 800e530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6a1b      	ldr	r3, [r3, #32]
 800e536:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	6a1b      	ldr	r3, [r3, #32]
 800e53c:	f023 0210 	bic.w	r2, r3, #16
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	685b      	ldr	r3, [r3, #4]
 800e548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	699b      	ldr	r3, [r3, #24]
 800e54e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e556:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e55a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e562:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e564:	683b      	ldr	r3, [r7, #0]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	021b      	lsls	r3, r3, #8
 800e56a:	68fa      	ldr	r2, [r7, #12]
 800e56c:	4313      	orrs	r3, r2
 800e56e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e570:	697b      	ldr	r3, [r7, #20]
 800e572:	f023 0320 	bic.w	r3, r3, #32
 800e576:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e578:	683b      	ldr	r3, [r7, #0]
 800e57a:	689b      	ldr	r3, [r3, #8]
 800e57c:	011b      	lsls	r3, r3, #4
 800e57e:	697a      	ldr	r2, [r7, #20]
 800e580:	4313      	orrs	r3, r2
 800e582:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	4a2c      	ldr	r2, [pc, #176]	@ (800e638 <TIM_OC2_SetConfig+0x110>)
 800e588:	4293      	cmp	r3, r2
 800e58a:	d007      	beq.n	800e59c <TIM_OC2_SetConfig+0x74>
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	4a2b      	ldr	r2, [pc, #172]	@ (800e63c <TIM_OC2_SetConfig+0x114>)
 800e590:	4293      	cmp	r3, r2
 800e592:	d003      	beq.n	800e59c <TIM_OC2_SetConfig+0x74>
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	4a2a      	ldr	r2, [pc, #168]	@ (800e640 <TIM_OC2_SetConfig+0x118>)
 800e598:	4293      	cmp	r3, r2
 800e59a:	d10d      	bne.n	800e5b8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e5a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	68db      	ldr	r3, [r3, #12]
 800e5a8:	011b      	lsls	r3, r3, #4
 800e5aa:	697a      	ldr	r2, [r7, #20]
 800e5ac:	4313      	orrs	r3, r2
 800e5ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e5b0:	697b      	ldr	r3, [r7, #20]
 800e5b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e5b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	4a1f      	ldr	r2, [pc, #124]	@ (800e638 <TIM_OC2_SetConfig+0x110>)
 800e5bc:	4293      	cmp	r3, r2
 800e5be:	d013      	beq.n	800e5e8 <TIM_OC2_SetConfig+0xc0>
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	4a1e      	ldr	r2, [pc, #120]	@ (800e63c <TIM_OC2_SetConfig+0x114>)
 800e5c4:	4293      	cmp	r3, r2
 800e5c6:	d00f      	beq.n	800e5e8 <TIM_OC2_SetConfig+0xc0>
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	4a1e      	ldr	r2, [pc, #120]	@ (800e644 <TIM_OC2_SetConfig+0x11c>)
 800e5cc:	4293      	cmp	r3, r2
 800e5ce:	d00b      	beq.n	800e5e8 <TIM_OC2_SetConfig+0xc0>
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	4a1d      	ldr	r2, [pc, #116]	@ (800e648 <TIM_OC2_SetConfig+0x120>)
 800e5d4:	4293      	cmp	r3, r2
 800e5d6:	d007      	beq.n	800e5e8 <TIM_OC2_SetConfig+0xc0>
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	4a1c      	ldr	r2, [pc, #112]	@ (800e64c <TIM_OC2_SetConfig+0x124>)
 800e5dc:	4293      	cmp	r3, r2
 800e5de:	d003      	beq.n	800e5e8 <TIM_OC2_SetConfig+0xc0>
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	4a17      	ldr	r2, [pc, #92]	@ (800e640 <TIM_OC2_SetConfig+0x118>)
 800e5e4:	4293      	cmp	r3, r2
 800e5e6:	d113      	bne.n	800e610 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e5e8:	693b      	ldr	r3, [r7, #16]
 800e5ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e5ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e5f0:	693b      	ldr	r3, [r7, #16]
 800e5f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e5f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	695b      	ldr	r3, [r3, #20]
 800e5fc:	009b      	lsls	r3, r3, #2
 800e5fe:	693a      	ldr	r2, [r7, #16]
 800e600:	4313      	orrs	r3, r2
 800e602:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	699b      	ldr	r3, [r3, #24]
 800e608:	009b      	lsls	r3, r3, #2
 800e60a:	693a      	ldr	r2, [r7, #16]
 800e60c:	4313      	orrs	r3, r2
 800e60e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	693a      	ldr	r2, [r7, #16]
 800e614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	68fa      	ldr	r2, [r7, #12]
 800e61a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	685a      	ldr	r2, [r3, #4]
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	697a      	ldr	r2, [r7, #20]
 800e628:	621a      	str	r2, [r3, #32]
}
 800e62a:	bf00      	nop
 800e62c:	371c      	adds	r7, #28
 800e62e:	46bd      	mov	sp, r7
 800e630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e634:	4770      	bx	lr
 800e636:	bf00      	nop
 800e638:	40012c00 	.word	0x40012c00
 800e63c:	40013400 	.word	0x40013400
 800e640:	40015000 	.word	0x40015000
 800e644:	40014000 	.word	0x40014000
 800e648:	40014400 	.word	0x40014400
 800e64c:	40014800 	.word	0x40014800

0800e650 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e650:	b480      	push	{r7}
 800e652:	b087      	sub	sp, #28
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
 800e658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6a1b      	ldr	r3, [r3, #32]
 800e65e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	6a1b      	ldr	r3, [r3, #32]
 800e664:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	685b      	ldr	r3, [r3, #4]
 800e670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	69db      	ldr	r3, [r3, #28]
 800e676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e67e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	f023 0303 	bic.w	r3, r3, #3
 800e68a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	68fa      	ldr	r2, [r7, #12]
 800e692:	4313      	orrs	r3, r2
 800e694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e696:	697b      	ldr	r3, [r7, #20]
 800e698:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e69c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	689b      	ldr	r3, [r3, #8]
 800e6a2:	021b      	lsls	r3, r3, #8
 800e6a4:	697a      	ldr	r2, [r7, #20]
 800e6a6:	4313      	orrs	r3, r2
 800e6a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	4a2b      	ldr	r2, [pc, #172]	@ (800e75c <TIM_OC3_SetConfig+0x10c>)
 800e6ae:	4293      	cmp	r3, r2
 800e6b0:	d007      	beq.n	800e6c2 <TIM_OC3_SetConfig+0x72>
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	4a2a      	ldr	r2, [pc, #168]	@ (800e760 <TIM_OC3_SetConfig+0x110>)
 800e6b6:	4293      	cmp	r3, r2
 800e6b8:	d003      	beq.n	800e6c2 <TIM_OC3_SetConfig+0x72>
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	4a29      	ldr	r2, [pc, #164]	@ (800e764 <TIM_OC3_SetConfig+0x114>)
 800e6be:	4293      	cmp	r3, r2
 800e6c0:	d10d      	bne.n	800e6de <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e6c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	68db      	ldr	r3, [r3, #12]
 800e6ce:	021b      	lsls	r3, r3, #8
 800e6d0:	697a      	ldr	r2, [r7, #20]
 800e6d2:	4313      	orrs	r3, r2
 800e6d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e6d6:	697b      	ldr	r3, [r7, #20]
 800e6d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e6dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	4a1e      	ldr	r2, [pc, #120]	@ (800e75c <TIM_OC3_SetConfig+0x10c>)
 800e6e2:	4293      	cmp	r3, r2
 800e6e4:	d013      	beq.n	800e70e <TIM_OC3_SetConfig+0xbe>
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	4a1d      	ldr	r2, [pc, #116]	@ (800e760 <TIM_OC3_SetConfig+0x110>)
 800e6ea:	4293      	cmp	r3, r2
 800e6ec:	d00f      	beq.n	800e70e <TIM_OC3_SetConfig+0xbe>
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	4a1d      	ldr	r2, [pc, #116]	@ (800e768 <TIM_OC3_SetConfig+0x118>)
 800e6f2:	4293      	cmp	r3, r2
 800e6f4:	d00b      	beq.n	800e70e <TIM_OC3_SetConfig+0xbe>
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	4a1c      	ldr	r2, [pc, #112]	@ (800e76c <TIM_OC3_SetConfig+0x11c>)
 800e6fa:	4293      	cmp	r3, r2
 800e6fc:	d007      	beq.n	800e70e <TIM_OC3_SetConfig+0xbe>
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	4a1b      	ldr	r2, [pc, #108]	@ (800e770 <TIM_OC3_SetConfig+0x120>)
 800e702:	4293      	cmp	r3, r2
 800e704:	d003      	beq.n	800e70e <TIM_OC3_SetConfig+0xbe>
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	4a16      	ldr	r2, [pc, #88]	@ (800e764 <TIM_OC3_SetConfig+0x114>)
 800e70a:	4293      	cmp	r3, r2
 800e70c:	d113      	bne.n	800e736 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e716:	693b      	ldr	r3, [r7, #16]
 800e718:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e71c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	695b      	ldr	r3, [r3, #20]
 800e722:	011b      	lsls	r3, r3, #4
 800e724:	693a      	ldr	r2, [r7, #16]
 800e726:	4313      	orrs	r3, r2
 800e728:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	699b      	ldr	r3, [r3, #24]
 800e72e:	011b      	lsls	r3, r3, #4
 800e730:	693a      	ldr	r2, [r7, #16]
 800e732:	4313      	orrs	r3, r2
 800e734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	693a      	ldr	r2, [r7, #16]
 800e73a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	68fa      	ldr	r2, [r7, #12]
 800e740:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e742:	683b      	ldr	r3, [r7, #0]
 800e744:	685a      	ldr	r2, [r3, #4]
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	697a      	ldr	r2, [r7, #20]
 800e74e:	621a      	str	r2, [r3, #32]
}
 800e750:	bf00      	nop
 800e752:	371c      	adds	r7, #28
 800e754:	46bd      	mov	sp, r7
 800e756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75a:	4770      	bx	lr
 800e75c:	40012c00 	.word	0x40012c00
 800e760:	40013400 	.word	0x40013400
 800e764:	40015000 	.word	0x40015000
 800e768:	40014000 	.word	0x40014000
 800e76c:	40014400 	.word	0x40014400
 800e770:	40014800 	.word	0x40014800

0800e774 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e774:	b480      	push	{r7}
 800e776:	b087      	sub	sp, #28
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
 800e77c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	6a1b      	ldr	r3, [r3, #32]
 800e782:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	6a1b      	ldr	r3, [r3, #32]
 800e788:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	685b      	ldr	r3, [r3, #4]
 800e794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	69db      	ldr	r3, [r3, #28]
 800e79a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e7a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e7a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e7ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	021b      	lsls	r3, r3, #8
 800e7b6:	68fa      	ldr	r2, [r7, #12]
 800e7b8:	4313      	orrs	r3, r2
 800e7ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e7bc:	697b      	ldr	r3, [r7, #20]
 800e7be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e7c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	689b      	ldr	r3, [r3, #8]
 800e7c8:	031b      	lsls	r3, r3, #12
 800e7ca:	697a      	ldr	r2, [r7, #20]
 800e7cc:	4313      	orrs	r3, r2
 800e7ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	4a2c      	ldr	r2, [pc, #176]	@ (800e884 <TIM_OC4_SetConfig+0x110>)
 800e7d4:	4293      	cmp	r3, r2
 800e7d6:	d007      	beq.n	800e7e8 <TIM_OC4_SetConfig+0x74>
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	4a2b      	ldr	r2, [pc, #172]	@ (800e888 <TIM_OC4_SetConfig+0x114>)
 800e7dc:	4293      	cmp	r3, r2
 800e7de:	d003      	beq.n	800e7e8 <TIM_OC4_SetConfig+0x74>
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	4a2a      	ldr	r2, [pc, #168]	@ (800e88c <TIM_OC4_SetConfig+0x118>)
 800e7e4:	4293      	cmp	r3, r2
 800e7e6:	d10d      	bne.n	800e804 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e7ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	68db      	ldr	r3, [r3, #12]
 800e7f4:	031b      	lsls	r3, r3, #12
 800e7f6:	697a      	ldr	r2, [r7, #20]
 800e7f8:	4313      	orrs	r3, r2
 800e7fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e802:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	4a1f      	ldr	r2, [pc, #124]	@ (800e884 <TIM_OC4_SetConfig+0x110>)
 800e808:	4293      	cmp	r3, r2
 800e80a:	d013      	beq.n	800e834 <TIM_OC4_SetConfig+0xc0>
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	4a1e      	ldr	r2, [pc, #120]	@ (800e888 <TIM_OC4_SetConfig+0x114>)
 800e810:	4293      	cmp	r3, r2
 800e812:	d00f      	beq.n	800e834 <TIM_OC4_SetConfig+0xc0>
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	4a1e      	ldr	r2, [pc, #120]	@ (800e890 <TIM_OC4_SetConfig+0x11c>)
 800e818:	4293      	cmp	r3, r2
 800e81a:	d00b      	beq.n	800e834 <TIM_OC4_SetConfig+0xc0>
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	4a1d      	ldr	r2, [pc, #116]	@ (800e894 <TIM_OC4_SetConfig+0x120>)
 800e820:	4293      	cmp	r3, r2
 800e822:	d007      	beq.n	800e834 <TIM_OC4_SetConfig+0xc0>
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	4a1c      	ldr	r2, [pc, #112]	@ (800e898 <TIM_OC4_SetConfig+0x124>)
 800e828:	4293      	cmp	r3, r2
 800e82a:	d003      	beq.n	800e834 <TIM_OC4_SetConfig+0xc0>
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	4a17      	ldr	r2, [pc, #92]	@ (800e88c <TIM_OC4_SetConfig+0x118>)
 800e830:	4293      	cmp	r3, r2
 800e832:	d113      	bne.n	800e85c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e834:	693b      	ldr	r3, [r7, #16]
 800e836:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e83a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800e83c:	693b      	ldr	r3, [r7, #16]
 800e83e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e842:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e844:	683b      	ldr	r3, [r7, #0]
 800e846:	695b      	ldr	r3, [r3, #20]
 800e848:	019b      	lsls	r3, r3, #6
 800e84a:	693a      	ldr	r2, [r7, #16]
 800e84c:	4313      	orrs	r3, r2
 800e84e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	699b      	ldr	r3, [r3, #24]
 800e854:	019b      	lsls	r3, r3, #6
 800e856:	693a      	ldr	r2, [r7, #16]
 800e858:	4313      	orrs	r3, r2
 800e85a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	693a      	ldr	r2, [r7, #16]
 800e860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	68fa      	ldr	r2, [r7, #12]
 800e866:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	685a      	ldr	r2, [r3, #4]
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	697a      	ldr	r2, [r7, #20]
 800e874:	621a      	str	r2, [r3, #32]
}
 800e876:	bf00      	nop
 800e878:	371c      	adds	r7, #28
 800e87a:	46bd      	mov	sp, r7
 800e87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e880:	4770      	bx	lr
 800e882:	bf00      	nop
 800e884:	40012c00 	.word	0x40012c00
 800e888:	40013400 	.word	0x40013400
 800e88c:	40015000 	.word	0x40015000
 800e890:	40014000 	.word	0x40014000
 800e894:	40014400 	.word	0x40014400
 800e898:	40014800 	.word	0x40014800

0800e89c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e89c:	b480      	push	{r7}
 800e89e:	b087      	sub	sp, #28
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
 800e8a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	6a1b      	ldr	r3, [r3, #32]
 800e8aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	6a1b      	ldr	r3, [r3, #32]
 800e8b0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	685b      	ldr	r3, [r3, #4]
 800e8bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e8c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e8ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e8ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	68fa      	ldr	r2, [r7, #12]
 800e8d6:	4313      	orrs	r3, r2
 800e8d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e8da:	693b      	ldr	r3, [r7, #16]
 800e8dc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e8e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	689b      	ldr	r3, [r3, #8]
 800e8e6:	041b      	lsls	r3, r3, #16
 800e8e8:	693a      	ldr	r2, [r7, #16]
 800e8ea:	4313      	orrs	r3, r2
 800e8ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	4a19      	ldr	r2, [pc, #100]	@ (800e958 <TIM_OC5_SetConfig+0xbc>)
 800e8f2:	4293      	cmp	r3, r2
 800e8f4:	d013      	beq.n	800e91e <TIM_OC5_SetConfig+0x82>
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	4a18      	ldr	r2, [pc, #96]	@ (800e95c <TIM_OC5_SetConfig+0xc0>)
 800e8fa:	4293      	cmp	r3, r2
 800e8fc:	d00f      	beq.n	800e91e <TIM_OC5_SetConfig+0x82>
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	4a17      	ldr	r2, [pc, #92]	@ (800e960 <TIM_OC5_SetConfig+0xc4>)
 800e902:	4293      	cmp	r3, r2
 800e904:	d00b      	beq.n	800e91e <TIM_OC5_SetConfig+0x82>
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	4a16      	ldr	r2, [pc, #88]	@ (800e964 <TIM_OC5_SetConfig+0xc8>)
 800e90a:	4293      	cmp	r3, r2
 800e90c:	d007      	beq.n	800e91e <TIM_OC5_SetConfig+0x82>
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	4a15      	ldr	r2, [pc, #84]	@ (800e968 <TIM_OC5_SetConfig+0xcc>)
 800e912:	4293      	cmp	r3, r2
 800e914:	d003      	beq.n	800e91e <TIM_OC5_SetConfig+0x82>
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	4a14      	ldr	r2, [pc, #80]	@ (800e96c <TIM_OC5_SetConfig+0xd0>)
 800e91a:	4293      	cmp	r3, r2
 800e91c:	d109      	bne.n	800e932 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e91e:	697b      	ldr	r3, [r7, #20]
 800e920:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e924:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e926:	683b      	ldr	r3, [r7, #0]
 800e928:	695b      	ldr	r3, [r3, #20]
 800e92a:	021b      	lsls	r3, r3, #8
 800e92c:	697a      	ldr	r2, [r7, #20]
 800e92e:	4313      	orrs	r3, r2
 800e930:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	697a      	ldr	r2, [r7, #20]
 800e936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	68fa      	ldr	r2, [r7, #12]
 800e93c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	685a      	ldr	r2, [r3, #4]
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	693a      	ldr	r2, [r7, #16]
 800e94a:	621a      	str	r2, [r3, #32]
}
 800e94c:	bf00      	nop
 800e94e:	371c      	adds	r7, #28
 800e950:	46bd      	mov	sp, r7
 800e952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e956:	4770      	bx	lr
 800e958:	40012c00 	.word	0x40012c00
 800e95c:	40013400 	.word	0x40013400
 800e960:	40014000 	.word	0x40014000
 800e964:	40014400 	.word	0x40014400
 800e968:	40014800 	.word	0x40014800
 800e96c:	40015000 	.word	0x40015000

0800e970 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e970:	b480      	push	{r7}
 800e972:	b087      	sub	sp, #28
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6a1b      	ldr	r3, [r3, #32]
 800e97e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	6a1b      	ldr	r3, [r3, #32]
 800e984:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	685b      	ldr	r3, [r3, #4]
 800e990:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e99e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e9a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	021b      	lsls	r3, r3, #8
 800e9aa:	68fa      	ldr	r2, [r7, #12]
 800e9ac:	4313      	orrs	r3, r2
 800e9ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e9b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	689b      	ldr	r3, [r3, #8]
 800e9bc:	051b      	lsls	r3, r3, #20
 800e9be:	693a      	ldr	r2, [r7, #16]
 800e9c0:	4313      	orrs	r3, r2
 800e9c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	4a1a      	ldr	r2, [pc, #104]	@ (800ea30 <TIM_OC6_SetConfig+0xc0>)
 800e9c8:	4293      	cmp	r3, r2
 800e9ca:	d013      	beq.n	800e9f4 <TIM_OC6_SetConfig+0x84>
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	4a19      	ldr	r2, [pc, #100]	@ (800ea34 <TIM_OC6_SetConfig+0xc4>)
 800e9d0:	4293      	cmp	r3, r2
 800e9d2:	d00f      	beq.n	800e9f4 <TIM_OC6_SetConfig+0x84>
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	4a18      	ldr	r2, [pc, #96]	@ (800ea38 <TIM_OC6_SetConfig+0xc8>)
 800e9d8:	4293      	cmp	r3, r2
 800e9da:	d00b      	beq.n	800e9f4 <TIM_OC6_SetConfig+0x84>
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	4a17      	ldr	r2, [pc, #92]	@ (800ea3c <TIM_OC6_SetConfig+0xcc>)
 800e9e0:	4293      	cmp	r3, r2
 800e9e2:	d007      	beq.n	800e9f4 <TIM_OC6_SetConfig+0x84>
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	4a16      	ldr	r2, [pc, #88]	@ (800ea40 <TIM_OC6_SetConfig+0xd0>)
 800e9e8:	4293      	cmp	r3, r2
 800e9ea:	d003      	beq.n	800e9f4 <TIM_OC6_SetConfig+0x84>
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	4a15      	ldr	r2, [pc, #84]	@ (800ea44 <TIM_OC6_SetConfig+0xd4>)
 800e9f0:	4293      	cmp	r3, r2
 800e9f2:	d109      	bne.n	800ea08 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e9f4:	697b      	ldr	r3, [r7, #20]
 800e9f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e9fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	695b      	ldr	r3, [r3, #20]
 800ea00:	029b      	lsls	r3, r3, #10
 800ea02:	697a      	ldr	r2, [r7, #20]
 800ea04:	4313      	orrs	r3, r2
 800ea06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	697a      	ldr	r2, [r7, #20]
 800ea0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	68fa      	ldr	r2, [r7, #12]
 800ea12:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ea14:	683b      	ldr	r3, [r7, #0]
 800ea16:	685a      	ldr	r2, [r3, #4]
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	693a      	ldr	r2, [r7, #16]
 800ea20:	621a      	str	r2, [r3, #32]
}
 800ea22:	bf00      	nop
 800ea24:	371c      	adds	r7, #28
 800ea26:	46bd      	mov	sp, r7
 800ea28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2c:	4770      	bx	lr
 800ea2e:	bf00      	nop
 800ea30:	40012c00 	.word	0x40012c00
 800ea34:	40013400 	.word	0x40013400
 800ea38:	40014000 	.word	0x40014000
 800ea3c:	40014400 	.word	0x40014400
 800ea40:	40014800 	.word	0x40014800
 800ea44:	40015000 	.word	0x40015000

0800ea48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ea48:	b480      	push	{r7}
 800ea4a:	b087      	sub	sp, #28
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	60f8      	str	r0, [r7, #12]
 800ea50:	60b9      	str	r1, [r7, #8]
 800ea52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	6a1b      	ldr	r3, [r3, #32]
 800ea58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	6a1b      	ldr	r3, [r3, #32]
 800ea5e:	f023 0201 	bic.w	r2, r3, #1
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	699b      	ldr	r3, [r3, #24]
 800ea6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ea6c:	693b      	ldr	r3, [r7, #16]
 800ea6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ea72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	011b      	lsls	r3, r3, #4
 800ea78:	693a      	ldr	r2, [r7, #16]
 800ea7a:	4313      	orrs	r3, r2
 800ea7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ea7e:	697b      	ldr	r3, [r7, #20]
 800ea80:	f023 030a 	bic.w	r3, r3, #10
 800ea84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ea86:	697a      	ldr	r2, [r7, #20]
 800ea88:	68bb      	ldr	r3, [r7, #8]
 800ea8a:	4313      	orrs	r3, r2
 800ea8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	693a      	ldr	r2, [r7, #16]
 800ea92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	697a      	ldr	r2, [r7, #20]
 800ea98:	621a      	str	r2, [r3, #32]
}
 800ea9a:	bf00      	nop
 800ea9c:	371c      	adds	r7, #28
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa4:	4770      	bx	lr

0800eaa6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800eaa6:	b480      	push	{r7}
 800eaa8:	b087      	sub	sp, #28
 800eaaa:	af00      	add	r7, sp, #0
 800eaac:	60f8      	str	r0, [r7, #12]
 800eaae:	60b9      	str	r1, [r7, #8]
 800eab0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	6a1b      	ldr	r3, [r3, #32]
 800eab6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	6a1b      	ldr	r3, [r3, #32]
 800eabc:	f023 0210 	bic.w	r2, r3, #16
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	699b      	ldr	r3, [r3, #24]
 800eac8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800eaca:	693b      	ldr	r3, [r7, #16]
 800eacc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ead0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	031b      	lsls	r3, r3, #12
 800ead6:	693a      	ldr	r2, [r7, #16]
 800ead8:	4313      	orrs	r3, r2
 800eada:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800eadc:	697b      	ldr	r3, [r7, #20]
 800eade:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800eae2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800eae4:	68bb      	ldr	r3, [r7, #8]
 800eae6:	011b      	lsls	r3, r3, #4
 800eae8:	697a      	ldr	r2, [r7, #20]
 800eaea:	4313      	orrs	r3, r2
 800eaec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	693a      	ldr	r2, [r7, #16]
 800eaf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	697a      	ldr	r2, [r7, #20]
 800eaf8:	621a      	str	r2, [r3, #32]
}
 800eafa:	bf00      	nop
 800eafc:	371c      	adds	r7, #28
 800eafe:	46bd      	mov	sp, r7
 800eb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb04:	4770      	bx	lr

0800eb06 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800eb06:	b480      	push	{r7}
 800eb08:	b085      	sub	sp, #20
 800eb0a:	af00      	add	r7, sp, #0
 800eb0c:	6078      	str	r0, [r7, #4]
 800eb0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	689b      	ldr	r3, [r3, #8]
 800eb14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800eb1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eb20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800eb22:	683a      	ldr	r2, [r7, #0]
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	4313      	orrs	r3, r2
 800eb28:	f043 0307 	orr.w	r3, r3, #7
 800eb2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	68fa      	ldr	r2, [r7, #12]
 800eb32:	609a      	str	r2, [r3, #8]
}
 800eb34:	bf00      	nop
 800eb36:	3714      	adds	r7, #20
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3e:	4770      	bx	lr

0800eb40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800eb40:	b480      	push	{r7}
 800eb42:	b087      	sub	sp, #28
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	60f8      	str	r0, [r7, #12]
 800eb48:	60b9      	str	r1, [r7, #8]
 800eb4a:	607a      	str	r2, [r7, #4]
 800eb4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	689b      	ldr	r3, [r3, #8]
 800eb52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800eb5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800eb5c:	683b      	ldr	r3, [r7, #0]
 800eb5e:	021a      	lsls	r2, r3, #8
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	431a      	orrs	r2, r3
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	4313      	orrs	r3, r2
 800eb68:	697a      	ldr	r2, [r7, #20]
 800eb6a:	4313      	orrs	r3, r2
 800eb6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	697a      	ldr	r2, [r7, #20]
 800eb72:	609a      	str	r2, [r3, #8]
}
 800eb74:	bf00      	nop
 800eb76:	371c      	adds	r7, #28
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7e:	4770      	bx	lr

0800eb80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800eb80:	b480      	push	{r7}
 800eb82:	b087      	sub	sp, #28
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	60f8      	str	r0, [r7, #12]
 800eb88:	60b9      	str	r1, [r7, #8]
 800eb8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	f003 031f 	and.w	r3, r3, #31
 800eb92:	2201      	movs	r2, #1
 800eb94:	fa02 f303 	lsl.w	r3, r2, r3
 800eb98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	6a1a      	ldr	r2, [r3, #32]
 800eb9e:	697b      	ldr	r3, [r7, #20]
 800eba0:	43db      	mvns	r3, r3
 800eba2:	401a      	ands	r2, r3
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	6a1a      	ldr	r2, [r3, #32]
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	f003 031f 	and.w	r3, r3, #31
 800ebb2:	6879      	ldr	r1, [r7, #4]
 800ebb4:	fa01 f303 	lsl.w	r3, r1, r3
 800ebb8:	431a      	orrs	r2, r3
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	621a      	str	r2, [r3, #32]
}
 800ebbe:	bf00      	nop
 800ebc0:	371c      	adds	r7, #28
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc8:	4770      	bx	lr
	...

0800ebcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ebcc:	b480      	push	{r7}
 800ebce:	b085      	sub	sp, #20
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
 800ebd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ebdc:	2b01      	cmp	r3, #1
 800ebde:	d101      	bne.n	800ebe4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ebe0:	2302      	movs	r3, #2
 800ebe2:	e074      	b.n	800ecce <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	2201      	movs	r2, #1
 800ebe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2202      	movs	r2, #2
 800ebf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	685b      	ldr	r3, [r3, #4]
 800ebfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	689b      	ldr	r3, [r3, #8]
 800ec02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	4a34      	ldr	r2, [pc, #208]	@ (800ecdc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ec0a:	4293      	cmp	r3, r2
 800ec0c:	d009      	beq.n	800ec22 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	4a33      	ldr	r2, [pc, #204]	@ (800ece0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ec14:	4293      	cmp	r3, r2
 800ec16:	d004      	beq.n	800ec22 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	4a31      	ldr	r2, [pc, #196]	@ (800ece4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ec1e:	4293      	cmp	r3, r2
 800ec20:	d108      	bne.n	800ec34 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ec28:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ec2a:	683b      	ldr	r3, [r7, #0]
 800ec2c:	685b      	ldr	r3, [r3, #4]
 800ec2e:	68fa      	ldr	r2, [r7, #12]
 800ec30:	4313      	orrs	r3, r2
 800ec32:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800ec3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ec3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	68fa      	ldr	r2, [r7, #12]
 800ec46:	4313      	orrs	r3, r2
 800ec48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	68fa      	ldr	r2, [r7, #12]
 800ec50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	4a21      	ldr	r2, [pc, #132]	@ (800ecdc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ec58:	4293      	cmp	r3, r2
 800ec5a:	d022      	beq.n	800eca2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ec64:	d01d      	beq.n	800eca2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	4a1f      	ldr	r2, [pc, #124]	@ (800ece8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ec6c:	4293      	cmp	r3, r2
 800ec6e:	d018      	beq.n	800eca2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	4a1d      	ldr	r2, [pc, #116]	@ (800ecec <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ec76:	4293      	cmp	r3, r2
 800ec78:	d013      	beq.n	800eca2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	4a1c      	ldr	r2, [pc, #112]	@ (800ecf0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ec80:	4293      	cmp	r3, r2
 800ec82:	d00e      	beq.n	800eca2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	4a15      	ldr	r2, [pc, #84]	@ (800ece0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ec8a:	4293      	cmp	r3, r2
 800ec8c:	d009      	beq.n	800eca2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	4a18      	ldr	r2, [pc, #96]	@ (800ecf4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ec94:	4293      	cmp	r3, r2
 800ec96:	d004      	beq.n	800eca2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	4a11      	ldr	r2, [pc, #68]	@ (800ece4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ec9e:	4293      	cmp	r3, r2
 800eca0:	d10c      	bne.n	800ecbc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eca8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	689b      	ldr	r3, [r3, #8]
 800ecae:	68ba      	ldr	r2, [r7, #8]
 800ecb0:	4313      	orrs	r3, r2
 800ecb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	68ba      	ldr	r2, [r7, #8]
 800ecba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2201      	movs	r2, #1
 800ecc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800eccc:	2300      	movs	r3, #0
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3714      	adds	r7, #20
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd8:	4770      	bx	lr
 800ecda:	bf00      	nop
 800ecdc:	40012c00 	.word	0x40012c00
 800ece0:	40013400 	.word	0x40013400
 800ece4:	40015000 	.word	0x40015000
 800ece8:	40000400 	.word	0x40000400
 800ecec:	40000800 	.word	0x40000800
 800ecf0:	40000c00 	.word	0x40000c00
 800ecf4:	40014000 	.word	0x40014000

0800ecf8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ecf8:	b480      	push	{r7}
 800ecfa:	b085      	sub	sp, #20
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
 800ed00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ed02:	2300      	movs	r3, #0
 800ed04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ed0c:	2b01      	cmp	r3, #1
 800ed0e:	d101      	bne.n	800ed14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ed10:	2302      	movs	r3, #2
 800ed12:	e078      	b.n	800ee06 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2201      	movs	r2, #1
 800ed18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	68db      	ldr	r3, [r3, #12]
 800ed26:	4313      	orrs	r3, r2
 800ed28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	689b      	ldr	r3, [r3, #8]
 800ed34:	4313      	orrs	r3, r2
 800ed36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ed3e:	683b      	ldr	r3, [r7, #0]
 800ed40:	685b      	ldr	r3, [r3, #4]
 800ed42:	4313      	orrs	r3, r2
 800ed44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	4313      	orrs	r3, r2
 800ed52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	691b      	ldr	r3, [r3, #16]
 800ed5e:	4313      	orrs	r3, r2
 800ed60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	695b      	ldr	r3, [r3, #20]
 800ed6c:	4313      	orrs	r3, r2
 800ed6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed7a:	4313      	orrs	r3, r2
 800ed7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	699b      	ldr	r3, [r3, #24]
 800ed88:	041b      	lsls	r3, r3, #16
 800ed8a:	4313      	orrs	r3, r2
 800ed8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	69db      	ldr	r3, [r3, #28]
 800ed98:	4313      	orrs	r3, r2
 800ed9a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	4a1c      	ldr	r2, [pc, #112]	@ (800ee14 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800eda2:	4293      	cmp	r3, r2
 800eda4:	d009      	beq.n	800edba <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	4a1b      	ldr	r2, [pc, #108]	@ (800ee18 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800edac:	4293      	cmp	r3, r2
 800edae:	d004      	beq.n	800edba <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	4a19      	ldr	r2, [pc, #100]	@ (800ee1c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800edb6:	4293      	cmp	r3, r2
 800edb8:	d11c      	bne.n	800edf4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800edc4:	051b      	lsls	r3, r3, #20
 800edc6:	4313      	orrs	r3, r2
 800edc8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	6a1b      	ldr	r3, [r3, #32]
 800edd4:	4313      	orrs	r3, r2
 800edd6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800edde:	683b      	ldr	r3, [r7, #0]
 800ede0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ede2:	4313      	orrs	r3, r2
 800ede4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edf0:	4313      	orrs	r3, r2
 800edf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	68fa      	ldr	r2, [r7, #12]
 800edfa:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2200      	movs	r2, #0
 800ee00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ee04:	2300      	movs	r3, #0
}
 800ee06:	4618      	mov	r0, r3
 800ee08:	3714      	adds	r7, #20
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee10:	4770      	bx	lr
 800ee12:	bf00      	nop
 800ee14:	40012c00 	.word	0x40012c00
 800ee18:	40013400 	.word	0x40013400
 800ee1c:	40015000 	.word	0x40015000

0800ee20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b082      	sub	sp, #8
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d101      	bne.n	800ee32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ee2e:	2301      	movs	r3, #1
 800ee30:	e042      	b.n	800eeb8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d106      	bne.n	800ee4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	2200      	movs	r2, #0
 800ee40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ee44:	6878      	ldr	r0, [r7, #4]
 800ee46:	f7f4 fe1f 	bl	8003a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	2224      	movs	r2, #36	@ 0x24
 800ee4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	681a      	ldr	r2, [r3, #0]
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	f022 0201 	bic.w	r2, r2, #1
 800ee60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d002      	beq.n	800ee70 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f000 fbb2 	bl	800f5d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ee70:	6878      	ldr	r0, [r7, #4]
 800ee72:	f000 f8b3 	bl	800efdc <UART_SetConfig>
 800ee76:	4603      	mov	r3, r0
 800ee78:	2b01      	cmp	r3, #1
 800ee7a:	d101      	bne.n	800ee80 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ee7c:	2301      	movs	r3, #1
 800ee7e:	e01b      	b.n	800eeb8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	685a      	ldr	r2, [r3, #4]
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ee8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	689a      	ldr	r2, [r3, #8]
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ee9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	681a      	ldr	r2, [r3, #0]
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	f042 0201 	orr.w	r2, r2, #1
 800eeae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800eeb0:	6878      	ldr	r0, [r7, #4]
 800eeb2:	f000 fc31 	bl	800f718 <UART_CheckIdleState>
 800eeb6:	4603      	mov	r3, r0
}
 800eeb8:	4618      	mov	r0, r3
 800eeba:	3708      	adds	r7, #8
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bd80      	pop	{r7, pc}

0800eec0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b08a      	sub	sp, #40	@ 0x28
 800eec4:	af02      	add	r7, sp, #8
 800eec6:	60f8      	str	r0, [r7, #12]
 800eec8:	60b9      	str	r1, [r7, #8]
 800eeca:	603b      	str	r3, [r7, #0]
 800eecc:	4613      	mov	r3, r2
 800eece:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eed6:	2b20      	cmp	r3, #32
 800eed8:	d17b      	bne.n	800efd2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800eeda:	68bb      	ldr	r3, [r7, #8]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d002      	beq.n	800eee6 <HAL_UART_Transmit+0x26>
 800eee0:	88fb      	ldrh	r3, [r7, #6]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d101      	bne.n	800eeea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800eee6:	2301      	movs	r3, #1
 800eee8:	e074      	b.n	800efd4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	2200      	movs	r2, #0
 800eeee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	2221      	movs	r2, #33	@ 0x21
 800eef6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800eefa:	f7f5 fc97 	bl	800482c <HAL_GetTick>
 800eefe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	88fa      	ldrh	r2, [r7, #6]
 800ef04:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	88fa      	ldrh	r2, [r7, #6]
 800ef0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	689b      	ldr	r3, [r3, #8]
 800ef14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ef18:	d108      	bne.n	800ef2c <HAL_UART_Transmit+0x6c>
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	691b      	ldr	r3, [r3, #16]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d104      	bne.n	800ef2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ef22:	2300      	movs	r3, #0
 800ef24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ef26:	68bb      	ldr	r3, [r7, #8]
 800ef28:	61bb      	str	r3, [r7, #24]
 800ef2a:	e003      	b.n	800ef34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ef2c:	68bb      	ldr	r3, [r7, #8]
 800ef2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ef30:	2300      	movs	r3, #0
 800ef32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ef34:	e030      	b.n	800ef98 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ef36:	683b      	ldr	r3, [r7, #0]
 800ef38:	9300      	str	r3, [sp, #0]
 800ef3a:	697b      	ldr	r3, [r7, #20]
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	2180      	movs	r1, #128	@ 0x80
 800ef40:	68f8      	ldr	r0, [r7, #12]
 800ef42:	f000 fc93 	bl	800f86c <UART_WaitOnFlagUntilTimeout>
 800ef46:	4603      	mov	r3, r0
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d005      	beq.n	800ef58 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	2220      	movs	r2, #32
 800ef50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ef54:	2303      	movs	r3, #3
 800ef56:	e03d      	b.n	800efd4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ef58:	69fb      	ldr	r3, [r7, #28]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d10b      	bne.n	800ef76 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ef5e:	69bb      	ldr	r3, [r7, #24]
 800ef60:	881b      	ldrh	r3, [r3, #0]
 800ef62:	461a      	mov	r2, r3
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ef6c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ef6e:	69bb      	ldr	r3, [r7, #24]
 800ef70:	3302      	adds	r3, #2
 800ef72:	61bb      	str	r3, [r7, #24]
 800ef74:	e007      	b.n	800ef86 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ef76:	69fb      	ldr	r3, [r7, #28]
 800ef78:	781a      	ldrb	r2, [r3, #0]
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ef80:	69fb      	ldr	r3, [r7, #28]
 800ef82:	3301      	adds	r3, #1
 800ef84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ef8c:	b29b      	uxth	r3, r3
 800ef8e:	3b01      	subs	r3, #1
 800ef90:	b29a      	uxth	r2, r3
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ef9e:	b29b      	uxth	r3, r3
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d1c8      	bne.n	800ef36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	9300      	str	r3, [sp, #0]
 800efa8:	697b      	ldr	r3, [r7, #20]
 800efaa:	2200      	movs	r2, #0
 800efac:	2140      	movs	r1, #64	@ 0x40
 800efae:	68f8      	ldr	r0, [r7, #12]
 800efb0:	f000 fc5c 	bl	800f86c <UART_WaitOnFlagUntilTimeout>
 800efb4:	4603      	mov	r3, r0
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d005      	beq.n	800efc6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	2220      	movs	r2, #32
 800efbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800efc2:	2303      	movs	r3, #3
 800efc4:	e006      	b.n	800efd4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	2220      	movs	r2, #32
 800efca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800efce:	2300      	movs	r3, #0
 800efd0:	e000      	b.n	800efd4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800efd2:	2302      	movs	r3, #2
  }
}
 800efd4:	4618      	mov	r0, r3
 800efd6:	3720      	adds	r7, #32
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd80      	pop	{r7, pc}

0800efdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800efdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800efe0:	b08c      	sub	sp, #48	@ 0x30
 800efe2:	af00      	add	r7, sp, #0
 800efe4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800efe6:	2300      	movs	r3, #0
 800efe8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800efec:	697b      	ldr	r3, [r7, #20]
 800efee:	689a      	ldr	r2, [r3, #8]
 800eff0:	697b      	ldr	r3, [r7, #20]
 800eff2:	691b      	ldr	r3, [r3, #16]
 800eff4:	431a      	orrs	r2, r3
 800eff6:	697b      	ldr	r3, [r7, #20]
 800eff8:	695b      	ldr	r3, [r3, #20]
 800effa:	431a      	orrs	r2, r3
 800effc:	697b      	ldr	r3, [r7, #20]
 800effe:	69db      	ldr	r3, [r3, #28]
 800f000:	4313      	orrs	r3, r2
 800f002:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f004:	697b      	ldr	r3, [r7, #20]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	681a      	ldr	r2, [r3, #0]
 800f00a:	4baa      	ldr	r3, [pc, #680]	@ (800f2b4 <UART_SetConfig+0x2d8>)
 800f00c:	4013      	ands	r3, r2
 800f00e:	697a      	ldr	r2, [r7, #20]
 800f010:	6812      	ldr	r2, [r2, #0]
 800f012:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f014:	430b      	orrs	r3, r1
 800f016:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f018:	697b      	ldr	r3, [r7, #20]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	685b      	ldr	r3, [r3, #4]
 800f01e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f022:	697b      	ldr	r3, [r7, #20]
 800f024:	68da      	ldr	r2, [r3, #12]
 800f026:	697b      	ldr	r3, [r7, #20]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	430a      	orrs	r2, r1
 800f02c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f02e:	697b      	ldr	r3, [r7, #20]
 800f030:	699b      	ldr	r3, [r3, #24]
 800f032:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f034:	697b      	ldr	r3, [r7, #20]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	4a9f      	ldr	r2, [pc, #636]	@ (800f2b8 <UART_SetConfig+0x2dc>)
 800f03a:	4293      	cmp	r3, r2
 800f03c:	d004      	beq.n	800f048 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f03e:	697b      	ldr	r3, [r7, #20]
 800f040:	6a1b      	ldr	r3, [r3, #32]
 800f042:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f044:	4313      	orrs	r3, r2
 800f046:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f048:	697b      	ldr	r3, [r7, #20]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	689b      	ldr	r3, [r3, #8]
 800f04e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800f052:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800f056:	697a      	ldr	r2, [r7, #20]
 800f058:	6812      	ldr	r2, [r2, #0]
 800f05a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f05c:	430b      	orrs	r3, r1
 800f05e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f066:	f023 010f 	bic.w	r1, r3, #15
 800f06a:	697b      	ldr	r3, [r7, #20]
 800f06c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f06e:	697b      	ldr	r3, [r7, #20]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	430a      	orrs	r2, r1
 800f074:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	4a90      	ldr	r2, [pc, #576]	@ (800f2bc <UART_SetConfig+0x2e0>)
 800f07c:	4293      	cmp	r3, r2
 800f07e:	d125      	bne.n	800f0cc <UART_SetConfig+0xf0>
 800f080:	4b8f      	ldr	r3, [pc, #572]	@ (800f2c0 <UART_SetConfig+0x2e4>)
 800f082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f086:	f003 0303 	and.w	r3, r3, #3
 800f08a:	2b03      	cmp	r3, #3
 800f08c:	d81a      	bhi.n	800f0c4 <UART_SetConfig+0xe8>
 800f08e:	a201      	add	r2, pc, #4	@ (adr r2, 800f094 <UART_SetConfig+0xb8>)
 800f090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f094:	0800f0a5 	.word	0x0800f0a5
 800f098:	0800f0b5 	.word	0x0800f0b5
 800f09c:	0800f0ad 	.word	0x0800f0ad
 800f0a0:	0800f0bd 	.word	0x0800f0bd
 800f0a4:	2301      	movs	r3, #1
 800f0a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f0aa:	e116      	b.n	800f2da <UART_SetConfig+0x2fe>
 800f0ac:	2302      	movs	r3, #2
 800f0ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f0b2:	e112      	b.n	800f2da <UART_SetConfig+0x2fe>
 800f0b4:	2304      	movs	r3, #4
 800f0b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f0ba:	e10e      	b.n	800f2da <UART_SetConfig+0x2fe>
 800f0bc:	2308      	movs	r3, #8
 800f0be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f0c2:	e10a      	b.n	800f2da <UART_SetConfig+0x2fe>
 800f0c4:	2310      	movs	r3, #16
 800f0c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f0ca:	e106      	b.n	800f2da <UART_SetConfig+0x2fe>
 800f0cc:	697b      	ldr	r3, [r7, #20]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	4a7c      	ldr	r2, [pc, #496]	@ (800f2c4 <UART_SetConfig+0x2e8>)
 800f0d2:	4293      	cmp	r3, r2
 800f0d4:	d138      	bne.n	800f148 <UART_SetConfig+0x16c>
 800f0d6:	4b7a      	ldr	r3, [pc, #488]	@ (800f2c0 <UART_SetConfig+0x2e4>)
 800f0d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f0dc:	f003 030c 	and.w	r3, r3, #12
 800f0e0:	2b0c      	cmp	r3, #12
 800f0e2:	d82d      	bhi.n	800f140 <UART_SetConfig+0x164>
 800f0e4:	a201      	add	r2, pc, #4	@ (adr r2, 800f0ec <UART_SetConfig+0x110>)
 800f0e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0ea:	bf00      	nop
 800f0ec:	0800f121 	.word	0x0800f121
 800f0f0:	0800f141 	.word	0x0800f141
 800f0f4:	0800f141 	.word	0x0800f141
 800f0f8:	0800f141 	.word	0x0800f141
 800f0fc:	0800f131 	.word	0x0800f131
 800f100:	0800f141 	.word	0x0800f141
 800f104:	0800f141 	.word	0x0800f141
 800f108:	0800f141 	.word	0x0800f141
 800f10c:	0800f129 	.word	0x0800f129
 800f110:	0800f141 	.word	0x0800f141
 800f114:	0800f141 	.word	0x0800f141
 800f118:	0800f141 	.word	0x0800f141
 800f11c:	0800f139 	.word	0x0800f139
 800f120:	2300      	movs	r3, #0
 800f122:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f126:	e0d8      	b.n	800f2da <UART_SetConfig+0x2fe>
 800f128:	2302      	movs	r3, #2
 800f12a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f12e:	e0d4      	b.n	800f2da <UART_SetConfig+0x2fe>
 800f130:	2304      	movs	r3, #4
 800f132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f136:	e0d0      	b.n	800f2da <UART_SetConfig+0x2fe>
 800f138:	2308      	movs	r3, #8
 800f13a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f13e:	e0cc      	b.n	800f2da <UART_SetConfig+0x2fe>
 800f140:	2310      	movs	r3, #16
 800f142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f146:	e0c8      	b.n	800f2da <UART_SetConfig+0x2fe>
 800f148:	697b      	ldr	r3, [r7, #20]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	4a5e      	ldr	r2, [pc, #376]	@ (800f2c8 <UART_SetConfig+0x2ec>)
 800f14e:	4293      	cmp	r3, r2
 800f150:	d125      	bne.n	800f19e <UART_SetConfig+0x1c2>
 800f152:	4b5b      	ldr	r3, [pc, #364]	@ (800f2c0 <UART_SetConfig+0x2e4>)
 800f154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f158:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800f15c:	2b30      	cmp	r3, #48	@ 0x30
 800f15e:	d016      	beq.n	800f18e <UART_SetConfig+0x1b2>
 800f160:	2b30      	cmp	r3, #48	@ 0x30
 800f162:	d818      	bhi.n	800f196 <UART_SetConfig+0x1ba>
 800f164:	2b20      	cmp	r3, #32
 800f166:	d00a      	beq.n	800f17e <UART_SetConfig+0x1a2>
 800f168:	2b20      	cmp	r3, #32
 800f16a:	d814      	bhi.n	800f196 <UART_SetConfig+0x1ba>
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d002      	beq.n	800f176 <UART_SetConfig+0x19a>
 800f170:	2b10      	cmp	r3, #16
 800f172:	d008      	beq.n	800f186 <UART_SetConfig+0x1aa>
 800f174:	e00f      	b.n	800f196 <UART_SetConfig+0x1ba>
 800f176:	2300      	movs	r3, #0
 800f178:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f17c:	e0ad      	b.n	800f2da <UART_SetConfig+0x2fe>
 800f17e:	2302      	movs	r3, #2
 800f180:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f184:	e0a9      	b.n	800f2da <UART_SetConfig+0x2fe>
 800f186:	2304      	movs	r3, #4
 800f188:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f18c:	e0a5      	b.n	800f2da <UART_SetConfig+0x2fe>
 800f18e:	2308      	movs	r3, #8
 800f190:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f194:	e0a1      	b.n	800f2da <UART_SetConfig+0x2fe>
 800f196:	2310      	movs	r3, #16
 800f198:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f19c:	e09d      	b.n	800f2da <UART_SetConfig+0x2fe>
 800f19e:	697b      	ldr	r3, [r7, #20]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	4a4a      	ldr	r2, [pc, #296]	@ (800f2cc <UART_SetConfig+0x2f0>)
 800f1a4:	4293      	cmp	r3, r2
 800f1a6:	d125      	bne.n	800f1f4 <UART_SetConfig+0x218>
 800f1a8:	4b45      	ldr	r3, [pc, #276]	@ (800f2c0 <UART_SetConfig+0x2e4>)
 800f1aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f1ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800f1b2:	2bc0      	cmp	r3, #192	@ 0xc0
 800f1b4:	d016      	beq.n	800f1e4 <UART_SetConfig+0x208>
 800f1b6:	2bc0      	cmp	r3, #192	@ 0xc0
 800f1b8:	d818      	bhi.n	800f1ec <UART_SetConfig+0x210>
 800f1ba:	2b80      	cmp	r3, #128	@ 0x80
 800f1bc:	d00a      	beq.n	800f1d4 <UART_SetConfig+0x1f8>
 800f1be:	2b80      	cmp	r3, #128	@ 0x80
 800f1c0:	d814      	bhi.n	800f1ec <UART_SetConfig+0x210>
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d002      	beq.n	800f1cc <UART_SetConfig+0x1f0>
 800f1c6:	2b40      	cmp	r3, #64	@ 0x40
 800f1c8:	d008      	beq.n	800f1dc <UART_SetConfig+0x200>
 800f1ca:	e00f      	b.n	800f1ec <UART_SetConfig+0x210>
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f1d2:	e082      	b.n	800f2da <UART_SetConfig+0x2fe>
 800f1d4:	2302      	movs	r3, #2
 800f1d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f1da:	e07e      	b.n	800f2da <UART_SetConfig+0x2fe>
 800f1dc:	2304      	movs	r3, #4
 800f1de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f1e2:	e07a      	b.n	800f2da <UART_SetConfig+0x2fe>
 800f1e4:	2308      	movs	r3, #8
 800f1e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f1ea:	e076      	b.n	800f2da <UART_SetConfig+0x2fe>
 800f1ec:	2310      	movs	r3, #16
 800f1ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f1f2:	e072      	b.n	800f2da <UART_SetConfig+0x2fe>
 800f1f4:	697b      	ldr	r3, [r7, #20]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	4a35      	ldr	r2, [pc, #212]	@ (800f2d0 <UART_SetConfig+0x2f4>)
 800f1fa:	4293      	cmp	r3, r2
 800f1fc:	d12a      	bne.n	800f254 <UART_SetConfig+0x278>
 800f1fe:	4b30      	ldr	r3, [pc, #192]	@ (800f2c0 <UART_SetConfig+0x2e4>)
 800f200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f204:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f208:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f20c:	d01a      	beq.n	800f244 <UART_SetConfig+0x268>
 800f20e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f212:	d81b      	bhi.n	800f24c <UART_SetConfig+0x270>
 800f214:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f218:	d00c      	beq.n	800f234 <UART_SetConfig+0x258>
 800f21a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f21e:	d815      	bhi.n	800f24c <UART_SetConfig+0x270>
 800f220:	2b00      	cmp	r3, #0
 800f222:	d003      	beq.n	800f22c <UART_SetConfig+0x250>
 800f224:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f228:	d008      	beq.n	800f23c <UART_SetConfig+0x260>
 800f22a:	e00f      	b.n	800f24c <UART_SetConfig+0x270>
 800f22c:	2300      	movs	r3, #0
 800f22e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f232:	e052      	b.n	800f2da <UART_SetConfig+0x2fe>
 800f234:	2302      	movs	r3, #2
 800f236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f23a:	e04e      	b.n	800f2da <UART_SetConfig+0x2fe>
 800f23c:	2304      	movs	r3, #4
 800f23e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f242:	e04a      	b.n	800f2da <UART_SetConfig+0x2fe>
 800f244:	2308      	movs	r3, #8
 800f246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f24a:	e046      	b.n	800f2da <UART_SetConfig+0x2fe>
 800f24c:	2310      	movs	r3, #16
 800f24e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f252:	e042      	b.n	800f2da <UART_SetConfig+0x2fe>
 800f254:	697b      	ldr	r3, [r7, #20]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	4a17      	ldr	r2, [pc, #92]	@ (800f2b8 <UART_SetConfig+0x2dc>)
 800f25a:	4293      	cmp	r3, r2
 800f25c:	d13a      	bne.n	800f2d4 <UART_SetConfig+0x2f8>
 800f25e:	4b18      	ldr	r3, [pc, #96]	@ (800f2c0 <UART_SetConfig+0x2e4>)
 800f260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f264:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800f268:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f26c:	d01a      	beq.n	800f2a4 <UART_SetConfig+0x2c8>
 800f26e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f272:	d81b      	bhi.n	800f2ac <UART_SetConfig+0x2d0>
 800f274:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f278:	d00c      	beq.n	800f294 <UART_SetConfig+0x2b8>
 800f27a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f27e:	d815      	bhi.n	800f2ac <UART_SetConfig+0x2d0>
 800f280:	2b00      	cmp	r3, #0
 800f282:	d003      	beq.n	800f28c <UART_SetConfig+0x2b0>
 800f284:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f288:	d008      	beq.n	800f29c <UART_SetConfig+0x2c0>
 800f28a:	e00f      	b.n	800f2ac <UART_SetConfig+0x2d0>
 800f28c:	2300      	movs	r3, #0
 800f28e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f292:	e022      	b.n	800f2da <UART_SetConfig+0x2fe>
 800f294:	2302      	movs	r3, #2
 800f296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f29a:	e01e      	b.n	800f2da <UART_SetConfig+0x2fe>
 800f29c:	2304      	movs	r3, #4
 800f29e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f2a2:	e01a      	b.n	800f2da <UART_SetConfig+0x2fe>
 800f2a4:	2308      	movs	r3, #8
 800f2a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f2aa:	e016      	b.n	800f2da <UART_SetConfig+0x2fe>
 800f2ac:	2310      	movs	r3, #16
 800f2ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f2b2:	e012      	b.n	800f2da <UART_SetConfig+0x2fe>
 800f2b4:	cfff69f3 	.word	0xcfff69f3
 800f2b8:	40008000 	.word	0x40008000
 800f2bc:	40013800 	.word	0x40013800
 800f2c0:	40021000 	.word	0x40021000
 800f2c4:	40004400 	.word	0x40004400
 800f2c8:	40004800 	.word	0x40004800
 800f2cc:	40004c00 	.word	0x40004c00
 800f2d0:	40005000 	.word	0x40005000
 800f2d4:	2310      	movs	r3, #16
 800f2d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f2da:	697b      	ldr	r3, [r7, #20]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	4aae      	ldr	r2, [pc, #696]	@ (800f598 <UART_SetConfig+0x5bc>)
 800f2e0:	4293      	cmp	r3, r2
 800f2e2:	f040 8097 	bne.w	800f414 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f2e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f2ea:	2b08      	cmp	r3, #8
 800f2ec:	d823      	bhi.n	800f336 <UART_SetConfig+0x35a>
 800f2ee:	a201      	add	r2, pc, #4	@ (adr r2, 800f2f4 <UART_SetConfig+0x318>)
 800f2f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2f4:	0800f319 	.word	0x0800f319
 800f2f8:	0800f337 	.word	0x0800f337
 800f2fc:	0800f321 	.word	0x0800f321
 800f300:	0800f337 	.word	0x0800f337
 800f304:	0800f327 	.word	0x0800f327
 800f308:	0800f337 	.word	0x0800f337
 800f30c:	0800f337 	.word	0x0800f337
 800f310:	0800f337 	.word	0x0800f337
 800f314:	0800f32f 	.word	0x0800f32f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f318:	f7fc ff02 	bl	800c120 <HAL_RCC_GetPCLK1Freq>
 800f31c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f31e:	e010      	b.n	800f342 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f320:	4b9e      	ldr	r3, [pc, #632]	@ (800f59c <UART_SetConfig+0x5c0>)
 800f322:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f324:	e00d      	b.n	800f342 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f326:	f7fc fe8d 	bl	800c044 <HAL_RCC_GetSysClockFreq>
 800f32a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f32c:	e009      	b.n	800f342 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f32e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f332:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f334:	e005      	b.n	800f342 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800f336:	2300      	movs	r3, #0
 800f338:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f33a:	2301      	movs	r3, #1
 800f33c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f340:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f344:	2b00      	cmp	r3, #0
 800f346:	f000 8130 	beq.w	800f5aa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f34a:	697b      	ldr	r3, [r7, #20]
 800f34c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f34e:	4a94      	ldr	r2, [pc, #592]	@ (800f5a0 <UART_SetConfig+0x5c4>)
 800f350:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f354:	461a      	mov	r2, r3
 800f356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f358:	fbb3 f3f2 	udiv	r3, r3, r2
 800f35c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f35e:	697b      	ldr	r3, [r7, #20]
 800f360:	685a      	ldr	r2, [r3, #4]
 800f362:	4613      	mov	r3, r2
 800f364:	005b      	lsls	r3, r3, #1
 800f366:	4413      	add	r3, r2
 800f368:	69ba      	ldr	r2, [r7, #24]
 800f36a:	429a      	cmp	r2, r3
 800f36c:	d305      	bcc.n	800f37a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f36e:	697b      	ldr	r3, [r7, #20]
 800f370:	685b      	ldr	r3, [r3, #4]
 800f372:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f374:	69ba      	ldr	r2, [r7, #24]
 800f376:	429a      	cmp	r2, r3
 800f378:	d903      	bls.n	800f382 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800f37a:	2301      	movs	r3, #1
 800f37c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f380:	e113      	b.n	800f5aa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f384:	2200      	movs	r2, #0
 800f386:	60bb      	str	r3, [r7, #8]
 800f388:	60fa      	str	r2, [r7, #12]
 800f38a:	697b      	ldr	r3, [r7, #20]
 800f38c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f38e:	4a84      	ldr	r2, [pc, #528]	@ (800f5a0 <UART_SetConfig+0x5c4>)
 800f390:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f394:	b29b      	uxth	r3, r3
 800f396:	2200      	movs	r2, #0
 800f398:	603b      	str	r3, [r7, #0]
 800f39a:	607a      	str	r2, [r7, #4]
 800f39c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f3a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f3a4:	f7f1 fc98 	bl	8000cd8 <__aeabi_uldivmod>
 800f3a8:	4602      	mov	r2, r0
 800f3aa:	460b      	mov	r3, r1
 800f3ac:	4610      	mov	r0, r2
 800f3ae:	4619      	mov	r1, r3
 800f3b0:	f04f 0200 	mov.w	r2, #0
 800f3b4:	f04f 0300 	mov.w	r3, #0
 800f3b8:	020b      	lsls	r3, r1, #8
 800f3ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f3be:	0202      	lsls	r2, r0, #8
 800f3c0:	6979      	ldr	r1, [r7, #20]
 800f3c2:	6849      	ldr	r1, [r1, #4]
 800f3c4:	0849      	lsrs	r1, r1, #1
 800f3c6:	2000      	movs	r0, #0
 800f3c8:	460c      	mov	r4, r1
 800f3ca:	4605      	mov	r5, r0
 800f3cc:	eb12 0804 	adds.w	r8, r2, r4
 800f3d0:	eb43 0905 	adc.w	r9, r3, r5
 800f3d4:	697b      	ldr	r3, [r7, #20]
 800f3d6:	685b      	ldr	r3, [r3, #4]
 800f3d8:	2200      	movs	r2, #0
 800f3da:	469a      	mov	sl, r3
 800f3dc:	4693      	mov	fp, r2
 800f3de:	4652      	mov	r2, sl
 800f3e0:	465b      	mov	r3, fp
 800f3e2:	4640      	mov	r0, r8
 800f3e4:	4649      	mov	r1, r9
 800f3e6:	f7f1 fc77 	bl	8000cd8 <__aeabi_uldivmod>
 800f3ea:	4602      	mov	r2, r0
 800f3ec:	460b      	mov	r3, r1
 800f3ee:	4613      	mov	r3, r2
 800f3f0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f3f2:	6a3b      	ldr	r3, [r7, #32]
 800f3f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f3f8:	d308      	bcc.n	800f40c <UART_SetConfig+0x430>
 800f3fa:	6a3b      	ldr	r3, [r7, #32]
 800f3fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f400:	d204      	bcs.n	800f40c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800f402:	697b      	ldr	r3, [r7, #20]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	6a3a      	ldr	r2, [r7, #32]
 800f408:	60da      	str	r2, [r3, #12]
 800f40a:	e0ce      	b.n	800f5aa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800f40c:	2301      	movs	r3, #1
 800f40e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f412:	e0ca      	b.n	800f5aa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f414:	697b      	ldr	r3, [r7, #20]
 800f416:	69db      	ldr	r3, [r3, #28]
 800f418:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f41c:	d166      	bne.n	800f4ec <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800f41e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f422:	2b08      	cmp	r3, #8
 800f424:	d827      	bhi.n	800f476 <UART_SetConfig+0x49a>
 800f426:	a201      	add	r2, pc, #4	@ (adr r2, 800f42c <UART_SetConfig+0x450>)
 800f428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f42c:	0800f451 	.word	0x0800f451
 800f430:	0800f459 	.word	0x0800f459
 800f434:	0800f461 	.word	0x0800f461
 800f438:	0800f477 	.word	0x0800f477
 800f43c:	0800f467 	.word	0x0800f467
 800f440:	0800f477 	.word	0x0800f477
 800f444:	0800f477 	.word	0x0800f477
 800f448:	0800f477 	.word	0x0800f477
 800f44c:	0800f46f 	.word	0x0800f46f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f450:	f7fc fe66 	bl	800c120 <HAL_RCC_GetPCLK1Freq>
 800f454:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f456:	e014      	b.n	800f482 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f458:	f7fc fe78 	bl	800c14c <HAL_RCC_GetPCLK2Freq>
 800f45c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f45e:	e010      	b.n	800f482 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f460:	4b4e      	ldr	r3, [pc, #312]	@ (800f59c <UART_SetConfig+0x5c0>)
 800f462:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f464:	e00d      	b.n	800f482 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f466:	f7fc fded 	bl	800c044 <HAL_RCC_GetSysClockFreq>
 800f46a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f46c:	e009      	b.n	800f482 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f46e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f472:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f474:	e005      	b.n	800f482 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800f476:	2300      	movs	r3, #0
 800f478:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f47a:	2301      	movs	r3, #1
 800f47c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f480:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f484:	2b00      	cmp	r3, #0
 800f486:	f000 8090 	beq.w	800f5aa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f48a:	697b      	ldr	r3, [r7, #20]
 800f48c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f48e:	4a44      	ldr	r2, [pc, #272]	@ (800f5a0 <UART_SetConfig+0x5c4>)
 800f490:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f494:	461a      	mov	r2, r3
 800f496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f498:	fbb3 f3f2 	udiv	r3, r3, r2
 800f49c:	005a      	lsls	r2, r3, #1
 800f49e:	697b      	ldr	r3, [r7, #20]
 800f4a0:	685b      	ldr	r3, [r3, #4]
 800f4a2:	085b      	lsrs	r3, r3, #1
 800f4a4:	441a      	add	r2, r3
 800f4a6:	697b      	ldr	r3, [r7, #20]
 800f4a8:	685b      	ldr	r3, [r3, #4]
 800f4aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f4b0:	6a3b      	ldr	r3, [r7, #32]
 800f4b2:	2b0f      	cmp	r3, #15
 800f4b4:	d916      	bls.n	800f4e4 <UART_SetConfig+0x508>
 800f4b6:	6a3b      	ldr	r3, [r7, #32]
 800f4b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f4bc:	d212      	bcs.n	800f4e4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f4be:	6a3b      	ldr	r3, [r7, #32]
 800f4c0:	b29b      	uxth	r3, r3
 800f4c2:	f023 030f 	bic.w	r3, r3, #15
 800f4c6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f4c8:	6a3b      	ldr	r3, [r7, #32]
 800f4ca:	085b      	lsrs	r3, r3, #1
 800f4cc:	b29b      	uxth	r3, r3
 800f4ce:	f003 0307 	and.w	r3, r3, #7
 800f4d2:	b29a      	uxth	r2, r3
 800f4d4:	8bfb      	ldrh	r3, [r7, #30]
 800f4d6:	4313      	orrs	r3, r2
 800f4d8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800f4da:	697b      	ldr	r3, [r7, #20]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	8bfa      	ldrh	r2, [r7, #30]
 800f4e0:	60da      	str	r2, [r3, #12]
 800f4e2:	e062      	b.n	800f5aa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800f4e4:	2301      	movs	r3, #1
 800f4e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f4ea:	e05e      	b.n	800f5aa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f4ec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f4f0:	2b08      	cmp	r3, #8
 800f4f2:	d828      	bhi.n	800f546 <UART_SetConfig+0x56a>
 800f4f4:	a201      	add	r2, pc, #4	@ (adr r2, 800f4fc <UART_SetConfig+0x520>)
 800f4f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4fa:	bf00      	nop
 800f4fc:	0800f521 	.word	0x0800f521
 800f500:	0800f529 	.word	0x0800f529
 800f504:	0800f531 	.word	0x0800f531
 800f508:	0800f547 	.word	0x0800f547
 800f50c:	0800f537 	.word	0x0800f537
 800f510:	0800f547 	.word	0x0800f547
 800f514:	0800f547 	.word	0x0800f547
 800f518:	0800f547 	.word	0x0800f547
 800f51c:	0800f53f 	.word	0x0800f53f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f520:	f7fc fdfe 	bl	800c120 <HAL_RCC_GetPCLK1Freq>
 800f524:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f526:	e014      	b.n	800f552 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f528:	f7fc fe10 	bl	800c14c <HAL_RCC_GetPCLK2Freq>
 800f52c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f52e:	e010      	b.n	800f552 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f530:	4b1a      	ldr	r3, [pc, #104]	@ (800f59c <UART_SetConfig+0x5c0>)
 800f532:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f534:	e00d      	b.n	800f552 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f536:	f7fc fd85 	bl	800c044 <HAL_RCC_GetSysClockFreq>
 800f53a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f53c:	e009      	b.n	800f552 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f53e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f542:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f544:	e005      	b.n	800f552 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800f546:	2300      	movs	r3, #0
 800f548:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f54a:	2301      	movs	r3, #1
 800f54c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f550:	bf00      	nop
    }

    if (pclk != 0U)
 800f552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f554:	2b00      	cmp	r3, #0
 800f556:	d028      	beq.n	800f5aa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f558:	697b      	ldr	r3, [r7, #20]
 800f55a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f55c:	4a10      	ldr	r2, [pc, #64]	@ (800f5a0 <UART_SetConfig+0x5c4>)
 800f55e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f562:	461a      	mov	r2, r3
 800f564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f566:	fbb3 f2f2 	udiv	r2, r3, r2
 800f56a:	697b      	ldr	r3, [r7, #20]
 800f56c:	685b      	ldr	r3, [r3, #4]
 800f56e:	085b      	lsrs	r3, r3, #1
 800f570:	441a      	add	r2, r3
 800f572:	697b      	ldr	r3, [r7, #20]
 800f574:	685b      	ldr	r3, [r3, #4]
 800f576:	fbb2 f3f3 	udiv	r3, r2, r3
 800f57a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f57c:	6a3b      	ldr	r3, [r7, #32]
 800f57e:	2b0f      	cmp	r3, #15
 800f580:	d910      	bls.n	800f5a4 <UART_SetConfig+0x5c8>
 800f582:	6a3b      	ldr	r3, [r7, #32]
 800f584:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f588:	d20c      	bcs.n	800f5a4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f58a:	6a3b      	ldr	r3, [r7, #32]
 800f58c:	b29a      	uxth	r2, r3
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	60da      	str	r2, [r3, #12]
 800f594:	e009      	b.n	800f5aa <UART_SetConfig+0x5ce>
 800f596:	bf00      	nop
 800f598:	40008000 	.word	0x40008000
 800f59c:	00f42400 	.word	0x00f42400
 800f5a0:	08025b94 	.word	0x08025b94
      }
      else
      {
        ret = HAL_ERROR;
 800f5a4:	2301      	movs	r3, #1
 800f5a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f5aa:	697b      	ldr	r3, [r7, #20]
 800f5ac:	2201      	movs	r2, #1
 800f5ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f5b2:	697b      	ldr	r3, [r7, #20]
 800f5b4:	2201      	movs	r2, #1
 800f5b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f5ba:	697b      	ldr	r3, [r7, #20]
 800f5bc:	2200      	movs	r2, #0
 800f5be:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f5c0:	697b      	ldr	r3, [r7, #20]
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f5c6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	3730      	adds	r7, #48	@ 0x30
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f5d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f5d4:	b480      	push	{r7}
 800f5d6:	b083      	sub	sp, #12
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5e0:	f003 0308 	and.w	r3, r3, #8
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d00a      	beq.n	800f5fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	685b      	ldr	r3, [r3, #4]
 800f5ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	430a      	orrs	r2, r1
 800f5fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f602:	f003 0301 	and.w	r3, r3, #1
 800f606:	2b00      	cmp	r3, #0
 800f608:	d00a      	beq.n	800f620 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	685b      	ldr	r3, [r3, #4]
 800f610:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	430a      	orrs	r2, r1
 800f61e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f624:	f003 0302 	and.w	r3, r3, #2
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d00a      	beq.n	800f642 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	685b      	ldr	r3, [r3, #4]
 800f632:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	430a      	orrs	r2, r1
 800f640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f646:	f003 0304 	and.w	r3, r3, #4
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d00a      	beq.n	800f664 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	685b      	ldr	r3, [r3, #4]
 800f654:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	430a      	orrs	r2, r1
 800f662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f668:	f003 0310 	and.w	r3, r3, #16
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d00a      	beq.n	800f686 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	689b      	ldr	r3, [r3, #8]
 800f676:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	430a      	orrs	r2, r1
 800f684:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f68a:	f003 0320 	and.w	r3, r3, #32
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d00a      	beq.n	800f6a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	689b      	ldr	r3, [r3, #8]
 800f698:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	430a      	orrs	r2, r1
 800f6a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f6ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d01a      	beq.n	800f6ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	685b      	ldr	r3, [r3, #4]
 800f6ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	430a      	orrs	r2, r1
 800f6c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f6ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f6d2:	d10a      	bne.n	800f6ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	685b      	ldr	r3, [r3, #4]
 800f6da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	430a      	orrs	r2, r1
 800f6e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f6ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d00a      	beq.n	800f70c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	685b      	ldr	r3, [r3, #4]
 800f6fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	430a      	orrs	r2, r1
 800f70a:	605a      	str	r2, [r3, #4]
  }
}
 800f70c:	bf00      	nop
 800f70e:	370c      	adds	r7, #12
 800f710:	46bd      	mov	sp, r7
 800f712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f716:	4770      	bx	lr

0800f718 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b098      	sub	sp, #96	@ 0x60
 800f71c:	af02      	add	r7, sp, #8
 800f71e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	2200      	movs	r2, #0
 800f724:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f728:	f7f5 f880 	bl	800482c <HAL_GetTick>
 800f72c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	f003 0308 	and.w	r3, r3, #8
 800f738:	2b08      	cmp	r3, #8
 800f73a:	d12f      	bne.n	800f79c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f73c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f740:	9300      	str	r3, [sp, #0]
 800f742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f744:	2200      	movs	r2, #0
 800f746:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f74a:	6878      	ldr	r0, [r7, #4]
 800f74c:	f000 f88e 	bl	800f86c <UART_WaitOnFlagUntilTimeout>
 800f750:	4603      	mov	r3, r0
 800f752:	2b00      	cmp	r3, #0
 800f754:	d022      	beq.n	800f79c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f75e:	e853 3f00 	ldrex	r3, [r3]
 800f762:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f766:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f76a:	653b      	str	r3, [r7, #80]	@ 0x50
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	461a      	mov	r2, r3
 800f772:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f774:	647b      	str	r3, [r7, #68]	@ 0x44
 800f776:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f778:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f77a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f77c:	e841 2300 	strex	r3, r2, [r1]
 800f780:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f784:	2b00      	cmp	r3, #0
 800f786:	d1e6      	bne.n	800f756 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2220      	movs	r2, #32
 800f78c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2200      	movs	r2, #0
 800f794:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f798:	2303      	movs	r3, #3
 800f79a:	e063      	b.n	800f864 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	f003 0304 	and.w	r3, r3, #4
 800f7a6:	2b04      	cmp	r3, #4
 800f7a8:	d149      	bne.n	800f83e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f7aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f7ae:	9300      	str	r3, [sp, #0]
 800f7b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	f000 f857 	bl	800f86c <UART_WaitOnFlagUntilTimeout>
 800f7be:	4603      	mov	r3, r0
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d03c      	beq.n	800f83e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7cc:	e853 3f00 	ldrex	r3, [r3]
 800f7d0:	623b      	str	r3, [r7, #32]
   return(result);
 800f7d2:	6a3b      	ldr	r3, [r7, #32]
 800f7d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f7d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	461a      	mov	r2, r3
 800f7e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f7e2:	633b      	str	r3, [r7, #48]	@ 0x30
 800f7e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f7e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f7ea:	e841 2300 	strex	r3, r2, [r1]
 800f7ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f7f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d1e6      	bne.n	800f7c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	3308      	adds	r3, #8
 800f7fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7fe:	693b      	ldr	r3, [r7, #16]
 800f800:	e853 3f00 	ldrex	r3, [r3]
 800f804:	60fb      	str	r3, [r7, #12]
   return(result);
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	f023 0301 	bic.w	r3, r3, #1
 800f80c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	3308      	adds	r3, #8
 800f814:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f816:	61fa      	str	r2, [r7, #28]
 800f818:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f81a:	69b9      	ldr	r1, [r7, #24]
 800f81c:	69fa      	ldr	r2, [r7, #28]
 800f81e:	e841 2300 	strex	r3, r2, [r1]
 800f822:	617b      	str	r3, [r7, #20]
   return(result);
 800f824:	697b      	ldr	r3, [r7, #20]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d1e5      	bne.n	800f7f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	2220      	movs	r2, #32
 800f82e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	2200      	movs	r2, #0
 800f836:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f83a:	2303      	movs	r3, #3
 800f83c:	e012      	b.n	800f864 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	2220      	movs	r2, #32
 800f842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	2220      	movs	r2, #32
 800f84a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2200      	movs	r2, #0
 800f852:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	2200      	movs	r2, #0
 800f858:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	2200      	movs	r2, #0
 800f85e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f862:	2300      	movs	r3, #0
}
 800f864:	4618      	mov	r0, r3
 800f866:	3758      	adds	r7, #88	@ 0x58
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd80      	pop	{r7, pc}

0800f86c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b084      	sub	sp, #16
 800f870:	af00      	add	r7, sp, #0
 800f872:	60f8      	str	r0, [r7, #12]
 800f874:	60b9      	str	r1, [r7, #8]
 800f876:	603b      	str	r3, [r7, #0]
 800f878:	4613      	mov	r3, r2
 800f87a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f87c:	e04f      	b.n	800f91e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f87e:	69bb      	ldr	r3, [r7, #24]
 800f880:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f884:	d04b      	beq.n	800f91e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f886:	f7f4 ffd1 	bl	800482c <HAL_GetTick>
 800f88a:	4602      	mov	r2, r0
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	1ad3      	subs	r3, r2, r3
 800f890:	69ba      	ldr	r2, [r7, #24]
 800f892:	429a      	cmp	r2, r3
 800f894:	d302      	bcc.n	800f89c <UART_WaitOnFlagUntilTimeout+0x30>
 800f896:	69bb      	ldr	r3, [r7, #24]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d101      	bne.n	800f8a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f89c:	2303      	movs	r3, #3
 800f89e:	e04e      	b.n	800f93e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	f003 0304 	and.w	r3, r3, #4
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d037      	beq.n	800f91e <UART_WaitOnFlagUntilTimeout+0xb2>
 800f8ae:	68bb      	ldr	r3, [r7, #8]
 800f8b0:	2b80      	cmp	r3, #128	@ 0x80
 800f8b2:	d034      	beq.n	800f91e <UART_WaitOnFlagUntilTimeout+0xb2>
 800f8b4:	68bb      	ldr	r3, [r7, #8]
 800f8b6:	2b40      	cmp	r3, #64	@ 0x40
 800f8b8:	d031      	beq.n	800f91e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	69db      	ldr	r3, [r3, #28]
 800f8c0:	f003 0308 	and.w	r3, r3, #8
 800f8c4:	2b08      	cmp	r3, #8
 800f8c6:	d110      	bne.n	800f8ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	2208      	movs	r2, #8
 800f8ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f8d0:	68f8      	ldr	r0, [r7, #12]
 800f8d2:	f000 f838 	bl	800f946 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	2208      	movs	r2, #8
 800f8da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800f8e6:	2301      	movs	r3, #1
 800f8e8:	e029      	b.n	800f93e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	69db      	ldr	r3, [r3, #28]
 800f8f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f8f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f8f8:	d111      	bne.n	800f91e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f902:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f904:	68f8      	ldr	r0, [r7, #12]
 800f906:	f000 f81e 	bl	800f946 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	2220      	movs	r2, #32
 800f90e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	2200      	movs	r2, #0
 800f916:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f91a:	2303      	movs	r3, #3
 800f91c:	e00f      	b.n	800f93e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	69da      	ldr	r2, [r3, #28]
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	4013      	ands	r3, r2
 800f928:	68ba      	ldr	r2, [r7, #8]
 800f92a:	429a      	cmp	r2, r3
 800f92c:	bf0c      	ite	eq
 800f92e:	2301      	moveq	r3, #1
 800f930:	2300      	movne	r3, #0
 800f932:	b2db      	uxtb	r3, r3
 800f934:	461a      	mov	r2, r3
 800f936:	79fb      	ldrb	r3, [r7, #7]
 800f938:	429a      	cmp	r2, r3
 800f93a:	d0a0      	beq.n	800f87e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f93c:	2300      	movs	r3, #0
}
 800f93e:	4618      	mov	r0, r3
 800f940:	3710      	adds	r7, #16
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}

0800f946 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f946:	b480      	push	{r7}
 800f948:	b095      	sub	sp, #84	@ 0x54
 800f94a:	af00      	add	r7, sp, #0
 800f94c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f956:	e853 3f00 	ldrex	r3, [r3]
 800f95a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f95c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f95e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f962:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	461a      	mov	r2, r3
 800f96a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f96c:	643b      	str	r3, [r7, #64]	@ 0x40
 800f96e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f970:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f972:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f974:	e841 2300 	strex	r3, r2, [r1]
 800f978:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f97a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d1e6      	bne.n	800f94e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	3308      	adds	r3, #8
 800f986:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f988:	6a3b      	ldr	r3, [r7, #32]
 800f98a:	e853 3f00 	ldrex	r3, [r3]
 800f98e:	61fb      	str	r3, [r7, #28]
   return(result);
 800f990:	69fb      	ldr	r3, [r7, #28]
 800f992:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f996:	f023 0301 	bic.w	r3, r3, #1
 800f99a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	3308      	adds	r3, #8
 800f9a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f9a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f9a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f9aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f9ac:	e841 2300 	strex	r3, r2, [r1]
 800f9b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f9b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d1e3      	bne.n	800f980 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f9bc:	2b01      	cmp	r3, #1
 800f9be:	d118      	bne.n	800f9f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	e853 3f00 	ldrex	r3, [r3]
 800f9cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800f9ce:	68bb      	ldr	r3, [r7, #8]
 800f9d0:	f023 0310 	bic.w	r3, r3, #16
 800f9d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	461a      	mov	r2, r3
 800f9dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f9de:	61bb      	str	r3, [r7, #24]
 800f9e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9e2:	6979      	ldr	r1, [r7, #20]
 800f9e4:	69ba      	ldr	r2, [r7, #24]
 800f9e6:	e841 2300 	strex	r3, r2, [r1]
 800f9ea:	613b      	str	r3, [r7, #16]
   return(result);
 800f9ec:	693b      	ldr	r3, [r7, #16]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d1e6      	bne.n	800f9c0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	2220      	movs	r2, #32
 800f9f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	2200      	movs	r2, #0
 800fa04:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800fa06:	bf00      	nop
 800fa08:	3754      	adds	r7, #84	@ 0x54
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa10:	4770      	bx	lr

0800fa12 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fa12:	b480      	push	{r7}
 800fa14:	b085      	sub	sp, #20
 800fa16:	af00      	add	r7, sp, #0
 800fa18:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fa20:	2b01      	cmp	r3, #1
 800fa22:	d101      	bne.n	800fa28 <HAL_UARTEx_DisableFifoMode+0x16>
 800fa24:	2302      	movs	r3, #2
 800fa26:	e027      	b.n	800fa78 <HAL_UARTEx_DisableFifoMode+0x66>
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	2201      	movs	r2, #1
 800fa2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	2224      	movs	r2, #36	@ 0x24
 800fa34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	681a      	ldr	r2, [r3, #0]
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	f022 0201 	bic.w	r2, r2, #1
 800fa4e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800fa56:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	68fa      	ldr	r2, [r7, #12]
 800fa64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	2220      	movs	r2, #32
 800fa6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	2200      	movs	r2, #0
 800fa72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fa76:	2300      	movs	r3, #0
}
 800fa78:	4618      	mov	r0, r3
 800fa7a:	3714      	adds	r7, #20
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa82:	4770      	bx	lr

0800fa84 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b084      	sub	sp, #16
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
 800fa8c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fa94:	2b01      	cmp	r3, #1
 800fa96:	d101      	bne.n	800fa9c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fa98:	2302      	movs	r3, #2
 800fa9a:	e02d      	b.n	800faf8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	2201      	movs	r2, #1
 800faa0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	2224      	movs	r2, #36	@ 0x24
 800faa8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	681a      	ldr	r2, [r3, #0]
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	f022 0201 	bic.w	r2, r2, #1
 800fac2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	689b      	ldr	r3, [r3, #8]
 800faca:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	683a      	ldr	r2, [r7, #0]
 800fad4:	430a      	orrs	r2, r1
 800fad6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f000 f84f 	bl	800fb7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	68fa      	ldr	r2, [r7, #12]
 800fae4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	2220      	movs	r2, #32
 800faea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2200      	movs	r2, #0
 800faf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800faf6:	2300      	movs	r3, #0
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	3710      	adds	r7, #16
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd80      	pop	{r7, pc}

0800fb00 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b084      	sub	sp, #16
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
 800fb08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fb10:	2b01      	cmp	r3, #1
 800fb12:	d101      	bne.n	800fb18 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fb14:	2302      	movs	r3, #2
 800fb16:	e02d      	b.n	800fb74 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	2201      	movs	r2, #1
 800fb1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	2224      	movs	r2, #36	@ 0x24
 800fb24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	681a      	ldr	r2, [r3, #0]
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	f022 0201 	bic.w	r2, r2, #1
 800fb3e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	689b      	ldr	r3, [r3, #8]
 800fb46:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	683a      	ldr	r2, [r7, #0]
 800fb50:	430a      	orrs	r2, r1
 800fb52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fb54:	6878      	ldr	r0, [r7, #4]
 800fb56:	f000 f811 	bl	800fb7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	68fa      	ldr	r2, [r7, #12]
 800fb60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	2220      	movs	r2, #32
 800fb66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fb72:	2300      	movs	r3, #0
}
 800fb74:	4618      	mov	r0, r3
 800fb76:	3710      	adds	r7, #16
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	bd80      	pop	{r7, pc}

0800fb7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fb7c:	b480      	push	{r7}
 800fb7e:	b085      	sub	sp, #20
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d108      	bne.n	800fb9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	2201      	movs	r2, #1
 800fb90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	2201      	movs	r2, #1
 800fb98:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fb9c:	e031      	b.n	800fc02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fb9e:	2308      	movs	r3, #8
 800fba0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fba2:	2308      	movs	r3, #8
 800fba4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	689b      	ldr	r3, [r3, #8]
 800fbac:	0e5b      	lsrs	r3, r3, #25
 800fbae:	b2db      	uxtb	r3, r3
 800fbb0:	f003 0307 	and.w	r3, r3, #7
 800fbb4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	689b      	ldr	r3, [r3, #8]
 800fbbc:	0f5b      	lsrs	r3, r3, #29
 800fbbe:	b2db      	uxtb	r3, r3
 800fbc0:	f003 0307 	and.w	r3, r3, #7
 800fbc4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fbc6:	7bbb      	ldrb	r3, [r7, #14]
 800fbc8:	7b3a      	ldrb	r2, [r7, #12]
 800fbca:	4911      	ldr	r1, [pc, #68]	@ (800fc10 <UARTEx_SetNbDataToProcess+0x94>)
 800fbcc:	5c8a      	ldrb	r2, [r1, r2]
 800fbce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fbd2:	7b3a      	ldrb	r2, [r7, #12]
 800fbd4:	490f      	ldr	r1, [pc, #60]	@ (800fc14 <UARTEx_SetNbDataToProcess+0x98>)
 800fbd6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fbd8:	fb93 f3f2 	sdiv	r3, r3, r2
 800fbdc:	b29a      	uxth	r2, r3
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fbe4:	7bfb      	ldrb	r3, [r7, #15]
 800fbe6:	7b7a      	ldrb	r2, [r7, #13]
 800fbe8:	4909      	ldr	r1, [pc, #36]	@ (800fc10 <UARTEx_SetNbDataToProcess+0x94>)
 800fbea:	5c8a      	ldrb	r2, [r1, r2]
 800fbec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fbf0:	7b7a      	ldrb	r2, [r7, #13]
 800fbf2:	4908      	ldr	r1, [pc, #32]	@ (800fc14 <UARTEx_SetNbDataToProcess+0x98>)
 800fbf4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fbf6:	fb93 f3f2 	sdiv	r3, r3, r2
 800fbfa:	b29a      	uxth	r2, r3
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800fc02:	bf00      	nop
 800fc04:	3714      	adds	r7, #20
 800fc06:	46bd      	mov	sp, r7
 800fc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0c:	4770      	bx	lr
 800fc0e:	bf00      	nop
 800fc10:	08025bac 	.word	0x08025bac
 800fc14:	08025bb4 	.word	0x08025bb4

0800fc18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800fc18:	b480      	push	{r7}
 800fc1a:	b085      	sub	sp, #20
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	2200      	movs	r2, #0
 800fc24:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800fc28:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800fc2c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	b29a      	uxth	r2, r3
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800fc38:	2300      	movs	r3, #0
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	3714      	adds	r7, #20
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc44:	4770      	bx	lr

0800fc46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800fc46:	b480      	push	{r7}
 800fc48:	b085      	sub	sp, #20
 800fc4a:	af00      	add	r7, sp, #0
 800fc4c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800fc4e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800fc52:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800fc5a:	b29a      	uxth	r2, r3
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	b29b      	uxth	r3, r3
 800fc60:	43db      	mvns	r3, r3
 800fc62:	b29b      	uxth	r3, r3
 800fc64:	4013      	ands	r3, r2
 800fc66:	b29a      	uxth	r2, r3
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800fc6e:	2300      	movs	r3, #0
}
 800fc70:	4618      	mov	r0, r3
 800fc72:	3714      	adds	r7, #20
 800fc74:	46bd      	mov	sp, r7
 800fc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7a:	4770      	bx	lr

0800fc7c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800fc7c:	b480      	push	{r7}
 800fc7e:	b085      	sub	sp, #20
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	60f8      	str	r0, [r7, #12]
 800fc84:	1d3b      	adds	r3, r7, #4
 800fc86:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	2201      	movs	r2, #1
 800fc8e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	2200      	movs	r2, #0
 800fc96:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	2200      	movs	r2, #0
 800fca6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800fcaa:	2300      	movs	r3, #0
}
 800fcac:	4618      	mov	r0, r3
 800fcae:	3714      	adds	r7, #20
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb6:	4770      	bx	lr

0800fcb8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800fcb8:	b480      	push	{r7}
 800fcba:	b0a7      	sub	sp, #156	@ 0x9c
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
 800fcc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800fcc8:	687a      	ldr	r2, [r7, #4]
 800fcca:	683b      	ldr	r3, [r7, #0]
 800fccc:	781b      	ldrb	r3, [r3, #0]
 800fcce:	009b      	lsls	r3, r3, #2
 800fcd0:	4413      	add	r3, r2
 800fcd2:	881b      	ldrh	r3, [r3, #0]
 800fcd4:	b29b      	uxth	r3, r3
 800fcd6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800fcda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fcde:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800fce2:	683b      	ldr	r3, [r7, #0]
 800fce4:	78db      	ldrb	r3, [r3, #3]
 800fce6:	2b03      	cmp	r3, #3
 800fce8:	d81f      	bhi.n	800fd2a <USB_ActivateEndpoint+0x72>
 800fcea:	a201      	add	r2, pc, #4	@ (adr r2, 800fcf0 <USB_ActivateEndpoint+0x38>)
 800fcec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcf0:	0800fd01 	.word	0x0800fd01
 800fcf4:	0800fd1d 	.word	0x0800fd1d
 800fcf8:	0800fd33 	.word	0x0800fd33
 800fcfc:	0800fd0f 	.word	0x0800fd0f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800fd00:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800fd04:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800fd08:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800fd0c:	e012      	b.n	800fd34 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800fd0e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800fd12:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800fd16:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800fd1a:	e00b      	b.n	800fd34 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800fd1c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800fd20:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800fd24:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800fd28:	e004      	b.n	800fd34 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800fd2a:	2301      	movs	r3, #1
 800fd2c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800fd30:	e000      	b.n	800fd34 <USB_ActivateEndpoint+0x7c>
      break;
 800fd32:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800fd34:	687a      	ldr	r2, [r7, #4]
 800fd36:	683b      	ldr	r3, [r7, #0]
 800fd38:	781b      	ldrb	r3, [r3, #0]
 800fd3a:	009b      	lsls	r3, r3, #2
 800fd3c:	441a      	add	r2, r3
 800fd3e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800fd42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fd46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fd4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fd4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fd52:	b29b      	uxth	r3, r3
 800fd54:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800fd56:	687a      	ldr	r2, [r7, #4]
 800fd58:	683b      	ldr	r3, [r7, #0]
 800fd5a:	781b      	ldrb	r3, [r3, #0]
 800fd5c:	009b      	lsls	r3, r3, #2
 800fd5e:	4413      	add	r3, r2
 800fd60:	881b      	ldrh	r3, [r3, #0]
 800fd62:	b29b      	uxth	r3, r3
 800fd64:	b21b      	sxth	r3, r3
 800fd66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fd6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fd6e:	b21a      	sxth	r2, r3
 800fd70:	683b      	ldr	r3, [r7, #0]
 800fd72:	781b      	ldrb	r3, [r3, #0]
 800fd74:	b21b      	sxth	r3, r3
 800fd76:	4313      	orrs	r3, r2
 800fd78:	b21b      	sxth	r3, r3
 800fd7a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800fd7e:	687a      	ldr	r2, [r7, #4]
 800fd80:	683b      	ldr	r3, [r7, #0]
 800fd82:	781b      	ldrb	r3, [r3, #0]
 800fd84:	009b      	lsls	r3, r3, #2
 800fd86:	441a      	add	r2, r3
 800fd88:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800fd8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fd90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fd94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fd98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fd9c:	b29b      	uxth	r3, r3
 800fd9e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	7b1b      	ldrb	r3, [r3, #12]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	f040 8180 	bne.w	80100aa <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800fdaa:	683b      	ldr	r3, [r7, #0]
 800fdac:	785b      	ldrb	r3, [r3, #1]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	f000 8084 	beq.w	800febc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	61bb      	str	r3, [r7, #24]
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fdbe:	b29b      	uxth	r3, r3
 800fdc0:	461a      	mov	r2, r3
 800fdc2:	69bb      	ldr	r3, [r7, #24]
 800fdc4:	4413      	add	r3, r2
 800fdc6:	61bb      	str	r3, [r7, #24]
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	781b      	ldrb	r3, [r3, #0]
 800fdcc:	00da      	lsls	r2, r3, #3
 800fdce:	69bb      	ldr	r3, [r7, #24]
 800fdd0:	4413      	add	r3, r2
 800fdd2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800fdd6:	617b      	str	r3, [r7, #20]
 800fdd8:	683b      	ldr	r3, [r7, #0]
 800fdda:	88db      	ldrh	r3, [r3, #6]
 800fddc:	085b      	lsrs	r3, r3, #1
 800fdde:	b29b      	uxth	r3, r3
 800fde0:	005b      	lsls	r3, r3, #1
 800fde2:	b29a      	uxth	r2, r3
 800fde4:	697b      	ldr	r3, [r7, #20]
 800fde6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fde8:	687a      	ldr	r2, [r7, #4]
 800fdea:	683b      	ldr	r3, [r7, #0]
 800fdec:	781b      	ldrb	r3, [r3, #0]
 800fdee:	009b      	lsls	r3, r3, #2
 800fdf0:	4413      	add	r3, r2
 800fdf2:	881b      	ldrh	r3, [r3, #0]
 800fdf4:	827b      	strh	r3, [r7, #18]
 800fdf6:	8a7b      	ldrh	r3, [r7, #18]
 800fdf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d01b      	beq.n	800fe38 <USB_ActivateEndpoint+0x180>
 800fe00:	687a      	ldr	r2, [r7, #4]
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	781b      	ldrb	r3, [r3, #0]
 800fe06:	009b      	lsls	r3, r3, #2
 800fe08:	4413      	add	r3, r2
 800fe0a:	881b      	ldrh	r3, [r3, #0]
 800fe0c:	b29b      	uxth	r3, r3
 800fe0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fe12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fe16:	823b      	strh	r3, [r7, #16]
 800fe18:	687a      	ldr	r2, [r7, #4]
 800fe1a:	683b      	ldr	r3, [r7, #0]
 800fe1c:	781b      	ldrb	r3, [r3, #0]
 800fe1e:	009b      	lsls	r3, r3, #2
 800fe20:	441a      	add	r2, r3
 800fe22:	8a3b      	ldrh	r3, [r7, #16]
 800fe24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fe28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fe2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fe30:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800fe34:	b29b      	uxth	r3, r3
 800fe36:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800fe38:	683b      	ldr	r3, [r7, #0]
 800fe3a:	78db      	ldrb	r3, [r3, #3]
 800fe3c:	2b01      	cmp	r3, #1
 800fe3e:	d020      	beq.n	800fe82 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800fe40:	687a      	ldr	r2, [r7, #4]
 800fe42:	683b      	ldr	r3, [r7, #0]
 800fe44:	781b      	ldrb	r3, [r3, #0]
 800fe46:	009b      	lsls	r3, r3, #2
 800fe48:	4413      	add	r3, r2
 800fe4a:	881b      	ldrh	r3, [r3, #0]
 800fe4c:	b29b      	uxth	r3, r3
 800fe4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fe52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fe56:	81bb      	strh	r3, [r7, #12]
 800fe58:	89bb      	ldrh	r3, [r7, #12]
 800fe5a:	f083 0320 	eor.w	r3, r3, #32
 800fe5e:	81bb      	strh	r3, [r7, #12]
 800fe60:	687a      	ldr	r2, [r7, #4]
 800fe62:	683b      	ldr	r3, [r7, #0]
 800fe64:	781b      	ldrb	r3, [r3, #0]
 800fe66:	009b      	lsls	r3, r3, #2
 800fe68:	441a      	add	r2, r3
 800fe6a:	89bb      	ldrh	r3, [r7, #12]
 800fe6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fe70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fe74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fe78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe7c:	b29b      	uxth	r3, r3
 800fe7e:	8013      	strh	r3, [r2, #0]
 800fe80:	e3f9      	b.n	8010676 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800fe82:	687a      	ldr	r2, [r7, #4]
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	781b      	ldrb	r3, [r3, #0]
 800fe88:	009b      	lsls	r3, r3, #2
 800fe8a:	4413      	add	r3, r2
 800fe8c:	881b      	ldrh	r3, [r3, #0]
 800fe8e:	b29b      	uxth	r3, r3
 800fe90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fe94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fe98:	81fb      	strh	r3, [r7, #14]
 800fe9a:	687a      	ldr	r2, [r7, #4]
 800fe9c:	683b      	ldr	r3, [r7, #0]
 800fe9e:	781b      	ldrb	r3, [r3, #0]
 800fea0:	009b      	lsls	r3, r3, #2
 800fea2:	441a      	add	r2, r3
 800fea4:	89fb      	ldrh	r3, [r7, #14]
 800fea6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800feaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800feae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800feb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800feb6:	b29b      	uxth	r3, r3
 800feb8:	8013      	strh	r3, [r2, #0]
 800feba:	e3dc      	b.n	8010676 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	633b      	str	r3, [r7, #48]	@ 0x30
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fec6:	b29b      	uxth	r3, r3
 800fec8:	461a      	mov	r2, r3
 800feca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fecc:	4413      	add	r3, r2
 800fece:	633b      	str	r3, [r7, #48]	@ 0x30
 800fed0:	683b      	ldr	r3, [r7, #0]
 800fed2:	781b      	ldrb	r3, [r3, #0]
 800fed4:	00da      	lsls	r2, r3, #3
 800fed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fed8:	4413      	add	r3, r2
 800feda:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800fede:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fee0:	683b      	ldr	r3, [r7, #0]
 800fee2:	88db      	ldrh	r3, [r3, #6]
 800fee4:	085b      	lsrs	r3, r3, #1
 800fee6:	b29b      	uxth	r3, r3
 800fee8:	005b      	lsls	r3, r3, #1
 800feea:	b29a      	uxth	r2, r3
 800feec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800feee:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fefa:	b29b      	uxth	r3, r3
 800fefc:	461a      	mov	r2, r3
 800fefe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff00:	4413      	add	r3, r2
 800ff02:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ff04:	683b      	ldr	r3, [r7, #0]
 800ff06:	781b      	ldrb	r3, [r3, #0]
 800ff08:	00da      	lsls	r2, r3, #3
 800ff0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff0c:	4413      	add	r3, r2
 800ff0e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ff12:	627b      	str	r3, [r7, #36]	@ 0x24
 800ff14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff16:	881b      	ldrh	r3, [r3, #0]
 800ff18:	b29b      	uxth	r3, r3
 800ff1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ff1e:	b29a      	uxth	r2, r3
 800ff20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff22:	801a      	strh	r2, [r3, #0]
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	691b      	ldr	r3, [r3, #16]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d10a      	bne.n	800ff42 <USB_ActivateEndpoint+0x28a>
 800ff2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff2e:	881b      	ldrh	r3, [r3, #0]
 800ff30:	b29b      	uxth	r3, r3
 800ff32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ff36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ff3a:	b29a      	uxth	r2, r3
 800ff3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff3e:	801a      	strh	r2, [r3, #0]
 800ff40:	e041      	b.n	800ffc6 <USB_ActivateEndpoint+0x30e>
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	691b      	ldr	r3, [r3, #16]
 800ff46:	2b3e      	cmp	r3, #62	@ 0x3e
 800ff48:	d81c      	bhi.n	800ff84 <USB_ActivateEndpoint+0x2cc>
 800ff4a:	683b      	ldr	r3, [r7, #0]
 800ff4c:	691b      	ldr	r3, [r3, #16]
 800ff4e:	085b      	lsrs	r3, r3, #1
 800ff50:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	691b      	ldr	r3, [r3, #16]
 800ff58:	f003 0301 	and.w	r3, r3, #1
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d004      	beq.n	800ff6a <USB_ActivateEndpoint+0x2b2>
 800ff60:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ff64:	3301      	adds	r3, #1
 800ff66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ff6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff6c:	881b      	ldrh	r3, [r3, #0]
 800ff6e:	b29a      	uxth	r2, r3
 800ff70:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ff74:	b29b      	uxth	r3, r3
 800ff76:	029b      	lsls	r3, r3, #10
 800ff78:	b29b      	uxth	r3, r3
 800ff7a:	4313      	orrs	r3, r2
 800ff7c:	b29a      	uxth	r2, r3
 800ff7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff80:	801a      	strh	r2, [r3, #0]
 800ff82:	e020      	b.n	800ffc6 <USB_ActivateEndpoint+0x30e>
 800ff84:	683b      	ldr	r3, [r7, #0]
 800ff86:	691b      	ldr	r3, [r3, #16]
 800ff88:	095b      	lsrs	r3, r3, #5
 800ff8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ff8e:	683b      	ldr	r3, [r7, #0]
 800ff90:	691b      	ldr	r3, [r3, #16]
 800ff92:	f003 031f 	and.w	r3, r3, #31
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d104      	bne.n	800ffa4 <USB_ActivateEndpoint+0x2ec>
 800ff9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ff9e:	3b01      	subs	r3, #1
 800ffa0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ffa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffa6:	881b      	ldrh	r3, [r3, #0]
 800ffa8:	b29a      	uxth	r2, r3
 800ffaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ffae:	b29b      	uxth	r3, r3
 800ffb0:	029b      	lsls	r3, r3, #10
 800ffb2:	b29b      	uxth	r3, r3
 800ffb4:	4313      	orrs	r3, r2
 800ffb6:	b29b      	uxth	r3, r3
 800ffb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ffbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ffc0:	b29a      	uxth	r2, r3
 800ffc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffc4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ffc6:	687a      	ldr	r2, [r7, #4]
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	781b      	ldrb	r3, [r3, #0]
 800ffcc:	009b      	lsls	r3, r3, #2
 800ffce:	4413      	add	r3, r2
 800ffd0:	881b      	ldrh	r3, [r3, #0]
 800ffd2:	847b      	strh	r3, [r7, #34]	@ 0x22
 800ffd4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ffd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d01b      	beq.n	8010016 <USB_ActivateEndpoint+0x35e>
 800ffde:	687a      	ldr	r2, [r7, #4]
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	781b      	ldrb	r3, [r3, #0]
 800ffe4:	009b      	lsls	r3, r3, #2
 800ffe6:	4413      	add	r3, r2
 800ffe8:	881b      	ldrh	r3, [r3, #0]
 800ffea:	b29b      	uxth	r3, r3
 800ffec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fff0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fff4:	843b      	strh	r3, [r7, #32]
 800fff6:	687a      	ldr	r2, [r7, #4]
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	781b      	ldrb	r3, [r3, #0]
 800fffc:	009b      	lsls	r3, r3, #2
 800fffe:	441a      	add	r2, r3
 8010000:	8c3b      	ldrh	r3, [r7, #32]
 8010002:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010006:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801000a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801000e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010012:	b29b      	uxth	r3, r3
 8010014:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8010016:	683b      	ldr	r3, [r7, #0]
 8010018:	781b      	ldrb	r3, [r3, #0]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d124      	bne.n	8010068 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801001e:	687a      	ldr	r2, [r7, #4]
 8010020:	683b      	ldr	r3, [r7, #0]
 8010022:	781b      	ldrb	r3, [r3, #0]
 8010024:	009b      	lsls	r3, r3, #2
 8010026:	4413      	add	r3, r2
 8010028:	881b      	ldrh	r3, [r3, #0]
 801002a:	b29b      	uxth	r3, r3
 801002c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010030:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010034:	83bb      	strh	r3, [r7, #28]
 8010036:	8bbb      	ldrh	r3, [r7, #28]
 8010038:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 801003c:	83bb      	strh	r3, [r7, #28]
 801003e:	8bbb      	ldrh	r3, [r7, #28]
 8010040:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8010044:	83bb      	strh	r3, [r7, #28]
 8010046:	687a      	ldr	r2, [r7, #4]
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	781b      	ldrb	r3, [r3, #0]
 801004c:	009b      	lsls	r3, r3, #2
 801004e:	441a      	add	r2, r3
 8010050:	8bbb      	ldrh	r3, [r7, #28]
 8010052:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010056:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801005a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801005e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010062:	b29b      	uxth	r3, r3
 8010064:	8013      	strh	r3, [r2, #0]
 8010066:	e306      	b.n	8010676 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8010068:	687a      	ldr	r2, [r7, #4]
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	781b      	ldrb	r3, [r3, #0]
 801006e:	009b      	lsls	r3, r3, #2
 8010070:	4413      	add	r3, r2
 8010072:	881b      	ldrh	r3, [r3, #0]
 8010074:	b29b      	uxth	r3, r3
 8010076:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801007a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801007e:	83fb      	strh	r3, [r7, #30]
 8010080:	8bfb      	ldrh	r3, [r7, #30]
 8010082:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8010086:	83fb      	strh	r3, [r7, #30]
 8010088:	687a      	ldr	r2, [r7, #4]
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	781b      	ldrb	r3, [r3, #0]
 801008e:	009b      	lsls	r3, r3, #2
 8010090:	441a      	add	r2, r3
 8010092:	8bfb      	ldrh	r3, [r7, #30]
 8010094:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010098:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801009c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80100a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80100a4:	b29b      	uxth	r3, r3
 80100a6:	8013      	strh	r3, [r2, #0]
 80100a8:	e2e5      	b.n	8010676 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	78db      	ldrb	r3, [r3, #3]
 80100ae:	2b02      	cmp	r3, #2
 80100b0:	d11e      	bne.n	80100f0 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80100b2:	687a      	ldr	r2, [r7, #4]
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	781b      	ldrb	r3, [r3, #0]
 80100b8:	009b      	lsls	r3, r3, #2
 80100ba:	4413      	add	r3, r2
 80100bc:	881b      	ldrh	r3, [r3, #0]
 80100be:	b29b      	uxth	r3, r3
 80100c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80100c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80100c8:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80100cc:	687a      	ldr	r2, [r7, #4]
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	781b      	ldrb	r3, [r3, #0]
 80100d2:	009b      	lsls	r3, r3, #2
 80100d4:	441a      	add	r2, r3
 80100d6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80100da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80100de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80100e2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80100e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80100ea:	b29b      	uxth	r3, r3
 80100ec:	8013      	strh	r3, [r2, #0]
 80100ee:	e01d      	b.n	801012c <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80100f0:	687a      	ldr	r2, [r7, #4]
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	781b      	ldrb	r3, [r3, #0]
 80100f6:	009b      	lsls	r3, r3, #2
 80100f8:	4413      	add	r3, r2
 80100fa:	881b      	ldrh	r3, [r3, #0]
 80100fc:	b29b      	uxth	r3, r3
 80100fe:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8010102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010106:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 801010a:	687a      	ldr	r2, [r7, #4]
 801010c:	683b      	ldr	r3, [r7, #0]
 801010e:	781b      	ldrb	r3, [r3, #0]
 8010110:	009b      	lsls	r3, r3, #2
 8010112:	441a      	add	r2, r3
 8010114:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8010118:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801011c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010120:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010124:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010128:	b29b      	uxth	r3, r3
 801012a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010136:	b29b      	uxth	r3, r3
 8010138:	461a      	mov	r2, r3
 801013a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801013c:	4413      	add	r3, r2
 801013e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010140:	683b      	ldr	r3, [r7, #0]
 8010142:	781b      	ldrb	r3, [r3, #0]
 8010144:	00da      	lsls	r2, r3, #3
 8010146:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010148:	4413      	add	r3, r2
 801014a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801014e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010150:	683b      	ldr	r3, [r7, #0]
 8010152:	891b      	ldrh	r3, [r3, #8]
 8010154:	085b      	lsrs	r3, r3, #1
 8010156:	b29b      	uxth	r3, r3
 8010158:	005b      	lsls	r3, r3, #1
 801015a:	b29a      	uxth	r2, r3
 801015c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801015e:	801a      	strh	r2, [r3, #0]
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	677b      	str	r3, [r7, #116]	@ 0x74
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801016a:	b29b      	uxth	r3, r3
 801016c:	461a      	mov	r2, r3
 801016e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010170:	4413      	add	r3, r2
 8010172:	677b      	str	r3, [r7, #116]	@ 0x74
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	781b      	ldrb	r3, [r3, #0]
 8010178:	00da      	lsls	r2, r3, #3
 801017a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801017c:	4413      	add	r3, r2
 801017e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8010182:	673b      	str	r3, [r7, #112]	@ 0x70
 8010184:	683b      	ldr	r3, [r7, #0]
 8010186:	895b      	ldrh	r3, [r3, #10]
 8010188:	085b      	lsrs	r3, r3, #1
 801018a:	b29b      	uxth	r3, r3
 801018c:	005b      	lsls	r3, r3, #1
 801018e:	b29a      	uxth	r2, r3
 8010190:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010192:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8010194:	683b      	ldr	r3, [r7, #0]
 8010196:	785b      	ldrb	r3, [r3, #1]
 8010198:	2b00      	cmp	r3, #0
 801019a:	f040 81af 	bne.w	80104fc <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801019e:	687a      	ldr	r2, [r7, #4]
 80101a0:	683b      	ldr	r3, [r7, #0]
 80101a2:	781b      	ldrb	r3, [r3, #0]
 80101a4:	009b      	lsls	r3, r3, #2
 80101a6:	4413      	add	r3, r2
 80101a8:	881b      	ldrh	r3, [r3, #0]
 80101aa:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80101ae:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80101b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d01d      	beq.n	80101f6 <USB_ActivateEndpoint+0x53e>
 80101ba:	687a      	ldr	r2, [r7, #4]
 80101bc:	683b      	ldr	r3, [r7, #0]
 80101be:	781b      	ldrb	r3, [r3, #0]
 80101c0:	009b      	lsls	r3, r3, #2
 80101c2:	4413      	add	r3, r2
 80101c4:	881b      	ldrh	r3, [r3, #0]
 80101c6:	b29b      	uxth	r3, r3
 80101c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80101cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80101d0:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80101d4:	687a      	ldr	r2, [r7, #4]
 80101d6:	683b      	ldr	r3, [r7, #0]
 80101d8:	781b      	ldrb	r3, [r3, #0]
 80101da:	009b      	lsls	r3, r3, #2
 80101dc:	441a      	add	r2, r3
 80101de:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80101e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80101e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80101ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80101ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80101f2:	b29b      	uxth	r3, r3
 80101f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80101f6:	687a      	ldr	r2, [r7, #4]
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	781b      	ldrb	r3, [r3, #0]
 80101fc:	009b      	lsls	r3, r3, #2
 80101fe:	4413      	add	r3, r2
 8010200:	881b      	ldrh	r3, [r3, #0]
 8010202:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8010206:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 801020a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801020e:	2b00      	cmp	r3, #0
 8010210:	d01d      	beq.n	801024e <USB_ActivateEndpoint+0x596>
 8010212:	687a      	ldr	r2, [r7, #4]
 8010214:	683b      	ldr	r3, [r7, #0]
 8010216:	781b      	ldrb	r3, [r3, #0]
 8010218:	009b      	lsls	r3, r3, #2
 801021a:	4413      	add	r3, r2
 801021c:	881b      	ldrh	r3, [r3, #0]
 801021e:	b29b      	uxth	r3, r3
 8010220:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010224:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010228:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 801022c:	687a      	ldr	r2, [r7, #4]
 801022e:	683b      	ldr	r3, [r7, #0]
 8010230:	781b      	ldrb	r3, [r3, #0]
 8010232:	009b      	lsls	r3, r3, #2
 8010234:	441a      	add	r2, r3
 8010236:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 801023a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801023e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010242:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010246:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 801024a:	b29b      	uxth	r3, r3
 801024c:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801024e:	683b      	ldr	r3, [r7, #0]
 8010250:	785b      	ldrb	r3, [r3, #1]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d16b      	bne.n	801032e <USB_ActivateEndpoint+0x676>
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010260:	b29b      	uxth	r3, r3
 8010262:	461a      	mov	r2, r3
 8010264:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010266:	4413      	add	r3, r2
 8010268:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801026a:	683b      	ldr	r3, [r7, #0]
 801026c:	781b      	ldrb	r3, [r3, #0]
 801026e:	00da      	lsls	r2, r3, #3
 8010270:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010272:	4413      	add	r3, r2
 8010274:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010278:	64bb      	str	r3, [r7, #72]	@ 0x48
 801027a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801027c:	881b      	ldrh	r3, [r3, #0]
 801027e:	b29b      	uxth	r3, r3
 8010280:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010284:	b29a      	uxth	r2, r3
 8010286:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010288:	801a      	strh	r2, [r3, #0]
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	691b      	ldr	r3, [r3, #16]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d10a      	bne.n	80102a8 <USB_ActivateEndpoint+0x5f0>
 8010292:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010294:	881b      	ldrh	r3, [r3, #0]
 8010296:	b29b      	uxth	r3, r3
 8010298:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801029c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80102a0:	b29a      	uxth	r2, r3
 80102a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80102a4:	801a      	strh	r2, [r3, #0]
 80102a6:	e05d      	b.n	8010364 <USB_ActivateEndpoint+0x6ac>
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	691b      	ldr	r3, [r3, #16]
 80102ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80102ae:	d81c      	bhi.n	80102ea <USB_ActivateEndpoint+0x632>
 80102b0:	683b      	ldr	r3, [r7, #0]
 80102b2:	691b      	ldr	r3, [r3, #16]
 80102b4:	085b      	lsrs	r3, r3, #1
 80102b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80102ba:	683b      	ldr	r3, [r7, #0]
 80102bc:	691b      	ldr	r3, [r3, #16]
 80102be:	f003 0301 	and.w	r3, r3, #1
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d004      	beq.n	80102d0 <USB_ActivateEndpoint+0x618>
 80102c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80102ca:	3301      	adds	r3, #1
 80102cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80102d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80102d2:	881b      	ldrh	r3, [r3, #0]
 80102d4:	b29a      	uxth	r2, r3
 80102d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80102da:	b29b      	uxth	r3, r3
 80102dc:	029b      	lsls	r3, r3, #10
 80102de:	b29b      	uxth	r3, r3
 80102e0:	4313      	orrs	r3, r2
 80102e2:	b29a      	uxth	r2, r3
 80102e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80102e6:	801a      	strh	r2, [r3, #0]
 80102e8:	e03c      	b.n	8010364 <USB_ActivateEndpoint+0x6ac>
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	691b      	ldr	r3, [r3, #16]
 80102ee:	095b      	lsrs	r3, r3, #5
 80102f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	691b      	ldr	r3, [r3, #16]
 80102f8:	f003 031f 	and.w	r3, r3, #31
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d104      	bne.n	801030a <USB_ActivateEndpoint+0x652>
 8010300:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010304:	3b01      	subs	r3, #1
 8010306:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801030a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801030c:	881b      	ldrh	r3, [r3, #0]
 801030e:	b29a      	uxth	r2, r3
 8010310:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010314:	b29b      	uxth	r3, r3
 8010316:	029b      	lsls	r3, r3, #10
 8010318:	b29b      	uxth	r3, r3
 801031a:	4313      	orrs	r3, r2
 801031c:	b29b      	uxth	r3, r3
 801031e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010326:	b29a      	uxth	r2, r3
 8010328:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801032a:	801a      	strh	r2, [r3, #0]
 801032c:	e01a      	b.n	8010364 <USB_ActivateEndpoint+0x6ac>
 801032e:	683b      	ldr	r3, [r7, #0]
 8010330:	785b      	ldrb	r3, [r3, #1]
 8010332:	2b01      	cmp	r3, #1
 8010334:	d116      	bne.n	8010364 <USB_ActivateEndpoint+0x6ac>
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	657b      	str	r3, [r7, #84]	@ 0x54
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010340:	b29b      	uxth	r3, r3
 8010342:	461a      	mov	r2, r3
 8010344:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010346:	4413      	add	r3, r2
 8010348:	657b      	str	r3, [r7, #84]	@ 0x54
 801034a:	683b      	ldr	r3, [r7, #0]
 801034c:	781b      	ldrb	r3, [r3, #0]
 801034e:	00da      	lsls	r2, r3, #3
 8010350:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010352:	4413      	add	r3, r2
 8010354:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010358:	653b      	str	r3, [r7, #80]	@ 0x50
 801035a:	683b      	ldr	r3, [r7, #0]
 801035c:	691b      	ldr	r3, [r3, #16]
 801035e:	b29a      	uxth	r2, r3
 8010360:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010362:	801a      	strh	r2, [r3, #0]
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	647b      	str	r3, [r7, #68]	@ 0x44
 8010368:	683b      	ldr	r3, [r7, #0]
 801036a:	785b      	ldrb	r3, [r3, #1]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d16b      	bne.n	8010448 <USB_ActivateEndpoint+0x790>
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801037a:	b29b      	uxth	r3, r3
 801037c:	461a      	mov	r2, r3
 801037e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010380:	4413      	add	r3, r2
 8010382:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010384:	683b      	ldr	r3, [r7, #0]
 8010386:	781b      	ldrb	r3, [r3, #0]
 8010388:	00da      	lsls	r2, r3, #3
 801038a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801038c:	4413      	add	r3, r2
 801038e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010392:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010396:	881b      	ldrh	r3, [r3, #0]
 8010398:	b29b      	uxth	r3, r3
 801039a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801039e:	b29a      	uxth	r2, r3
 80103a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103a2:	801a      	strh	r2, [r3, #0]
 80103a4:	683b      	ldr	r3, [r7, #0]
 80103a6:	691b      	ldr	r3, [r3, #16]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d10a      	bne.n	80103c2 <USB_ActivateEndpoint+0x70a>
 80103ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103ae:	881b      	ldrh	r3, [r3, #0]
 80103b0:	b29b      	uxth	r3, r3
 80103b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80103b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80103ba:	b29a      	uxth	r2, r3
 80103bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103be:	801a      	strh	r2, [r3, #0]
 80103c0:	e05b      	b.n	801047a <USB_ActivateEndpoint+0x7c2>
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	691b      	ldr	r3, [r3, #16]
 80103c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80103c8:	d81c      	bhi.n	8010404 <USB_ActivateEndpoint+0x74c>
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	691b      	ldr	r3, [r3, #16]
 80103ce:	085b      	lsrs	r3, r3, #1
 80103d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80103d4:	683b      	ldr	r3, [r7, #0]
 80103d6:	691b      	ldr	r3, [r3, #16]
 80103d8:	f003 0301 	and.w	r3, r3, #1
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d004      	beq.n	80103ea <USB_ActivateEndpoint+0x732>
 80103e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80103e4:	3301      	adds	r3, #1
 80103e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80103ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103ec:	881b      	ldrh	r3, [r3, #0]
 80103ee:	b29a      	uxth	r2, r3
 80103f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80103f4:	b29b      	uxth	r3, r3
 80103f6:	029b      	lsls	r3, r3, #10
 80103f8:	b29b      	uxth	r3, r3
 80103fa:	4313      	orrs	r3, r2
 80103fc:	b29a      	uxth	r2, r3
 80103fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010400:	801a      	strh	r2, [r3, #0]
 8010402:	e03a      	b.n	801047a <USB_ActivateEndpoint+0x7c2>
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	691b      	ldr	r3, [r3, #16]
 8010408:	095b      	lsrs	r3, r3, #5
 801040a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801040e:	683b      	ldr	r3, [r7, #0]
 8010410:	691b      	ldr	r3, [r3, #16]
 8010412:	f003 031f 	and.w	r3, r3, #31
 8010416:	2b00      	cmp	r3, #0
 8010418:	d104      	bne.n	8010424 <USB_ActivateEndpoint+0x76c>
 801041a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801041e:	3b01      	subs	r3, #1
 8010420:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010426:	881b      	ldrh	r3, [r3, #0]
 8010428:	b29a      	uxth	r2, r3
 801042a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801042e:	b29b      	uxth	r3, r3
 8010430:	029b      	lsls	r3, r3, #10
 8010432:	b29b      	uxth	r3, r3
 8010434:	4313      	orrs	r3, r2
 8010436:	b29b      	uxth	r3, r3
 8010438:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801043c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010440:	b29a      	uxth	r2, r3
 8010442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010444:	801a      	strh	r2, [r3, #0]
 8010446:	e018      	b.n	801047a <USB_ActivateEndpoint+0x7c2>
 8010448:	683b      	ldr	r3, [r7, #0]
 801044a:	785b      	ldrb	r3, [r3, #1]
 801044c:	2b01      	cmp	r3, #1
 801044e:	d114      	bne.n	801047a <USB_ActivateEndpoint+0x7c2>
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010456:	b29b      	uxth	r3, r3
 8010458:	461a      	mov	r2, r3
 801045a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801045c:	4413      	add	r3, r2
 801045e:	647b      	str	r3, [r7, #68]	@ 0x44
 8010460:	683b      	ldr	r3, [r7, #0]
 8010462:	781b      	ldrb	r3, [r3, #0]
 8010464:	00da      	lsls	r2, r3, #3
 8010466:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010468:	4413      	add	r3, r2
 801046a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801046e:	643b      	str	r3, [r7, #64]	@ 0x40
 8010470:	683b      	ldr	r3, [r7, #0]
 8010472:	691b      	ldr	r3, [r3, #16]
 8010474:	b29a      	uxth	r2, r3
 8010476:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010478:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801047a:	687a      	ldr	r2, [r7, #4]
 801047c:	683b      	ldr	r3, [r7, #0]
 801047e:	781b      	ldrb	r3, [r3, #0]
 8010480:	009b      	lsls	r3, r3, #2
 8010482:	4413      	add	r3, r2
 8010484:	881b      	ldrh	r3, [r3, #0]
 8010486:	b29b      	uxth	r3, r3
 8010488:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801048c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010490:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8010492:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010494:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8010498:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801049a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801049c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80104a0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80104a2:	687a      	ldr	r2, [r7, #4]
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	781b      	ldrb	r3, [r3, #0]
 80104a8:	009b      	lsls	r3, r3, #2
 80104aa:	441a      	add	r2, r3
 80104ac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80104ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80104b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80104b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80104ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80104be:	b29b      	uxth	r3, r3
 80104c0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80104c2:	687a      	ldr	r2, [r7, #4]
 80104c4:	683b      	ldr	r3, [r7, #0]
 80104c6:	781b      	ldrb	r3, [r3, #0]
 80104c8:	009b      	lsls	r3, r3, #2
 80104ca:	4413      	add	r3, r2
 80104cc:	881b      	ldrh	r3, [r3, #0]
 80104ce:	b29b      	uxth	r3, r3
 80104d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80104d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80104d8:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80104da:	687a      	ldr	r2, [r7, #4]
 80104dc:	683b      	ldr	r3, [r7, #0]
 80104de:	781b      	ldrb	r3, [r3, #0]
 80104e0:	009b      	lsls	r3, r3, #2
 80104e2:	441a      	add	r2, r3
 80104e4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80104e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80104ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80104ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80104f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80104f6:	b29b      	uxth	r3, r3
 80104f8:	8013      	strh	r3, [r2, #0]
 80104fa:	e0bc      	b.n	8010676 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80104fc:	687a      	ldr	r2, [r7, #4]
 80104fe:	683b      	ldr	r3, [r7, #0]
 8010500:	781b      	ldrb	r3, [r3, #0]
 8010502:	009b      	lsls	r3, r3, #2
 8010504:	4413      	add	r3, r2
 8010506:	881b      	ldrh	r3, [r3, #0]
 8010508:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 801050c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8010510:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010514:	2b00      	cmp	r3, #0
 8010516:	d01d      	beq.n	8010554 <USB_ActivateEndpoint+0x89c>
 8010518:	687a      	ldr	r2, [r7, #4]
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	781b      	ldrb	r3, [r3, #0]
 801051e:	009b      	lsls	r3, r3, #2
 8010520:	4413      	add	r3, r2
 8010522:	881b      	ldrh	r3, [r3, #0]
 8010524:	b29b      	uxth	r3, r3
 8010526:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801052a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801052e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8010532:	687a      	ldr	r2, [r7, #4]
 8010534:	683b      	ldr	r3, [r7, #0]
 8010536:	781b      	ldrb	r3, [r3, #0]
 8010538:	009b      	lsls	r3, r3, #2
 801053a:	441a      	add	r2, r3
 801053c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8010540:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010544:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010548:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801054c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010550:	b29b      	uxth	r3, r3
 8010552:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010554:	687a      	ldr	r2, [r7, #4]
 8010556:	683b      	ldr	r3, [r7, #0]
 8010558:	781b      	ldrb	r3, [r3, #0]
 801055a:	009b      	lsls	r3, r3, #2
 801055c:	4413      	add	r3, r2
 801055e:	881b      	ldrh	r3, [r3, #0]
 8010560:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8010564:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8010568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801056c:	2b00      	cmp	r3, #0
 801056e:	d01d      	beq.n	80105ac <USB_ActivateEndpoint+0x8f4>
 8010570:	687a      	ldr	r2, [r7, #4]
 8010572:	683b      	ldr	r3, [r7, #0]
 8010574:	781b      	ldrb	r3, [r3, #0]
 8010576:	009b      	lsls	r3, r3, #2
 8010578:	4413      	add	r3, r2
 801057a:	881b      	ldrh	r3, [r3, #0]
 801057c:	b29b      	uxth	r3, r3
 801057e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010586:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 801058a:	687a      	ldr	r2, [r7, #4]
 801058c:	683b      	ldr	r3, [r7, #0]
 801058e:	781b      	ldrb	r3, [r3, #0]
 8010590:	009b      	lsls	r3, r3, #2
 8010592:	441a      	add	r2, r3
 8010594:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8010598:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801059c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80105a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80105a4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80105a8:	b29b      	uxth	r3, r3
 80105aa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80105ac:	683b      	ldr	r3, [r7, #0]
 80105ae:	78db      	ldrb	r3, [r3, #3]
 80105b0:	2b01      	cmp	r3, #1
 80105b2:	d024      	beq.n	80105fe <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80105b4:	687a      	ldr	r2, [r7, #4]
 80105b6:	683b      	ldr	r3, [r7, #0]
 80105b8:	781b      	ldrb	r3, [r3, #0]
 80105ba:	009b      	lsls	r3, r3, #2
 80105bc:	4413      	add	r3, r2
 80105be:	881b      	ldrh	r3, [r3, #0]
 80105c0:	b29b      	uxth	r3, r3
 80105c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80105c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80105ca:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80105ce:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80105d2:	f083 0320 	eor.w	r3, r3, #32
 80105d6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80105da:	687a      	ldr	r2, [r7, #4]
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	781b      	ldrb	r3, [r3, #0]
 80105e0:	009b      	lsls	r3, r3, #2
 80105e2:	441a      	add	r2, r3
 80105e4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80105e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80105ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80105f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80105f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80105f8:	b29b      	uxth	r3, r3
 80105fa:	8013      	strh	r3, [r2, #0]
 80105fc:	e01d      	b.n	801063a <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80105fe:	687a      	ldr	r2, [r7, #4]
 8010600:	683b      	ldr	r3, [r7, #0]
 8010602:	781b      	ldrb	r3, [r3, #0]
 8010604:	009b      	lsls	r3, r3, #2
 8010606:	4413      	add	r3, r2
 8010608:	881b      	ldrh	r3, [r3, #0]
 801060a:	b29b      	uxth	r3, r3
 801060c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010610:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010614:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8010618:	687a      	ldr	r2, [r7, #4]
 801061a:	683b      	ldr	r3, [r7, #0]
 801061c:	781b      	ldrb	r3, [r3, #0]
 801061e:	009b      	lsls	r3, r3, #2
 8010620:	441a      	add	r2, r3
 8010622:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8010626:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801062a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801062e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010636:	b29b      	uxth	r3, r3
 8010638:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801063a:	687a      	ldr	r2, [r7, #4]
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	781b      	ldrb	r3, [r3, #0]
 8010640:	009b      	lsls	r3, r3, #2
 8010642:	4413      	add	r3, r2
 8010644:	881b      	ldrh	r3, [r3, #0]
 8010646:	b29b      	uxth	r3, r3
 8010648:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801064c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010650:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8010654:	687a      	ldr	r2, [r7, #4]
 8010656:	683b      	ldr	r3, [r7, #0]
 8010658:	781b      	ldrb	r3, [r3, #0]
 801065a:	009b      	lsls	r3, r3, #2
 801065c:	441a      	add	r2, r3
 801065e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8010662:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010666:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801066a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801066e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010672:	b29b      	uxth	r3, r3
 8010674:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8010676:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 801067a:	4618      	mov	r0, r3
 801067c:	379c      	adds	r7, #156	@ 0x9c
 801067e:	46bd      	mov	sp, r7
 8010680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010684:	4770      	bx	lr
 8010686:	bf00      	nop

08010688 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010688:	b480      	push	{r7}
 801068a:	b08d      	sub	sp, #52	@ 0x34
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
 8010690:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8010692:	683b      	ldr	r3, [r7, #0]
 8010694:	7b1b      	ldrb	r3, [r3, #12]
 8010696:	2b00      	cmp	r3, #0
 8010698:	f040 808e 	bne.w	80107b8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	785b      	ldrb	r3, [r3, #1]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d044      	beq.n	801072e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80106a4:	687a      	ldr	r2, [r7, #4]
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	781b      	ldrb	r3, [r3, #0]
 80106aa:	009b      	lsls	r3, r3, #2
 80106ac:	4413      	add	r3, r2
 80106ae:	881b      	ldrh	r3, [r3, #0]
 80106b0:	81bb      	strh	r3, [r7, #12]
 80106b2:	89bb      	ldrh	r3, [r7, #12]
 80106b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d01b      	beq.n	80106f4 <USB_DeactivateEndpoint+0x6c>
 80106bc:	687a      	ldr	r2, [r7, #4]
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	781b      	ldrb	r3, [r3, #0]
 80106c2:	009b      	lsls	r3, r3, #2
 80106c4:	4413      	add	r3, r2
 80106c6:	881b      	ldrh	r3, [r3, #0]
 80106c8:	b29b      	uxth	r3, r3
 80106ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80106ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80106d2:	817b      	strh	r3, [r7, #10]
 80106d4:	687a      	ldr	r2, [r7, #4]
 80106d6:	683b      	ldr	r3, [r7, #0]
 80106d8:	781b      	ldrb	r3, [r3, #0]
 80106da:	009b      	lsls	r3, r3, #2
 80106dc:	441a      	add	r2, r3
 80106de:	897b      	ldrh	r3, [r7, #10]
 80106e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80106e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80106e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80106ec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80106f0:	b29b      	uxth	r3, r3
 80106f2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80106f4:	687a      	ldr	r2, [r7, #4]
 80106f6:	683b      	ldr	r3, [r7, #0]
 80106f8:	781b      	ldrb	r3, [r3, #0]
 80106fa:	009b      	lsls	r3, r3, #2
 80106fc:	4413      	add	r3, r2
 80106fe:	881b      	ldrh	r3, [r3, #0]
 8010700:	b29b      	uxth	r3, r3
 8010702:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010706:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801070a:	813b      	strh	r3, [r7, #8]
 801070c:	687a      	ldr	r2, [r7, #4]
 801070e:	683b      	ldr	r3, [r7, #0]
 8010710:	781b      	ldrb	r3, [r3, #0]
 8010712:	009b      	lsls	r3, r3, #2
 8010714:	441a      	add	r2, r3
 8010716:	893b      	ldrh	r3, [r7, #8]
 8010718:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801071c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010720:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010724:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010728:	b29b      	uxth	r3, r3
 801072a:	8013      	strh	r3, [r2, #0]
 801072c:	e192      	b.n	8010a54 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801072e:	687a      	ldr	r2, [r7, #4]
 8010730:	683b      	ldr	r3, [r7, #0]
 8010732:	781b      	ldrb	r3, [r3, #0]
 8010734:	009b      	lsls	r3, r3, #2
 8010736:	4413      	add	r3, r2
 8010738:	881b      	ldrh	r3, [r3, #0]
 801073a:	827b      	strh	r3, [r7, #18]
 801073c:	8a7b      	ldrh	r3, [r7, #18]
 801073e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010742:	2b00      	cmp	r3, #0
 8010744:	d01b      	beq.n	801077e <USB_DeactivateEndpoint+0xf6>
 8010746:	687a      	ldr	r2, [r7, #4]
 8010748:	683b      	ldr	r3, [r7, #0]
 801074a:	781b      	ldrb	r3, [r3, #0]
 801074c:	009b      	lsls	r3, r3, #2
 801074e:	4413      	add	r3, r2
 8010750:	881b      	ldrh	r3, [r3, #0]
 8010752:	b29b      	uxth	r3, r3
 8010754:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010758:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801075c:	823b      	strh	r3, [r7, #16]
 801075e:	687a      	ldr	r2, [r7, #4]
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	781b      	ldrb	r3, [r3, #0]
 8010764:	009b      	lsls	r3, r3, #2
 8010766:	441a      	add	r2, r3
 8010768:	8a3b      	ldrh	r3, [r7, #16]
 801076a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801076e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010772:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8010776:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801077a:	b29b      	uxth	r3, r3
 801077c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801077e:	687a      	ldr	r2, [r7, #4]
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	781b      	ldrb	r3, [r3, #0]
 8010784:	009b      	lsls	r3, r3, #2
 8010786:	4413      	add	r3, r2
 8010788:	881b      	ldrh	r3, [r3, #0]
 801078a:	b29b      	uxth	r3, r3
 801078c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010790:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010794:	81fb      	strh	r3, [r7, #14]
 8010796:	687a      	ldr	r2, [r7, #4]
 8010798:	683b      	ldr	r3, [r7, #0]
 801079a:	781b      	ldrb	r3, [r3, #0]
 801079c:	009b      	lsls	r3, r3, #2
 801079e:	441a      	add	r2, r3
 80107a0:	89fb      	ldrh	r3, [r7, #14]
 80107a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80107a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80107aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80107ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80107b2:	b29b      	uxth	r3, r3
 80107b4:	8013      	strh	r3, [r2, #0]
 80107b6:	e14d      	b.n	8010a54 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80107b8:	683b      	ldr	r3, [r7, #0]
 80107ba:	785b      	ldrb	r3, [r3, #1]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	f040 80a5 	bne.w	801090c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80107c2:	687a      	ldr	r2, [r7, #4]
 80107c4:	683b      	ldr	r3, [r7, #0]
 80107c6:	781b      	ldrb	r3, [r3, #0]
 80107c8:	009b      	lsls	r3, r3, #2
 80107ca:	4413      	add	r3, r2
 80107cc:	881b      	ldrh	r3, [r3, #0]
 80107ce:	843b      	strh	r3, [r7, #32]
 80107d0:	8c3b      	ldrh	r3, [r7, #32]
 80107d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d01b      	beq.n	8010812 <USB_DeactivateEndpoint+0x18a>
 80107da:	687a      	ldr	r2, [r7, #4]
 80107dc:	683b      	ldr	r3, [r7, #0]
 80107de:	781b      	ldrb	r3, [r3, #0]
 80107e0:	009b      	lsls	r3, r3, #2
 80107e2:	4413      	add	r3, r2
 80107e4:	881b      	ldrh	r3, [r3, #0]
 80107e6:	b29b      	uxth	r3, r3
 80107e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80107ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80107f0:	83fb      	strh	r3, [r7, #30]
 80107f2:	687a      	ldr	r2, [r7, #4]
 80107f4:	683b      	ldr	r3, [r7, #0]
 80107f6:	781b      	ldrb	r3, [r3, #0]
 80107f8:	009b      	lsls	r3, r3, #2
 80107fa:	441a      	add	r2, r3
 80107fc:	8bfb      	ldrh	r3, [r7, #30]
 80107fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010802:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010806:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801080a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801080e:	b29b      	uxth	r3, r3
 8010810:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010812:	687a      	ldr	r2, [r7, #4]
 8010814:	683b      	ldr	r3, [r7, #0]
 8010816:	781b      	ldrb	r3, [r3, #0]
 8010818:	009b      	lsls	r3, r3, #2
 801081a:	4413      	add	r3, r2
 801081c:	881b      	ldrh	r3, [r3, #0]
 801081e:	83bb      	strh	r3, [r7, #28]
 8010820:	8bbb      	ldrh	r3, [r7, #28]
 8010822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010826:	2b00      	cmp	r3, #0
 8010828:	d01b      	beq.n	8010862 <USB_DeactivateEndpoint+0x1da>
 801082a:	687a      	ldr	r2, [r7, #4]
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	781b      	ldrb	r3, [r3, #0]
 8010830:	009b      	lsls	r3, r3, #2
 8010832:	4413      	add	r3, r2
 8010834:	881b      	ldrh	r3, [r3, #0]
 8010836:	b29b      	uxth	r3, r3
 8010838:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801083c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010840:	837b      	strh	r3, [r7, #26]
 8010842:	687a      	ldr	r2, [r7, #4]
 8010844:	683b      	ldr	r3, [r7, #0]
 8010846:	781b      	ldrb	r3, [r3, #0]
 8010848:	009b      	lsls	r3, r3, #2
 801084a:	441a      	add	r2, r3
 801084c:	8b7b      	ldrh	r3, [r7, #26]
 801084e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010852:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010856:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801085a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 801085e:	b29b      	uxth	r3, r3
 8010860:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8010862:	687a      	ldr	r2, [r7, #4]
 8010864:	683b      	ldr	r3, [r7, #0]
 8010866:	781b      	ldrb	r3, [r3, #0]
 8010868:	009b      	lsls	r3, r3, #2
 801086a:	4413      	add	r3, r2
 801086c:	881b      	ldrh	r3, [r3, #0]
 801086e:	b29b      	uxth	r3, r3
 8010870:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010874:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010878:	833b      	strh	r3, [r7, #24]
 801087a:	687a      	ldr	r2, [r7, #4]
 801087c:	683b      	ldr	r3, [r7, #0]
 801087e:	781b      	ldrb	r3, [r3, #0]
 8010880:	009b      	lsls	r3, r3, #2
 8010882:	441a      	add	r2, r3
 8010884:	8b3b      	ldrh	r3, [r7, #24]
 8010886:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801088a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801088e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010892:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8010896:	b29b      	uxth	r3, r3
 8010898:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801089a:	687a      	ldr	r2, [r7, #4]
 801089c:	683b      	ldr	r3, [r7, #0]
 801089e:	781b      	ldrb	r3, [r3, #0]
 80108a0:	009b      	lsls	r3, r3, #2
 80108a2:	4413      	add	r3, r2
 80108a4:	881b      	ldrh	r3, [r3, #0]
 80108a6:	b29b      	uxth	r3, r3
 80108a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80108ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80108b0:	82fb      	strh	r3, [r7, #22]
 80108b2:	687a      	ldr	r2, [r7, #4]
 80108b4:	683b      	ldr	r3, [r7, #0]
 80108b6:	781b      	ldrb	r3, [r3, #0]
 80108b8:	009b      	lsls	r3, r3, #2
 80108ba:	441a      	add	r2, r3
 80108bc:	8afb      	ldrh	r3, [r7, #22]
 80108be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80108c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80108c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80108ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80108ce:	b29b      	uxth	r3, r3
 80108d0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80108d2:	687a      	ldr	r2, [r7, #4]
 80108d4:	683b      	ldr	r3, [r7, #0]
 80108d6:	781b      	ldrb	r3, [r3, #0]
 80108d8:	009b      	lsls	r3, r3, #2
 80108da:	4413      	add	r3, r2
 80108dc:	881b      	ldrh	r3, [r3, #0]
 80108de:	b29b      	uxth	r3, r3
 80108e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80108e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80108e8:	82bb      	strh	r3, [r7, #20]
 80108ea:	687a      	ldr	r2, [r7, #4]
 80108ec:	683b      	ldr	r3, [r7, #0]
 80108ee:	781b      	ldrb	r3, [r3, #0]
 80108f0:	009b      	lsls	r3, r3, #2
 80108f2:	441a      	add	r2, r3
 80108f4:	8abb      	ldrh	r3, [r7, #20]
 80108f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80108fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80108fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010902:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010906:	b29b      	uxth	r3, r3
 8010908:	8013      	strh	r3, [r2, #0]
 801090a:	e0a3      	b.n	8010a54 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801090c:	687a      	ldr	r2, [r7, #4]
 801090e:	683b      	ldr	r3, [r7, #0]
 8010910:	781b      	ldrb	r3, [r3, #0]
 8010912:	009b      	lsls	r3, r3, #2
 8010914:	4413      	add	r3, r2
 8010916:	881b      	ldrh	r3, [r3, #0]
 8010918:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801091a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801091c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010920:	2b00      	cmp	r3, #0
 8010922:	d01b      	beq.n	801095c <USB_DeactivateEndpoint+0x2d4>
 8010924:	687a      	ldr	r2, [r7, #4]
 8010926:	683b      	ldr	r3, [r7, #0]
 8010928:	781b      	ldrb	r3, [r3, #0]
 801092a:	009b      	lsls	r3, r3, #2
 801092c:	4413      	add	r3, r2
 801092e:	881b      	ldrh	r3, [r3, #0]
 8010930:	b29b      	uxth	r3, r3
 8010932:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801093a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 801093c:	687a      	ldr	r2, [r7, #4]
 801093e:	683b      	ldr	r3, [r7, #0]
 8010940:	781b      	ldrb	r3, [r3, #0]
 8010942:	009b      	lsls	r3, r3, #2
 8010944:	441a      	add	r2, r3
 8010946:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010948:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801094c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010950:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8010954:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010958:	b29b      	uxth	r3, r3
 801095a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801095c:	687a      	ldr	r2, [r7, #4]
 801095e:	683b      	ldr	r3, [r7, #0]
 8010960:	781b      	ldrb	r3, [r3, #0]
 8010962:	009b      	lsls	r3, r3, #2
 8010964:	4413      	add	r3, r2
 8010966:	881b      	ldrh	r3, [r3, #0]
 8010968:	857b      	strh	r3, [r7, #42]	@ 0x2a
 801096a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801096c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010970:	2b00      	cmp	r3, #0
 8010972:	d01b      	beq.n	80109ac <USB_DeactivateEndpoint+0x324>
 8010974:	687a      	ldr	r2, [r7, #4]
 8010976:	683b      	ldr	r3, [r7, #0]
 8010978:	781b      	ldrb	r3, [r3, #0]
 801097a:	009b      	lsls	r3, r3, #2
 801097c:	4413      	add	r3, r2
 801097e:	881b      	ldrh	r3, [r3, #0]
 8010980:	b29b      	uxth	r3, r3
 8010982:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010986:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801098a:	853b      	strh	r3, [r7, #40]	@ 0x28
 801098c:	687a      	ldr	r2, [r7, #4]
 801098e:	683b      	ldr	r3, [r7, #0]
 8010990:	781b      	ldrb	r3, [r3, #0]
 8010992:	009b      	lsls	r3, r3, #2
 8010994:	441a      	add	r2, r3
 8010996:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010998:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801099c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80109a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80109a4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80109a8:	b29b      	uxth	r3, r3
 80109aa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80109ac:	687a      	ldr	r2, [r7, #4]
 80109ae:	683b      	ldr	r3, [r7, #0]
 80109b0:	781b      	ldrb	r3, [r3, #0]
 80109b2:	009b      	lsls	r3, r3, #2
 80109b4:	4413      	add	r3, r2
 80109b6:	881b      	ldrh	r3, [r3, #0]
 80109b8:	b29b      	uxth	r3, r3
 80109ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80109be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80109c2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80109c4:	687a      	ldr	r2, [r7, #4]
 80109c6:	683b      	ldr	r3, [r7, #0]
 80109c8:	781b      	ldrb	r3, [r3, #0]
 80109ca:	009b      	lsls	r3, r3, #2
 80109cc:	441a      	add	r2, r3
 80109ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80109d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80109d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80109d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80109dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80109e0:	b29b      	uxth	r3, r3
 80109e2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80109e4:	687a      	ldr	r2, [r7, #4]
 80109e6:	683b      	ldr	r3, [r7, #0]
 80109e8:	781b      	ldrb	r3, [r3, #0]
 80109ea:	009b      	lsls	r3, r3, #2
 80109ec:	4413      	add	r3, r2
 80109ee:	881b      	ldrh	r3, [r3, #0]
 80109f0:	b29b      	uxth	r3, r3
 80109f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80109f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80109fa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80109fc:	687a      	ldr	r2, [r7, #4]
 80109fe:	683b      	ldr	r3, [r7, #0]
 8010a00:	781b      	ldrb	r3, [r3, #0]
 8010a02:	009b      	lsls	r3, r3, #2
 8010a04:	441a      	add	r2, r3
 8010a06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010a08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010a0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010a10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010a14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a18:	b29b      	uxth	r3, r3
 8010a1a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010a1c:	687a      	ldr	r2, [r7, #4]
 8010a1e:	683b      	ldr	r3, [r7, #0]
 8010a20:	781b      	ldrb	r3, [r3, #0]
 8010a22:	009b      	lsls	r3, r3, #2
 8010a24:	4413      	add	r3, r2
 8010a26:	881b      	ldrh	r3, [r3, #0]
 8010a28:	b29b      	uxth	r3, r3
 8010a2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010a2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010a32:	847b      	strh	r3, [r7, #34]	@ 0x22
 8010a34:	687a      	ldr	r2, [r7, #4]
 8010a36:	683b      	ldr	r3, [r7, #0]
 8010a38:	781b      	ldrb	r3, [r3, #0]
 8010a3a:	009b      	lsls	r3, r3, #2
 8010a3c:	441a      	add	r2, r3
 8010a3e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010a40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010a44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010a48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010a4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a50:	b29b      	uxth	r3, r3
 8010a52:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8010a54:	2300      	movs	r3, #0
}
 8010a56:	4618      	mov	r0, r3
 8010a58:	3734      	adds	r7, #52	@ 0x34
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a60:	4770      	bx	lr

08010a62 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010a62:	b580      	push	{r7, lr}
 8010a64:	b0ac      	sub	sp, #176	@ 0xb0
 8010a66:	af00      	add	r7, sp, #0
 8010a68:	6078      	str	r0, [r7, #4]
 8010a6a:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010a6c:	683b      	ldr	r3, [r7, #0]
 8010a6e:	785b      	ldrb	r3, [r3, #1]
 8010a70:	2b01      	cmp	r3, #1
 8010a72:	f040 84ca 	bne.w	801140a <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8010a76:	683b      	ldr	r3, [r7, #0]
 8010a78:	699a      	ldr	r2, [r3, #24]
 8010a7a:	683b      	ldr	r3, [r7, #0]
 8010a7c:	691b      	ldr	r3, [r3, #16]
 8010a7e:	429a      	cmp	r2, r3
 8010a80:	d904      	bls.n	8010a8c <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8010a82:	683b      	ldr	r3, [r7, #0]
 8010a84:	691b      	ldr	r3, [r3, #16]
 8010a86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010a8a:	e003      	b.n	8010a94 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8010a8c:	683b      	ldr	r3, [r7, #0]
 8010a8e:	699b      	ldr	r3, [r3, #24]
 8010a90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8010a94:	683b      	ldr	r3, [r7, #0]
 8010a96:	7b1b      	ldrb	r3, [r3, #12]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d122      	bne.n	8010ae2 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8010a9c:	683b      	ldr	r3, [r7, #0]
 8010a9e:	6959      	ldr	r1, [r3, #20]
 8010aa0:	683b      	ldr	r3, [r7, #0]
 8010aa2:	88da      	ldrh	r2, [r3, #6]
 8010aa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010aa8:	b29b      	uxth	r3, r3
 8010aaa:	6878      	ldr	r0, [r7, #4]
 8010aac:	f000 febd 	bl	801182a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	613b      	str	r3, [r7, #16]
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010aba:	b29b      	uxth	r3, r3
 8010abc:	461a      	mov	r2, r3
 8010abe:	693b      	ldr	r3, [r7, #16]
 8010ac0:	4413      	add	r3, r2
 8010ac2:	613b      	str	r3, [r7, #16]
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	781b      	ldrb	r3, [r3, #0]
 8010ac8:	00da      	lsls	r2, r3, #3
 8010aca:	693b      	ldr	r3, [r7, #16]
 8010acc:	4413      	add	r3, r2
 8010ace:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010ad2:	60fb      	str	r3, [r7, #12]
 8010ad4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010ad8:	b29a      	uxth	r2, r3
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	801a      	strh	r2, [r3, #0]
 8010ade:	f000 bc6f 	b.w	80113c0 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8010ae2:	683b      	ldr	r3, [r7, #0]
 8010ae4:	78db      	ldrb	r3, [r3, #3]
 8010ae6:	2b02      	cmp	r3, #2
 8010ae8:	f040 831e 	bne.w	8011128 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8010aec:	683b      	ldr	r3, [r7, #0]
 8010aee:	6a1a      	ldr	r2, [r3, #32]
 8010af0:	683b      	ldr	r3, [r7, #0]
 8010af2:	691b      	ldr	r3, [r3, #16]
 8010af4:	429a      	cmp	r2, r3
 8010af6:	f240 82cf 	bls.w	8011098 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8010afa:	687a      	ldr	r2, [r7, #4]
 8010afc:	683b      	ldr	r3, [r7, #0]
 8010afe:	781b      	ldrb	r3, [r3, #0]
 8010b00:	009b      	lsls	r3, r3, #2
 8010b02:	4413      	add	r3, r2
 8010b04:	881b      	ldrh	r3, [r3, #0]
 8010b06:	b29b      	uxth	r3, r3
 8010b08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010b0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010b10:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8010b14:	687a      	ldr	r2, [r7, #4]
 8010b16:	683b      	ldr	r3, [r7, #0]
 8010b18:	781b      	ldrb	r3, [r3, #0]
 8010b1a:	009b      	lsls	r3, r3, #2
 8010b1c:	441a      	add	r2, r3
 8010b1e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8010b22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010b26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010b2a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8010b2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010b32:	b29b      	uxth	r3, r3
 8010b34:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8010b36:	683b      	ldr	r3, [r7, #0]
 8010b38:	6a1a      	ldr	r2, [r3, #32]
 8010b3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010b3e:	1ad2      	subs	r2, r2, r3
 8010b40:	683b      	ldr	r3, [r7, #0]
 8010b42:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8010b44:	687a      	ldr	r2, [r7, #4]
 8010b46:	683b      	ldr	r3, [r7, #0]
 8010b48:	781b      	ldrb	r3, [r3, #0]
 8010b4a:	009b      	lsls	r3, r3, #2
 8010b4c:	4413      	add	r3, r2
 8010b4e:	881b      	ldrh	r3, [r3, #0]
 8010b50:	b29b      	uxth	r3, r3
 8010b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	f000 814f 	beq.w	8010dfa <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8010b60:	683b      	ldr	r3, [r7, #0]
 8010b62:	785b      	ldrb	r3, [r3, #1]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d16b      	bne.n	8010c40 <USB_EPStartXfer+0x1de>
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010b72:	b29b      	uxth	r3, r3
 8010b74:	461a      	mov	r2, r3
 8010b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b78:	4413      	add	r3, r2
 8010b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010b7c:	683b      	ldr	r3, [r7, #0]
 8010b7e:	781b      	ldrb	r3, [r3, #0]
 8010b80:	00da      	lsls	r2, r3, #3
 8010b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b84:	4413      	add	r3, r2
 8010b86:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010b8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8010b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b8e:	881b      	ldrh	r3, [r3, #0]
 8010b90:	b29b      	uxth	r3, r3
 8010b92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010b96:	b29a      	uxth	r2, r3
 8010b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b9a:	801a      	strh	r2, [r3, #0]
 8010b9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d10a      	bne.n	8010bba <USB_EPStartXfer+0x158>
 8010ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ba6:	881b      	ldrh	r3, [r3, #0]
 8010ba8:	b29b      	uxth	r3, r3
 8010baa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010bae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010bb2:	b29a      	uxth	r2, r3
 8010bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bb6:	801a      	strh	r2, [r3, #0]
 8010bb8:	e05b      	b.n	8010c72 <USB_EPStartXfer+0x210>
 8010bba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010bbe:	2b3e      	cmp	r3, #62	@ 0x3e
 8010bc0:	d81c      	bhi.n	8010bfc <USB_EPStartXfer+0x19a>
 8010bc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010bc6:	085b      	lsrs	r3, r3, #1
 8010bc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010bcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010bd0:	f003 0301 	and.w	r3, r3, #1
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d004      	beq.n	8010be2 <USB_EPStartXfer+0x180>
 8010bd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010bdc:	3301      	adds	r3, #1
 8010bde:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010be4:	881b      	ldrh	r3, [r3, #0]
 8010be6:	b29a      	uxth	r2, r3
 8010be8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010bec:	b29b      	uxth	r3, r3
 8010bee:	029b      	lsls	r3, r3, #10
 8010bf0:	b29b      	uxth	r3, r3
 8010bf2:	4313      	orrs	r3, r2
 8010bf4:	b29a      	uxth	r2, r3
 8010bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bf8:	801a      	strh	r2, [r3, #0]
 8010bfa:	e03a      	b.n	8010c72 <USB_EPStartXfer+0x210>
 8010bfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010c00:	095b      	lsrs	r3, r3, #5
 8010c02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010c06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010c0a:	f003 031f 	and.w	r3, r3, #31
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d104      	bne.n	8010c1c <USB_EPStartXfer+0x1ba>
 8010c12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010c16:	3b01      	subs	r3, #1
 8010c18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c1e:	881b      	ldrh	r3, [r3, #0]
 8010c20:	b29a      	uxth	r2, r3
 8010c22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010c26:	b29b      	uxth	r3, r3
 8010c28:	029b      	lsls	r3, r3, #10
 8010c2a:	b29b      	uxth	r3, r3
 8010c2c:	4313      	orrs	r3, r2
 8010c2e:	b29b      	uxth	r3, r3
 8010c30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010c34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010c38:	b29a      	uxth	r2, r3
 8010c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c3c:	801a      	strh	r2, [r3, #0]
 8010c3e:	e018      	b.n	8010c72 <USB_EPStartXfer+0x210>
 8010c40:	683b      	ldr	r3, [r7, #0]
 8010c42:	785b      	ldrb	r3, [r3, #1]
 8010c44:	2b01      	cmp	r3, #1
 8010c46:	d114      	bne.n	8010c72 <USB_EPStartXfer+0x210>
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010c4e:	b29b      	uxth	r3, r3
 8010c50:	461a      	mov	r2, r3
 8010c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c54:	4413      	add	r3, r2
 8010c56:	633b      	str	r3, [r7, #48]	@ 0x30
 8010c58:	683b      	ldr	r3, [r7, #0]
 8010c5a:	781b      	ldrb	r3, [r3, #0]
 8010c5c:	00da      	lsls	r2, r3, #3
 8010c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c60:	4413      	add	r3, r2
 8010c62:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010c68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010c6c:	b29a      	uxth	r2, r3
 8010c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8010c72:	683b      	ldr	r3, [r7, #0]
 8010c74:	895b      	ldrh	r3, [r3, #10]
 8010c76:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010c7a:	683b      	ldr	r3, [r7, #0]
 8010c7c:	6959      	ldr	r1, [r3, #20]
 8010c7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010c82:	b29b      	uxth	r3, r3
 8010c84:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8010c88:	6878      	ldr	r0, [r7, #4]
 8010c8a:	f000 fdce 	bl	801182a <USB_WritePMA>
            ep->xfer_buff += len;
 8010c8e:	683b      	ldr	r3, [r7, #0]
 8010c90:	695a      	ldr	r2, [r3, #20]
 8010c92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010c96:	441a      	add	r2, r3
 8010c98:	683b      	ldr	r3, [r7, #0]
 8010c9a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8010c9c:	683b      	ldr	r3, [r7, #0]
 8010c9e:	6a1a      	ldr	r2, [r3, #32]
 8010ca0:	683b      	ldr	r3, [r7, #0]
 8010ca2:	691b      	ldr	r3, [r3, #16]
 8010ca4:	429a      	cmp	r2, r3
 8010ca6:	d907      	bls.n	8010cb8 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8010ca8:	683b      	ldr	r3, [r7, #0]
 8010caa:	6a1a      	ldr	r2, [r3, #32]
 8010cac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010cb0:	1ad2      	subs	r2, r2, r3
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	621a      	str	r2, [r3, #32]
 8010cb6:	e006      	b.n	8010cc6 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8010cb8:	683b      	ldr	r3, [r7, #0]
 8010cba:	6a1b      	ldr	r3, [r3, #32]
 8010cbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	785b      	ldrb	r3, [r3, #1]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d16b      	bne.n	8010da6 <USB_EPStartXfer+0x344>
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	61bb      	str	r3, [r7, #24]
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010cd8:	b29b      	uxth	r3, r3
 8010cda:	461a      	mov	r2, r3
 8010cdc:	69bb      	ldr	r3, [r7, #24]
 8010cde:	4413      	add	r3, r2
 8010ce0:	61bb      	str	r3, [r7, #24]
 8010ce2:	683b      	ldr	r3, [r7, #0]
 8010ce4:	781b      	ldrb	r3, [r3, #0]
 8010ce6:	00da      	lsls	r2, r3, #3
 8010ce8:	69bb      	ldr	r3, [r7, #24]
 8010cea:	4413      	add	r3, r2
 8010cec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010cf0:	617b      	str	r3, [r7, #20]
 8010cf2:	697b      	ldr	r3, [r7, #20]
 8010cf4:	881b      	ldrh	r3, [r3, #0]
 8010cf6:	b29b      	uxth	r3, r3
 8010cf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010cfc:	b29a      	uxth	r2, r3
 8010cfe:	697b      	ldr	r3, [r7, #20]
 8010d00:	801a      	strh	r2, [r3, #0]
 8010d02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d10a      	bne.n	8010d20 <USB_EPStartXfer+0x2be>
 8010d0a:	697b      	ldr	r3, [r7, #20]
 8010d0c:	881b      	ldrh	r3, [r3, #0]
 8010d0e:	b29b      	uxth	r3, r3
 8010d10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010d14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010d18:	b29a      	uxth	r2, r3
 8010d1a:	697b      	ldr	r3, [r7, #20]
 8010d1c:	801a      	strh	r2, [r3, #0]
 8010d1e:	e05d      	b.n	8010ddc <USB_EPStartXfer+0x37a>
 8010d20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010d24:	2b3e      	cmp	r3, #62	@ 0x3e
 8010d26:	d81c      	bhi.n	8010d62 <USB_EPStartXfer+0x300>
 8010d28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010d2c:	085b      	lsrs	r3, r3, #1
 8010d2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8010d32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010d36:	f003 0301 	and.w	r3, r3, #1
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d004      	beq.n	8010d48 <USB_EPStartXfer+0x2e6>
 8010d3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010d42:	3301      	adds	r3, #1
 8010d44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8010d48:	697b      	ldr	r3, [r7, #20]
 8010d4a:	881b      	ldrh	r3, [r3, #0]
 8010d4c:	b29a      	uxth	r2, r3
 8010d4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010d52:	b29b      	uxth	r3, r3
 8010d54:	029b      	lsls	r3, r3, #10
 8010d56:	b29b      	uxth	r3, r3
 8010d58:	4313      	orrs	r3, r2
 8010d5a:	b29a      	uxth	r2, r3
 8010d5c:	697b      	ldr	r3, [r7, #20]
 8010d5e:	801a      	strh	r2, [r3, #0]
 8010d60:	e03c      	b.n	8010ddc <USB_EPStartXfer+0x37a>
 8010d62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010d66:	095b      	lsrs	r3, r3, #5
 8010d68:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8010d6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010d70:	f003 031f 	and.w	r3, r3, #31
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d104      	bne.n	8010d82 <USB_EPStartXfer+0x320>
 8010d78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010d7c:	3b01      	subs	r3, #1
 8010d7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8010d82:	697b      	ldr	r3, [r7, #20]
 8010d84:	881b      	ldrh	r3, [r3, #0]
 8010d86:	b29a      	uxth	r2, r3
 8010d88:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010d8c:	b29b      	uxth	r3, r3
 8010d8e:	029b      	lsls	r3, r3, #10
 8010d90:	b29b      	uxth	r3, r3
 8010d92:	4313      	orrs	r3, r2
 8010d94:	b29b      	uxth	r3, r3
 8010d96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010d9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010d9e:	b29a      	uxth	r2, r3
 8010da0:	697b      	ldr	r3, [r7, #20]
 8010da2:	801a      	strh	r2, [r3, #0]
 8010da4:	e01a      	b.n	8010ddc <USB_EPStartXfer+0x37a>
 8010da6:	683b      	ldr	r3, [r7, #0]
 8010da8:	785b      	ldrb	r3, [r3, #1]
 8010daa:	2b01      	cmp	r3, #1
 8010dac:	d116      	bne.n	8010ddc <USB_EPStartXfer+0x37a>
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	623b      	str	r3, [r7, #32]
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010db8:	b29b      	uxth	r3, r3
 8010dba:	461a      	mov	r2, r3
 8010dbc:	6a3b      	ldr	r3, [r7, #32]
 8010dbe:	4413      	add	r3, r2
 8010dc0:	623b      	str	r3, [r7, #32]
 8010dc2:	683b      	ldr	r3, [r7, #0]
 8010dc4:	781b      	ldrb	r3, [r3, #0]
 8010dc6:	00da      	lsls	r2, r3, #3
 8010dc8:	6a3b      	ldr	r3, [r7, #32]
 8010dca:	4413      	add	r3, r2
 8010dcc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010dd0:	61fb      	str	r3, [r7, #28]
 8010dd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010dd6:	b29a      	uxth	r2, r3
 8010dd8:	69fb      	ldr	r3, [r7, #28]
 8010dda:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8010ddc:	683b      	ldr	r3, [r7, #0]
 8010dde:	891b      	ldrh	r3, [r3, #8]
 8010de0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010de4:	683b      	ldr	r3, [r7, #0]
 8010de6:	6959      	ldr	r1, [r3, #20]
 8010de8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010dec:	b29b      	uxth	r3, r3
 8010dee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8010df2:	6878      	ldr	r0, [r7, #4]
 8010df4:	f000 fd19 	bl	801182a <USB_WritePMA>
 8010df8:	e2e2      	b.n	80113c0 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010dfa:	683b      	ldr	r3, [r7, #0]
 8010dfc:	785b      	ldrb	r3, [r3, #1]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d16b      	bne.n	8010eda <USB_EPStartXfer+0x478>
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010e0c:	b29b      	uxth	r3, r3
 8010e0e:	461a      	mov	r2, r3
 8010e10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010e12:	4413      	add	r3, r2
 8010e14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010e16:	683b      	ldr	r3, [r7, #0]
 8010e18:	781b      	ldrb	r3, [r3, #0]
 8010e1a:	00da      	lsls	r2, r3, #3
 8010e1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010e1e:	4413      	add	r3, r2
 8010e20:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010e24:	647b      	str	r3, [r7, #68]	@ 0x44
 8010e26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010e28:	881b      	ldrh	r3, [r3, #0]
 8010e2a:	b29b      	uxth	r3, r3
 8010e2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010e30:	b29a      	uxth	r2, r3
 8010e32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010e34:	801a      	strh	r2, [r3, #0]
 8010e36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d10a      	bne.n	8010e54 <USB_EPStartXfer+0x3f2>
 8010e3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010e40:	881b      	ldrh	r3, [r3, #0]
 8010e42:	b29b      	uxth	r3, r3
 8010e44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010e48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010e4c:	b29a      	uxth	r2, r3
 8010e4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010e50:	801a      	strh	r2, [r3, #0]
 8010e52:	e05d      	b.n	8010f10 <USB_EPStartXfer+0x4ae>
 8010e54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010e58:	2b3e      	cmp	r3, #62	@ 0x3e
 8010e5a:	d81c      	bhi.n	8010e96 <USB_EPStartXfer+0x434>
 8010e5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010e60:	085b      	lsrs	r3, r3, #1
 8010e62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8010e66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010e6a:	f003 0301 	and.w	r3, r3, #1
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d004      	beq.n	8010e7c <USB_EPStartXfer+0x41a>
 8010e72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010e76:	3301      	adds	r3, #1
 8010e78:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8010e7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010e7e:	881b      	ldrh	r3, [r3, #0]
 8010e80:	b29a      	uxth	r2, r3
 8010e82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010e86:	b29b      	uxth	r3, r3
 8010e88:	029b      	lsls	r3, r3, #10
 8010e8a:	b29b      	uxth	r3, r3
 8010e8c:	4313      	orrs	r3, r2
 8010e8e:	b29a      	uxth	r2, r3
 8010e90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010e92:	801a      	strh	r2, [r3, #0]
 8010e94:	e03c      	b.n	8010f10 <USB_EPStartXfer+0x4ae>
 8010e96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010e9a:	095b      	lsrs	r3, r3, #5
 8010e9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8010ea0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010ea4:	f003 031f 	and.w	r3, r3, #31
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d104      	bne.n	8010eb6 <USB_EPStartXfer+0x454>
 8010eac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010eb0:	3b01      	subs	r3, #1
 8010eb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8010eb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010eb8:	881b      	ldrh	r3, [r3, #0]
 8010eba:	b29a      	uxth	r2, r3
 8010ebc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010ec0:	b29b      	uxth	r3, r3
 8010ec2:	029b      	lsls	r3, r3, #10
 8010ec4:	b29b      	uxth	r3, r3
 8010ec6:	4313      	orrs	r3, r2
 8010ec8:	b29b      	uxth	r3, r3
 8010eca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010ece:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010ed2:	b29a      	uxth	r2, r3
 8010ed4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010ed6:	801a      	strh	r2, [r3, #0]
 8010ed8:	e01a      	b.n	8010f10 <USB_EPStartXfer+0x4ae>
 8010eda:	683b      	ldr	r3, [r7, #0]
 8010edc:	785b      	ldrb	r3, [r3, #1]
 8010ede:	2b01      	cmp	r3, #1
 8010ee0:	d116      	bne.n	8010f10 <USB_EPStartXfer+0x4ae>
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	653b      	str	r3, [r7, #80]	@ 0x50
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010eec:	b29b      	uxth	r3, r3
 8010eee:	461a      	mov	r2, r3
 8010ef0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010ef2:	4413      	add	r3, r2
 8010ef4:	653b      	str	r3, [r7, #80]	@ 0x50
 8010ef6:	683b      	ldr	r3, [r7, #0]
 8010ef8:	781b      	ldrb	r3, [r3, #0]
 8010efa:	00da      	lsls	r2, r3, #3
 8010efc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010efe:	4413      	add	r3, r2
 8010f00:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010f04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010f06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010f0a:	b29a      	uxth	r2, r3
 8010f0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f0e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8010f10:	683b      	ldr	r3, [r7, #0]
 8010f12:	891b      	ldrh	r3, [r3, #8]
 8010f14:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010f18:	683b      	ldr	r3, [r7, #0]
 8010f1a:	6959      	ldr	r1, [r3, #20]
 8010f1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010f20:	b29b      	uxth	r3, r3
 8010f22:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8010f26:	6878      	ldr	r0, [r7, #4]
 8010f28:	f000 fc7f 	bl	801182a <USB_WritePMA>
            ep->xfer_buff += len;
 8010f2c:	683b      	ldr	r3, [r7, #0]
 8010f2e:	695a      	ldr	r2, [r3, #20]
 8010f30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010f34:	441a      	add	r2, r3
 8010f36:	683b      	ldr	r3, [r7, #0]
 8010f38:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8010f3a:	683b      	ldr	r3, [r7, #0]
 8010f3c:	6a1a      	ldr	r2, [r3, #32]
 8010f3e:	683b      	ldr	r3, [r7, #0]
 8010f40:	691b      	ldr	r3, [r3, #16]
 8010f42:	429a      	cmp	r2, r3
 8010f44:	d907      	bls.n	8010f56 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8010f46:	683b      	ldr	r3, [r7, #0]
 8010f48:	6a1a      	ldr	r2, [r3, #32]
 8010f4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010f4e:	1ad2      	subs	r2, r2, r3
 8010f50:	683b      	ldr	r3, [r7, #0]
 8010f52:	621a      	str	r2, [r3, #32]
 8010f54:	e006      	b.n	8010f64 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8010f56:	683b      	ldr	r3, [r7, #0]
 8010f58:	6a1b      	ldr	r3, [r3, #32]
 8010f5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8010f5e:	683b      	ldr	r3, [r7, #0]
 8010f60:	2200      	movs	r2, #0
 8010f62:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	643b      	str	r3, [r7, #64]	@ 0x40
 8010f68:	683b      	ldr	r3, [r7, #0]
 8010f6a:	785b      	ldrb	r3, [r3, #1]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d16b      	bne.n	8011048 <USB_EPStartXfer+0x5e6>
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010f7a:	b29b      	uxth	r3, r3
 8010f7c:	461a      	mov	r2, r3
 8010f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f80:	4413      	add	r3, r2
 8010f82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010f84:	683b      	ldr	r3, [r7, #0]
 8010f86:	781b      	ldrb	r3, [r3, #0]
 8010f88:	00da      	lsls	r2, r3, #3
 8010f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f8c:	4413      	add	r3, r2
 8010f8e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010f92:	637b      	str	r3, [r7, #52]	@ 0x34
 8010f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f96:	881b      	ldrh	r3, [r3, #0]
 8010f98:	b29b      	uxth	r3, r3
 8010f9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010f9e:	b29a      	uxth	r2, r3
 8010fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fa2:	801a      	strh	r2, [r3, #0]
 8010fa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d10a      	bne.n	8010fc2 <USB_EPStartXfer+0x560>
 8010fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fae:	881b      	ldrh	r3, [r3, #0]
 8010fb0:	b29b      	uxth	r3, r3
 8010fb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010fb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010fba:	b29a      	uxth	r2, r3
 8010fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fbe:	801a      	strh	r2, [r3, #0]
 8010fc0:	e05b      	b.n	801107a <USB_EPStartXfer+0x618>
 8010fc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010fc6:	2b3e      	cmp	r3, #62	@ 0x3e
 8010fc8:	d81c      	bhi.n	8011004 <USB_EPStartXfer+0x5a2>
 8010fca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010fce:	085b      	lsrs	r3, r3, #1
 8010fd0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010fd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010fd8:	f003 0301 	and.w	r3, r3, #1
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d004      	beq.n	8010fea <USB_EPStartXfer+0x588>
 8010fe0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010fe4:	3301      	adds	r3, #1
 8010fe6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fec:	881b      	ldrh	r3, [r3, #0]
 8010fee:	b29a      	uxth	r2, r3
 8010ff0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010ff4:	b29b      	uxth	r3, r3
 8010ff6:	029b      	lsls	r3, r3, #10
 8010ff8:	b29b      	uxth	r3, r3
 8010ffa:	4313      	orrs	r3, r2
 8010ffc:	b29a      	uxth	r2, r3
 8010ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011000:	801a      	strh	r2, [r3, #0]
 8011002:	e03a      	b.n	801107a <USB_EPStartXfer+0x618>
 8011004:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011008:	095b      	lsrs	r3, r3, #5
 801100a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801100e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011012:	f003 031f 	and.w	r3, r3, #31
 8011016:	2b00      	cmp	r3, #0
 8011018:	d104      	bne.n	8011024 <USB_EPStartXfer+0x5c2>
 801101a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801101e:	3b01      	subs	r3, #1
 8011020:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011026:	881b      	ldrh	r3, [r3, #0]
 8011028:	b29a      	uxth	r2, r3
 801102a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801102e:	b29b      	uxth	r3, r3
 8011030:	029b      	lsls	r3, r3, #10
 8011032:	b29b      	uxth	r3, r3
 8011034:	4313      	orrs	r3, r2
 8011036:	b29b      	uxth	r3, r3
 8011038:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801103c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011040:	b29a      	uxth	r2, r3
 8011042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011044:	801a      	strh	r2, [r3, #0]
 8011046:	e018      	b.n	801107a <USB_EPStartXfer+0x618>
 8011048:	683b      	ldr	r3, [r7, #0]
 801104a:	785b      	ldrb	r3, [r3, #1]
 801104c:	2b01      	cmp	r3, #1
 801104e:	d114      	bne.n	801107a <USB_EPStartXfer+0x618>
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011056:	b29b      	uxth	r3, r3
 8011058:	461a      	mov	r2, r3
 801105a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801105c:	4413      	add	r3, r2
 801105e:	643b      	str	r3, [r7, #64]	@ 0x40
 8011060:	683b      	ldr	r3, [r7, #0]
 8011062:	781b      	ldrb	r3, [r3, #0]
 8011064:	00da      	lsls	r2, r3, #3
 8011066:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011068:	4413      	add	r3, r2
 801106a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801106e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011070:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011074:	b29a      	uxth	r2, r3
 8011076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011078:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801107a:	683b      	ldr	r3, [r7, #0]
 801107c:	895b      	ldrh	r3, [r3, #10]
 801107e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011082:	683b      	ldr	r3, [r7, #0]
 8011084:	6959      	ldr	r1, [r3, #20]
 8011086:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801108a:	b29b      	uxth	r3, r3
 801108c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8011090:	6878      	ldr	r0, [r7, #4]
 8011092:	f000 fbca 	bl	801182a <USB_WritePMA>
 8011096:	e193      	b.n	80113c0 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8011098:	683b      	ldr	r3, [r7, #0]
 801109a:	6a1b      	ldr	r3, [r3, #32]
 801109c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80110a0:	687a      	ldr	r2, [r7, #4]
 80110a2:	683b      	ldr	r3, [r7, #0]
 80110a4:	781b      	ldrb	r3, [r3, #0]
 80110a6:	009b      	lsls	r3, r3, #2
 80110a8:	4413      	add	r3, r2
 80110aa:	881b      	ldrh	r3, [r3, #0]
 80110ac:	b29b      	uxth	r3, r3
 80110ae:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80110b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80110b6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80110ba:	687a      	ldr	r2, [r7, #4]
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	781b      	ldrb	r3, [r3, #0]
 80110c0:	009b      	lsls	r3, r3, #2
 80110c2:	441a      	add	r2, r3
 80110c4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80110c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80110cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80110d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80110d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80110d8:	b29b      	uxth	r3, r3
 80110da:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80110e6:	b29b      	uxth	r3, r3
 80110e8:	461a      	mov	r2, r3
 80110ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80110ec:	4413      	add	r3, r2
 80110ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80110f0:	683b      	ldr	r3, [r7, #0]
 80110f2:	781b      	ldrb	r3, [r3, #0]
 80110f4:	00da      	lsls	r2, r3, #3
 80110f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80110f8:	4413      	add	r3, r2
 80110fa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80110fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011100:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011104:	b29a      	uxth	r2, r3
 8011106:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011108:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801110a:	683b      	ldr	r3, [r7, #0]
 801110c:	891b      	ldrh	r3, [r3, #8]
 801110e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011112:	683b      	ldr	r3, [r7, #0]
 8011114:	6959      	ldr	r1, [r3, #20]
 8011116:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801111a:	b29b      	uxth	r3, r3
 801111c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8011120:	6878      	ldr	r0, [r7, #4]
 8011122:	f000 fb82 	bl	801182a <USB_WritePMA>
 8011126:	e14b      	b.n	80113c0 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8011128:	683b      	ldr	r3, [r7, #0]
 801112a:	6a1a      	ldr	r2, [r3, #32]
 801112c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011130:	1ad2      	subs	r2, r2, r3
 8011132:	683b      	ldr	r3, [r7, #0]
 8011134:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8011136:	687a      	ldr	r2, [r7, #4]
 8011138:	683b      	ldr	r3, [r7, #0]
 801113a:	781b      	ldrb	r3, [r3, #0]
 801113c:	009b      	lsls	r3, r3, #2
 801113e:	4413      	add	r3, r2
 8011140:	881b      	ldrh	r3, [r3, #0]
 8011142:	b29b      	uxth	r3, r3
 8011144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011148:	2b00      	cmp	r3, #0
 801114a:	f000 809a 	beq.w	8011282 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	673b      	str	r3, [r7, #112]	@ 0x70
 8011152:	683b      	ldr	r3, [r7, #0]
 8011154:	785b      	ldrb	r3, [r3, #1]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d16b      	bne.n	8011232 <USB_EPStartXfer+0x7d0>
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011164:	b29b      	uxth	r3, r3
 8011166:	461a      	mov	r2, r3
 8011168:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801116a:	4413      	add	r3, r2
 801116c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801116e:	683b      	ldr	r3, [r7, #0]
 8011170:	781b      	ldrb	r3, [r3, #0]
 8011172:	00da      	lsls	r2, r3, #3
 8011174:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011176:	4413      	add	r3, r2
 8011178:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801117c:	667b      	str	r3, [r7, #100]	@ 0x64
 801117e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011180:	881b      	ldrh	r3, [r3, #0]
 8011182:	b29b      	uxth	r3, r3
 8011184:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011188:	b29a      	uxth	r2, r3
 801118a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801118c:	801a      	strh	r2, [r3, #0]
 801118e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011192:	2b00      	cmp	r3, #0
 8011194:	d10a      	bne.n	80111ac <USB_EPStartXfer+0x74a>
 8011196:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011198:	881b      	ldrh	r3, [r3, #0]
 801119a:	b29b      	uxth	r3, r3
 801119c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80111a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80111a4:	b29a      	uxth	r2, r3
 80111a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80111a8:	801a      	strh	r2, [r3, #0]
 80111aa:	e05b      	b.n	8011264 <USB_EPStartXfer+0x802>
 80111ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80111b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80111b2:	d81c      	bhi.n	80111ee <USB_EPStartXfer+0x78c>
 80111b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80111b8:	085b      	lsrs	r3, r3, #1
 80111ba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80111be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80111c2:	f003 0301 	and.w	r3, r3, #1
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d004      	beq.n	80111d4 <USB_EPStartXfer+0x772>
 80111ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80111ce:	3301      	adds	r3, #1
 80111d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80111d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80111d6:	881b      	ldrh	r3, [r3, #0]
 80111d8:	b29a      	uxth	r2, r3
 80111da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80111de:	b29b      	uxth	r3, r3
 80111e0:	029b      	lsls	r3, r3, #10
 80111e2:	b29b      	uxth	r3, r3
 80111e4:	4313      	orrs	r3, r2
 80111e6:	b29a      	uxth	r2, r3
 80111e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80111ea:	801a      	strh	r2, [r3, #0]
 80111ec:	e03a      	b.n	8011264 <USB_EPStartXfer+0x802>
 80111ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80111f2:	095b      	lsrs	r3, r3, #5
 80111f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80111f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80111fc:	f003 031f 	and.w	r3, r3, #31
 8011200:	2b00      	cmp	r3, #0
 8011202:	d104      	bne.n	801120e <USB_EPStartXfer+0x7ac>
 8011204:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011208:	3b01      	subs	r3, #1
 801120a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801120e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011210:	881b      	ldrh	r3, [r3, #0]
 8011212:	b29a      	uxth	r2, r3
 8011214:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011218:	b29b      	uxth	r3, r3
 801121a:	029b      	lsls	r3, r3, #10
 801121c:	b29b      	uxth	r3, r3
 801121e:	4313      	orrs	r3, r2
 8011220:	b29b      	uxth	r3, r3
 8011222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801122a:	b29a      	uxth	r2, r3
 801122c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801122e:	801a      	strh	r2, [r3, #0]
 8011230:	e018      	b.n	8011264 <USB_EPStartXfer+0x802>
 8011232:	683b      	ldr	r3, [r7, #0]
 8011234:	785b      	ldrb	r3, [r3, #1]
 8011236:	2b01      	cmp	r3, #1
 8011238:	d114      	bne.n	8011264 <USB_EPStartXfer+0x802>
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011240:	b29b      	uxth	r3, r3
 8011242:	461a      	mov	r2, r3
 8011244:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011246:	4413      	add	r3, r2
 8011248:	673b      	str	r3, [r7, #112]	@ 0x70
 801124a:	683b      	ldr	r3, [r7, #0]
 801124c:	781b      	ldrb	r3, [r3, #0]
 801124e:	00da      	lsls	r2, r3, #3
 8011250:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011252:	4413      	add	r3, r2
 8011254:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011258:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801125a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801125e:	b29a      	uxth	r2, r3
 8011260:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011262:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8011264:	683b      	ldr	r3, [r7, #0]
 8011266:	895b      	ldrh	r3, [r3, #10]
 8011268:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801126c:	683b      	ldr	r3, [r7, #0]
 801126e:	6959      	ldr	r1, [r3, #20]
 8011270:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011274:	b29b      	uxth	r3, r3
 8011276:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 801127a:	6878      	ldr	r0, [r7, #4]
 801127c:	f000 fad5 	bl	801182a <USB_WritePMA>
 8011280:	e09e      	b.n	80113c0 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011282:	683b      	ldr	r3, [r7, #0]
 8011284:	785b      	ldrb	r3, [r3, #1]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d16b      	bne.n	8011362 <USB_EPStartXfer+0x900>
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011294:	b29b      	uxth	r3, r3
 8011296:	461a      	mov	r2, r3
 8011298:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801129a:	4413      	add	r3, r2
 801129c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801129e:	683b      	ldr	r3, [r7, #0]
 80112a0:	781b      	ldrb	r3, [r3, #0]
 80112a2:	00da      	lsls	r2, r3, #3
 80112a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80112a6:	4413      	add	r3, r2
 80112a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80112ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80112ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80112b0:	881b      	ldrh	r3, [r3, #0]
 80112b2:	b29b      	uxth	r3, r3
 80112b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80112b8:	b29a      	uxth	r2, r3
 80112ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80112bc:	801a      	strh	r2, [r3, #0]
 80112be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d10a      	bne.n	80112dc <USB_EPStartXfer+0x87a>
 80112c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80112c8:	881b      	ldrh	r3, [r3, #0]
 80112ca:	b29b      	uxth	r3, r3
 80112cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80112d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80112d4:	b29a      	uxth	r2, r3
 80112d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80112d8:	801a      	strh	r2, [r3, #0]
 80112da:	e063      	b.n	80113a4 <USB_EPStartXfer+0x942>
 80112dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80112e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80112e2:	d81c      	bhi.n	801131e <USB_EPStartXfer+0x8bc>
 80112e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80112e8:	085b      	lsrs	r3, r3, #1
 80112ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80112ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80112f2:	f003 0301 	and.w	r3, r3, #1
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d004      	beq.n	8011304 <USB_EPStartXfer+0x8a2>
 80112fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80112fe:	3301      	adds	r3, #1
 8011300:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011304:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011306:	881b      	ldrh	r3, [r3, #0]
 8011308:	b29a      	uxth	r2, r3
 801130a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801130e:	b29b      	uxth	r3, r3
 8011310:	029b      	lsls	r3, r3, #10
 8011312:	b29b      	uxth	r3, r3
 8011314:	4313      	orrs	r3, r2
 8011316:	b29a      	uxth	r2, r3
 8011318:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801131a:	801a      	strh	r2, [r3, #0]
 801131c:	e042      	b.n	80113a4 <USB_EPStartXfer+0x942>
 801131e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011322:	095b      	lsrs	r3, r3, #5
 8011324:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011328:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801132c:	f003 031f 	and.w	r3, r3, #31
 8011330:	2b00      	cmp	r3, #0
 8011332:	d104      	bne.n	801133e <USB_EPStartXfer+0x8dc>
 8011334:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011338:	3b01      	subs	r3, #1
 801133a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801133e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011340:	881b      	ldrh	r3, [r3, #0]
 8011342:	b29a      	uxth	r2, r3
 8011344:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011348:	b29b      	uxth	r3, r3
 801134a:	029b      	lsls	r3, r3, #10
 801134c:	b29b      	uxth	r3, r3
 801134e:	4313      	orrs	r3, r2
 8011350:	b29b      	uxth	r3, r3
 8011352:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011356:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801135a:	b29a      	uxth	r2, r3
 801135c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801135e:	801a      	strh	r2, [r3, #0]
 8011360:	e020      	b.n	80113a4 <USB_EPStartXfer+0x942>
 8011362:	683b      	ldr	r3, [r7, #0]
 8011364:	785b      	ldrb	r3, [r3, #1]
 8011366:	2b01      	cmp	r3, #1
 8011368:	d11c      	bne.n	80113a4 <USB_EPStartXfer+0x942>
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011376:	b29b      	uxth	r3, r3
 8011378:	461a      	mov	r2, r3
 801137a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801137e:	4413      	add	r3, r2
 8011380:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011384:	683b      	ldr	r3, [r7, #0]
 8011386:	781b      	ldrb	r3, [r3, #0]
 8011388:	00da      	lsls	r2, r3, #3
 801138a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801138e:	4413      	add	r3, r2
 8011390:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011394:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011398:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801139c:	b29a      	uxth	r2, r3
 801139e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80113a2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80113a4:	683b      	ldr	r3, [r7, #0]
 80113a6:	891b      	ldrh	r3, [r3, #8]
 80113a8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80113ac:	683b      	ldr	r3, [r7, #0]
 80113ae:	6959      	ldr	r1, [r3, #20]
 80113b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80113b4:	b29b      	uxth	r3, r3
 80113b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80113ba:	6878      	ldr	r0, [r7, #4]
 80113bc:	f000 fa35 	bl	801182a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80113c0:	687a      	ldr	r2, [r7, #4]
 80113c2:	683b      	ldr	r3, [r7, #0]
 80113c4:	781b      	ldrb	r3, [r3, #0]
 80113c6:	009b      	lsls	r3, r3, #2
 80113c8:	4413      	add	r3, r2
 80113ca:	881b      	ldrh	r3, [r3, #0]
 80113cc:	b29b      	uxth	r3, r3
 80113ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80113d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80113d6:	817b      	strh	r3, [r7, #10]
 80113d8:	897b      	ldrh	r3, [r7, #10]
 80113da:	f083 0310 	eor.w	r3, r3, #16
 80113de:	817b      	strh	r3, [r7, #10]
 80113e0:	897b      	ldrh	r3, [r7, #10]
 80113e2:	f083 0320 	eor.w	r3, r3, #32
 80113e6:	817b      	strh	r3, [r7, #10]
 80113e8:	687a      	ldr	r2, [r7, #4]
 80113ea:	683b      	ldr	r3, [r7, #0]
 80113ec:	781b      	ldrb	r3, [r3, #0]
 80113ee:	009b      	lsls	r3, r3, #2
 80113f0:	441a      	add	r2, r3
 80113f2:	897b      	ldrh	r3, [r7, #10]
 80113f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80113f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80113fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011400:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011404:	b29b      	uxth	r3, r3
 8011406:	8013      	strh	r3, [r2, #0]
 8011408:	e0d5      	b.n	80115b6 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801140a:	683b      	ldr	r3, [r7, #0]
 801140c:	7b1b      	ldrb	r3, [r3, #12]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d156      	bne.n	80114c0 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8011412:	683b      	ldr	r3, [r7, #0]
 8011414:	699b      	ldr	r3, [r3, #24]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d122      	bne.n	8011460 <USB_EPStartXfer+0x9fe>
 801141a:	683b      	ldr	r3, [r7, #0]
 801141c:	78db      	ldrb	r3, [r3, #3]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d11e      	bne.n	8011460 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8011422:	687a      	ldr	r2, [r7, #4]
 8011424:	683b      	ldr	r3, [r7, #0]
 8011426:	781b      	ldrb	r3, [r3, #0]
 8011428:	009b      	lsls	r3, r3, #2
 801142a:	4413      	add	r3, r2
 801142c:	881b      	ldrh	r3, [r3, #0]
 801142e:	b29b      	uxth	r3, r3
 8011430:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011434:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011438:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 801143c:	687a      	ldr	r2, [r7, #4]
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	781b      	ldrb	r3, [r3, #0]
 8011442:	009b      	lsls	r3, r3, #2
 8011444:	441a      	add	r2, r3
 8011446:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 801144a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801144e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011452:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8011456:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801145a:	b29b      	uxth	r3, r3
 801145c:	8013      	strh	r3, [r2, #0]
 801145e:	e01d      	b.n	801149c <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8011460:	687a      	ldr	r2, [r7, #4]
 8011462:	683b      	ldr	r3, [r7, #0]
 8011464:	781b      	ldrb	r3, [r3, #0]
 8011466:	009b      	lsls	r3, r3, #2
 8011468:	4413      	add	r3, r2
 801146a:	881b      	ldrh	r3, [r3, #0]
 801146c:	b29b      	uxth	r3, r3
 801146e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8011472:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011476:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 801147a:	687a      	ldr	r2, [r7, #4]
 801147c:	683b      	ldr	r3, [r7, #0]
 801147e:	781b      	ldrb	r3, [r3, #0]
 8011480:	009b      	lsls	r3, r3, #2
 8011482:	441a      	add	r2, r3
 8011484:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8011488:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801148c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011490:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011494:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011498:	b29b      	uxth	r3, r3
 801149a:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801149c:	683b      	ldr	r3, [r7, #0]
 801149e:	699a      	ldr	r2, [r3, #24]
 80114a0:	683b      	ldr	r3, [r7, #0]
 80114a2:	691b      	ldr	r3, [r3, #16]
 80114a4:	429a      	cmp	r2, r3
 80114a6:	d907      	bls.n	80114b8 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 80114a8:	683b      	ldr	r3, [r7, #0]
 80114aa:	699a      	ldr	r2, [r3, #24]
 80114ac:	683b      	ldr	r3, [r7, #0]
 80114ae:	691b      	ldr	r3, [r3, #16]
 80114b0:	1ad2      	subs	r2, r2, r3
 80114b2:	683b      	ldr	r3, [r7, #0]
 80114b4:	619a      	str	r2, [r3, #24]
 80114b6:	e054      	b.n	8011562 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 80114b8:	683b      	ldr	r3, [r7, #0]
 80114ba:	2200      	movs	r2, #0
 80114bc:	619a      	str	r2, [r3, #24]
 80114be:	e050      	b.n	8011562 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80114c0:	683b      	ldr	r3, [r7, #0]
 80114c2:	78db      	ldrb	r3, [r3, #3]
 80114c4:	2b02      	cmp	r3, #2
 80114c6:	d142      	bne.n	801154e <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80114c8:	683b      	ldr	r3, [r7, #0]
 80114ca:	69db      	ldr	r3, [r3, #28]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d048      	beq.n	8011562 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80114d0:	687a      	ldr	r2, [r7, #4]
 80114d2:	683b      	ldr	r3, [r7, #0]
 80114d4:	781b      	ldrb	r3, [r3, #0]
 80114d6:	009b      	lsls	r3, r3, #2
 80114d8:	4413      	add	r3, r2
 80114da:	881b      	ldrh	r3, [r3, #0]
 80114dc:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80114e0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80114e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d005      	beq.n	80114f8 <USB_EPStartXfer+0xa96>
 80114ec:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80114f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d10b      	bne.n	8011510 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80114f8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80114fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8011500:	2b00      	cmp	r3, #0
 8011502:	d12e      	bne.n	8011562 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8011504:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8011508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801150c:	2b00      	cmp	r3, #0
 801150e:	d128      	bne.n	8011562 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8011510:	687a      	ldr	r2, [r7, #4]
 8011512:	683b      	ldr	r3, [r7, #0]
 8011514:	781b      	ldrb	r3, [r3, #0]
 8011516:	009b      	lsls	r3, r3, #2
 8011518:	4413      	add	r3, r2
 801151a:	881b      	ldrh	r3, [r3, #0]
 801151c:	b29b      	uxth	r3, r3
 801151e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011526:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 801152a:	687a      	ldr	r2, [r7, #4]
 801152c:	683b      	ldr	r3, [r7, #0]
 801152e:	781b      	ldrb	r3, [r3, #0]
 8011530:	009b      	lsls	r3, r3, #2
 8011532:	441a      	add	r2, r3
 8011534:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8011538:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801153c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011540:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011544:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011548:	b29b      	uxth	r3, r3
 801154a:	8013      	strh	r3, [r2, #0]
 801154c:	e009      	b.n	8011562 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801154e:	683b      	ldr	r3, [r7, #0]
 8011550:	78db      	ldrb	r3, [r3, #3]
 8011552:	2b01      	cmp	r3, #1
 8011554:	d103      	bne.n	801155e <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8011556:	683b      	ldr	r3, [r7, #0]
 8011558:	2200      	movs	r2, #0
 801155a:	619a      	str	r2, [r3, #24]
 801155c:	e001      	b.n	8011562 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 801155e:	2301      	movs	r3, #1
 8011560:	e02a      	b.n	80115b8 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011562:	687a      	ldr	r2, [r7, #4]
 8011564:	683b      	ldr	r3, [r7, #0]
 8011566:	781b      	ldrb	r3, [r3, #0]
 8011568:	009b      	lsls	r3, r3, #2
 801156a:	4413      	add	r3, r2
 801156c:	881b      	ldrh	r3, [r3, #0]
 801156e:	b29b      	uxth	r3, r3
 8011570:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011574:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011578:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 801157c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8011580:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8011584:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8011588:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801158c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8011590:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8011594:	687a      	ldr	r2, [r7, #4]
 8011596:	683b      	ldr	r3, [r7, #0]
 8011598:	781b      	ldrb	r3, [r3, #0]
 801159a:	009b      	lsls	r3, r3, #2
 801159c:	441a      	add	r2, r3
 801159e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80115a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80115a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80115aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80115ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80115b2:	b29b      	uxth	r3, r3
 80115b4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80115b6:	2300      	movs	r3, #0
}
 80115b8:	4618      	mov	r0, r3
 80115ba:	37b0      	adds	r7, #176	@ 0xb0
 80115bc:	46bd      	mov	sp, r7
 80115be:	bd80      	pop	{r7, pc}

080115c0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80115c0:	b480      	push	{r7}
 80115c2:	b085      	sub	sp, #20
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
 80115c8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80115ca:	683b      	ldr	r3, [r7, #0]
 80115cc:	785b      	ldrb	r3, [r3, #1]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d020      	beq.n	8011614 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80115d2:	687a      	ldr	r2, [r7, #4]
 80115d4:	683b      	ldr	r3, [r7, #0]
 80115d6:	781b      	ldrb	r3, [r3, #0]
 80115d8:	009b      	lsls	r3, r3, #2
 80115da:	4413      	add	r3, r2
 80115dc:	881b      	ldrh	r3, [r3, #0]
 80115de:	b29b      	uxth	r3, r3
 80115e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80115e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80115e8:	81bb      	strh	r3, [r7, #12]
 80115ea:	89bb      	ldrh	r3, [r7, #12]
 80115ec:	f083 0310 	eor.w	r3, r3, #16
 80115f0:	81bb      	strh	r3, [r7, #12]
 80115f2:	687a      	ldr	r2, [r7, #4]
 80115f4:	683b      	ldr	r3, [r7, #0]
 80115f6:	781b      	ldrb	r3, [r3, #0]
 80115f8:	009b      	lsls	r3, r3, #2
 80115fa:	441a      	add	r2, r3
 80115fc:	89bb      	ldrh	r3, [r7, #12]
 80115fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011602:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011606:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801160a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801160e:	b29b      	uxth	r3, r3
 8011610:	8013      	strh	r3, [r2, #0]
 8011612:	e01f      	b.n	8011654 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8011614:	687a      	ldr	r2, [r7, #4]
 8011616:	683b      	ldr	r3, [r7, #0]
 8011618:	781b      	ldrb	r3, [r3, #0]
 801161a:	009b      	lsls	r3, r3, #2
 801161c:	4413      	add	r3, r2
 801161e:	881b      	ldrh	r3, [r3, #0]
 8011620:	b29b      	uxth	r3, r3
 8011622:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801162a:	81fb      	strh	r3, [r7, #14]
 801162c:	89fb      	ldrh	r3, [r7, #14]
 801162e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8011632:	81fb      	strh	r3, [r7, #14]
 8011634:	687a      	ldr	r2, [r7, #4]
 8011636:	683b      	ldr	r3, [r7, #0]
 8011638:	781b      	ldrb	r3, [r3, #0]
 801163a:	009b      	lsls	r3, r3, #2
 801163c:	441a      	add	r2, r3
 801163e:	89fb      	ldrh	r3, [r7, #14]
 8011640:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011644:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011648:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801164c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011650:	b29b      	uxth	r3, r3
 8011652:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011654:	2300      	movs	r3, #0
}
 8011656:	4618      	mov	r0, r3
 8011658:	3714      	adds	r7, #20
 801165a:	46bd      	mov	sp, r7
 801165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011660:	4770      	bx	lr

08011662 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011662:	b480      	push	{r7}
 8011664:	b087      	sub	sp, #28
 8011666:	af00      	add	r7, sp, #0
 8011668:	6078      	str	r0, [r7, #4]
 801166a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801166c:	683b      	ldr	r3, [r7, #0]
 801166e:	785b      	ldrb	r3, [r3, #1]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d04c      	beq.n	801170e <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011674:	687a      	ldr	r2, [r7, #4]
 8011676:	683b      	ldr	r3, [r7, #0]
 8011678:	781b      	ldrb	r3, [r3, #0]
 801167a:	009b      	lsls	r3, r3, #2
 801167c:	4413      	add	r3, r2
 801167e:	881b      	ldrh	r3, [r3, #0]
 8011680:	823b      	strh	r3, [r7, #16]
 8011682:	8a3b      	ldrh	r3, [r7, #16]
 8011684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011688:	2b00      	cmp	r3, #0
 801168a:	d01b      	beq.n	80116c4 <USB_EPClearStall+0x62>
 801168c:	687a      	ldr	r2, [r7, #4]
 801168e:	683b      	ldr	r3, [r7, #0]
 8011690:	781b      	ldrb	r3, [r3, #0]
 8011692:	009b      	lsls	r3, r3, #2
 8011694:	4413      	add	r3, r2
 8011696:	881b      	ldrh	r3, [r3, #0]
 8011698:	b29b      	uxth	r3, r3
 801169a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801169e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80116a2:	81fb      	strh	r3, [r7, #14]
 80116a4:	687a      	ldr	r2, [r7, #4]
 80116a6:	683b      	ldr	r3, [r7, #0]
 80116a8:	781b      	ldrb	r3, [r3, #0]
 80116aa:	009b      	lsls	r3, r3, #2
 80116ac:	441a      	add	r2, r3
 80116ae:	89fb      	ldrh	r3, [r7, #14]
 80116b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80116b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80116b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80116bc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80116c0:	b29b      	uxth	r3, r3
 80116c2:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80116c4:	683b      	ldr	r3, [r7, #0]
 80116c6:	78db      	ldrb	r3, [r3, #3]
 80116c8:	2b01      	cmp	r3, #1
 80116ca:	d06c      	beq.n	80117a6 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80116cc:	687a      	ldr	r2, [r7, #4]
 80116ce:	683b      	ldr	r3, [r7, #0]
 80116d0:	781b      	ldrb	r3, [r3, #0]
 80116d2:	009b      	lsls	r3, r3, #2
 80116d4:	4413      	add	r3, r2
 80116d6:	881b      	ldrh	r3, [r3, #0]
 80116d8:	b29b      	uxth	r3, r3
 80116da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80116de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80116e2:	81bb      	strh	r3, [r7, #12]
 80116e4:	89bb      	ldrh	r3, [r7, #12]
 80116e6:	f083 0320 	eor.w	r3, r3, #32
 80116ea:	81bb      	strh	r3, [r7, #12]
 80116ec:	687a      	ldr	r2, [r7, #4]
 80116ee:	683b      	ldr	r3, [r7, #0]
 80116f0:	781b      	ldrb	r3, [r3, #0]
 80116f2:	009b      	lsls	r3, r3, #2
 80116f4:	441a      	add	r2, r3
 80116f6:	89bb      	ldrh	r3, [r7, #12]
 80116f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80116fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011700:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011704:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011708:	b29b      	uxth	r3, r3
 801170a:	8013      	strh	r3, [r2, #0]
 801170c:	e04b      	b.n	80117a6 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801170e:	687a      	ldr	r2, [r7, #4]
 8011710:	683b      	ldr	r3, [r7, #0]
 8011712:	781b      	ldrb	r3, [r3, #0]
 8011714:	009b      	lsls	r3, r3, #2
 8011716:	4413      	add	r3, r2
 8011718:	881b      	ldrh	r3, [r3, #0]
 801171a:	82fb      	strh	r3, [r7, #22]
 801171c:	8afb      	ldrh	r3, [r7, #22]
 801171e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011722:	2b00      	cmp	r3, #0
 8011724:	d01b      	beq.n	801175e <USB_EPClearStall+0xfc>
 8011726:	687a      	ldr	r2, [r7, #4]
 8011728:	683b      	ldr	r3, [r7, #0]
 801172a:	781b      	ldrb	r3, [r3, #0]
 801172c:	009b      	lsls	r3, r3, #2
 801172e:	4413      	add	r3, r2
 8011730:	881b      	ldrh	r3, [r3, #0]
 8011732:	b29b      	uxth	r3, r3
 8011734:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011738:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801173c:	82bb      	strh	r3, [r7, #20]
 801173e:	687a      	ldr	r2, [r7, #4]
 8011740:	683b      	ldr	r3, [r7, #0]
 8011742:	781b      	ldrb	r3, [r3, #0]
 8011744:	009b      	lsls	r3, r3, #2
 8011746:	441a      	add	r2, r3
 8011748:	8abb      	ldrh	r3, [r7, #20]
 801174a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801174e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011752:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011756:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801175a:	b29b      	uxth	r3, r3
 801175c:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801175e:	687a      	ldr	r2, [r7, #4]
 8011760:	683b      	ldr	r3, [r7, #0]
 8011762:	781b      	ldrb	r3, [r3, #0]
 8011764:	009b      	lsls	r3, r3, #2
 8011766:	4413      	add	r3, r2
 8011768:	881b      	ldrh	r3, [r3, #0]
 801176a:	b29b      	uxth	r3, r3
 801176c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011770:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011774:	827b      	strh	r3, [r7, #18]
 8011776:	8a7b      	ldrh	r3, [r7, #18]
 8011778:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 801177c:	827b      	strh	r3, [r7, #18]
 801177e:	8a7b      	ldrh	r3, [r7, #18]
 8011780:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8011784:	827b      	strh	r3, [r7, #18]
 8011786:	687a      	ldr	r2, [r7, #4]
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	781b      	ldrb	r3, [r3, #0]
 801178c:	009b      	lsls	r3, r3, #2
 801178e:	441a      	add	r2, r3
 8011790:	8a7b      	ldrh	r3, [r7, #18]
 8011792:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011796:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801179a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801179e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80117a2:	b29b      	uxth	r3, r3
 80117a4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80117a6:	2300      	movs	r3, #0
}
 80117a8:	4618      	mov	r0, r3
 80117aa:	371c      	adds	r7, #28
 80117ac:	46bd      	mov	sp, r7
 80117ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b2:	4770      	bx	lr

080117b4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80117b4:	b480      	push	{r7}
 80117b6:	b083      	sub	sp, #12
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]
 80117bc:	460b      	mov	r3, r1
 80117be:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80117c0:	78fb      	ldrb	r3, [r7, #3]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d103      	bne.n	80117ce <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	2280      	movs	r2, #128	@ 0x80
 80117ca:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80117ce:	2300      	movs	r3, #0
}
 80117d0:	4618      	mov	r0, r3
 80117d2:	370c      	adds	r7, #12
 80117d4:	46bd      	mov	sp, r7
 80117d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117da:	4770      	bx	lr

080117dc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80117dc:	b480      	push	{r7}
 80117de:	b083      	sub	sp, #12
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80117ea:	b29b      	uxth	r3, r3
 80117ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80117f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80117f4:	b29a      	uxth	r2, r3
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80117fc:	2300      	movs	r3, #0
}
 80117fe:	4618      	mov	r0, r3
 8011800:	370c      	adds	r7, #12
 8011802:	46bd      	mov	sp, r7
 8011804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011808:	4770      	bx	lr

0801180a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 801180a:	b480      	push	{r7}
 801180c:	b085      	sub	sp, #20
 801180e:	af00      	add	r7, sp, #0
 8011810:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8011818:	b29b      	uxth	r3, r3
 801181a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801181c:	68fb      	ldr	r3, [r7, #12]
}
 801181e:	4618      	mov	r0, r3
 8011820:	3714      	adds	r7, #20
 8011822:	46bd      	mov	sp, r7
 8011824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011828:	4770      	bx	lr

0801182a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801182a:	b480      	push	{r7}
 801182c:	b08b      	sub	sp, #44	@ 0x2c
 801182e:	af00      	add	r7, sp, #0
 8011830:	60f8      	str	r0, [r7, #12]
 8011832:	60b9      	str	r1, [r7, #8]
 8011834:	4611      	mov	r1, r2
 8011836:	461a      	mov	r2, r3
 8011838:	460b      	mov	r3, r1
 801183a:	80fb      	strh	r3, [r7, #6]
 801183c:	4613      	mov	r3, r2
 801183e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8011840:	88bb      	ldrh	r3, [r7, #4]
 8011842:	3301      	adds	r3, #1
 8011844:	085b      	lsrs	r3, r3, #1
 8011846:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801184c:	68bb      	ldr	r3, [r7, #8]
 801184e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011850:	88fa      	ldrh	r2, [r7, #6]
 8011852:	697b      	ldr	r3, [r7, #20]
 8011854:	4413      	add	r3, r2
 8011856:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801185a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801185c:	69bb      	ldr	r3, [r7, #24]
 801185e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011860:	e01b      	b.n	801189a <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8011862:	69fb      	ldr	r3, [r7, #28]
 8011864:	781b      	ldrb	r3, [r3, #0]
 8011866:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8011868:	69fb      	ldr	r3, [r7, #28]
 801186a:	3301      	adds	r3, #1
 801186c:	781b      	ldrb	r3, [r3, #0]
 801186e:	021b      	lsls	r3, r3, #8
 8011870:	b21a      	sxth	r2, r3
 8011872:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011876:	4313      	orrs	r3, r2
 8011878:	b21b      	sxth	r3, r3
 801187a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 801187c:	6a3b      	ldr	r3, [r7, #32]
 801187e:	8a7a      	ldrh	r2, [r7, #18]
 8011880:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8011882:	6a3b      	ldr	r3, [r7, #32]
 8011884:	3302      	adds	r3, #2
 8011886:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8011888:	69fb      	ldr	r3, [r7, #28]
 801188a:	3301      	adds	r3, #1
 801188c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801188e:	69fb      	ldr	r3, [r7, #28]
 8011890:	3301      	adds	r3, #1
 8011892:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8011894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011896:	3b01      	subs	r3, #1
 8011898:	627b      	str	r3, [r7, #36]	@ 0x24
 801189a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801189c:	2b00      	cmp	r3, #0
 801189e:	d1e0      	bne.n	8011862 <USB_WritePMA+0x38>
  }
}
 80118a0:	bf00      	nop
 80118a2:	bf00      	nop
 80118a4:	372c      	adds	r7, #44	@ 0x2c
 80118a6:	46bd      	mov	sp, r7
 80118a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ac:	4770      	bx	lr

080118ae <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80118ae:	b480      	push	{r7}
 80118b0:	b08b      	sub	sp, #44	@ 0x2c
 80118b2:	af00      	add	r7, sp, #0
 80118b4:	60f8      	str	r0, [r7, #12]
 80118b6:	60b9      	str	r1, [r7, #8]
 80118b8:	4611      	mov	r1, r2
 80118ba:	461a      	mov	r2, r3
 80118bc:	460b      	mov	r3, r1
 80118be:	80fb      	strh	r3, [r7, #6]
 80118c0:	4613      	mov	r3, r2
 80118c2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80118c4:	88bb      	ldrh	r3, [r7, #4]
 80118c6:	085b      	lsrs	r3, r3, #1
 80118c8:	b29b      	uxth	r3, r3
 80118ca:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80118d0:	68bb      	ldr	r3, [r7, #8]
 80118d2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80118d4:	88fa      	ldrh	r2, [r7, #6]
 80118d6:	697b      	ldr	r3, [r7, #20]
 80118d8:	4413      	add	r3, r2
 80118da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80118de:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80118e0:	69bb      	ldr	r3, [r7, #24]
 80118e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80118e4:	e018      	b.n	8011918 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80118e6:	6a3b      	ldr	r3, [r7, #32]
 80118e8:	881b      	ldrh	r3, [r3, #0]
 80118ea:	b29b      	uxth	r3, r3
 80118ec:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80118ee:	6a3b      	ldr	r3, [r7, #32]
 80118f0:	3302      	adds	r3, #2
 80118f2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80118f4:	693b      	ldr	r3, [r7, #16]
 80118f6:	b2da      	uxtb	r2, r3
 80118f8:	69fb      	ldr	r3, [r7, #28]
 80118fa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80118fc:	69fb      	ldr	r3, [r7, #28]
 80118fe:	3301      	adds	r3, #1
 8011900:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8011902:	693b      	ldr	r3, [r7, #16]
 8011904:	0a1b      	lsrs	r3, r3, #8
 8011906:	b2da      	uxtb	r2, r3
 8011908:	69fb      	ldr	r3, [r7, #28]
 801190a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801190c:	69fb      	ldr	r3, [r7, #28]
 801190e:	3301      	adds	r3, #1
 8011910:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8011912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011914:	3b01      	subs	r3, #1
 8011916:	627b      	str	r3, [r7, #36]	@ 0x24
 8011918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801191a:	2b00      	cmp	r3, #0
 801191c:	d1e3      	bne.n	80118e6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801191e:	88bb      	ldrh	r3, [r7, #4]
 8011920:	f003 0301 	and.w	r3, r3, #1
 8011924:	b29b      	uxth	r3, r3
 8011926:	2b00      	cmp	r3, #0
 8011928:	d007      	beq.n	801193a <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 801192a:	6a3b      	ldr	r3, [r7, #32]
 801192c:	881b      	ldrh	r3, [r3, #0]
 801192e:	b29b      	uxth	r3, r3
 8011930:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8011932:	693b      	ldr	r3, [r7, #16]
 8011934:	b2da      	uxtb	r2, r3
 8011936:	69fb      	ldr	r3, [r7, #28]
 8011938:	701a      	strb	r2, [r3, #0]
  }
}
 801193a:	bf00      	nop
 801193c:	372c      	adds	r7, #44	@ 0x2c
 801193e:	46bd      	mov	sp, r7
 8011940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011944:	4770      	bx	lr

08011946 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011946:	b580      	push	{r7, lr}
 8011948:	b084      	sub	sp, #16
 801194a:	af00      	add	r7, sp, #0
 801194c:	6078      	str	r0, [r7, #4]
 801194e:	460b      	mov	r3, r1
 8011950:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8011952:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8011956:	f002 f8a3 	bl	8013aa0 <USBD_static_malloc>
 801195a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d105      	bne.n	801196e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	2200      	movs	r2, #0
 8011966:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 801196a:	2302      	movs	r3, #2
 801196c:	e066      	b.n	8011a3c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	68fa      	ldr	r2, [r7, #12]
 8011972:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	7c1b      	ldrb	r3, [r3, #16]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d119      	bne.n	80119b2 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801197e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011982:	2202      	movs	r2, #2
 8011984:	2181      	movs	r1, #129	@ 0x81
 8011986:	6878      	ldr	r0, [r7, #4]
 8011988:	f001 ff31 	bl	80137ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	2201      	movs	r2, #1
 8011990:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011992:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011996:	2202      	movs	r2, #2
 8011998:	2101      	movs	r1, #1
 801199a:	6878      	ldr	r0, [r7, #4]
 801199c:	f001 ff27 	bl	80137ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	2201      	movs	r2, #1
 80119a4:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	2210      	movs	r2, #16
 80119ac:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 80119b0:	e016      	b.n	80119e0 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80119b2:	2340      	movs	r3, #64	@ 0x40
 80119b4:	2202      	movs	r2, #2
 80119b6:	2181      	movs	r1, #129	@ 0x81
 80119b8:	6878      	ldr	r0, [r7, #4]
 80119ba:	f001 ff18 	bl	80137ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	2201      	movs	r2, #1
 80119c2:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80119c4:	2340      	movs	r3, #64	@ 0x40
 80119c6:	2202      	movs	r2, #2
 80119c8:	2101      	movs	r1, #1
 80119ca:	6878      	ldr	r0, [r7, #4]
 80119cc:	f001 ff0f 	bl	80137ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	2201      	movs	r2, #1
 80119d4:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	2210      	movs	r2, #16
 80119dc:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80119e0:	2308      	movs	r3, #8
 80119e2:	2203      	movs	r2, #3
 80119e4:	2182      	movs	r1, #130	@ 0x82
 80119e6:	6878      	ldr	r0, [r7, #4]
 80119e8:	f001 ff01 	bl	80137ee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	2201      	movs	r2, #1
 80119f0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	2200      	movs	r2, #0
 8011a02:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	2200      	movs	r2, #0
 8011a0a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	7c1b      	ldrb	r3, [r3, #16]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d109      	bne.n	8011a2a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011a1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011a20:	2101      	movs	r1, #1
 8011a22:	6878      	ldr	r0, [r7, #4]
 8011a24:	f001 ffd2 	bl	80139cc <USBD_LL_PrepareReceive>
 8011a28:	e007      	b.n	8011a3a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011a30:	2340      	movs	r3, #64	@ 0x40
 8011a32:	2101      	movs	r1, #1
 8011a34:	6878      	ldr	r0, [r7, #4]
 8011a36:	f001 ffc9 	bl	80139cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011a3a:	2300      	movs	r3, #0
}
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	3710      	adds	r7, #16
 8011a40:	46bd      	mov	sp, r7
 8011a42:	bd80      	pop	{r7, pc}

08011a44 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011a44:	b580      	push	{r7, lr}
 8011a46:	b082      	sub	sp, #8
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]
 8011a4c:	460b      	mov	r3, r1
 8011a4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8011a50:	2181      	movs	r1, #129	@ 0x81
 8011a52:	6878      	ldr	r0, [r7, #4]
 8011a54:	f001 fef1 	bl	801383a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8011a5e:	2101      	movs	r1, #1
 8011a60:	6878      	ldr	r0, [r7, #4]
 8011a62:	f001 feea 	bl	801383a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	2200      	movs	r2, #0
 8011a6a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8011a6e:	2182      	movs	r1, #130	@ 0x82
 8011a70:	6878      	ldr	r0, [r7, #4]
 8011a72:	f001 fee2 	bl	801383a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	2200      	movs	r2, #0
 8011a7a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	2200      	movs	r2, #0
 8011a82:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d00e      	beq.n	8011aae <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8011a96:	685b      	ldr	r3, [r3, #4]
 8011a98:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	f002 f80b 	bl	8013abc <USBD_static_free>
    pdev->pClassData = NULL;
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	2200      	movs	r2, #0
 8011aaa:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8011aae:	2300      	movs	r3, #0
}
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	3708      	adds	r7, #8
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	bd80      	pop	{r7, pc}

08011ab8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b086      	sub	sp, #24
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	6078      	str	r0, [r7, #4]
 8011ac0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011ac8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8011aca:	2300      	movs	r3, #0
 8011acc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8011ad6:	693b      	ldr	r3, [r7, #16]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d101      	bne.n	8011ae0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8011adc:	2303      	movs	r3, #3
 8011ade:	e0af      	b.n	8011c40 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011ae0:	683b      	ldr	r3, [r7, #0]
 8011ae2:	781b      	ldrb	r3, [r3, #0]
 8011ae4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d03f      	beq.n	8011b6c <USBD_CDC_Setup+0xb4>
 8011aec:	2b20      	cmp	r3, #32
 8011aee:	f040 809f 	bne.w	8011c30 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8011af2:	683b      	ldr	r3, [r7, #0]
 8011af4:	88db      	ldrh	r3, [r3, #6]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d02e      	beq.n	8011b58 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8011afa:	683b      	ldr	r3, [r7, #0]
 8011afc:	781b      	ldrb	r3, [r3, #0]
 8011afe:	b25b      	sxtb	r3, r3
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	da16      	bge.n	8011b32 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8011b0a:	689b      	ldr	r3, [r3, #8]
 8011b0c:	683a      	ldr	r2, [r7, #0]
 8011b0e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8011b10:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011b12:	683a      	ldr	r2, [r7, #0]
 8011b14:	88d2      	ldrh	r2, [r2, #6]
 8011b16:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8011b18:	683b      	ldr	r3, [r7, #0]
 8011b1a:	88db      	ldrh	r3, [r3, #6]
 8011b1c:	2b07      	cmp	r3, #7
 8011b1e:	bf28      	it	cs
 8011b20:	2307      	movcs	r3, #7
 8011b22:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8011b24:	693b      	ldr	r3, [r7, #16]
 8011b26:	89fa      	ldrh	r2, [r7, #14]
 8011b28:	4619      	mov	r1, r3
 8011b2a:	6878      	ldr	r0, [r7, #4]
 8011b2c:	f001 fa9d 	bl	801306a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8011b30:	e085      	b.n	8011c3e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8011b32:	683b      	ldr	r3, [r7, #0]
 8011b34:	785a      	ldrb	r2, [r3, #1]
 8011b36:	693b      	ldr	r3, [r7, #16]
 8011b38:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8011b3c:	683b      	ldr	r3, [r7, #0]
 8011b3e:	88db      	ldrh	r3, [r3, #6]
 8011b40:	b2da      	uxtb	r2, r3
 8011b42:	693b      	ldr	r3, [r7, #16]
 8011b44:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8011b48:	6939      	ldr	r1, [r7, #16]
 8011b4a:	683b      	ldr	r3, [r7, #0]
 8011b4c:	88db      	ldrh	r3, [r3, #6]
 8011b4e:	461a      	mov	r2, r3
 8011b50:	6878      	ldr	r0, [r7, #4]
 8011b52:	f001 fab6 	bl	80130c2 <USBD_CtlPrepareRx>
      break;
 8011b56:	e072      	b.n	8011c3e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8011b5e:	689b      	ldr	r3, [r3, #8]
 8011b60:	683a      	ldr	r2, [r7, #0]
 8011b62:	7850      	ldrb	r0, [r2, #1]
 8011b64:	2200      	movs	r2, #0
 8011b66:	6839      	ldr	r1, [r7, #0]
 8011b68:	4798      	blx	r3
      break;
 8011b6a:	e068      	b.n	8011c3e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011b6c:	683b      	ldr	r3, [r7, #0]
 8011b6e:	785b      	ldrb	r3, [r3, #1]
 8011b70:	2b0b      	cmp	r3, #11
 8011b72:	d852      	bhi.n	8011c1a <USBD_CDC_Setup+0x162>
 8011b74:	a201      	add	r2, pc, #4	@ (adr r2, 8011b7c <USBD_CDC_Setup+0xc4>)
 8011b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b7a:	bf00      	nop
 8011b7c:	08011bad 	.word	0x08011bad
 8011b80:	08011c29 	.word	0x08011c29
 8011b84:	08011c1b 	.word	0x08011c1b
 8011b88:	08011c1b 	.word	0x08011c1b
 8011b8c:	08011c1b 	.word	0x08011c1b
 8011b90:	08011c1b 	.word	0x08011c1b
 8011b94:	08011c1b 	.word	0x08011c1b
 8011b98:	08011c1b 	.word	0x08011c1b
 8011b9c:	08011c1b 	.word	0x08011c1b
 8011ba0:	08011c1b 	.word	0x08011c1b
 8011ba4:	08011bd7 	.word	0x08011bd7
 8011ba8:	08011c01 	.word	0x08011c01
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011bb2:	b2db      	uxtb	r3, r3
 8011bb4:	2b03      	cmp	r3, #3
 8011bb6:	d107      	bne.n	8011bc8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011bb8:	f107 030a 	add.w	r3, r7, #10
 8011bbc:	2202      	movs	r2, #2
 8011bbe:	4619      	mov	r1, r3
 8011bc0:	6878      	ldr	r0, [r7, #4]
 8011bc2:	f001 fa52 	bl	801306a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011bc6:	e032      	b.n	8011c2e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8011bc8:	6839      	ldr	r1, [r7, #0]
 8011bca:	6878      	ldr	r0, [r7, #4]
 8011bcc:	f001 f9dc 	bl	8012f88 <USBD_CtlError>
            ret = USBD_FAIL;
 8011bd0:	2303      	movs	r3, #3
 8011bd2:	75fb      	strb	r3, [r7, #23]
          break;
 8011bd4:	e02b      	b.n	8011c2e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011bdc:	b2db      	uxtb	r3, r3
 8011bde:	2b03      	cmp	r3, #3
 8011be0:	d107      	bne.n	8011bf2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011be2:	f107 030d 	add.w	r3, r7, #13
 8011be6:	2201      	movs	r2, #1
 8011be8:	4619      	mov	r1, r3
 8011bea:	6878      	ldr	r0, [r7, #4]
 8011bec:	f001 fa3d 	bl	801306a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011bf0:	e01d      	b.n	8011c2e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8011bf2:	6839      	ldr	r1, [r7, #0]
 8011bf4:	6878      	ldr	r0, [r7, #4]
 8011bf6:	f001 f9c7 	bl	8012f88 <USBD_CtlError>
            ret = USBD_FAIL;
 8011bfa:	2303      	movs	r3, #3
 8011bfc:	75fb      	strb	r3, [r7, #23]
          break;
 8011bfe:	e016      	b.n	8011c2e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011c06:	b2db      	uxtb	r3, r3
 8011c08:	2b03      	cmp	r3, #3
 8011c0a:	d00f      	beq.n	8011c2c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8011c0c:	6839      	ldr	r1, [r7, #0]
 8011c0e:	6878      	ldr	r0, [r7, #4]
 8011c10:	f001 f9ba 	bl	8012f88 <USBD_CtlError>
            ret = USBD_FAIL;
 8011c14:	2303      	movs	r3, #3
 8011c16:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8011c18:	e008      	b.n	8011c2c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8011c1a:	6839      	ldr	r1, [r7, #0]
 8011c1c:	6878      	ldr	r0, [r7, #4]
 8011c1e:	f001 f9b3 	bl	8012f88 <USBD_CtlError>
          ret = USBD_FAIL;
 8011c22:	2303      	movs	r3, #3
 8011c24:	75fb      	strb	r3, [r7, #23]
          break;
 8011c26:	e002      	b.n	8011c2e <USBD_CDC_Setup+0x176>
          break;
 8011c28:	bf00      	nop
 8011c2a:	e008      	b.n	8011c3e <USBD_CDC_Setup+0x186>
          break;
 8011c2c:	bf00      	nop
      }
      break;
 8011c2e:	e006      	b.n	8011c3e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8011c30:	6839      	ldr	r1, [r7, #0]
 8011c32:	6878      	ldr	r0, [r7, #4]
 8011c34:	f001 f9a8 	bl	8012f88 <USBD_CtlError>
      ret = USBD_FAIL;
 8011c38:	2303      	movs	r3, #3
 8011c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8011c3c:	bf00      	nop
  }

  return (uint8_t)ret;
 8011c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c40:	4618      	mov	r0, r3
 8011c42:	3718      	adds	r7, #24
 8011c44:	46bd      	mov	sp, r7
 8011c46:	bd80      	pop	{r7, pc}

08011c48 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011c48:	b580      	push	{r7, lr}
 8011c4a:	b084      	sub	sp, #16
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	6078      	str	r0, [r7, #4]
 8011c50:	460b      	mov	r3, r1
 8011c52:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8011c5a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d101      	bne.n	8011c6a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011c66:	2303      	movs	r3, #3
 8011c68:	e04f      	b.n	8011d0a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011c70:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011c72:	78fa      	ldrb	r2, [r7, #3]
 8011c74:	6879      	ldr	r1, [r7, #4]
 8011c76:	4613      	mov	r3, r2
 8011c78:	009b      	lsls	r3, r3, #2
 8011c7a:	4413      	add	r3, r2
 8011c7c:	009b      	lsls	r3, r3, #2
 8011c7e:	440b      	add	r3, r1
 8011c80:	3318      	adds	r3, #24
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d029      	beq.n	8011cdc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8011c88:	78fa      	ldrb	r2, [r7, #3]
 8011c8a:	6879      	ldr	r1, [r7, #4]
 8011c8c:	4613      	mov	r3, r2
 8011c8e:	009b      	lsls	r3, r3, #2
 8011c90:	4413      	add	r3, r2
 8011c92:	009b      	lsls	r3, r3, #2
 8011c94:	440b      	add	r3, r1
 8011c96:	3318      	adds	r3, #24
 8011c98:	681a      	ldr	r2, [r3, #0]
 8011c9a:	78f9      	ldrb	r1, [r7, #3]
 8011c9c:	68f8      	ldr	r0, [r7, #12]
 8011c9e:	460b      	mov	r3, r1
 8011ca0:	009b      	lsls	r3, r3, #2
 8011ca2:	440b      	add	r3, r1
 8011ca4:	00db      	lsls	r3, r3, #3
 8011ca6:	4403      	add	r3, r0
 8011ca8:	3320      	adds	r3, #32
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	fbb2 f1f3 	udiv	r1, r2, r3
 8011cb0:	fb01 f303 	mul.w	r3, r1, r3
 8011cb4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d110      	bne.n	8011cdc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8011cba:	78fa      	ldrb	r2, [r7, #3]
 8011cbc:	6879      	ldr	r1, [r7, #4]
 8011cbe:	4613      	mov	r3, r2
 8011cc0:	009b      	lsls	r3, r3, #2
 8011cc2:	4413      	add	r3, r2
 8011cc4:	009b      	lsls	r3, r3, #2
 8011cc6:	440b      	add	r3, r1
 8011cc8:	3318      	adds	r3, #24
 8011cca:	2200      	movs	r2, #0
 8011ccc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011cce:	78f9      	ldrb	r1, [r7, #3]
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	2200      	movs	r2, #0
 8011cd4:	6878      	ldr	r0, [r7, #4]
 8011cd6:	f001 fe58 	bl	801398a <USBD_LL_Transmit>
 8011cda:	e015      	b.n	8011d08 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8011cdc:	68bb      	ldr	r3, [r7, #8]
 8011cde:	2200      	movs	r2, #0
 8011ce0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8011cea:	691b      	ldr	r3, [r3, #16]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d00b      	beq.n	8011d08 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8011cf6:	691b      	ldr	r3, [r3, #16]
 8011cf8:	68ba      	ldr	r2, [r7, #8]
 8011cfa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8011cfe:	68ba      	ldr	r2, [r7, #8]
 8011d00:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8011d04:	78fa      	ldrb	r2, [r7, #3]
 8011d06:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8011d08:	2300      	movs	r3, #0
}
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	3710      	adds	r7, #16
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	bd80      	pop	{r7, pc}

08011d12 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011d12:	b580      	push	{r7, lr}
 8011d14:	b084      	sub	sp, #16
 8011d16:	af00      	add	r7, sp, #0
 8011d18:	6078      	str	r0, [r7, #4]
 8011d1a:	460b      	mov	r3, r1
 8011d1c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011d24:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d101      	bne.n	8011d34 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011d30:	2303      	movs	r3, #3
 8011d32:	e015      	b.n	8011d60 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011d34:	78fb      	ldrb	r3, [r7, #3]
 8011d36:	4619      	mov	r1, r3
 8011d38:	6878      	ldr	r0, [r7, #4]
 8011d3a:	f001 fe68 	bl	8013a0e <USBD_LL_GetRxDataSize>
 8011d3e:	4602      	mov	r2, r0
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8011d4c:	68db      	ldr	r3, [r3, #12]
 8011d4e:	68fa      	ldr	r2, [r7, #12]
 8011d50:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8011d54:	68fa      	ldr	r2, [r7, #12]
 8011d56:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8011d5a:	4611      	mov	r1, r2
 8011d5c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011d5e:	2300      	movs	r3, #0
}
 8011d60:	4618      	mov	r0, r3
 8011d62:	3710      	adds	r7, #16
 8011d64:	46bd      	mov	sp, r7
 8011d66:	bd80      	pop	{r7, pc}

08011d68 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b084      	sub	sp, #16
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011d76:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d101      	bne.n	8011d82 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8011d7e:	2303      	movs	r3, #3
 8011d80:	e01a      	b.n	8011db8 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d014      	beq.n	8011db6 <USBD_CDC_EP0_RxReady+0x4e>
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8011d92:	2bff      	cmp	r3, #255	@ 0xff
 8011d94:	d00f      	beq.n	8011db6 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8011d9c:	689b      	ldr	r3, [r3, #8]
 8011d9e:	68fa      	ldr	r2, [r7, #12]
 8011da0:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8011da4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8011da6:	68fa      	ldr	r2, [r7, #12]
 8011da8:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011dac:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	22ff      	movs	r2, #255	@ 0xff
 8011db2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8011db6:	2300      	movs	r3, #0
}
 8011db8:	4618      	mov	r0, r3
 8011dba:	3710      	adds	r7, #16
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	bd80      	pop	{r7, pc}

08011dc0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011dc0:	b480      	push	{r7}
 8011dc2:	b083      	sub	sp, #12
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	2243      	movs	r2, #67	@ 0x43
 8011dcc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8011dce:	4b03      	ldr	r3, [pc, #12]	@ (8011ddc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	370c      	adds	r7, #12
 8011dd4:	46bd      	mov	sp, r7
 8011dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dda:	4770      	bx	lr
 8011ddc:	200000d8 	.word	0x200000d8

08011de0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011de0:	b480      	push	{r7}
 8011de2:	b083      	sub	sp, #12
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	2243      	movs	r2, #67	@ 0x43
 8011dec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8011dee:	4b03      	ldr	r3, [pc, #12]	@ (8011dfc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8011df0:	4618      	mov	r0, r3
 8011df2:	370c      	adds	r7, #12
 8011df4:	46bd      	mov	sp, r7
 8011df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dfa:	4770      	bx	lr
 8011dfc:	20000094 	.word	0x20000094

08011e00 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011e00:	b480      	push	{r7}
 8011e02:	b083      	sub	sp, #12
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	2243      	movs	r2, #67	@ 0x43
 8011e0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8011e0e:	4b03      	ldr	r3, [pc, #12]	@ (8011e1c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8011e10:	4618      	mov	r0, r3
 8011e12:	370c      	adds	r7, #12
 8011e14:	46bd      	mov	sp, r7
 8011e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e1a:	4770      	bx	lr
 8011e1c:	2000011c 	.word	0x2000011c

08011e20 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011e20:	b480      	push	{r7}
 8011e22:	b083      	sub	sp, #12
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	220a      	movs	r2, #10
 8011e2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8011e2e:	4b03      	ldr	r3, [pc, #12]	@ (8011e3c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011e30:	4618      	mov	r0, r3
 8011e32:	370c      	adds	r7, #12
 8011e34:	46bd      	mov	sp, r7
 8011e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3a:	4770      	bx	lr
 8011e3c:	20000050 	.word	0x20000050

08011e40 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011e40:	b480      	push	{r7}
 8011e42:	b083      	sub	sp, #12
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6078      	str	r0, [r7, #4]
 8011e48:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011e4a:	683b      	ldr	r3, [r7, #0]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d101      	bne.n	8011e54 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011e50:	2303      	movs	r3, #3
 8011e52:	e004      	b.n	8011e5e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	683a      	ldr	r2, [r7, #0]
 8011e58:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8011e5c:	2300      	movs	r3, #0
}
 8011e5e:	4618      	mov	r0, r3
 8011e60:	370c      	adds	r7, #12
 8011e62:	46bd      	mov	sp, r7
 8011e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e68:	4770      	bx	lr

08011e6a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011e6a:	b480      	push	{r7}
 8011e6c:	b087      	sub	sp, #28
 8011e6e:	af00      	add	r7, sp, #0
 8011e70:	60f8      	str	r0, [r7, #12]
 8011e72:	60b9      	str	r1, [r7, #8]
 8011e74:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011e7c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8011e7e:	697b      	ldr	r3, [r7, #20]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d101      	bne.n	8011e88 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011e84:	2303      	movs	r3, #3
 8011e86:	e008      	b.n	8011e9a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8011e88:	697b      	ldr	r3, [r7, #20]
 8011e8a:	68ba      	ldr	r2, [r7, #8]
 8011e8c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8011e90:	697b      	ldr	r3, [r7, #20]
 8011e92:	687a      	ldr	r2, [r7, #4]
 8011e94:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8011e98:	2300      	movs	r3, #0
}
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	371c      	adds	r7, #28
 8011e9e:	46bd      	mov	sp, r7
 8011ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea4:	4770      	bx	lr

08011ea6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011ea6:	b480      	push	{r7}
 8011ea8:	b085      	sub	sp, #20
 8011eaa:	af00      	add	r7, sp, #0
 8011eac:	6078      	str	r0, [r7, #4]
 8011eae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011eb6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d101      	bne.n	8011ec2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8011ebe:	2303      	movs	r3, #3
 8011ec0:	e004      	b.n	8011ecc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	683a      	ldr	r2, [r7, #0]
 8011ec6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8011eca:	2300      	movs	r3, #0
}
 8011ecc:	4618      	mov	r0, r3
 8011ece:	3714      	adds	r7, #20
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed6:	4770      	bx	lr

08011ed8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b084      	sub	sp, #16
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011ee6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d101      	bne.n	8011ef6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011ef2:	2303      	movs	r3, #3
 8011ef4:	e016      	b.n	8011f24 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	7c1b      	ldrb	r3, [r3, #16]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d109      	bne.n	8011f12 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011f04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011f08:	2101      	movs	r1, #1
 8011f0a:	6878      	ldr	r0, [r7, #4]
 8011f0c:	f001 fd5e 	bl	80139cc <USBD_LL_PrepareReceive>
 8011f10:	e007      	b.n	8011f22 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011f18:	2340      	movs	r3, #64	@ 0x40
 8011f1a:	2101      	movs	r1, #1
 8011f1c:	6878      	ldr	r0, [r7, #4]
 8011f1e:	f001 fd55 	bl	80139cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011f22:	2300      	movs	r3, #0
}
 8011f24:	4618      	mov	r0, r3
 8011f26:	3710      	adds	r7, #16
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	bd80      	pop	{r7, pc}

08011f2c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011f2c:	b580      	push	{r7, lr}
 8011f2e:	b086      	sub	sp, #24
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	60f8      	str	r0, [r7, #12]
 8011f34:	60b9      	str	r1, [r7, #8]
 8011f36:	4613      	mov	r3, r2
 8011f38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d101      	bne.n	8011f44 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011f40:	2303      	movs	r3, #3
 8011f42:	e01f      	b.n	8011f84 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	2200      	movs	r2, #0
 8011f48:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	2200      	movs	r2, #0
 8011f50:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	2200      	movs	r2, #0
 8011f58:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011f5c:	68bb      	ldr	r3, [r7, #8]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d003      	beq.n	8011f6a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	68ba      	ldr	r2, [r7, #8]
 8011f66:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	2201      	movs	r2, #1
 8011f6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	79fa      	ldrb	r2, [r7, #7]
 8011f76:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011f78:	68f8      	ldr	r0, [r7, #12]
 8011f7a:	f001 fbbd 	bl	80136f8 <USBD_LL_Init>
 8011f7e:	4603      	mov	r3, r0
 8011f80:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f84:	4618      	mov	r0, r3
 8011f86:	3718      	adds	r7, #24
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	bd80      	pop	{r7, pc}

08011f8c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b084      	sub	sp, #16
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	6078      	str	r0, [r7, #4]
 8011f94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011f96:	2300      	movs	r3, #0
 8011f98:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011f9a:	683b      	ldr	r3, [r7, #0]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d101      	bne.n	8011fa4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011fa0:	2303      	movs	r3, #3
 8011fa2:	e016      	b.n	8011fd2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	683a      	ldr	r2, [r7, #0]
 8011fa8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d00b      	beq.n	8011fd0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011fc0:	f107 020e 	add.w	r2, r7, #14
 8011fc4:	4610      	mov	r0, r2
 8011fc6:	4798      	blx	r3
 8011fc8:	4602      	mov	r2, r0
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8011fd0:	2300      	movs	r3, #0
}
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	3710      	adds	r7, #16
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	bd80      	pop	{r7, pc}

08011fda <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011fda:	b580      	push	{r7, lr}
 8011fdc:	b082      	sub	sp, #8
 8011fde:	af00      	add	r7, sp, #0
 8011fe0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011fe2:	6878      	ldr	r0, [r7, #4]
 8011fe4:	f001 fbe8 	bl	80137b8 <USBD_LL_Start>
 8011fe8:	4603      	mov	r3, r0
}
 8011fea:	4618      	mov	r0, r3
 8011fec:	3708      	adds	r7, #8
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	bd80      	pop	{r7, pc}

08011ff2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011ff2:	b480      	push	{r7}
 8011ff4:	b083      	sub	sp, #12
 8011ff6:	af00      	add	r7, sp, #0
 8011ff8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011ffa:	2300      	movs	r3, #0
}
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	370c      	adds	r7, #12
 8012000:	46bd      	mov	sp, r7
 8012002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012006:	4770      	bx	lr

08012008 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012008:	b580      	push	{r7, lr}
 801200a:	b084      	sub	sp, #16
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
 8012010:	460b      	mov	r3, r1
 8012012:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8012014:	2303      	movs	r3, #3
 8012016:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801201e:	2b00      	cmp	r3, #0
 8012020:	d009      	beq.n	8012036 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	78fa      	ldrb	r2, [r7, #3]
 801202c:	4611      	mov	r1, r2
 801202e:	6878      	ldr	r0, [r7, #4]
 8012030:	4798      	blx	r3
 8012032:	4603      	mov	r3, r0
 8012034:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8012036:	7bfb      	ldrb	r3, [r7, #15]
}
 8012038:	4618      	mov	r0, r3
 801203a:	3710      	adds	r7, #16
 801203c:	46bd      	mov	sp, r7
 801203e:	bd80      	pop	{r7, pc}

08012040 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012040:	b580      	push	{r7, lr}
 8012042:	b082      	sub	sp, #8
 8012044:	af00      	add	r7, sp, #0
 8012046:	6078      	str	r0, [r7, #4]
 8012048:	460b      	mov	r3, r1
 801204a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012052:	2b00      	cmp	r3, #0
 8012054:	d007      	beq.n	8012066 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801205c:	685b      	ldr	r3, [r3, #4]
 801205e:	78fa      	ldrb	r2, [r7, #3]
 8012060:	4611      	mov	r1, r2
 8012062:	6878      	ldr	r0, [r7, #4]
 8012064:	4798      	blx	r3
  }

  return USBD_OK;
 8012066:	2300      	movs	r3, #0
}
 8012068:	4618      	mov	r0, r3
 801206a:	3708      	adds	r7, #8
 801206c:	46bd      	mov	sp, r7
 801206e:	bd80      	pop	{r7, pc}

08012070 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8012070:	b580      	push	{r7, lr}
 8012072:	b084      	sub	sp, #16
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
 8012078:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012080:	6839      	ldr	r1, [r7, #0]
 8012082:	4618      	mov	r0, r3
 8012084:	f000 ff46 	bl	8012f14 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	2201      	movs	r2, #1
 801208c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8012096:	461a      	mov	r2, r3
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80120a4:	f003 031f 	and.w	r3, r3, #31
 80120a8:	2b02      	cmp	r3, #2
 80120aa:	d01a      	beq.n	80120e2 <USBD_LL_SetupStage+0x72>
 80120ac:	2b02      	cmp	r3, #2
 80120ae:	d822      	bhi.n	80120f6 <USBD_LL_SetupStage+0x86>
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d002      	beq.n	80120ba <USBD_LL_SetupStage+0x4a>
 80120b4:	2b01      	cmp	r3, #1
 80120b6:	d00a      	beq.n	80120ce <USBD_LL_SetupStage+0x5e>
 80120b8:	e01d      	b.n	80120f6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80120c0:	4619      	mov	r1, r3
 80120c2:	6878      	ldr	r0, [r7, #4]
 80120c4:	f000 f9ee 	bl	80124a4 <USBD_StdDevReq>
 80120c8:	4603      	mov	r3, r0
 80120ca:	73fb      	strb	r3, [r7, #15]
      break;
 80120cc:	e020      	b.n	8012110 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80120d4:	4619      	mov	r1, r3
 80120d6:	6878      	ldr	r0, [r7, #4]
 80120d8:	f000 fa52 	bl	8012580 <USBD_StdItfReq>
 80120dc:	4603      	mov	r3, r0
 80120de:	73fb      	strb	r3, [r7, #15]
      break;
 80120e0:	e016      	b.n	8012110 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80120e8:	4619      	mov	r1, r3
 80120ea:	6878      	ldr	r0, [r7, #4]
 80120ec:	f000 fa91 	bl	8012612 <USBD_StdEPReq>
 80120f0:	4603      	mov	r3, r0
 80120f2:	73fb      	strb	r3, [r7, #15]
      break;
 80120f4:	e00c      	b.n	8012110 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80120fc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8012100:	b2db      	uxtb	r3, r3
 8012102:	4619      	mov	r1, r3
 8012104:	6878      	ldr	r0, [r7, #4]
 8012106:	f001 fbb7 	bl	8013878 <USBD_LL_StallEP>
 801210a:	4603      	mov	r3, r0
 801210c:	73fb      	strb	r3, [r7, #15]
      break;
 801210e:	bf00      	nop
  }

  return ret;
 8012110:	7bfb      	ldrb	r3, [r7, #15]
}
 8012112:	4618      	mov	r0, r3
 8012114:	3710      	adds	r7, #16
 8012116:	46bd      	mov	sp, r7
 8012118:	bd80      	pop	{r7, pc}

0801211a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801211a:	b580      	push	{r7, lr}
 801211c:	b086      	sub	sp, #24
 801211e:	af00      	add	r7, sp, #0
 8012120:	60f8      	str	r0, [r7, #12]
 8012122:	460b      	mov	r3, r1
 8012124:	607a      	str	r2, [r7, #4]
 8012126:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8012128:	7afb      	ldrb	r3, [r7, #11]
 801212a:	2b00      	cmp	r3, #0
 801212c:	d138      	bne.n	80121a0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8012134:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801213c:	2b03      	cmp	r3, #3
 801213e:	d14a      	bne.n	80121d6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8012140:	693b      	ldr	r3, [r7, #16]
 8012142:	689a      	ldr	r2, [r3, #8]
 8012144:	693b      	ldr	r3, [r7, #16]
 8012146:	68db      	ldr	r3, [r3, #12]
 8012148:	429a      	cmp	r2, r3
 801214a:	d913      	bls.n	8012174 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801214c:	693b      	ldr	r3, [r7, #16]
 801214e:	689a      	ldr	r2, [r3, #8]
 8012150:	693b      	ldr	r3, [r7, #16]
 8012152:	68db      	ldr	r3, [r3, #12]
 8012154:	1ad2      	subs	r2, r2, r3
 8012156:	693b      	ldr	r3, [r7, #16]
 8012158:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801215a:	693b      	ldr	r3, [r7, #16]
 801215c:	68da      	ldr	r2, [r3, #12]
 801215e:	693b      	ldr	r3, [r7, #16]
 8012160:	689b      	ldr	r3, [r3, #8]
 8012162:	4293      	cmp	r3, r2
 8012164:	bf28      	it	cs
 8012166:	4613      	movcs	r3, r2
 8012168:	461a      	mov	r2, r3
 801216a:	6879      	ldr	r1, [r7, #4]
 801216c:	68f8      	ldr	r0, [r7, #12]
 801216e:	f000 ffc5 	bl	80130fc <USBD_CtlContinueRx>
 8012172:	e030      	b.n	80121d6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801217a:	b2db      	uxtb	r3, r3
 801217c:	2b03      	cmp	r3, #3
 801217e:	d10b      	bne.n	8012198 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012186:	691b      	ldr	r3, [r3, #16]
 8012188:	2b00      	cmp	r3, #0
 801218a:	d005      	beq.n	8012198 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012192:	691b      	ldr	r3, [r3, #16]
 8012194:	68f8      	ldr	r0, [r7, #12]
 8012196:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8012198:	68f8      	ldr	r0, [r7, #12]
 801219a:	f000 ffc0 	bl	801311e <USBD_CtlSendStatus>
 801219e:	e01a      	b.n	80121d6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80121a6:	b2db      	uxtb	r3, r3
 80121a8:	2b03      	cmp	r3, #3
 80121aa:	d114      	bne.n	80121d6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80121b2:	699b      	ldr	r3, [r3, #24]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d00e      	beq.n	80121d6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80121be:	699b      	ldr	r3, [r3, #24]
 80121c0:	7afa      	ldrb	r2, [r7, #11]
 80121c2:	4611      	mov	r1, r2
 80121c4:	68f8      	ldr	r0, [r7, #12]
 80121c6:	4798      	blx	r3
 80121c8:	4603      	mov	r3, r0
 80121ca:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80121cc:	7dfb      	ldrb	r3, [r7, #23]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d001      	beq.n	80121d6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80121d2:	7dfb      	ldrb	r3, [r7, #23]
 80121d4:	e000      	b.n	80121d8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80121d6:	2300      	movs	r3, #0
}
 80121d8:	4618      	mov	r0, r3
 80121da:	3718      	adds	r7, #24
 80121dc:	46bd      	mov	sp, r7
 80121de:	bd80      	pop	{r7, pc}

080121e0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b086      	sub	sp, #24
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	60f8      	str	r0, [r7, #12]
 80121e8:	460b      	mov	r3, r1
 80121ea:	607a      	str	r2, [r7, #4]
 80121ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80121ee:	7afb      	ldrb	r3, [r7, #11]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d16b      	bne.n	80122cc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	3314      	adds	r3, #20
 80121f8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8012200:	2b02      	cmp	r3, #2
 8012202:	d156      	bne.n	80122b2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8012204:	693b      	ldr	r3, [r7, #16]
 8012206:	689a      	ldr	r2, [r3, #8]
 8012208:	693b      	ldr	r3, [r7, #16]
 801220a:	68db      	ldr	r3, [r3, #12]
 801220c:	429a      	cmp	r2, r3
 801220e:	d914      	bls.n	801223a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012210:	693b      	ldr	r3, [r7, #16]
 8012212:	689a      	ldr	r2, [r3, #8]
 8012214:	693b      	ldr	r3, [r7, #16]
 8012216:	68db      	ldr	r3, [r3, #12]
 8012218:	1ad2      	subs	r2, r2, r3
 801221a:	693b      	ldr	r3, [r7, #16]
 801221c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801221e:	693b      	ldr	r3, [r7, #16]
 8012220:	689b      	ldr	r3, [r3, #8]
 8012222:	461a      	mov	r2, r3
 8012224:	6879      	ldr	r1, [r7, #4]
 8012226:	68f8      	ldr	r0, [r7, #12]
 8012228:	f000 ff3a 	bl	80130a0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801222c:	2300      	movs	r3, #0
 801222e:	2200      	movs	r2, #0
 8012230:	2100      	movs	r1, #0
 8012232:	68f8      	ldr	r0, [r7, #12]
 8012234:	f001 fbca 	bl	80139cc <USBD_LL_PrepareReceive>
 8012238:	e03b      	b.n	80122b2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801223a:	693b      	ldr	r3, [r7, #16]
 801223c:	68da      	ldr	r2, [r3, #12]
 801223e:	693b      	ldr	r3, [r7, #16]
 8012240:	689b      	ldr	r3, [r3, #8]
 8012242:	429a      	cmp	r2, r3
 8012244:	d11c      	bne.n	8012280 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8012246:	693b      	ldr	r3, [r7, #16]
 8012248:	685a      	ldr	r2, [r3, #4]
 801224a:	693b      	ldr	r3, [r7, #16]
 801224c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801224e:	429a      	cmp	r2, r3
 8012250:	d316      	bcc.n	8012280 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8012252:	693b      	ldr	r3, [r7, #16]
 8012254:	685a      	ldr	r2, [r3, #4]
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 801225c:	429a      	cmp	r2, r3
 801225e:	d20f      	bcs.n	8012280 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8012260:	2200      	movs	r2, #0
 8012262:	2100      	movs	r1, #0
 8012264:	68f8      	ldr	r0, [r7, #12]
 8012266:	f000 ff1b 	bl	80130a0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	2200      	movs	r2, #0
 801226e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012272:	2300      	movs	r3, #0
 8012274:	2200      	movs	r2, #0
 8012276:	2100      	movs	r1, #0
 8012278:	68f8      	ldr	r0, [r7, #12]
 801227a:	f001 fba7 	bl	80139cc <USBD_LL_PrepareReceive>
 801227e:	e018      	b.n	80122b2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012286:	b2db      	uxtb	r3, r3
 8012288:	2b03      	cmp	r3, #3
 801228a:	d10b      	bne.n	80122a4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012292:	68db      	ldr	r3, [r3, #12]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d005      	beq.n	80122a4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801229e:	68db      	ldr	r3, [r3, #12]
 80122a0:	68f8      	ldr	r0, [r7, #12]
 80122a2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80122a4:	2180      	movs	r1, #128	@ 0x80
 80122a6:	68f8      	ldr	r0, [r7, #12]
 80122a8:	f001 fae6 	bl	8013878 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80122ac:	68f8      	ldr	r0, [r7, #12]
 80122ae:	f000 ff49 	bl	8013144 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80122b8:	2b01      	cmp	r3, #1
 80122ba:	d122      	bne.n	8012302 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80122bc:	68f8      	ldr	r0, [r7, #12]
 80122be:	f7ff fe98 	bl	8011ff2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	2200      	movs	r2, #0
 80122c6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80122ca:	e01a      	b.n	8012302 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80122d2:	b2db      	uxtb	r3, r3
 80122d4:	2b03      	cmp	r3, #3
 80122d6:	d114      	bne.n	8012302 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80122de:	695b      	ldr	r3, [r3, #20]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d00e      	beq.n	8012302 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80122ea:	695b      	ldr	r3, [r3, #20]
 80122ec:	7afa      	ldrb	r2, [r7, #11]
 80122ee:	4611      	mov	r1, r2
 80122f0:	68f8      	ldr	r0, [r7, #12]
 80122f2:	4798      	blx	r3
 80122f4:	4603      	mov	r3, r0
 80122f6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80122f8:	7dfb      	ldrb	r3, [r7, #23]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d001      	beq.n	8012302 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80122fe:	7dfb      	ldrb	r3, [r7, #23]
 8012300:	e000      	b.n	8012304 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8012302:	2300      	movs	r3, #0
}
 8012304:	4618      	mov	r0, r3
 8012306:	3718      	adds	r7, #24
 8012308:	46bd      	mov	sp, r7
 801230a:	bd80      	pop	{r7, pc}

0801230c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801230c:	b580      	push	{r7, lr}
 801230e:	b082      	sub	sp, #8
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	2201      	movs	r2, #1
 8012318:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	2200      	movs	r2, #0
 8012320:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	2200      	movs	r2, #0
 8012328:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	2200      	movs	r2, #0
 801232e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012338:	2b00      	cmp	r3, #0
 801233a:	d101      	bne.n	8012340 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 801233c:	2303      	movs	r3, #3
 801233e:	e02f      	b.n	80123a0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8012346:	2b00      	cmp	r3, #0
 8012348:	d00f      	beq.n	801236a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012350:	685b      	ldr	r3, [r3, #4]
 8012352:	2b00      	cmp	r3, #0
 8012354:	d009      	beq.n	801236a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801235c:	685b      	ldr	r3, [r3, #4]
 801235e:	687a      	ldr	r2, [r7, #4]
 8012360:	6852      	ldr	r2, [r2, #4]
 8012362:	b2d2      	uxtb	r2, r2
 8012364:	4611      	mov	r1, r2
 8012366:	6878      	ldr	r0, [r7, #4]
 8012368:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801236a:	2340      	movs	r3, #64	@ 0x40
 801236c:	2200      	movs	r2, #0
 801236e:	2100      	movs	r1, #0
 8012370:	6878      	ldr	r0, [r7, #4]
 8012372:	f001 fa3c 	bl	80137ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	2201      	movs	r2, #1
 801237a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	2240      	movs	r2, #64	@ 0x40
 8012382:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012386:	2340      	movs	r3, #64	@ 0x40
 8012388:	2200      	movs	r2, #0
 801238a:	2180      	movs	r1, #128	@ 0x80
 801238c:	6878      	ldr	r0, [r7, #4]
 801238e:	f001 fa2e 	bl	80137ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	2201      	movs	r2, #1
 8012396:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	2240      	movs	r2, #64	@ 0x40
 801239c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801239e:	2300      	movs	r3, #0
}
 80123a0:	4618      	mov	r0, r3
 80123a2:	3708      	adds	r7, #8
 80123a4:	46bd      	mov	sp, r7
 80123a6:	bd80      	pop	{r7, pc}

080123a8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80123a8:	b480      	push	{r7}
 80123aa:	b083      	sub	sp, #12
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	6078      	str	r0, [r7, #4]
 80123b0:	460b      	mov	r3, r1
 80123b2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	78fa      	ldrb	r2, [r7, #3]
 80123b8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80123ba:	2300      	movs	r3, #0
}
 80123bc:	4618      	mov	r0, r3
 80123be:	370c      	adds	r7, #12
 80123c0:	46bd      	mov	sp, r7
 80123c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c6:	4770      	bx	lr

080123c8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80123c8:	b480      	push	{r7}
 80123ca:	b083      	sub	sp, #12
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80123d6:	b2da      	uxtb	r2, r3
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	2204      	movs	r2, #4
 80123e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80123e6:	2300      	movs	r3, #0
}
 80123e8:	4618      	mov	r0, r3
 80123ea:	370c      	adds	r7, #12
 80123ec:	46bd      	mov	sp, r7
 80123ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f2:	4770      	bx	lr

080123f4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80123f4:	b480      	push	{r7}
 80123f6:	b083      	sub	sp, #12
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012402:	b2db      	uxtb	r3, r3
 8012404:	2b04      	cmp	r3, #4
 8012406:	d106      	bne.n	8012416 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 801240e:	b2da      	uxtb	r2, r3
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8012416:	2300      	movs	r3, #0
}
 8012418:	4618      	mov	r0, r3
 801241a:	370c      	adds	r7, #12
 801241c:	46bd      	mov	sp, r7
 801241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012422:	4770      	bx	lr

08012424 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8012424:	b580      	push	{r7, lr}
 8012426:	b082      	sub	sp, #8
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012432:	2b00      	cmp	r3, #0
 8012434:	d101      	bne.n	801243a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8012436:	2303      	movs	r3, #3
 8012438:	e012      	b.n	8012460 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012440:	b2db      	uxtb	r3, r3
 8012442:	2b03      	cmp	r3, #3
 8012444:	d10b      	bne.n	801245e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801244c:	69db      	ldr	r3, [r3, #28]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d005      	beq.n	801245e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012458:	69db      	ldr	r3, [r3, #28]
 801245a:	6878      	ldr	r0, [r7, #4]
 801245c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801245e:	2300      	movs	r3, #0
}
 8012460:	4618      	mov	r0, r3
 8012462:	3708      	adds	r7, #8
 8012464:	46bd      	mov	sp, r7
 8012466:	bd80      	pop	{r7, pc}

08012468 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8012468:	b480      	push	{r7}
 801246a:	b087      	sub	sp, #28
 801246c:	af00      	add	r7, sp, #0
 801246e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8012474:	697b      	ldr	r3, [r7, #20]
 8012476:	781b      	ldrb	r3, [r3, #0]
 8012478:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801247a:	697b      	ldr	r3, [r7, #20]
 801247c:	3301      	adds	r3, #1
 801247e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8012480:	697b      	ldr	r3, [r7, #20]
 8012482:	781b      	ldrb	r3, [r3, #0]
 8012484:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8012486:	8a3b      	ldrh	r3, [r7, #16]
 8012488:	021b      	lsls	r3, r3, #8
 801248a:	b21a      	sxth	r2, r3
 801248c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012490:	4313      	orrs	r3, r2
 8012492:	b21b      	sxth	r3, r3
 8012494:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8012496:	89fb      	ldrh	r3, [r7, #14]
}
 8012498:	4618      	mov	r0, r3
 801249a:	371c      	adds	r7, #28
 801249c:	46bd      	mov	sp, r7
 801249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a2:	4770      	bx	lr

080124a4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80124a4:	b580      	push	{r7, lr}
 80124a6:	b084      	sub	sp, #16
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	6078      	str	r0, [r7, #4]
 80124ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80124ae:	2300      	movs	r3, #0
 80124b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80124b2:	683b      	ldr	r3, [r7, #0]
 80124b4:	781b      	ldrb	r3, [r3, #0]
 80124b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80124ba:	2b40      	cmp	r3, #64	@ 0x40
 80124bc:	d005      	beq.n	80124ca <USBD_StdDevReq+0x26>
 80124be:	2b40      	cmp	r3, #64	@ 0x40
 80124c0:	d853      	bhi.n	801256a <USBD_StdDevReq+0xc6>
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d00b      	beq.n	80124de <USBD_StdDevReq+0x3a>
 80124c6:	2b20      	cmp	r3, #32
 80124c8:	d14f      	bne.n	801256a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80124d0:	689b      	ldr	r3, [r3, #8]
 80124d2:	6839      	ldr	r1, [r7, #0]
 80124d4:	6878      	ldr	r0, [r7, #4]
 80124d6:	4798      	blx	r3
 80124d8:	4603      	mov	r3, r0
 80124da:	73fb      	strb	r3, [r7, #15]
      break;
 80124dc:	e04a      	b.n	8012574 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80124de:	683b      	ldr	r3, [r7, #0]
 80124e0:	785b      	ldrb	r3, [r3, #1]
 80124e2:	2b09      	cmp	r3, #9
 80124e4:	d83b      	bhi.n	801255e <USBD_StdDevReq+0xba>
 80124e6:	a201      	add	r2, pc, #4	@ (adr r2, 80124ec <USBD_StdDevReq+0x48>)
 80124e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124ec:	08012541 	.word	0x08012541
 80124f0:	08012555 	.word	0x08012555
 80124f4:	0801255f 	.word	0x0801255f
 80124f8:	0801254b 	.word	0x0801254b
 80124fc:	0801255f 	.word	0x0801255f
 8012500:	0801251f 	.word	0x0801251f
 8012504:	08012515 	.word	0x08012515
 8012508:	0801255f 	.word	0x0801255f
 801250c:	08012537 	.word	0x08012537
 8012510:	08012529 	.word	0x08012529
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012514:	6839      	ldr	r1, [r7, #0]
 8012516:	6878      	ldr	r0, [r7, #4]
 8012518:	f000 f9de 	bl	80128d8 <USBD_GetDescriptor>
          break;
 801251c:	e024      	b.n	8012568 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801251e:	6839      	ldr	r1, [r7, #0]
 8012520:	6878      	ldr	r0, [r7, #4]
 8012522:	f000 fb6d 	bl	8012c00 <USBD_SetAddress>
          break;
 8012526:	e01f      	b.n	8012568 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8012528:	6839      	ldr	r1, [r7, #0]
 801252a:	6878      	ldr	r0, [r7, #4]
 801252c:	f000 fbac 	bl	8012c88 <USBD_SetConfig>
 8012530:	4603      	mov	r3, r0
 8012532:	73fb      	strb	r3, [r7, #15]
          break;
 8012534:	e018      	b.n	8012568 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8012536:	6839      	ldr	r1, [r7, #0]
 8012538:	6878      	ldr	r0, [r7, #4]
 801253a:	f000 fc4b 	bl	8012dd4 <USBD_GetConfig>
          break;
 801253e:	e013      	b.n	8012568 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012540:	6839      	ldr	r1, [r7, #0]
 8012542:	6878      	ldr	r0, [r7, #4]
 8012544:	f000 fc7c 	bl	8012e40 <USBD_GetStatus>
          break;
 8012548:	e00e      	b.n	8012568 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801254a:	6839      	ldr	r1, [r7, #0]
 801254c:	6878      	ldr	r0, [r7, #4]
 801254e:	f000 fcab 	bl	8012ea8 <USBD_SetFeature>
          break;
 8012552:	e009      	b.n	8012568 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012554:	6839      	ldr	r1, [r7, #0]
 8012556:	6878      	ldr	r0, [r7, #4]
 8012558:	f000 fcba 	bl	8012ed0 <USBD_ClrFeature>
          break;
 801255c:	e004      	b.n	8012568 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801255e:	6839      	ldr	r1, [r7, #0]
 8012560:	6878      	ldr	r0, [r7, #4]
 8012562:	f000 fd11 	bl	8012f88 <USBD_CtlError>
          break;
 8012566:	bf00      	nop
      }
      break;
 8012568:	e004      	b.n	8012574 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801256a:	6839      	ldr	r1, [r7, #0]
 801256c:	6878      	ldr	r0, [r7, #4]
 801256e:	f000 fd0b 	bl	8012f88 <USBD_CtlError>
      break;
 8012572:	bf00      	nop
  }

  return ret;
 8012574:	7bfb      	ldrb	r3, [r7, #15]
}
 8012576:	4618      	mov	r0, r3
 8012578:	3710      	adds	r7, #16
 801257a:	46bd      	mov	sp, r7
 801257c:	bd80      	pop	{r7, pc}
 801257e:	bf00      	nop

08012580 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012580:	b580      	push	{r7, lr}
 8012582:	b084      	sub	sp, #16
 8012584:	af00      	add	r7, sp, #0
 8012586:	6078      	str	r0, [r7, #4]
 8012588:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801258a:	2300      	movs	r3, #0
 801258c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801258e:	683b      	ldr	r3, [r7, #0]
 8012590:	781b      	ldrb	r3, [r3, #0]
 8012592:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012596:	2b40      	cmp	r3, #64	@ 0x40
 8012598:	d005      	beq.n	80125a6 <USBD_StdItfReq+0x26>
 801259a:	2b40      	cmp	r3, #64	@ 0x40
 801259c:	d82f      	bhi.n	80125fe <USBD_StdItfReq+0x7e>
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d001      	beq.n	80125a6 <USBD_StdItfReq+0x26>
 80125a2:	2b20      	cmp	r3, #32
 80125a4:	d12b      	bne.n	80125fe <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80125ac:	b2db      	uxtb	r3, r3
 80125ae:	3b01      	subs	r3, #1
 80125b0:	2b02      	cmp	r3, #2
 80125b2:	d81d      	bhi.n	80125f0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80125b4:	683b      	ldr	r3, [r7, #0]
 80125b6:	889b      	ldrh	r3, [r3, #4]
 80125b8:	b2db      	uxtb	r3, r3
 80125ba:	2b01      	cmp	r3, #1
 80125bc:	d813      	bhi.n	80125e6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80125c4:	689b      	ldr	r3, [r3, #8]
 80125c6:	6839      	ldr	r1, [r7, #0]
 80125c8:	6878      	ldr	r0, [r7, #4]
 80125ca:	4798      	blx	r3
 80125cc:	4603      	mov	r3, r0
 80125ce:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80125d0:	683b      	ldr	r3, [r7, #0]
 80125d2:	88db      	ldrh	r3, [r3, #6]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d110      	bne.n	80125fa <USBD_StdItfReq+0x7a>
 80125d8:	7bfb      	ldrb	r3, [r7, #15]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d10d      	bne.n	80125fa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80125de:	6878      	ldr	r0, [r7, #4]
 80125e0:	f000 fd9d 	bl	801311e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80125e4:	e009      	b.n	80125fa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80125e6:	6839      	ldr	r1, [r7, #0]
 80125e8:	6878      	ldr	r0, [r7, #4]
 80125ea:	f000 fccd 	bl	8012f88 <USBD_CtlError>
          break;
 80125ee:	e004      	b.n	80125fa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80125f0:	6839      	ldr	r1, [r7, #0]
 80125f2:	6878      	ldr	r0, [r7, #4]
 80125f4:	f000 fcc8 	bl	8012f88 <USBD_CtlError>
          break;
 80125f8:	e000      	b.n	80125fc <USBD_StdItfReq+0x7c>
          break;
 80125fa:	bf00      	nop
      }
      break;
 80125fc:	e004      	b.n	8012608 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80125fe:	6839      	ldr	r1, [r7, #0]
 8012600:	6878      	ldr	r0, [r7, #4]
 8012602:	f000 fcc1 	bl	8012f88 <USBD_CtlError>
      break;
 8012606:	bf00      	nop
  }

  return ret;
 8012608:	7bfb      	ldrb	r3, [r7, #15]
}
 801260a:	4618      	mov	r0, r3
 801260c:	3710      	adds	r7, #16
 801260e:	46bd      	mov	sp, r7
 8012610:	bd80      	pop	{r7, pc}

08012612 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012612:	b580      	push	{r7, lr}
 8012614:	b084      	sub	sp, #16
 8012616:	af00      	add	r7, sp, #0
 8012618:	6078      	str	r0, [r7, #4]
 801261a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801261c:	2300      	movs	r3, #0
 801261e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8012620:	683b      	ldr	r3, [r7, #0]
 8012622:	889b      	ldrh	r3, [r3, #4]
 8012624:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012626:	683b      	ldr	r3, [r7, #0]
 8012628:	781b      	ldrb	r3, [r3, #0]
 801262a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801262e:	2b40      	cmp	r3, #64	@ 0x40
 8012630:	d007      	beq.n	8012642 <USBD_StdEPReq+0x30>
 8012632:	2b40      	cmp	r3, #64	@ 0x40
 8012634:	f200 8145 	bhi.w	80128c2 <USBD_StdEPReq+0x2b0>
 8012638:	2b00      	cmp	r3, #0
 801263a:	d00c      	beq.n	8012656 <USBD_StdEPReq+0x44>
 801263c:	2b20      	cmp	r3, #32
 801263e:	f040 8140 	bne.w	80128c2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012648:	689b      	ldr	r3, [r3, #8]
 801264a:	6839      	ldr	r1, [r7, #0]
 801264c:	6878      	ldr	r0, [r7, #4]
 801264e:	4798      	blx	r3
 8012650:	4603      	mov	r3, r0
 8012652:	73fb      	strb	r3, [r7, #15]
      break;
 8012654:	e13a      	b.n	80128cc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012656:	683b      	ldr	r3, [r7, #0]
 8012658:	785b      	ldrb	r3, [r3, #1]
 801265a:	2b03      	cmp	r3, #3
 801265c:	d007      	beq.n	801266e <USBD_StdEPReq+0x5c>
 801265e:	2b03      	cmp	r3, #3
 8012660:	f300 8129 	bgt.w	80128b6 <USBD_StdEPReq+0x2a4>
 8012664:	2b00      	cmp	r3, #0
 8012666:	d07f      	beq.n	8012768 <USBD_StdEPReq+0x156>
 8012668:	2b01      	cmp	r3, #1
 801266a:	d03c      	beq.n	80126e6 <USBD_StdEPReq+0xd4>
 801266c:	e123      	b.n	80128b6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012674:	b2db      	uxtb	r3, r3
 8012676:	2b02      	cmp	r3, #2
 8012678:	d002      	beq.n	8012680 <USBD_StdEPReq+0x6e>
 801267a:	2b03      	cmp	r3, #3
 801267c:	d016      	beq.n	80126ac <USBD_StdEPReq+0x9a>
 801267e:	e02c      	b.n	80126da <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012680:	7bbb      	ldrb	r3, [r7, #14]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d00d      	beq.n	80126a2 <USBD_StdEPReq+0x90>
 8012686:	7bbb      	ldrb	r3, [r7, #14]
 8012688:	2b80      	cmp	r3, #128	@ 0x80
 801268a:	d00a      	beq.n	80126a2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801268c:	7bbb      	ldrb	r3, [r7, #14]
 801268e:	4619      	mov	r1, r3
 8012690:	6878      	ldr	r0, [r7, #4]
 8012692:	f001 f8f1 	bl	8013878 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012696:	2180      	movs	r1, #128	@ 0x80
 8012698:	6878      	ldr	r0, [r7, #4]
 801269a:	f001 f8ed 	bl	8013878 <USBD_LL_StallEP>
 801269e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80126a0:	e020      	b.n	80126e4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80126a2:	6839      	ldr	r1, [r7, #0]
 80126a4:	6878      	ldr	r0, [r7, #4]
 80126a6:	f000 fc6f 	bl	8012f88 <USBD_CtlError>
              break;
 80126aa:	e01b      	b.n	80126e4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80126ac:	683b      	ldr	r3, [r7, #0]
 80126ae:	885b      	ldrh	r3, [r3, #2]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d10e      	bne.n	80126d2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80126b4:	7bbb      	ldrb	r3, [r7, #14]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d00b      	beq.n	80126d2 <USBD_StdEPReq+0xc0>
 80126ba:	7bbb      	ldrb	r3, [r7, #14]
 80126bc:	2b80      	cmp	r3, #128	@ 0x80
 80126be:	d008      	beq.n	80126d2 <USBD_StdEPReq+0xc0>
 80126c0:	683b      	ldr	r3, [r7, #0]
 80126c2:	88db      	ldrh	r3, [r3, #6]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d104      	bne.n	80126d2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80126c8:	7bbb      	ldrb	r3, [r7, #14]
 80126ca:	4619      	mov	r1, r3
 80126cc:	6878      	ldr	r0, [r7, #4]
 80126ce:	f001 f8d3 	bl	8013878 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80126d2:	6878      	ldr	r0, [r7, #4]
 80126d4:	f000 fd23 	bl	801311e <USBD_CtlSendStatus>

              break;
 80126d8:	e004      	b.n	80126e4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80126da:	6839      	ldr	r1, [r7, #0]
 80126dc:	6878      	ldr	r0, [r7, #4]
 80126de:	f000 fc53 	bl	8012f88 <USBD_CtlError>
              break;
 80126e2:	bf00      	nop
          }
          break;
 80126e4:	e0ec      	b.n	80128c0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80126ec:	b2db      	uxtb	r3, r3
 80126ee:	2b02      	cmp	r3, #2
 80126f0:	d002      	beq.n	80126f8 <USBD_StdEPReq+0xe6>
 80126f2:	2b03      	cmp	r3, #3
 80126f4:	d016      	beq.n	8012724 <USBD_StdEPReq+0x112>
 80126f6:	e030      	b.n	801275a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80126f8:	7bbb      	ldrb	r3, [r7, #14]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d00d      	beq.n	801271a <USBD_StdEPReq+0x108>
 80126fe:	7bbb      	ldrb	r3, [r7, #14]
 8012700:	2b80      	cmp	r3, #128	@ 0x80
 8012702:	d00a      	beq.n	801271a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012704:	7bbb      	ldrb	r3, [r7, #14]
 8012706:	4619      	mov	r1, r3
 8012708:	6878      	ldr	r0, [r7, #4]
 801270a:	f001 f8b5 	bl	8013878 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801270e:	2180      	movs	r1, #128	@ 0x80
 8012710:	6878      	ldr	r0, [r7, #4]
 8012712:	f001 f8b1 	bl	8013878 <USBD_LL_StallEP>
 8012716:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012718:	e025      	b.n	8012766 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801271a:	6839      	ldr	r1, [r7, #0]
 801271c:	6878      	ldr	r0, [r7, #4]
 801271e:	f000 fc33 	bl	8012f88 <USBD_CtlError>
              break;
 8012722:	e020      	b.n	8012766 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012724:	683b      	ldr	r3, [r7, #0]
 8012726:	885b      	ldrh	r3, [r3, #2]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d11b      	bne.n	8012764 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801272c:	7bbb      	ldrb	r3, [r7, #14]
 801272e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012732:	2b00      	cmp	r3, #0
 8012734:	d004      	beq.n	8012740 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012736:	7bbb      	ldrb	r3, [r7, #14]
 8012738:	4619      	mov	r1, r3
 801273a:	6878      	ldr	r0, [r7, #4]
 801273c:	f001 f8bb 	bl	80138b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8012740:	6878      	ldr	r0, [r7, #4]
 8012742:	f000 fcec 	bl	801311e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801274c:	689b      	ldr	r3, [r3, #8]
 801274e:	6839      	ldr	r1, [r7, #0]
 8012750:	6878      	ldr	r0, [r7, #4]
 8012752:	4798      	blx	r3
 8012754:	4603      	mov	r3, r0
 8012756:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8012758:	e004      	b.n	8012764 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801275a:	6839      	ldr	r1, [r7, #0]
 801275c:	6878      	ldr	r0, [r7, #4]
 801275e:	f000 fc13 	bl	8012f88 <USBD_CtlError>
              break;
 8012762:	e000      	b.n	8012766 <USBD_StdEPReq+0x154>
              break;
 8012764:	bf00      	nop
          }
          break;
 8012766:	e0ab      	b.n	80128c0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801276e:	b2db      	uxtb	r3, r3
 8012770:	2b02      	cmp	r3, #2
 8012772:	d002      	beq.n	801277a <USBD_StdEPReq+0x168>
 8012774:	2b03      	cmp	r3, #3
 8012776:	d032      	beq.n	80127de <USBD_StdEPReq+0x1cc>
 8012778:	e097      	b.n	80128aa <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801277a:	7bbb      	ldrb	r3, [r7, #14]
 801277c:	2b00      	cmp	r3, #0
 801277e:	d007      	beq.n	8012790 <USBD_StdEPReq+0x17e>
 8012780:	7bbb      	ldrb	r3, [r7, #14]
 8012782:	2b80      	cmp	r3, #128	@ 0x80
 8012784:	d004      	beq.n	8012790 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8012786:	6839      	ldr	r1, [r7, #0]
 8012788:	6878      	ldr	r0, [r7, #4]
 801278a:	f000 fbfd 	bl	8012f88 <USBD_CtlError>
                break;
 801278e:	e091      	b.n	80128b4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012790:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012794:	2b00      	cmp	r3, #0
 8012796:	da0b      	bge.n	80127b0 <USBD_StdEPReq+0x19e>
 8012798:	7bbb      	ldrb	r3, [r7, #14]
 801279a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801279e:	4613      	mov	r3, r2
 80127a0:	009b      	lsls	r3, r3, #2
 80127a2:	4413      	add	r3, r2
 80127a4:	009b      	lsls	r3, r3, #2
 80127a6:	3310      	adds	r3, #16
 80127a8:	687a      	ldr	r2, [r7, #4]
 80127aa:	4413      	add	r3, r2
 80127ac:	3304      	adds	r3, #4
 80127ae:	e00b      	b.n	80127c8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80127b0:	7bbb      	ldrb	r3, [r7, #14]
 80127b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80127b6:	4613      	mov	r3, r2
 80127b8:	009b      	lsls	r3, r3, #2
 80127ba:	4413      	add	r3, r2
 80127bc:	009b      	lsls	r3, r3, #2
 80127be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80127c2:	687a      	ldr	r2, [r7, #4]
 80127c4:	4413      	add	r3, r2
 80127c6:	3304      	adds	r3, #4
 80127c8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80127ca:	68bb      	ldr	r3, [r7, #8]
 80127cc:	2200      	movs	r2, #0
 80127ce:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80127d0:	68bb      	ldr	r3, [r7, #8]
 80127d2:	2202      	movs	r2, #2
 80127d4:	4619      	mov	r1, r3
 80127d6:	6878      	ldr	r0, [r7, #4]
 80127d8:	f000 fc47 	bl	801306a <USBD_CtlSendData>
              break;
 80127dc:	e06a      	b.n	80128b4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80127de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	da11      	bge.n	801280a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80127e6:	7bbb      	ldrb	r3, [r7, #14]
 80127e8:	f003 020f 	and.w	r2, r3, #15
 80127ec:	6879      	ldr	r1, [r7, #4]
 80127ee:	4613      	mov	r3, r2
 80127f0:	009b      	lsls	r3, r3, #2
 80127f2:	4413      	add	r3, r2
 80127f4:	009b      	lsls	r3, r3, #2
 80127f6:	440b      	add	r3, r1
 80127f8:	3324      	adds	r3, #36	@ 0x24
 80127fa:	881b      	ldrh	r3, [r3, #0]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d117      	bne.n	8012830 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8012800:	6839      	ldr	r1, [r7, #0]
 8012802:	6878      	ldr	r0, [r7, #4]
 8012804:	f000 fbc0 	bl	8012f88 <USBD_CtlError>
                  break;
 8012808:	e054      	b.n	80128b4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801280a:	7bbb      	ldrb	r3, [r7, #14]
 801280c:	f003 020f 	and.w	r2, r3, #15
 8012810:	6879      	ldr	r1, [r7, #4]
 8012812:	4613      	mov	r3, r2
 8012814:	009b      	lsls	r3, r3, #2
 8012816:	4413      	add	r3, r2
 8012818:	009b      	lsls	r3, r3, #2
 801281a:	440b      	add	r3, r1
 801281c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012820:	881b      	ldrh	r3, [r3, #0]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d104      	bne.n	8012830 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8012826:	6839      	ldr	r1, [r7, #0]
 8012828:	6878      	ldr	r0, [r7, #4]
 801282a:	f000 fbad 	bl	8012f88 <USBD_CtlError>
                  break;
 801282e:	e041      	b.n	80128b4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012830:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012834:	2b00      	cmp	r3, #0
 8012836:	da0b      	bge.n	8012850 <USBD_StdEPReq+0x23e>
 8012838:	7bbb      	ldrb	r3, [r7, #14]
 801283a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801283e:	4613      	mov	r3, r2
 8012840:	009b      	lsls	r3, r3, #2
 8012842:	4413      	add	r3, r2
 8012844:	009b      	lsls	r3, r3, #2
 8012846:	3310      	adds	r3, #16
 8012848:	687a      	ldr	r2, [r7, #4]
 801284a:	4413      	add	r3, r2
 801284c:	3304      	adds	r3, #4
 801284e:	e00b      	b.n	8012868 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012850:	7bbb      	ldrb	r3, [r7, #14]
 8012852:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012856:	4613      	mov	r3, r2
 8012858:	009b      	lsls	r3, r3, #2
 801285a:	4413      	add	r3, r2
 801285c:	009b      	lsls	r3, r3, #2
 801285e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8012862:	687a      	ldr	r2, [r7, #4]
 8012864:	4413      	add	r3, r2
 8012866:	3304      	adds	r3, #4
 8012868:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801286a:	7bbb      	ldrb	r3, [r7, #14]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d002      	beq.n	8012876 <USBD_StdEPReq+0x264>
 8012870:	7bbb      	ldrb	r3, [r7, #14]
 8012872:	2b80      	cmp	r3, #128	@ 0x80
 8012874:	d103      	bne.n	801287e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8012876:	68bb      	ldr	r3, [r7, #8]
 8012878:	2200      	movs	r2, #0
 801287a:	601a      	str	r2, [r3, #0]
 801287c:	e00e      	b.n	801289c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801287e:	7bbb      	ldrb	r3, [r7, #14]
 8012880:	4619      	mov	r1, r3
 8012882:	6878      	ldr	r0, [r7, #4]
 8012884:	f001 f836 	bl	80138f4 <USBD_LL_IsStallEP>
 8012888:	4603      	mov	r3, r0
 801288a:	2b00      	cmp	r3, #0
 801288c:	d003      	beq.n	8012896 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801288e:	68bb      	ldr	r3, [r7, #8]
 8012890:	2201      	movs	r2, #1
 8012892:	601a      	str	r2, [r3, #0]
 8012894:	e002      	b.n	801289c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8012896:	68bb      	ldr	r3, [r7, #8]
 8012898:	2200      	movs	r2, #0
 801289a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801289c:	68bb      	ldr	r3, [r7, #8]
 801289e:	2202      	movs	r2, #2
 80128a0:	4619      	mov	r1, r3
 80128a2:	6878      	ldr	r0, [r7, #4]
 80128a4:	f000 fbe1 	bl	801306a <USBD_CtlSendData>
              break;
 80128a8:	e004      	b.n	80128b4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80128aa:	6839      	ldr	r1, [r7, #0]
 80128ac:	6878      	ldr	r0, [r7, #4]
 80128ae:	f000 fb6b 	bl	8012f88 <USBD_CtlError>
              break;
 80128b2:	bf00      	nop
          }
          break;
 80128b4:	e004      	b.n	80128c0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80128b6:	6839      	ldr	r1, [r7, #0]
 80128b8:	6878      	ldr	r0, [r7, #4]
 80128ba:	f000 fb65 	bl	8012f88 <USBD_CtlError>
          break;
 80128be:	bf00      	nop
      }
      break;
 80128c0:	e004      	b.n	80128cc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80128c2:	6839      	ldr	r1, [r7, #0]
 80128c4:	6878      	ldr	r0, [r7, #4]
 80128c6:	f000 fb5f 	bl	8012f88 <USBD_CtlError>
      break;
 80128ca:	bf00      	nop
  }

  return ret;
 80128cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80128ce:	4618      	mov	r0, r3
 80128d0:	3710      	adds	r7, #16
 80128d2:	46bd      	mov	sp, r7
 80128d4:	bd80      	pop	{r7, pc}
	...

080128d8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80128d8:	b580      	push	{r7, lr}
 80128da:	b084      	sub	sp, #16
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
 80128e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80128e2:	2300      	movs	r3, #0
 80128e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80128e6:	2300      	movs	r3, #0
 80128e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80128ea:	2300      	movs	r3, #0
 80128ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80128ee:	683b      	ldr	r3, [r7, #0]
 80128f0:	885b      	ldrh	r3, [r3, #2]
 80128f2:	0a1b      	lsrs	r3, r3, #8
 80128f4:	b29b      	uxth	r3, r3
 80128f6:	3b01      	subs	r3, #1
 80128f8:	2b0e      	cmp	r3, #14
 80128fa:	f200 8152 	bhi.w	8012ba2 <USBD_GetDescriptor+0x2ca>
 80128fe:	a201      	add	r2, pc, #4	@ (adr r2, 8012904 <USBD_GetDescriptor+0x2c>)
 8012900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012904:	08012975 	.word	0x08012975
 8012908:	0801298d 	.word	0x0801298d
 801290c:	080129cd 	.word	0x080129cd
 8012910:	08012ba3 	.word	0x08012ba3
 8012914:	08012ba3 	.word	0x08012ba3
 8012918:	08012b43 	.word	0x08012b43
 801291c:	08012b6f 	.word	0x08012b6f
 8012920:	08012ba3 	.word	0x08012ba3
 8012924:	08012ba3 	.word	0x08012ba3
 8012928:	08012ba3 	.word	0x08012ba3
 801292c:	08012ba3 	.word	0x08012ba3
 8012930:	08012ba3 	.word	0x08012ba3
 8012934:	08012ba3 	.word	0x08012ba3
 8012938:	08012ba3 	.word	0x08012ba3
 801293c:	08012941 	.word	0x08012941
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012946:	69db      	ldr	r3, [r3, #28]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d00b      	beq.n	8012964 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012952:	69db      	ldr	r3, [r3, #28]
 8012954:	687a      	ldr	r2, [r7, #4]
 8012956:	7c12      	ldrb	r2, [r2, #16]
 8012958:	f107 0108 	add.w	r1, r7, #8
 801295c:	4610      	mov	r0, r2
 801295e:	4798      	blx	r3
 8012960:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012962:	e126      	b.n	8012bb2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012964:	6839      	ldr	r1, [r7, #0]
 8012966:	6878      	ldr	r0, [r7, #4]
 8012968:	f000 fb0e 	bl	8012f88 <USBD_CtlError>
        err++;
 801296c:	7afb      	ldrb	r3, [r7, #11]
 801296e:	3301      	adds	r3, #1
 8012970:	72fb      	strb	r3, [r7, #11]
      break;
 8012972:	e11e      	b.n	8012bb2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	687a      	ldr	r2, [r7, #4]
 801297e:	7c12      	ldrb	r2, [r2, #16]
 8012980:	f107 0108 	add.w	r1, r7, #8
 8012984:	4610      	mov	r0, r2
 8012986:	4798      	blx	r3
 8012988:	60f8      	str	r0, [r7, #12]
      break;
 801298a:	e112      	b.n	8012bb2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	7c1b      	ldrb	r3, [r3, #16]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d10d      	bne.n	80129b0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801299a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801299c:	f107 0208 	add.w	r2, r7, #8
 80129a0:	4610      	mov	r0, r2
 80129a2:	4798      	blx	r3
 80129a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	3301      	adds	r3, #1
 80129aa:	2202      	movs	r2, #2
 80129ac:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80129ae:	e100      	b.n	8012bb2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80129b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129b8:	f107 0208 	add.w	r2, r7, #8
 80129bc:	4610      	mov	r0, r2
 80129be:	4798      	blx	r3
 80129c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	3301      	adds	r3, #1
 80129c6:	2202      	movs	r2, #2
 80129c8:	701a      	strb	r2, [r3, #0]
      break;
 80129ca:	e0f2      	b.n	8012bb2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80129cc:	683b      	ldr	r3, [r7, #0]
 80129ce:	885b      	ldrh	r3, [r3, #2]
 80129d0:	b2db      	uxtb	r3, r3
 80129d2:	2b05      	cmp	r3, #5
 80129d4:	f200 80ac 	bhi.w	8012b30 <USBD_GetDescriptor+0x258>
 80129d8:	a201      	add	r2, pc, #4	@ (adr r2, 80129e0 <USBD_GetDescriptor+0x108>)
 80129da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129de:	bf00      	nop
 80129e0:	080129f9 	.word	0x080129f9
 80129e4:	08012a2d 	.word	0x08012a2d
 80129e8:	08012a61 	.word	0x08012a61
 80129ec:	08012a95 	.word	0x08012a95
 80129f0:	08012ac9 	.word	0x08012ac9
 80129f4:	08012afd 	.word	0x08012afd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80129fe:	685b      	ldr	r3, [r3, #4]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d00b      	beq.n	8012a1c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012a0a:	685b      	ldr	r3, [r3, #4]
 8012a0c:	687a      	ldr	r2, [r7, #4]
 8012a0e:	7c12      	ldrb	r2, [r2, #16]
 8012a10:	f107 0108 	add.w	r1, r7, #8
 8012a14:	4610      	mov	r0, r2
 8012a16:	4798      	blx	r3
 8012a18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012a1a:	e091      	b.n	8012b40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012a1c:	6839      	ldr	r1, [r7, #0]
 8012a1e:	6878      	ldr	r0, [r7, #4]
 8012a20:	f000 fab2 	bl	8012f88 <USBD_CtlError>
            err++;
 8012a24:	7afb      	ldrb	r3, [r7, #11]
 8012a26:	3301      	adds	r3, #1
 8012a28:	72fb      	strb	r3, [r7, #11]
          break;
 8012a2a:	e089      	b.n	8012b40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012a32:	689b      	ldr	r3, [r3, #8]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d00b      	beq.n	8012a50 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012a3e:	689b      	ldr	r3, [r3, #8]
 8012a40:	687a      	ldr	r2, [r7, #4]
 8012a42:	7c12      	ldrb	r2, [r2, #16]
 8012a44:	f107 0108 	add.w	r1, r7, #8
 8012a48:	4610      	mov	r0, r2
 8012a4a:	4798      	blx	r3
 8012a4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012a4e:	e077      	b.n	8012b40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012a50:	6839      	ldr	r1, [r7, #0]
 8012a52:	6878      	ldr	r0, [r7, #4]
 8012a54:	f000 fa98 	bl	8012f88 <USBD_CtlError>
            err++;
 8012a58:	7afb      	ldrb	r3, [r7, #11]
 8012a5a:	3301      	adds	r3, #1
 8012a5c:	72fb      	strb	r3, [r7, #11]
          break;
 8012a5e:	e06f      	b.n	8012b40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012a66:	68db      	ldr	r3, [r3, #12]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d00b      	beq.n	8012a84 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012a72:	68db      	ldr	r3, [r3, #12]
 8012a74:	687a      	ldr	r2, [r7, #4]
 8012a76:	7c12      	ldrb	r2, [r2, #16]
 8012a78:	f107 0108 	add.w	r1, r7, #8
 8012a7c:	4610      	mov	r0, r2
 8012a7e:	4798      	blx	r3
 8012a80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012a82:	e05d      	b.n	8012b40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012a84:	6839      	ldr	r1, [r7, #0]
 8012a86:	6878      	ldr	r0, [r7, #4]
 8012a88:	f000 fa7e 	bl	8012f88 <USBD_CtlError>
            err++;
 8012a8c:	7afb      	ldrb	r3, [r7, #11]
 8012a8e:	3301      	adds	r3, #1
 8012a90:	72fb      	strb	r3, [r7, #11]
          break;
 8012a92:	e055      	b.n	8012b40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012a9a:	691b      	ldr	r3, [r3, #16]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d00b      	beq.n	8012ab8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012aa6:	691b      	ldr	r3, [r3, #16]
 8012aa8:	687a      	ldr	r2, [r7, #4]
 8012aaa:	7c12      	ldrb	r2, [r2, #16]
 8012aac:	f107 0108 	add.w	r1, r7, #8
 8012ab0:	4610      	mov	r0, r2
 8012ab2:	4798      	blx	r3
 8012ab4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012ab6:	e043      	b.n	8012b40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012ab8:	6839      	ldr	r1, [r7, #0]
 8012aba:	6878      	ldr	r0, [r7, #4]
 8012abc:	f000 fa64 	bl	8012f88 <USBD_CtlError>
            err++;
 8012ac0:	7afb      	ldrb	r3, [r7, #11]
 8012ac2:	3301      	adds	r3, #1
 8012ac4:	72fb      	strb	r3, [r7, #11]
          break;
 8012ac6:	e03b      	b.n	8012b40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012ace:	695b      	ldr	r3, [r3, #20]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d00b      	beq.n	8012aec <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012ada:	695b      	ldr	r3, [r3, #20]
 8012adc:	687a      	ldr	r2, [r7, #4]
 8012ade:	7c12      	ldrb	r2, [r2, #16]
 8012ae0:	f107 0108 	add.w	r1, r7, #8
 8012ae4:	4610      	mov	r0, r2
 8012ae6:	4798      	blx	r3
 8012ae8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012aea:	e029      	b.n	8012b40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012aec:	6839      	ldr	r1, [r7, #0]
 8012aee:	6878      	ldr	r0, [r7, #4]
 8012af0:	f000 fa4a 	bl	8012f88 <USBD_CtlError>
            err++;
 8012af4:	7afb      	ldrb	r3, [r7, #11]
 8012af6:	3301      	adds	r3, #1
 8012af8:	72fb      	strb	r3, [r7, #11]
          break;
 8012afa:	e021      	b.n	8012b40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012b02:	699b      	ldr	r3, [r3, #24]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d00b      	beq.n	8012b20 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012b0e:	699b      	ldr	r3, [r3, #24]
 8012b10:	687a      	ldr	r2, [r7, #4]
 8012b12:	7c12      	ldrb	r2, [r2, #16]
 8012b14:	f107 0108 	add.w	r1, r7, #8
 8012b18:	4610      	mov	r0, r2
 8012b1a:	4798      	blx	r3
 8012b1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012b1e:	e00f      	b.n	8012b40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012b20:	6839      	ldr	r1, [r7, #0]
 8012b22:	6878      	ldr	r0, [r7, #4]
 8012b24:	f000 fa30 	bl	8012f88 <USBD_CtlError>
            err++;
 8012b28:	7afb      	ldrb	r3, [r7, #11]
 8012b2a:	3301      	adds	r3, #1
 8012b2c:	72fb      	strb	r3, [r7, #11]
          break;
 8012b2e:	e007      	b.n	8012b40 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012b30:	6839      	ldr	r1, [r7, #0]
 8012b32:	6878      	ldr	r0, [r7, #4]
 8012b34:	f000 fa28 	bl	8012f88 <USBD_CtlError>
          err++;
 8012b38:	7afb      	ldrb	r3, [r7, #11]
 8012b3a:	3301      	adds	r3, #1
 8012b3c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8012b3e:	bf00      	nop
      }
      break;
 8012b40:	e037      	b.n	8012bb2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	7c1b      	ldrb	r3, [r3, #16]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d109      	bne.n	8012b5e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012b52:	f107 0208 	add.w	r2, r7, #8
 8012b56:	4610      	mov	r0, r2
 8012b58:	4798      	blx	r3
 8012b5a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012b5c:	e029      	b.n	8012bb2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012b5e:	6839      	ldr	r1, [r7, #0]
 8012b60:	6878      	ldr	r0, [r7, #4]
 8012b62:	f000 fa11 	bl	8012f88 <USBD_CtlError>
        err++;
 8012b66:	7afb      	ldrb	r3, [r7, #11]
 8012b68:	3301      	adds	r3, #1
 8012b6a:	72fb      	strb	r3, [r7, #11]
      break;
 8012b6c:	e021      	b.n	8012bb2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	7c1b      	ldrb	r3, [r3, #16]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d10d      	bne.n	8012b92 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012b7e:	f107 0208 	add.w	r2, r7, #8
 8012b82:	4610      	mov	r0, r2
 8012b84:	4798      	blx	r3
 8012b86:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	3301      	adds	r3, #1
 8012b8c:	2207      	movs	r2, #7
 8012b8e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012b90:	e00f      	b.n	8012bb2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012b92:	6839      	ldr	r1, [r7, #0]
 8012b94:	6878      	ldr	r0, [r7, #4]
 8012b96:	f000 f9f7 	bl	8012f88 <USBD_CtlError>
        err++;
 8012b9a:	7afb      	ldrb	r3, [r7, #11]
 8012b9c:	3301      	adds	r3, #1
 8012b9e:	72fb      	strb	r3, [r7, #11]
      break;
 8012ba0:	e007      	b.n	8012bb2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8012ba2:	6839      	ldr	r1, [r7, #0]
 8012ba4:	6878      	ldr	r0, [r7, #4]
 8012ba6:	f000 f9ef 	bl	8012f88 <USBD_CtlError>
      err++;
 8012baa:	7afb      	ldrb	r3, [r7, #11]
 8012bac:	3301      	adds	r3, #1
 8012bae:	72fb      	strb	r3, [r7, #11]
      break;
 8012bb0:	bf00      	nop
  }

  if (err != 0U)
 8012bb2:	7afb      	ldrb	r3, [r7, #11]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d11e      	bne.n	8012bf6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8012bb8:	683b      	ldr	r3, [r7, #0]
 8012bba:	88db      	ldrh	r3, [r3, #6]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d016      	beq.n	8012bee <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8012bc0:	893b      	ldrh	r3, [r7, #8]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d00e      	beq.n	8012be4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8012bc6:	683b      	ldr	r3, [r7, #0]
 8012bc8:	88da      	ldrh	r2, [r3, #6]
 8012bca:	893b      	ldrh	r3, [r7, #8]
 8012bcc:	4293      	cmp	r3, r2
 8012bce:	bf28      	it	cs
 8012bd0:	4613      	movcs	r3, r2
 8012bd2:	b29b      	uxth	r3, r3
 8012bd4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012bd6:	893b      	ldrh	r3, [r7, #8]
 8012bd8:	461a      	mov	r2, r3
 8012bda:	68f9      	ldr	r1, [r7, #12]
 8012bdc:	6878      	ldr	r0, [r7, #4]
 8012bde:	f000 fa44 	bl	801306a <USBD_CtlSendData>
 8012be2:	e009      	b.n	8012bf8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012be4:	6839      	ldr	r1, [r7, #0]
 8012be6:	6878      	ldr	r0, [r7, #4]
 8012be8:	f000 f9ce 	bl	8012f88 <USBD_CtlError>
 8012bec:	e004      	b.n	8012bf8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012bee:	6878      	ldr	r0, [r7, #4]
 8012bf0:	f000 fa95 	bl	801311e <USBD_CtlSendStatus>
 8012bf4:	e000      	b.n	8012bf8 <USBD_GetDescriptor+0x320>
    return;
 8012bf6:	bf00      	nop
  }
}
 8012bf8:	3710      	adds	r7, #16
 8012bfa:	46bd      	mov	sp, r7
 8012bfc:	bd80      	pop	{r7, pc}
 8012bfe:	bf00      	nop

08012c00 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	b084      	sub	sp, #16
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	6078      	str	r0, [r7, #4]
 8012c08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012c0a:	683b      	ldr	r3, [r7, #0]
 8012c0c:	889b      	ldrh	r3, [r3, #4]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d131      	bne.n	8012c76 <USBD_SetAddress+0x76>
 8012c12:	683b      	ldr	r3, [r7, #0]
 8012c14:	88db      	ldrh	r3, [r3, #6]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d12d      	bne.n	8012c76 <USBD_SetAddress+0x76>
 8012c1a:	683b      	ldr	r3, [r7, #0]
 8012c1c:	885b      	ldrh	r3, [r3, #2]
 8012c1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8012c20:	d829      	bhi.n	8012c76 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012c22:	683b      	ldr	r3, [r7, #0]
 8012c24:	885b      	ldrh	r3, [r3, #2]
 8012c26:	b2db      	uxtb	r3, r3
 8012c28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012c2c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012c34:	b2db      	uxtb	r3, r3
 8012c36:	2b03      	cmp	r3, #3
 8012c38:	d104      	bne.n	8012c44 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012c3a:	6839      	ldr	r1, [r7, #0]
 8012c3c:	6878      	ldr	r0, [r7, #4]
 8012c3e:	f000 f9a3 	bl	8012f88 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012c42:	e01d      	b.n	8012c80 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	7bfa      	ldrb	r2, [r7, #15]
 8012c48:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012c4c:	7bfb      	ldrb	r3, [r7, #15]
 8012c4e:	4619      	mov	r1, r3
 8012c50:	6878      	ldr	r0, [r7, #4]
 8012c52:	f000 fe7b 	bl	801394c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012c56:	6878      	ldr	r0, [r7, #4]
 8012c58:	f000 fa61 	bl	801311e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012c5c:	7bfb      	ldrb	r3, [r7, #15]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d004      	beq.n	8012c6c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	2202      	movs	r2, #2
 8012c66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012c6a:	e009      	b.n	8012c80 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	2201      	movs	r2, #1
 8012c70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012c74:	e004      	b.n	8012c80 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012c76:	6839      	ldr	r1, [r7, #0]
 8012c78:	6878      	ldr	r0, [r7, #4]
 8012c7a:	f000 f985 	bl	8012f88 <USBD_CtlError>
  }
}
 8012c7e:	bf00      	nop
 8012c80:	bf00      	nop
 8012c82:	3710      	adds	r7, #16
 8012c84:	46bd      	mov	sp, r7
 8012c86:	bd80      	pop	{r7, pc}

08012c88 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	b084      	sub	sp, #16
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	6078      	str	r0, [r7, #4]
 8012c90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012c92:	2300      	movs	r3, #0
 8012c94:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012c96:	683b      	ldr	r3, [r7, #0]
 8012c98:	885b      	ldrh	r3, [r3, #2]
 8012c9a:	b2da      	uxtb	r2, r3
 8012c9c:	4b4c      	ldr	r3, [pc, #304]	@ (8012dd0 <USBD_SetConfig+0x148>)
 8012c9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012ca0:	4b4b      	ldr	r3, [pc, #300]	@ (8012dd0 <USBD_SetConfig+0x148>)
 8012ca2:	781b      	ldrb	r3, [r3, #0]
 8012ca4:	2b01      	cmp	r3, #1
 8012ca6:	d905      	bls.n	8012cb4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012ca8:	6839      	ldr	r1, [r7, #0]
 8012caa:	6878      	ldr	r0, [r7, #4]
 8012cac:	f000 f96c 	bl	8012f88 <USBD_CtlError>
    return USBD_FAIL;
 8012cb0:	2303      	movs	r3, #3
 8012cb2:	e088      	b.n	8012dc6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012cba:	b2db      	uxtb	r3, r3
 8012cbc:	2b02      	cmp	r3, #2
 8012cbe:	d002      	beq.n	8012cc6 <USBD_SetConfig+0x3e>
 8012cc0:	2b03      	cmp	r3, #3
 8012cc2:	d025      	beq.n	8012d10 <USBD_SetConfig+0x88>
 8012cc4:	e071      	b.n	8012daa <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8012cc6:	4b42      	ldr	r3, [pc, #264]	@ (8012dd0 <USBD_SetConfig+0x148>)
 8012cc8:	781b      	ldrb	r3, [r3, #0]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d01c      	beq.n	8012d08 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8012cce:	4b40      	ldr	r3, [pc, #256]	@ (8012dd0 <USBD_SetConfig+0x148>)
 8012cd0:	781b      	ldrb	r3, [r3, #0]
 8012cd2:	461a      	mov	r2, r3
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012cd8:	4b3d      	ldr	r3, [pc, #244]	@ (8012dd0 <USBD_SetConfig+0x148>)
 8012cda:	781b      	ldrb	r3, [r3, #0]
 8012cdc:	4619      	mov	r1, r3
 8012cde:	6878      	ldr	r0, [r7, #4]
 8012ce0:	f7ff f992 	bl	8012008 <USBD_SetClassConfig>
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012ce8:	7bfb      	ldrb	r3, [r7, #15]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d004      	beq.n	8012cf8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8012cee:	6839      	ldr	r1, [r7, #0]
 8012cf0:	6878      	ldr	r0, [r7, #4]
 8012cf2:	f000 f949 	bl	8012f88 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012cf6:	e065      	b.n	8012dc4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8012cf8:	6878      	ldr	r0, [r7, #4]
 8012cfa:	f000 fa10 	bl	801311e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	2203      	movs	r2, #3
 8012d02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8012d06:	e05d      	b.n	8012dc4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012d08:	6878      	ldr	r0, [r7, #4]
 8012d0a:	f000 fa08 	bl	801311e <USBD_CtlSendStatus>
      break;
 8012d0e:	e059      	b.n	8012dc4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012d10:	4b2f      	ldr	r3, [pc, #188]	@ (8012dd0 <USBD_SetConfig+0x148>)
 8012d12:	781b      	ldrb	r3, [r3, #0]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d112      	bne.n	8012d3e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	2202      	movs	r2, #2
 8012d1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8012d20:	4b2b      	ldr	r3, [pc, #172]	@ (8012dd0 <USBD_SetConfig+0x148>)
 8012d22:	781b      	ldrb	r3, [r3, #0]
 8012d24:	461a      	mov	r2, r3
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012d2a:	4b29      	ldr	r3, [pc, #164]	@ (8012dd0 <USBD_SetConfig+0x148>)
 8012d2c:	781b      	ldrb	r3, [r3, #0]
 8012d2e:	4619      	mov	r1, r3
 8012d30:	6878      	ldr	r0, [r7, #4]
 8012d32:	f7ff f985 	bl	8012040 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012d36:	6878      	ldr	r0, [r7, #4]
 8012d38:	f000 f9f1 	bl	801311e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012d3c:	e042      	b.n	8012dc4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8012d3e:	4b24      	ldr	r3, [pc, #144]	@ (8012dd0 <USBD_SetConfig+0x148>)
 8012d40:	781b      	ldrb	r3, [r3, #0]
 8012d42:	461a      	mov	r2, r3
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	685b      	ldr	r3, [r3, #4]
 8012d48:	429a      	cmp	r2, r3
 8012d4a:	d02a      	beq.n	8012da2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	685b      	ldr	r3, [r3, #4]
 8012d50:	b2db      	uxtb	r3, r3
 8012d52:	4619      	mov	r1, r3
 8012d54:	6878      	ldr	r0, [r7, #4]
 8012d56:	f7ff f973 	bl	8012040 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8012dd0 <USBD_SetConfig+0x148>)
 8012d5c:	781b      	ldrb	r3, [r3, #0]
 8012d5e:	461a      	mov	r2, r3
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012d64:	4b1a      	ldr	r3, [pc, #104]	@ (8012dd0 <USBD_SetConfig+0x148>)
 8012d66:	781b      	ldrb	r3, [r3, #0]
 8012d68:	4619      	mov	r1, r3
 8012d6a:	6878      	ldr	r0, [r7, #4]
 8012d6c:	f7ff f94c 	bl	8012008 <USBD_SetClassConfig>
 8012d70:	4603      	mov	r3, r0
 8012d72:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012d74:	7bfb      	ldrb	r3, [r7, #15]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d00f      	beq.n	8012d9a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8012d7a:	6839      	ldr	r1, [r7, #0]
 8012d7c:	6878      	ldr	r0, [r7, #4]
 8012d7e:	f000 f903 	bl	8012f88 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	685b      	ldr	r3, [r3, #4]
 8012d86:	b2db      	uxtb	r3, r3
 8012d88:	4619      	mov	r1, r3
 8012d8a:	6878      	ldr	r0, [r7, #4]
 8012d8c:	f7ff f958 	bl	8012040 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	2202      	movs	r2, #2
 8012d94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8012d98:	e014      	b.n	8012dc4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8012d9a:	6878      	ldr	r0, [r7, #4]
 8012d9c:	f000 f9bf 	bl	801311e <USBD_CtlSendStatus>
      break;
 8012da0:	e010      	b.n	8012dc4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012da2:	6878      	ldr	r0, [r7, #4]
 8012da4:	f000 f9bb 	bl	801311e <USBD_CtlSendStatus>
      break;
 8012da8:	e00c      	b.n	8012dc4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8012daa:	6839      	ldr	r1, [r7, #0]
 8012dac:	6878      	ldr	r0, [r7, #4]
 8012dae:	f000 f8eb 	bl	8012f88 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012db2:	4b07      	ldr	r3, [pc, #28]	@ (8012dd0 <USBD_SetConfig+0x148>)
 8012db4:	781b      	ldrb	r3, [r3, #0]
 8012db6:	4619      	mov	r1, r3
 8012db8:	6878      	ldr	r0, [r7, #4]
 8012dba:	f7ff f941 	bl	8012040 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012dbe:	2303      	movs	r3, #3
 8012dc0:	73fb      	strb	r3, [r7, #15]
      break;
 8012dc2:	bf00      	nop
  }

  return ret;
 8012dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	3710      	adds	r7, #16
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	bd80      	pop	{r7, pc}
 8012dce:	bf00      	nop
 8012dd0:	20003cc8 	.word	0x20003cc8

08012dd4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012dd4:	b580      	push	{r7, lr}
 8012dd6:	b082      	sub	sp, #8
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	6078      	str	r0, [r7, #4]
 8012ddc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012dde:	683b      	ldr	r3, [r7, #0]
 8012de0:	88db      	ldrh	r3, [r3, #6]
 8012de2:	2b01      	cmp	r3, #1
 8012de4:	d004      	beq.n	8012df0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012de6:	6839      	ldr	r1, [r7, #0]
 8012de8:	6878      	ldr	r0, [r7, #4]
 8012dea:	f000 f8cd 	bl	8012f88 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012dee:	e023      	b.n	8012e38 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012df6:	b2db      	uxtb	r3, r3
 8012df8:	2b02      	cmp	r3, #2
 8012dfa:	dc02      	bgt.n	8012e02 <USBD_GetConfig+0x2e>
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	dc03      	bgt.n	8012e08 <USBD_GetConfig+0x34>
 8012e00:	e015      	b.n	8012e2e <USBD_GetConfig+0x5a>
 8012e02:	2b03      	cmp	r3, #3
 8012e04:	d00b      	beq.n	8012e1e <USBD_GetConfig+0x4a>
 8012e06:	e012      	b.n	8012e2e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	3308      	adds	r3, #8
 8012e12:	2201      	movs	r2, #1
 8012e14:	4619      	mov	r1, r3
 8012e16:	6878      	ldr	r0, [r7, #4]
 8012e18:	f000 f927 	bl	801306a <USBD_CtlSendData>
        break;
 8012e1c:	e00c      	b.n	8012e38 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	3304      	adds	r3, #4
 8012e22:	2201      	movs	r2, #1
 8012e24:	4619      	mov	r1, r3
 8012e26:	6878      	ldr	r0, [r7, #4]
 8012e28:	f000 f91f 	bl	801306a <USBD_CtlSendData>
        break;
 8012e2c:	e004      	b.n	8012e38 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012e2e:	6839      	ldr	r1, [r7, #0]
 8012e30:	6878      	ldr	r0, [r7, #4]
 8012e32:	f000 f8a9 	bl	8012f88 <USBD_CtlError>
        break;
 8012e36:	bf00      	nop
}
 8012e38:	bf00      	nop
 8012e3a:	3708      	adds	r7, #8
 8012e3c:	46bd      	mov	sp, r7
 8012e3e:	bd80      	pop	{r7, pc}

08012e40 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b082      	sub	sp, #8
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
 8012e48:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012e50:	b2db      	uxtb	r3, r3
 8012e52:	3b01      	subs	r3, #1
 8012e54:	2b02      	cmp	r3, #2
 8012e56:	d81e      	bhi.n	8012e96 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012e58:	683b      	ldr	r3, [r7, #0]
 8012e5a:	88db      	ldrh	r3, [r3, #6]
 8012e5c:	2b02      	cmp	r3, #2
 8012e5e:	d004      	beq.n	8012e6a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012e60:	6839      	ldr	r1, [r7, #0]
 8012e62:	6878      	ldr	r0, [r7, #4]
 8012e64:	f000 f890 	bl	8012f88 <USBD_CtlError>
        break;
 8012e68:	e01a      	b.n	8012ea0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	2201      	movs	r2, #1
 8012e6e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d005      	beq.n	8012e86 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	68db      	ldr	r3, [r3, #12]
 8012e7e:	f043 0202 	orr.w	r2, r3, #2
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	330c      	adds	r3, #12
 8012e8a:	2202      	movs	r2, #2
 8012e8c:	4619      	mov	r1, r3
 8012e8e:	6878      	ldr	r0, [r7, #4]
 8012e90:	f000 f8eb 	bl	801306a <USBD_CtlSendData>
      break;
 8012e94:	e004      	b.n	8012ea0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8012e96:	6839      	ldr	r1, [r7, #0]
 8012e98:	6878      	ldr	r0, [r7, #4]
 8012e9a:	f000 f875 	bl	8012f88 <USBD_CtlError>
      break;
 8012e9e:	bf00      	nop
  }
}
 8012ea0:	bf00      	nop
 8012ea2:	3708      	adds	r7, #8
 8012ea4:	46bd      	mov	sp, r7
 8012ea6:	bd80      	pop	{r7, pc}

08012ea8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b082      	sub	sp, #8
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	6078      	str	r0, [r7, #4]
 8012eb0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012eb2:	683b      	ldr	r3, [r7, #0]
 8012eb4:	885b      	ldrh	r3, [r3, #2]
 8012eb6:	2b01      	cmp	r3, #1
 8012eb8:	d106      	bne.n	8012ec8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	2201      	movs	r2, #1
 8012ebe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012ec2:	6878      	ldr	r0, [r7, #4]
 8012ec4:	f000 f92b 	bl	801311e <USBD_CtlSendStatus>
  }
}
 8012ec8:	bf00      	nop
 8012eca:	3708      	adds	r7, #8
 8012ecc:	46bd      	mov	sp, r7
 8012ece:	bd80      	pop	{r7, pc}

08012ed0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012ed0:	b580      	push	{r7, lr}
 8012ed2:	b082      	sub	sp, #8
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	6078      	str	r0, [r7, #4]
 8012ed8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012ee0:	b2db      	uxtb	r3, r3
 8012ee2:	3b01      	subs	r3, #1
 8012ee4:	2b02      	cmp	r3, #2
 8012ee6:	d80b      	bhi.n	8012f00 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012ee8:	683b      	ldr	r3, [r7, #0]
 8012eea:	885b      	ldrh	r3, [r3, #2]
 8012eec:	2b01      	cmp	r3, #1
 8012eee:	d10c      	bne.n	8012f0a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	2200      	movs	r2, #0
 8012ef4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012ef8:	6878      	ldr	r0, [r7, #4]
 8012efa:	f000 f910 	bl	801311e <USBD_CtlSendStatus>
      }
      break;
 8012efe:	e004      	b.n	8012f0a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8012f00:	6839      	ldr	r1, [r7, #0]
 8012f02:	6878      	ldr	r0, [r7, #4]
 8012f04:	f000 f840 	bl	8012f88 <USBD_CtlError>
      break;
 8012f08:	e000      	b.n	8012f0c <USBD_ClrFeature+0x3c>
      break;
 8012f0a:	bf00      	nop
  }
}
 8012f0c:	bf00      	nop
 8012f0e:	3708      	adds	r7, #8
 8012f10:	46bd      	mov	sp, r7
 8012f12:	bd80      	pop	{r7, pc}

08012f14 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012f14:	b580      	push	{r7, lr}
 8012f16:	b084      	sub	sp, #16
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	6078      	str	r0, [r7, #4]
 8012f1c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012f1e:	683b      	ldr	r3, [r7, #0]
 8012f20:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	781a      	ldrb	r2, [r3, #0]
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	3301      	adds	r3, #1
 8012f2e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	781a      	ldrb	r2, [r3, #0]
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	3301      	adds	r3, #1
 8012f3c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012f3e:	68f8      	ldr	r0, [r7, #12]
 8012f40:	f7ff fa92 	bl	8012468 <SWAPBYTE>
 8012f44:	4603      	mov	r3, r0
 8012f46:	461a      	mov	r2, r3
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	3301      	adds	r3, #1
 8012f50:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	3301      	adds	r3, #1
 8012f56:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012f58:	68f8      	ldr	r0, [r7, #12]
 8012f5a:	f7ff fa85 	bl	8012468 <SWAPBYTE>
 8012f5e:	4603      	mov	r3, r0
 8012f60:	461a      	mov	r2, r3
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	3301      	adds	r3, #1
 8012f6a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	3301      	adds	r3, #1
 8012f70:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012f72:	68f8      	ldr	r0, [r7, #12]
 8012f74:	f7ff fa78 	bl	8012468 <SWAPBYTE>
 8012f78:	4603      	mov	r3, r0
 8012f7a:	461a      	mov	r2, r3
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	80da      	strh	r2, [r3, #6]
}
 8012f80:	bf00      	nop
 8012f82:	3710      	adds	r7, #16
 8012f84:	46bd      	mov	sp, r7
 8012f86:	bd80      	pop	{r7, pc}

08012f88 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	b082      	sub	sp, #8
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	6078      	str	r0, [r7, #4]
 8012f90:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012f92:	2180      	movs	r1, #128	@ 0x80
 8012f94:	6878      	ldr	r0, [r7, #4]
 8012f96:	f000 fc6f 	bl	8013878 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012f9a:	2100      	movs	r1, #0
 8012f9c:	6878      	ldr	r0, [r7, #4]
 8012f9e:	f000 fc6b 	bl	8013878 <USBD_LL_StallEP>
}
 8012fa2:	bf00      	nop
 8012fa4:	3708      	adds	r7, #8
 8012fa6:	46bd      	mov	sp, r7
 8012fa8:	bd80      	pop	{r7, pc}

08012faa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012faa:	b580      	push	{r7, lr}
 8012fac:	b086      	sub	sp, #24
 8012fae:	af00      	add	r7, sp, #0
 8012fb0:	60f8      	str	r0, [r7, #12]
 8012fb2:	60b9      	str	r1, [r7, #8]
 8012fb4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d036      	beq.n	801302e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012fc4:	6938      	ldr	r0, [r7, #16]
 8012fc6:	f000 f836 	bl	8013036 <USBD_GetLen>
 8012fca:	4603      	mov	r3, r0
 8012fcc:	3301      	adds	r3, #1
 8012fce:	b29b      	uxth	r3, r3
 8012fd0:	005b      	lsls	r3, r3, #1
 8012fd2:	b29a      	uxth	r2, r3
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012fd8:	7dfb      	ldrb	r3, [r7, #23]
 8012fda:	68ba      	ldr	r2, [r7, #8]
 8012fdc:	4413      	add	r3, r2
 8012fde:	687a      	ldr	r2, [r7, #4]
 8012fe0:	7812      	ldrb	r2, [r2, #0]
 8012fe2:	701a      	strb	r2, [r3, #0]
  idx++;
 8012fe4:	7dfb      	ldrb	r3, [r7, #23]
 8012fe6:	3301      	adds	r3, #1
 8012fe8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012fea:	7dfb      	ldrb	r3, [r7, #23]
 8012fec:	68ba      	ldr	r2, [r7, #8]
 8012fee:	4413      	add	r3, r2
 8012ff0:	2203      	movs	r2, #3
 8012ff2:	701a      	strb	r2, [r3, #0]
  idx++;
 8012ff4:	7dfb      	ldrb	r3, [r7, #23]
 8012ff6:	3301      	adds	r3, #1
 8012ff8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012ffa:	e013      	b.n	8013024 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012ffc:	7dfb      	ldrb	r3, [r7, #23]
 8012ffe:	68ba      	ldr	r2, [r7, #8]
 8013000:	4413      	add	r3, r2
 8013002:	693a      	ldr	r2, [r7, #16]
 8013004:	7812      	ldrb	r2, [r2, #0]
 8013006:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8013008:	693b      	ldr	r3, [r7, #16]
 801300a:	3301      	adds	r3, #1
 801300c:	613b      	str	r3, [r7, #16]
    idx++;
 801300e:	7dfb      	ldrb	r3, [r7, #23]
 8013010:	3301      	adds	r3, #1
 8013012:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8013014:	7dfb      	ldrb	r3, [r7, #23]
 8013016:	68ba      	ldr	r2, [r7, #8]
 8013018:	4413      	add	r3, r2
 801301a:	2200      	movs	r2, #0
 801301c:	701a      	strb	r2, [r3, #0]
    idx++;
 801301e:	7dfb      	ldrb	r3, [r7, #23]
 8013020:	3301      	adds	r3, #1
 8013022:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8013024:	693b      	ldr	r3, [r7, #16]
 8013026:	781b      	ldrb	r3, [r3, #0]
 8013028:	2b00      	cmp	r3, #0
 801302a:	d1e7      	bne.n	8012ffc <USBD_GetString+0x52>
 801302c:	e000      	b.n	8013030 <USBD_GetString+0x86>
    return;
 801302e:	bf00      	nop
  }
}
 8013030:	3718      	adds	r7, #24
 8013032:	46bd      	mov	sp, r7
 8013034:	bd80      	pop	{r7, pc}

08013036 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8013036:	b480      	push	{r7}
 8013038:	b085      	sub	sp, #20
 801303a:	af00      	add	r7, sp, #0
 801303c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801303e:	2300      	movs	r3, #0
 8013040:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8013046:	e005      	b.n	8013054 <USBD_GetLen+0x1e>
  {
    len++;
 8013048:	7bfb      	ldrb	r3, [r7, #15]
 801304a:	3301      	adds	r3, #1
 801304c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801304e:	68bb      	ldr	r3, [r7, #8]
 8013050:	3301      	adds	r3, #1
 8013052:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8013054:	68bb      	ldr	r3, [r7, #8]
 8013056:	781b      	ldrb	r3, [r3, #0]
 8013058:	2b00      	cmp	r3, #0
 801305a:	d1f5      	bne.n	8013048 <USBD_GetLen+0x12>
  }

  return len;
 801305c:	7bfb      	ldrb	r3, [r7, #15]
}
 801305e:	4618      	mov	r0, r3
 8013060:	3714      	adds	r7, #20
 8013062:	46bd      	mov	sp, r7
 8013064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013068:	4770      	bx	lr

0801306a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801306a:	b580      	push	{r7, lr}
 801306c:	b084      	sub	sp, #16
 801306e:	af00      	add	r7, sp, #0
 8013070:	60f8      	str	r0, [r7, #12]
 8013072:	60b9      	str	r1, [r7, #8]
 8013074:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	2202      	movs	r2, #2
 801307a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	687a      	ldr	r2, [r7, #4]
 8013082:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	687a      	ldr	r2, [r7, #4]
 8013088:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	68ba      	ldr	r2, [r7, #8]
 801308e:	2100      	movs	r1, #0
 8013090:	68f8      	ldr	r0, [r7, #12]
 8013092:	f000 fc7a 	bl	801398a <USBD_LL_Transmit>

  return USBD_OK;
 8013096:	2300      	movs	r3, #0
}
 8013098:	4618      	mov	r0, r3
 801309a:	3710      	adds	r7, #16
 801309c:	46bd      	mov	sp, r7
 801309e:	bd80      	pop	{r7, pc}

080130a0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80130a0:	b580      	push	{r7, lr}
 80130a2:	b084      	sub	sp, #16
 80130a4:	af00      	add	r7, sp, #0
 80130a6:	60f8      	str	r0, [r7, #12]
 80130a8:	60b9      	str	r1, [r7, #8]
 80130aa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	68ba      	ldr	r2, [r7, #8]
 80130b0:	2100      	movs	r1, #0
 80130b2:	68f8      	ldr	r0, [r7, #12]
 80130b4:	f000 fc69 	bl	801398a <USBD_LL_Transmit>

  return USBD_OK;
 80130b8:	2300      	movs	r3, #0
}
 80130ba:	4618      	mov	r0, r3
 80130bc:	3710      	adds	r7, #16
 80130be:	46bd      	mov	sp, r7
 80130c0:	bd80      	pop	{r7, pc}

080130c2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80130c2:	b580      	push	{r7, lr}
 80130c4:	b084      	sub	sp, #16
 80130c6:	af00      	add	r7, sp, #0
 80130c8:	60f8      	str	r0, [r7, #12]
 80130ca:	60b9      	str	r1, [r7, #8]
 80130cc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	2203      	movs	r2, #3
 80130d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	687a      	ldr	r2, [r7, #4]
 80130da:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	687a      	ldr	r2, [r7, #4]
 80130e2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	68ba      	ldr	r2, [r7, #8]
 80130ea:	2100      	movs	r1, #0
 80130ec:	68f8      	ldr	r0, [r7, #12]
 80130ee:	f000 fc6d 	bl	80139cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80130f2:	2300      	movs	r3, #0
}
 80130f4:	4618      	mov	r0, r3
 80130f6:	3710      	adds	r7, #16
 80130f8:	46bd      	mov	sp, r7
 80130fa:	bd80      	pop	{r7, pc}

080130fc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80130fc:	b580      	push	{r7, lr}
 80130fe:	b084      	sub	sp, #16
 8013100:	af00      	add	r7, sp, #0
 8013102:	60f8      	str	r0, [r7, #12]
 8013104:	60b9      	str	r1, [r7, #8]
 8013106:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	68ba      	ldr	r2, [r7, #8]
 801310c:	2100      	movs	r1, #0
 801310e:	68f8      	ldr	r0, [r7, #12]
 8013110:	f000 fc5c 	bl	80139cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013114:	2300      	movs	r3, #0
}
 8013116:	4618      	mov	r0, r3
 8013118:	3710      	adds	r7, #16
 801311a:	46bd      	mov	sp, r7
 801311c:	bd80      	pop	{r7, pc}

0801311e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801311e:	b580      	push	{r7, lr}
 8013120:	b082      	sub	sp, #8
 8013122:	af00      	add	r7, sp, #0
 8013124:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	2204      	movs	r2, #4
 801312a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801312e:	2300      	movs	r3, #0
 8013130:	2200      	movs	r2, #0
 8013132:	2100      	movs	r1, #0
 8013134:	6878      	ldr	r0, [r7, #4]
 8013136:	f000 fc28 	bl	801398a <USBD_LL_Transmit>

  return USBD_OK;
 801313a:	2300      	movs	r3, #0
}
 801313c:	4618      	mov	r0, r3
 801313e:	3708      	adds	r7, #8
 8013140:	46bd      	mov	sp, r7
 8013142:	bd80      	pop	{r7, pc}

08013144 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8013144:	b580      	push	{r7, lr}
 8013146:	b082      	sub	sp, #8
 8013148:	af00      	add	r7, sp, #0
 801314a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	2205      	movs	r2, #5
 8013150:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013154:	2300      	movs	r3, #0
 8013156:	2200      	movs	r2, #0
 8013158:	2100      	movs	r1, #0
 801315a:	6878      	ldr	r0, [r7, #4]
 801315c:	f000 fc36 	bl	80139cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013160:	2300      	movs	r3, #0
}
 8013162:	4618      	mov	r0, r3
 8013164:	3708      	adds	r7, #8
 8013166:	46bd      	mov	sp, r7
 8013168:	bd80      	pop	{r7, pc}
	...

0801316c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 801316c:	b580      	push	{r7, lr}
 801316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8013170:	2200      	movs	r2, #0
 8013172:	4912      	ldr	r1, [pc, #72]	@ (80131bc <MX_USB_Device_Init+0x50>)
 8013174:	4812      	ldr	r0, [pc, #72]	@ (80131c0 <MX_USB_Device_Init+0x54>)
 8013176:	f7fe fed9 	bl	8011f2c <USBD_Init>
 801317a:	4603      	mov	r3, r0
 801317c:	2b00      	cmp	r3, #0
 801317e:	d001      	beq.n	8013184 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8013180:	f7ef fd1c 	bl	8002bbc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8013184:	490f      	ldr	r1, [pc, #60]	@ (80131c4 <MX_USB_Device_Init+0x58>)
 8013186:	480e      	ldr	r0, [pc, #56]	@ (80131c0 <MX_USB_Device_Init+0x54>)
 8013188:	f7fe ff00 	bl	8011f8c <USBD_RegisterClass>
 801318c:	4603      	mov	r3, r0
 801318e:	2b00      	cmp	r3, #0
 8013190:	d001      	beq.n	8013196 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8013192:	f7ef fd13 	bl	8002bbc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8013196:	490c      	ldr	r1, [pc, #48]	@ (80131c8 <MX_USB_Device_Init+0x5c>)
 8013198:	4809      	ldr	r0, [pc, #36]	@ (80131c0 <MX_USB_Device_Init+0x54>)
 801319a:	f7fe fe51 	bl	8011e40 <USBD_CDC_RegisterInterface>
 801319e:	4603      	mov	r3, r0
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d001      	beq.n	80131a8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80131a4:	f7ef fd0a 	bl	8002bbc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80131a8:	4805      	ldr	r0, [pc, #20]	@ (80131c0 <MX_USB_Device_Init+0x54>)
 80131aa:	f7fe ff16 	bl	8011fda <USBD_Start>
 80131ae:	4603      	mov	r3, r0
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d001      	beq.n	80131b8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80131b4:	f7ef fd02 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80131b8:	bf00      	nop
 80131ba:	bd80      	pop	{r7, pc}
 80131bc:	20000174 	.word	0x20000174
 80131c0:	20003ccc 	.word	0x20003ccc
 80131c4:	2000005c 	.word	0x2000005c
 80131c8:	20000160 	.word	0x20000160

080131cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80131d0:	2200      	movs	r2, #0
 80131d2:	4905      	ldr	r1, [pc, #20]	@ (80131e8 <CDC_Init_FS+0x1c>)
 80131d4:	4805      	ldr	r0, [pc, #20]	@ (80131ec <CDC_Init_FS+0x20>)
 80131d6:	f7fe fe48 	bl	8011e6a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80131da:	4905      	ldr	r1, [pc, #20]	@ (80131f0 <CDC_Init_FS+0x24>)
 80131dc:	4803      	ldr	r0, [pc, #12]	@ (80131ec <CDC_Init_FS+0x20>)
 80131de:	f7fe fe62 	bl	8011ea6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80131e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80131e4:	4618      	mov	r0, r3
 80131e6:	bd80      	pop	{r7, pc}
 80131e8:	2000439c 	.word	0x2000439c
 80131ec:	20003ccc 	.word	0x20003ccc
 80131f0:	20003f9c 	.word	0x20003f9c

080131f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80131f4:	b480      	push	{r7}
 80131f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80131f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80131fa:	4618      	mov	r0, r3
 80131fc:	46bd      	mov	sp, r7
 80131fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013202:	4770      	bx	lr

08013204 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8013204:	b480      	push	{r7}
 8013206:	b083      	sub	sp, #12
 8013208:	af00      	add	r7, sp, #0
 801320a:	4603      	mov	r3, r0
 801320c:	6039      	str	r1, [r7, #0]
 801320e:	71fb      	strb	r3, [r7, #7]
 8013210:	4613      	mov	r3, r2
 8013212:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8013214:	79fb      	ldrb	r3, [r7, #7]
 8013216:	2b23      	cmp	r3, #35	@ 0x23
 8013218:	d84a      	bhi.n	80132b0 <CDC_Control_FS+0xac>
 801321a:	a201      	add	r2, pc, #4	@ (adr r2, 8013220 <CDC_Control_FS+0x1c>)
 801321c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013220:	080132b1 	.word	0x080132b1
 8013224:	080132b1 	.word	0x080132b1
 8013228:	080132b1 	.word	0x080132b1
 801322c:	080132b1 	.word	0x080132b1
 8013230:	080132b1 	.word	0x080132b1
 8013234:	080132b1 	.word	0x080132b1
 8013238:	080132b1 	.word	0x080132b1
 801323c:	080132b1 	.word	0x080132b1
 8013240:	080132b1 	.word	0x080132b1
 8013244:	080132b1 	.word	0x080132b1
 8013248:	080132b1 	.word	0x080132b1
 801324c:	080132b1 	.word	0x080132b1
 8013250:	080132b1 	.word	0x080132b1
 8013254:	080132b1 	.word	0x080132b1
 8013258:	080132b1 	.word	0x080132b1
 801325c:	080132b1 	.word	0x080132b1
 8013260:	080132b1 	.word	0x080132b1
 8013264:	080132b1 	.word	0x080132b1
 8013268:	080132b1 	.word	0x080132b1
 801326c:	080132b1 	.word	0x080132b1
 8013270:	080132b1 	.word	0x080132b1
 8013274:	080132b1 	.word	0x080132b1
 8013278:	080132b1 	.word	0x080132b1
 801327c:	080132b1 	.word	0x080132b1
 8013280:	080132b1 	.word	0x080132b1
 8013284:	080132b1 	.word	0x080132b1
 8013288:	080132b1 	.word	0x080132b1
 801328c:	080132b1 	.word	0x080132b1
 8013290:	080132b1 	.word	0x080132b1
 8013294:	080132b1 	.word	0x080132b1
 8013298:	080132b1 	.word	0x080132b1
 801329c:	080132b1 	.word	0x080132b1
 80132a0:	080132b1 	.word	0x080132b1
 80132a4:	080132b1 	.word	0x080132b1
 80132a8:	080132b1 	.word	0x080132b1
 80132ac:	080132b1 	.word	0x080132b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80132b0:	bf00      	nop
  }

  return (USBD_OK);
 80132b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80132b4:	4618      	mov	r0, r3
 80132b6:	370c      	adds	r7, #12
 80132b8:	46bd      	mov	sp, r7
 80132ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132be:	4770      	bx	lr

080132c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b082      	sub	sp, #8
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
 80132c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80132ca:	6879      	ldr	r1, [r7, #4]
 80132cc:	4805      	ldr	r0, [pc, #20]	@ (80132e4 <CDC_Receive_FS+0x24>)
 80132ce:	f7fe fdea 	bl	8011ea6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80132d2:	4804      	ldr	r0, [pc, #16]	@ (80132e4 <CDC_Receive_FS+0x24>)
 80132d4:	f7fe fe00 	bl	8011ed8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80132d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80132da:	4618      	mov	r0, r3
 80132dc:	3708      	adds	r7, #8
 80132de:	46bd      	mov	sp, r7
 80132e0:	bd80      	pop	{r7, pc}
 80132e2:	bf00      	nop
 80132e4:	20003ccc 	.word	0x20003ccc

080132e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80132e8:	b480      	push	{r7}
 80132ea:	b087      	sub	sp, #28
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	60f8      	str	r0, [r7, #12]
 80132f0:	60b9      	str	r1, [r7, #8]
 80132f2:	4613      	mov	r3, r2
 80132f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80132f6:	2300      	movs	r3, #0
 80132f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80132fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80132fe:	4618      	mov	r0, r3
 8013300:	371c      	adds	r7, #28
 8013302:	46bd      	mov	sp, r7
 8013304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013308:	4770      	bx	lr
	...

0801330c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801330c:	b480      	push	{r7}
 801330e:	b083      	sub	sp, #12
 8013310:	af00      	add	r7, sp, #0
 8013312:	4603      	mov	r3, r0
 8013314:	6039      	str	r1, [r7, #0]
 8013316:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8013318:	683b      	ldr	r3, [r7, #0]
 801331a:	2212      	movs	r2, #18
 801331c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801331e:	4b03      	ldr	r3, [pc, #12]	@ (801332c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8013320:	4618      	mov	r0, r3
 8013322:	370c      	adds	r7, #12
 8013324:	46bd      	mov	sp, r7
 8013326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801332a:	4770      	bx	lr
 801332c:	20000194 	.word	0x20000194

08013330 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013330:	b480      	push	{r7}
 8013332:	b083      	sub	sp, #12
 8013334:	af00      	add	r7, sp, #0
 8013336:	4603      	mov	r3, r0
 8013338:	6039      	str	r1, [r7, #0]
 801333a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801333c:	683b      	ldr	r3, [r7, #0]
 801333e:	2204      	movs	r2, #4
 8013340:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8013342:	4b03      	ldr	r3, [pc, #12]	@ (8013350 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8013344:	4618      	mov	r0, r3
 8013346:	370c      	adds	r7, #12
 8013348:	46bd      	mov	sp, r7
 801334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801334e:	4770      	bx	lr
 8013350:	200001a8 	.word	0x200001a8

08013354 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013354:	b580      	push	{r7, lr}
 8013356:	b082      	sub	sp, #8
 8013358:	af00      	add	r7, sp, #0
 801335a:	4603      	mov	r3, r0
 801335c:	6039      	str	r1, [r7, #0]
 801335e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013360:	79fb      	ldrb	r3, [r7, #7]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d105      	bne.n	8013372 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8013366:	683a      	ldr	r2, [r7, #0]
 8013368:	4907      	ldr	r1, [pc, #28]	@ (8013388 <USBD_CDC_ProductStrDescriptor+0x34>)
 801336a:	4808      	ldr	r0, [pc, #32]	@ (801338c <USBD_CDC_ProductStrDescriptor+0x38>)
 801336c:	f7ff fe1d 	bl	8012faa <USBD_GetString>
 8013370:	e004      	b.n	801337c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8013372:	683a      	ldr	r2, [r7, #0]
 8013374:	4904      	ldr	r1, [pc, #16]	@ (8013388 <USBD_CDC_ProductStrDescriptor+0x34>)
 8013376:	4805      	ldr	r0, [pc, #20]	@ (801338c <USBD_CDC_ProductStrDescriptor+0x38>)
 8013378:	f7ff fe17 	bl	8012faa <USBD_GetString>
  }
  return USBD_StrDesc;
 801337c:	4b02      	ldr	r3, [pc, #8]	@ (8013388 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 801337e:	4618      	mov	r0, r3
 8013380:	3708      	adds	r7, #8
 8013382:	46bd      	mov	sp, r7
 8013384:	bd80      	pop	{r7, pc}
 8013386:	bf00      	nop
 8013388:	2000479c 	.word	0x2000479c
 801338c:	08018358 	.word	0x08018358

08013390 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013390:	b580      	push	{r7, lr}
 8013392:	b082      	sub	sp, #8
 8013394:	af00      	add	r7, sp, #0
 8013396:	4603      	mov	r3, r0
 8013398:	6039      	str	r1, [r7, #0]
 801339a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801339c:	683a      	ldr	r2, [r7, #0]
 801339e:	4904      	ldr	r1, [pc, #16]	@ (80133b0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80133a0:	4804      	ldr	r0, [pc, #16]	@ (80133b4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80133a2:	f7ff fe02 	bl	8012faa <USBD_GetString>
  return USBD_StrDesc;
 80133a6:	4b02      	ldr	r3, [pc, #8]	@ (80133b0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80133a8:	4618      	mov	r0, r3
 80133aa:	3708      	adds	r7, #8
 80133ac:	46bd      	mov	sp, r7
 80133ae:	bd80      	pop	{r7, pc}
 80133b0:	2000479c 	.word	0x2000479c
 80133b4:	08018370 	.word	0x08018370

080133b8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80133b8:	b580      	push	{r7, lr}
 80133ba:	b082      	sub	sp, #8
 80133bc:	af00      	add	r7, sp, #0
 80133be:	4603      	mov	r3, r0
 80133c0:	6039      	str	r1, [r7, #0]
 80133c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80133c4:	683b      	ldr	r3, [r7, #0]
 80133c6:	221a      	movs	r2, #26
 80133c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80133ca:	f000 f843 	bl	8013454 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80133ce:	4b02      	ldr	r3, [pc, #8]	@ (80133d8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80133d0:	4618      	mov	r0, r3
 80133d2:	3708      	adds	r7, #8
 80133d4:	46bd      	mov	sp, r7
 80133d6:	bd80      	pop	{r7, pc}
 80133d8:	200001ac 	.word	0x200001ac

080133dc <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80133dc:	b580      	push	{r7, lr}
 80133de:	b082      	sub	sp, #8
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	4603      	mov	r3, r0
 80133e4:	6039      	str	r1, [r7, #0]
 80133e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80133e8:	79fb      	ldrb	r3, [r7, #7]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d105      	bne.n	80133fa <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80133ee:	683a      	ldr	r2, [r7, #0]
 80133f0:	4907      	ldr	r1, [pc, #28]	@ (8013410 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80133f2:	4808      	ldr	r0, [pc, #32]	@ (8013414 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80133f4:	f7ff fdd9 	bl	8012faa <USBD_GetString>
 80133f8:	e004      	b.n	8013404 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80133fa:	683a      	ldr	r2, [r7, #0]
 80133fc:	4904      	ldr	r1, [pc, #16]	@ (8013410 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80133fe:	4805      	ldr	r0, [pc, #20]	@ (8013414 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8013400:	f7ff fdd3 	bl	8012faa <USBD_GetString>
  }
  return USBD_StrDesc;
 8013404:	4b02      	ldr	r3, [pc, #8]	@ (8013410 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8013406:	4618      	mov	r0, r3
 8013408:	3708      	adds	r7, #8
 801340a:	46bd      	mov	sp, r7
 801340c:	bd80      	pop	{r7, pc}
 801340e:	bf00      	nop
 8013410:	2000479c 	.word	0x2000479c
 8013414:	08018384 	.word	0x08018384

08013418 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013418:	b580      	push	{r7, lr}
 801341a:	b082      	sub	sp, #8
 801341c:	af00      	add	r7, sp, #0
 801341e:	4603      	mov	r3, r0
 8013420:	6039      	str	r1, [r7, #0]
 8013422:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013424:	79fb      	ldrb	r3, [r7, #7]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d105      	bne.n	8013436 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801342a:	683a      	ldr	r2, [r7, #0]
 801342c:	4907      	ldr	r1, [pc, #28]	@ (801344c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801342e:	4808      	ldr	r0, [pc, #32]	@ (8013450 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8013430:	f7ff fdbb 	bl	8012faa <USBD_GetString>
 8013434:	e004      	b.n	8013440 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8013436:	683a      	ldr	r2, [r7, #0]
 8013438:	4904      	ldr	r1, [pc, #16]	@ (801344c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801343a:	4805      	ldr	r0, [pc, #20]	@ (8013450 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801343c:	f7ff fdb5 	bl	8012faa <USBD_GetString>
  }
  return USBD_StrDesc;
 8013440:	4b02      	ldr	r3, [pc, #8]	@ (801344c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8013442:	4618      	mov	r0, r3
 8013444:	3708      	adds	r7, #8
 8013446:	46bd      	mov	sp, r7
 8013448:	bd80      	pop	{r7, pc}
 801344a:	bf00      	nop
 801344c:	2000479c 	.word	0x2000479c
 8013450:	08018390 	.word	0x08018390

08013454 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8013454:	b580      	push	{r7, lr}
 8013456:	b084      	sub	sp, #16
 8013458:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801345a:	4b0f      	ldr	r3, [pc, #60]	@ (8013498 <Get_SerialNum+0x44>)
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013460:	4b0e      	ldr	r3, [pc, #56]	@ (801349c <Get_SerialNum+0x48>)
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8013466:	4b0e      	ldr	r3, [pc, #56]	@ (80134a0 <Get_SerialNum+0x4c>)
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801346c:	68fa      	ldr	r2, [r7, #12]
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	4413      	add	r3, r2
 8013472:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d009      	beq.n	801348e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801347a:	2208      	movs	r2, #8
 801347c:	4909      	ldr	r1, [pc, #36]	@ (80134a4 <Get_SerialNum+0x50>)
 801347e:	68f8      	ldr	r0, [r7, #12]
 8013480:	f000 f814 	bl	80134ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013484:	2204      	movs	r2, #4
 8013486:	4908      	ldr	r1, [pc, #32]	@ (80134a8 <Get_SerialNum+0x54>)
 8013488:	68b8      	ldr	r0, [r7, #8]
 801348a:	f000 f80f 	bl	80134ac <IntToUnicode>
  }
}
 801348e:	bf00      	nop
 8013490:	3710      	adds	r7, #16
 8013492:	46bd      	mov	sp, r7
 8013494:	bd80      	pop	{r7, pc}
 8013496:	bf00      	nop
 8013498:	1fff7590 	.word	0x1fff7590
 801349c:	1fff7594 	.word	0x1fff7594
 80134a0:	1fff7598 	.word	0x1fff7598
 80134a4:	200001ae 	.word	0x200001ae
 80134a8:	200001be 	.word	0x200001be

080134ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80134ac:	b480      	push	{r7}
 80134ae:	b087      	sub	sp, #28
 80134b0:	af00      	add	r7, sp, #0
 80134b2:	60f8      	str	r0, [r7, #12]
 80134b4:	60b9      	str	r1, [r7, #8]
 80134b6:	4613      	mov	r3, r2
 80134b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80134ba:	2300      	movs	r3, #0
 80134bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80134be:	2300      	movs	r3, #0
 80134c0:	75fb      	strb	r3, [r7, #23]
 80134c2:	e027      	b.n	8013514 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	0f1b      	lsrs	r3, r3, #28
 80134c8:	2b09      	cmp	r3, #9
 80134ca:	d80b      	bhi.n	80134e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	0f1b      	lsrs	r3, r3, #28
 80134d0:	b2da      	uxtb	r2, r3
 80134d2:	7dfb      	ldrb	r3, [r7, #23]
 80134d4:	005b      	lsls	r3, r3, #1
 80134d6:	4619      	mov	r1, r3
 80134d8:	68bb      	ldr	r3, [r7, #8]
 80134da:	440b      	add	r3, r1
 80134dc:	3230      	adds	r2, #48	@ 0x30
 80134de:	b2d2      	uxtb	r2, r2
 80134e0:	701a      	strb	r2, [r3, #0]
 80134e2:	e00a      	b.n	80134fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	0f1b      	lsrs	r3, r3, #28
 80134e8:	b2da      	uxtb	r2, r3
 80134ea:	7dfb      	ldrb	r3, [r7, #23]
 80134ec:	005b      	lsls	r3, r3, #1
 80134ee:	4619      	mov	r1, r3
 80134f0:	68bb      	ldr	r3, [r7, #8]
 80134f2:	440b      	add	r3, r1
 80134f4:	3237      	adds	r2, #55	@ 0x37
 80134f6:	b2d2      	uxtb	r2, r2
 80134f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	011b      	lsls	r3, r3, #4
 80134fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8013500:	7dfb      	ldrb	r3, [r7, #23]
 8013502:	005b      	lsls	r3, r3, #1
 8013504:	3301      	adds	r3, #1
 8013506:	68ba      	ldr	r2, [r7, #8]
 8013508:	4413      	add	r3, r2
 801350a:	2200      	movs	r2, #0
 801350c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801350e:	7dfb      	ldrb	r3, [r7, #23]
 8013510:	3301      	adds	r3, #1
 8013512:	75fb      	strb	r3, [r7, #23]
 8013514:	7dfa      	ldrb	r2, [r7, #23]
 8013516:	79fb      	ldrb	r3, [r7, #7]
 8013518:	429a      	cmp	r2, r3
 801351a:	d3d3      	bcc.n	80134c4 <IntToUnicode+0x18>
  }
}
 801351c:	bf00      	nop
 801351e:	bf00      	nop
 8013520:	371c      	adds	r7, #28
 8013522:	46bd      	mov	sp, r7
 8013524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013528:	4770      	bx	lr
	...

0801352c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801352c:	b580      	push	{r7, lr}
 801352e:	b098      	sub	sp, #96	@ 0x60
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8013534:	f107 030c 	add.w	r3, r7, #12
 8013538:	2254      	movs	r2, #84	@ 0x54
 801353a:	2100      	movs	r1, #0
 801353c:	4618      	mov	r0, r3
 801353e:	f001 fa9c 	bl	8014a7a <memset>
  if(pcdHandle->Instance==USB)
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	4a15      	ldr	r2, [pc, #84]	@ (801359c <HAL_PCD_MspInit+0x70>)
 8013548:	4293      	cmp	r3, r2
 801354a:	d122      	bne.n	8013592 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801354c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8013550:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8013552:	2300      	movs	r3, #0
 8013554:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8013556:	f107 030c 	add.w	r3, r7, #12
 801355a:	4618      	mov	r0, r3
 801355c:	f7f8 fe7e 	bl	800c25c <HAL_RCCEx_PeriphCLKConfig>
 8013560:	4603      	mov	r3, r0
 8013562:	2b00      	cmp	r3, #0
 8013564:	d001      	beq.n	801356a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8013566:	f7ef fb29 	bl	8002bbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801356a:	4b0d      	ldr	r3, [pc, #52]	@ (80135a0 <HAL_PCD_MspInit+0x74>)
 801356c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801356e:	4a0c      	ldr	r2, [pc, #48]	@ (80135a0 <HAL_PCD_MspInit+0x74>)
 8013570:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8013574:	6593      	str	r3, [r2, #88]	@ 0x58
 8013576:	4b0a      	ldr	r3, [pc, #40]	@ (80135a0 <HAL_PCD_MspInit+0x74>)
 8013578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801357a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801357e:	60bb      	str	r3, [r7, #8]
 8013580:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8013582:	2200      	movs	r2, #0
 8013584:	2100      	movs	r1, #0
 8013586:	2014      	movs	r0, #20
 8013588:	f7f3 fe6d 	bl	8007266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 801358c:	2014      	movs	r0, #20
 801358e:	f7f3 fe84 	bl	800729a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8013592:	bf00      	nop
 8013594:	3760      	adds	r7, #96	@ 0x60
 8013596:	46bd      	mov	sp, r7
 8013598:	bd80      	pop	{r7, pc}
 801359a:	bf00      	nop
 801359c:	40005c00 	.word	0x40005c00
 80135a0:	40021000 	.word	0x40021000

080135a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80135a4:	b580      	push	{r7, lr}
 80135a6:	b082      	sub	sp, #8
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80135b8:	4619      	mov	r1, r3
 80135ba:	4610      	mov	r0, r2
 80135bc:	f7fe fd58 	bl	8012070 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80135c0:	bf00      	nop
 80135c2:	3708      	adds	r7, #8
 80135c4:	46bd      	mov	sp, r7
 80135c6:	bd80      	pop	{r7, pc}

080135c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b082      	sub	sp, #8
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	6078      	str	r0, [r7, #4]
 80135d0:	460b      	mov	r3, r1
 80135d2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80135da:	78fa      	ldrb	r2, [r7, #3]
 80135dc:	6879      	ldr	r1, [r7, #4]
 80135de:	4613      	mov	r3, r2
 80135e0:	009b      	lsls	r3, r3, #2
 80135e2:	4413      	add	r3, r2
 80135e4:	00db      	lsls	r3, r3, #3
 80135e6:	440b      	add	r3, r1
 80135e8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80135ec:	681a      	ldr	r2, [r3, #0]
 80135ee:	78fb      	ldrb	r3, [r7, #3]
 80135f0:	4619      	mov	r1, r3
 80135f2:	f7fe fd92 	bl	801211a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80135f6:	bf00      	nop
 80135f8:	3708      	adds	r7, #8
 80135fa:	46bd      	mov	sp, r7
 80135fc:	bd80      	pop	{r7, pc}

080135fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80135fe:	b580      	push	{r7, lr}
 8013600:	b082      	sub	sp, #8
 8013602:	af00      	add	r7, sp, #0
 8013604:	6078      	str	r0, [r7, #4]
 8013606:	460b      	mov	r3, r1
 8013608:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8013610:	78fa      	ldrb	r2, [r7, #3]
 8013612:	6879      	ldr	r1, [r7, #4]
 8013614:	4613      	mov	r3, r2
 8013616:	009b      	lsls	r3, r3, #2
 8013618:	4413      	add	r3, r2
 801361a:	00db      	lsls	r3, r3, #3
 801361c:	440b      	add	r3, r1
 801361e:	3324      	adds	r3, #36	@ 0x24
 8013620:	681a      	ldr	r2, [r3, #0]
 8013622:	78fb      	ldrb	r3, [r7, #3]
 8013624:	4619      	mov	r1, r3
 8013626:	f7fe fddb 	bl	80121e0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801362a:	bf00      	nop
 801362c:	3708      	adds	r7, #8
 801362e:	46bd      	mov	sp, r7
 8013630:	bd80      	pop	{r7, pc}

08013632 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013632:	b580      	push	{r7, lr}
 8013634:	b082      	sub	sp, #8
 8013636:	af00      	add	r7, sp, #0
 8013638:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013640:	4618      	mov	r0, r3
 8013642:	f7fe feef 	bl	8012424 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8013646:	bf00      	nop
 8013648:	3708      	adds	r7, #8
 801364a:	46bd      	mov	sp, r7
 801364c:	bd80      	pop	{r7, pc}

0801364e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801364e:	b580      	push	{r7, lr}
 8013650:	b084      	sub	sp, #16
 8013652:	af00      	add	r7, sp, #0
 8013654:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013656:	2301      	movs	r3, #1
 8013658:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	795b      	ldrb	r3, [r3, #5]
 801365e:	2b02      	cmp	r3, #2
 8013660:	d001      	beq.n	8013666 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8013662:	f7ef faab 	bl	8002bbc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801366c:	7bfa      	ldrb	r2, [r7, #15]
 801366e:	4611      	mov	r1, r2
 8013670:	4618      	mov	r0, r3
 8013672:	f7fe fe99 	bl	80123a8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801367c:	4618      	mov	r0, r3
 801367e:	f7fe fe45 	bl	801230c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8013682:	bf00      	nop
 8013684:	3710      	adds	r7, #16
 8013686:	46bd      	mov	sp, r7
 8013688:	bd80      	pop	{r7, pc}
	...

0801368c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801368c:	b580      	push	{r7, lr}
 801368e:	b082      	sub	sp, #8
 8013690:	af00      	add	r7, sp, #0
 8013692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801369a:	4618      	mov	r0, r3
 801369c:	f7fe fe94 	bl	80123c8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	7a5b      	ldrb	r3, [r3, #9]
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d005      	beq.n	80136b4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80136a8:	4b04      	ldr	r3, [pc, #16]	@ (80136bc <HAL_PCD_SuspendCallback+0x30>)
 80136aa:	691b      	ldr	r3, [r3, #16]
 80136ac:	4a03      	ldr	r2, [pc, #12]	@ (80136bc <HAL_PCD_SuspendCallback+0x30>)
 80136ae:	f043 0306 	orr.w	r3, r3, #6
 80136b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80136b4:	bf00      	nop
 80136b6:	3708      	adds	r7, #8
 80136b8:	46bd      	mov	sp, r7
 80136ba:	bd80      	pop	{r7, pc}
 80136bc:	e000ed00 	.word	0xe000ed00

080136c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80136c0:	b580      	push	{r7, lr}
 80136c2:	b082      	sub	sp, #8
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	7a5b      	ldrb	r3, [r3, #9]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d007      	beq.n	80136e0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80136d0:	4b08      	ldr	r3, [pc, #32]	@ (80136f4 <HAL_PCD_ResumeCallback+0x34>)
 80136d2:	691b      	ldr	r3, [r3, #16]
 80136d4:	4a07      	ldr	r2, [pc, #28]	@ (80136f4 <HAL_PCD_ResumeCallback+0x34>)
 80136d6:	f023 0306 	bic.w	r3, r3, #6
 80136da:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80136dc:	f000 f9f8 	bl	8013ad0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80136e6:	4618      	mov	r0, r3
 80136e8:	f7fe fe84 	bl	80123f4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80136ec:	bf00      	nop
 80136ee:	3708      	adds	r7, #8
 80136f0:	46bd      	mov	sp, r7
 80136f2:	bd80      	pop	{r7, pc}
 80136f4:	e000ed00 	.word	0xe000ed00

080136f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80136f8:	b580      	push	{r7, lr}
 80136fa:	b082      	sub	sp, #8
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8013700:	4a2b      	ldr	r2, [pc, #172]	@ (80137b0 <USBD_LL_Init+0xb8>)
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	4a29      	ldr	r2, [pc, #164]	@ (80137b0 <USBD_LL_Init+0xb8>)
 801370c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8013710:	4b27      	ldr	r3, [pc, #156]	@ (80137b0 <USBD_LL_Init+0xb8>)
 8013712:	4a28      	ldr	r2, [pc, #160]	@ (80137b4 <USBD_LL_Init+0xbc>)
 8013714:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8013716:	4b26      	ldr	r3, [pc, #152]	@ (80137b0 <USBD_LL_Init+0xb8>)
 8013718:	2208      	movs	r2, #8
 801371a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801371c:	4b24      	ldr	r3, [pc, #144]	@ (80137b0 <USBD_LL_Init+0xb8>)
 801371e:	2202      	movs	r2, #2
 8013720:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8013722:	4b23      	ldr	r3, [pc, #140]	@ (80137b0 <USBD_LL_Init+0xb8>)
 8013724:	2202      	movs	r2, #2
 8013726:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8013728:	4b21      	ldr	r3, [pc, #132]	@ (80137b0 <USBD_LL_Init+0xb8>)
 801372a:	2200      	movs	r2, #0
 801372c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801372e:	4b20      	ldr	r3, [pc, #128]	@ (80137b0 <USBD_LL_Init+0xb8>)
 8013730:	2200      	movs	r2, #0
 8013732:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8013734:	4b1e      	ldr	r3, [pc, #120]	@ (80137b0 <USBD_LL_Init+0xb8>)
 8013736:	2200      	movs	r2, #0
 8013738:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801373a:	4b1d      	ldr	r3, [pc, #116]	@ (80137b0 <USBD_LL_Init+0xb8>)
 801373c:	2200      	movs	r2, #0
 801373e:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8013740:	481b      	ldr	r0, [pc, #108]	@ (80137b0 <USBD_LL_Init+0xb8>)
 8013742:	f7f6 fa7b 	bl	8009c3c <HAL_PCD_Init>
 8013746:	4603      	mov	r3, r0
 8013748:	2b00      	cmp	r3, #0
 801374a:	d001      	beq.n	8013750 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 801374c:	f7ef fa36 	bl	8002bbc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8013756:	2318      	movs	r3, #24
 8013758:	2200      	movs	r2, #0
 801375a:	2100      	movs	r1, #0
 801375c:	f7f7 ff02 	bl	800b564 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8013766:	2358      	movs	r3, #88	@ 0x58
 8013768:	2200      	movs	r2, #0
 801376a:	2180      	movs	r1, #128	@ 0x80
 801376c:	f7f7 fefa 	bl	800b564 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8013776:	23c0      	movs	r3, #192	@ 0xc0
 8013778:	2200      	movs	r2, #0
 801377a:	2181      	movs	r1, #129	@ 0x81
 801377c:	f7f7 fef2 	bl	800b564 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8013786:	f44f 7388 	mov.w	r3, #272	@ 0x110
 801378a:	2200      	movs	r2, #0
 801378c:	2101      	movs	r1, #1
 801378e:	f7f7 fee9 	bl	800b564 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8013798:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801379c:	2200      	movs	r2, #0
 801379e:	2182      	movs	r1, #130	@ 0x82
 80137a0:	f7f7 fee0 	bl	800b564 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80137a4:	2300      	movs	r3, #0
}
 80137a6:	4618      	mov	r0, r3
 80137a8:	3708      	adds	r7, #8
 80137aa:	46bd      	mov	sp, r7
 80137ac:	bd80      	pop	{r7, pc}
 80137ae:	bf00      	nop
 80137b0:	2000499c 	.word	0x2000499c
 80137b4:	40005c00 	.word	0x40005c00

080137b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80137b8:	b580      	push	{r7, lr}
 80137ba:	b084      	sub	sp, #16
 80137bc:	af00      	add	r7, sp, #0
 80137be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80137c0:	2300      	movs	r3, #0
 80137c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80137c4:	2300      	movs	r3, #0
 80137c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80137ce:	4618      	mov	r0, r3
 80137d0:	f7f6 fb02 	bl	8009dd8 <HAL_PCD_Start>
 80137d4:	4603      	mov	r3, r0
 80137d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80137d8:	7bfb      	ldrb	r3, [r7, #15]
 80137da:	4618      	mov	r0, r3
 80137dc:	f000 f97e 	bl	8013adc <USBD_Get_USB_Status>
 80137e0:	4603      	mov	r3, r0
 80137e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80137e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80137e6:	4618      	mov	r0, r3
 80137e8:	3710      	adds	r7, #16
 80137ea:	46bd      	mov	sp, r7
 80137ec:	bd80      	pop	{r7, pc}

080137ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80137ee:	b580      	push	{r7, lr}
 80137f0:	b084      	sub	sp, #16
 80137f2:	af00      	add	r7, sp, #0
 80137f4:	6078      	str	r0, [r7, #4]
 80137f6:	4608      	mov	r0, r1
 80137f8:	4611      	mov	r1, r2
 80137fa:	461a      	mov	r2, r3
 80137fc:	4603      	mov	r3, r0
 80137fe:	70fb      	strb	r3, [r7, #3]
 8013800:	460b      	mov	r3, r1
 8013802:	70bb      	strb	r3, [r7, #2]
 8013804:	4613      	mov	r3, r2
 8013806:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013808:	2300      	movs	r3, #0
 801380a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801380c:	2300      	movs	r3, #0
 801380e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8013816:	78bb      	ldrb	r3, [r7, #2]
 8013818:	883a      	ldrh	r2, [r7, #0]
 801381a:	78f9      	ldrb	r1, [r7, #3]
 801381c:	f7f6 fc49 	bl	800a0b2 <HAL_PCD_EP_Open>
 8013820:	4603      	mov	r3, r0
 8013822:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013824:	7bfb      	ldrb	r3, [r7, #15]
 8013826:	4618      	mov	r0, r3
 8013828:	f000 f958 	bl	8013adc <USBD_Get_USB_Status>
 801382c:	4603      	mov	r3, r0
 801382e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013830:	7bbb      	ldrb	r3, [r7, #14]
}
 8013832:	4618      	mov	r0, r3
 8013834:	3710      	adds	r7, #16
 8013836:	46bd      	mov	sp, r7
 8013838:	bd80      	pop	{r7, pc}

0801383a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801383a:	b580      	push	{r7, lr}
 801383c:	b084      	sub	sp, #16
 801383e:	af00      	add	r7, sp, #0
 8013840:	6078      	str	r0, [r7, #4]
 8013842:	460b      	mov	r3, r1
 8013844:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013846:	2300      	movs	r3, #0
 8013848:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801384a:	2300      	movs	r3, #0
 801384c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8013854:	78fa      	ldrb	r2, [r7, #3]
 8013856:	4611      	mov	r1, r2
 8013858:	4618      	mov	r0, r3
 801385a:	f7f6 fc89 	bl	800a170 <HAL_PCD_EP_Close>
 801385e:	4603      	mov	r3, r0
 8013860:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013862:	7bfb      	ldrb	r3, [r7, #15]
 8013864:	4618      	mov	r0, r3
 8013866:	f000 f939 	bl	8013adc <USBD_Get_USB_Status>
 801386a:	4603      	mov	r3, r0
 801386c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801386e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013870:	4618      	mov	r0, r3
 8013872:	3710      	adds	r7, #16
 8013874:	46bd      	mov	sp, r7
 8013876:	bd80      	pop	{r7, pc}

08013878 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013878:	b580      	push	{r7, lr}
 801387a:	b084      	sub	sp, #16
 801387c:	af00      	add	r7, sp, #0
 801387e:	6078      	str	r0, [r7, #4]
 8013880:	460b      	mov	r3, r1
 8013882:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013884:	2300      	movs	r3, #0
 8013886:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013888:	2300      	movs	r3, #0
 801388a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8013892:	78fa      	ldrb	r2, [r7, #3]
 8013894:	4611      	mov	r1, r2
 8013896:	4618      	mov	r0, r3
 8013898:	f7f6 fd32 	bl	800a300 <HAL_PCD_EP_SetStall>
 801389c:	4603      	mov	r3, r0
 801389e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80138a0:	7bfb      	ldrb	r3, [r7, #15]
 80138a2:	4618      	mov	r0, r3
 80138a4:	f000 f91a 	bl	8013adc <USBD_Get_USB_Status>
 80138a8:	4603      	mov	r3, r0
 80138aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80138ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80138ae:	4618      	mov	r0, r3
 80138b0:	3710      	adds	r7, #16
 80138b2:	46bd      	mov	sp, r7
 80138b4:	bd80      	pop	{r7, pc}

080138b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80138b6:	b580      	push	{r7, lr}
 80138b8:	b084      	sub	sp, #16
 80138ba:	af00      	add	r7, sp, #0
 80138bc:	6078      	str	r0, [r7, #4]
 80138be:	460b      	mov	r3, r1
 80138c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80138c2:	2300      	movs	r3, #0
 80138c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80138c6:	2300      	movs	r3, #0
 80138c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80138d0:	78fa      	ldrb	r2, [r7, #3]
 80138d2:	4611      	mov	r1, r2
 80138d4:	4618      	mov	r0, r3
 80138d6:	f7f6 fd65 	bl	800a3a4 <HAL_PCD_EP_ClrStall>
 80138da:	4603      	mov	r3, r0
 80138dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80138de:	7bfb      	ldrb	r3, [r7, #15]
 80138e0:	4618      	mov	r0, r3
 80138e2:	f000 f8fb 	bl	8013adc <USBD_Get_USB_Status>
 80138e6:	4603      	mov	r3, r0
 80138e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80138ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80138ec:	4618      	mov	r0, r3
 80138ee:	3710      	adds	r7, #16
 80138f0:	46bd      	mov	sp, r7
 80138f2:	bd80      	pop	{r7, pc}

080138f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80138f4:	b480      	push	{r7}
 80138f6:	b085      	sub	sp, #20
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	6078      	str	r0, [r7, #4]
 80138fc:	460b      	mov	r3, r1
 80138fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8013906:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013908:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801390c:	2b00      	cmp	r3, #0
 801390e:	da0b      	bge.n	8013928 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013910:	78fb      	ldrb	r3, [r7, #3]
 8013912:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013916:	68f9      	ldr	r1, [r7, #12]
 8013918:	4613      	mov	r3, r2
 801391a:	009b      	lsls	r3, r3, #2
 801391c:	4413      	add	r3, r2
 801391e:	00db      	lsls	r3, r3, #3
 8013920:	440b      	add	r3, r1
 8013922:	3312      	adds	r3, #18
 8013924:	781b      	ldrb	r3, [r3, #0]
 8013926:	e00b      	b.n	8013940 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013928:	78fb      	ldrb	r3, [r7, #3]
 801392a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801392e:	68f9      	ldr	r1, [r7, #12]
 8013930:	4613      	mov	r3, r2
 8013932:	009b      	lsls	r3, r3, #2
 8013934:	4413      	add	r3, r2
 8013936:	00db      	lsls	r3, r3, #3
 8013938:	440b      	add	r3, r1
 801393a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 801393e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013940:	4618      	mov	r0, r3
 8013942:	3714      	adds	r7, #20
 8013944:	46bd      	mov	sp, r7
 8013946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801394a:	4770      	bx	lr

0801394c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801394c:	b580      	push	{r7, lr}
 801394e:	b084      	sub	sp, #16
 8013950:	af00      	add	r7, sp, #0
 8013952:	6078      	str	r0, [r7, #4]
 8013954:	460b      	mov	r3, r1
 8013956:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013958:	2300      	movs	r3, #0
 801395a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801395c:	2300      	movs	r3, #0
 801395e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8013966:	78fa      	ldrb	r2, [r7, #3]
 8013968:	4611      	mov	r1, r2
 801396a:	4618      	mov	r0, r3
 801396c:	f7f6 fb7d 	bl	800a06a <HAL_PCD_SetAddress>
 8013970:	4603      	mov	r3, r0
 8013972:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013974:	7bfb      	ldrb	r3, [r7, #15]
 8013976:	4618      	mov	r0, r3
 8013978:	f000 f8b0 	bl	8013adc <USBD_Get_USB_Status>
 801397c:	4603      	mov	r3, r0
 801397e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013980:	7bbb      	ldrb	r3, [r7, #14]
}
 8013982:	4618      	mov	r0, r3
 8013984:	3710      	adds	r7, #16
 8013986:	46bd      	mov	sp, r7
 8013988:	bd80      	pop	{r7, pc}

0801398a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801398a:	b580      	push	{r7, lr}
 801398c:	b086      	sub	sp, #24
 801398e:	af00      	add	r7, sp, #0
 8013990:	60f8      	str	r0, [r7, #12]
 8013992:	607a      	str	r2, [r7, #4]
 8013994:	603b      	str	r3, [r7, #0]
 8013996:	460b      	mov	r3, r1
 8013998:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801399a:	2300      	movs	r3, #0
 801399c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801399e:	2300      	movs	r3, #0
 80139a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80139a8:	7af9      	ldrb	r1, [r7, #11]
 80139aa:	683b      	ldr	r3, [r7, #0]
 80139ac:	687a      	ldr	r2, [r7, #4]
 80139ae:	f7f6 fc70 	bl	800a292 <HAL_PCD_EP_Transmit>
 80139b2:	4603      	mov	r3, r0
 80139b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80139b6:	7dfb      	ldrb	r3, [r7, #23]
 80139b8:	4618      	mov	r0, r3
 80139ba:	f000 f88f 	bl	8013adc <USBD_Get_USB_Status>
 80139be:	4603      	mov	r3, r0
 80139c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80139c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80139c4:	4618      	mov	r0, r3
 80139c6:	3718      	adds	r7, #24
 80139c8:	46bd      	mov	sp, r7
 80139ca:	bd80      	pop	{r7, pc}

080139cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b086      	sub	sp, #24
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	60f8      	str	r0, [r7, #12]
 80139d4:	607a      	str	r2, [r7, #4]
 80139d6:	603b      	str	r3, [r7, #0]
 80139d8:	460b      	mov	r3, r1
 80139da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80139dc:	2300      	movs	r3, #0
 80139de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80139e0:	2300      	movs	r3, #0
 80139e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80139ea:	7af9      	ldrb	r1, [r7, #11]
 80139ec:	683b      	ldr	r3, [r7, #0]
 80139ee:	687a      	ldr	r2, [r7, #4]
 80139f0:	f7f6 fc06 	bl	800a200 <HAL_PCD_EP_Receive>
 80139f4:	4603      	mov	r3, r0
 80139f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80139f8:	7dfb      	ldrb	r3, [r7, #23]
 80139fa:	4618      	mov	r0, r3
 80139fc:	f000 f86e 	bl	8013adc <USBD_Get_USB_Status>
 8013a00:	4603      	mov	r3, r0
 8013a02:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013a04:	7dbb      	ldrb	r3, [r7, #22]
}
 8013a06:	4618      	mov	r0, r3
 8013a08:	3718      	adds	r7, #24
 8013a0a:	46bd      	mov	sp, r7
 8013a0c:	bd80      	pop	{r7, pc}

08013a0e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013a0e:	b580      	push	{r7, lr}
 8013a10:	b082      	sub	sp, #8
 8013a12:	af00      	add	r7, sp, #0
 8013a14:	6078      	str	r0, [r7, #4]
 8013a16:	460b      	mov	r3, r1
 8013a18:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8013a20:	78fa      	ldrb	r2, [r7, #3]
 8013a22:	4611      	mov	r1, r2
 8013a24:	4618      	mov	r0, r3
 8013a26:	f7f6 fc1c 	bl	800a262 <HAL_PCD_EP_GetRxCount>
 8013a2a:	4603      	mov	r3, r0
}
 8013a2c:	4618      	mov	r0, r3
 8013a2e:	3708      	adds	r7, #8
 8013a30:	46bd      	mov	sp, r7
 8013a32:	bd80      	pop	{r7, pc}

08013a34 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b082      	sub	sp, #8
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	6078      	str	r0, [r7, #4]
 8013a3c:	460b      	mov	r3, r1
 8013a3e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8013a40:	78fb      	ldrb	r3, [r7, #3]
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d002      	beq.n	8013a4c <HAL_PCDEx_LPM_Callback+0x18>
 8013a46:	2b01      	cmp	r3, #1
 8013a48:	d013      	beq.n	8013a72 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8013a4a:	e023      	b.n	8013a94 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	7a5b      	ldrb	r3, [r3, #9]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d007      	beq.n	8013a64 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8013a54:	f000 f83c 	bl	8013ad0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013a58:	4b10      	ldr	r3, [pc, #64]	@ (8013a9c <HAL_PCDEx_LPM_Callback+0x68>)
 8013a5a:	691b      	ldr	r3, [r3, #16]
 8013a5c:	4a0f      	ldr	r2, [pc, #60]	@ (8013a9c <HAL_PCDEx_LPM_Callback+0x68>)
 8013a5e:	f023 0306 	bic.w	r3, r3, #6
 8013a62:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013a6a:	4618      	mov	r0, r3
 8013a6c:	f7fe fcc2 	bl	80123f4 <USBD_LL_Resume>
    break;
 8013a70:	e010      	b.n	8013a94 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013a78:	4618      	mov	r0, r3
 8013a7a:	f7fe fca5 	bl	80123c8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	7a5b      	ldrb	r3, [r3, #9]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d005      	beq.n	8013a92 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013a86:	4b05      	ldr	r3, [pc, #20]	@ (8013a9c <HAL_PCDEx_LPM_Callback+0x68>)
 8013a88:	691b      	ldr	r3, [r3, #16]
 8013a8a:	4a04      	ldr	r2, [pc, #16]	@ (8013a9c <HAL_PCDEx_LPM_Callback+0x68>)
 8013a8c:	f043 0306 	orr.w	r3, r3, #6
 8013a90:	6113      	str	r3, [r2, #16]
    break;
 8013a92:	bf00      	nop
}
 8013a94:	bf00      	nop
 8013a96:	3708      	adds	r7, #8
 8013a98:	46bd      	mov	sp, r7
 8013a9a:	bd80      	pop	{r7, pc}
 8013a9c:	e000ed00 	.word	0xe000ed00

08013aa0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013aa0:	b480      	push	{r7}
 8013aa2:	b083      	sub	sp, #12
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013aa8:	4b03      	ldr	r3, [pc, #12]	@ (8013ab8 <USBD_static_malloc+0x18>)
}
 8013aaa:	4618      	mov	r0, r3
 8013aac:	370c      	adds	r7, #12
 8013aae:	46bd      	mov	sp, r7
 8013ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab4:	4770      	bx	lr
 8013ab6:	bf00      	nop
 8013ab8:	20004c78 	.word	0x20004c78

08013abc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013abc:	b480      	push	{r7}
 8013abe:	b083      	sub	sp, #12
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	6078      	str	r0, [r7, #4]

}
 8013ac4:	bf00      	nop
 8013ac6:	370c      	adds	r7, #12
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ace:	4770      	bx	lr

08013ad0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8013ad4:	f7ed fe4e 	bl	8001774 <SystemClock_Config>
}
 8013ad8:	bf00      	nop
 8013ada:	bd80      	pop	{r7, pc}

08013adc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013adc:	b480      	push	{r7}
 8013ade:	b085      	sub	sp, #20
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	4603      	mov	r3, r0
 8013ae4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013aea:	79fb      	ldrb	r3, [r7, #7]
 8013aec:	2b03      	cmp	r3, #3
 8013aee:	d817      	bhi.n	8013b20 <USBD_Get_USB_Status+0x44>
 8013af0:	a201      	add	r2, pc, #4	@ (adr r2, 8013af8 <USBD_Get_USB_Status+0x1c>)
 8013af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013af6:	bf00      	nop
 8013af8:	08013b09 	.word	0x08013b09
 8013afc:	08013b0f 	.word	0x08013b0f
 8013b00:	08013b15 	.word	0x08013b15
 8013b04:	08013b1b 	.word	0x08013b1b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013b08:	2300      	movs	r3, #0
 8013b0a:	73fb      	strb	r3, [r7, #15]
    break;
 8013b0c:	e00b      	b.n	8013b26 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013b0e:	2303      	movs	r3, #3
 8013b10:	73fb      	strb	r3, [r7, #15]
    break;
 8013b12:	e008      	b.n	8013b26 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013b14:	2301      	movs	r3, #1
 8013b16:	73fb      	strb	r3, [r7, #15]
    break;
 8013b18:	e005      	b.n	8013b26 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013b1a:	2303      	movs	r3, #3
 8013b1c:	73fb      	strb	r3, [r7, #15]
    break;
 8013b1e:	e002      	b.n	8013b26 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013b20:	2303      	movs	r3, #3
 8013b22:	73fb      	strb	r3, [r7, #15]
    break;
 8013b24:	bf00      	nop
  }
  return usb_status;
 8013b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b28:	4618      	mov	r0, r3
 8013b2a:	3714      	adds	r7, #20
 8013b2c:	46bd      	mov	sp, r7
 8013b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b32:	4770      	bx	lr

08013b34 <__cvt>:
 8013b34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013b38:	ec57 6b10 	vmov	r6, r7, d0
 8013b3c:	2f00      	cmp	r7, #0
 8013b3e:	460c      	mov	r4, r1
 8013b40:	4619      	mov	r1, r3
 8013b42:	463b      	mov	r3, r7
 8013b44:	bfbb      	ittet	lt
 8013b46:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8013b4a:	461f      	movlt	r7, r3
 8013b4c:	2300      	movge	r3, #0
 8013b4e:	232d      	movlt	r3, #45	@ 0x2d
 8013b50:	700b      	strb	r3, [r1, #0]
 8013b52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013b54:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8013b58:	4691      	mov	r9, r2
 8013b5a:	f023 0820 	bic.w	r8, r3, #32
 8013b5e:	bfbc      	itt	lt
 8013b60:	4632      	movlt	r2, r6
 8013b62:	4616      	movlt	r6, r2
 8013b64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013b68:	d005      	beq.n	8013b76 <__cvt+0x42>
 8013b6a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8013b6e:	d100      	bne.n	8013b72 <__cvt+0x3e>
 8013b70:	3401      	adds	r4, #1
 8013b72:	2102      	movs	r1, #2
 8013b74:	e000      	b.n	8013b78 <__cvt+0x44>
 8013b76:	2103      	movs	r1, #3
 8013b78:	ab03      	add	r3, sp, #12
 8013b7a:	9301      	str	r3, [sp, #4]
 8013b7c:	ab02      	add	r3, sp, #8
 8013b7e:	9300      	str	r3, [sp, #0]
 8013b80:	ec47 6b10 	vmov	d0, r6, r7
 8013b84:	4653      	mov	r3, sl
 8013b86:	4622      	mov	r2, r4
 8013b88:	f001 f886 	bl	8014c98 <_dtoa_r>
 8013b8c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8013b90:	4605      	mov	r5, r0
 8013b92:	d119      	bne.n	8013bc8 <__cvt+0x94>
 8013b94:	f019 0f01 	tst.w	r9, #1
 8013b98:	d00e      	beq.n	8013bb8 <__cvt+0x84>
 8013b9a:	eb00 0904 	add.w	r9, r0, r4
 8013b9e:	2200      	movs	r2, #0
 8013ba0:	2300      	movs	r3, #0
 8013ba2:	4630      	mov	r0, r6
 8013ba4:	4639      	mov	r1, r7
 8013ba6:	f7ec ffb7 	bl	8000b18 <__aeabi_dcmpeq>
 8013baa:	b108      	cbz	r0, 8013bb0 <__cvt+0x7c>
 8013bac:	f8cd 900c 	str.w	r9, [sp, #12]
 8013bb0:	2230      	movs	r2, #48	@ 0x30
 8013bb2:	9b03      	ldr	r3, [sp, #12]
 8013bb4:	454b      	cmp	r3, r9
 8013bb6:	d31e      	bcc.n	8013bf6 <__cvt+0xc2>
 8013bb8:	9b03      	ldr	r3, [sp, #12]
 8013bba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013bbc:	1b5b      	subs	r3, r3, r5
 8013bbe:	4628      	mov	r0, r5
 8013bc0:	6013      	str	r3, [r2, #0]
 8013bc2:	b004      	add	sp, #16
 8013bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bc8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013bcc:	eb00 0904 	add.w	r9, r0, r4
 8013bd0:	d1e5      	bne.n	8013b9e <__cvt+0x6a>
 8013bd2:	7803      	ldrb	r3, [r0, #0]
 8013bd4:	2b30      	cmp	r3, #48	@ 0x30
 8013bd6:	d10a      	bne.n	8013bee <__cvt+0xba>
 8013bd8:	2200      	movs	r2, #0
 8013bda:	2300      	movs	r3, #0
 8013bdc:	4630      	mov	r0, r6
 8013bde:	4639      	mov	r1, r7
 8013be0:	f7ec ff9a 	bl	8000b18 <__aeabi_dcmpeq>
 8013be4:	b918      	cbnz	r0, 8013bee <__cvt+0xba>
 8013be6:	f1c4 0401 	rsb	r4, r4, #1
 8013bea:	f8ca 4000 	str.w	r4, [sl]
 8013bee:	f8da 3000 	ldr.w	r3, [sl]
 8013bf2:	4499      	add	r9, r3
 8013bf4:	e7d3      	b.n	8013b9e <__cvt+0x6a>
 8013bf6:	1c59      	adds	r1, r3, #1
 8013bf8:	9103      	str	r1, [sp, #12]
 8013bfa:	701a      	strb	r2, [r3, #0]
 8013bfc:	e7d9      	b.n	8013bb2 <__cvt+0x7e>

08013bfe <__exponent>:
 8013bfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013c00:	2900      	cmp	r1, #0
 8013c02:	bfba      	itte	lt
 8013c04:	4249      	neglt	r1, r1
 8013c06:	232d      	movlt	r3, #45	@ 0x2d
 8013c08:	232b      	movge	r3, #43	@ 0x2b
 8013c0a:	2909      	cmp	r1, #9
 8013c0c:	7002      	strb	r2, [r0, #0]
 8013c0e:	7043      	strb	r3, [r0, #1]
 8013c10:	dd29      	ble.n	8013c66 <__exponent+0x68>
 8013c12:	f10d 0307 	add.w	r3, sp, #7
 8013c16:	461d      	mov	r5, r3
 8013c18:	270a      	movs	r7, #10
 8013c1a:	461a      	mov	r2, r3
 8013c1c:	fbb1 f6f7 	udiv	r6, r1, r7
 8013c20:	fb07 1416 	mls	r4, r7, r6, r1
 8013c24:	3430      	adds	r4, #48	@ 0x30
 8013c26:	f802 4c01 	strb.w	r4, [r2, #-1]
 8013c2a:	460c      	mov	r4, r1
 8013c2c:	2c63      	cmp	r4, #99	@ 0x63
 8013c2e:	f103 33ff 	add.w	r3, r3, #4294967295
 8013c32:	4631      	mov	r1, r6
 8013c34:	dcf1      	bgt.n	8013c1a <__exponent+0x1c>
 8013c36:	3130      	adds	r1, #48	@ 0x30
 8013c38:	1e94      	subs	r4, r2, #2
 8013c3a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013c3e:	1c41      	adds	r1, r0, #1
 8013c40:	4623      	mov	r3, r4
 8013c42:	42ab      	cmp	r3, r5
 8013c44:	d30a      	bcc.n	8013c5c <__exponent+0x5e>
 8013c46:	f10d 0309 	add.w	r3, sp, #9
 8013c4a:	1a9b      	subs	r3, r3, r2
 8013c4c:	42ac      	cmp	r4, r5
 8013c4e:	bf88      	it	hi
 8013c50:	2300      	movhi	r3, #0
 8013c52:	3302      	adds	r3, #2
 8013c54:	4403      	add	r3, r0
 8013c56:	1a18      	subs	r0, r3, r0
 8013c58:	b003      	add	sp, #12
 8013c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c5c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8013c60:	f801 6f01 	strb.w	r6, [r1, #1]!
 8013c64:	e7ed      	b.n	8013c42 <__exponent+0x44>
 8013c66:	2330      	movs	r3, #48	@ 0x30
 8013c68:	3130      	adds	r1, #48	@ 0x30
 8013c6a:	7083      	strb	r3, [r0, #2]
 8013c6c:	70c1      	strb	r1, [r0, #3]
 8013c6e:	1d03      	adds	r3, r0, #4
 8013c70:	e7f1      	b.n	8013c56 <__exponent+0x58>
	...

08013c74 <_printf_float>:
 8013c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c78:	b08d      	sub	sp, #52	@ 0x34
 8013c7a:	460c      	mov	r4, r1
 8013c7c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8013c80:	4616      	mov	r6, r2
 8013c82:	461f      	mov	r7, r3
 8013c84:	4605      	mov	r5, r0
 8013c86:	f000 ff01 	bl	8014a8c <_localeconv_r>
 8013c8a:	6803      	ldr	r3, [r0, #0]
 8013c8c:	9304      	str	r3, [sp, #16]
 8013c8e:	4618      	mov	r0, r3
 8013c90:	f7ec fb16 	bl	80002c0 <strlen>
 8013c94:	2300      	movs	r3, #0
 8013c96:	930a      	str	r3, [sp, #40]	@ 0x28
 8013c98:	f8d8 3000 	ldr.w	r3, [r8]
 8013c9c:	9005      	str	r0, [sp, #20]
 8013c9e:	3307      	adds	r3, #7
 8013ca0:	f023 0307 	bic.w	r3, r3, #7
 8013ca4:	f103 0208 	add.w	r2, r3, #8
 8013ca8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013cac:	f8d4 b000 	ldr.w	fp, [r4]
 8013cb0:	f8c8 2000 	str.w	r2, [r8]
 8013cb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013cb8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8013cbc:	9307      	str	r3, [sp, #28]
 8013cbe:	f8cd 8018 	str.w	r8, [sp, #24]
 8013cc2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8013cc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013cca:	4b9c      	ldr	r3, [pc, #624]	@ (8013f3c <_printf_float+0x2c8>)
 8013ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8013cd0:	f7ec ff54 	bl	8000b7c <__aeabi_dcmpun>
 8013cd4:	bb70      	cbnz	r0, 8013d34 <_printf_float+0xc0>
 8013cd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013cda:	4b98      	ldr	r3, [pc, #608]	@ (8013f3c <_printf_float+0x2c8>)
 8013cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8013ce0:	f7ec ff2e 	bl	8000b40 <__aeabi_dcmple>
 8013ce4:	bb30      	cbnz	r0, 8013d34 <_printf_float+0xc0>
 8013ce6:	2200      	movs	r2, #0
 8013ce8:	2300      	movs	r3, #0
 8013cea:	4640      	mov	r0, r8
 8013cec:	4649      	mov	r1, r9
 8013cee:	f7ec ff1d 	bl	8000b2c <__aeabi_dcmplt>
 8013cf2:	b110      	cbz	r0, 8013cfa <_printf_float+0x86>
 8013cf4:	232d      	movs	r3, #45	@ 0x2d
 8013cf6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013cfa:	4a91      	ldr	r2, [pc, #580]	@ (8013f40 <_printf_float+0x2cc>)
 8013cfc:	4b91      	ldr	r3, [pc, #580]	@ (8013f44 <_printf_float+0x2d0>)
 8013cfe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8013d02:	bf94      	ite	ls
 8013d04:	4690      	movls	r8, r2
 8013d06:	4698      	movhi	r8, r3
 8013d08:	2303      	movs	r3, #3
 8013d0a:	6123      	str	r3, [r4, #16]
 8013d0c:	f02b 0304 	bic.w	r3, fp, #4
 8013d10:	6023      	str	r3, [r4, #0]
 8013d12:	f04f 0900 	mov.w	r9, #0
 8013d16:	9700      	str	r7, [sp, #0]
 8013d18:	4633      	mov	r3, r6
 8013d1a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8013d1c:	4621      	mov	r1, r4
 8013d1e:	4628      	mov	r0, r5
 8013d20:	f000 f9d2 	bl	80140c8 <_printf_common>
 8013d24:	3001      	adds	r0, #1
 8013d26:	f040 808d 	bne.w	8013e44 <_printf_float+0x1d0>
 8013d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8013d2e:	b00d      	add	sp, #52	@ 0x34
 8013d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d34:	4642      	mov	r2, r8
 8013d36:	464b      	mov	r3, r9
 8013d38:	4640      	mov	r0, r8
 8013d3a:	4649      	mov	r1, r9
 8013d3c:	f7ec ff1e 	bl	8000b7c <__aeabi_dcmpun>
 8013d40:	b140      	cbz	r0, 8013d54 <_printf_float+0xe0>
 8013d42:	464b      	mov	r3, r9
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	bfbc      	itt	lt
 8013d48:	232d      	movlt	r3, #45	@ 0x2d
 8013d4a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8013d4e:	4a7e      	ldr	r2, [pc, #504]	@ (8013f48 <_printf_float+0x2d4>)
 8013d50:	4b7e      	ldr	r3, [pc, #504]	@ (8013f4c <_printf_float+0x2d8>)
 8013d52:	e7d4      	b.n	8013cfe <_printf_float+0x8a>
 8013d54:	6863      	ldr	r3, [r4, #4]
 8013d56:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8013d5a:	9206      	str	r2, [sp, #24]
 8013d5c:	1c5a      	adds	r2, r3, #1
 8013d5e:	d13b      	bne.n	8013dd8 <_printf_float+0x164>
 8013d60:	2306      	movs	r3, #6
 8013d62:	6063      	str	r3, [r4, #4]
 8013d64:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8013d68:	2300      	movs	r3, #0
 8013d6a:	6022      	str	r2, [r4, #0]
 8013d6c:	9303      	str	r3, [sp, #12]
 8013d6e:	ab0a      	add	r3, sp, #40	@ 0x28
 8013d70:	e9cd a301 	strd	sl, r3, [sp, #4]
 8013d74:	ab09      	add	r3, sp, #36	@ 0x24
 8013d76:	9300      	str	r3, [sp, #0]
 8013d78:	6861      	ldr	r1, [r4, #4]
 8013d7a:	ec49 8b10 	vmov	d0, r8, r9
 8013d7e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8013d82:	4628      	mov	r0, r5
 8013d84:	f7ff fed6 	bl	8013b34 <__cvt>
 8013d88:	9b06      	ldr	r3, [sp, #24]
 8013d8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013d8c:	2b47      	cmp	r3, #71	@ 0x47
 8013d8e:	4680      	mov	r8, r0
 8013d90:	d129      	bne.n	8013de6 <_printf_float+0x172>
 8013d92:	1cc8      	adds	r0, r1, #3
 8013d94:	db02      	blt.n	8013d9c <_printf_float+0x128>
 8013d96:	6863      	ldr	r3, [r4, #4]
 8013d98:	4299      	cmp	r1, r3
 8013d9a:	dd41      	ble.n	8013e20 <_printf_float+0x1ac>
 8013d9c:	f1aa 0a02 	sub.w	sl, sl, #2
 8013da0:	fa5f fa8a 	uxtb.w	sl, sl
 8013da4:	3901      	subs	r1, #1
 8013da6:	4652      	mov	r2, sl
 8013da8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8013dac:	9109      	str	r1, [sp, #36]	@ 0x24
 8013dae:	f7ff ff26 	bl	8013bfe <__exponent>
 8013db2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013db4:	1813      	adds	r3, r2, r0
 8013db6:	2a01      	cmp	r2, #1
 8013db8:	4681      	mov	r9, r0
 8013dba:	6123      	str	r3, [r4, #16]
 8013dbc:	dc02      	bgt.n	8013dc4 <_printf_float+0x150>
 8013dbe:	6822      	ldr	r2, [r4, #0]
 8013dc0:	07d2      	lsls	r2, r2, #31
 8013dc2:	d501      	bpl.n	8013dc8 <_printf_float+0x154>
 8013dc4:	3301      	adds	r3, #1
 8013dc6:	6123      	str	r3, [r4, #16]
 8013dc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d0a2      	beq.n	8013d16 <_printf_float+0xa2>
 8013dd0:	232d      	movs	r3, #45	@ 0x2d
 8013dd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013dd6:	e79e      	b.n	8013d16 <_printf_float+0xa2>
 8013dd8:	9a06      	ldr	r2, [sp, #24]
 8013dda:	2a47      	cmp	r2, #71	@ 0x47
 8013ddc:	d1c2      	bne.n	8013d64 <_printf_float+0xf0>
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d1c0      	bne.n	8013d64 <_printf_float+0xf0>
 8013de2:	2301      	movs	r3, #1
 8013de4:	e7bd      	b.n	8013d62 <_printf_float+0xee>
 8013de6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8013dea:	d9db      	bls.n	8013da4 <_printf_float+0x130>
 8013dec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8013df0:	d118      	bne.n	8013e24 <_printf_float+0x1b0>
 8013df2:	2900      	cmp	r1, #0
 8013df4:	6863      	ldr	r3, [r4, #4]
 8013df6:	dd0b      	ble.n	8013e10 <_printf_float+0x19c>
 8013df8:	6121      	str	r1, [r4, #16]
 8013dfa:	b913      	cbnz	r3, 8013e02 <_printf_float+0x18e>
 8013dfc:	6822      	ldr	r2, [r4, #0]
 8013dfe:	07d0      	lsls	r0, r2, #31
 8013e00:	d502      	bpl.n	8013e08 <_printf_float+0x194>
 8013e02:	3301      	adds	r3, #1
 8013e04:	440b      	add	r3, r1
 8013e06:	6123      	str	r3, [r4, #16]
 8013e08:	65a1      	str	r1, [r4, #88]	@ 0x58
 8013e0a:	f04f 0900 	mov.w	r9, #0
 8013e0e:	e7db      	b.n	8013dc8 <_printf_float+0x154>
 8013e10:	b913      	cbnz	r3, 8013e18 <_printf_float+0x1a4>
 8013e12:	6822      	ldr	r2, [r4, #0]
 8013e14:	07d2      	lsls	r2, r2, #31
 8013e16:	d501      	bpl.n	8013e1c <_printf_float+0x1a8>
 8013e18:	3302      	adds	r3, #2
 8013e1a:	e7f4      	b.n	8013e06 <_printf_float+0x192>
 8013e1c:	2301      	movs	r3, #1
 8013e1e:	e7f2      	b.n	8013e06 <_printf_float+0x192>
 8013e20:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8013e24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013e26:	4299      	cmp	r1, r3
 8013e28:	db05      	blt.n	8013e36 <_printf_float+0x1c2>
 8013e2a:	6823      	ldr	r3, [r4, #0]
 8013e2c:	6121      	str	r1, [r4, #16]
 8013e2e:	07d8      	lsls	r0, r3, #31
 8013e30:	d5ea      	bpl.n	8013e08 <_printf_float+0x194>
 8013e32:	1c4b      	adds	r3, r1, #1
 8013e34:	e7e7      	b.n	8013e06 <_printf_float+0x192>
 8013e36:	2900      	cmp	r1, #0
 8013e38:	bfd4      	ite	le
 8013e3a:	f1c1 0202 	rsble	r2, r1, #2
 8013e3e:	2201      	movgt	r2, #1
 8013e40:	4413      	add	r3, r2
 8013e42:	e7e0      	b.n	8013e06 <_printf_float+0x192>
 8013e44:	6823      	ldr	r3, [r4, #0]
 8013e46:	055a      	lsls	r2, r3, #21
 8013e48:	d407      	bmi.n	8013e5a <_printf_float+0x1e6>
 8013e4a:	6923      	ldr	r3, [r4, #16]
 8013e4c:	4642      	mov	r2, r8
 8013e4e:	4631      	mov	r1, r6
 8013e50:	4628      	mov	r0, r5
 8013e52:	47b8      	blx	r7
 8013e54:	3001      	adds	r0, #1
 8013e56:	d12b      	bne.n	8013eb0 <_printf_float+0x23c>
 8013e58:	e767      	b.n	8013d2a <_printf_float+0xb6>
 8013e5a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8013e5e:	f240 80dd 	bls.w	801401c <_printf_float+0x3a8>
 8013e62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8013e66:	2200      	movs	r2, #0
 8013e68:	2300      	movs	r3, #0
 8013e6a:	f7ec fe55 	bl	8000b18 <__aeabi_dcmpeq>
 8013e6e:	2800      	cmp	r0, #0
 8013e70:	d033      	beq.n	8013eda <_printf_float+0x266>
 8013e72:	4a37      	ldr	r2, [pc, #220]	@ (8013f50 <_printf_float+0x2dc>)
 8013e74:	2301      	movs	r3, #1
 8013e76:	4631      	mov	r1, r6
 8013e78:	4628      	mov	r0, r5
 8013e7a:	47b8      	blx	r7
 8013e7c:	3001      	adds	r0, #1
 8013e7e:	f43f af54 	beq.w	8013d2a <_printf_float+0xb6>
 8013e82:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8013e86:	4543      	cmp	r3, r8
 8013e88:	db02      	blt.n	8013e90 <_printf_float+0x21c>
 8013e8a:	6823      	ldr	r3, [r4, #0]
 8013e8c:	07d8      	lsls	r0, r3, #31
 8013e8e:	d50f      	bpl.n	8013eb0 <_printf_float+0x23c>
 8013e90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013e94:	4631      	mov	r1, r6
 8013e96:	4628      	mov	r0, r5
 8013e98:	47b8      	blx	r7
 8013e9a:	3001      	adds	r0, #1
 8013e9c:	f43f af45 	beq.w	8013d2a <_printf_float+0xb6>
 8013ea0:	f04f 0900 	mov.w	r9, #0
 8013ea4:	f108 38ff 	add.w	r8, r8, #4294967295
 8013ea8:	f104 0a1a 	add.w	sl, r4, #26
 8013eac:	45c8      	cmp	r8, r9
 8013eae:	dc09      	bgt.n	8013ec4 <_printf_float+0x250>
 8013eb0:	6823      	ldr	r3, [r4, #0]
 8013eb2:	079b      	lsls	r3, r3, #30
 8013eb4:	f100 8103 	bmi.w	80140be <_printf_float+0x44a>
 8013eb8:	68e0      	ldr	r0, [r4, #12]
 8013eba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013ebc:	4298      	cmp	r0, r3
 8013ebe:	bfb8      	it	lt
 8013ec0:	4618      	movlt	r0, r3
 8013ec2:	e734      	b.n	8013d2e <_printf_float+0xba>
 8013ec4:	2301      	movs	r3, #1
 8013ec6:	4652      	mov	r2, sl
 8013ec8:	4631      	mov	r1, r6
 8013eca:	4628      	mov	r0, r5
 8013ecc:	47b8      	blx	r7
 8013ece:	3001      	adds	r0, #1
 8013ed0:	f43f af2b 	beq.w	8013d2a <_printf_float+0xb6>
 8013ed4:	f109 0901 	add.w	r9, r9, #1
 8013ed8:	e7e8      	b.n	8013eac <_printf_float+0x238>
 8013eda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	dc39      	bgt.n	8013f54 <_printf_float+0x2e0>
 8013ee0:	4a1b      	ldr	r2, [pc, #108]	@ (8013f50 <_printf_float+0x2dc>)
 8013ee2:	2301      	movs	r3, #1
 8013ee4:	4631      	mov	r1, r6
 8013ee6:	4628      	mov	r0, r5
 8013ee8:	47b8      	blx	r7
 8013eea:	3001      	adds	r0, #1
 8013eec:	f43f af1d 	beq.w	8013d2a <_printf_float+0xb6>
 8013ef0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8013ef4:	ea59 0303 	orrs.w	r3, r9, r3
 8013ef8:	d102      	bne.n	8013f00 <_printf_float+0x28c>
 8013efa:	6823      	ldr	r3, [r4, #0]
 8013efc:	07d9      	lsls	r1, r3, #31
 8013efe:	d5d7      	bpl.n	8013eb0 <_printf_float+0x23c>
 8013f00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013f04:	4631      	mov	r1, r6
 8013f06:	4628      	mov	r0, r5
 8013f08:	47b8      	blx	r7
 8013f0a:	3001      	adds	r0, #1
 8013f0c:	f43f af0d 	beq.w	8013d2a <_printf_float+0xb6>
 8013f10:	f04f 0a00 	mov.w	sl, #0
 8013f14:	f104 0b1a 	add.w	fp, r4, #26
 8013f18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f1a:	425b      	negs	r3, r3
 8013f1c:	4553      	cmp	r3, sl
 8013f1e:	dc01      	bgt.n	8013f24 <_printf_float+0x2b0>
 8013f20:	464b      	mov	r3, r9
 8013f22:	e793      	b.n	8013e4c <_printf_float+0x1d8>
 8013f24:	2301      	movs	r3, #1
 8013f26:	465a      	mov	r2, fp
 8013f28:	4631      	mov	r1, r6
 8013f2a:	4628      	mov	r0, r5
 8013f2c:	47b8      	blx	r7
 8013f2e:	3001      	adds	r0, #1
 8013f30:	f43f aefb 	beq.w	8013d2a <_printf_float+0xb6>
 8013f34:	f10a 0a01 	add.w	sl, sl, #1
 8013f38:	e7ee      	b.n	8013f18 <_printf_float+0x2a4>
 8013f3a:	bf00      	nop
 8013f3c:	7fefffff 	.word	0x7fefffff
 8013f40:	08025bbc 	.word	0x08025bbc
 8013f44:	08025bc0 	.word	0x08025bc0
 8013f48:	08025bc4 	.word	0x08025bc4
 8013f4c:	08025bc8 	.word	0x08025bc8
 8013f50:	08025bcc 	.word	0x08025bcc
 8013f54:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013f56:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013f5a:	4553      	cmp	r3, sl
 8013f5c:	bfa8      	it	ge
 8013f5e:	4653      	movge	r3, sl
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	4699      	mov	r9, r3
 8013f64:	dc36      	bgt.n	8013fd4 <_printf_float+0x360>
 8013f66:	f04f 0b00 	mov.w	fp, #0
 8013f6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013f6e:	f104 021a 	add.w	r2, r4, #26
 8013f72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013f74:	9306      	str	r3, [sp, #24]
 8013f76:	eba3 0309 	sub.w	r3, r3, r9
 8013f7a:	455b      	cmp	r3, fp
 8013f7c:	dc31      	bgt.n	8013fe2 <_printf_float+0x36e>
 8013f7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f80:	459a      	cmp	sl, r3
 8013f82:	dc3a      	bgt.n	8013ffa <_printf_float+0x386>
 8013f84:	6823      	ldr	r3, [r4, #0]
 8013f86:	07da      	lsls	r2, r3, #31
 8013f88:	d437      	bmi.n	8013ffa <_printf_float+0x386>
 8013f8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f8c:	ebaa 0903 	sub.w	r9, sl, r3
 8013f90:	9b06      	ldr	r3, [sp, #24]
 8013f92:	ebaa 0303 	sub.w	r3, sl, r3
 8013f96:	4599      	cmp	r9, r3
 8013f98:	bfa8      	it	ge
 8013f9a:	4699      	movge	r9, r3
 8013f9c:	f1b9 0f00 	cmp.w	r9, #0
 8013fa0:	dc33      	bgt.n	801400a <_printf_float+0x396>
 8013fa2:	f04f 0800 	mov.w	r8, #0
 8013fa6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013faa:	f104 0b1a 	add.w	fp, r4, #26
 8013fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013fb0:	ebaa 0303 	sub.w	r3, sl, r3
 8013fb4:	eba3 0309 	sub.w	r3, r3, r9
 8013fb8:	4543      	cmp	r3, r8
 8013fba:	f77f af79 	ble.w	8013eb0 <_printf_float+0x23c>
 8013fbe:	2301      	movs	r3, #1
 8013fc0:	465a      	mov	r2, fp
 8013fc2:	4631      	mov	r1, r6
 8013fc4:	4628      	mov	r0, r5
 8013fc6:	47b8      	blx	r7
 8013fc8:	3001      	adds	r0, #1
 8013fca:	f43f aeae 	beq.w	8013d2a <_printf_float+0xb6>
 8013fce:	f108 0801 	add.w	r8, r8, #1
 8013fd2:	e7ec      	b.n	8013fae <_printf_float+0x33a>
 8013fd4:	4642      	mov	r2, r8
 8013fd6:	4631      	mov	r1, r6
 8013fd8:	4628      	mov	r0, r5
 8013fda:	47b8      	blx	r7
 8013fdc:	3001      	adds	r0, #1
 8013fde:	d1c2      	bne.n	8013f66 <_printf_float+0x2f2>
 8013fe0:	e6a3      	b.n	8013d2a <_printf_float+0xb6>
 8013fe2:	2301      	movs	r3, #1
 8013fe4:	4631      	mov	r1, r6
 8013fe6:	4628      	mov	r0, r5
 8013fe8:	9206      	str	r2, [sp, #24]
 8013fea:	47b8      	blx	r7
 8013fec:	3001      	adds	r0, #1
 8013fee:	f43f ae9c 	beq.w	8013d2a <_printf_float+0xb6>
 8013ff2:	9a06      	ldr	r2, [sp, #24]
 8013ff4:	f10b 0b01 	add.w	fp, fp, #1
 8013ff8:	e7bb      	b.n	8013f72 <_printf_float+0x2fe>
 8013ffa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013ffe:	4631      	mov	r1, r6
 8014000:	4628      	mov	r0, r5
 8014002:	47b8      	blx	r7
 8014004:	3001      	adds	r0, #1
 8014006:	d1c0      	bne.n	8013f8a <_printf_float+0x316>
 8014008:	e68f      	b.n	8013d2a <_printf_float+0xb6>
 801400a:	9a06      	ldr	r2, [sp, #24]
 801400c:	464b      	mov	r3, r9
 801400e:	4442      	add	r2, r8
 8014010:	4631      	mov	r1, r6
 8014012:	4628      	mov	r0, r5
 8014014:	47b8      	blx	r7
 8014016:	3001      	adds	r0, #1
 8014018:	d1c3      	bne.n	8013fa2 <_printf_float+0x32e>
 801401a:	e686      	b.n	8013d2a <_printf_float+0xb6>
 801401c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8014020:	f1ba 0f01 	cmp.w	sl, #1
 8014024:	dc01      	bgt.n	801402a <_printf_float+0x3b6>
 8014026:	07db      	lsls	r3, r3, #31
 8014028:	d536      	bpl.n	8014098 <_printf_float+0x424>
 801402a:	2301      	movs	r3, #1
 801402c:	4642      	mov	r2, r8
 801402e:	4631      	mov	r1, r6
 8014030:	4628      	mov	r0, r5
 8014032:	47b8      	blx	r7
 8014034:	3001      	adds	r0, #1
 8014036:	f43f ae78 	beq.w	8013d2a <_printf_float+0xb6>
 801403a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801403e:	4631      	mov	r1, r6
 8014040:	4628      	mov	r0, r5
 8014042:	47b8      	blx	r7
 8014044:	3001      	adds	r0, #1
 8014046:	f43f ae70 	beq.w	8013d2a <_printf_float+0xb6>
 801404a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801404e:	2200      	movs	r2, #0
 8014050:	2300      	movs	r3, #0
 8014052:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014056:	f7ec fd5f 	bl	8000b18 <__aeabi_dcmpeq>
 801405a:	b9c0      	cbnz	r0, 801408e <_printf_float+0x41a>
 801405c:	4653      	mov	r3, sl
 801405e:	f108 0201 	add.w	r2, r8, #1
 8014062:	4631      	mov	r1, r6
 8014064:	4628      	mov	r0, r5
 8014066:	47b8      	blx	r7
 8014068:	3001      	adds	r0, #1
 801406a:	d10c      	bne.n	8014086 <_printf_float+0x412>
 801406c:	e65d      	b.n	8013d2a <_printf_float+0xb6>
 801406e:	2301      	movs	r3, #1
 8014070:	465a      	mov	r2, fp
 8014072:	4631      	mov	r1, r6
 8014074:	4628      	mov	r0, r5
 8014076:	47b8      	blx	r7
 8014078:	3001      	adds	r0, #1
 801407a:	f43f ae56 	beq.w	8013d2a <_printf_float+0xb6>
 801407e:	f108 0801 	add.w	r8, r8, #1
 8014082:	45d0      	cmp	r8, sl
 8014084:	dbf3      	blt.n	801406e <_printf_float+0x3fa>
 8014086:	464b      	mov	r3, r9
 8014088:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801408c:	e6df      	b.n	8013e4e <_printf_float+0x1da>
 801408e:	f04f 0800 	mov.w	r8, #0
 8014092:	f104 0b1a 	add.w	fp, r4, #26
 8014096:	e7f4      	b.n	8014082 <_printf_float+0x40e>
 8014098:	2301      	movs	r3, #1
 801409a:	4642      	mov	r2, r8
 801409c:	e7e1      	b.n	8014062 <_printf_float+0x3ee>
 801409e:	2301      	movs	r3, #1
 80140a0:	464a      	mov	r2, r9
 80140a2:	4631      	mov	r1, r6
 80140a4:	4628      	mov	r0, r5
 80140a6:	47b8      	blx	r7
 80140a8:	3001      	adds	r0, #1
 80140aa:	f43f ae3e 	beq.w	8013d2a <_printf_float+0xb6>
 80140ae:	f108 0801 	add.w	r8, r8, #1
 80140b2:	68e3      	ldr	r3, [r4, #12]
 80140b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80140b6:	1a5b      	subs	r3, r3, r1
 80140b8:	4543      	cmp	r3, r8
 80140ba:	dcf0      	bgt.n	801409e <_printf_float+0x42a>
 80140bc:	e6fc      	b.n	8013eb8 <_printf_float+0x244>
 80140be:	f04f 0800 	mov.w	r8, #0
 80140c2:	f104 0919 	add.w	r9, r4, #25
 80140c6:	e7f4      	b.n	80140b2 <_printf_float+0x43e>

080140c8 <_printf_common>:
 80140c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80140cc:	4616      	mov	r6, r2
 80140ce:	4698      	mov	r8, r3
 80140d0:	688a      	ldr	r2, [r1, #8]
 80140d2:	690b      	ldr	r3, [r1, #16]
 80140d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80140d8:	4293      	cmp	r3, r2
 80140da:	bfb8      	it	lt
 80140dc:	4613      	movlt	r3, r2
 80140de:	6033      	str	r3, [r6, #0]
 80140e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80140e4:	4607      	mov	r7, r0
 80140e6:	460c      	mov	r4, r1
 80140e8:	b10a      	cbz	r2, 80140ee <_printf_common+0x26>
 80140ea:	3301      	adds	r3, #1
 80140ec:	6033      	str	r3, [r6, #0]
 80140ee:	6823      	ldr	r3, [r4, #0]
 80140f0:	0699      	lsls	r1, r3, #26
 80140f2:	bf42      	ittt	mi
 80140f4:	6833      	ldrmi	r3, [r6, #0]
 80140f6:	3302      	addmi	r3, #2
 80140f8:	6033      	strmi	r3, [r6, #0]
 80140fa:	6825      	ldr	r5, [r4, #0]
 80140fc:	f015 0506 	ands.w	r5, r5, #6
 8014100:	d106      	bne.n	8014110 <_printf_common+0x48>
 8014102:	f104 0a19 	add.w	sl, r4, #25
 8014106:	68e3      	ldr	r3, [r4, #12]
 8014108:	6832      	ldr	r2, [r6, #0]
 801410a:	1a9b      	subs	r3, r3, r2
 801410c:	42ab      	cmp	r3, r5
 801410e:	dc26      	bgt.n	801415e <_printf_common+0x96>
 8014110:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014114:	6822      	ldr	r2, [r4, #0]
 8014116:	3b00      	subs	r3, #0
 8014118:	bf18      	it	ne
 801411a:	2301      	movne	r3, #1
 801411c:	0692      	lsls	r2, r2, #26
 801411e:	d42b      	bmi.n	8014178 <_printf_common+0xb0>
 8014120:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014124:	4641      	mov	r1, r8
 8014126:	4638      	mov	r0, r7
 8014128:	47c8      	blx	r9
 801412a:	3001      	adds	r0, #1
 801412c:	d01e      	beq.n	801416c <_printf_common+0xa4>
 801412e:	6823      	ldr	r3, [r4, #0]
 8014130:	6922      	ldr	r2, [r4, #16]
 8014132:	f003 0306 	and.w	r3, r3, #6
 8014136:	2b04      	cmp	r3, #4
 8014138:	bf02      	ittt	eq
 801413a:	68e5      	ldreq	r5, [r4, #12]
 801413c:	6833      	ldreq	r3, [r6, #0]
 801413e:	1aed      	subeq	r5, r5, r3
 8014140:	68a3      	ldr	r3, [r4, #8]
 8014142:	bf0c      	ite	eq
 8014144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014148:	2500      	movne	r5, #0
 801414a:	4293      	cmp	r3, r2
 801414c:	bfc4      	itt	gt
 801414e:	1a9b      	subgt	r3, r3, r2
 8014150:	18ed      	addgt	r5, r5, r3
 8014152:	2600      	movs	r6, #0
 8014154:	341a      	adds	r4, #26
 8014156:	42b5      	cmp	r5, r6
 8014158:	d11a      	bne.n	8014190 <_printf_common+0xc8>
 801415a:	2000      	movs	r0, #0
 801415c:	e008      	b.n	8014170 <_printf_common+0xa8>
 801415e:	2301      	movs	r3, #1
 8014160:	4652      	mov	r2, sl
 8014162:	4641      	mov	r1, r8
 8014164:	4638      	mov	r0, r7
 8014166:	47c8      	blx	r9
 8014168:	3001      	adds	r0, #1
 801416a:	d103      	bne.n	8014174 <_printf_common+0xac>
 801416c:	f04f 30ff 	mov.w	r0, #4294967295
 8014170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014174:	3501      	adds	r5, #1
 8014176:	e7c6      	b.n	8014106 <_printf_common+0x3e>
 8014178:	18e1      	adds	r1, r4, r3
 801417a:	1c5a      	adds	r2, r3, #1
 801417c:	2030      	movs	r0, #48	@ 0x30
 801417e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014182:	4422      	add	r2, r4
 8014184:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014188:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801418c:	3302      	adds	r3, #2
 801418e:	e7c7      	b.n	8014120 <_printf_common+0x58>
 8014190:	2301      	movs	r3, #1
 8014192:	4622      	mov	r2, r4
 8014194:	4641      	mov	r1, r8
 8014196:	4638      	mov	r0, r7
 8014198:	47c8      	blx	r9
 801419a:	3001      	adds	r0, #1
 801419c:	d0e6      	beq.n	801416c <_printf_common+0xa4>
 801419e:	3601      	adds	r6, #1
 80141a0:	e7d9      	b.n	8014156 <_printf_common+0x8e>
	...

080141a4 <_printf_i>:
 80141a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80141a8:	7e0f      	ldrb	r7, [r1, #24]
 80141aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80141ac:	2f78      	cmp	r7, #120	@ 0x78
 80141ae:	4691      	mov	r9, r2
 80141b0:	4680      	mov	r8, r0
 80141b2:	460c      	mov	r4, r1
 80141b4:	469a      	mov	sl, r3
 80141b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80141ba:	d807      	bhi.n	80141cc <_printf_i+0x28>
 80141bc:	2f62      	cmp	r7, #98	@ 0x62
 80141be:	d80a      	bhi.n	80141d6 <_printf_i+0x32>
 80141c0:	2f00      	cmp	r7, #0
 80141c2:	f000 80d2 	beq.w	801436a <_printf_i+0x1c6>
 80141c6:	2f58      	cmp	r7, #88	@ 0x58
 80141c8:	f000 80b9 	beq.w	801433e <_printf_i+0x19a>
 80141cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80141d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80141d4:	e03a      	b.n	801424c <_printf_i+0xa8>
 80141d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80141da:	2b15      	cmp	r3, #21
 80141dc:	d8f6      	bhi.n	80141cc <_printf_i+0x28>
 80141de:	a101      	add	r1, pc, #4	@ (adr r1, 80141e4 <_printf_i+0x40>)
 80141e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80141e4:	0801423d 	.word	0x0801423d
 80141e8:	08014251 	.word	0x08014251
 80141ec:	080141cd 	.word	0x080141cd
 80141f0:	080141cd 	.word	0x080141cd
 80141f4:	080141cd 	.word	0x080141cd
 80141f8:	080141cd 	.word	0x080141cd
 80141fc:	08014251 	.word	0x08014251
 8014200:	080141cd 	.word	0x080141cd
 8014204:	080141cd 	.word	0x080141cd
 8014208:	080141cd 	.word	0x080141cd
 801420c:	080141cd 	.word	0x080141cd
 8014210:	08014351 	.word	0x08014351
 8014214:	0801427b 	.word	0x0801427b
 8014218:	0801430b 	.word	0x0801430b
 801421c:	080141cd 	.word	0x080141cd
 8014220:	080141cd 	.word	0x080141cd
 8014224:	08014373 	.word	0x08014373
 8014228:	080141cd 	.word	0x080141cd
 801422c:	0801427b 	.word	0x0801427b
 8014230:	080141cd 	.word	0x080141cd
 8014234:	080141cd 	.word	0x080141cd
 8014238:	08014313 	.word	0x08014313
 801423c:	6833      	ldr	r3, [r6, #0]
 801423e:	1d1a      	adds	r2, r3, #4
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	6032      	str	r2, [r6, #0]
 8014244:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014248:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801424c:	2301      	movs	r3, #1
 801424e:	e09d      	b.n	801438c <_printf_i+0x1e8>
 8014250:	6833      	ldr	r3, [r6, #0]
 8014252:	6820      	ldr	r0, [r4, #0]
 8014254:	1d19      	adds	r1, r3, #4
 8014256:	6031      	str	r1, [r6, #0]
 8014258:	0606      	lsls	r6, r0, #24
 801425a:	d501      	bpl.n	8014260 <_printf_i+0xbc>
 801425c:	681d      	ldr	r5, [r3, #0]
 801425e:	e003      	b.n	8014268 <_printf_i+0xc4>
 8014260:	0645      	lsls	r5, r0, #25
 8014262:	d5fb      	bpl.n	801425c <_printf_i+0xb8>
 8014264:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014268:	2d00      	cmp	r5, #0
 801426a:	da03      	bge.n	8014274 <_printf_i+0xd0>
 801426c:	232d      	movs	r3, #45	@ 0x2d
 801426e:	426d      	negs	r5, r5
 8014270:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014274:	4859      	ldr	r0, [pc, #356]	@ (80143dc <_printf_i+0x238>)
 8014276:	230a      	movs	r3, #10
 8014278:	e011      	b.n	801429e <_printf_i+0xfa>
 801427a:	6821      	ldr	r1, [r4, #0]
 801427c:	6833      	ldr	r3, [r6, #0]
 801427e:	0608      	lsls	r0, r1, #24
 8014280:	f853 5b04 	ldr.w	r5, [r3], #4
 8014284:	d402      	bmi.n	801428c <_printf_i+0xe8>
 8014286:	0649      	lsls	r1, r1, #25
 8014288:	bf48      	it	mi
 801428a:	b2ad      	uxthmi	r5, r5
 801428c:	2f6f      	cmp	r7, #111	@ 0x6f
 801428e:	4853      	ldr	r0, [pc, #332]	@ (80143dc <_printf_i+0x238>)
 8014290:	6033      	str	r3, [r6, #0]
 8014292:	bf14      	ite	ne
 8014294:	230a      	movne	r3, #10
 8014296:	2308      	moveq	r3, #8
 8014298:	2100      	movs	r1, #0
 801429a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801429e:	6866      	ldr	r6, [r4, #4]
 80142a0:	60a6      	str	r6, [r4, #8]
 80142a2:	2e00      	cmp	r6, #0
 80142a4:	bfa2      	ittt	ge
 80142a6:	6821      	ldrge	r1, [r4, #0]
 80142a8:	f021 0104 	bicge.w	r1, r1, #4
 80142ac:	6021      	strge	r1, [r4, #0]
 80142ae:	b90d      	cbnz	r5, 80142b4 <_printf_i+0x110>
 80142b0:	2e00      	cmp	r6, #0
 80142b2:	d04b      	beq.n	801434c <_printf_i+0x1a8>
 80142b4:	4616      	mov	r6, r2
 80142b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80142ba:	fb03 5711 	mls	r7, r3, r1, r5
 80142be:	5dc7      	ldrb	r7, [r0, r7]
 80142c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80142c4:	462f      	mov	r7, r5
 80142c6:	42bb      	cmp	r3, r7
 80142c8:	460d      	mov	r5, r1
 80142ca:	d9f4      	bls.n	80142b6 <_printf_i+0x112>
 80142cc:	2b08      	cmp	r3, #8
 80142ce:	d10b      	bne.n	80142e8 <_printf_i+0x144>
 80142d0:	6823      	ldr	r3, [r4, #0]
 80142d2:	07df      	lsls	r7, r3, #31
 80142d4:	d508      	bpl.n	80142e8 <_printf_i+0x144>
 80142d6:	6923      	ldr	r3, [r4, #16]
 80142d8:	6861      	ldr	r1, [r4, #4]
 80142da:	4299      	cmp	r1, r3
 80142dc:	bfde      	ittt	le
 80142de:	2330      	movle	r3, #48	@ 0x30
 80142e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80142e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80142e8:	1b92      	subs	r2, r2, r6
 80142ea:	6122      	str	r2, [r4, #16]
 80142ec:	f8cd a000 	str.w	sl, [sp]
 80142f0:	464b      	mov	r3, r9
 80142f2:	aa03      	add	r2, sp, #12
 80142f4:	4621      	mov	r1, r4
 80142f6:	4640      	mov	r0, r8
 80142f8:	f7ff fee6 	bl	80140c8 <_printf_common>
 80142fc:	3001      	adds	r0, #1
 80142fe:	d14a      	bne.n	8014396 <_printf_i+0x1f2>
 8014300:	f04f 30ff 	mov.w	r0, #4294967295
 8014304:	b004      	add	sp, #16
 8014306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801430a:	6823      	ldr	r3, [r4, #0]
 801430c:	f043 0320 	orr.w	r3, r3, #32
 8014310:	6023      	str	r3, [r4, #0]
 8014312:	4833      	ldr	r0, [pc, #204]	@ (80143e0 <_printf_i+0x23c>)
 8014314:	2778      	movs	r7, #120	@ 0x78
 8014316:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801431a:	6823      	ldr	r3, [r4, #0]
 801431c:	6831      	ldr	r1, [r6, #0]
 801431e:	061f      	lsls	r7, r3, #24
 8014320:	f851 5b04 	ldr.w	r5, [r1], #4
 8014324:	d402      	bmi.n	801432c <_printf_i+0x188>
 8014326:	065f      	lsls	r7, r3, #25
 8014328:	bf48      	it	mi
 801432a:	b2ad      	uxthmi	r5, r5
 801432c:	6031      	str	r1, [r6, #0]
 801432e:	07d9      	lsls	r1, r3, #31
 8014330:	bf44      	itt	mi
 8014332:	f043 0320 	orrmi.w	r3, r3, #32
 8014336:	6023      	strmi	r3, [r4, #0]
 8014338:	b11d      	cbz	r5, 8014342 <_printf_i+0x19e>
 801433a:	2310      	movs	r3, #16
 801433c:	e7ac      	b.n	8014298 <_printf_i+0xf4>
 801433e:	4827      	ldr	r0, [pc, #156]	@ (80143dc <_printf_i+0x238>)
 8014340:	e7e9      	b.n	8014316 <_printf_i+0x172>
 8014342:	6823      	ldr	r3, [r4, #0]
 8014344:	f023 0320 	bic.w	r3, r3, #32
 8014348:	6023      	str	r3, [r4, #0]
 801434a:	e7f6      	b.n	801433a <_printf_i+0x196>
 801434c:	4616      	mov	r6, r2
 801434e:	e7bd      	b.n	80142cc <_printf_i+0x128>
 8014350:	6833      	ldr	r3, [r6, #0]
 8014352:	6825      	ldr	r5, [r4, #0]
 8014354:	6961      	ldr	r1, [r4, #20]
 8014356:	1d18      	adds	r0, r3, #4
 8014358:	6030      	str	r0, [r6, #0]
 801435a:	062e      	lsls	r6, r5, #24
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	d501      	bpl.n	8014364 <_printf_i+0x1c0>
 8014360:	6019      	str	r1, [r3, #0]
 8014362:	e002      	b.n	801436a <_printf_i+0x1c6>
 8014364:	0668      	lsls	r0, r5, #25
 8014366:	d5fb      	bpl.n	8014360 <_printf_i+0x1bc>
 8014368:	8019      	strh	r1, [r3, #0]
 801436a:	2300      	movs	r3, #0
 801436c:	6123      	str	r3, [r4, #16]
 801436e:	4616      	mov	r6, r2
 8014370:	e7bc      	b.n	80142ec <_printf_i+0x148>
 8014372:	6833      	ldr	r3, [r6, #0]
 8014374:	1d1a      	adds	r2, r3, #4
 8014376:	6032      	str	r2, [r6, #0]
 8014378:	681e      	ldr	r6, [r3, #0]
 801437a:	6862      	ldr	r2, [r4, #4]
 801437c:	2100      	movs	r1, #0
 801437e:	4630      	mov	r0, r6
 8014380:	f7eb ff4e 	bl	8000220 <memchr>
 8014384:	b108      	cbz	r0, 801438a <_printf_i+0x1e6>
 8014386:	1b80      	subs	r0, r0, r6
 8014388:	6060      	str	r0, [r4, #4]
 801438a:	6863      	ldr	r3, [r4, #4]
 801438c:	6123      	str	r3, [r4, #16]
 801438e:	2300      	movs	r3, #0
 8014390:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014394:	e7aa      	b.n	80142ec <_printf_i+0x148>
 8014396:	6923      	ldr	r3, [r4, #16]
 8014398:	4632      	mov	r2, r6
 801439a:	4649      	mov	r1, r9
 801439c:	4640      	mov	r0, r8
 801439e:	47d0      	blx	sl
 80143a0:	3001      	adds	r0, #1
 80143a2:	d0ad      	beq.n	8014300 <_printf_i+0x15c>
 80143a4:	6823      	ldr	r3, [r4, #0]
 80143a6:	079b      	lsls	r3, r3, #30
 80143a8:	d413      	bmi.n	80143d2 <_printf_i+0x22e>
 80143aa:	68e0      	ldr	r0, [r4, #12]
 80143ac:	9b03      	ldr	r3, [sp, #12]
 80143ae:	4298      	cmp	r0, r3
 80143b0:	bfb8      	it	lt
 80143b2:	4618      	movlt	r0, r3
 80143b4:	e7a6      	b.n	8014304 <_printf_i+0x160>
 80143b6:	2301      	movs	r3, #1
 80143b8:	4632      	mov	r2, r6
 80143ba:	4649      	mov	r1, r9
 80143bc:	4640      	mov	r0, r8
 80143be:	47d0      	blx	sl
 80143c0:	3001      	adds	r0, #1
 80143c2:	d09d      	beq.n	8014300 <_printf_i+0x15c>
 80143c4:	3501      	adds	r5, #1
 80143c6:	68e3      	ldr	r3, [r4, #12]
 80143c8:	9903      	ldr	r1, [sp, #12]
 80143ca:	1a5b      	subs	r3, r3, r1
 80143cc:	42ab      	cmp	r3, r5
 80143ce:	dcf2      	bgt.n	80143b6 <_printf_i+0x212>
 80143d0:	e7eb      	b.n	80143aa <_printf_i+0x206>
 80143d2:	2500      	movs	r5, #0
 80143d4:	f104 0619 	add.w	r6, r4, #25
 80143d8:	e7f5      	b.n	80143c6 <_printf_i+0x222>
 80143da:	bf00      	nop
 80143dc:	08025bce 	.word	0x08025bce
 80143e0:	08025bdf 	.word	0x08025bdf

080143e4 <_scanf_float>:
 80143e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143e8:	b087      	sub	sp, #28
 80143ea:	4617      	mov	r7, r2
 80143ec:	9303      	str	r3, [sp, #12]
 80143ee:	688b      	ldr	r3, [r1, #8]
 80143f0:	1e5a      	subs	r2, r3, #1
 80143f2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80143f6:	bf81      	itttt	hi
 80143f8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80143fc:	eb03 0b05 	addhi.w	fp, r3, r5
 8014400:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8014404:	608b      	strhi	r3, [r1, #8]
 8014406:	680b      	ldr	r3, [r1, #0]
 8014408:	460a      	mov	r2, r1
 801440a:	f04f 0500 	mov.w	r5, #0
 801440e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8014412:	f842 3b1c 	str.w	r3, [r2], #28
 8014416:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801441a:	4680      	mov	r8, r0
 801441c:	460c      	mov	r4, r1
 801441e:	bf98      	it	ls
 8014420:	f04f 0b00 	movls.w	fp, #0
 8014424:	9201      	str	r2, [sp, #4]
 8014426:	4616      	mov	r6, r2
 8014428:	46aa      	mov	sl, r5
 801442a:	46a9      	mov	r9, r5
 801442c:	9502      	str	r5, [sp, #8]
 801442e:	68a2      	ldr	r2, [r4, #8]
 8014430:	b152      	cbz	r2, 8014448 <_scanf_float+0x64>
 8014432:	683b      	ldr	r3, [r7, #0]
 8014434:	781b      	ldrb	r3, [r3, #0]
 8014436:	2b4e      	cmp	r3, #78	@ 0x4e
 8014438:	d864      	bhi.n	8014504 <_scanf_float+0x120>
 801443a:	2b40      	cmp	r3, #64	@ 0x40
 801443c:	d83c      	bhi.n	80144b8 <_scanf_float+0xd4>
 801443e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8014442:	b2c8      	uxtb	r0, r1
 8014444:	280e      	cmp	r0, #14
 8014446:	d93a      	bls.n	80144be <_scanf_float+0xda>
 8014448:	f1b9 0f00 	cmp.w	r9, #0
 801444c:	d003      	beq.n	8014456 <_scanf_float+0x72>
 801444e:	6823      	ldr	r3, [r4, #0]
 8014450:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014454:	6023      	str	r3, [r4, #0]
 8014456:	f10a 3aff 	add.w	sl, sl, #4294967295
 801445a:	f1ba 0f01 	cmp.w	sl, #1
 801445e:	f200 8117 	bhi.w	8014690 <_scanf_float+0x2ac>
 8014462:	9b01      	ldr	r3, [sp, #4]
 8014464:	429e      	cmp	r6, r3
 8014466:	f200 8108 	bhi.w	801467a <_scanf_float+0x296>
 801446a:	2001      	movs	r0, #1
 801446c:	b007      	add	sp, #28
 801446e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014472:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8014476:	2a0d      	cmp	r2, #13
 8014478:	d8e6      	bhi.n	8014448 <_scanf_float+0x64>
 801447a:	a101      	add	r1, pc, #4	@ (adr r1, 8014480 <_scanf_float+0x9c>)
 801447c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014480:	080145c7 	.word	0x080145c7
 8014484:	08014449 	.word	0x08014449
 8014488:	08014449 	.word	0x08014449
 801448c:	08014449 	.word	0x08014449
 8014490:	08014627 	.word	0x08014627
 8014494:	080145ff 	.word	0x080145ff
 8014498:	08014449 	.word	0x08014449
 801449c:	08014449 	.word	0x08014449
 80144a0:	080145d5 	.word	0x080145d5
 80144a4:	08014449 	.word	0x08014449
 80144a8:	08014449 	.word	0x08014449
 80144ac:	08014449 	.word	0x08014449
 80144b0:	08014449 	.word	0x08014449
 80144b4:	0801458d 	.word	0x0801458d
 80144b8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80144bc:	e7db      	b.n	8014476 <_scanf_float+0x92>
 80144be:	290e      	cmp	r1, #14
 80144c0:	d8c2      	bhi.n	8014448 <_scanf_float+0x64>
 80144c2:	a001      	add	r0, pc, #4	@ (adr r0, 80144c8 <_scanf_float+0xe4>)
 80144c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80144c8:	0801457d 	.word	0x0801457d
 80144cc:	08014449 	.word	0x08014449
 80144d0:	0801457d 	.word	0x0801457d
 80144d4:	08014613 	.word	0x08014613
 80144d8:	08014449 	.word	0x08014449
 80144dc:	08014525 	.word	0x08014525
 80144e0:	08014563 	.word	0x08014563
 80144e4:	08014563 	.word	0x08014563
 80144e8:	08014563 	.word	0x08014563
 80144ec:	08014563 	.word	0x08014563
 80144f0:	08014563 	.word	0x08014563
 80144f4:	08014563 	.word	0x08014563
 80144f8:	08014563 	.word	0x08014563
 80144fc:	08014563 	.word	0x08014563
 8014500:	08014563 	.word	0x08014563
 8014504:	2b6e      	cmp	r3, #110	@ 0x6e
 8014506:	d809      	bhi.n	801451c <_scanf_float+0x138>
 8014508:	2b60      	cmp	r3, #96	@ 0x60
 801450a:	d8b2      	bhi.n	8014472 <_scanf_float+0x8e>
 801450c:	2b54      	cmp	r3, #84	@ 0x54
 801450e:	d07b      	beq.n	8014608 <_scanf_float+0x224>
 8014510:	2b59      	cmp	r3, #89	@ 0x59
 8014512:	d199      	bne.n	8014448 <_scanf_float+0x64>
 8014514:	2d07      	cmp	r5, #7
 8014516:	d197      	bne.n	8014448 <_scanf_float+0x64>
 8014518:	2508      	movs	r5, #8
 801451a:	e02c      	b.n	8014576 <_scanf_float+0x192>
 801451c:	2b74      	cmp	r3, #116	@ 0x74
 801451e:	d073      	beq.n	8014608 <_scanf_float+0x224>
 8014520:	2b79      	cmp	r3, #121	@ 0x79
 8014522:	e7f6      	b.n	8014512 <_scanf_float+0x12e>
 8014524:	6821      	ldr	r1, [r4, #0]
 8014526:	05c8      	lsls	r0, r1, #23
 8014528:	d51b      	bpl.n	8014562 <_scanf_float+0x17e>
 801452a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801452e:	6021      	str	r1, [r4, #0]
 8014530:	f109 0901 	add.w	r9, r9, #1
 8014534:	f1bb 0f00 	cmp.w	fp, #0
 8014538:	d003      	beq.n	8014542 <_scanf_float+0x15e>
 801453a:	3201      	adds	r2, #1
 801453c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014540:	60a2      	str	r2, [r4, #8]
 8014542:	68a3      	ldr	r3, [r4, #8]
 8014544:	3b01      	subs	r3, #1
 8014546:	60a3      	str	r3, [r4, #8]
 8014548:	6923      	ldr	r3, [r4, #16]
 801454a:	3301      	adds	r3, #1
 801454c:	6123      	str	r3, [r4, #16]
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	3b01      	subs	r3, #1
 8014552:	2b00      	cmp	r3, #0
 8014554:	607b      	str	r3, [r7, #4]
 8014556:	f340 8087 	ble.w	8014668 <_scanf_float+0x284>
 801455a:	683b      	ldr	r3, [r7, #0]
 801455c:	3301      	adds	r3, #1
 801455e:	603b      	str	r3, [r7, #0]
 8014560:	e765      	b.n	801442e <_scanf_float+0x4a>
 8014562:	eb1a 0105 	adds.w	r1, sl, r5
 8014566:	f47f af6f 	bne.w	8014448 <_scanf_float+0x64>
 801456a:	6822      	ldr	r2, [r4, #0]
 801456c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8014570:	6022      	str	r2, [r4, #0]
 8014572:	460d      	mov	r5, r1
 8014574:	468a      	mov	sl, r1
 8014576:	f806 3b01 	strb.w	r3, [r6], #1
 801457a:	e7e2      	b.n	8014542 <_scanf_float+0x15e>
 801457c:	6822      	ldr	r2, [r4, #0]
 801457e:	0610      	lsls	r0, r2, #24
 8014580:	f57f af62 	bpl.w	8014448 <_scanf_float+0x64>
 8014584:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8014588:	6022      	str	r2, [r4, #0]
 801458a:	e7f4      	b.n	8014576 <_scanf_float+0x192>
 801458c:	f1ba 0f00 	cmp.w	sl, #0
 8014590:	d10e      	bne.n	80145b0 <_scanf_float+0x1cc>
 8014592:	f1b9 0f00 	cmp.w	r9, #0
 8014596:	d10e      	bne.n	80145b6 <_scanf_float+0x1d2>
 8014598:	6822      	ldr	r2, [r4, #0]
 801459a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801459e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80145a2:	d108      	bne.n	80145b6 <_scanf_float+0x1d2>
 80145a4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80145a8:	6022      	str	r2, [r4, #0]
 80145aa:	f04f 0a01 	mov.w	sl, #1
 80145ae:	e7e2      	b.n	8014576 <_scanf_float+0x192>
 80145b0:	f1ba 0f02 	cmp.w	sl, #2
 80145b4:	d055      	beq.n	8014662 <_scanf_float+0x27e>
 80145b6:	2d01      	cmp	r5, #1
 80145b8:	d002      	beq.n	80145c0 <_scanf_float+0x1dc>
 80145ba:	2d04      	cmp	r5, #4
 80145bc:	f47f af44 	bne.w	8014448 <_scanf_float+0x64>
 80145c0:	3501      	adds	r5, #1
 80145c2:	b2ed      	uxtb	r5, r5
 80145c4:	e7d7      	b.n	8014576 <_scanf_float+0x192>
 80145c6:	f1ba 0f01 	cmp.w	sl, #1
 80145ca:	f47f af3d 	bne.w	8014448 <_scanf_float+0x64>
 80145ce:	f04f 0a02 	mov.w	sl, #2
 80145d2:	e7d0      	b.n	8014576 <_scanf_float+0x192>
 80145d4:	b97d      	cbnz	r5, 80145f6 <_scanf_float+0x212>
 80145d6:	f1b9 0f00 	cmp.w	r9, #0
 80145da:	f47f af38 	bne.w	801444e <_scanf_float+0x6a>
 80145de:	6822      	ldr	r2, [r4, #0]
 80145e0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80145e4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80145e8:	f040 8108 	bne.w	80147fc <_scanf_float+0x418>
 80145ec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80145f0:	6022      	str	r2, [r4, #0]
 80145f2:	2501      	movs	r5, #1
 80145f4:	e7bf      	b.n	8014576 <_scanf_float+0x192>
 80145f6:	2d03      	cmp	r5, #3
 80145f8:	d0e2      	beq.n	80145c0 <_scanf_float+0x1dc>
 80145fa:	2d05      	cmp	r5, #5
 80145fc:	e7de      	b.n	80145bc <_scanf_float+0x1d8>
 80145fe:	2d02      	cmp	r5, #2
 8014600:	f47f af22 	bne.w	8014448 <_scanf_float+0x64>
 8014604:	2503      	movs	r5, #3
 8014606:	e7b6      	b.n	8014576 <_scanf_float+0x192>
 8014608:	2d06      	cmp	r5, #6
 801460a:	f47f af1d 	bne.w	8014448 <_scanf_float+0x64>
 801460e:	2507      	movs	r5, #7
 8014610:	e7b1      	b.n	8014576 <_scanf_float+0x192>
 8014612:	6822      	ldr	r2, [r4, #0]
 8014614:	0591      	lsls	r1, r2, #22
 8014616:	f57f af17 	bpl.w	8014448 <_scanf_float+0x64>
 801461a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801461e:	6022      	str	r2, [r4, #0]
 8014620:	f8cd 9008 	str.w	r9, [sp, #8]
 8014624:	e7a7      	b.n	8014576 <_scanf_float+0x192>
 8014626:	6822      	ldr	r2, [r4, #0]
 8014628:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801462c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8014630:	d006      	beq.n	8014640 <_scanf_float+0x25c>
 8014632:	0550      	lsls	r0, r2, #21
 8014634:	f57f af08 	bpl.w	8014448 <_scanf_float+0x64>
 8014638:	f1b9 0f00 	cmp.w	r9, #0
 801463c:	f000 80de 	beq.w	80147fc <_scanf_float+0x418>
 8014640:	0591      	lsls	r1, r2, #22
 8014642:	bf58      	it	pl
 8014644:	9902      	ldrpl	r1, [sp, #8]
 8014646:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801464a:	bf58      	it	pl
 801464c:	eba9 0101 	subpl.w	r1, r9, r1
 8014650:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8014654:	bf58      	it	pl
 8014656:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801465a:	6022      	str	r2, [r4, #0]
 801465c:	f04f 0900 	mov.w	r9, #0
 8014660:	e789      	b.n	8014576 <_scanf_float+0x192>
 8014662:	f04f 0a03 	mov.w	sl, #3
 8014666:	e786      	b.n	8014576 <_scanf_float+0x192>
 8014668:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801466c:	4639      	mov	r1, r7
 801466e:	4640      	mov	r0, r8
 8014670:	4798      	blx	r3
 8014672:	2800      	cmp	r0, #0
 8014674:	f43f aedb 	beq.w	801442e <_scanf_float+0x4a>
 8014678:	e6e6      	b.n	8014448 <_scanf_float+0x64>
 801467a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801467e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014682:	463a      	mov	r2, r7
 8014684:	4640      	mov	r0, r8
 8014686:	4798      	blx	r3
 8014688:	6923      	ldr	r3, [r4, #16]
 801468a:	3b01      	subs	r3, #1
 801468c:	6123      	str	r3, [r4, #16]
 801468e:	e6e8      	b.n	8014462 <_scanf_float+0x7e>
 8014690:	1e6b      	subs	r3, r5, #1
 8014692:	2b06      	cmp	r3, #6
 8014694:	d824      	bhi.n	80146e0 <_scanf_float+0x2fc>
 8014696:	2d02      	cmp	r5, #2
 8014698:	d836      	bhi.n	8014708 <_scanf_float+0x324>
 801469a:	9b01      	ldr	r3, [sp, #4]
 801469c:	429e      	cmp	r6, r3
 801469e:	f67f aee4 	bls.w	801446a <_scanf_float+0x86>
 80146a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80146a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80146aa:	463a      	mov	r2, r7
 80146ac:	4640      	mov	r0, r8
 80146ae:	4798      	blx	r3
 80146b0:	6923      	ldr	r3, [r4, #16]
 80146b2:	3b01      	subs	r3, #1
 80146b4:	6123      	str	r3, [r4, #16]
 80146b6:	e7f0      	b.n	801469a <_scanf_float+0x2b6>
 80146b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80146bc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80146c0:	463a      	mov	r2, r7
 80146c2:	4640      	mov	r0, r8
 80146c4:	4798      	blx	r3
 80146c6:	6923      	ldr	r3, [r4, #16]
 80146c8:	3b01      	subs	r3, #1
 80146ca:	6123      	str	r3, [r4, #16]
 80146cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80146d0:	fa5f fa8a 	uxtb.w	sl, sl
 80146d4:	f1ba 0f02 	cmp.w	sl, #2
 80146d8:	d1ee      	bne.n	80146b8 <_scanf_float+0x2d4>
 80146da:	3d03      	subs	r5, #3
 80146dc:	b2ed      	uxtb	r5, r5
 80146de:	1b76      	subs	r6, r6, r5
 80146e0:	6823      	ldr	r3, [r4, #0]
 80146e2:	05da      	lsls	r2, r3, #23
 80146e4:	d530      	bpl.n	8014748 <_scanf_float+0x364>
 80146e6:	055b      	lsls	r3, r3, #21
 80146e8:	d511      	bpl.n	801470e <_scanf_float+0x32a>
 80146ea:	9b01      	ldr	r3, [sp, #4]
 80146ec:	429e      	cmp	r6, r3
 80146ee:	f67f aebc 	bls.w	801446a <_scanf_float+0x86>
 80146f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80146f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80146fa:	463a      	mov	r2, r7
 80146fc:	4640      	mov	r0, r8
 80146fe:	4798      	blx	r3
 8014700:	6923      	ldr	r3, [r4, #16]
 8014702:	3b01      	subs	r3, #1
 8014704:	6123      	str	r3, [r4, #16]
 8014706:	e7f0      	b.n	80146ea <_scanf_float+0x306>
 8014708:	46aa      	mov	sl, r5
 801470a:	46b3      	mov	fp, r6
 801470c:	e7de      	b.n	80146cc <_scanf_float+0x2e8>
 801470e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8014712:	6923      	ldr	r3, [r4, #16]
 8014714:	2965      	cmp	r1, #101	@ 0x65
 8014716:	f103 33ff 	add.w	r3, r3, #4294967295
 801471a:	f106 35ff 	add.w	r5, r6, #4294967295
 801471e:	6123      	str	r3, [r4, #16]
 8014720:	d00c      	beq.n	801473c <_scanf_float+0x358>
 8014722:	2945      	cmp	r1, #69	@ 0x45
 8014724:	d00a      	beq.n	801473c <_scanf_float+0x358>
 8014726:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801472a:	463a      	mov	r2, r7
 801472c:	4640      	mov	r0, r8
 801472e:	4798      	blx	r3
 8014730:	6923      	ldr	r3, [r4, #16]
 8014732:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8014736:	3b01      	subs	r3, #1
 8014738:	1eb5      	subs	r5, r6, #2
 801473a:	6123      	str	r3, [r4, #16]
 801473c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014740:	463a      	mov	r2, r7
 8014742:	4640      	mov	r0, r8
 8014744:	4798      	blx	r3
 8014746:	462e      	mov	r6, r5
 8014748:	6822      	ldr	r2, [r4, #0]
 801474a:	f012 0210 	ands.w	r2, r2, #16
 801474e:	d001      	beq.n	8014754 <_scanf_float+0x370>
 8014750:	2000      	movs	r0, #0
 8014752:	e68b      	b.n	801446c <_scanf_float+0x88>
 8014754:	7032      	strb	r2, [r6, #0]
 8014756:	6823      	ldr	r3, [r4, #0]
 8014758:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801475c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014760:	d11c      	bne.n	801479c <_scanf_float+0x3b8>
 8014762:	9b02      	ldr	r3, [sp, #8]
 8014764:	454b      	cmp	r3, r9
 8014766:	eba3 0209 	sub.w	r2, r3, r9
 801476a:	d123      	bne.n	80147b4 <_scanf_float+0x3d0>
 801476c:	9901      	ldr	r1, [sp, #4]
 801476e:	2200      	movs	r2, #0
 8014770:	4640      	mov	r0, r8
 8014772:	f002 fc09 	bl	8016f88 <_strtod_r>
 8014776:	9b03      	ldr	r3, [sp, #12]
 8014778:	6821      	ldr	r1, [r4, #0]
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	f011 0f02 	tst.w	r1, #2
 8014780:	ec57 6b10 	vmov	r6, r7, d0
 8014784:	f103 0204 	add.w	r2, r3, #4
 8014788:	d01f      	beq.n	80147ca <_scanf_float+0x3e6>
 801478a:	9903      	ldr	r1, [sp, #12]
 801478c:	600a      	str	r2, [r1, #0]
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	e9c3 6700 	strd	r6, r7, [r3]
 8014794:	68e3      	ldr	r3, [r4, #12]
 8014796:	3301      	adds	r3, #1
 8014798:	60e3      	str	r3, [r4, #12]
 801479a:	e7d9      	b.n	8014750 <_scanf_float+0x36c>
 801479c:	9b04      	ldr	r3, [sp, #16]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d0e4      	beq.n	801476c <_scanf_float+0x388>
 80147a2:	9905      	ldr	r1, [sp, #20]
 80147a4:	230a      	movs	r3, #10
 80147a6:	3101      	adds	r1, #1
 80147a8:	4640      	mov	r0, r8
 80147aa:	f002 fc6d 	bl	8017088 <_strtol_r>
 80147ae:	9b04      	ldr	r3, [sp, #16]
 80147b0:	9e05      	ldr	r6, [sp, #20]
 80147b2:	1ac2      	subs	r2, r0, r3
 80147b4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80147b8:	429e      	cmp	r6, r3
 80147ba:	bf28      	it	cs
 80147bc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80147c0:	4910      	ldr	r1, [pc, #64]	@ (8014804 <_scanf_float+0x420>)
 80147c2:	4630      	mov	r0, r6
 80147c4:	f000 f8f6 	bl	80149b4 <siprintf>
 80147c8:	e7d0      	b.n	801476c <_scanf_float+0x388>
 80147ca:	f011 0f04 	tst.w	r1, #4
 80147ce:	9903      	ldr	r1, [sp, #12]
 80147d0:	600a      	str	r2, [r1, #0]
 80147d2:	d1dc      	bne.n	801478e <_scanf_float+0x3aa>
 80147d4:	681d      	ldr	r5, [r3, #0]
 80147d6:	4632      	mov	r2, r6
 80147d8:	463b      	mov	r3, r7
 80147da:	4630      	mov	r0, r6
 80147dc:	4639      	mov	r1, r7
 80147de:	f7ec f9cd 	bl	8000b7c <__aeabi_dcmpun>
 80147e2:	b128      	cbz	r0, 80147f0 <_scanf_float+0x40c>
 80147e4:	4808      	ldr	r0, [pc, #32]	@ (8014808 <_scanf_float+0x424>)
 80147e6:	f000 f9c9 	bl	8014b7c <nanf>
 80147ea:	ed85 0a00 	vstr	s0, [r5]
 80147ee:	e7d1      	b.n	8014794 <_scanf_float+0x3b0>
 80147f0:	4630      	mov	r0, r6
 80147f2:	4639      	mov	r1, r7
 80147f4:	f7ec fa20 	bl	8000c38 <__aeabi_d2f>
 80147f8:	6028      	str	r0, [r5, #0]
 80147fa:	e7cb      	b.n	8014794 <_scanf_float+0x3b0>
 80147fc:	f04f 0900 	mov.w	r9, #0
 8014800:	e629      	b.n	8014456 <_scanf_float+0x72>
 8014802:	bf00      	nop
 8014804:	08025bf0 	.word	0x08025bf0
 8014808:	08025f85 	.word	0x08025f85

0801480c <std>:
 801480c:	2300      	movs	r3, #0
 801480e:	b510      	push	{r4, lr}
 8014810:	4604      	mov	r4, r0
 8014812:	e9c0 3300 	strd	r3, r3, [r0]
 8014816:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801481a:	6083      	str	r3, [r0, #8]
 801481c:	8181      	strh	r1, [r0, #12]
 801481e:	6643      	str	r3, [r0, #100]	@ 0x64
 8014820:	81c2      	strh	r2, [r0, #14]
 8014822:	6183      	str	r3, [r0, #24]
 8014824:	4619      	mov	r1, r3
 8014826:	2208      	movs	r2, #8
 8014828:	305c      	adds	r0, #92	@ 0x5c
 801482a:	f000 f926 	bl	8014a7a <memset>
 801482e:	4b0d      	ldr	r3, [pc, #52]	@ (8014864 <std+0x58>)
 8014830:	6263      	str	r3, [r4, #36]	@ 0x24
 8014832:	4b0d      	ldr	r3, [pc, #52]	@ (8014868 <std+0x5c>)
 8014834:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014836:	4b0d      	ldr	r3, [pc, #52]	@ (801486c <std+0x60>)
 8014838:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801483a:	4b0d      	ldr	r3, [pc, #52]	@ (8014870 <std+0x64>)
 801483c:	6323      	str	r3, [r4, #48]	@ 0x30
 801483e:	4b0d      	ldr	r3, [pc, #52]	@ (8014874 <std+0x68>)
 8014840:	6224      	str	r4, [r4, #32]
 8014842:	429c      	cmp	r4, r3
 8014844:	d006      	beq.n	8014854 <std+0x48>
 8014846:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801484a:	4294      	cmp	r4, r2
 801484c:	d002      	beq.n	8014854 <std+0x48>
 801484e:	33d0      	adds	r3, #208	@ 0xd0
 8014850:	429c      	cmp	r4, r3
 8014852:	d105      	bne.n	8014860 <std+0x54>
 8014854:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801485c:	f000 b98a 	b.w	8014b74 <__retarget_lock_init_recursive>
 8014860:	bd10      	pop	{r4, pc}
 8014862:	bf00      	nop
 8014864:	080149f5 	.word	0x080149f5
 8014868:	08014a17 	.word	0x08014a17
 801486c:	08014a4f 	.word	0x08014a4f
 8014870:	08014a73 	.word	0x08014a73
 8014874:	20004e98 	.word	0x20004e98

08014878 <stdio_exit_handler>:
 8014878:	4a02      	ldr	r2, [pc, #8]	@ (8014884 <stdio_exit_handler+0xc>)
 801487a:	4903      	ldr	r1, [pc, #12]	@ (8014888 <stdio_exit_handler+0x10>)
 801487c:	4803      	ldr	r0, [pc, #12]	@ (801488c <stdio_exit_handler+0x14>)
 801487e:	f000 b869 	b.w	8014954 <_fwalk_sglue>
 8014882:	bf00      	nop
 8014884:	200001c8 	.word	0x200001c8
 8014888:	080176c9 	.word	0x080176c9
 801488c:	200001d8 	.word	0x200001d8

08014890 <cleanup_stdio>:
 8014890:	6841      	ldr	r1, [r0, #4]
 8014892:	4b0c      	ldr	r3, [pc, #48]	@ (80148c4 <cleanup_stdio+0x34>)
 8014894:	4299      	cmp	r1, r3
 8014896:	b510      	push	{r4, lr}
 8014898:	4604      	mov	r4, r0
 801489a:	d001      	beq.n	80148a0 <cleanup_stdio+0x10>
 801489c:	f002 ff14 	bl	80176c8 <_fflush_r>
 80148a0:	68a1      	ldr	r1, [r4, #8]
 80148a2:	4b09      	ldr	r3, [pc, #36]	@ (80148c8 <cleanup_stdio+0x38>)
 80148a4:	4299      	cmp	r1, r3
 80148a6:	d002      	beq.n	80148ae <cleanup_stdio+0x1e>
 80148a8:	4620      	mov	r0, r4
 80148aa:	f002 ff0d 	bl	80176c8 <_fflush_r>
 80148ae:	68e1      	ldr	r1, [r4, #12]
 80148b0:	4b06      	ldr	r3, [pc, #24]	@ (80148cc <cleanup_stdio+0x3c>)
 80148b2:	4299      	cmp	r1, r3
 80148b4:	d004      	beq.n	80148c0 <cleanup_stdio+0x30>
 80148b6:	4620      	mov	r0, r4
 80148b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80148bc:	f002 bf04 	b.w	80176c8 <_fflush_r>
 80148c0:	bd10      	pop	{r4, pc}
 80148c2:	bf00      	nop
 80148c4:	20004e98 	.word	0x20004e98
 80148c8:	20004f00 	.word	0x20004f00
 80148cc:	20004f68 	.word	0x20004f68

080148d0 <global_stdio_init.part.0>:
 80148d0:	b510      	push	{r4, lr}
 80148d2:	4b0b      	ldr	r3, [pc, #44]	@ (8014900 <global_stdio_init.part.0+0x30>)
 80148d4:	4c0b      	ldr	r4, [pc, #44]	@ (8014904 <global_stdio_init.part.0+0x34>)
 80148d6:	4a0c      	ldr	r2, [pc, #48]	@ (8014908 <global_stdio_init.part.0+0x38>)
 80148d8:	601a      	str	r2, [r3, #0]
 80148da:	4620      	mov	r0, r4
 80148dc:	2200      	movs	r2, #0
 80148de:	2104      	movs	r1, #4
 80148e0:	f7ff ff94 	bl	801480c <std>
 80148e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80148e8:	2201      	movs	r2, #1
 80148ea:	2109      	movs	r1, #9
 80148ec:	f7ff ff8e 	bl	801480c <std>
 80148f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80148f4:	2202      	movs	r2, #2
 80148f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80148fa:	2112      	movs	r1, #18
 80148fc:	f7ff bf86 	b.w	801480c <std>
 8014900:	20004fd0 	.word	0x20004fd0
 8014904:	20004e98 	.word	0x20004e98
 8014908:	08014879 	.word	0x08014879

0801490c <__sfp_lock_acquire>:
 801490c:	4801      	ldr	r0, [pc, #4]	@ (8014914 <__sfp_lock_acquire+0x8>)
 801490e:	f000 b932 	b.w	8014b76 <__retarget_lock_acquire_recursive>
 8014912:	bf00      	nop
 8014914:	20004fd9 	.word	0x20004fd9

08014918 <__sfp_lock_release>:
 8014918:	4801      	ldr	r0, [pc, #4]	@ (8014920 <__sfp_lock_release+0x8>)
 801491a:	f000 b92d 	b.w	8014b78 <__retarget_lock_release_recursive>
 801491e:	bf00      	nop
 8014920:	20004fd9 	.word	0x20004fd9

08014924 <__sinit>:
 8014924:	b510      	push	{r4, lr}
 8014926:	4604      	mov	r4, r0
 8014928:	f7ff fff0 	bl	801490c <__sfp_lock_acquire>
 801492c:	6a23      	ldr	r3, [r4, #32]
 801492e:	b11b      	cbz	r3, 8014938 <__sinit+0x14>
 8014930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014934:	f7ff bff0 	b.w	8014918 <__sfp_lock_release>
 8014938:	4b04      	ldr	r3, [pc, #16]	@ (801494c <__sinit+0x28>)
 801493a:	6223      	str	r3, [r4, #32]
 801493c:	4b04      	ldr	r3, [pc, #16]	@ (8014950 <__sinit+0x2c>)
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	2b00      	cmp	r3, #0
 8014942:	d1f5      	bne.n	8014930 <__sinit+0xc>
 8014944:	f7ff ffc4 	bl	80148d0 <global_stdio_init.part.0>
 8014948:	e7f2      	b.n	8014930 <__sinit+0xc>
 801494a:	bf00      	nop
 801494c:	08014891 	.word	0x08014891
 8014950:	20004fd0 	.word	0x20004fd0

08014954 <_fwalk_sglue>:
 8014954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014958:	4607      	mov	r7, r0
 801495a:	4688      	mov	r8, r1
 801495c:	4614      	mov	r4, r2
 801495e:	2600      	movs	r6, #0
 8014960:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014964:	f1b9 0901 	subs.w	r9, r9, #1
 8014968:	d505      	bpl.n	8014976 <_fwalk_sglue+0x22>
 801496a:	6824      	ldr	r4, [r4, #0]
 801496c:	2c00      	cmp	r4, #0
 801496e:	d1f7      	bne.n	8014960 <_fwalk_sglue+0xc>
 8014970:	4630      	mov	r0, r6
 8014972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014976:	89ab      	ldrh	r3, [r5, #12]
 8014978:	2b01      	cmp	r3, #1
 801497a:	d907      	bls.n	801498c <_fwalk_sglue+0x38>
 801497c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014980:	3301      	adds	r3, #1
 8014982:	d003      	beq.n	801498c <_fwalk_sglue+0x38>
 8014984:	4629      	mov	r1, r5
 8014986:	4638      	mov	r0, r7
 8014988:	47c0      	blx	r8
 801498a:	4306      	orrs	r6, r0
 801498c:	3568      	adds	r5, #104	@ 0x68
 801498e:	e7e9      	b.n	8014964 <_fwalk_sglue+0x10>

08014990 <iprintf>:
 8014990:	b40f      	push	{r0, r1, r2, r3}
 8014992:	b507      	push	{r0, r1, r2, lr}
 8014994:	4906      	ldr	r1, [pc, #24]	@ (80149b0 <iprintf+0x20>)
 8014996:	ab04      	add	r3, sp, #16
 8014998:	6808      	ldr	r0, [r1, #0]
 801499a:	f853 2b04 	ldr.w	r2, [r3], #4
 801499e:	6881      	ldr	r1, [r0, #8]
 80149a0:	9301      	str	r3, [sp, #4]
 80149a2:	f002 fcf5 	bl	8017390 <_vfiprintf_r>
 80149a6:	b003      	add	sp, #12
 80149a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80149ac:	b004      	add	sp, #16
 80149ae:	4770      	bx	lr
 80149b0:	200001d4 	.word	0x200001d4

080149b4 <siprintf>:
 80149b4:	b40e      	push	{r1, r2, r3}
 80149b6:	b500      	push	{lr}
 80149b8:	b09c      	sub	sp, #112	@ 0x70
 80149ba:	ab1d      	add	r3, sp, #116	@ 0x74
 80149bc:	9002      	str	r0, [sp, #8]
 80149be:	9006      	str	r0, [sp, #24]
 80149c0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80149c4:	4809      	ldr	r0, [pc, #36]	@ (80149ec <siprintf+0x38>)
 80149c6:	9107      	str	r1, [sp, #28]
 80149c8:	9104      	str	r1, [sp, #16]
 80149ca:	4909      	ldr	r1, [pc, #36]	@ (80149f0 <siprintf+0x3c>)
 80149cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80149d0:	9105      	str	r1, [sp, #20]
 80149d2:	6800      	ldr	r0, [r0, #0]
 80149d4:	9301      	str	r3, [sp, #4]
 80149d6:	a902      	add	r1, sp, #8
 80149d8:	f002 fbb4 	bl	8017144 <_svfiprintf_r>
 80149dc:	9b02      	ldr	r3, [sp, #8]
 80149de:	2200      	movs	r2, #0
 80149e0:	701a      	strb	r2, [r3, #0]
 80149e2:	b01c      	add	sp, #112	@ 0x70
 80149e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80149e8:	b003      	add	sp, #12
 80149ea:	4770      	bx	lr
 80149ec:	200001d4 	.word	0x200001d4
 80149f0:	ffff0208 	.word	0xffff0208

080149f4 <__sread>:
 80149f4:	b510      	push	{r4, lr}
 80149f6:	460c      	mov	r4, r1
 80149f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149fc:	f000 f86c 	bl	8014ad8 <_read_r>
 8014a00:	2800      	cmp	r0, #0
 8014a02:	bfab      	itete	ge
 8014a04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014a06:	89a3      	ldrhlt	r3, [r4, #12]
 8014a08:	181b      	addge	r3, r3, r0
 8014a0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014a0e:	bfac      	ite	ge
 8014a10:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014a12:	81a3      	strhlt	r3, [r4, #12]
 8014a14:	bd10      	pop	{r4, pc}

08014a16 <__swrite>:
 8014a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a1a:	461f      	mov	r7, r3
 8014a1c:	898b      	ldrh	r3, [r1, #12]
 8014a1e:	05db      	lsls	r3, r3, #23
 8014a20:	4605      	mov	r5, r0
 8014a22:	460c      	mov	r4, r1
 8014a24:	4616      	mov	r6, r2
 8014a26:	d505      	bpl.n	8014a34 <__swrite+0x1e>
 8014a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a2c:	2302      	movs	r3, #2
 8014a2e:	2200      	movs	r2, #0
 8014a30:	f000 f840 	bl	8014ab4 <_lseek_r>
 8014a34:	89a3      	ldrh	r3, [r4, #12]
 8014a36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014a3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014a3e:	81a3      	strh	r3, [r4, #12]
 8014a40:	4632      	mov	r2, r6
 8014a42:	463b      	mov	r3, r7
 8014a44:	4628      	mov	r0, r5
 8014a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014a4a:	f000 b857 	b.w	8014afc <_write_r>

08014a4e <__sseek>:
 8014a4e:	b510      	push	{r4, lr}
 8014a50:	460c      	mov	r4, r1
 8014a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a56:	f000 f82d 	bl	8014ab4 <_lseek_r>
 8014a5a:	1c43      	adds	r3, r0, #1
 8014a5c:	89a3      	ldrh	r3, [r4, #12]
 8014a5e:	bf15      	itete	ne
 8014a60:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014a62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014a66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014a6a:	81a3      	strheq	r3, [r4, #12]
 8014a6c:	bf18      	it	ne
 8014a6e:	81a3      	strhne	r3, [r4, #12]
 8014a70:	bd10      	pop	{r4, pc}

08014a72 <__sclose>:
 8014a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a76:	f000 b80d 	b.w	8014a94 <_close_r>

08014a7a <memset>:
 8014a7a:	4402      	add	r2, r0
 8014a7c:	4603      	mov	r3, r0
 8014a7e:	4293      	cmp	r3, r2
 8014a80:	d100      	bne.n	8014a84 <memset+0xa>
 8014a82:	4770      	bx	lr
 8014a84:	f803 1b01 	strb.w	r1, [r3], #1
 8014a88:	e7f9      	b.n	8014a7e <memset+0x4>
	...

08014a8c <_localeconv_r>:
 8014a8c:	4800      	ldr	r0, [pc, #0]	@ (8014a90 <_localeconv_r+0x4>)
 8014a8e:	4770      	bx	lr
 8014a90:	20000314 	.word	0x20000314

08014a94 <_close_r>:
 8014a94:	b538      	push	{r3, r4, r5, lr}
 8014a96:	4d06      	ldr	r5, [pc, #24]	@ (8014ab0 <_close_r+0x1c>)
 8014a98:	2300      	movs	r3, #0
 8014a9a:	4604      	mov	r4, r0
 8014a9c:	4608      	mov	r0, r1
 8014a9e:	602b      	str	r3, [r5, #0]
 8014aa0:	f7ef fd0c 	bl	80044bc <_close>
 8014aa4:	1c43      	adds	r3, r0, #1
 8014aa6:	d102      	bne.n	8014aae <_close_r+0x1a>
 8014aa8:	682b      	ldr	r3, [r5, #0]
 8014aaa:	b103      	cbz	r3, 8014aae <_close_r+0x1a>
 8014aac:	6023      	str	r3, [r4, #0]
 8014aae:	bd38      	pop	{r3, r4, r5, pc}
 8014ab0:	20004fd4 	.word	0x20004fd4

08014ab4 <_lseek_r>:
 8014ab4:	b538      	push	{r3, r4, r5, lr}
 8014ab6:	4d07      	ldr	r5, [pc, #28]	@ (8014ad4 <_lseek_r+0x20>)
 8014ab8:	4604      	mov	r4, r0
 8014aba:	4608      	mov	r0, r1
 8014abc:	4611      	mov	r1, r2
 8014abe:	2200      	movs	r2, #0
 8014ac0:	602a      	str	r2, [r5, #0]
 8014ac2:	461a      	mov	r2, r3
 8014ac4:	f7ef fd21 	bl	800450a <_lseek>
 8014ac8:	1c43      	adds	r3, r0, #1
 8014aca:	d102      	bne.n	8014ad2 <_lseek_r+0x1e>
 8014acc:	682b      	ldr	r3, [r5, #0]
 8014ace:	b103      	cbz	r3, 8014ad2 <_lseek_r+0x1e>
 8014ad0:	6023      	str	r3, [r4, #0]
 8014ad2:	bd38      	pop	{r3, r4, r5, pc}
 8014ad4:	20004fd4 	.word	0x20004fd4

08014ad8 <_read_r>:
 8014ad8:	b538      	push	{r3, r4, r5, lr}
 8014ada:	4d07      	ldr	r5, [pc, #28]	@ (8014af8 <_read_r+0x20>)
 8014adc:	4604      	mov	r4, r0
 8014ade:	4608      	mov	r0, r1
 8014ae0:	4611      	mov	r1, r2
 8014ae2:	2200      	movs	r2, #0
 8014ae4:	602a      	str	r2, [r5, #0]
 8014ae6:	461a      	mov	r2, r3
 8014ae8:	f7ef fcaf 	bl	800444a <_read>
 8014aec:	1c43      	adds	r3, r0, #1
 8014aee:	d102      	bne.n	8014af6 <_read_r+0x1e>
 8014af0:	682b      	ldr	r3, [r5, #0]
 8014af2:	b103      	cbz	r3, 8014af6 <_read_r+0x1e>
 8014af4:	6023      	str	r3, [r4, #0]
 8014af6:	bd38      	pop	{r3, r4, r5, pc}
 8014af8:	20004fd4 	.word	0x20004fd4

08014afc <_write_r>:
 8014afc:	b538      	push	{r3, r4, r5, lr}
 8014afe:	4d07      	ldr	r5, [pc, #28]	@ (8014b1c <_write_r+0x20>)
 8014b00:	4604      	mov	r4, r0
 8014b02:	4608      	mov	r0, r1
 8014b04:	4611      	mov	r1, r2
 8014b06:	2200      	movs	r2, #0
 8014b08:	602a      	str	r2, [r5, #0]
 8014b0a:	461a      	mov	r2, r3
 8014b0c:	f7ef fcba 	bl	8004484 <_write>
 8014b10:	1c43      	adds	r3, r0, #1
 8014b12:	d102      	bne.n	8014b1a <_write_r+0x1e>
 8014b14:	682b      	ldr	r3, [r5, #0]
 8014b16:	b103      	cbz	r3, 8014b1a <_write_r+0x1e>
 8014b18:	6023      	str	r3, [r4, #0]
 8014b1a:	bd38      	pop	{r3, r4, r5, pc}
 8014b1c:	20004fd4 	.word	0x20004fd4

08014b20 <__errno>:
 8014b20:	4b01      	ldr	r3, [pc, #4]	@ (8014b28 <__errno+0x8>)
 8014b22:	6818      	ldr	r0, [r3, #0]
 8014b24:	4770      	bx	lr
 8014b26:	bf00      	nop
 8014b28:	200001d4 	.word	0x200001d4

08014b2c <__libc_init_array>:
 8014b2c:	b570      	push	{r4, r5, r6, lr}
 8014b2e:	4d0d      	ldr	r5, [pc, #52]	@ (8014b64 <__libc_init_array+0x38>)
 8014b30:	4c0d      	ldr	r4, [pc, #52]	@ (8014b68 <__libc_init_array+0x3c>)
 8014b32:	1b64      	subs	r4, r4, r5
 8014b34:	10a4      	asrs	r4, r4, #2
 8014b36:	2600      	movs	r6, #0
 8014b38:	42a6      	cmp	r6, r4
 8014b3a:	d109      	bne.n	8014b50 <__libc_init_array+0x24>
 8014b3c:	4d0b      	ldr	r5, [pc, #44]	@ (8014b6c <__libc_init_array+0x40>)
 8014b3e:	4c0c      	ldr	r4, [pc, #48]	@ (8014b70 <__libc_init_array+0x44>)
 8014b40:	f003 fb74 	bl	801822c <_init>
 8014b44:	1b64      	subs	r4, r4, r5
 8014b46:	10a4      	asrs	r4, r4, #2
 8014b48:	2600      	movs	r6, #0
 8014b4a:	42a6      	cmp	r6, r4
 8014b4c:	d105      	bne.n	8014b5a <__libc_init_array+0x2e>
 8014b4e:	bd70      	pop	{r4, r5, r6, pc}
 8014b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8014b54:	4798      	blx	r3
 8014b56:	3601      	adds	r6, #1
 8014b58:	e7ee      	b.n	8014b38 <__libc_init_array+0xc>
 8014b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8014b5e:	4798      	blx	r3
 8014b60:	3601      	adds	r6, #1
 8014b62:	e7f2      	b.n	8014b4a <__libc_init_array+0x1e>
 8014b64:	08025ff0 	.word	0x08025ff0
 8014b68:	08025ff0 	.word	0x08025ff0
 8014b6c:	08025ff0 	.word	0x08025ff0
 8014b70:	08025ff4 	.word	0x08025ff4

08014b74 <__retarget_lock_init_recursive>:
 8014b74:	4770      	bx	lr

08014b76 <__retarget_lock_acquire_recursive>:
 8014b76:	4770      	bx	lr

08014b78 <__retarget_lock_release_recursive>:
 8014b78:	4770      	bx	lr
	...

08014b7c <nanf>:
 8014b7c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8014b84 <nanf+0x8>
 8014b80:	4770      	bx	lr
 8014b82:	bf00      	nop
 8014b84:	7fc00000 	.word	0x7fc00000

08014b88 <quorem>:
 8014b88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b8c:	6903      	ldr	r3, [r0, #16]
 8014b8e:	690c      	ldr	r4, [r1, #16]
 8014b90:	42a3      	cmp	r3, r4
 8014b92:	4607      	mov	r7, r0
 8014b94:	db7e      	blt.n	8014c94 <quorem+0x10c>
 8014b96:	3c01      	subs	r4, #1
 8014b98:	f101 0814 	add.w	r8, r1, #20
 8014b9c:	00a3      	lsls	r3, r4, #2
 8014b9e:	f100 0514 	add.w	r5, r0, #20
 8014ba2:	9300      	str	r3, [sp, #0]
 8014ba4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014ba8:	9301      	str	r3, [sp, #4]
 8014baa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014bae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014bb2:	3301      	adds	r3, #1
 8014bb4:	429a      	cmp	r2, r3
 8014bb6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014bba:	fbb2 f6f3 	udiv	r6, r2, r3
 8014bbe:	d32e      	bcc.n	8014c1e <quorem+0x96>
 8014bc0:	f04f 0a00 	mov.w	sl, #0
 8014bc4:	46c4      	mov	ip, r8
 8014bc6:	46ae      	mov	lr, r5
 8014bc8:	46d3      	mov	fp, sl
 8014bca:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014bce:	b298      	uxth	r0, r3
 8014bd0:	fb06 a000 	mla	r0, r6, r0, sl
 8014bd4:	0c02      	lsrs	r2, r0, #16
 8014bd6:	0c1b      	lsrs	r3, r3, #16
 8014bd8:	fb06 2303 	mla	r3, r6, r3, r2
 8014bdc:	f8de 2000 	ldr.w	r2, [lr]
 8014be0:	b280      	uxth	r0, r0
 8014be2:	b292      	uxth	r2, r2
 8014be4:	1a12      	subs	r2, r2, r0
 8014be6:	445a      	add	r2, fp
 8014be8:	f8de 0000 	ldr.w	r0, [lr]
 8014bec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014bf0:	b29b      	uxth	r3, r3
 8014bf2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8014bf6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8014bfa:	b292      	uxth	r2, r2
 8014bfc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014c00:	45e1      	cmp	r9, ip
 8014c02:	f84e 2b04 	str.w	r2, [lr], #4
 8014c06:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8014c0a:	d2de      	bcs.n	8014bca <quorem+0x42>
 8014c0c:	9b00      	ldr	r3, [sp, #0]
 8014c0e:	58eb      	ldr	r3, [r5, r3]
 8014c10:	b92b      	cbnz	r3, 8014c1e <quorem+0x96>
 8014c12:	9b01      	ldr	r3, [sp, #4]
 8014c14:	3b04      	subs	r3, #4
 8014c16:	429d      	cmp	r5, r3
 8014c18:	461a      	mov	r2, r3
 8014c1a:	d32f      	bcc.n	8014c7c <quorem+0xf4>
 8014c1c:	613c      	str	r4, [r7, #16]
 8014c1e:	4638      	mov	r0, r7
 8014c20:	f001 f9c2 	bl	8015fa8 <__mcmp>
 8014c24:	2800      	cmp	r0, #0
 8014c26:	db25      	blt.n	8014c74 <quorem+0xec>
 8014c28:	4629      	mov	r1, r5
 8014c2a:	2000      	movs	r0, #0
 8014c2c:	f858 2b04 	ldr.w	r2, [r8], #4
 8014c30:	f8d1 c000 	ldr.w	ip, [r1]
 8014c34:	fa1f fe82 	uxth.w	lr, r2
 8014c38:	fa1f f38c 	uxth.w	r3, ip
 8014c3c:	eba3 030e 	sub.w	r3, r3, lr
 8014c40:	4403      	add	r3, r0
 8014c42:	0c12      	lsrs	r2, r2, #16
 8014c44:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8014c48:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8014c4c:	b29b      	uxth	r3, r3
 8014c4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014c52:	45c1      	cmp	r9, r8
 8014c54:	f841 3b04 	str.w	r3, [r1], #4
 8014c58:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014c5c:	d2e6      	bcs.n	8014c2c <quorem+0xa4>
 8014c5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014c62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014c66:	b922      	cbnz	r2, 8014c72 <quorem+0xea>
 8014c68:	3b04      	subs	r3, #4
 8014c6a:	429d      	cmp	r5, r3
 8014c6c:	461a      	mov	r2, r3
 8014c6e:	d30b      	bcc.n	8014c88 <quorem+0x100>
 8014c70:	613c      	str	r4, [r7, #16]
 8014c72:	3601      	adds	r6, #1
 8014c74:	4630      	mov	r0, r6
 8014c76:	b003      	add	sp, #12
 8014c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c7c:	6812      	ldr	r2, [r2, #0]
 8014c7e:	3b04      	subs	r3, #4
 8014c80:	2a00      	cmp	r2, #0
 8014c82:	d1cb      	bne.n	8014c1c <quorem+0x94>
 8014c84:	3c01      	subs	r4, #1
 8014c86:	e7c6      	b.n	8014c16 <quorem+0x8e>
 8014c88:	6812      	ldr	r2, [r2, #0]
 8014c8a:	3b04      	subs	r3, #4
 8014c8c:	2a00      	cmp	r2, #0
 8014c8e:	d1ef      	bne.n	8014c70 <quorem+0xe8>
 8014c90:	3c01      	subs	r4, #1
 8014c92:	e7ea      	b.n	8014c6a <quorem+0xe2>
 8014c94:	2000      	movs	r0, #0
 8014c96:	e7ee      	b.n	8014c76 <quorem+0xee>

08014c98 <_dtoa_r>:
 8014c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c9c:	69c7      	ldr	r7, [r0, #28]
 8014c9e:	b099      	sub	sp, #100	@ 0x64
 8014ca0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014ca4:	ec55 4b10 	vmov	r4, r5, d0
 8014ca8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8014caa:	9109      	str	r1, [sp, #36]	@ 0x24
 8014cac:	4683      	mov	fp, r0
 8014cae:	920e      	str	r2, [sp, #56]	@ 0x38
 8014cb0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014cb2:	b97f      	cbnz	r7, 8014cd4 <_dtoa_r+0x3c>
 8014cb4:	2010      	movs	r0, #16
 8014cb6:	f000 fdfd 	bl	80158b4 <malloc>
 8014cba:	4602      	mov	r2, r0
 8014cbc:	f8cb 001c 	str.w	r0, [fp, #28]
 8014cc0:	b920      	cbnz	r0, 8014ccc <_dtoa_r+0x34>
 8014cc2:	4ba7      	ldr	r3, [pc, #668]	@ (8014f60 <_dtoa_r+0x2c8>)
 8014cc4:	21ef      	movs	r1, #239	@ 0xef
 8014cc6:	48a7      	ldr	r0, [pc, #668]	@ (8014f64 <_dtoa_r+0x2cc>)
 8014cc8:	f002 fe0e 	bl	80178e8 <__assert_func>
 8014ccc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014cd0:	6007      	str	r7, [r0, #0]
 8014cd2:	60c7      	str	r7, [r0, #12]
 8014cd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014cd8:	6819      	ldr	r1, [r3, #0]
 8014cda:	b159      	cbz	r1, 8014cf4 <_dtoa_r+0x5c>
 8014cdc:	685a      	ldr	r2, [r3, #4]
 8014cde:	604a      	str	r2, [r1, #4]
 8014ce0:	2301      	movs	r3, #1
 8014ce2:	4093      	lsls	r3, r2
 8014ce4:	608b      	str	r3, [r1, #8]
 8014ce6:	4658      	mov	r0, fp
 8014ce8:	f000 feda 	bl	8015aa0 <_Bfree>
 8014cec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014cf0:	2200      	movs	r2, #0
 8014cf2:	601a      	str	r2, [r3, #0]
 8014cf4:	1e2b      	subs	r3, r5, #0
 8014cf6:	bfb9      	ittee	lt
 8014cf8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014cfc:	9303      	strlt	r3, [sp, #12]
 8014cfe:	2300      	movge	r3, #0
 8014d00:	6033      	strge	r3, [r6, #0]
 8014d02:	9f03      	ldr	r7, [sp, #12]
 8014d04:	4b98      	ldr	r3, [pc, #608]	@ (8014f68 <_dtoa_r+0x2d0>)
 8014d06:	bfbc      	itt	lt
 8014d08:	2201      	movlt	r2, #1
 8014d0a:	6032      	strlt	r2, [r6, #0]
 8014d0c:	43bb      	bics	r3, r7
 8014d0e:	d112      	bne.n	8014d36 <_dtoa_r+0x9e>
 8014d10:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014d12:	f242 730f 	movw	r3, #9999	@ 0x270f
 8014d16:	6013      	str	r3, [r2, #0]
 8014d18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014d1c:	4323      	orrs	r3, r4
 8014d1e:	f000 854d 	beq.w	80157bc <_dtoa_r+0xb24>
 8014d22:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014d24:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8014f7c <_dtoa_r+0x2e4>
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	f000 854f 	beq.w	80157cc <_dtoa_r+0xb34>
 8014d2e:	f10a 0303 	add.w	r3, sl, #3
 8014d32:	f000 bd49 	b.w	80157c8 <_dtoa_r+0xb30>
 8014d36:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014d3a:	2200      	movs	r2, #0
 8014d3c:	ec51 0b17 	vmov	r0, r1, d7
 8014d40:	2300      	movs	r3, #0
 8014d42:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8014d46:	f7eb fee7 	bl	8000b18 <__aeabi_dcmpeq>
 8014d4a:	4680      	mov	r8, r0
 8014d4c:	b158      	cbz	r0, 8014d66 <_dtoa_r+0xce>
 8014d4e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014d50:	2301      	movs	r3, #1
 8014d52:	6013      	str	r3, [r2, #0]
 8014d54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014d56:	b113      	cbz	r3, 8014d5e <_dtoa_r+0xc6>
 8014d58:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8014d5a:	4b84      	ldr	r3, [pc, #528]	@ (8014f6c <_dtoa_r+0x2d4>)
 8014d5c:	6013      	str	r3, [r2, #0]
 8014d5e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8014f80 <_dtoa_r+0x2e8>
 8014d62:	f000 bd33 	b.w	80157cc <_dtoa_r+0xb34>
 8014d66:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8014d6a:	aa16      	add	r2, sp, #88	@ 0x58
 8014d6c:	a917      	add	r1, sp, #92	@ 0x5c
 8014d6e:	4658      	mov	r0, fp
 8014d70:	f001 fa3a 	bl	80161e8 <__d2b>
 8014d74:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8014d78:	4681      	mov	r9, r0
 8014d7a:	2e00      	cmp	r6, #0
 8014d7c:	d077      	beq.n	8014e6e <_dtoa_r+0x1d6>
 8014d7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014d80:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8014d84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014d88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014d8c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8014d90:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8014d94:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8014d98:	4619      	mov	r1, r3
 8014d9a:	2200      	movs	r2, #0
 8014d9c:	4b74      	ldr	r3, [pc, #464]	@ (8014f70 <_dtoa_r+0x2d8>)
 8014d9e:	f7eb fa9b 	bl	80002d8 <__aeabi_dsub>
 8014da2:	a369      	add	r3, pc, #420	@ (adr r3, 8014f48 <_dtoa_r+0x2b0>)
 8014da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014da8:	f7eb fc4e 	bl	8000648 <__aeabi_dmul>
 8014dac:	a368      	add	r3, pc, #416	@ (adr r3, 8014f50 <_dtoa_r+0x2b8>)
 8014dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014db2:	f7eb fa93 	bl	80002dc <__adddf3>
 8014db6:	4604      	mov	r4, r0
 8014db8:	4630      	mov	r0, r6
 8014dba:	460d      	mov	r5, r1
 8014dbc:	f7eb fbda 	bl	8000574 <__aeabi_i2d>
 8014dc0:	a365      	add	r3, pc, #404	@ (adr r3, 8014f58 <_dtoa_r+0x2c0>)
 8014dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dc6:	f7eb fc3f 	bl	8000648 <__aeabi_dmul>
 8014dca:	4602      	mov	r2, r0
 8014dcc:	460b      	mov	r3, r1
 8014dce:	4620      	mov	r0, r4
 8014dd0:	4629      	mov	r1, r5
 8014dd2:	f7eb fa83 	bl	80002dc <__adddf3>
 8014dd6:	4604      	mov	r4, r0
 8014dd8:	460d      	mov	r5, r1
 8014dda:	f7eb fee5 	bl	8000ba8 <__aeabi_d2iz>
 8014dde:	2200      	movs	r2, #0
 8014de0:	4607      	mov	r7, r0
 8014de2:	2300      	movs	r3, #0
 8014de4:	4620      	mov	r0, r4
 8014de6:	4629      	mov	r1, r5
 8014de8:	f7eb fea0 	bl	8000b2c <__aeabi_dcmplt>
 8014dec:	b140      	cbz	r0, 8014e00 <_dtoa_r+0x168>
 8014dee:	4638      	mov	r0, r7
 8014df0:	f7eb fbc0 	bl	8000574 <__aeabi_i2d>
 8014df4:	4622      	mov	r2, r4
 8014df6:	462b      	mov	r3, r5
 8014df8:	f7eb fe8e 	bl	8000b18 <__aeabi_dcmpeq>
 8014dfc:	b900      	cbnz	r0, 8014e00 <_dtoa_r+0x168>
 8014dfe:	3f01      	subs	r7, #1
 8014e00:	2f16      	cmp	r7, #22
 8014e02:	d851      	bhi.n	8014ea8 <_dtoa_r+0x210>
 8014e04:	4b5b      	ldr	r3, [pc, #364]	@ (8014f74 <_dtoa_r+0x2dc>)
 8014e06:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014e12:	f7eb fe8b 	bl	8000b2c <__aeabi_dcmplt>
 8014e16:	2800      	cmp	r0, #0
 8014e18:	d048      	beq.n	8014eac <_dtoa_r+0x214>
 8014e1a:	3f01      	subs	r7, #1
 8014e1c:	2300      	movs	r3, #0
 8014e1e:	9312      	str	r3, [sp, #72]	@ 0x48
 8014e20:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014e22:	1b9b      	subs	r3, r3, r6
 8014e24:	1e5a      	subs	r2, r3, #1
 8014e26:	bf44      	itt	mi
 8014e28:	f1c3 0801 	rsbmi	r8, r3, #1
 8014e2c:	2300      	movmi	r3, #0
 8014e2e:	9208      	str	r2, [sp, #32]
 8014e30:	bf54      	ite	pl
 8014e32:	f04f 0800 	movpl.w	r8, #0
 8014e36:	9308      	strmi	r3, [sp, #32]
 8014e38:	2f00      	cmp	r7, #0
 8014e3a:	db39      	blt.n	8014eb0 <_dtoa_r+0x218>
 8014e3c:	9b08      	ldr	r3, [sp, #32]
 8014e3e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8014e40:	443b      	add	r3, r7
 8014e42:	9308      	str	r3, [sp, #32]
 8014e44:	2300      	movs	r3, #0
 8014e46:	930a      	str	r3, [sp, #40]	@ 0x28
 8014e48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014e4a:	2b09      	cmp	r3, #9
 8014e4c:	d864      	bhi.n	8014f18 <_dtoa_r+0x280>
 8014e4e:	2b05      	cmp	r3, #5
 8014e50:	bfc4      	itt	gt
 8014e52:	3b04      	subgt	r3, #4
 8014e54:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8014e56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014e58:	f1a3 0302 	sub.w	r3, r3, #2
 8014e5c:	bfcc      	ite	gt
 8014e5e:	2400      	movgt	r4, #0
 8014e60:	2401      	movle	r4, #1
 8014e62:	2b03      	cmp	r3, #3
 8014e64:	d863      	bhi.n	8014f2e <_dtoa_r+0x296>
 8014e66:	e8df f003 	tbb	[pc, r3]
 8014e6a:	372a      	.short	0x372a
 8014e6c:	5535      	.short	0x5535
 8014e6e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8014e72:	441e      	add	r6, r3
 8014e74:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8014e78:	2b20      	cmp	r3, #32
 8014e7a:	bfc1      	itttt	gt
 8014e7c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8014e80:	409f      	lslgt	r7, r3
 8014e82:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8014e86:	fa24 f303 	lsrgt.w	r3, r4, r3
 8014e8a:	bfd6      	itet	le
 8014e8c:	f1c3 0320 	rsble	r3, r3, #32
 8014e90:	ea47 0003 	orrgt.w	r0, r7, r3
 8014e94:	fa04 f003 	lslle.w	r0, r4, r3
 8014e98:	f7eb fb5c 	bl	8000554 <__aeabi_ui2d>
 8014e9c:	2201      	movs	r2, #1
 8014e9e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8014ea2:	3e01      	subs	r6, #1
 8014ea4:	9214      	str	r2, [sp, #80]	@ 0x50
 8014ea6:	e777      	b.n	8014d98 <_dtoa_r+0x100>
 8014ea8:	2301      	movs	r3, #1
 8014eaa:	e7b8      	b.n	8014e1e <_dtoa_r+0x186>
 8014eac:	9012      	str	r0, [sp, #72]	@ 0x48
 8014eae:	e7b7      	b.n	8014e20 <_dtoa_r+0x188>
 8014eb0:	427b      	negs	r3, r7
 8014eb2:	930a      	str	r3, [sp, #40]	@ 0x28
 8014eb4:	2300      	movs	r3, #0
 8014eb6:	eba8 0807 	sub.w	r8, r8, r7
 8014eba:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014ebc:	e7c4      	b.n	8014e48 <_dtoa_r+0x1b0>
 8014ebe:	2300      	movs	r3, #0
 8014ec0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014ec2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	dc35      	bgt.n	8014f34 <_dtoa_r+0x29c>
 8014ec8:	2301      	movs	r3, #1
 8014eca:	9300      	str	r3, [sp, #0]
 8014ecc:	9307      	str	r3, [sp, #28]
 8014ece:	461a      	mov	r2, r3
 8014ed0:	920e      	str	r2, [sp, #56]	@ 0x38
 8014ed2:	e00b      	b.n	8014eec <_dtoa_r+0x254>
 8014ed4:	2301      	movs	r3, #1
 8014ed6:	e7f3      	b.n	8014ec0 <_dtoa_r+0x228>
 8014ed8:	2300      	movs	r3, #0
 8014eda:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014edc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014ede:	18fb      	adds	r3, r7, r3
 8014ee0:	9300      	str	r3, [sp, #0]
 8014ee2:	3301      	adds	r3, #1
 8014ee4:	2b01      	cmp	r3, #1
 8014ee6:	9307      	str	r3, [sp, #28]
 8014ee8:	bfb8      	it	lt
 8014eea:	2301      	movlt	r3, #1
 8014eec:	f8db 001c 	ldr.w	r0, [fp, #28]
 8014ef0:	2100      	movs	r1, #0
 8014ef2:	2204      	movs	r2, #4
 8014ef4:	f102 0514 	add.w	r5, r2, #20
 8014ef8:	429d      	cmp	r5, r3
 8014efa:	d91f      	bls.n	8014f3c <_dtoa_r+0x2a4>
 8014efc:	6041      	str	r1, [r0, #4]
 8014efe:	4658      	mov	r0, fp
 8014f00:	f000 fd8e 	bl	8015a20 <_Balloc>
 8014f04:	4682      	mov	sl, r0
 8014f06:	2800      	cmp	r0, #0
 8014f08:	d13c      	bne.n	8014f84 <_dtoa_r+0x2ec>
 8014f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8014f78 <_dtoa_r+0x2e0>)
 8014f0c:	4602      	mov	r2, r0
 8014f0e:	f240 11af 	movw	r1, #431	@ 0x1af
 8014f12:	e6d8      	b.n	8014cc6 <_dtoa_r+0x2e>
 8014f14:	2301      	movs	r3, #1
 8014f16:	e7e0      	b.n	8014eda <_dtoa_r+0x242>
 8014f18:	2401      	movs	r4, #1
 8014f1a:	2300      	movs	r3, #0
 8014f1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8014f1e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014f20:	f04f 33ff 	mov.w	r3, #4294967295
 8014f24:	9300      	str	r3, [sp, #0]
 8014f26:	9307      	str	r3, [sp, #28]
 8014f28:	2200      	movs	r2, #0
 8014f2a:	2312      	movs	r3, #18
 8014f2c:	e7d0      	b.n	8014ed0 <_dtoa_r+0x238>
 8014f2e:	2301      	movs	r3, #1
 8014f30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014f32:	e7f5      	b.n	8014f20 <_dtoa_r+0x288>
 8014f34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014f36:	9300      	str	r3, [sp, #0]
 8014f38:	9307      	str	r3, [sp, #28]
 8014f3a:	e7d7      	b.n	8014eec <_dtoa_r+0x254>
 8014f3c:	3101      	adds	r1, #1
 8014f3e:	0052      	lsls	r2, r2, #1
 8014f40:	e7d8      	b.n	8014ef4 <_dtoa_r+0x25c>
 8014f42:	bf00      	nop
 8014f44:	f3af 8000 	nop.w
 8014f48:	636f4361 	.word	0x636f4361
 8014f4c:	3fd287a7 	.word	0x3fd287a7
 8014f50:	8b60c8b3 	.word	0x8b60c8b3
 8014f54:	3fc68a28 	.word	0x3fc68a28
 8014f58:	509f79fb 	.word	0x509f79fb
 8014f5c:	3fd34413 	.word	0x3fd34413
 8014f60:	08025c02 	.word	0x08025c02
 8014f64:	08025c19 	.word	0x08025c19
 8014f68:	7ff00000 	.word	0x7ff00000
 8014f6c:	08025bcd 	.word	0x08025bcd
 8014f70:	3ff80000 	.word	0x3ff80000
 8014f74:	08025d10 	.word	0x08025d10
 8014f78:	08025c71 	.word	0x08025c71
 8014f7c:	08025bfe 	.word	0x08025bfe
 8014f80:	08025bcc 	.word	0x08025bcc
 8014f84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014f88:	6018      	str	r0, [r3, #0]
 8014f8a:	9b07      	ldr	r3, [sp, #28]
 8014f8c:	2b0e      	cmp	r3, #14
 8014f8e:	f200 80a4 	bhi.w	80150da <_dtoa_r+0x442>
 8014f92:	2c00      	cmp	r4, #0
 8014f94:	f000 80a1 	beq.w	80150da <_dtoa_r+0x442>
 8014f98:	2f00      	cmp	r7, #0
 8014f9a:	dd33      	ble.n	8015004 <_dtoa_r+0x36c>
 8014f9c:	4bad      	ldr	r3, [pc, #692]	@ (8015254 <_dtoa_r+0x5bc>)
 8014f9e:	f007 020f 	and.w	r2, r7, #15
 8014fa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014fa6:	ed93 7b00 	vldr	d7, [r3]
 8014faa:	05f8      	lsls	r0, r7, #23
 8014fac:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014fb0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8014fb4:	d516      	bpl.n	8014fe4 <_dtoa_r+0x34c>
 8014fb6:	4ba8      	ldr	r3, [pc, #672]	@ (8015258 <_dtoa_r+0x5c0>)
 8014fb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014fbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014fc0:	f7eb fc6c 	bl	800089c <__aeabi_ddiv>
 8014fc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014fc8:	f004 040f 	and.w	r4, r4, #15
 8014fcc:	2603      	movs	r6, #3
 8014fce:	4da2      	ldr	r5, [pc, #648]	@ (8015258 <_dtoa_r+0x5c0>)
 8014fd0:	b954      	cbnz	r4, 8014fe8 <_dtoa_r+0x350>
 8014fd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014fd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014fda:	f7eb fc5f 	bl	800089c <__aeabi_ddiv>
 8014fde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014fe2:	e028      	b.n	8015036 <_dtoa_r+0x39e>
 8014fe4:	2602      	movs	r6, #2
 8014fe6:	e7f2      	b.n	8014fce <_dtoa_r+0x336>
 8014fe8:	07e1      	lsls	r1, r4, #31
 8014fea:	d508      	bpl.n	8014ffe <_dtoa_r+0x366>
 8014fec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014ff0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014ff4:	f7eb fb28 	bl	8000648 <__aeabi_dmul>
 8014ff8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014ffc:	3601      	adds	r6, #1
 8014ffe:	1064      	asrs	r4, r4, #1
 8015000:	3508      	adds	r5, #8
 8015002:	e7e5      	b.n	8014fd0 <_dtoa_r+0x338>
 8015004:	f000 80d2 	beq.w	80151ac <_dtoa_r+0x514>
 8015008:	427c      	negs	r4, r7
 801500a:	4b92      	ldr	r3, [pc, #584]	@ (8015254 <_dtoa_r+0x5bc>)
 801500c:	4d92      	ldr	r5, [pc, #584]	@ (8015258 <_dtoa_r+0x5c0>)
 801500e:	f004 020f 	and.w	r2, r4, #15
 8015012:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015016:	e9d3 2300 	ldrd	r2, r3, [r3]
 801501a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801501e:	f7eb fb13 	bl	8000648 <__aeabi_dmul>
 8015022:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015026:	1124      	asrs	r4, r4, #4
 8015028:	2300      	movs	r3, #0
 801502a:	2602      	movs	r6, #2
 801502c:	2c00      	cmp	r4, #0
 801502e:	f040 80b2 	bne.w	8015196 <_dtoa_r+0x4fe>
 8015032:	2b00      	cmp	r3, #0
 8015034:	d1d3      	bne.n	8014fde <_dtoa_r+0x346>
 8015036:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015038:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801503c:	2b00      	cmp	r3, #0
 801503e:	f000 80b7 	beq.w	80151b0 <_dtoa_r+0x518>
 8015042:	4b86      	ldr	r3, [pc, #536]	@ (801525c <_dtoa_r+0x5c4>)
 8015044:	2200      	movs	r2, #0
 8015046:	4620      	mov	r0, r4
 8015048:	4629      	mov	r1, r5
 801504a:	f7eb fd6f 	bl	8000b2c <__aeabi_dcmplt>
 801504e:	2800      	cmp	r0, #0
 8015050:	f000 80ae 	beq.w	80151b0 <_dtoa_r+0x518>
 8015054:	9b07      	ldr	r3, [sp, #28]
 8015056:	2b00      	cmp	r3, #0
 8015058:	f000 80aa 	beq.w	80151b0 <_dtoa_r+0x518>
 801505c:	9b00      	ldr	r3, [sp, #0]
 801505e:	2b00      	cmp	r3, #0
 8015060:	dd37      	ble.n	80150d2 <_dtoa_r+0x43a>
 8015062:	1e7b      	subs	r3, r7, #1
 8015064:	9304      	str	r3, [sp, #16]
 8015066:	4620      	mov	r0, r4
 8015068:	4b7d      	ldr	r3, [pc, #500]	@ (8015260 <_dtoa_r+0x5c8>)
 801506a:	2200      	movs	r2, #0
 801506c:	4629      	mov	r1, r5
 801506e:	f7eb faeb 	bl	8000648 <__aeabi_dmul>
 8015072:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015076:	9c00      	ldr	r4, [sp, #0]
 8015078:	3601      	adds	r6, #1
 801507a:	4630      	mov	r0, r6
 801507c:	f7eb fa7a 	bl	8000574 <__aeabi_i2d>
 8015080:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015084:	f7eb fae0 	bl	8000648 <__aeabi_dmul>
 8015088:	4b76      	ldr	r3, [pc, #472]	@ (8015264 <_dtoa_r+0x5cc>)
 801508a:	2200      	movs	r2, #0
 801508c:	f7eb f926 	bl	80002dc <__adddf3>
 8015090:	4605      	mov	r5, r0
 8015092:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8015096:	2c00      	cmp	r4, #0
 8015098:	f040 808d 	bne.w	80151b6 <_dtoa_r+0x51e>
 801509c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80150a0:	4b71      	ldr	r3, [pc, #452]	@ (8015268 <_dtoa_r+0x5d0>)
 80150a2:	2200      	movs	r2, #0
 80150a4:	f7eb f918 	bl	80002d8 <__aeabi_dsub>
 80150a8:	4602      	mov	r2, r0
 80150aa:	460b      	mov	r3, r1
 80150ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80150b0:	462a      	mov	r2, r5
 80150b2:	4633      	mov	r3, r6
 80150b4:	f7eb fd58 	bl	8000b68 <__aeabi_dcmpgt>
 80150b8:	2800      	cmp	r0, #0
 80150ba:	f040 828b 	bne.w	80155d4 <_dtoa_r+0x93c>
 80150be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80150c2:	462a      	mov	r2, r5
 80150c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80150c8:	f7eb fd30 	bl	8000b2c <__aeabi_dcmplt>
 80150cc:	2800      	cmp	r0, #0
 80150ce:	f040 8128 	bne.w	8015322 <_dtoa_r+0x68a>
 80150d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80150d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80150da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80150dc:	2b00      	cmp	r3, #0
 80150de:	f2c0 815a 	blt.w	8015396 <_dtoa_r+0x6fe>
 80150e2:	2f0e      	cmp	r7, #14
 80150e4:	f300 8157 	bgt.w	8015396 <_dtoa_r+0x6fe>
 80150e8:	4b5a      	ldr	r3, [pc, #360]	@ (8015254 <_dtoa_r+0x5bc>)
 80150ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80150ee:	ed93 7b00 	vldr	d7, [r3]
 80150f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	ed8d 7b00 	vstr	d7, [sp]
 80150fa:	da03      	bge.n	8015104 <_dtoa_r+0x46c>
 80150fc:	9b07      	ldr	r3, [sp, #28]
 80150fe:	2b00      	cmp	r3, #0
 8015100:	f340 8101 	ble.w	8015306 <_dtoa_r+0x66e>
 8015104:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8015108:	4656      	mov	r6, sl
 801510a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801510e:	4620      	mov	r0, r4
 8015110:	4629      	mov	r1, r5
 8015112:	f7eb fbc3 	bl	800089c <__aeabi_ddiv>
 8015116:	f7eb fd47 	bl	8000ba8 <__aeabi_d2iz>
 801511a:	4680      	mov	r8, r0
 801511c:	f7eb fa2a 	bl	8000574 <__aeabi_i2d>
 8015120:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015124:	f7eb fa90 	bl	8000648 <__aeabi_dmul>
 8015128:	4602      	mov	r2, r0
 801512a:	460b      	mov	r3, r1
 801512c:	4620      	mov	r0, r4
 801512e:	4629      	mov	r1, r5
 8015130:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8015134:	f7eb f8d0 	bl	80002d8 <__aeabi_dsub>
 8015138:	f806 4b01 	strb.w	r4, [r6], #1
 801513c:	9d07      	ldr	r5, [sp, #28]
 801513e:	eba6 040a 	sub.w	r4, r6, sl
 8015142:	42a5      	cmp	r5, r4
 8015144:	4602      	mov	r2, r0
 8015146:	460b      	mov	r3, r1
 8015148:	f040 8117 	bne.w	801537a <_dtoa_r+0x6e2>
 801514c:	f7eb f8c6 	bl	80002dc <__adddf3>
 8015150:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015154:	4604      	mov	r4, r0
 8015156:	460d      	mov	r5, r1
 8015158:	f7eb fd06 	bl	8000b68 <__aeabi_dcmpgt>
 801515c:	2800      	cmp	r0, #0
 801515e:	f040 80f9 	bne.w	8015354 <_dtoa_r+0x6bc>
 8015162:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015166:	4620      	mov	r0, r4
 8015168:	4629      	mov	r1, r5
 801516a:	f7eb fcd5 	bl	8000b18 <__aeabi_dcmpeq>
 801516e:	b118      	cbz	r0, 8015178 <_dtoa_r+0x4e0>
 8015170:	f018 0f01 	tst.w	r8, #1
 8015174:	f040 80ee 	bne.w	8015354 <_dtoa_r+0x6bc>
 8015178:	4649      	mov	r1, r9
 801517a:	4658      	mov	r0, fp
 801517c:	f000 fc90 	bl	8015aa0 <_Bfree>
 8015180:	2300      	movs	r3, #0
 8015182:	7033      	strb	r3, [r6, #0]
 8015184:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015186:	3701      	adds	r7, #1
 8015188:	601f      	str	r7, [r3, #0]
 801518a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801518c:	2b00      	cmp	r3, #0
 801518e:	f000 831d 	beq.w	80157cc <_dtoa_r+0xb34>
 8015192:	601e      	str	r6, [r3, #0]
 8015194:	e31a      	b.n	80157cc <_dtoa_r+0xb34>
 8015196:	07e2      	lsls	r2, r4, #31
 8015198:	d505      	bpl.n	80151a6 <_dtoa_r+0x50e>
 801519a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801519e:	f7eb fa53 	bl	8000648 <__aeabi_dmul>
 80151a2:	3601      	adds	r6, #1
 80151a4:	2301      	movs	r3, #1
 80151a6:	1064      	asrs	r4, r4, #1
 80151a8:	3508      	adds	r5, #8
 80151aa:	e73f      	b.n	801502c <_dtoa_r+0x394>
 80151ac:	2602      	movs	r6, #2
 80151ae:	e742      	b.n	8015036 <_dtoa_r+0x39e>
 80151b0:	9c07      	ldr	r4, [sp, #28]
 80151b2:	9704      	str	r7, [sp, #16]
 80151b4:	e761      	b.n	801507a <_dtoa_r+0x3e2>
 80151b6:	4b27      	ldr	r3, [pc, #156]	@ (8015254 <_dtoa_r+0x5bc>)
 80151b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80151ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80151be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80151c2:	4454      	add	r4, sl
 80151c4:	2900      	cmp	r1, #0
 80151c6:	d053      	beq.n	8015270 <_dtoa_r+0x5d8>
 80151c8:	4928      	ldr	r1, [pc, #160]	@ (801526c <_dtoa_r+0x5d4>)
 80151ca:	2000      	movs	r0, #0
 80151cc:	f7eb fb66 	bl	800089c <__aeabi_ddiv>
 80151d0:	4633      	mov	r3, r6
 80151d2:	462a      	mov	r2, r5
 80151d4:	f7eb f880 	bl	80002d8 <__aeabi_dsub>
 80151d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80151dc:	4656      	mov	r6, sl
 80151de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80151e2:	f7eb fce1 	bl	8000ba8 <__aeabi_d2iz>
 80151e6:	4605      	mov	r5, r0
 80151e8:	f7eb f9c4 	bl	8000574 <__aeabi_i2d>
 80151ec:	4602      	mov	r2, r0
 80151ee:	460b      	mov	r3, r1
 80151f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80151f4:	f7eb f870 	bl	80002d8 <__aeabi_dsub>
 80151f8:	3530      	adds	r5, #48	@ 0x30
 80151fa:	4602      	mov	r2, r0
 80151fc:	460b      	mov	r3, r1
 80151fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015202:	f806 5b01 	strb.w	r5, [r6], #1
 8015206:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801520a:	f7eb fc8f 	bl	8000b2c <__aeabi_dcmplt>
 801520e:	2800      	cmp	r0, #0
 8015210:	d171      	bne.n	80152f6 <_dtoa_r+0x65e>
 8015212:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015216:	4911      	ldr	r1, [pc, #68]	@ (801525c <_dtoa_r+0x5c4>)
 8015218:	2000      	movs	r0, #0
 801521a:	f7eb f85d 	bl	80002d8 <__aeabi_dsub>
 801521e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015222:	f7eb fc83 	bl	8000b2c <__aeabi_dcmplt>
 8015226:	2800      	cmp	r0, #0
 8015228:	f040 8095 	bne.w	8015356 <_dtoa_r+0x6be>
 801522c:	42a6      	cmp	r6, r4
 801522e:	f43f af50 	beq.w	80150d2 <_dtoa_r+0x43a>
 8015232:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8015236:	4b0a      	ldr	r3, [pc, #40]	@ (8015260 <_dtoa_r+0x5c8>)
 8015238:	2200      	movs	r2, #0
 801523a:	f7eb fa05 	bl	8000648 <__aeabi_dmul>
 801523e:	4b08      	ldr	r3, [pc, #32]	@ (8015260 <_dtoa_r+0x5c8>)
 8015240:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015244:	2200      	movs	r2, #0
 8015246:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801524a:	f7eb f9fd 	bl	8000648 <__aeabi_dmul>
 801524e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015252:	e7c4      	b.n	80151de <_dtoa_r+0x546>
 8015254:	08025d10 	.word	0x08025d10
 8015258:	08025ce8 	.word	0x08025ce8
 801525c:	3ff00000 	.word	0x3ff00000
 8015260:	40240000 	.word	0x40240000
 8015264:	401c0000 	.word	0x401c0000
 8015268:	40140000 	.word	0x40140000
 801526c:	3fe00000 	.word	0x3fe00000
 8015270:	4631      	mov	r1, r6
 8015272:	4628      	mov	r0, r5
 8015274:	f7eb f9e8 	bl	8000648 <__aeabi_dmul>
 8015278:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801527c:	9415      	str	r4, [sp, #84]	@ 0x54
 801527e:	4656      	mov	r6, sl
 8015280:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015284:	f7eb fc90 	bl	8000ba8 <__aeabi_d2iz>
 8015288:	4605      	mov	r5, r0
 801528a:	f7eb f973 	bl	8000574 <__aeabi_i2d>
 801528e:	4602      	mov	r2, r0
 8015290:	460b      	mov	r3, r1
 8015292:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015296:	f7eb f81f 	bl	80002d8 <__aeabi_dsub>
 801529a:	3530      	adds	r5, #48	@ 0x30
 801529c:	f806 5b01 	strb.w	r5, [r6], #1
 80152a0:	4602      	mov	r2, r0
 80152a2:	460b      	mov	r3, r1
 80152a4:	42a6      	cmp	r6, r4
 80152a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80152aa:	f04f 0200 	mov.w	r2, #0
 80152ae:	d124      	bne.n	80152fa <_dtoa_r+0x662>
 80152b0:	4bac      	ldr	r3, [pc, #688]	@ (8015564 <_dtoa_r+0x8cc>)
 80152b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80152b6:	f7eb f811 	bl	80002dc <__adddf3>
 80152ba:	4602      	mov	r2, r0
 80152bc:	460b      	mov	r3, r1
 80152be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80152c2:	f7eb fc51 	bl	8000b68 <__aeabi_dcmpgt>
 80152c6:	2800      	cmp	r0, #0
 80152c8:	d145      	bne.n	8015356 <_dtoa_r+0x6be>
 80152ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80152ce:	49a5      	ldr	r1, [pc, #660]	@ (8015564 <_dtoa_r+0x8cc>)
 80152d0:	2000      	movs	r0, #0
 80152d2:	f7eb f801 	bl	80002d8 <__aeabi_dsub>
 80152d6:	4602      	mov	r2, r0
 80152d8:	460b      	mov	r3, r1
 80152da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80152de:	f7eb fc25 	bl	8000b2c <__aeabi_dcmplt>
 80152e2:	2800      	cmp	r0, #0
 80152e4:	f43f aef5 	beq.w	80150d2 <_dtoa_r+0x43a>
 80152e8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80152ea:	1e73      	subs	r3, r6, #1
 80152ec:	9315      	str	r3, [sp, #84]	@ 0x54
 80152ee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80152f2:	2b30      	cmp	r3, #48	@ 0x30
 80152f4:	d0f8      	beq.n	80152e8 <_dtoa_r+0x650>
 80152f6:	9f04      	ldr	r7, [sp, #16]
 80152f8:	e73e      	b.n	8015178 <_dtoa_r+0x4e0>
 80152fa:	4b9b      	ldr	r3, [pc, #620]	@ (8015568 <_dtoa_r+0x8d0>)
 80152fc:	f7eb f9a4 	bl	8000648 <__aeabi_dmul>
 8015300:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015304:	e7bc      	b.n	8015280 <_dtoa_r+0x5e8>
 8015306:	d10c      	bne.n	8015322 <_dtoa_r+0x68a>
 8015308:	4b98      	ldr	r3, [pc, #608]	@ (801556c <_dtoa_r+0x8d4>)
 801530a:	2200      	movs	r2, #0
 801530c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015310:	f7eb f99a 	bl	8000648 <__aeabi_dmul>
 8015314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015318:	f7eb fc1c 	bl	8000b54 <__aeabi_dcmpge>
 801531c:	2800      	cmp	r0, #0
 801531e:	f000 8157 	beq.w	80155d0 <_dtoa_r+0x938>
 8015322:	2400      	movs	r4, #0
 8015324:	4625      	mov	r5, r4
 8015326:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015328:	43db      	mvns	r3, r3
 801532a:	9304      	str	r3, [sp, #16]
 801532c:	4656      	mov	r6, sl
 801532e:	2700      	movs	r7, #0
 8015330:	4621      	mov	r1, r4
 8015332:	4658      	mov	r0, fp
 8015334:	f000 fbb4 	bl	8015aa0 <_Bfree>
 8015338:	2d00      	cmp	r5, #0
 801533a:	d0dc      	beq.n	80152f6 <_dtoa_r+0x65e>
 801533c:	b12f      	cbz	r7, 801534a <_dtoa_r+0x6b2>
 801533e:	42af      	cmp	r7, r5
 8015340:	d003      	beq.n	801534a <_dtoa_r+0x6b2>
 8015342:	4639      	mov	r1, r7
 8015344:	4658      	mov	r0, fp
 8015346:	f000 fbab 	bl	8015aa0 <_Bfree>
 801534a:	4629      	mov	r1, r5
 801534c:	4658      	mov	r0, fp
 801534e:	f000 fba7 	bl	8015aa0 <_Bfree>
 8015352:	e7d0      	b.n	80152f6 <_dtoa_r+0x65e>
 8015354:	9704      	str	r7, [sp, #16]
 8015356:	4633      	mov	r3, r6
 8015358:	461e      	mov	r6, r3
 801535a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801535e:	2a39      	cmp	r2, #57	@ 0x39
 8015360:	d107      	bne.n	8015372 <_dtoa_r+0x6da>
 8015362:	459a      	cmp	sl, r3
 8015364:	d1f8      	bne.n	8015358 <_dtoa_r+0x6c0>
 8015366:	9a04      	ldr	r2, [sp, #16]
 8015368:	3201      	adds	r2, #1
 801536a:	9204      	str	r2, [sp, #16]
 801536c:	2230      	movs	r2, #48	@ 0x30
 801536e:	f88a 2000 	strb.w	r2, [sl]
 8015372:	781a      	ldrb	r2, [r3, #0]
 8015374:	3201      	adds	r2, #1
 8015376:	701a      	strb	r2, [r3, #0]
 8015378:	e7bd      	b.n	80152f6 <_dtoa_r+0x65e>
 801537a:	4b7b      	ldr	r3, [pc, #492]	@ (8015568 <_dtoa_r+0x8d0>)
 801537c:	2200      	movs	r2, #0
 801537e:	f7eb f963 	bl	8000648 <__aeabi_dmul>
 8015382:	2200      	movs	r2, #0
 8015384:	2300      	movs	r3, #0
 8015386:	4604      	mov	r4, r0
 8015388:	460d      	mov	r5, r1
 801538a:	f7eb fbc5 	bl	8000b18 <__aeabi_dcmpeq>
 801538e:	2800      	cmp	r0, #0
 8015390:	f43f aebb 	beq.w	801510a <_dtoa_r+0x472>
 8015394:	e6f0      	b.n	8015178 <_dtoa_r+0x4e0>
 8015396:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015398:	2a00      	cmp	r2, #0
 801539a:	f000 80db 	beq.w	8015554 <_dtoa_r+0x8bc>
 801539e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80153a0:	2a01      	cmp	r2, #1
 80153a2:	f300 80bf 	bgt.w	8015524 <_dtoa_r+0x88c>
 80153a6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80153a8:	2a00      	cmp	r2, #0
 80153aa:	f000 80b7 	beq.w	801551c <_dtoa_r+0x884>
 80153ae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80153b2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80153b4:	4646      	mov	r6, r8
 80153b6:	9a08      	ldr	r2, [sp, #32]
 80153b8:	2101      	movs	r1, #1
 80153ba:	441a      	add	r2, r3
 80153bc:	4658      	mov	r0, fp
 80153be:	4498      	add	r8, r3
 80153c0:	9208      	str	r2, [sp, #32]
 80153c2:	f000 fc6b 	bl	8015c9c <__i2b>
 80153c6:	4605      	mov	r5, r0
 80153c8:	b15e      	cbz	r6, 80153e2 <_dtoa_r+0x74a>
 80153ca:	9b08      	ldr	r3, [sp, #32]
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	dd08      	ble.n	80153e2 <_dtoa_r+0x74a>
 80153d0:	42b3      	cmp	r3, r6
 80153d2:	9a08      	ldr	r2, [sp, #32]
 80153d4:	bfa8      	it	ge
 80153d6:	4633      	movge	r3, r6
 80153d8:	eba8 0803 	sub.w	r8, r8, r3
 80153dc:	1af6      	subs	r6, r6, r3
 80153de:	1ad3      	subs	r3, r2, r3
 80153e0:	9308      	str	r3, [sp, #32]
 80153e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80153e4:	b1f3      	cbz	r3, 8015424 <_dtoa_r+0x78c>
 80153e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	f000 80b7 	beq.w	801555c <_dtoa_r+0x8c4>
 80153ee:	b18c      	cbz	r4, 8015414 <_dtoa_r+0x77c>
 80153f0:	4629      	mov	r1, r5
 80153f2:	4622      	mov	r2, r4
 80153f4:	4658      	mov	r0, fp
 80153f6:	f000 fd11 	bl	8015e1c <__pow5mult>
 80153fa:	464a      	mov	r2, r9
 80153fc:	4601      	mov	r1, r0
 80153fe:	4605      	mov	r5, r0
 8015400:	4658      	mov	r0, fp
 8015402:	f000 fc61 	bl	8015cc8 <__multiply>
 8015406:	4649      	mov	r1, r9
 8015408:	9004      	str	r0, [sp, #16]
 801540a:	4658      	mov	r0, fp
 801540c:	f000 fb48 	bl	8015aa0 <_Bfree>
 8015410:	9b04      	ldr	r3, [sp, #16]
 8015412:	4699      	mov	r9, r3
 8015414:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015416:	1b1a      	subs	r2, r3, r4
 8015418:	d004      	beq.n	8015424 <_dtoa_r+0x78c>
 801541a:	4649      	mov	r1, r9
 801541c:	4658      	mov	r0, fp
 801541e:	f000 fcfd 	bl	8015e1c <__pow5mult>
 8015422:	4681      	mov	r9, r0
 8015424:	2101      	movs	r1, #1
 8015426:	4658      	mov	r0, fp
 8015428:	f000 fc38 	bl	8015c9c <__i2b>
 801542c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801542e:	4604      	mov	r4, r0
 8015430:	2b00      	cmp	r3, #0
 8015432:	f000 81cf 	beq.w	80157d4 <_dtoa_r+0xb3c>
 8015436:	461a      	mov	r2, r3
 8015438:	4601      	mov	r1, r0
 801543a:	4658      	mov	r0, fp
 801543c:	f000 fcee 	bl	8015e1c <__pow5mult>
 8015440:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015442:	2b01      	cmp	r3, #1
 8015444:	4604      	mov	r4, r0
 8015446:	f300 8095 	bgt.w	8015574 <_dtoa_r+0x8dc>
 801544a:	9b02      	ldr	r3, [sp, #8]
 801544c:	2b00      	cmp	r3, #0
 801544e:	f040 8087 	bne.w	8015560 <_dtoa_r+0x8c8>
 8015452:	9b03      	ldr	r3, [sp, #12]
 8015454:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015458:	2b00      	cmp	r3, #0
 801545a:	f040 8089 	bne.w	8015570 <_dtoa_r+0x8d8>
 801545e:	9b03      	ldr	r3, [sp, #12]
 8015460:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015464:	0d1b      	lsrs	r3, r3, #20
 8015466:	051b      	lsls	r3, r3, #20
 8015468:	b12b      	cbz	r3, 8015476 <_dtoa_r+0x7de>
 801546a:	9b08      	ldr	r3, [sp, #32]
 801546c:	3301      	adds	r3, #1
 801546e:	9308      	str	r3, [sp, #32]
 8015470:	f108 0801 	add.w	r8, r8, #1
 8015474:	2301      	movs	r3, #1
 8015476:	930a      	str	r3, [sp, #40]	@ 0x28
 8015478:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801547a:	2b00      	cmp	r3, #0
 801547c:	f000 81b0 	beq.w	80157e0 <_dtoa_r+0xb48>
 8015480:	6923      	ldr	r3, [r4, #16]
 8015482:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015486:	6918      	ldr	r0, [r3, #16]
 8015488:	f000 fbbc 	bl	8015c04 <__hi0bits>
 801548c:	f1c0 0020 	rsb	r0, r0, #32
 8015490:	9b08      	ldr	r3, [sp, #32]
 8015492:	4418      	add	r0, r3
 8015494:	f010 001f 	ands.w	r0, r0, #31
 8015498:	d077      	beq.n	801558a <_dtoa_r+0x8f2>
 801549a:	f1c0 0320 	rsb	r3, r0, #32
 801549e:	2b04      	cmp	r3, #4
 80154a0:	dd6b      	ble.n	801557a <_dtoa_r+0x8e2>
 80154a2:	9b08      	ldr	r3, [sp, #32]
 80154a4:	f1c0 001c 	rsb	r0, r0, #28
 80154a8:	4403      	add	r3, r0
 80154aa:	4480      	add	r8, r0
 80154ac:	4406      	add	r6, r0
 80154ae:	9308      	str	r3, [sp, #32]
 80154b0:	f1b8 0f00 	cmp.w	r8, #0
 80154b4:	dd05      	ble.n	80154c2 <_dtoa_r+0x82a>
 80154b6:	4649      	mov	r1, r9
 80154b8:	4642      	mov	r2, r8
 80154ba:	4658      	mov	r0, fp
 80154bc:	f000 fd08 	bl	8015ed0 <__lshift>
 80154c0:	4681      	mov	r9, r0
 80154c2:	9b08      	ldr	r3, [sp, #32]
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	dd05      	ble.n	80154d4 <_dtoa_r+0x83c>
 80154c8:	4621      	mov	r1, r4
 80154ca:	461a      	mov	r2, r3
 80154cc:	4658      	mov	r0, fp
 80154ce:	f000 fcff 	bl	8015ed0 <__lshift>
 80154d2:	4604      	mov	r4, r0
 80154d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d059      	beq.n	801558e <_dtoa_r+0x8f6>
 80154da:	4621      	mov	r1, r4
 80154dc:	4648      	mov	r0, r9
 80154de:	f000 fd63 	bl	8015fa8 <__mcmp>
 80154e2:	2800      	cmp	r0, #0
 80154e4:	da53      	bge.n	801558e <_dtoa_r+0x8f6>
 80154e6:	1e7b      	subs	r3, r7, #1
 80154e8:	9304      	str	r3, [sp, #16]
 80154ea:	4649      	mov	r1, r9
 80154ec:	2300      	movs	r3, #0
 80154ee:	220a      	movs	r2, #10
 80154f0:	4658      	mov	r0, fp
 80154f2:	f000 faf7 	bl	8015ae4 <__multadd>
 80154f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80154f8:	4681      	mov	r9, r0
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	f000 8172 	beq.w	80157e4 <_dtoa_r+0xb4c>
 8015500:	2300      	movs	r3, #0
 8015502:	4629      	mov	r1, r5
 8015504:	220a      	movs	r2, #10
 8015506:	4658      	mov	r0, fp
 8015508:	f000 faec 	bl	8015ae4 <__multadd>
 801550c:	9b00      	ldr	r3, [sp, #0]
 801550e:	2b00      	cmp	r3, #0
 8015510:	4605      	mov	r5, r0
 8015512:	dc67      	bgt.n	80155e4 <_dtoa_r+0x94c>
 8015514:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015516:	2b02      	cmp	r3, #2
 8015518:	dc41      	bgt.n	801559e <_dtoa_r+0x906>
 801551a:	e063      	b.n	80155e4 <_dtoa_r+0x94c>
 801551c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801551e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8015522:	e746      	b.n	80153b2 <_dtoa_r+0x71a>
 8015524:	9b07      	ldr	r3, [sp, #28]
 8015526:	1e5c      	subs	r4, r3, #1
 8015528:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801552a:	42a3      	cmp	r3, r4
 801552c:	bfbf      	itttt	lt
 801552e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8015530:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8015532:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8015534:	1ae3      	sublt	r3, r4, r3
 8015536:	bfb4      	ite	lt
 8015538:	18d2      	addlt	r2, r2, r3
 801553a:	1b1c      	subge	r4, r3, r4
 801553c:	9b07      	ldr	r3, [sp, #28]
 801553e:	bfbc      	itt	lt
 8015540:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8015542:	2400      	movlt	r4, #0
 8015544:	2b00      	cmp	r3, #0
 8015546:	bfb5      	itete	lt
 8015548:	eba8 0603 	sublt.w	r6, r8, r3
 801554c:	9b07      	ldrge	r3, [sp, #28]
 801554e:	2300      	movlt	r3, #0
 8015550:	4646      	movge	r6, r8
 8015552:	e730      	b.n	80153b6 <_dtoa_r+0x71e>
 8015554:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8015556:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8015558:	4646      	mov	r6, r8
 801555a:	e735      	b.n	80153c8 <_dtoa_r+0x730>
 801555c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801555e:	e75c      	b.n	801541a <_dtoa_r+0x782>
 8015560:	2300      	movs	r3, #0
 8015562:	e788      	b.n	8015476 <_dtoa_r+0x7de>
 8015564:	3fe00000 	.word	0x3fe00000
 8015568:	40240000 	.word	0x40240000
 801556c:	40140000 	.word	0x40140000
 8015570:	9b02      	ldr	r3, [sp, #8]
 8015572:	e780      	b.n	8015476 <_dtoa_r+0x7de>
 8015574:	2300      	movs	r3, #0
 8015576:	930a      	str	r3, [sp, #40]	@ 0x28
 8015578:	e782      	b.n	8015480 <_dtoa_r+0x7e8>
 801557a:	d099      	beq.n	80154b0 <_dtoa_r+0x818>
 801557c:	9a08      	ldr	r2, [sp, #32]
 801557e:	331c      	adds	r3, #28
 8015580:	441a      	add	r2, r3
 8015582:	4498      	add	r8, r3
 8015584:	441e      	add	r6, r3
 8015586:	9208      	str	r2, [sp, #32]
 8015588:	e792      	b.n	80154b0 <_dtoa_r+0x818>
 801558a:	4603      	mov	r3, r0
 801558c:	e7f6      	b.n	801557c <_dtoa_r+0x8e4>
 801558e:	9b07      	ldr	r3, [sp, #28]
 8015590:	9704      	str	r7, [sp, #16]
 8015592:	2b00      	cmp	r3, #0
 8015594:	dc20      	bgt.n	80155d8 <_dtoa_r+0x940>
 8015596:	9300      	str	r3, [sp, #0]
 8015598:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801559a:	2b02      	cmp	r3, #2
 801559c:	dd1e      	ble.n	80155dc <_dtoa_r+0x944>
 801559e:	9b00      	ldr	r3, [sp, #0]
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	f47f aec0 	bne.w	8015326 <_dtoa_r+0x68e>
 80155a6:	4621      	mov	r1, r4
 80155a8:	2205      	movs	r2, #5
 80155aa:	4658      	mov	r0, fp
 80155ac:	f000 fa9a 	bl	8015ae4 <__multadd>
 80155b0:	4601      	mov	r1, r0
 80155b2:	4604      	mov	r4, r0
 80155b4:	4648      	mov	r0, r9
 80155b6:	f000 fcf7 	bl	8015fa8 <__mcmp>
 80155ba:	2800      	cmp	r0, #0
 80155bc:	f77f aeb3 	ble.w	8015326 <_dtoa_r+0x68e>
 80155c0:	4656      	mov	r6, sl
 80155c2:	2331      	movs	r3, #49	@ 0x31
 80155c4:	f806 3b01 	strb.w	r3, [r6], #1
 80155c8:	9b04      	ldr	r3, [sp, #16]
 80155ca:	3301      	adds	r3, #1
 80155cc:	9304      	str	r3, [sp, #16]
 80155ce:	e6ae      	b.n	801532e <_dtoa_r+0x696>
 80155d0:	9c07      	ldr	r4, [sp, #28]
 80155d2:	9704      	str	r7, [sp, #16]
 80155d4:	4625      	mov	r5, r4
 80155d6:	e7f3      	b.n	80155c0 <_dtoa_r+0x928>
 80155d8:	9b07      	ldr	r3, [sp, #28]
 80155da:	9300      	str	r3, [sp, #0]
 80155dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80155de:	2b00      	cmp	r3, #0
 80155e0:	f000 8104 	beq.w	80157ec <_dtoa_r+0xb54>
 80155e4:	2e00      	cmp	r6, #0
 80155e6:	dd05      	ble.n	80155f4 <_dtoa_r+0x95c>
 80155e8:	4629      	mov	r1, r5
 80155ea:	4632      	mov	r2, r6
 80155ec:	4658      	mov	r0, fp
 80155ee:	f000 fc6f 	bl	8015ed0 <__lshift>
 80155f2:	4605      	mov	r5, r0
 80155f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d05a      	beq.n	80156b0 <_dtoa_r+0xa18>
 80155fa:	6869      	ldr	r1, [r5, #4]
 80155fc:	4658      	mov	r0, fp
 80155fe:	f000 fa0f 	bl	8015a20 <_Balloc>
 8015602:	4606      	mov	r6, r0
 8015604:	b928      	cbnz	r0, 8015612 <_dtoa_r+0x97a>
 8015606:	4b84      	ldr	r3, [pc, #528]	@ (8015818 <_dtoa_r+0xb80>)
 8015608:	4602      	mov	r2, r0
 801560a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801560e:	f7ff bb5a 	b.w	8014cc6 <_dtoa_r+0x2e>
 8015612:	692a      	ldr	r2, [r5, #16]
 8015614:	3202      	adds	r2, #2
 8015616:	0092      	lsls	r2, r2, #2
 8015618:	f105 010c 	add.w	r1, r5, #12
 801561c:	300c      	adds	r0, #12
 801561e:	f002 f94b 	bl	80178b8 <memcpy>
 8015622:	2201      	movs	r2, #1
 8015624:	4631      	mov	r1, r6
 8015626:	4658      	mov	r0, fp
 8015628:	f000 fc52 	bl	8015ed0 <__lshift>
 801562c:	f10a 0301 	add.w	r3, sl, #1
 8015630:	9307      	str	r3, [sp, #28]
 8015632:	9b00      	ldr	r3, [sp, #0]
 8015634:	4453      	add	r3, sl
 8015636:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015638:	9b02      	ldr	r3, [sp, #8]
 801563a:	f003 0301 	and.w	r3, r3, #1
 801563e:	462f      	mov	r7, r5
 8015640:	930a      	str	r3, [sp, #40]	@ 0x28
 8015642:	4605      	mov	r5, r0
 8015644:	9b07      	ldr	r3, [sp, #28]
 8015646:	4621      	mov	r1, r4
 8015648:	3b01      	subs	r3, #1
 801564a:	4648      	mov	r0, r9
 801564c:	9300      	str	r3, [sp, #0]
 801564e:	f7ff fa9b 	bl	8014b88 <quorem>
 8015652:	4639      	mov	r1, r7
 8015654:	9002      	str	r0, [sp, #8]
 8015656:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801565a:	4648      	mov	r0, r9
 801565c:	f000 fca4 	bl	8015fa8 <__mcmp>
 8015660:	462a      	mov	r2, r5
 8015662:	9008      	str	r0, [sp, #32]
 8015664:	4621      	mov	r1, r4
 8015666:	4658      	mov	r0, fp
 8015668:	f000 fcba 	bl	8015fe0 <__mdiff>
 801566c:	68c2      	ldr	r2, [r0, #12]
 801566e:	4606      	mov	r6, r0
 8015670:	bb02      	cbnz	r2, 80156b4 <_dtoa_r+0xa1c>
 8015672:	4601      	mov	r1, r0
 8015674:	4648      	mov	r0, r9
 8015676:	f000 fc97 	bl	8015fa8 <__mcmp>
 801567a:	4602      	mov	r2, r0
 801567c:	4631      	mov	r1, r6
 801567e:	4658      	mov	r0, fp
 8015680:	920e      	str	r2, [sp, #56]	@ 0x38
 8015682:	f000 fa0d 	bl	8015aa0 <_Bfree>
 8015686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015688:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801568a:	9e07      	ldr	r6, [sp, #28]
 801568c:	ea43 0102 	orr.w	r1, r3, r2
 8015690:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015692:	4319      	orrs	r1, r3
 8015694:	d110      	bne.n	80156b8 <_dtoa_r+0xa20>
 8015696:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801569a:	d029      	beq.n	80156f0 <_dtoa_r+0xa58>
 801569c:	9b08      	ldr	r3, [sp, #32]
 801569e:	2b00      	cmp	r3, #0
 80156a0:	dd02      	ble.n	80156a8 <_dtoa_r+0xa10>
 80156a2:	9b02      	ldr	r3, [sp, #8]
 80156a4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80156a8:	9b00      	ldr	r3, [sp, #0]
 80156aa:	f883 8000 	strb.w	r8, [r3]
 80156ae:	e63f      	b.n	8015330 <_dtoa_r+0x698>
 80156b0:	4628      	mov	r0, r5
 80156b2:	e7bb      	b.n	801562c <_dtoa_r+0x994>
 80156b4:	2201      	movs	r2, #1
 80156b6:	e7e1      	b.n	801567c <_dtoa_r+0x9e4>
 80156b8:	9b08      	ldr	r3, [sp, #32]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	db04      	blt.n	80156c8 <_dtoa_r+0xa30>
 80156be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80156c0:	430b      	orrs	r3, r1
 80156c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80156c4:	430b      	orrs	r3, r1
 80156c6:	d120      	bne.n	801570a <_dtoa_r+0xa72>
 80156c8:	2a00      	cmp	r2, #0
 80156ca:	dded      	ble.n	80156a8 <_dtoa_r+0xa10>
 80156cc:	4649      	mov	r1, r9
 80156ce:	2201      	movs	r2, #1
 80156d0:	4658      	mov	r0, fp
 80156d2:	f000 fbfd 	bl	8015ed0 <__lshift>
 80156d6:	4621      	mov	r1, r4
 80156d8:	4681      	mov	r9, r0
 80156da:	f000 fc65 	bl	8015fa8 <__mcmp>
 80156de:	2800      	cmp	r0, #0
 80156e0:	dc03      	bgt.n	80156ea <_dtoa_r+0xa52>
 80156e2:	d1e1      	bne.n	80156a8 <_dtoa_r+0xa10>
 80156e4:	f018 0f01 	tst.w	r8, #1
 80156e8:	d0de      	beq.n	80156a8 <_dtoa_r+0xa10>
 80156ea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80156ee:	d1d8      	bne.n	80156a2 <_dtoa_r+0xa0a>
 80156f0:	9a00      	ldr	r2, [sp, #0]
 80156f2:	2339      	movs	r3, #57	@ 0x39
 80156f4:	7013      	strb	r3, [r2, #0]
 80156f6:	4633      	mov	r3, r6
 80156f8:	461e      	mov	r6, r3
 80156fa:	3b01      	subs	r3, #1
 80156fc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8015700:	2a39      	cmp	r2, #57	@ 0x39
 8015702:	d052      	beq.n	80157aa <_dtoa_r+0xb12>
 8015704:	3201      	adds	r2, #1
 8015706:	701a      	strb	r2, [r3, #0]
 8015708:	e612      	b.n	8015330 <_dtoa_r+0x698>
 801570a:	2a00      	cmp	r2, #0
 801570c:	dd07      	ble.n	801571e <_dtoa_r+0xa86>
 801570e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8015712:	d0ed      	beq.n	80156f0 <_dtoa_r+0xa58>
 8015714:	9a00      	ldr	r2, [sp, #0]
 8015716:	f108 0301 	add.w	r3, r8, #1
 801571a:	7013      	strb	r3, [r2, #0]
 801571c:	e608      	b.n	8015330 <_dtoa_r+0x698>
 801571e:	9b07      	ldr	r3, [sp, #28]
 8015720:	9a07      	ldr	r2, [sp, #28]
 8015722:	f803 8c01 	strb.w	r8, [r3, #-1]
 8015726:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015728:	4293      	cmp	r3, r2
 801572a:	d028      	beq.n	801577e <_dtoa_r+0xae6>
 801572c:	4649      	mov	r1, r9
 801572e:	2300      	movs	r3, #0
 8015730:	220a      	movs	r2, #10
 8015732:	4658      	mov	r0, fp
 8015734:	f000 f9d6 	bl	8015ae4 <__multadd>
 8015738:	42af      	cmp	r7, r5
 801573a:	4681      	mov	r9, r0
 801573c:	f04f 0300 	mov.w	r3, #0
 8015740:	f04f 020a 	mov.w	r2, #10
 8015744:	4639      	mov	r1, r7
 8015746:	4658      	mov	r0, fp
 8015748:	d107      	bne.n	801575a <_dtoa_r+0xac2>
 801574a:	f000 f9cb 	bl	8015ae4 <__multadd>
 801574e:	4607      	mov	r7, r0
 8015750:	4605      	mov	r5, r0
 8015752:	9b07      	ldr	r3, [sp, #28]
 8015754:	3301      	adds	r3, #1
 8015756:	9307      	str	r3, [sp, #28]
 8015758:	e774      	b.n	8015644 <_dtoa_r+0x9ac>
 801575a:	f000 f9c3 	bl	8015ae4 <__multadd>
 801575e:	4629      	mov	r1, r5
 8015760:	4607      	mov	r7, r0
 8015762:	2300      	movs	r3, #0
 8015764:	220a      	movs	r2, #10
 8015766:	4658      	mov	r0, fp
 8015768:	f000 f9bc 	bl	8015ae4 <__multadd>
 801576c:	4605      	mov	r5, r0
 801576e:	e7f0      	b.n	8015752 <_dtoa_r+0xaba>
 8015770:	9b00      	ldr	r3, [sp, #0]
 8015772:	2b00      	cmp	r3, #0
 8015774:	bfcc      	ite	gt
 8015776:	461e      	movgt	r6, r3
 8015778:	2601      	movle	r6, #1
 801577a:	4456      	add	r6, sl
 801577c:	2700      	movs	r7, #0
 801577e:	4649      	mov	r1, r9
 8015780:	2201      	movs	r2, #1
 8015782:	4658      	mov	r0, fp
 8015784:	f000 fba4 	bl	8015ed0 <__lshift>
 8015788:	4621      	mov	r1, r4
 801578a:	4681      	mov	r9, r0
 801578c:	f000 fc0c 	bl	8015fa8 <__mcmp>
 8015790:	2800      	cmp	r0, #0
 8015792:	dcb0      	bgt.n	80156f6 <_dtoa_r+0xa5e>
 8015794:	d102      	bne.n	801579c <_dtoa_r+0xb04>
 8015796:	f018 0f01 	tst.w	r8, #1
 801579a:	d1ac      	bne.n	80156f6 <_dtoa_r+0xa5e>
 801579c:	4633      	mov	r3, r6
 801579e:	461e      	mov	r6, r3
 80157a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80157a4:	2a30      	cmp	r2, #48	@ 0x30
 80157a6:	d0fa      	beq.n	801579e <_dtoa_r+0xb06>
 80157a8:	e5c2      	b.n	8015330 <_dtoa_r+0x698>
 80157aa:	459a      	cmp	sl, r3
 80157ac:	d1a4      	bne.n	80156f8 <_dtoa_r+0xa60>
 80157ae:	9b04      	ldr	r3, [sp, #16]
 80157b0:	3301      	adds	r3, #1
 80157b2:	9304      	str	r3, [sp, #16]
 80157b4:	2331      	movs	r3, #49	@ 0x31
 80157b6:	f88a 3000 	strb.w	r3, [sl]
 80157ba:	e5b9      	b.n	8015330 <_dtoa_r+0x698>
 80157bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80157be:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801581c <_dtoa_r+0xb84>
 80157c2:	b11b      	cbz	r3, 80157cc <_dtoa_r+0xb34>
 80157c4:	f10a 0308 	add.w	r3, sl, #8
 80157c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80157ca:	6013      	str	r3, [r2, #0]
 80157cc:	4650      	mov	r0, sl
 80157ce:	b019      	add	sp, #100	@ 0x64
 80157d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80157d6:	2b01      	cmp	r3, #1
 80157d8:	f77f ae37 	ble.w	801544a <_dtoa_r+0x7b2>
 80157dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80157de:	930a      	str	r3, [sp, #40]	@ 0x28
 80157e0:	2001      	movs	r0, #1
 80157e2:	e655      	b.n	8015490 <_dtoa_r+0x7f8>
 80157e4:	9b00      	ldr	r3, [sp, #0]
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	f77f aed6 	ble.w	8015598 <_dtoa_r+0x900>
 80157ec:	4656      	mov	r6, sl
 80157ee:	4621      	mov	r1, r4
 80157f0:	4648      	mov	r0, r9
 80157f2:	f7ff f9c9 	bl	8014b88 <quorem>
 80157f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80157fa:	f806 8b01 	strb.w	r8, [r6], #1
 80157fe:	9b00      	ldr	r3, [sp, #0]
 8015800:	eba6 020a 	sub.w	r2, r6, sl
 8015804:	4293      	cmp	r3, r2
 8015806:	ddb3      	ble.n	8015770 <_dtoa_r+0xad8>
 8015808:	4649      	mov	r1, r9
 801580a:	2300      	movs	r3, #0
 801580c:	220a      	movs	r2, #10
 801580e:	4658      	mov	r0, fp
 8015810:	f000 f968 	bl	8015ae4 <__multadd>
 8015814:	4681      	mov	r9, r0
 8015816:	e7ea      	b.n	80157ee <_dtoa_r+0xb56>
 8015818:	08025c71 	.word	0x08025c71
 801581c:	08025bf5 	.word	0x08025bf5

08015820 <_free_r>:
 8015820:	b538      	push	{r3, r4, r5, lr}
 8015822:	4605      	mov	r5, r0
 8015824:	2900      	cmp	r1, #0
 8015826:	d041      	beq.n	80158ac <_free_r+0x8c>
 8015828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801582c:	1f0c      	subs	r4, r1, #4
 801582e:	2b00      	cmp	r3, #0
 8015830:	bfb8      	it	lt
 8015832:	18e4      	addlt	r4, r4, r3
 8015834:	f000 f8e8 	bl	8015a08 <__malloc_lock>
 8015838:	4a1d      	ldr	r2, [pc, #116]	@ (80158b0 <_free_r+0x90>)
 801583a:	6813      	ldr	r3, [r2, #0]
 801583c:	b933      	cbnz	r3, 801584c <_free_r+0x2c>
 801583e:	6063      	str	r3, [r4, #4]
 8015840:	6014      	str	r4, [r2, #0]
 8015842:	4628      	mov	r0, r5
 8015844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015848:	f000 b8e4 	b.w	8015a14 <__malloc_unlock>
 801584c:	42a3      	cmp	r3, r4
 801584e:	d908      	bls.n	8015862 <_free_r+0x42>
 8015850:	6820      	ldr	r0, [r4, #0]
 8015852:	1821      	adds	r1, r4, r0
 8015854:	428b      	cmp	r3, r1
 8015856:	bf01      	itttt	eq
 8015858:	6819      	ldreq	r1, [r3, #0]
 801585a:	685b      	ldreq	r3, [r3, #4]
 801585c:	1809      	addeq	r1, r1, r0
 801585e:	6021      	streq	r1, [r4, #0]
 8015860:	e7ed      	b.n	801583e <_free_r+0x1e>
 8015862:	461a      	mov	r2, r3
 8015864:	685b      	ldr	r3, [r3, #4]
 8015866:	b10b      	cbz	r3, 801586c <_free_r+0x4c>
 8015868:	42a3      	cmp	r3, r4
 801586a:	d9fa      	bls.n	8015862 <_free_r+0x42>
 801586c:	6811      	ldr	r1, [r2, #0]
 801586e:	1850      	adds	r0, r2, r1
 8015870:	42a0      	cmp	r0, r4
 8015872:	d10b      	bne.n	801588c <_free_r+0x6c>
 8015874:	6820      	ldr	r0, [r4, #0]
 8015876:	4401      	add	r1, r0
 8015878:	1850      	adds	r0, r2, r1
 801587a:	4283      	cmp	r3, r0
 801587c:	6011      	str	r1, [r2, #0]
 801587e:	d1e0      	bne.n	8015842 <_free_r+0x22>
 8015880:	6818      	ldr	r0, [r3, #0]
 8015882:	685b      	ldr	r3, [r3, #4]
 8015884:	6053      	str	r3, [r2, #4]
 8015886:	4408      	add	r0, r1
 8015888:	6010      	str	r0, [r2, #0]
 801588a:	e7da      	b.n	8015842 <_free_r+0x22>
 801588c:	d902      	bls.n	8015894 <_free_r+0x74>
 801588e:	230c      	movs	r3, #12
 8015890:	602b      	str	r3, [r5, #0]
 8015892:	e7d6      	b.n	8015842 <_free_r+0x22>
 8015894:	6820      	ldr	r0, [r4, #0]
 8015896:	1821      	adds	r1, r4, r0
 8015898:	428b      	cmp	r3, r1
 801589a:	bf04      	itt	eq
 801589c:	6819      	ldreq	r1, [r3, #0]
 801589e:	685b      	ldreq	r3, [r3, #4]
 80158a0:	6063      	str	r3, [r4, #4]
 80158a2:	bf04      	itt	eq
 80158a4:	1809      	addeq	r1, r1, r0
 80158a6:	6021      	streq	r1, [r4, #0]
 80158a8:	6054      	str	r4, [r2, #4]
 80158aa:	e7ca      	b.n	8015842 <_free_r+0x22>
 80158ac:	bd38      	pop	{r3, r4, r5, pc}
 80158ae:	bf00      	nop
 80158b0:	20004fe0 	.word	0x20004fe0

080158b4 <malloc>:
 80158b4:	4b02      	ldr	r3, [pc, #8]	@ (80158c0 <malloc+0xc>)
 80158b6:	4601      	mov	r1, r0
 80158b8:	6818      	ldr	r0, [r3, #0]
 80158ba:	f000 b825 	b.w	8015908 <_malloc_r>
 80158be:	bf00      	nop
 80158c0:	200001d4 	.word	0x200001d4

080158c4 <sbrk_aligned>:
 80158c4:	b570      	push	{r4, r5, r6, lr}
 80158c6:	4e0f      	ldr	r6, [pc, #60]	@ (8015904 <sbrk_aligned+0x40>)
 80158c8:	460c      	mov	r4, r1
 80158ca:	6831      	ldr	r1, [r6, #0]
 80158cc:	4605      	mov	r5, r0
 80158ce:	b911      	cbnz	r1, 80158d6 <sbrk_aligned+0x12>
 80158d0:	f001 ffe2 	bl	8017898 <_sbrk_r>
 80158d4:	6030      	str	r0, [r6, #0]
 80158d6:	4621      	mov	r1, r4
 80158d8:	4628      	mov	r0, r5
 80158da:	f001 ffdd 	bl	8017898 <_sbrk_r>
 80158de:	1c43      	adds	r3, r0, #1
 80158e0:	d103      	bne.n	80158ea <sbrk_aligned+0x26>
 80158e2:	f04f 34ff 	mov.w	r4, #4294967295
 80158e6:	4620      	mov	r0, r4
 80158e8:	bd70      	pop	{r4, r5, r6, pc}
 80158ea:	1cc4      	adds	r4, r0, #3
 80158ec:	f024 0403 	bic.w	r4, r4, #3
 80158f0:	42a0      	cmp	r0, r4
 80158f2:	d0f8      	beq.n	80158e6 <sbrk_aligned+0x22>
 80158f4:	1a21      	subs	r1, r4, r0
 80158f6:	4628      	mov	r0, r5
 80158f8:	f001 ffce 	bl	8017898 <_sbrk_r>
 80158fc:	3001      	adds	r0, #1
 80158fe:	d1f2      	bne.n	80158e6 <sbrk_aligned+0x22>
 8015900:	e7ef      	b.n	80158e2 <sbrk_aligned+0x1e>
 8015902:	bf00      	nop
 8015904:	20004fdc 	.word	0x20004fdc

08015908 <_malloc_r>:
 8015908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801590c:	1ccd      	adds	r5, r1, #3
 801590e:	f025 0503 	bic.w	r5, r5, #3
 8015912:	3508      	adds	r5, #8
 8015914:	2d0c      	cmp	r5, #12
 8015916:	bf38      	it	cc
 8015918:	250c      	movcc	r5, #12
 801591a:	2d00      	cmp	r5, #0
 801591c:	4606      	mov	r6, r0
 801591e:	db01      	blt.n	8015924 <_malloc_r+0x1c>
 8015920:	42a9      	cmp	r1, r5
 8015922:	d904      	bls.n	801592e <_malloc_r+0x26>
 8015924:	230c      	movs	r3, #12
 8015926:	6033      	str	r3, [r6, #0]
 8015928:	2000      	movs	r0, #0
 801592a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801592e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015a04 <_malloc_r+0xfc>
 8015932:	f000 f869 	bl	8015a08 <__malloc_lock>
 8015936:	f8d8 3000 	ldr.w	r3, [r8]
 801593a:	461c      	mov	r4, r3
 801593c:	bb44      	cbnz	r4, 8015990 <_malloc_r+0x88>
 801593e:	4629      	mov	r1, r5
 8015940:	4630      	mov	r0, r6
 8015942:	f7ff ffbf 	bl	80158c4 <sbrk_aligned>
 8015946:	1c43      	adds	r3, r0, #1
 8015948:	4604      	mov	r4, r0
 801594a:	d158      	bne.n	80159fe <_malloc_r+0xf6>
 801594c:	f8d8 4000 	ldr.w	r4, [r8]
 8015950:	4627      	mov	r7, r4
 8015952:	2f00      	cmp	r7, #0
 8015954:	d143      	bne.n	80159de <_malloc_r+0xd6>
 8015956:	2c00      	cmp	r4, #0
 8015958:	d04b      	beq.n	80159f2 <_malloc_r+0xea>
 801595a:	6823      	ldr	r3, [r4, #0]
 801595c:	4639      	mov	r1, r7
 801595e:	4630      	mov	r0, r6
 8015960:	eb04 0903 	add.w	r9, r4, r3
 8015964:	f001 ff98 	bl	8017898 <_sbrk_r>
 8015968:	4581      	cmp	r9, r0
 801596a:	d142      	bne.n	80159f2 <_malloc_r+0xea>
 801596c:	6821      	ldr	r1, [r4, #0]
 801596e:	1a6d      	subs	r5, r5, r1
 8015970:	4629      	mov	r1, r5
 8015972:	4630      	mov	r0, r6
 8015974:	f7ff ffa6 	bl	80158c4 <sbrk_aligned>
 8015978:	3001      	adds	r0, #1
 801597a:	d03a      	beq.n	80159f2 <_malloc_r+0xea>
 801597c:	6823      	ldr	r3, [r4, #0]
 801597e:	442b      	add	r3, r5
 8015980:	6023      	str	r3, [r4, #0]
 8015982:	f8d8 3000 	ldr.w	r3, [r8]
 8015986:	685a      	ldr	r2, [r3, #4]
 8015988:	bb62      	cbnz	r2, 80159e4 <_malloc_r+0xdc>
 801598a:	f8c8 7000 	str.w	r7, [r8]
 801598e:	e00f      	b.n	80159b0 <_malloc_r+0xa8>
 8015990:	6822      	ldr	r2, [r4, #0]
 8015992:	1b52      	subs	r2, r2, r5
 8015994:	d420      	bmi.n	80159d8 <_malloc_r+0xd0>
 8015996:	2a0b      	cmp	r2, #11
 8015998:	d917      	bls.n	80159ca <_malloc_r+0xc2>
 801599a:	1961      	adds	r1, r4, r5
 801599c:	42a3      	cmp	r3, r4
 801599e:	6025      	str	r5, [r4, #0]
 80159a0:	bf18      	it	ne
 80159a2:	6059      	strne	r1, [r3, #4]
 80159a4:	6863      	ldr	r3, [r4, #4]
 80159a6:	bf08      	it	eq
 80159a8:	f8c8 1000 	streq.w	r1, [r8]
 80159ac:	5162      	str	r2, [r4, r5]
 80159ae:	604b      	str	r3, [r1, #4]
 80159b0:	4630      	mov	r0, r6
 80159b2:	f000 f82f 	bl	8015a14 <__malloc_unlock>
 80159b6:	f104 000b 	add.w	r0, r4, #11
 80159ba:	1d23      	adds	r3, r4, #4
 80159bc:	f020 0007 	bic.w	r0, r0, #7
 80159c0:	1ac2      	subs	r2, r0, r3
 80159c2:	bf1c      	itt	ne
 80159c4:	1a1b      	subne	r3, r3, r0
 80159c6:	50a3      	strne	r3, [r4, r2]
 80159c8:	e7af      	b.n	801592a <_malloc_r+0x22>
 80159ca:	6862      	ldr	r2, [r4, #4]
 80159cc:	42a3      	cmp	r3, r4
 80159ce:	bf0c      	ite	eq
 80159d0:	f8c8 2000 	streq.w	r2, [r8]
 80159d4:	605a      	strne	r2, [r3, #4]
 80159d6:	e7eb      	b.n	80159b0 <_malloc_r+0xa8>
 80159d8:	4623      	mov	r3, r4
 80159da:	6864      	ldr	r4, [r4, #4]
 80159dc:	e7ae      	b.n	801593c <_malloc_r+0x34>
 80159de:	463c      	mov	r4, r7
 80159e0:	687f      	ldr	r7, [r7, #4]
 80159e2:	e7b6      	b.n	8015952 <_malloc_r+0x4a>
 80159e4:	461a      	mov	r2, r3
 80159e6:	685b      	ldr	r3, [r3, #4]
 80159e8:	42a3      	cmp	r3, r4
 80159ea:	d1fb      	bne.n	80159e4 <_malloc_r+0xdc>
 80159ec:	2300      	movs	r3, #0
 80159ee:	6053      	str	r3, [r2, #4]
 80159f0:	e7de      	b.n	80159b0 <_malloc_r+0xa8>
 80159f2:	230c      	movs	r3, #12
 80159f4:	6033      	str	r3, [r6, #0]
 80159f6:	4630      	mov	r0, r6
 80159f8:	f000 f80c 	bl	8015a14 <__malloc_unlock>
 80159fc:	e794      	b.n	8015928 <_malloc_r+0x20>
 80159fe:	6005      	str	r5, [r0, #0]
 8015a00:	e7d6      	b.n	80159b0 <_malloc_r+0xa8>
 8015a02:	bf00      	nop
 8015a04:	20004fe0 	.word	0x20004fe0

08015a08 <__malloc_lock>:
 8015a08:	4801      	ldr	r0, [pc, #4]	@ (8015a10 <__malloc_lock+0x8>)
 8015a0a:	f7ff b8b4 	b.w	8014b76 <__retarget_lock_acquire_recursive>
 8015a0e:	bf00      	nop
 8015a10:	20004fd8 	.word	0x20004fd8

08015a14 <__malloc_unlock>:
 8015a14:	4801      	ldr	r0, [pc, #4]	@ (8015a1c <__malloc_unlock+0x8>)
 8015a16:	f7ff b8af 	b.w	8014b78 <__retarget_lock_release_recursive>
 8015a1a:	bf00      	nop
 8015a1c:	20004fd8 	.word	0x20004fd8

08015a20 <_Balloc>:
 8015a20:	b570      	push	{r4, r5, r6, lr}
 8015a22:	69c6      	ldr	r6, [r0, #28]
 8015a24:	4604      	mov	r4, r0
 8015a26:	460d      	mov	r5, r1
 8015a28:	b976      	cbnz	r6, 8015a48 <_Balloc+0x28>
 8015a2a:	2010      	movs	r0, #16
 8015a2c:	f7ff ff42 	bl	80158b4 <malloc>
 8015a30:	4602      	mov	r2, r0
 8015a32:	61e0      	str	r0, [r4, #28]
 8015a34:	b920      	cbnz	r0, 8015a40 <_Balloc+0x20>
 8015a36:	4b18      	ldr	r3, [pc, #96]	@ (8015a98 <_Balloc+0x78>)
 8015a38:	4818      	ldr	r0, [pc, #96]	@ (8015a9c <_Balloc+0x7c>)
 8015a3a:	216b      	movs	r1, #107	@ 0x6b
 8015a3c:	f001 ff54 	bl	80178e8 <__assert_func>
 8015a40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015a44:	6006      	str	r6, [r0, #0]
 8015a46:	60c6      	str	r6, [r0, #12]
 8015a48:	69e6      	ldr	r6, [r4, #28]
 8015a4a:	68f3      	ldr	r3, [r6, #12]
 8015a4c:	b183      	cbz	r3, 8015a70 <_Balloc+0x50>
 8015a4e:	69e3      	ldr	r3, [r4, #28]
 8015a50:	68db      	ldr	r3, [r3, #12]
 8015a52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015a56:	b9b8      	cbnz	r0, 8015a88 <_Balloc+0x68>
 8015a58:	2101      	movs	r1, #1
 8015a5a:	fa01 f605 	lsl.w	r6, r1, r5
 8015a5e:	1d72      	adds	r2, r6, #5
 8015a60:	0092      	lsls	r2, r2, #2
 8015a62:	4620      	mov	r0, r4
 8015a64:	f001 ff5e 	bl	8017924 <_calloc_r>
 8015a68:	b160      	cbz	r0, 8015a84 <_Balloc+0x64>
 8015a6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015a6e:	e00e      	b.n	8015a8e <_Balloc+0x6e>
 8015a70:	2221      	movs	r2, #33	@ 0x21
 8015a72:	2104      	movs	r1, #4
 8015a74:	4620      	mov	r0, r4
 8015a76:	f001 ff55 	bl	8017924 <_calloc_r>
 8015a7a:	69e3      	ldr	r3, [r4, #28]
 8015a7c:	60f0      	str	r0, [r6, #12]
 8015a7e:	68db      	ldr	r3, [r3, #12]
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d1e4      	bne.n	8015a4e <_Balloc+0x2e>
 8015a84:	2000      	movs	r0, #0
 8015a86:	bd70      	pop	{r4, r5, r6, pc}
 8015a88:	6802      	ldr	r2, [r0, #0]
 8015a8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015a8e:	2300      	movs	r3, #0
 8015a90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015a94:	e7f7      	b.n	8015a86 <_Balloc+0x66>
 8015a96:	bf00      	nop
 8015a98:	08025c02 	.word	0x08025c02
 8015a9c:	08025c82 	.word	0x08025c82

08015aa0 <_Bfree>:
 8015aa0:	b570      	push	{r4, r5, r6, lr}
 8015aa2:	69c6      	ldr	r6, [r0, #28]
 8015aa4:	4605      	mov	r5, r0
 8015aa6:	460c      	mov	r4, r1
 8015aa8:	b976      	cbnz	r6, 8015ac8 <_Bfree+0x28>
 8015aaa:	2010      	movs	r0, #16
 8015aac:	f7ff ff02 	bl	80158b4 <malloc>
 8015ab0:	4602      	mov	r2, r0
 8015ab2:	61e8      	str	r0, [r5, #28]
 8015ab4:	b920      	cbnz	r0, 8015ac0 <_Bfree+0x20>
 8015ab6:	4b09      	ldr	r3, [pc, #36]	@ (8015adc <_Bfree+0x3c>)
 8015ab8:	4809      	ldr	r0, [pc, #36]	@ (8015ae0 <_Bfree+0x40>)
 8015aba:	218f      	movs	r1, #143	@ 0x8f
 8015abc:	f001 ff14 	bl	80178e8 <__assert_func>
 8015ac0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015ac4:	6006      	str	r6, [r0, #0]
 8015ac6:	60c6      	str	r6, [r0, #12]
 8015ac8:	b13c      	cbz	r4, 8015ada <_Bfree+0x3a>
 8015aca:	69eb      	ldr	r3, [r5, #28]
 8015acc:	6862      	ldr	r2, [r4, #4]
 8015ace:	68db      	ldr	r3, [r3, #12]
 8015ad0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015ad4:	6021      	str	r1, [r4, #0]
 8015ad6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015ada:	bd70      	pop	{r4, r5, r6, pc}
 8015adc:	08025c02 	.word	0x08025c02
 8015ae0:	08025c82 	.word	0x08025c82

08015ae4 <__multadd>:
 8015ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ae8:	690d      	ldr	r5, [r1, #16]
 8015aea:	4607      	mov	r7, r0
 8015aec:	460c      	mov	r4, r1
 8015aee:	461e      	mov	r6, r3
 8015af0:	f101 0c14 	add.w	ip, r1, #20
 8015af4:	2000      	movs	r0, #0
 8015af6:	f8dc 3000 	ldr.w	r3, [ip]
 8015afa:	b299      	uxth	r1, r3
 8015afc:	fb02 6101 	mla	r1, r2, r1, r6
 8015b00:	0c1e      	lsrs	r6, r3, #16
 8015b02:	0c0b      	lsrs	r3, r1, #16
 8015b04:	fb02 3306 	mla	r3, r2, r6, r3
 8015b08:	b289      	uxth	r1, r1
 8015b0a:	3001      	adds	r0, #1
 8015b0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015b10:	4285      	cmp	r5, r0
 8015b12:	f84c 1b04 	str.w	r1, [ip], #4
 8015b16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015b1a:	dcec      	bgt.n	8015af6 <__multadd+0x12>
 8015b1c:	b30e      	cbz	r6, 8015b62 <__multadd+0x7e>
 8015b1e:	68a3      	ldr	r3, [r4, #8]
 8015b20:	42ab      	cmp	r3, r5
 8015b22:	dc19      	bgt.n	8015b58 <__multadd+0x74>
 8015b24:	6861      	ldr	r1, [r4, #4]
 8015b26:	4638      	mov	r0, r7
 8015b28:	3101      	adds	r1, #1
 8015b2a:	f7ff ff79 	bl	8015a20 <_Balloc>
 8015b2e:	4680      	mov	r8, r0
 8015b30:	b928      	cbnz	r0, 8015b3e <__multadd+0x5a>
 8015b32:	4602      	mov	r2, r0
 8015b34:	4b0c      	ldr	r3, [pc, #48]	@ (8015b68 <__multadd+0x84>)
 8015b36:	480d      	ldr	r0, [pc, #52]	@ (8015b6c <__multadd+0x88>)
 8015b38:	21ba      	movs	r1, #186	@ 0xba
 8015b3a:	f001 fed5 	bl	80178e8 <__assert_func>
 8015b3e:	6922      	ldr	r2, [r4, #16]
 8015b40:	3202      	adds	r2, #2
 8015b42:	f104 010c 	add.w	r1, r4, #12
 8015b46:	0092      	lsls	r2, r2, #2
 8015b48:	300c      	adds	r0, #12
 8015b4a:	f001 feb5 	bl	80178b8 <memcpy>
 8015b4e:	4621      	mov	r1, r4
 8015b50:	4638      	mov	r0, r7
 8015b52:	f7ff ffa5 	bl	8015aa0 <_Bfree>
 8015b56:	4644      	mov	r4, r8
 8015b58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015b5c:	3501      	adds	r5, #1
 8015b5e:	615e      	str	r6, [r3, #20]
 8015b60:	6125      	str	r5, [r4, #16]
 8015b62:	4620      	mov	r0, r4
 8015b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b68:	08025c71 	.word	0x08025c71
 8015b6c:	08025c82 	.word	0x08025c82

08015b70 <__s2b>:
 8015b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b74:	460c      	mov	r4, r1
 8015b76:	4615      	mov	r5, r2
 8015b78:	461f      	mov	r7, r3
 8015b7a:	2209      	movs	r2, #9
 8015b7c:	3308      	adds	r3, #8
 8015b7e:	4606      	mov	r6, r0
 8015b80:	fb93 f3f2 	sdiv	r3, r3, r2
 8015b84:	2100      	movs	r1, #0
 8015b86:	2201      	movs	r2, #1
 8015b88:	429a      	cmp	r2, r3
 8015b8a:	db09      	blt.n	8015ba0 <__s2b+0x30>
 8015b8c:	4630      	mov	r0, r6
 8015b8e:	f7ff ff47 	bl	8015a20 <_Balloc>
 8015b92:	b940      	cbnz	r0, 8015ba6 <__s2b+0x36>
 8015b94:	4602      	mov	r2, r0
 8015b96:	4b19      	ldr	r3, [pc, #100]	@ (8015bfc <__s2b+0x8c>)
 8015b98:	4819      	ldr	r0, [pc, #100]	@ (8015c00 <__s2b+0x90>)
 8015b9a:	21d3      	movs	r1, #211	@ 0xd3
 8015b9c:	f001 fea4 	bl	80178e8 <__assert_func>
 8015ba0:	0052      	lsls	r2, r2, #1
 8015ba2:	3101      	adds	r1, #1
 8015ba4:	e7f0      	b.n	8015b88 <__s2b+0x18>
 8015ba6:	9b08      	ldr	r3, [sp, #32]
 8015ba8:	6143      	str	r3, [r0, #20]
 8015baa:	2d09      	cmp	r5, #9
 8015bac:	f04f 0301 	mov.w	r3, #1
 8015bb0:	6103      	str	r3, [r0, #16]
 8015bb2:	dd16      	ble.n	8015be2 <__s2b+0x72>
 8015bb4:	f104 0909 	add.w	r9, r4, #9
 8015bb8:	46c8      	mov	r8, r9
 8015bba:	442c      	add	r4, r5
 8015bbc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015bc0:	4601      	mov	r1, r0
 8015bc2:	3b30      	subs	r3, #48	@ 0x30
 8015bc4:	220a      	movs	r2, #10
 8015bc6:	4630      	mov	r0, r6
 8015bc8:	f7ff ff8c 	bl	8015ae4 <__multadd>
 8015bcc:	45a0      	cmp	r8, r4
 8015bce:	d1f5      	bne.n	8015bbc <__s2b+0x4c>
 8015bd0:	f1a5 0408 	sub.w	r4, r5, #8
 8015bd4:	444c      	add	r4, r9
 8015bd6:	1b2d      	subs	r5, r5, r4
 8015bd8:	1963      	adds	r3, r4, r5
 8015bda:	42bb      	cmp	r3, r7
 8015bdc:	db04      	blt.n	8015be8 <__s2b+0x78>
 8015bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015be2:	340a      	adds	r4, #10
 8015be4:	2509      	movs	r5, #9
 8015be6:	e7f6      	b.n	8015bd6 <__s2b+0x66>
 8015be8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015bec:	4601      	mov	r1, r0
 8015bee:	3b30      	subs	r3, #48	@ 0x30
 8015bf0:	220a      	movs	r2, #10
 8015bf2:	4630      	mov	r0, r6
 8015bf4:	f7ff ff76 	bl	8015ae4 <__multadd>
 8015bf8:	e7ee      	b.n	8015bd8 <__s2b+0x68>
 8015bfa:	bf00      	nop
 8015bfc:	08025c71 	.word	0x08025c71
 8015c00:	08025c82 	.word	0x08025c82

08015c04 <__hi0bits>:
 8015c04:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8015c08:	4603      	mov	r3, r0
 8015c0a:	bf36      	itet	cc
 8015c0c:	0403      	lslcc	r3, r0, #16
 8015c0e:	2000      	movcs	r0, #0
 8015c10:	2010      	movcc	r0, #16
 8015c12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015c16:	bf3c      	itt	cc
 8015c18:	021b      	lslcc	r3, r3, #8
 8015c1a:	3008      	addcc	r0, #8
 8015c1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015c20:	bf3c      	itt	cc
 8015c22:	011b      	lslcc	r3, r3, #4
 8015c24:	3004      	addcc	r0, #4
 8015c26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015c2a:	bf3c      	itt	cc
 8015c2c:	009b      	lslcc	r3, r3, #2
 8015c2e:	3002      	addcc	r0, #2
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	db05      	blt.n	8015c40 <__hi0bits+0x3c>
 8015c34:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8015c38:	f100 0001 	add.w	r0, r0, #1
 8015c3c:	bf08      	it	eq
 8015c3e:	2020      	moveq	r0, #32
 8015c40:	4770      	bx	lr

08015c42 <__lo0bits>:
 8015c42:	6803      	ldr	r3, [r0, #0]
 8015c44:	4602      	mov	r2, r0
 8015c46:	f013 0007 	ands.w	r0, r3, #7
 8015c4a:	d00b      	beq.n	8015c64 <__lo0bits+0x22>
 8015c4c:	07d9      	lsls	r1, r3, #31
 8015c4e:	d421      	bmi.n	8015c94 <__lo0bits+0x52>
 8015c50:	0798      	lsls	r0, r3, #30
 8015c52:	bf49      	itett	mi
 8015c54:	085b      	lsrmi	r3, r3, #1
 8015c56:	089b      	lsrpl	r3, r3, #2
 8015c58:	2001      	movmi	r0, #1
 8015c5a:	6013      	strmi	r3, [r2, #0]
 8015c5c:	bf5c      	itt	pl
 8015c5e:	6013      	strpl	r3, [r2, #0]
 8015c60:	2002      	movpl	r0, #2
 8015c62:	4770      	bx	lr
 8015c64:	b299      	uxth	r1, r3
 8015c66:	b909      	cbnz	r1, 8015c6c <__lo0bits+0x2a>
 8015c68:	0c1b      	lsrs	r3, r3, #16
 8015c6a:	2010      	movs	r0, #16
 8015c6c:	b2d9      	uxtb	r1, r3
 8015c6e:	b909      	cbnz	r1, 8015c74 <__lo0bits+0x32>
 8015c70:	3008      	adds	r0, #8
 8015c72:	0a1b      	lsrs	r3, r3, #8
 8015c74:	0719      	lsls	r1, r3, #28
 8015c76:	bf04      	itt	eq
 8015c78:	091b      	lsreq	r3, r3, #4
 8015c7a:	3004      	addeq	r0, #4
 8015c7c:	0799      	lsls	r1, r3, #30
 8015c7e:	bf04      	itt	eq
 8015c80:	089b      	lsreq	r3, r3, #2
 8015c82:	3002      	addeq	r0, #2
 8015c84:	07d9      	lsls	r1, r3, #31
 8015c86:	d403      	bmi.n	8015c90 <__lo0bits+0x4e>
 8015c88:	085b      	lsrs	r3, r3, #1
 8015c8a:	f100 0001 	add.w	r0, r0, #1
 8015c8e:	d003      	beq.n	8015c98 <__lo0bits+0x56>
 8015c90:	6013      	str	r3, [r2, #0]
 8015c92:	4770      	bx	lr
 8015c94:	2000      	movs	r0, #0
 8015c96:	4770      	bx	lr
 8015c98:	2020      	movs	r0, #32
 8015c9a:	4770      	bx	lr

08015c9c <__i2b>:
 8015c9c:	b510      	push	{r4, lr}
 8015c9e:	460c      	mov	r4, r1
 8015ca0:	2101      	movs	r1, #1
 8015ca2:	f7ff febd 	bl	8015a20 <_Balloc>
 8015ca6:	4602      	mov	r2, r0
 8015ca8:	b928      	cbnz	r0, 8015cb6 <__i2b+0x1a>
 8015caa:	4b05      	ldr	r3, [pc, #20]	@ (8015cc0 <__i2b+0x24>)
 8015cac:	4805      	ldr	r0, [pc, #20]	@ (8015cc4 <__i2b+0x28>)
 8015cae:	f240 1145 	movw	r1, #325	@ 0x145
 8015cb2:	f001 fe19 	bl	80178e8 <__assert_func>
 8015cb6:	2301      	movs	r3, #1
 8015cb8:	6144      	str	r4, [r0, #20]
 8015cba:	6103      	str	r3, [r0, #16]
 8015cbc:	bd10      	pop	{r4, pc}
 8015cbe:	bf00      	nop
 8015cc0:	08025c71 	.word	0x08025c71
 8015cc4:	08025c82 	.word	0x08025c82

08015cc8 <__multiply>:
 8015cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ccc:	4614      	mov	r4, r2
 8015cce:	690a      	ldr	r2, [r1, #16]
 8015cd0:	6923      	ldr	r3, [r4, #16]
 8015cd2:	429a      	cmp	r2, r3
 8015cd4:	bfa8      	it	ge
 8015cd6:	4623      	movge	r3, r4
 8015cd8:	460f      	mov	r7, r1
 8015cda:	bfa4      	itt	ge
 8015cdc:	460c      	movge	r4, r1
 8015cde:	461f      	movge	r7, r3
 8015ce0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8015ce4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8015ce8:	68a3      	ldr	r3, [r4, #8]
 8015cea:	6861      	ldr	r1, [r4, #4]
 8015cec:	eb0a 0609 	add.w	r6, sl, r9
 8015cf0:	42b3      	cmp	r3, r6
 8015cf2:	b085      	sub	sp, #20
 8015cf4:	bfb8      	it	lt
 8015cf6:	3101      	addlt	r1, #1
 8015cf8:	f7ff fe92 	bl	8015a20 <_Balloc>
 8015cfc:	b930      	cbnz	r0, 8015d0c <__multiply+0x44>
 8015cfe:	4602      	mov	r2, r0
 8015d00:	4b44      	ldr	r3, [pc, #272]	@ (8015e14 <__multiply+0x14c>)
 8015d02:	4845      	ldr	r0, [pc, #276]	@ (8015e18 <__multiply+0x150>)
 8015d04:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8015d08:	f001 fdee 	bl	80178e8 <__assert_func>
 8015d0c:	f100 0514 	add.w	r5, r0, #20
 8015d10:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015d14:	462b      	mov	r3, r5
 8015d16:	2200      	movs	r2, #0
 8015d18:	4543      	cmp	r3, r8
 8015d1a:	d321      	bcc.n	8015d60 <__multiply+0x98>
 8015d1c:	f107 0114 	add.w	r1, r7, #20
 8015d20:	f104 0214 	add.w	r2, r4, #20
 8015d24:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8015d28:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8015d2c:	9302      	str	r3, [sp, #8]
 8015d2e:	1b13      	subs	r3, r2, r4
 8015d30:	3b15      	subs	r3, #21
 8015d32:	f023 0303 	bic.w	r3, r3, #3
 8015d36:	3304      	adds	r3, #4
 8015d38:	f104 0715 	add.w	r7, r4, #21
 8015d3c:	42ba      	cmp	r2, r7
 8015d3e:	bf38      	it	cc
 8015d40:	2304      	movcc	r3, #4
 8015d42:	9301      	str	r3, [sp, #4]
 8015d44:	9b02      	ldr	r3, [sp, #8]
 8015d46:	9103      	str	r1, [sp, #12]
 8015d48:	428b      	cmp	r3, r1
 8015d4a:	d80c      	bhi.n	8015d66 <__multiply+0x9e>
 8015d4c:	2e00      	cmp	r6, #0
 8015d4e:	dd03      	ble.n	8015d58 <__multiply+0x90>
 8015d50:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d05b      	beq.n	8015e10 <__multiply+0x148>
 8015d58:	6106      	str	r6, [r0, #16]
 8015d5a:	b005      	add	sp, #20
 8015d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d60:	f843 2b04 	str.w	r2, [r3], #4
 8015d64:	e7d8      	b.n	8015d18 <__multiply+0x50>
 8015d66:	f8b1 a000 	ldrh.w	sl, [r1]
 8015d6a:	f1ba 0f00 	cmp.w	sl, #0
 8015d6e:	d024      	beq.n	8015dba <__multiply+0xf2>
 8015d70:	f104 0e14 	add.w	lr, r4, #20
 8015d74:	46a9      	mov	r9, r5
 8015d76:	f04f 0c00 	mov.w	ip, #0
 8015d7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015d7e:	f8d9 3000 	ldr.w	r3, [r9]
 8015d82:	fa1f fb87 	uxth.w	fp, r7
 8015d86:	b29b      	uxth	r3, r3
 8015d88:	fb0a 330b 	mla	r3, sl, fp, r3
 8015d8c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8015d90:	f8d9 7000 	ldr.w	r7, [r9]
 8015d94:	4463      	add	r3, ip
 8015d96:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8015d9a:	fb0a c70b 	mla	r7, sl, fp, ip
 8015d9e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8015da2:	b29b      	uxth	r3, r3
 8015da4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015da8:	4572      	cmp	r2, lr
 8015daa:	f849 3b04 	str.w	r3, [r9], #4
 8015dae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8015db2:	d8e2      	bhi.n	8015d7a <__multiply+0xb2>
 8015db4:	9b01      	ldr	r3, [sp, #4]
 8015db6:	f845 c003 	str.w	ip, [r5, r3]
 8015dba:	9b03      	ldr	r3, [sp, #12]
 8015dbc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8015dc0:	3104      	adds	r1, #4
 8015dc2:	f1b9 0f00 	cmp.w	r9, #0
 8015dc6:	d021      	beq.n	8015e0c <__multiply+0x144>
 8015dc8:	682b      	ldr	r3, [r5, #0]
 8015dca:	f104 0c14 	add.w	ip, r4, #20
 8015dce:	46ae      	mov	lr, r5
 8015dd0:	f04f 0a00 	mov.w	sl, #0
 8015dd4:	f8bc b000 	ldrh.w	fp, [ip]
 8015dd8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8015ddc:	fb09 770b 	mla	r7, r9, fp, r7
 8015de0:	4457      	add	r7, sl
 8015de2:	b29b      	uxth	r3, r3
 8015de4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015de8:	f84e 3b04 	str.w	r3, [lr], #4
 8015dec:	f85c 3b04 	ldr.w	r3, [ip], #4
 8015df0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015df4:	f8be 3000 	ldrh.w	r3, [lr]
 8015df8:	fb09 330a 	mla	r3, r9, sl, r3
 8015dfc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8015e00:	4562      	cmp	r2, ip
 8015e02:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015e06:	d8e5      	bhi.n	8015dd4 <__multiply+0x10c>
 8015e08:	9f01      	ldr	r7, [sp, #4]
 8015e0a:	51eb      	str	r3, [r5, r7]
 8015e0c:	3504      	adds	r5, #4
 8015e0e:	e799      	b.n	8015d44 <__multiply+0x7c>
 8015e10:	3e01      	subs	r6, #1
 8015e12:	e79b      	b.n	8015d4c <__multiply+0x84>
 8015e14:	08025c71 	.word	0x08025c71
 8015e18:	08025c82 	.word	0x08025c82

08015e1c <__pow5mult>:
 8015e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015e20:	4615      	mov	r5, r2
 8015e22:	f012 0203 	ands.w	r2, r2, #3
 8015e26:	4607      	mov	r7, r0
 8015e28:	460e      	mov	r6, r1
 8015e2a:	d007      	beq.n	8015e3c <__pow5mult+0x20>
 8015e2c:	4c25      	ldr	r4, [pc, #148]	@ (8015ec4 <__pow5mult+0xa8>)
 8015e2e:	3a01      	subs	r2, #1
 8015e30:	2300      	movs	r3, #0
 8015e32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015e36:	f7ff fe55 	bl	8015ae4 <__multadd>
 8015e3a:	4606      	mov	r6, r0
 8015e3c:	10ad      	asrs	r5, r5, #2
 8015e3e:	d03d      	beq.n	8015ebc <__pow5mult+0xa0>
 8015e40:	69fc      	ldr	r4, [r7, #28]
 8015e42:	b97c      	cbnz	r4, 8015e64 <__pow5mult+0x48>
 8015e44:	2010      	movs	r0, #16
 8015e46:	f7ff fd35 	bl	80158b4 <malloc>
 8015e4a:	4602      	mov	r2, r0
 8015e4c:	61f8      	str	r0, [r7, #28]
 8015e4e:	b928      	cbnz	r0, 8015e5c <__pow5mult+0x40>
 8015e50:	4b1d      	ldr	r3, [pc, #116]	@ (8015ec8 <__pow5mult+0xac>)
 8015e52:	481e      	ldr	r0, [pc, #120]	@ (8015ecc <__pow5mult+0xb0>)
 8015e54:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8015e58:	f001 fd46 	bl	80178e8 <__assert_func>
 8015e5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015e60:	6004      	str	r4, [r0, #0]
 8015e62:	60c4      	str	r4, [r0, #12]
 8015e64:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8015e68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015e6c:	b94c      	cbnz	r4, 8015e82 <__pow5mult+0x66>
 8015e6e:	f240 2171 	movw	r1, #625	@ 0x271
 8015e72:	4638      	mov	r0, r7
 8015e74:	f7ff ff12 	bl	8015c9c <__i2b>
 8015e78:	2300      	movs	r3, #0
 8015e7a:	f8c8 0008 	str.w	r0, [r8, #8]
 8015e7e:	4604      	mov	r4, r0
 8015e80:	6003      	str	r3, [r0, #0]
 8015e82:	f04f 0900 	mov.w	r9, #0
 8015e86:	07eb      	lsls	r3, r5, #31
 8015e88:	d50a      	bpl.n	8015ea0 <__pow5mult+0x84>
 8015e8a:	4631      	mov	r1, r6
 8015e8c:	4622      	mov	r2, r4
 8015e8e:	4638      	mov	r0, r7
 8015e90:	f7ff ff1a 	bl	8015cc8 <__multiply>
 8015e94:	4631      	mov	r1, r6
 8015e96:	4680      	mov	r8, r0
 8015e98:	4638      	mov	r0, r7
 8015e9a:	f7ff fe01 	bl	8015aa0 <_Bfree>
 8015e9e:	4646      	mov	r6, r8
 8015ea0:	106d      	asrs	r5, r5, #1
 8015ea2:	d00b      	beq.n	8015ebc <__pow5mult+0xa0>
 8015ea4:	6820      	ldr	r0, [r4, #0]
 8015ea6:	b938      	cbnz	r0, 8015eb8 <__pow5mult+0x9c>
 8015ea8:	4622      	mov	r2, r4
 8015eaa:	4621      	mov	r1, r4
 8015eac:	4638      	mov	r0, r7
 8015eae:	f7ff ff0b 	bl	8015cc8 <__multiply>
 8015eb2:	6020      	str	r0, [r4, #0]
 8015eb4:	f8c0 9000 	str.w	r9, [r0]
 8015eb8:	4604      	mov	r4, r0
 8015eba:	e7e4      	b.n	8015e86 <__pow5mult+0x6a>
 8015ebc:	4630      	mov	r0, r6
 8015ebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ec2:	bf00      	nop
 8015ec4:	08025cdc 	.word	0x08025cdc
 8015ec8:	08025c02 	.word	0x08025c02
 8015ecc:	08025c82 	.word	0x08025c82

08015ed0 <__lshift>:
 8015ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ed4:	460c      	mov	r4, r1
 8015ed6:	6849      	ldr	r1, [r1, #4]
 8015ed8:	6923      	ldr	r3, [r4, #16]
 8015eda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015ede:	68a3      	ldr	r3, [r4, #8]
 8015ee0:	4607      	mov	r7, r0
 8015ee2:	4691      	mov	r9, r2
 8015ee4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015ee8:	f108 0601 	add.w	r6, r8, #1
 8015eec:	42b3      	cmp	r3, r6
 8015eee:	db0b      	blt.n	8015f08 <__lshift+0x38>
 8015ef0:	4638      	mov	r0, r7
 8015ef2:	f7ff fd95 	bl	8015a20 <_Balloc>
 8015ef6:	4605      	mov	r5, r0
 8015ef8:	b948      	cbnz	r0, 8015f0e <__lshift+0x3e>
 8015efa:	4602      	mov	r2, r0
 8015efc:	4b28      	ldr	r3, [pc, #160]	@ (8015fa0 <__lshift+0xd0>)
 8015efe:	4829      	ldr	r0, [pc, #164]	@ (8015fa4 <__lshift+0xd4>)
 8015f00:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8015f04:	f001 fcf0 	bl	80178e8 <__assert_func>
 8015f08:	3101      	adds	r1, #1
 8015f0a:	005b      	lsls	r3, r3, #1
 8015f0c:	e7ee      	b.n	8015eec <__lshift+0x1c>
 8015f0e:	2300      	movs	r3, #0
 8015f10:	f100 0114 	add.w	r1, r0, #20
 8015f14:	f100 0210 	add.w	r2, r0, #16
 8015f18:	4618      	mov	r0, r3
 8015f1a:	4553      	cmp	r3, sl
 8015f1c:	db33      	blt.n	8015f86 <__lshift+0xb6>
 8015f1e:	6920      	ldr	r0, [r4, #16]
 8015f20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015f24:	f104 0314 	add.w	r3, r4, #20
 8015f28:	f019 091f 	ands.w	r9, r9, #31
 8015f2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015f30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015f34:	d02b      	beq.n	8015f8e <__lshift+0xbe>
 8015f36:	f1c9 0e20 	rsb	lr, r9, #32
 8015f3a:	468a      	mov	sl, r1
 8015f3c:	2200      	movs	r2, #0
 8015f3e:	6818      	ldr	r0, [r3, #0]
 8015f40:	fa00 f009 	lsl.w	r0, r0, r9
 8015f44:	4310      	orrs	r0, r2
 8015f46:	f84a 0b04 	str.w	r0, [sl], #4
 8015f4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8015f4e:	459c      	cmp	ip, r3
 8015f50:	fa22 f20e 	lsr.w	r2, r2, lr
 8015f54:	d8f3      	bhi.n	8015f3e <__lshift+0x6e>
 8015f56:	ebac 0304 	sub.w	r3, ip, r4
 8015f5a:	3b15      	subs	r3, #21
 8015f5c:	f023 0303 	bic.w	r3, r3, #3
 8015f60:	3304      	adds	r3, #4
 8015f62:	f104 0015 	add.w	r0, r4, #21
 8015f66:	4584      	cmp	ip, r0
 8015f68:	bf38      	it	cc
 8015f6a:	2304      	movcc	r3, #4
 8015f6c:	50ca      	str	r2, [r1, r3]
 8015f6e:	b10a      	cbz	r2, 8015f74 <__lshift+0xa4>
 8015f70:	f108 0602 	add.w	r6, r8, #2
 8015f74:	3e01      	subs	r6, #1
 8015f76:	4638      	mov	r0, r7
 8015f78:	612e      	str	r6, [r5, #16]
 8015f7a:	4621      	mov	r1, r4
 8015f7c:	f7ff fd90 	bl	8015aa0 <_Bfree>
 8015f80:	4628      	mov	r0, r5
 8015f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f86:	f842 0f04 	str.w	r0, [r2, #4]!
 8015f8a:	3301      	adds	r3, #1
 8015f8c:	e7c5      	b.n	8015f1a <__lshift+0x4a>
 8015f8e:	3904      	subs	r1, #4
 8015f90:	f853 2b04 	ldr.w	r2, [r3], #4
 8015f94:	f841 2f04 	str.w	r2, [r1, #4]!
 8015f98:	459c      	cmp	ip, r3
 8015f9a:	d8f9      	bhi.n	8015f90 <__lshift+0xc0>
 8015f9c:	e7ea      	b.n	8015f74 <__lshift+0xa4>
 8015f9e:	bf00      	nop
 8015fa0:	08025c71 	.word	0x08025c71
 8015fa4:	08025c82 	.word	0x08025c82

08015fa8 <__mcmp>:
 8015fa8:	690a      	ldr	r2, [r1, #16]
 8015faa:	4603      	mov	r3, r0
 8015fac:	6900      	ldr	r0, [r0, #16]
 8015fae:	1a80      	subs	r0, r0, r2
 8015fb0:	b530      	push	{r4, r5, lr}
 8015fb2:	d10e      	bne.n	8015fd2 <__mcmp+0x2a>
 8015fb4:	3314      	adds	r3, #20
 8015fb6:	3114      	adds	r1, #20
 8015fb8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8015fbc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015fc0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015fc4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015fc8:	4295      	cmp	r5, r2
 8015fca:	d003      	beq.n	8015fd4 <__mcmp+0x2c>
 8015fcc:	d205      	bcs.n	8015fda <__mcmp+0x32>
 8015fce:	f04f 30ff 	mov.w	r0, #4294967295
 8015fd2:	bd30      	pop	{r4, r5, pc}
 8015fd4:	42a3      	cmp	r3, r4
 8015fd6:	d3f3      	bcc.n	8015fc0 <__mcmp+0x18>
 8015fd8:	e7fb      	b.n	8015fd2 <__mcmp+0x2a>
 8015fda:	2001      	movs	r0, #1
 8015fdc:	e7f9      	b.n	8015fd2 <__mcmp+0x2a>
	...

08015fe0 <__mdiff>:
 8015fe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fe4:	4689      	mov	r9, r1
 8015fe6:	4606      	mov	r6, r0
 8015fe8:	4611      	mov	r1, r2
 8015fea:	4648      	mov	r0, r9
 8015fec:	4614      	mov	r4, r2
 8015fee:	f7ff ffdb 	bl	8015fa8 <__mcmp>
 8015ff2:	1e05      	subs	r5, r0, #0
 8015ff4:	d112      	bne.n	801601c <__mdiff+0x3c>
 8015ff6:	4629      	mov	r1, r5
 8015ff8:	4630      	mov	r0, r6
 8015ffa:	f7ff fd11 	bl	8015a20 <_Balloc>
 8015ffe:	4602      	mov	r2, r0
 8016000:	b928      	cbnz	r0, 801600e <__mdiff+0x2e>
 8016002:	4b3f      	ldr	r3, [pc, #252]	@ (8016100 <__mdiff+0x120>)
 8016004:	f240 2137 	movw	r1, #567	@ 0x237
 8016008:	483e      	ldr	r0, [pc, #248]	@ (8016104 <__mdiff+0x124>)
 801600a:	f001 fc6d 	bl	80178e8 <__assert_func>
 801600e:	2301      	movs	r3, #1
 8016010:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016014:	4610      	mov	r0, r2
 8016016:	b003      	add	sp, #12
 8016018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801601c:	bfbc      	itt	lt
 801601e:	464b      	movlt	r3, r9
 8016020:	46a1      	movlt	r9, r4
 8016022:	4630      	mov	r0, r6
 8016024:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8016028:	bfba      	itte	lt
 801602a:	461c      	movlt	r4, r3
 801602c:	2501      	movlt	r5, #1
 801602e:	2500      	movge	r5, #0
 8016030:	f7ff fcf6 	bl	8015a20 <_Balloc>
 8016034:	4602      	mov	r2, r0
 8016036:	b918      	cbnz	r0, 8016040 <__mdiff+0x60>
 8016038:	4b31      	ldr	r3, [pc, #196]	@ (8016100 <__mdiff+0x120>)
 801603a:	f240 2145 	movw	r1, #581	@ 0x245
 801603e:	e7e3      	b.n	8016008 <__mdiff+0x28>
 8016040:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8016044:	6926      	ldr	r6, [r4, #16]
 8016046:	60c5      	str	r5, [r0, #12]
 8016048:	f109 0310 	add.w	r3, r9, #16
 801604c:	f109 0514 	add.w	r5, r9, #20
 8016050:	f104 0e14 	add.w	lr, r4, #20
 8016054:	f100 0b14 	add.w	fp, r0, #20
 8016058:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801605c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8016060:	9301      	str	r3, [sp, #4]
 8016062:	46d9      	mov	r9, fp
 8016064:	f04f 0c00 	mov.w	ip, #0
 8016068:	9b01      	ldr	r3, [sp, #4]
 801606a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801606e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8016072:	9301      	str	r3, [sp, #4]
 8016074:	fa1f f38a 	uxth.w	r3, sl
 8016078:	4619      	mov	r1, r3
 801607a:	b283      	uxth	r3, r0
 801607c:	1acb      	subs	r3, r1, r3
 801607e:	0c00      	lsrs	r0, r0, #16
 8016080:	4463      	add	r3, ip
 8016082:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8016086:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801608a:	b29b      	uxth	r3, r3
 801608c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8016090:	4576      	cmp	r6, lr
 8016092:	f849 3b04 	str.w	r3, [r9], #4
 8016096:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801609a:	d8e5      	bhi.n	8016068 <__mdiff+0x88>
 801609c:	1b33      	subs	r3, r6, r4
 801609e:	3b15      	subs	r3, #21
 80160a0:	f023 0303 	bic.w	r3, r3, #3
 80160a4:	3415      	adds	r4, #21
 80160a6:	3304      	adds	r3, #4
 80160a8:	42a6      	cmp	r6, r4
 80160aa:	bf38      	it	cc
 80160ac:	2304      	movcc	r3, #4
 80160ae:	441d      	add	r5, r3
 80160b0:	445b      	add	r3, fp
 80160b2:	461e      	mov	r6, r3
 80160b4:	462c      	mov	r4, r5
 80160b6:	4544      	cmp	r4, r8
 80160b8:	d30e      	bcc.n	80160d8 <__mdiff+0xf8>
 80160ba:	f108 0103 	add.w	r1, r8, #3
 80160be:	1b49      	subs	r1, r1, r5
 80160c0:	f021 0103 	bic.w	r1, r1, #3
 80160c4:	3d03      	subs	r5, #3
 80160c6:	45a8      	cmp	r8, r5
 80160c8:	bf38      	it	cc
 80160ca:	2100      	movcc	r1, #0
 80160cc:	440b      	add	r3, r1
 80160ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80160d2:	b191      	cbz	r1, 80160fa <__mdiff+0x11a>
 80160d4:	6117      	str	r7, [r2, #16]
 80160d6:	e79d      	b.n	8016014 <__mdiff+0x34>
 80160d8:	f854 1b04 	ldr.w	r1, [r4], #4
 80160dc:	46e6      	mov	lr, ip
 80160de:	0c08      	lsrs	r0, r1, #16
 80160e0:	fa1c fc81 	uxtah	ip, ip, r1
 80160e4:	4471      	add	r1, lr
 80160e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80160ea:	b289      	uxth	r1, r1
 80160ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80160f0:	f846 1b04 	str.w	r1, [r6], #4
 80160f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80160f8:	e7dd      	b.n	80160b6 <__mdiff+0xd6>
 80160fa:	3f01      	subs	r7, #1
 80160fc:	e7e7      	b.n	80160ce <__mdiff+0xee>
 80160fe:	bf00      	nop
 8016100:	08025c71 	.word	0x08025c71
 8016104:	08025c82 	.word	0x08025c82

08016108 <__ulp>:
 8016108:	b082      	sub	sp, #8
 801610a:	ed8d 0b00 	vstr	d0, [sp]
 801610e:	9a01      	ldr	r2, [sp, #4]
 8016110:	4b0f      	ldr	r3, [pc, #60]	@ (8016150 <__ulp+0x48>)
 8016112:	4013      	ands	r3, r2
 8016114:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8016118:	2b00      	cmp	r3, #0
 801611a:	dc08      	bgt.n	801612e <__ulp+0x26>
 801611c:	425b      	negs	r3, r3
 801611e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8016122:	ea4f 5223 	mov.w	r2, r3, asr #20
 8016126:	da04      	bge.n	8016132 <__ulp+0x2a>
 8016128:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801612c:	4113      	asrs	r3, r2
 801612e:	2200      	movs	r2, #0
 8016130:	e008      	b.n	8016144 <__ulp+0x3c>
 8016132:	f1a2 0314 	sub.w	r3, r2, #20
 8016136:	2b1e      	cmp	r3, #30
 8016138:	bfda      	itte	le
 801613a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801613e:	40da      	lsrle	r2, r3
 8016140:	2201      	movgt	r2, #1
 8016142:	2300      	movs	r3, #0
 8016144:	4619      	mov	r1, r3
 8016146:	4610      	mov	r0, r2
 8016148:	ec41 0b10 	vmov	d0, r0, r1
 801614c:	b002      	add	sp, #8
 801614e:	4770      	bx	lr
 8016150:	7ff00000 	.word	0x7ff00000

08016154 <__b2d>:
 8016154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016158:	6906      	ldr	r6, [r0, #16]
 801615a:	f100 0814 	add.w	r8, r0, #20
 801615e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8016162:	1f37      	subs	r7, r6, #4
 8016164:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016168:	4610      	mov	r0, r2
 801616a:	f7ff fd4b 	bl	8015c04 <__hi0bits>
 801616e:	f1c0 0320 	rsb	r3, r0, #32
 8016172:	280a      	cmp	r0, #10
 8016174:	600b      	str	r3, [r1, #0]
 8016176:	491b      	ldr	r1, [pc, #108]	@ (80161e4 <__b2d+0x90>)
 8016178:	dc15      	bgt.n	80161a6 <__b2d+0x52>
 801617a:	f1c0 0c0b 	rsb	ip, r0, #11
 801617e:	fa22 f30c 	lsr.w	r3, r2, ip
 8016182:	45b8      	cmp	r8, r7
 8016184:	ea43 0501 	orr.w	r5, r3, r1
 8016188:	bf34      	ite	cc
 801618a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801618e:	2300      	movcs	r3, #0
 8016190:	3015      	adds	r0, #21
 8016192:	fa02 f000 	lsl.w	r0, r2, r0
 8016196:	fa23 f30c 	lsr.w	r3, r3, ip
 801619a:	4303      	orrs	r3, r0
 801619c:	461c      	mov	r4, r3
 801619e:	ec45 4b10 	vmov	d0, r4, r5
 80161a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161a6:	45b8      	cmp	r8, r7
 80161a8:	bf3a      	itte	cc
 80161aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80161ae:	f1a6 0708 	subcc.w	r7, r6, #8
 80161b2:	2300      	movcs	r3, #0
 80161b4:	380b      	subs	r0, #11
 80161b6:	d012      	beq.n	80161de <__b2d+0x8a>
 80161b8:	f1c0 0120 	rsb	r1, r0, #32
 80161bc:	fa23 f401 	lsr.w	r4, r3, r1
 80161c0:	4082      	lsls	r2, r0
 80161c2:	4322      	orrs	r2, r4
 80161c4:	4547      	cmp	r7, r8
 80161c6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80161ca:	bf8c      	ite	hi
 80161cc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80161d0:	2200      	movls	r2, #0
 80161d2:	4083      	lsls	r3, r0
 80161d4:	40ca      	lsrs	r2, r1
 80161d6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80161da:	4313      	orrs	r3, r2
 80161dc:	e7de      	b.n	801619c <__b2d+0x48>
 80161de:	ea42 0501 	orr.w	r5, r2, r1
 80161e2:	e7db      	b.n	801619c <__b2d+0x48>
 80161e4:	3ff00000 	.word	0x3ff00000

080161e8 <__d2b>:
 80161e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80161ec:	460f      	mov	r7, r1
 80161ee:	2101      	movs	r1, #1
 80161f0:	ec59 8b10 	vmov	r8, r9, d0
 80161f4:	4616      	mov	r6, r2
 80161f6:	f7ff fc13 	bl	8015a20 <_Balloc>
 80161fa:	4604      	mov	r4, r0
 80161fc:	b930      	cbnz	r0, 801620c <__d2b+0x24>
 80161fe:	4602      	mov	r2, r0
 8016200:	4b23      	ldr	r3, [pc, #140]	@ (8016290 <__d2b+0xa8>)
 8016202:	4824      	ldr	r0, [pc, #144]	@ (8016294 <__d2b+0xac>)
 8016204:	f240 310f 	movw	r1, #783	@ 0x30f
 8016208:	f001 fb6e 	bl	80178e8 <__assert_func>
 801620c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016210:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016214:	b10d      	cbz	r5, 801621a <__d2b+0x32>
 8016216:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801621a:	9301      	str	r3, [sp, #4]
 801621c:	f1b8 0300 	subs.w	r3, r8, #0
 8016220:	d023      	beq.n	801626a <__d2b+0x82>
 8016222:	4668      	mov	r0, sp
 8016224:	9300      	str	r3, [sp, #0]
 8016226:	f7ff fd0c 	bl	8015c42 <__lo0bits>
 801622a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801622e:	b1d0      	cbz	r0, 8016266 <__d2b+0x7e>
 8016230:	f1c0 0320 	rsb	r3, r0, #32
 8016234:	fa02 f303 	lsl.w	r3, r2, r3
 8016238:	430b      	orrs	r3, r1
 801623a:	40c2      	lsrs	r2, r0
 801623c:	6163      	str	r3, [r4, #20]
 801623e:	9201      	str	r2, [sp, #4]
 8016240:	9b01      	ldr	r3, [sp, #4]
 8016242:	61a3      	str	r3, [r4, #24]
 8016244:	2b00      	cmp	r3, #0
 8016246:	bf0c      	ite	eq
 8016248:	2201      	moveq	r2, #1
 801624a:	2202      	movne	r2, #2
 801624c:	6122      	str	r2, [r4, #16]
 801624e:	b1a5      	cbz	r5, 801627a <__d2b+0x92>
 8016250:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8016254:	4405      	add	r5, r0
 8016256:	603d      	str	r5, [r7, #0]
 8016258:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801625c:	6030      	str	r0, [r6, #0]
 801625e:	4620      	mov	r0, r4
 8016260:	b003      	add	sp, #12
 8016262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016266:	6161      	str	r1, [r4, #20]
 8016268:	e7ea      	b.n	8016240 <__d2b+0x58>
 801626a:	a801      	add	r0, sp, #4
 801626c:	f7ff fce9 	bl	8015c42 <__lo0bits>
 8016270:	9b01      	ldr	r3, [sp, #4]
 8016272:	6163      	str	r3, [r4, #20]
 8016274:	3020      	adds	r0, #32
 8016276:	2201      	movs	r2, #1
 8016278:	e7e8      	b.n	801624c <__d2b+0x64>
 801627a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801627e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8016282:	6038      	str	r0, [r7, #0]
 8016284:	6918      	ldr	r0, [r3, #16]
 8016286:	f7ff fcbd 	bl	8015c04 <__hi0bits>
 801628a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801628e:	e7e5      	b.n	801625c <__d2b+0x74>
 8016290:	08025c71 	.word	0x08025c71
 8016294:	08025c82 	.word	0x08025c82

08016298 <__ratio>:
 8016298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801629c:	b085      	sub	sp, #20
 801629e:	e9cd 1000 	strd	r1, r0, [sp]
 80162a2:	a902      	add	r1, sp, #8
 80162a4:	f7ff ff56 	bl	8016154 <__b2d>
 80162a8:	9800      	ldr	r0, [sp, #0]
 80162aa:	a903      	add	r1, sp, #12
 80162ac:	ec55 4b10 	vmov	r4, r5, d0
 80162b0:	f7ff ff50 	bl	8016154 <__b2d>
 80162b4:	9b01      	ldr	r3, [sp, #4]
 80162b6:	6919      	ldr	r1, [r3, #16]
 80162b8:	9b00      	ldr	r3, [sp, #0]
 80162ba:	691b      	ldr	r3, [r3, #16]
 80162bc:	1ac9      	subs	r1, r1, r3
 80162be:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80162c2:	1a9b      	subs	r3, r3, r2
 80162c4:	ec5b ab10 	vmov	sl, fp, d0
 80162c8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	bfce      	itee	gt
 80162d0:	462a      	movgt	r2, r5
 80162d2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80162d6:	465a      	movle	r2, fp
 80162d8:	462f      	mov	r7, r5
 80162da:	46d9      	mov	r9, fp
 80162dc:	bfcc      	ite	gt
 80162de:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80162e2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80162e6:	464b      	mov	r3, r9
 80162e8:	4652      	mov	r2, sl
 80162ea:	4620      	mov	r0, r4
 80162ec:	4639      	mov	r1, r7
 80162ee:	f7ea fad5 	bl	800089c <__aeabi_ddiv>
 80162f2:	ec41 0b10 	vmov	d0, r0, r1
 80162f6:	b005      	add	sp, #20
 80162f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080162fc <__copybits>:
 80162fc:	3901      	subs	r1, #1
 80162fe:	b570      	push	{r4, r5, r6, lr}
 8016300:	1149      	asrs	r1, r1, #5
 8016302:	6914      	ldr	r4, [r2, #16]
 8016304:	3101      	adds	r1, #1
 8016306:	f102 0314 	add.w	r3, r2, #20
 801630a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801630e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016312:	1f05      	subs	r5, r0, #4
 8016314:	42a3      	cmp	r3, r4
 8016316:	d30c      	bcc.n	8016332 <__copybits+0x36>
 8016318:	1aa3      	subs	r3, r4, r2
 801631a:	3b11      	subs	r3, #17
 801631c:	f023 0303 	bic.w	r3, r3, #3
 8016320:	3211      	adds	r2, #17
 8016322:	42a2      	cmp	r2, r4
 8016324:	bf88      	it	hi
 8016326:	2300      	movhi	r3, #0
 8016328:	4418      	add	r0, r3
 801632a:	2300      	movs	r3, #0
 801632c:	4288      	cmp	r0, r1
 801632e:	d305      	bcc.n	801633c <__copybits+0x40>
 8016330:	bd70      	pop	{r4, r5, r6, pc}
 8016332:	f853 6b04 	ldr.w	r6, [r3], #4
 8016336:	f845 6f04 	str.w	r6, [r5, #4]!
 801633a:	e7eb      	b.n	8016314 <__copybits+0x18>
 801633c:	f840 3b04 	str.w	r3, [r0], #4
 8016340:	e7f4      	b.n	801632c <__copybits+0x30>

08016342 <__any_on>:
 8016342:	f100 0214 	add.w	r2, r0, #20
 8016346:	6900      	ldr	r0, [r0, #16]
 8016348:	114b      	asrs	r3, r1, #5
 801634a:	4298      	cmp	r0, r3
 801634c:	b510      	push	{r4, lr}
 801634e:	db11      	blt.n	8016374 <__any_on+0x32>
 8016350:	dd0a      	ble.n	8016368 <__any_on+0x26>
 8016352:	f011 011f 	ands.w	r1, r1, #31
 8016356:	d007      	beq.n	8016368 <__any_on+0x26>
 8016358:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801635c:	fa24 f001 	lsr.w	r0, r4, r1
 8016360:	fa00 f101 	lsl.w	r1, r0, r1
 8016364:	428c      	cmp	r4, r1
 8016366:	d10b      	bne.n	8016380 <__any_on+0x3e>
 8016368:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801636c:	4293      	cmp	r3, r2
 801636e:	d803      	bhi.n	8016378 <__any_on+0x36>
 8016370:	2000      	movs	r0, #0
 8016372:	bd10      	pop	{r4, pc}
 8016374:	4603      	mov	r3, r0
 8016376:	e7f7      	b.n	8016368 <__any_on+0x26>
 8016378:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801637c:	2900      	cmp	r1, #0
 801637e:	d0f5      	beq.n	801636c <__any_on+0x2a>
 8016380:	2001      	movs	r0, #1
 8016382:	e7f6      	b.n	8016372 <__any_on+0x30>

08016384 <sulp>:
 8016384:	b570      	push	{r4, r5, r6, lr}
 8016386:	4604      	mov	r4, r0
 8016388:	460d      	mov	r5, r1
 801638a:	ec45 4b10 	vmov	d0, r4, r5
 801638e:	4616      	mov	r6, r2
 8016390:	f7ff feba 	bl	8016108 <__ulp>
 8016394:	ec51 0b10 	vmov	r0, r1, d0
 8016398:	b17e      	cbz	r6, 80163ba <sulp+0x36>
 801639a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801639e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	dd09      	ble.n	80163ba <sulp+0x36>
 80163a6:	051b      	lsls	r3, r3, #20
 80163a8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80163ac:	2400      	movs	r4, #0
 80163ae:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80163b2:	4622      	mov	r2, r4
 80163b4:	462b      	mov	r3, r5
 80163b6:	f7ea f947 	bl	8000648 <__aeabi_dmul>
 80163ba:	ec41 0b10 	vmov	d0, r0, r1
 80163be:	bd70      	pop	{r4, r5, r6, pc}

080163c0 <_strtod_l>:
 80163c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163c4:	b09f      	sub	sp, #124	@ 0x7c
 80163c6:	460c      	mov	r4, r1
 80163c8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80163ca:	2200      	movs	r2, #0
 80163cc:	921a      	str	r2, [sp, #104]	@ 0x68
 80163ce:	9005      	str	r0, [sp, #20]
 80163d0:	f04f 0a00 	mov.w	sl, #0
 80163d4:	f04f 0b00 	mov.w	fp, #0
 80163d8:	460a      	mov	r2, r1
 80163da:	9219      	str	r2, [sp, #100]	@ 0x64
 80163dc:	7811      	ldrb	r1, [r2, #0]
 80163de:	292b      	cmp	r1, #43	@ 0x2b
 80163e0:	d04a      	beq.n	8016478 <_strtod_l+0xb8>
 80163e2:	d838      	bhi.n	8016456 <_strtod_l+0x96>
 80163e4:	290d      	cmp	r1, #13
 80163e6:	d832      	bhi.n	801644e <_strtod_l+0x8e>
 80163e8:	2908      	cmp	r1, #8
 80163ea:	d832      	bhi.n	8016452 <_strtod_l+0x92>
 80163ec:	2900      	cmp	r1, #0
 80163ee:	d03b      	beq.n	8016468 <_strtod_l+0xa8>
 80163f0:	2200      	movs	r2, #0
 80163f2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80163f4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80163f6:	782a      	ldrb	r2, [r5, #0]
 80163f8:	2a30      	cmp	r2, #48	@ 0x30
 80163fa:	f040 80b3 	bne.w	8016564 <_strtod_l+0x1a4>
 80163fe:	786a      	ldrb	r2, [r5, #1]
 8016400:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016404:	2a58      	cmp	r2, #88	@ 0x58
 8016406:	d16e      	bne.n	80164e6 <_strtod_l+0x126>
 8016408:	9302      	str	r3, [sp, #8]
 801640a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801640c:	9301      	str	r3, [sp, #4]
 801640e:	ab1a      	add	r3, sp, #104	@ 0x68
 8016410:	9300      	str	r3, [sp, #0]
 8016412:	4a8e      	ldr	r2, [pc, #568]	@ (801664c <_strtod_l+0x28c>)
 8016414:	9805      	ldr	r0, [sp, #20]
 8016416:	ab1b      	add	r3, sp, #108	@ 0x6c
 8016418:	a919      	add	r1, sp, #100	@ 0x64
 801641a:	f001 faff 	bl	8017a1c <__gethex>
 801641e:	f010 060f 	ands.w	r6, r0, #15
 8016422:	4604      	mov	r4, r0
 8016424:	d005      	beq.n	8016432 <_strtod_l+0x72>
 8016426:	2e06      	cmp	r6, #6
 8016428:	d128      	bne.n	801647c <_strtod_l+0xbc>
 801642a:	3501      	adds	r5, #1
 801642c:	2300      	movs	r3, #0
 801642e:	9519      	str	r5, [sp, #100]	@ 0x64
 8016430:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016432:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016434:	2b00      	cmp	r3, #0
 8016436:	f040 858e 	bne.w	8016f56 <_strtod_l+0xb96>
 801643a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801643c:	b1cb      	cbz	r3, 8016472 <_strtod_l+0xb2>
 801643e:	4652      	mov	r2, sl
 8016440:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8016444:	ec43 2b10 	vmov	d0, r2, r3
 8016448:	b01f      	add	sp, #124	@ 0x7c
 801644a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801644e:	2920      	cmp	r1, #32
 8016450:	d1ce      	bne.n	80163f0 <_strtod_l+0x30>
 8016452:	3201      	adds	r2, #1
 8016454:	e7c1      	b.n	80163da <_strtod_l+0x1a>
 8016456:	292d      	cmp	r1, #45	@ 0x2d
 8016458:	d1ca      	bne.n	80163f0 <_strtod_l+0x30>
 801645a:	2101      	movs	r1, #1
 801645c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801645e:	1c51      	adds	r1, r2, #1
 8016460:	9119      	str	r1, [sp, #100]	@ 0x64
 8016462:	7852      	ldrb	r2, [r2, #1]
 8016464:	2a00      	cmp	r2, #0
 8016466:	d1c5      	bne.n	80163f4 <_strtod_l+0x34>
 8016468:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801646a:	9419      	str	r4, [sp, #100]	@ 0x64
 801646c:	2b00      	cmp	r3, #0
 801646e:	f040 8570 	bne.w	8016f52 <_strtod_l+0xb92>
 8016472:	4652      	mov	r2, sl
 8016474:	465b      	mov	r3, fp
 8016476:	e7e5      	b.n	8016444 <_strtod_l+0x84>
 8016478:	2100      	movs	r1, #0
 801647a:	e7ef      	b.n	801645c <_strtod_l+0x9c>
 801647c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801647e:	b13a      	cbz	r2, 8016490 <_strtod_l+0xd0>
 8016480:	2135      	movs	r1, #53	@ 0x35
 8016482:	a81c      	add	r0, sp, #112	@ 0x70
 8016484:	f7ff ff3a 	bl	80162fc <__copybits>
 8016488:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801648a:	9805      	ldr	r0, [sp, #20]
 801648c:	f7ff fb08 	bl	8015aa0 <_Bfree>
 8016490:	3e01      	subs	r6, #1
 8016492:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8016494:	2e04      	cmp	r6, #4
 8016496:	d806      	bhi.n	80164a6 <_strtod_l+0xe6>
 8016498:	e8df f006 	tbb	[pc, r6]
 801649c:	201d0314 	.word	0x201d0314
 80164a0:	14          	.byte	0x14
 80164a1:	00          	.byte	0x00
 80164a2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80164a6:	05e1      	lsls	r1, r4, #23
 80164a8:	bf48      	it	mi
 80164aa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80164ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80164b2:	0d1b      	lsrs	r3, r3, #20
 80164b4:	051b      	lsls	r3, r3, #20
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d1bb      	bne.n	8016432 <_strtod_l+0x72>
 80164ba:	f7fe fb31 	bl	8014b20 <__errno>
 80164be:	2322      	movs	r3, #34	@ 0x22
 80164c0:	6003      	str	r3, [r0, #0]
 80164c2:	e7b6      	b.n	8016432 <_strtod_l+0x72>
 80164c4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80164c8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80164cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80164d0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80164d4:	e7e7      	b.n	80164a6 <_strtod_l+0xe6>
 80164d6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8016654 <_strtod_l+0x294>
 80164da:	e7e4      	b.n	80164a6 <_strtod_l+0xe6>
 80164dc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80164e0:	f04f 3aff 	mov.w	sl, #4294967295
 80164e4:	e7df      	b.n	80164a6 <_strtod_l+0xe6>
 80164e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80164e8:	1c5a      	adds	r2, r3, #1
 80164ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80164ec:	785b      	ldrb	r3, [r3, #1]
 80164ee:	2b30      	cmp	r3, #48	@ 0x30
 80164f0:	d0f9      	beq.n	80164e6 <_strtod_l+0x126>
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d09d      	beq.n	8016432 <_strtod_l+0x72>
 80164f6:	2301      	movs	r3, #1
 80164f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80164fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80164fc:	930c      	str	r3, [sp, #48]	@ 0x30
 80164fe:	2300      	movs	r3, #0
 8016500:	9308      	str	r3, [sp, #32]
 8016502:	930a      	str	r3, [sp, #40]	@ 0x28
 8016504:	461f      	mov	r7, r3
 8016506:	220a      	movs	r2, #10
 8016508:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801650a:	7805      	ldrb	r5, [r0, #0]
 801650c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8016510:	b2d9      	uxtb	r1, r3
 8016512:	2909      	cmp	r1, #9
 8016514:	d928      	bls.n	8016568 <_strtod_l+0x1a8>
 8016516:	494e      	ldr	r1, [pc, #312]	@ (8016650 <_strtod_l+0x290>)
 8016518:	2201      	movs	r2, #1
 801651a:	f001 f9ab 	bl	8017874 <strncmp>
 801651e:	2800      	cmp	r0, #0
 8016520:	d032      	beq.n	8016588 <_strtod_l+0x1c8>
 8016522:	2000      	movs	r0, #0
 8016524:	462a      	mov	r2, r5
 8016526:	4681      	mov	r9, r0
 8016528:	463d      	mov	r5, r7
 801652a:	4603      	mov	r3, r0
 801652c:	2a65      	cmp	r2, #101	@ 0x65
 801652e:	d001      	beq.n	8016534 <_strtod_l+0x174>
 8016530:	2a45      	cmp	r2, #69	@ 0x45
 8016532:	d114      	bne.n	801655e <_strtod_l+0x19e>
 8016534:	b91d      	cbnz	r5, 801653e <_strtod_l+0x17e>
 8016536:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016538:	4302      	orrs	r2, r0
 801653a:	d095      	beq.n	8016468 <_strtod_l+0xa8>
 801653c:	2500      	movs	r5, #0
 801653e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8016540:	1c62      	adds	r2, r4, #1
 8016542:	9219      	str	r2, [sp, #100]	@ 0x64
 8016544:	7862      	ldrb	r2, [r4, #1]
 8016546:	2a2b      	cmp	r2, #43	@ 0x2b
 8016548:	d077      	beq.n	801663a <_strtod_l+0x27a>
 801654a:	2a2d      	cmp	r2, #45	@ 0x2d
 801654c:	d07b      	beq.n	8016646 <_strtod_l+0x286>
 801654e:	f04f 0c00 	mov.w	ip, #0
 8016552:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8016556:	2909      	cmp	r1, #9
 8016558:	f240 8082 	bls.w	8016660 <_strtod_l+0x2a0>
 801655c:	9419      	str	r4, [sp, #100]	@ 0x64
 801655e:	f04f 0800 	mov.w	r8, #0
 8016562:	e0a2      	b.n	80166aa <_strtod_l+0x2ea>
 8016564:	2300      	movs	r3, #0
 8016566:	e7c7      	b.n	80164f8 <_strtod_l+0x138>
 8016568:	2f08      	cmp	r7, #8
 801656a:	bfd5      	itete	le
 801656c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801656e:	9908      	ldrgt	r1, [sp, #32]
 8016570:	fb02 3301 	mlale	r3, r2, r1, r3
 8016574:	fb02 3301 	mlagt	r3, r2, r1, r3
 8016578:	f100 0001 	add.w	r0, r0, #1
 801657c:	bfd4      	ite	le
 801657e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8016580:	9308      	strgt	r3, [sp, #32]
 8016582:	3701      	adds	r7, #1
 8016584:	9019      	str	r0, [sp, #100]	@ 0x64
 8016586:	e7bf      	b.n	8016508 <_strtod_l+0x148>
 8016588:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801658a:	1c5a      	adds	r2, r3, #1
 801658c:	9219      	str	r2, [sp, #100]	@ 0x64
 801658e:	785a      	ldrb	r2, [r3, #1]
 8016590:	b37f      	cbz	r7, 80165f2 <_strtod_l+0x232>
 8016592:	4681      	mov	r9, r0
 8016594:	463d      	mov	r5, r7
 8016596:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801659a:	2b09      	cmp	r3, #9
 801659c:	d912      	bls.n	80165c4 <_strtod_l+0x204>
 801659e:	2301      	movs	r3, #1
 80165a0:	e7c4      	b.n	801652c <_strtod_l+0x16c>
 80165a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80165a4:	1c5a      	adds	r2, r3, #1
 80165a6:	9219      	str	r2, [sp, #100]	@ 0x64
 80165a8:	785a      	ldrb	r2, [r3, #1]
 80165aa:	3001      	adds	r0, #1
 80165ac:	2a30      	cmp	r2, #48	@ 0x30
 80165ae:	d0f8      	beq.n	80165a2 <_strtod_l+0x1e2>
 80165b0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80165b4:	2b08      	cmp	r3, #8
 80165b6:	f200 84d3 	bhi.w	8016f60 <_strtod_l+0xba0>
 80165ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80165bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80165be:	4681      	mov	r9, r0
 80165c0:	2000      	movs	r0, #0
 80165c2:	4605      	mov	r5, r0
 80165c4:	3a30      	subs	r2, #48	@ 0x30
 80165c6:	f100 0301 	add.w	r3, r0, #1
 80165ca:	d02a      	beq.n	8016622 <_strtod_l+0x262>
 80165cc:	4499      	add	r9, r3
 80165ce:	eb00 0c05 	add.w	ip, r0, r5
 80165d2:	462b      	mov	r3, r5
 80165d4:	210a      	movs	r1, #10
 80165d6:	4563      	cmp	r3, ip
 80165d8:	d10d      	bne.n	80165f6 <_strtod_l+0x236>
 80165da:	1c69      	adds	r1, r5, #1
 80165dc:	4401      	add	r1, r0
 80165de:	4428      	add	r0, r5
 80165e0:	2808      	cmp	r0, #8
 80165e2:	dc16      	bgt.n	8016612 <_strtod_l+0x252>
 80165e4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80165e6:	230a      	movs	r3, #10
 80165e8:	fb03 2300 	mla	r3, r3, r0, r2
 80165ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80165ee:	2300      	movs	r3, #0
 80165f0:	e018      	b.n	8016624 <_strtod_l+0x264>
 80165f2:	4638      	mov	r0, r7
 80165f4:	e7da      	b.n	80165ac <_strtod_l+0x1ec>
 80165f6:	2b08      	cmp	r3, #8
 80165f8:	f103 0301 	add.w	r3, r3, #1
 80165fc:	dc03      	bgt.n	8016606 <_strtod_l+0x246>
 80165fe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8016600:	434e      	muls	r6, r1
 8016602:	960a      	str	r6, [sp, #40]	@ 0x28
 8016604:	e7e7      	b.n	80165d6 <_strtod_l+0x216>
 8016606:	2b10      	cmp	r3, #16
 8016608:	bfde      	ittt	le
 801660a:	9e08      	ldrle	r6, [sp, #32]
 801660c:	434e      	mulle	r6, r1
 801660e:	9608      	strle	r6, [sp, #32]
 8016610:	e7e1      	b.n	80165d6 <_strtod_l+0x216>
 8016612:	280f      	cmp	r0, #15
 8016614:	dceb      	bgt.n	80165ee <_strtod_l+0x22e>
 8016616:	9808      	ldr	r0, [sp, #32]
 8016618:	230a      	movs	r3, #10
 801661a:	fb03 2300 	mla	r3, r3, r0, r2
 801661e:	9308      	str	r3, [sp, #32]
 8016620:	e7e5      	b.n	80165ee <_strtod_l+0x22e>
 8016622:	4629      	mov	r1, r5
 8016624:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016626:	1c50      	adds	r0, r2, #1
 8016628:	9019      	str	r0, [sp, #100]	@ 0x64
 801662a:	7852      	ldrb	r2, [r2, #1]
 801662c:	4618      	mov	r0, r3
 801662e:	460d      	mov	r5, r1
 8016630:	e7b1      	b.n	8016596 <_strtod_l+0x1d6>
 8016632:	f04f 0900 	mov.w	r9, #0
 8016636:	2301      	movs	r3, #1
 8016638:	e77d      	b.n	8016536 <_strtod_l+0x176>
 801663a:	f04f 0c00 	mov.w	ip, #0
 801663e:	1ca2      	adds	r2, r4, #2
 8016640:	9219      	str	r2, [sp, #100]	@ 0x64
 8016642:	78a2      	ldrb	r2, [r4, #2]
 8016644:	e785      	b.n	8016552 <_strtod_l+0x192>
 8016646:	f04f 0c01 	mov.w	ip, #1
 801664a:	e7f8      	b.n	801663e <_strtod_l+0x27e>
 801664c:	08025df0 	.word	0x08025df0
 8016650:	08025dd8 	.word	0x08025dd8
 8016654:	7ff00000 	.word	0x7ff00000
 8016658:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801665a:	1c51      	adds	r1, r2, #1
 801665c:	9119      	str	r1, [sp, #100]	@ 0x64
 801665e:	7852      	ldrb	r2, [r2, #1]
 8016660:	2a30      	cmp	r2, #48	@ 0x30
 8016662:	d0f9      	beq.n	8016658 <_strtod_l+0x298>
 8016664:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8016668:	2908      	cmp	r1, #8
 801666a:	f63f af78 	bhi.w	801655e <_strtod_l+0x19e>
 801666e:	3a30      	subs	r2, #48	@ 0x30
 8016670:	920e      	str	r2, [sp, #56]	@ 0x38
 8016672:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016674:	920f      	str	r2, [sp, #60]	@ 0x3c
 8016676:	f04f 080a 	mov.w	r8, #10
 801667a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801667c:	1c56      	adds	r6, r2, #1
 801667e:	9619      	str	r6, [sp, #100]	@ 0x64
 8016680:	7852      	ldrb	r2, [r2, #1]
 8016682:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8016686:	f1be 0f09 	cmp.w	lr, #9
 801668a:	d939      	bls.n	8016700 <_strtod_l+0x340>
 801668c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801668e:	1a76      	subs	r6, r6, r1
 8016690:	2e08      	cmp	r6, #8
 8016692:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8016696:	dc03      	bgt.n	80166a0 <_strtod_l+0x2e0>
 8016698:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801669a:	4588      	cmp	r8, r1
 801669c:	bfa8      	it	ge
 801669e:	4688      	movge	r8, r1
 80166a0:	f1bc 0f00 	cmp.w	ip, #0
 80166a4:	d001      	beq.n	80166aa <_strtod_l+0x2ea>
 80166a6:	f1c8 0800 	rsb	r8, r8, #0
 80166aa:	2d00      	cmp	r5, #0
 80166ac:	d14e      	bne.n	801674c <_strtod_l+0x38c>
 80166ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80166b0:	4308      	orrs	r0, r1
 80166b2:	f47f aebe 	bne.w	8016432 <_strtod_l+0x72>
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	f47f aed6 	bne.w	8016468 <_strtod_l+0xa8>
 80166bc:	2a69      	cmp	r2, #105	@ 0x69
 80166be:	d028      	beq.n	8016712 <_strtod_l+0x352>
 80166c0:	dc25      	bgt.n	801670e <_strtod_l+0x34e>
 80166c2:	2a49      	cmp	r2, #73	@ 0x49
 80166c4:	d025      	beq.n	8016712 <_strtod_l+0x352>
 80166c6:	2a4e      	cmp	r2, #78	@ 0x4e
 80166c8:	f47f aece 	bne.w	8016468 <_strtod_l+0xa8>
 80166cc:	499b      	ldr	r1, [pc, #620]	@ (801693c <_strtod_l+0x57c>)
 80166ce:	a819      	add	r0, sp, #100	@ 0x64
 80166d0:	f001 fbc6 	bl	8017e60 <__match>
 80166d4:	2800      	cmp	r0, #0
 80166d6:	f43f aec7 	beq.w	8016468 <_strtod_l+0xa8>
 80166da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80166dc:	781b      	ldrb	r3, [r3, #0]
 80166de:	2b28      	cmp	r3, #40	@ 0x28
 80166e0:	d12e      	bne.n	8016740 <_strtod_l+0x380>
 80166e2:	4997      	ldr	r1, [pc, #604]	@ (8016940 <_strtod_l+0x580>)
 80166e4:	aa1c      	add	r2, sp, #112	@ 0x70
 80166e6:	a819      	add	r0, sp, #100	@ 0x64
 80166e8:	f001 fbce 	bl	8017e88 <__hexnan>
 80166ec:	2805      	cmp	r0, #5
 80166ee:	d127      	bne.n	8016740 <_strtod_l+0x380>
 80166f0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80166f2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80166f6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80166fa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80166fe:	e698      	b.n	8016432 <_strtod_l+0x72>
 8016700:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8016702:	fb08 2101 	mla	r1, r8, r1, r2
 8016706:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801670a:	920e      	str	r2, [sp, #56]	@ 0x38
 801670c:	e7b5      	b.n	801667a <_strtod_l+0x2ba>
 801670e:	2a6e      	cmp	r2, #110	@ 0x6e
 8016710:	e7da      	b.n	80166c8 <_strtod_l+0x308>
 8016712:	498c      	ldr	r1, [pc, #560]	@ (8016944 <_strtod_l+0x584>)
 8016714:	a819      	add	r0, sp, #100	@ 0x64
 8016716:	f001 fba3 	bl	8017e60 <__match>
 801671a:	2800      	cmp	r0, #0
 801671c:	f43f aea4 	beq.w	8016468 <_strtod_l+0xa8>
 8016720:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016722:	4989      	ldr	r1, [pc, #548]	@ (8016948 <_strtod_l+0x588>)
 8016724:	3b01      	subs	r3, #1
 8016726:	a819      	add	r0, sp, #100	@ 0x64
 8016728:	9319      	str	r3, [sp, #100]	@ 0x64
 801672a:	f001 fb99 	bl	8017e60 <__match>
 801672e:	b910      	cbnz	r0, 8016736 <_strtod_l+0x376>
 8016730:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016732:	3301      	adds	r3, #1
 8016734:	9319      	str	r3, [sp, #100]	@ 0x64
 8016736:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8016958 <_strtod_l+0x598>
 801673a:	f04f 0a00 	mov.w	sl, #0
 801673e:	e678      	b.n	8016432 <_strtod_l+0x72>
 8016740:	4882      	ldr	r0, [pc, #520]	@ (801694c <_strtod_l+0x58c>)
 8016742:	f001 f8c9 	bl	80178d8 <nan>
 8016746:	ec5b ab10 	vmov	sl, fp, d0
 801674a:	e672      	b.n	8016432 <_strtod_l+0x72>
 801674c:	eba8 0309 	sub.w	r3, r8, r9
 8016750:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8016752:	9309      	str	r3, [sp, #36]	@ 0x24
 8016754:	2f00      	cmp	r7, #0
 8016756:	bf08      	it	eq
 8016758:	462f      	moveq	r7, r5
 801675a:	2d10      	cmp	r5, #16
 801675c:	462c      	mov	r4, r5
 801675e:	bfa8      	it	ge
 8016760:	2410      	movge	r4, #16
 8016762:	f7e9 fef7 	bl	8000554 <__aeabi_ui2d>
 8016766:	2d09      	cmp	r5, #9
 8016768:	4682      	mov	sl, r0
 801676a:	468b      	mov	fp, r1
 801676c:	dc13      	bgt.n	8016796 <_strtod_l+0x3d6>
 801676e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016770:	2b00      	cmp	r3, #0
 8016772:	f43f ae5e 	beq.w	8016432 <_strtod_l+0x72>
 8016776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016778:	dd78      	ble.n	801686c <_strtod_l+0x4ac>
 801677a:	2b16      	cmp	r3, #22
 801677c:	dc5f      	bgt.n	801683e <_strtod_l+0x47e>
 801677e:	4974      	ldr	r1, [pc, #464]	@ (8016950 <_strtod_l+0x590>)
 8016780:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016784:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016788:	4652      	mov	r2, sl
 801678a:	465b      	mov	r3, fp
 801678c:	f7e9 ff5c 	bl	8000648 <__aeabi_dmul>
 8016790:	4682      	mov	sl, r0
 8016792:	468b      	mov	fp, r1
 8016794:	e64d      	b.n	8016432 <_strtod_l+0x72>
 8016796:	4b6e      	ldr	r3, [pc, #440]	@ (8016950 <_strtod_l+0x590>)
 8016798:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801679c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80167a0:	f7e9 ff52 	bl	8000648 <__aeabi_dmul>
 80167a4:	4682      	mov	sl, r0
 80167a6:	9808      	ldr	r0, [sp, #32]
 80167a8:	468b      	mov	fp, r1
 80167aa:	f7e9 fed3 	bl	8000554 <__aeabi_ui2d>
 80167ae:	4602      	mov	r2, r0
 80167b0:	460b      	mov	r3, r1
 80167b2:	4650      	mov	r0, sl
 80167b4:	4659      	mov	r1, fp
 80167b6:	f7e9 fd91 	bl	80002dc <__adddf3>
 80167ba:	2d0f      	cmp	r5, #15
 80167bc:	4682      	mov	sl, r0
 80167be:	468b      	mov	fp, r1
 80167c0:	ddd5      	ble.n	801676e <_strtod_l+0x3ae>
 80167c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80167c4:	1b2c      	subs	r4, r5, r4
 80167c6:	441c      	add	r4, r3
 80167c8:	2c00      	cmp	r4, #0
 80167ca:	f340 8096 	ble.w	80168fa <_strtod_l+0x53a>
 80167ce:	f014 030f 	ands.w	r3, r4, #15
 80167d2:	d00a      	beq.n	80167ea <_strtod_l+0x42a>
 80167d4:	495e      	ldr	r1, [pc, #376]	@ (8016950 <_strtod_l+0x590>)
 80167d6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80167da:	4652      	mov	r2, sl
 80167dc:	465b      	mov	r3, fp
 80167de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80167e2:	f7e9 ff31 	bl	8000648 <__aeabi_dmul>
 80167e6:	4682      	mov	sl, r0
 80167e8:	468b      	mov	fp, r1
 80167ea:	f034 040f 	bics.w	r4, r4, #15
 80167ee:	d073      	beq.n	80168d8 <_strtod_l+0x518>
 80167f0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80167f4:	dd48      	ble.n	8016888 <_strtod_l+0x4c8>
 80167f6:	2400      	movs	r4, #0
 80167f8:	46a0      	mov	r8, r4
 80167fa:	940a      	str	r4, [sp, #40]	@ 0x28
 80167fc:	46a1      	mov	r9, r4
 80167fe:	9a05      	ldr	r2, [sp, #20]
 8016800:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8016958 <_strtod_l+0x598>
 8016804:	2322      	movs	r3, #34	@ 0x22
 8016806:	6013      	str	r3, [r2, #0]
 8016808:	f04f 0a00 	mov.w	sl, #0
 801680c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801680e:	2b00      	cmp	r3, #0
 8016810:	f43f ae0f 	beq.w	8016432 <_strtod_l+0x72>
 8016814:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016816:	9805      	ldr	r0, [sp, #20]
 8016818:	f7ff f942 	bl	8015aa0 <_Bfree>
 801681c:	9805      	ldr	r0, [sp, #20]
 801681e:	4649      	mov	r1, r9
 8016820:	f7ff f93e 	bl	8015aa0 <_Bfree>
 8016824:	9805      	ldr	r0, [sp, #20]
 8016826:	4641      	mov	r1, r8
 8016828:	f7ff f93a 	bl	8015aa0 <_Bfree>
 801682c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801682e:	9805      	ldr	r0, [sp, #20]
 8016830:	f7ff f936 	bl	8015aa0 <_Bfree>
 8016834:	9805      	ldr	r0, [sp, #20]
 8016836:	4621      	mov	r1, r4
 8016838:	f7ff f932 	bl	8015aa0 <_Bfree>
 801683c:	e5f9      	b.n	8016432 <_strtod_l+0x72>
 801683e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016840:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8016844:	4293      	cmp	r3, r2
 8016846:	dbbc      	blt.n	80167c2 <_strtod_l+0x402>
 8016848:	4c41      	ldr	r4, [pc, #260]	@ (8016950 <_strtod_l+0x590>)
 801684a:	f1c5 050f 	rsb	r5, r5, #15
 801684e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8016852:	4652      	mov	r2, sl
 8016854:	465b      	mov	r3, fp
 8016856:	e9d1 0100 	ldrd	r0, r1, [r1]
 801685a:	f7e9 fef5 	bl	8000648 <__aeabi_dmul>
 801685e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016860:	1b5d      	subs	r5, r3, r5
 8016862:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8016866:	e9d4 2300 	ldrd	r2, r3, [r4]
 801686a:	e78f      	b.n	801678c <_strtod_l+0x3cc>
 801686c:	3316      	adds	r3, #22
 801686e:	dba8      	blt.n	80167c2 <_strtod_l+0x402>
 8016870:	4b37      	ldr	r3, [pc, #220]	@ (8016950 <_strtod_l+0x590>)
 8016872:	eba9 0808 	sub.w	r8, r9, r8
 8016876:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801687a:	e9d8 2300 	ldrd	r2, r3, [r8]
 801687e:	4650      	mov	r0, sl
 8016880:	4659      	mov	r1, fp
 8016882:	f7ea f80b 	bl	800089c <__aeabi_ddiv>
 8016886:	e783      	b.n	8016790 <_strtod_l+0x3d0>
 8016888:	4b32      	ldr	r3, [pc, #200]	@ (8016954 <_strtod_l+0x594>)
 801688a:	9308      	str	r3, [sp, #32]
 801688c:	2300      	movs	r3, #0
 801688e:	1124      	asrs	r4, r4, #4
 8016890:	4650      	mov	r0, sl
 8016892:	4659      	mov	r1, fp
 8016894:	461e      	mov	r6, r3
 8016896:	2c01      	cmp	r4, #1
 8016898:	dc21      	bgt.n	80168de <_strtod_l+0x51e>
 801689a:	b10b      	cbz	r3, 80168a0 <_strtod_l+0x4e0>
 801689c:	4682      	mov	sl, r0
 801689e:	468b      	mov	fp, r1
 80168a0:	492c      	ldr	r1, [pc, #176]	@ (8016954 <_strtod_l+0x594>)
 80168a2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80168a6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80168aa:	4652      	mov	r2, sl
 80168ac:	465b      	mov	r3, fp
 80168ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80168b2:	f7e9 fec9 	bl	8000648 <__aeabi_dmul>
 80168b6:	4b28      	ldr	r3, [pc, #160]	@ (8016958 <_strtod_l+0x598>)
 80168b8:	460a      	mov	r2, r1
 80168ba:	400b      	ands	r3, r1
 80168bc:	4927      	ldr	r1, [pc, #156]	@ (801695c <_strtod_l+0x59c>)
 80168be:	428b      	cmp	r3, r1
 80168c0:	4682      	mov	sl, r0
 80168c2:	d898      	bhi.n	80167f6 <_strtod_l+0x436>
 80168c4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80168c8:	428b      	cmp	r3, r1
 80168ca:	bf86      	itte	hi
 80168cc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8016960 <_strtod_l+0x5a0>
 80168d0:	f04f 3aff 	movhi.w	sl, #4294967295
 80168d4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80168d8:	2300      	movs	r3, #0
 80168da:	9308      	str	r3, [sp, #32]
 80168dc:	e07a      	b.n	80169d4 <_strtod_l+0x614>
 80168de:	07e2      	lsls	r2, r4, #31
 80168e0:	d505      	bpl.n	80168ee <_strtod_l+0x52e>
 80168e2:	9b08      	ldr	r3, [sp, #32]
 80168e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168e8:	f7e9 feae 	bl	8000648 <__aeabi_dmul>
 80168ec:	2301      	movs	r3, #1
 80168ee:	9a08      	ldr	r2, [sp, #32]
 80168f0:	3208      	adds	r2, #8
 80168f2:	3601      	adds	r6, #1
 80168f4:	1064      	asrs	r4, r4, #1
 80168f6:	9208      	str	r2, [sp, #32]
 80168f8:	e7cd      	b.n	8016896 <_strtod_l+0x4d6>
 80168fa:	d0ed      	beq.n	80168d8 <_strtod_l+0x518>
 80168fc:	4264      	negs	r4, r4
 80168fe:	f014 020f 	ands.w	r2, r4, #15
 8016902:	d00a      	beq.n	801691a <_strtod_l+0x55a>
 8016904:	4b12      	ldr	r3, [pc, #72]	@ (8016950 <_strtod_l+0x590>)
 8016906:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801690a:	4650      	mov	r0, sl
 801690c:	4659      	mov	r1, fp
 801690e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016912:	f7e9 ffc3 	bl	800089c <__aeabi_ddiv>
 8016916:	4682      	mov	sl, r0
 8016918:	468b      	mov	fp, r1
 801691a:	1124      	asrs	r4, r4, #4
 801691c:	d0dc      	beq.n	80168d8 <_strtod_l+0x518>
 801691e:	2c1f      	cmp	r4, #31
 8016920:	dd20      	ble.n	8016964 <_strtod_l+0x5a4>
 8016922:	2400      	movs	r4, #0
 8016924:	46a0      	mov	r8, r4
 8016926:	940a      	str	r4, [sp, #40]	@ 0x28
 8016928:	46a1      	mov	r9, r4
 801692a:	9a05      	ldr	r2, [sp, #20]
 801692c:	2322      	movs	r3, #34	@ 0x22
 801692e:	f04f 0a00 	mov.w	sl, #0
 8016932:	f04f 0b00 	mov.w	fp, #0
 8016936:	6013      	str	r3, [r2, #0]
 8016938:	e768      	b.n	801680c <_strtod_l+0x44c>
 801693a:	bf00      	nop
 801693c:	08025bc9 	.word	0x08025bc9
 8016940:	08025ddc 	.word	0x08025ddc
 8016944:	08025bc1 	.word	0x08025bc1
 8016948:	08025bf8 	.word	0x08025bf8
 801694c:	08025f85 	.word	0x08025f85
 8016950:	08025d10 	.word	0x08025d10
 8016954:	08025ce8 	.word	0x08025ce8
 8016958:	7ff00000 	.word	0x7ff00000
 801695c:	7ca00000 	.word	0x7ca00000
 8016960:	7fefffff 	.word	0x7fefffff
 8016964:	f014 0310 	ands.w	r3, r4, #16
 8016968:	bf18      	it	ne
 801696a:	236a      	movne	r3, #106	@ 0x6a
 801696c:	4ea9      	ldr	r6, [pc, #676]	@ (8016c14 <_strtod_l+0x854>)
 801696e:	9308      	str	r3, [sp, #32]
 8016970:	4650      	mov	r0, sl
 8016972:	4659      	mov	r1, fp
 8016974:	2300      	movs	r3, #0
 8016976:	07e2      	lsls	r2, r4, #31
 8016978:	d504      	bpl.n	8016984 <_strtod_l+0x5c4>
 801697a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801697e:	f7e9 fe63 	bl	8000648 <__aeabi_dmul>
 8016982:	2301      	movs	r3, #1
 8016984:	1064      	asrs	r4, r4, #1
 8016986:	f106 0608 	add.w	r6, r6, #8
 801698a:	d1f4      	bne.n	8016976 <_strtod_l+0x5b6>
 801698c:	b10b      	cbz	r3, 8016992 <_strtod_l+0x5d2>
 801698e:	4682      	mov	sl, r0
 8016990:	468b      	mov	fp, r1
 8016992:	9b08      	ldr	r3, [sp, #32]
 8016994:	b1b3      	cbz	r3, 80169c4 <_strtod_l+0x604>
 8016996:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801699a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801699e:	2b00      	cmp	r3, #0
 80169a0:	4659      	mov	r1, fp
 80169a2:	dd0f      	ble.n	80169c4 <_strtod_l+0x604>
 80169a4:	2b1f      	cmp	r3, #31
 80169a6:	dd55      	ble.n	8016a54 <_strtod_l+0x694>
 80169a8:	2b34      	cmp	r3, #52	@ 0x34
 80169aa:	bfde      	ittt	le
 80169ac:	f04f 33ff 	movle.w	r3, #4294967295
 80169b0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80169b4:	4093      	lslle	r3, r2
 80169b6:	f04f 0a00 	mov.w	sl, #0
 80169ba:	bfcc      	ite	gt
 80169bc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80169c0:	ea03 0b01 	andle.w	fp, r3, r1
 80169c4:	2200      	movs	r2, #0
 80169c6:	2300      	movs	r3, #0
 80169c8:	4650      	mov	r0, sl
 80169ca:	4659      	mov	r1, fp
 80169cc:	f7ea f8a4 	bl	8000b18 <__aeabi_dcmpeq>
 80169d0:	2800      	cmp	r0, #0
 80169d2:	d1a6      	bne.n	8016922 <_strtod_l+0x562>
 80169d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80169d6:	9300      	str	r3, [sp, #0]
 80169d8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80169da:	9805      	ldr	r0, [sp, #20]
 80169dc:	462b      	mov	r3, r5
 80169de:	463a      	mov	r2, r7
 80169e0:	f7ff f8c6 	bl	8015b70 <__s2b>
 80169e4:	900a      	str	r0, [sp, #40]	@ 0x28
 80169e6:	2800      	cmp	r0, #0
 80169e8:	f43f af05 	beq.w	80167f6 <_strtod_l+0x436>
 80169ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80169ee:	2a00      	cmp	r2, #0
 80169f0:	eba9 0308 	sub.w	r3, r9, r8
 80169f4:	bfa8      	it	ge
 80169f6:	2300      	movge	r3, #0
 80169f8:	9312      	str	r3, [sp, #72]	@ 0x48
 80169fa:	2400      	movs	r4, #0
 80169fc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016a00:	9316      	str	r3, [sp, #88]	@ 0x58
 8016a02:	46a0      	mov	r8, r4
 8016a04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016a06:	9805      	ldr	r0, [sp, #20]
 8016a08:	6859      	ldr	r1, [r3, #4]
 8016a0a:	f7ff f809 	bl	8015a20 <_Balloc>
 8016a0e:	4681      	mov	r9, r0
 8016a10:	2800      	cmp	r0, #0
 8016a12:	f43f aef4 	beq.w	80167fe <_strtod_l+0x43e>
 8016a16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016a18:	691a      	ldr	r2, [r3, #16]
 8016a1a:	3202      	adds	r2, #2
 8016a1c:	f103 010c 	add.w	r1, r3, #12
 8016a20:	0092      	lsls	r2, r2, #2
 8016a22:	300c      	adds	r0, #12
 8016a24:	f000 ff48 	bl	80178b8 <memcpy>
 8016a28:	ec4b ab10 	vmov	d0, sl, fp
 8016a2c:	9805      	ldr	r0, [sp, #20]
 8016a2e:	aa1c      	add	r2, sp, #112	@ 0x70
 8016a30:	a91b      	add	r1, sp, #108	@ 0x6c
 8016a32:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8016a36:	f7ff fbd7 	bl	80161e8 <__d2b>
 8016a3a:	901a      	str	r0, [sp, #104]	@ 0x68
 8016a3c:	2800      	cmp	r0, #0
 8016a3e:	f43f aede 	beq.w	80167fe <_strtod_l+0x43e>
 8016a42:	9805      	ldr	r0, [sp, #20]
 8016a44:	2101      	movs	r1, #1
 8016a46:	f7ff f929 	bl	8015c9c <__i2b>
 8016a4a:	4680      	mov	r8, r0
 8016a4c:	b948      	cbnz	r0, 8016a62 <_strtod_l+0x6a2>
 8016a4e:	f04f 0800 	mov.w	r8, #0
 8016a52:	e6d4      	b.n	80167fe <_strtod_l+0x43e>
 8016a54:	f04f 32ff 	mov.w	r2, #4294967295
 8016a58:	fa02 f303 	lsl.w	r3, r2, r3
 8016a5c:	ea03 0a0a 	and.w	sl, r3, sl
 8016a60:	e7b0      	b.n	80169c4 <_strtod_l+0x604>
 8016a62:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8016a64:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8016a66:	2d00      	cmp	r5, #0
 8016a68:	bfab      	itete	ge
 8016a6a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8016a6c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8016a6e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8016a70:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8016a72:	bfac      	ite	ge
 8016a74:	18ef      	addge	r7, r5, r3
 8016a76:	1b5e      	sublt	r6, r3, r5
 8016a78:	9b08      	ldr	r3, [sp, #32]
 8016a7a:	1aed      	subs	r5, r5, r3
 8016a7c:	4415      	add	r5, r2
 8016a7e:	4b66      	ldr	r3, [pc, #408]	@ (8016c18 <_strtod_l+0x858>)
 8016a80:	3d01      	subs	r5, #1
 8016a82:	429d      	cmp	r5, r3
 8016a84:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8016a88:	da50      	bge.n	8016b2c <_strtod_l+0x76c>
 8016a8a:	1b5b      	subs	r3, r3, r5
 8016a8c:	2b1f      	cmp	r3, #31
 8016a8e:	eba2 0203 	sub.w	r2, r2, r3
 8016a92:	f04f 0101 	mov.w	r1, #1
 8016a96:	dc3d      	bgt.n	8016b14 <_strtod_l+0x754>
 8016a98:	fa01 f303 	lsl.w	r3, r1, r3
 8016a9c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016a9e:	2300      	movs	r3, #0
 8016aa0:	9310      	str	r3, [sp, #64]	@ 0x40
 8016aa2:	18bd      	adds	r5, r7, r2
 8016aa4:	9b08      	ldr	r3, [sp, #32]
 8016aa6:	42af      	cmp	r7, r5
 8016aa8:	4416      	add	r6, r2
 8016aaa:	441e      	add	r6, r3
 8016aac:	463b      	mov	r3, r7
 8016aae:	bfa8      	it	ge
 8016ab0:	462b      	movge	r3, r5
 8016ab2:	42b3      	cmp	r3, r6
 8016ab4:	bfa8      	it	ge
 8016ab6:	4633      	movge	r3, r6
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	bfc2      	ittt	gt
 8016abc:	1aed      	subgt	r5, r5, r3
 8016abe:	1af6      	subgt	r6, r6, r3
 8016ac0:	1aff      	subgt	r7, r7, r3
 8016ac2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	dd16      	ble.n	8016af6 <_strtod_l+0x736>
 8016ac8:	4641      	mov	r1, r8
 8016aca:	9805      	ldr	r0, [sp, #20]
 8016acc:	461a      	mov	r2, r3
 8016ace:	f7ff f9a5 	bl	8015e1c <__pow5mult>
 8016ad2:	4680      	mov	r8, r0
 8016ad4:	2800      	cmp	r0, #0
 8016ad6:	d0ba      	beq.n	8016a4e <_strtod_l+0x68e>
 8016ad8:	4601      	mov	r1, r0
 8016ada:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8016adc:	9805      	ldr	r0, [sp, #20]
 8016ade:	f7ff f8f3 	bl	8015cc8 <__multiply>
 8016ae2:	900e      	str	r0, [sp, #56]	@ 0x38
 8016ae4:	2800      	cmp	r0, #0
 8016ae6:	f43f ae8a 	beq.w	80167fe <_strtod_l+0x43e>
 8016aea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016aec:	9805      	ldr	r0, [sp, #20]
 8016aee:	f7fe ffd7 	bl	8015aa0 <_Bfree>
 8016af2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016af4:	931a      	str	r3, [sp, #104]	@ 0x68
 8016af6:	2d00      	cmp	r5, #0
 8016af8:	dc1d      	bgt.n	8016b36 <_strtod_l+0x776>
 8016afa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	dd23      	ble.n	8016b48 <_strtod_l+0x788>
 8016b00:	4649      	mov	r1, r9
 8016b02:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8016b04:	9805      	ldr	r0, [sp, #20]
 8016b06:	f7ff f989 	bl	8015e1c <__pow5mult>
 8016b0a:	4681      	mov	r9, r0
 8016b0c:	b9e0      	cbnz	r0, 8016b48 <_strtod_l+0x788>
 8016b0e:	f04f 0900 	mov.w	r9, #0
 8016b12:	e674      	b.n	80167fe <_strtod_l+0x43e>
 8016b14:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8016b18:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8016b1c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8016b20:	35e2      	adds	r5, #226	@ 0xe2
 8016b22:	fa01 f305 	lsl.w	r3, r1, r5
 8016b26:	9310      	str	r3, [sp, #64]	@ 0x40
 8016b28:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016b2a:	e7ba      	b.n	8016aa2 <_strtod_l+0x6e2>
 8016b2c:	2300      	movs	r3, #0
 8016b2e:	9310      	str	r3, [sp, #64]	@ 0x40
 8016b30:	2301      	movs	r3, #1
 8016b32:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016b34:	e7b5      	b.n	8016aa2 <_strtod_l+0x6e2>
 8016b36:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016b38:	9805      	ldr	r0, [sp, #20]
 8016b3a:	462a      	mov	r2, r5
 8016b3c:	f7ff f9c8 	bl	8015ed0 <__lshift>
 8016b40:	901a      	str	r0, [sp, #104]	@ 0x68
 8016b42:	2800      	cmp	r0, #0
 8016b44:	d1d9      	bne.n	8016afa <_strtod_l+0x73a>
 8016b46:	e65a      	b.n	80167fe <_strtod_l+0x43e>
 8016b48:	2e00      	cmp	r6, #0
 8016b4a:	dd07      	ble.n	8016b5c <_strtod_l+0x79c>
 8016b4c:	4649      	mov	r1, r9
 8016b4e:	9805      	ldr	r0, [sp, #20]
 8016b50:	4632      	mov	r2, r6
 8016b52:	f7ff f9bd 	bl	8015ed0 <__lshift>
 8016b56:	4681      	mov	r9, r0
 8016b58:	2800      	cmp	r0, #0
 8016b5a:	d0d8      	beq.n	8016b0e <_strtod_l+0x74e>
 8016b5c:	2f00      	cmp	r7, #0
 8016b5e:	dd08      	ble.n	8016b72 <_strtod_l+0x7b2>
 8016b60:	4641      	mov	r1, r8
 8016b62:	9805      	ldr	r0, [sp, #20]
 8016b64:	463a      	mov	r2, r7
 8016b66:	f7ff f9b3 	bl	8015ed0 <__lshift>
 8016b6a:	4680      	mov	r8, r0
 8016b6c:	2800      	cmp	r0, #0
 8016b6e:	f43f ae46 	beq.w	80167fe <_strtod_l+0x43e>
 8016b72:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016b74:	9805      	ldr	r0, [sp, #20]
 8016b76:	464a      	mov	r2, r9
 8016b78:	f7ff fa32 	bl	8015fe0 <__mdiff>
 8016b7c:	4604      	mov	r4, r0
 8016b7e:	2800      	cmp	r0, #0
 8016b80:	f43f ae3d 	beq.w	80167fe <_strtod_l+0x43e>
 8016b84:	68c3      	ldr	r3, [r0, #12]
 8016b86:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016b88:	2300      	movs	r3, #0
 8016b8a:	60c3      	str	r3, [r0, #12]
 8016b8c:	4641      	mov	r1, r8
 8016b8e:	f7ff fa0b 	bl	8015fa8 <__mcmp>
 8016b92:	2800      	cmp	r0, #0
 8016b94:	da46      	bge.n	8016c24 <_strtod_l+0x864>
 8016b96:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016b98:	ea53 030a 	orrs.w	r3, r3, sl
 8016b9c:	d16c      	bne.n	8016c78 <_strtod_l+0x8b8>
 8016b9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d168      	bne.n	8016c78 <_strtod_l+0x8b8>
 8016ba6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016baa:	0d1b      	lsrs	r3, r3, #20
 8016bac:	051b      	lsls	r3, r3, #20
 8016bae:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016bb2:	d961      	bls.n	8016c78 <_strtod_l+0x8b8>
 8016bb4:	6963      	ldr	r3, [r4, #20]
 8016bb6:	b913      	cbnz	r3, 8016bbe <_strtod_l+0x7fe>
 8016bb8:	6923      	ldr	r3, [r4, #16]
 8016bba:	2b01      	cmp	r3, #1
 8016bbc:	dd5c      	ble.n	8016c78 <_strtod_l+0x8b8>
 8016bbe:	4621      	mov	r1, r4
 8016bc0:	2201      	movs	r2, #1
 8016bc2:	9805      	ldr	r0, [sp, #20]
 8016bc4:	f7ff f984 	bl	8015ed0 <__lshift>
 8016bc8:	4641      	mov	r1, r8
 8016bca:	4604      	mov	r4, r0
 8016bcc:	f7ff f9ec 	bl	8015fa8 <__mcmp>
 8016bd0:	2800      	cmp	r0, #0
 8016bd2:	dd51      	ble.n	8016c78 <_strtod_l+0x8b8>
 8016bd4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016bd8:	9a08      	ldr	r2, [sp, #32]
 8016bda:	0d1b      	lsrs	r3, r3, #20
 8016bdc:	051b      	lsls	r3, r3, #20
 8016bde:	2a00      	cmp	r2, #0
 8016be0:	d06b      	beq.n	8016cba <_strtod_l+0x8fa>
 8016be2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016be6:	d868      	bhi.n	8016cba <_strtod_l+0x8fa>
 8016be8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8016bec:	f67f ae9d 	bls.w	801692a <_strtod_l+0x56a>
 8016bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8016c1c <_strtod_l+0x85c>)
 8016bf2:	4650      	mov	r0, sl
 8016bf4:	4659      	mov	r1, fp
 8016bf6:	2200      	movs	r2, #0
 8016bf8:	f7e9 fd26 	bl	8000648 <__aeabi_dmul>
 8016bfc:	4b08      	ldr	r3, [pc, #32]	@ (8016c20 <_strtod_l+0x860>)
 8016bfe:	400b      	ands	r3, r1
 8016c00:	4682      	mov	sl, r0
 8016c02:	468b      	mov	fp, r1
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	f47f ae05 	bne.w	8016814 <_strtod_l+0x454>
 8016c0a:	9a05      	ldr	r2, [sp, #20]
 8016c0c:	2322      	movs	r3, #34	@ 0x22
 8016c0e:	6013      	str	r3, [r2, #0]
 8016c10:	e600      	b.n	8016814 <_strtod_l+0x454>
 8016c12:	bf00      	nop
 8016c14:	08025e08 	.word	0x08025e08
 8016c18:	fffffc02 	.word	0xfffffc02
 8016c1c:	39500000 	.word	0x39500000
 8016c20:	7ff00000 	.word	0x7ff00000
 8016c24:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8016c28:	d165      	bne.n	8016cf6 <_strtod_l+0x936>
 8016c2a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016c2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016c30:	b35a      	cbz	r2, 8016c8a <_strtod_l+0x8ca>
 8016c32:	4a9f      	ldr	r2, [pc, #636]	@ (8016eb0 <_strtod_l+0xaf0>)
 8016c34:	4293      	cmp	r3, r2
 8016c36:	d12b      	bne.n	8016c90 <_strtod_l+0x8d0>
 8016c38:	9b08      	ldr	r3, [sp, #32]
 8016c3a:	4651      	mov	r1, sl
 8016c3c:	b303      	cbz	r3, 8016c80 <_strtod_l+0x8c0>
 8016c3e:	4b9d      	ldr	r3, [pc, #628]	@ (8016eb4 <_strtod_l+0xaf4>)
 8016c40:	465a      	mov	r2, fp
 8016c42:	4013      	ands	r3, r2
 8016c44:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8016c48:	f04f 32ff 	mov.w	r2, #4294967295
 8016c4c:	d81b      	bhi.n	8016c86 <_strtod_l+0x8c6>
 8016c4e:	0d1b      	lsrs	r3, r3, #20
 8016c50:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016c54:	fa02 f303 	lsl.w	r3, r2, r3
 8016c58:	4299      	cmp	r1, r3
 8016c5a:	d119      	bne.n	8016c90 <_strtod_l+0x8d0>
 8016c5c:	4b96      	ldr	r3, [pc, #600]	@ (8016eb8 <_strtod_l+0xaf8>)
 8016c5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016c60:	429a      	cmp	r2, r3
 8016c62:	d102      	bne.n	8016c6a <_strtod_l+0x8aa>
 8016c64:	3101      	adds	r1, #1
 8016c66:	f43f adca 	beq.w	80167fe <_strtod_l+0x43e>
 8016c6a:	4b92      	ldr	r3, [pc, #584]	@ (8016eb4 <_strtod_l+0xaf4>)
 8016c6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016c6e:	401a      	ands	r2, r3
 8016c70:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8016c74:	f04f 0a00 	mov.w	sl, #0
 8016c78:	9b08      	ldr	r3, [sp, #32]
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d1b8      	bne.n	8016bf0 <_strtod_l+0x830>
 8016c7e:	e5c9      	b.n	8016814 <_strtod_l+0x454>
 8016c80:	f04f 33ff 	mov.w	r3, #4294967295
 8016c84:	e7e8      	b.n	8016c58 <_strtod_l+0x898>
 8016c86:	4613      	mov	r3, r2
 8016c88:	e7e6      	b.n	8016c58 <_strtod_l+0x898>
 8016c8a:	ea53 030a 	orrs.w	r3, r3, sl
 8016c8e:	d0a1      	beq.n	8016bd4 <_strtod_l+0x814>
 8016c90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016c92:	b1db      	cbz	r3, 8016ccc <_strtod_l+0x90c>
 8016c94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016c96:	4213      	tst	r3, r2
 8016c98:	d0ee      	beq.n	8016c78 <_strtod_l+0x8b8>
 8016c9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016c9c:	9a08      	ldr	r2, [sp, #32]
 8016c9e:	4650      	mov	r0, sl
 8016ca0:	4659      	mov	r1, fp
 8016ca2:	b1bb      	cbz	r3, 8016cd4 <_strtod_l+0x914>
 8016ca4:	f7ff fb6e 	bl	8016384 <sulp>
 8016ca8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016cac:	ec53 2b10 	vmov	r2, r3, d0
 8016cb0:	f7e9 fb14 	bl	80002dc <__adddf3>
 8016cb4:	4682      	mov	sl, r0
 8016cb6:	468b      	mov	fp, r1
 8016cb8:	e7de      	b.n	8016c78 <_strtod_l+0x8b8>
 8016cba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8016cbe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016cc2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016cc6:	f04f 3aff 	mov.w	sl, #4294967295
 8016cca:	e7d5      	b.n	8016c78 <_strtod_l+0x8b8>
 8016ccc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016cce:	ea13 0f0a 	tst.w	r3, sl
 8016cd2:	e7e1      	b.n	8016c98 <_strtod_l+0x8d8>
 8016cd4:	f7ff fb56 	bl	8016384 <sulp>
 8016cd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016cdc:	ec53 2b10 	vmov	r2, r3, d0
 8016ce0:	f7e9 fafa 	bl	80002d8 <__aeabi_dsub>
 8016ce4:	2200      	movs	r2, #0
 8016ce6:	2300      	movs	r3, #0
 8016ce8:	4682      	mov	sl, r0
 8016cea:	468b      	mov	fp, r1
 8016cec:	f7e9 ff14 	bl	8000b18 <__aeabi_dcmpeq>
 8016cf0:	2800      	cmp	r0, #0
 8016cf2:	d0c1      	beq.n	8016c78 <_strtod_l+0x8b8>
 8016cf4:	e619      	b.n	801692a <_strtod_l+0x56a>
 8016cf6:	4641      	mov	r1, r8
 8016cf8:	4620      	mov	r0, r4
 8016cfa:	f7ff facd 	bl	8016298 <__ratio>
 8016cfe:	ec57 6b10 	vmov	r6, r7, d0
 8016d02:	2200      	movs	r2, #0
 8016d04:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8016d08:	4630      	mov	r0, r6
 8016d0a:	4639      	mov	r1, r7
 8016d0c:	f7e9 ff18 	bl	8000b40 <__aeabi_dcmple>
 8016d10:	2800      	cmp	r0, #0
 8016d12:	d06f      	beq.n	8016df4 <_strtod_l+0xa34>
 8016d14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d17a      	bne.n	8016e10 <_strtod_l+0xa50>
 8016d1a:	f1ba 0f00 	cmp.w	sl, #0
 8016d1e:	d158      	bne.n	8016dd2 <_strtod_l+0xa12>
 8016d20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016d22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d15a      	bne.n	8016de0 <_strtod_l+0xa20>
 8016d2a:	4b64      	ldr	r3, [pc, #400]	@ (8016ebc <_strtod_l+0xafc>)
 8016d2c:	2200      	movs	r2, #0
 8016d2e:	4630      	mov	r0, r6
 8016d30:	4639      	mov	r1, r7
 8016d32:	f7e9 fefb 	bl	8000b2c <__aeabi_dcmplt>
 8016d36:	2800      	cmp	r0, #0
 8016d38:	d159      	bne.n	8016dee <_strtod_l+0xa2e>
 8016d3a:	4630      	mov	r0, r6
 8016d3c:	4639      	mov	r1, r7
 8016d3e:	4b60      	ldr	r3, [pc, #384]	@ (8016ec0 <_strtod_l+0xb00>)
 8016d40:	2200      	movs	r2, #0
 8016d42:	f7e9 fc81 	bl	8000648 <__aeabi_dmul>
 8016d46:	4606      	mov	r6, r0
 8016d48:	460f      	mov	r7, r1
 8016d4a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8016d4e:	9606      	str	r6, [sp, #24]
 8016d50:	9307      	str	r3, [sp, #28]
 8016d52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016d56:	4d57      	ldr	r5, [pc, #348]	@ (8016eb4 <_strtod_l+0xaf4>)
 8016d58:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8016d5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016d5e:	401d      	ands	r5, r3
 8016d60:	4b58      	ldr	r3, [pc, #352]	@ (8016ec4 <_strtod_l+0xb04>)
 8016d62:	429d      	cmp	r5, r3
 8016d64:	f040 80b2 	bne.w	8016ecc <_strtod_l+0xb0c>
 8016d68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016d6a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8016d6e:	ec4b ab10 	vmov	d0, sl, fp
 8016d72:	f7ff f9c9 	bl	8016108 <__ulp>
 8016d76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016d7a:	ec51 0b10 	vmov	r0, r1, d0
 8016d7e:	f7e9 fc63 	bl	8000648 <__aeabi_dmul>
 8016d82:	4652      	mov	r2, sl
 8016d84:	465b      	mov	r3, fp
 8016d86:	f7e9 faa9 	bl	80002dc <__adddf3>
 8016d8a:	460b      	mov	r3, r1
 8016d8c:	4949      	ldr	r1, [pc, #292]	@ (8016eb4 <_strtod_l+0xaf4>)
 8016d8e:	4a4e      	ldr	r2, [pc, #312]	@ (8016ec8 <_strtod_l+0xb08>)
 8016d90:	4019      	ands	r1, r3
 8016d92:	4291      	cmp	r1, r2
 8016d94:	4682      	mov	sl, r0
 8016d96:	d942      	bls.n	8016e1e <_strtod_l+0xa5e>
 8016d98:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016d9a:	4b47      	ldr	r3, [pc, #284]	@ (8016eb8 <_strtod_l+0xaf8>)
 8016d9c:	429a      	cmp	r2, r3
 8016d9e:	d103      	bne.n	8016da8 <_strtod_l+0x9e8>
 8016da0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016da2:	3301      	adds	r3, #1
 8016da4:	f43f ad2b 	beq.w	80167fe <_strtod_l+0x43e>
 8016da8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8016eb8 <_strtod_l+0xaf8>
 8016dac:	f04f 3aff 	mov.w	sl, #4294967295
 8016db0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016db2:	9805      	ldr	r0, [sp, #20]
 8016db4:	f7fe fe74 	bl	8015aa0 <_Bfree>
 8016db8:	9805      	ldr	r0, [sp, #20]
 8016dba:	4649      	mov	r1, r9
 8016dbc:	f7fe fe70 	bl	8015aa0 <_Bfree>
 8016dc0:	9805      	ldr	r0, [sp, #20]
 8016dc2:	4641      	mov	r1, r8
 8016dc4:	f7fe fe6c 	bl	8015aa0 <_Bfree>
 8016dc8:	9805      	ldr	r0, [sp, #20]
 8016dca:	4621      	mov	r1, r4
 8016dcc:	f7fe fe68 	bl	8015aa0 <_Bfree>
 8016dd0:	e618      	b.n	8016a04 <_strtod_l+0x644>
 8016dd2:	f1ba 0f01 	cmp.w	sl, #1
 8016dd6:	d103      	bne.n	8016de0 <_strtod_l+0xa20>
 8016dd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	f43f ada5 	beq.w	801692a <_strtod_l+0x56a>
 8016de0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8016e90 <_strtod_l+0xad0>
 8016de4:	4f35      	ldr	r7, [pc, #212]	@ (8016ebc <_strtod_l+0xafc>)
 8016de6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016dea:	2600      	movs	r6, #0
 8016dec:	e7b1      	b.n	8016d52 <_strtod_l+0x992>
 8016dee:	4f34      	ldr	r7, [pc, #208]	@ (8016ec0 <_strtod_l+0xb00>)
 8016df0:	2600      	movs	r6, #0
 8016df2:	e7aa      	b.n	8016d4a <_strtod_l+0x98a>
 8016df4:	4b32      	ldr	r3, [pc, #200]	@ (8016ec0 <_strtod_l+0xb00>)
 8016df6:	4630      	mov	r0, r6
 8016df8:	4639      	mov	r1, r7
 8016dfa:	2200      	movs	r2, #0
 8016dfc:	f7e9 fc24 	bl	8000648 <__aeabi_dmul>
 8016e00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016e02:	4606      	mov	r6, r0
 8016e04:	460f      	mov	r7, r1
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d09f      	beq.n	8016d4a <_strtod_l+0x98a>
 8016e0a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8016e0e:	e7a0      	b.n	8016d52 <_strtod_l+0x992>
 8016e10:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8016e98 <_strtod_l+0xad8>
 8016e14:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016e18:	ec57 6b17 	vmov	r6, r7, d7
 8016e1c:	e799      	b.n	8016d52 <_strtod_l+0x992>
 8016e1e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8016e22:	9b08      	ldr	r3, [sp, #32]
 8016e24:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d1c1      	bne.n	8016db0 <_strtod_l+0x9f0>
 8016e2c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016e30:	0d1b      	lsrs	r3, r3, #20
 8016e32:	051b      	lsls	r3, r3, #20
 8016e34:	429d      	cmp	r5, r3
 8016e36:	d1bb      	bne.n	8016db0 <_strtod_l+0x9f0>
 8016e38:	4630      	mov	r0, r6
 8016e3a:	4639      	mov	r1, r7
 8016e3c:	f7e9 ff64 	bl	8000d08 <__aeabi_d2lz>
 8016e40:	f7e9 fbd4 	bl	80005ec <__aeabi_l2d>
 8016e44:	4602      	mov	r2, r0
 8016e46:	460b      	mov	r3, r1
 8016e48:	4630      	mov	r0, r6
 8016e4a:	4639      	mov	r1, r7
 8016e4c:	f7e9 fa44 	bl	80002d8 <__aeabi_dsub>
 8016e50:	460b      	mov	r3, r1
 8016e52:	4602      	mov	r2, r0
 8016e54:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8016e58:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8016e5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016e5e:	ea46 060a 	orr.w	r6, r6, sl
 8016e62:	431e      	orrs	r6, r3
 8016e64:	d06f      	beq.n	8016f46 <_strtod_l+0xb86>
 8016e66:	a30e      	add	r3, pc, #56	@ (adr r3, 8016ea0 <_strtod_l+0xae0>)
 8016e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e6c:	f7e9 fe5e 	bl	8000b2c <__aeabi_dcmplt>
 8016e70:	2800      	cmp	r0, #0
 8016e72:	f47f accf 	bne.w	8016814 <_strtod_l+0x454>
 8016e76:	a30c      	add	r3, pc, #48	@ (adr r3, 8016ea8 <_strtod_l+0xae8>)
 8016e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016e80:	f7e9 fe72 	bl	8000b68 <__aeabi_dcmpgt>
 8016e84:	2800      	cmp	r0, #0
 8016e86:	d093      	beq.n	8016db0 <_strtod_l+0x9f0>
 8016e88:	e4c4      	b.n	8016814 <_strtod_l+0x454>
 8016e8a:	bf00      	nop
 8016e8c:	f3af 8000 	nop.w
 8016e90:	00000000 	.word	0x00000000
 8016e94:	bff00000 	.word	0xbff00000
 8016e98:	00000000 	.word	0x00000000
 8016e9c:	3ff00000 	.word	0x3ff00000
 8016ea0:	94a03595 	.word	0x94a03595
 8016ea4:	3fdfffff 	.word	0x3fdfffff
 8016ea8:	35afe535 	.word	0x35afe535
 8016eac:	3fe00000 	.word	0x3fe00000
 8016eb0:	000fffff 	.word	0x000fffff
 8016eb4:	7ff00000 	.word	0x7ff00000
 8016eb8:	7fefffff 	.word	0x7fefffff
 8016ebc:	3ff00000 	.word	0x3ff00000
 8016ec0:	3fe00000 	.word	0x3fe00000
 8016ec4:	7fe00000 	.word	0x7fe00000
 8016ec8:	7c9fffff 	.word	0x7c9fffff
 8016ecc:	9b08      	ldr	r3, [sp, #32]
 8016ece:	b323      	cbz	r3, 8016f1a <_strtod_l+0xb5a>
 8016ed0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8016ed4:	d821      	bhi.n	8016f1a <_strtod_l+0xb5a>
 8016ed6:	a328      	add	r3, pc, #160	@ (adr r3, 8016f78 <_strtod_l+0xbb8>)
 8016ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016edc:	4630      	mov	r0, r6
 8016ede:	4639      	mov	r1, r7
 8016ee0:	f7e9 fe2e 	bl	8000b40 <__aeabi_dcmple>
 8016ee4:	b1a0      	cbz	r0, 8016f10 <_strtod_l+0xb50>
 8016ee6:	4639      	mov	r1, r7
 8016ee8:	4630      	mov	r0, r6
 8016eea:	f7e9 fe85 	bl	8000bf8 <__aeabi_d2uiz>
 8016eee:	2801      	cmp	r0, #1
 8016ef0:	bf38      	it	cc
 8016ef2:	2001      	movcc	r0, #1
 8016ef4:	f7e9 fb2e 	bl	8000554 <__aeabi_ui2d>
 8016ef8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016efa:	4606      	mov	r6, r0
 8016efc:	460f      	mov	r7, r1
 8016efe:	b9fb      	cbnz	r3, 8016f40 <_strtod_l+0xb80>
 8016f00:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016f04:	9014      	str	r0, [sp, #80]	@ 0x50
 8016f06:	9315      	str	r3, [sp, #84]	@ 0x54
 8016f08:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8016f0c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8016f10:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016f12:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8016f16:	1b5b      	subs	r3, r3, r5
 8016f18:	9311      	str	r3, [sp, #68]	@ 0x44
 8016f1a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8016f1e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8016f22:	f7ff f8f1 	bl	8016108 <__ulp>
 8016f26:	4650      	mov	r0, sl
 8016f28:	ec53 2b10 	vmov	r2, r3, d0
 8016f2c:	4659      	mov	r1, fp
 8016f2e:	f7e9 fb8b 	bl	8000648 <__aeabi_dmul>
 8016f32:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8016f36:	f7e9 f9d1 	bl	80002dc <__adddf3>
 8016f3a:	4682      	mov	sl, r0
 8016f3c:	468b      	mov	fp, r1
 8016f3e:	e770      	b.n	8016e22 <_strtod_l+0xa62>
 8016f40:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8016f44:	e7e0      	b.n	8016f08 <_strtod_l+0xb48>
 8016f46:	a30e      	add	r3, pc, #56	@ (adr r3, 8016f80 <_strtod_l+0xbc0>)
 8016f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f4c:	f7e9 fdee 	bl	8000b2c <__aeabi_dcmplt>
 8016f50:	e798      	b.n	8016e84 <_strtod_l+0xac4>
 8016f52:	2300      	movs	r3, #0
 8016f54:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016f56:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8016f58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016f5a:	6013      	str	r3, [r2, #0]
 8016f5c:	f7ff ba6d 	b.w	801643a <_strtod_l+0x7a>
 8016f60:	2a65      	cmp	r2, #101	@ 0x65
 8016f62:	f43f ab66 	beq.w	8016632 <_strtod_l+0x272>
 8016f66:	2a45      	cmp	r2, #69	@ 0x45
 8016f68:	f43f ab63 	beq.w	8016632 <_strtod_l+0x272>
 8016f6c:	2301      	movs	r3, #1
 8016f6e:	f7ff bb9e 	b.w	80166ae <_strtod_l+0x2ee>
 8016f72:	bf00      	nop
 8016f74:	f3af 8000 	nop.w
 8016f78:	ffc00000 	.word	0xffc00000
 8016f7c:	41dfffff 	.word	0x41dfffff
 8016f80:	94a03595 	.word	0x94a03595
 8016f84:	3fcfffff 	.word	0x3fcfffff

08016f88 <_strtod_r>:
 8016f88:	4b01      	ldr	r3, [pc, #4]	@ (8016f90 <_strtod_r+0x8>)
 8016f8a:	f7ff ba19 	b.w	80163c0 <_strtod_l>
 8016f8e:	bf00      	nop
 8016f90:	20000224 	.word	0x20000224

08016f94 <_strtol_l.constprop.0>:
 8016f94:	2b24      	cmp	r3, #36	@ 0x24
 8016f96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f9a:	4686      	mov	lr, r0
 8016f9c:	4690      	mov	r8, r2
 8016f9e:	d801      	bhi.n	8016fa4 <_strtol_l.constprop.0+0x10>
 8016fa0:	2b01      	cmp	r3, #1
 8016fa2:	d106      	bne.n	8016fb2 <_strtol_l.constprop.0+0x1e>
 8016fa4:	f7fd fdbc 	bl	8014b20 <__errno>
 8016fa8:	2316      	movs	r3, #22
 8016faa:	6003      	str	r3, [r0, #0]
 8016fac:	2000      	movs	r0, #0
 8016fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016fb2:	4834      	ldr	r0, [pc, #208]	@ (8017084 <_strtol_l.constprop.0+0xf0>)
 8016fb4:	460d      	mov	r5, r1
 8016fb6:	462a      	mov	r2, r5
 8016fb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016fbc:	5d06      	ldrb	r6, [r0, r4]
 8016fbe:	f016 0608 	ands.w	r6, r6, #8
 8016fc2:	d1f8      	bne.n	8016fb6 <_strtol_l.constprop.0+0x22>
 8016fc4:	2c2d      	cmp	r4, #45	@ 0x2d
 8016fc6:	d12d      	bne.n	8017024 <_strtol_l.constprop.0+0x90>
 8016fc8:	782c      	ldrb	r4, [r5, #0]
 8016fca:	2601      	movs	r6, #1
 8016fcc:	1c95      	adds	r5, r2, #2
 8016fce:	f033 0210 	bics.w	r2, r3, #16
 8016fd2:	d109      	bne.n	8016fe8 <_strtol_l.constprop.0+0x54>
 8016fd4:	2c30      	cmp	r4, #48	@ 0x30
 8016fd6:	d12a      	bne.n	801702e <_strtol_l.constprop.0+0x9a>
 8016fd8:	782a      	ldrb	r2, [r5, #0]
 8016fda:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016fde:	2a58      	cmp	r2, #88	@ 0x58
 8016fe0:	d125      	bne.n	801702e <_strtol_l.constprop.0+0x9a>
 8016fe2:	786c      	ldrb	r4, [r5, #1]
 8016fe4:	2310      	movs	r3, #16
 8016fe6:	3502      	adds	r5, #2
 8016fe8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8016fec:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016ff0:	2200      	movs	r2, #0
 8016ff2:	fbbc f9f3 	udiv	r9, ip, r3
 8016ff6:	4610      	mov	r0, r2
 8016ff8:	fb03 ca19 	mls	sl, r3, r9, ip
 8016ffc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8017000:	2f09      	cmp	r7, #9
 8017002:	d81b      	bhi.n	801703c <_strtol_l.constprop.0+0xa8>
 8017004:	463c      	mov	r4, r7
 8017006:	42a3      	cmp	r3, r4
 8017008:	dd27      	ble.n	801705a <_strtol_l.constprop.0+0xc6>
 801700a:	1c57      	adds	r7, r2, #1
 801700c:	d007      	beq.n	801701e <_strtol_l.constprop.0+0x8a>
 801700e:	4581      	cmp	r9, r0
 8017010:	d320      	bcc.n	8017054 <_strtol_l.constprop.0+0xc0>
 8017012:	d101      	bne.n	8017018 <_strtol_l.constprop.0+0x84>
 8017014:	45a2      	cmp	sl, r4
 8017016:	db1d      	blt.n	8017054 <_strtol_l.constprop.0+0xc0>
 8017018:	fb00 4003 	mla	r0, r0, r3, r4
 801701c:	2201      	movs	r2, #1
 801701e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017022:	e7eb      	b.n	8016ffc <_strtol_l.constprop.0+0x68>
 8017024:	2c2b      	cmp	r4, #43	@ 0x2b
 8017026:	bf04      	itt	eq
 8017028:	782c      	ldrbeq	r4, [r5, #0]
 801702a:	1c95      	addeq	r5, r2, #2
 801702c:	e7cf      	b.n	8016fce <_strtol_l.constprop.0+0x3a>
 801702e:	2b00      	cmp	r3, #0
 8017030:	d1da      	bne.n	8016fe8 <_strtol_l.constprop.0+0x54>
 8017032:	2c30      	cmp	r4, #48	@ 0x30
 8017034:	bf0c      	ite	eq
 8017036:	2308      	moveq	r3, #8
 8017038:	230a      	movne	r3, #10
 801703a:	e7d5      	b.n	8016fe8 <_strtol_l.constprop.0+0x54>
 801703c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8017040:	2f19      	cmp	r7, #25
 8017042:	d801      	bhi.n	8017048 <_strtol_l.constprop.0+0xb4>
 8017044:	3c37      	subs	r4, #55	@ 0x37
 8017046:	e7de      	b.n	8017006 <_strtol_l.constprop.0+0x72>
 8017048:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801704c:	2f19      	cmp	r7, #25
 801704e:	d804      	bhi.n	801705a <_strtol_l.constprop.0+0xc6>
 8017050:	3c57      	subs	r4, #87	@ 0x57
 8017052:	e7d8      	b.n	8017006 <_strtol_l.constprop.0+0x72>
 8017054:	f04f 32ff 	mov.w	r2, #4294967295
 8017058:	e7e1      	b.n	801701e <_strtol_l.constprop.0+0x8a>
 801705a:	1c53      	adds	r3, r2, #1
 801705c:	d108      	bne.n	8017070 <_strtol_l.constprop.0+0xdc>
 801705e:	2322      	movs	r3, #34	@ 0x22
 8017060:	f8ce 3000 	str.w	r3, [lr]
 8017064:	4660      	mov	r0, ip
 8017066:	f1b8 0f00 	cmp.w	r8, #0
 801706a:	d0a0      	beq.n	8016fae <_strtol_l.constprop.0+0x1a>
 801706c:	1e69      	subs	r1, r5, #1
 801706e:	e006      	b.n	801707e <_strtol_l.constprop.0+0xea>
 8017070:	b106      	cbz	r6, 8017074 <_strtol_l.constprop.0+0xe0>
 8017072:	4240      	negs	r0, r0
 8017074:	f1b8 0f00 	cmp.w	r8, #0
 8017078:	d099      	beq.n	8016fae <_strtol_l.constprop.0+0x1a>
 801707a:	2a00      	cmp	r2, #0
 801707c:	d1f6      	bne.n	801706c <_strtol_l.constprop.0+0xd8>
 801707e:	f8c8 1000 	str.w	r1, [r8]
 8017082:	e794      	b.n	8016fae <_strtol_l.constprop.0+0x1a>
 8017084:	08025e31 	.word	0x08025e31

08017088 <_strtol_r>:
 8017088:	f7ff bf84 	b.w	8016f94 <_strtol_l.constprop.0>

0801708c <__ssputs_r>:
 801708c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017090:	688e      	ldr	r6, [r1, #8]
 8017092:	461f      	mov	r7, r3
 8017094:	42be      	cmp	r6, r7
 8017096:	680b      	ldr	r3, [r1, #0]
 8017098:	4682      	mov	sl, r0
 801709a:	460c      	mov	r4, r1
 801709c:	4690      	mov	r8, r2
 801709e:	d82d      	bhi.n	80170fc <__ssputs_r+0x70>
 80170a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80170a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80170a8:	d026      	beq.n	80170f8 <__ssputs_r+0x6c>
 80170aa:	6965      	ldr	r5, [r4, #20]
 80170ac:	6909      	ldr	r1, [r1, #16]
 80170ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80170b2:	eba3 0901 	sub.w	r9, r3, r1
 80170b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80170ba:	1c7b      	adds	r3, r7, #1
 80170bc:	444b      	add	r3, r9
 80170be:	106d      	asrs	r5, r5, #1
 80170c0:	429d      	cmp	r5, r3
 80170c2:	bf38      	it	cc
 80170c4:	461d      	movcc	r5, r3
 80170c6:	0553      	lsls	r3, r2, #21
 80170c8:	d527      	bpl.n	801711a <__ssputs_r+0x8e>
 80170ca:	4629      	mov	r1, r5
 80170cc:	f7fe fc1c 	bl	8015908 <_malloc_r>
 80170d0:	4606      	mov	r6, r0
 80170d2:	b360      	cbz	r0, 801712e <__ssputs_r+0xa2>
 80170d4:	6921      	ldr	r1, [r4, #16]
 80170d6:	464a      	mov	r2, r9
 80170d8:	f000 fbee 	bl	80178b8 <memcpy>
 80170dc:	89a3      	ldrh	r3, [r4, #12]
 80170de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80170e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80170e6:	81a3      	strh	r3, [r4, #12]
 80170e8:	6126      	str	r6, [r4, #16]
 80170ea:	6165      	str	r5, [r4, #20]
 80170ec:	444e      	add	r6, r9
 80170ee:	eba5 0509 	sub.w	r5, r5, r9
 80170f2:	6026      	str	r6, [r4, #0]
 80170f4:	60a5      	str	r5, [r4, #8]
 80170f6:	463e      	mov	r6, r7
 80170f8:	42be      	cmp	r6, r7
 80170fa:	d900      	bls.n	80170fe <__ssputs_r+0x72>
 80170fc:	463e      	mov	r6, r7
 80170fe:	6820      	ldr	r0, [r4, #0]
 8017100:	4632      	mov	r2, r6
 8017102:	4641      	mov	r1, r8
 8017104:	f000 fb9c 	bl	8017840 <memmove>
 8017108:	68a3      	ldr	r3, [r4, #8]
 801710a:	1b9b      	subs	r3, r3, r6
 801710c:	60a3      	str	r3, [r4, #8]
 801710e:	6823      	ldr	r3, [r4, #0]
 8017110:	4433      	add	r3, r6
 8017112:	6023      	str	r3, [r4, #0]
 8017114:	2000      	movs	r0, #0
 8017116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801711a:	462a      	mov	r2, r5
 801711c:	f000 ff61 	bl	8017fe2 <_realloc_r>
 8017120:	4606      	mov	r6, r0
 8017122:	2800      	cmp	r0, #0
 8017124:	d1e0      	bne.n	80170e8 <__ssputs_r+0x5c>
 8017126:	6921      	ldr	r1, [r4, #16]
 8017128:	4650      	mov	r0, sl
 801712a:	f7fe fb79 	bl	8015820 <_free_r>
 801712e:	230c      	movs	r3, #12
 8017130:	f8ca 3000 	str.w	r3, [sl]
 8017134:	89a3      	ldrh	r3, [r4, #12]
 8017136:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801713a:	81a3      	strh	r3, [r4, #12]
 801713c:	f04f 30ff 	mov.w	r0, #4294967295
 8017140:	e7e9      	b.n	8017116 <__ssputs_r+0x8a>
	...

08017144 <_svfiprintf_r>:
 8017144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017148:	4698      	mov	r8, r3
 801714a:	898b      	ldrh	r3, [r1, #12]
 801714c:	061b      	lsls	r3, r3, #24
 801714e:	b09d      	sub	sp, #116	@ 0x74
 8017150:	4607      	mov	r7, r0
 8017152:	460d      	mov	r5, r1
 8017154:	4614      	mov	r4, r2
 8017156:	d510      	bpl.n	801717a <_svfiprintf_r+0x36>
 8017158:	690b      	ldr	r3, [r1, #16]
 801715a:	b973      	cbnz	r3, 801717a <_svfiprintf_r+0x36>
 801715c:	2140      	movs	r1, #64	@ 0x40
 801715e:	f7fe fbd3 	bl	8015908 <_malloc_r>
 8017162:	6028      	str	r0, [r5, #0]
 8017164:	6128      	str	r0, [r5, #16]
 8017166:	b930      	cbnz	r0, 8017176 <_svfiprintf_r+0x32>
 8017168:	230c      	movs	r3, #12
 801716a:	603b      	str	r3, [r7, #0]
 801716c:	f04f 30ff 	mov.w	r0, #4294967295
 8017170:	b01d      	add	sp, #116	@ 0x74
 8017172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017176:	2340      	movs	r3, #64	@ 0x40
 8017178:	616b      	str	r3, [r5, #20]
 801717a:	2300      	movs	r3, #0
 801717c:	9309      	str	r3, [sp, #36]	@ 0x24
 801717e:	2320      	movs	r3, #32
 8017180:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017184:	f8cd 800c 	str.w	r8, [sp, #12]
 8017188:	2330      	movs	r3, #48	@ 0x30
 801718a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017328 <_svfiprintf_r+0x1e4>
 801718e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017192:	f04f 0901 	mov.w	r9, #1
 8017196:	4623      	mov	r3, r4
 8017198:	469a      	mov	sl, r3
 801719a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801719e:	b10a      	cbz	r2, 80171a4 <_svfiprintf_r+0x60>
 80171a0:	2a25      	cmp	r2, #37	@ 0x25
 80171a2:	d1f9      	bne.n	8017198 <_svfiprintf_r+0x54>
 80171a4:	ebba 0b04 	subs.w	fp, sl, r4
 80171a8:	d00b      	beq.n	80171c2 <_svfiprintf_r+0x7e>
 80171aa:	465b      	mov	r3, fp
 80171ac:	4622      	mov	r2, r4
 80171ae:	4629      	mov	r1, r5
 80171b0:	4638      	mov	r0, r7
 80171b2:	f7ff ff6b 	bl	801708c <__ssputs_r>
 80171b6:	3001      	adds	r0, #1
 80171b8:	f000 80a7 	beq.w	801730a <_svfiprintf_r+0x1c6>
 80171bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80171be:	445a      	add	r2, fp
 80171c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80171c2:	f89a 3000 	ldrb.w	r3, [sl]
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	f000 809f 	beq.w	801730a <_svfiprintf_r+0x1c6>
 80171cc:	2300      	movs	r3, #0
 80171ce:	f04f 32ff 	mov.w	r2, #4294967295
 80171d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80171d6:	f10a 0a01 	add.w	sl, sl, #1
 80171da:	9304      	str	r3, [sp, #16]
 80171dc:	9307      	str	r3, [sp, #28]
 80171de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80171e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80171e4:	4654      	mov	r4, sl
 80171e6:	2205      	movs	r2, #5
 80171e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80171ec:	484e      	ldr	r0, [pc, #312]	@ (8017328 <_svfiprintf_r+0x1e4>)
 80171ee:	f7e9 f817 	bl	8000220 <memchr>
 80171f2:	9a04      	ldr	r2, [sp, #16]
 80171f4:	b9d8      	cbnz	r0, 801722e <_svfiprintf_r+0xea>
 80171f6:	06d0      	lsls	r0, r2, #27
 80171f8:	bf44      	itt	mi
 80171fa:	2320      	movmi	r3, #32
 80171fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017200:	0711      	lsls	r1, r2, #28
 8017202:	bf44      	itt	mi
 8017204:	232b      	movmi	r3, #43	@ 0x2b
 8017206:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801720a:	f89a 3000 	ldrb.w	r3, [sl]
 801720e:	2b2a      	cmp	r3, #42	@ 0x2a
 8017210:	d015      	beq.n	801723e <_svfiprintf_r+0xfa>
 8017212:	9a07      	ldr	r2, [sp, #28]
 8017214:	4654      	mov	r4, sl
 8017216:	2000      	movs	r0, #0
 8017218:	f04f 0c0a 	mov.w	ip, #10
 801721c:	4621      	mov	r1, r4
 801721e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017222:	3b30      	subs	r3, #48	@ 0x30
 8017224:	2b09      	cmp	r3, #9
 8017226:	d94b      	bls.n	80172c0 <_svfiprintf_r+0x17c>
 8017228:	b1b0      	cbz	r0, 8017258 <_svfiprintf_r+0x114>
 801722a:	9207      	str	r2, [sp, #28]
 801722c:	e014      	b.n	8017258 <_svfiprintf_r+0x114>
 801722e:	eba0 0308 	sub.w	r3, r0, r8
 8017232:	fa09 f303 	lsl.w	r3, r9, r3
 8017236:	4313      	orrs	r3, r2
 8017238:	9304      	str	r3, [sp, #16]
 801723a:	46a2      	mov	sl, r4
 801723c:	e7d2      	b.n	80171e4 <_svfiprintf_r+0xa0>
 801723e:	9b03      	ldr	r3, [sp, #12]
 8017240:	1d19      	adds	r1, r3, #4
 8017242:	681b      	ldr	r3, [r3, #0]
 8017244:	9103      	str	r1, [sp, #12]
 8017246:	2b00      	cmp	r3, #0
 8017248:	bfbb      	ittet	lt
 801724a:	425b      	neglt	r3, r3
 801724c:	f042 0202 	orrlt.w	r2, r2, #2
 8017250:	9307      	strge	r3, [sp, #28]
 8017252:	9307      	strlt	r3, [sp, #28]
 8017254:	bfb8      	it	lt
 8017256:	9204      	strlt	r2, [sp, #16]
 8017258:	7823      	ldrb	r3, [r4, #0]
 801725a:	2b2e      	cmp	r3, #46	@ 0x2e
 801725c:	d10a      	bne.n	8017274 <_svfiprintf_r+0x130>
 801725e:	7863      	ldrb	r3, [r4, #1]
 8017260:	2b2a      	cmp	r3, #42	@ 0x2a
 8017262:	d132      	bne.n	80172ca <_svfiprintf_r+0x186>
 8017264:	9b03      	ldr	r3, [sp, #12]
 8017266:	1d1a      	adds	r2, r3, #4
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	9203      	str	r2, [sp, #12]
 801726c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017270:	3402      	adds	r4, #2
 8017272:	9305      	str	r3, [sp, #20]
 8017274:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017338 <_svfiprintf_r+0x1f4>
 8017278:	7821      	ldrb	r1, [r4, #0]
 801727a:	2203      	movs	r2, #3
 801727c:	4650      	mov	r0, sl
 801727e:	f7e8 ffcf 	bl	8000220 <memchr>
 8017282:	b138      	cbz	r0, 8017294 <_svfiprintf_r+0x150>
 8017284:	9b04      	ldr	r3, [sp, #16]
 8017286:	eba0 000a 	sub.w	r0, r0, sl
 801728a:	2240      	movs	r2, #64	@ 0x40
 801728c:	4082      	lsls	r2, r0
 801728e:	4313      	orrs	r3, r2
 8017290:	3401      	adds	r4, #1
 8017292:	9304      	str	r3, [sp, #16]
 8017294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017298:	4824      	ldr	r0, [pc, #144]	@ (801732c <_svfiprintf_r+0x1e8>)
 801729a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801729e:	2206      	movs	r2, #6
 80172a0:	f7e8 ffbe 	bl	8000220 <memchr>
 80172a4:	2800      	cmp	r0, #0
 80172a6:	d036      	beq.n	8017316 <_svfiprintf_r+0x1d2>
 80172a8:	4b21      	ldr	r3, [pc, #132]	@ (8017330 <_svfiprintf_r+0x1ec>)
 80172aa:	bb1b      	cbnz	r3, 80172f4 <_svfiprintf_r+0x1b0>
 80172ac:	9b03      	ldr	r3, [sp, #12]
 80172ae:	3307      	adds	r3, #7
 80172b0:	f023 0307 	bic.w	r3, r3, #7
 80172b4:	3308      	adds	r3, #8
 80172b6:	9303      	str	r3, [sp, #12]
 80172b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80172ba:	4433      	add	r3, r6
 80172bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80172be:	e76a      	b.n	8017196 <_svfiprintf_r+0x52>
 80172c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80172c4:	460c      	mov	r4, r1
 80172c6:	2001      	movs	r0, #1
 80172c8:	e7a8      	b.n	801721c <_svfiprintf_r+0xd8>
 80172ca:	2300      	movs	r3, #0
 80172cc:	3401      	adds	r4, #1
 80172ce:	9305      	str	r3, [sp, #20]
 80172d0:	4619      	mov	r1, r3
 80172d2:	f04f 0c0a 	mov.w	ip, #10
 80172d6:	4620      	mov	r0, r4
 80172d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80172dc:	3a30      	subs	r2, #48	@ 0x30
 80172de:	2a09      	cmp	r2, #9
 80172e0:	d903      	bls.n	80172ea <_svfiprintf_r+0x1a6>
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d0c6      	beq.n	8017274 <_svfiprintf_r+0x130>
 80172e6:	9105      	str	r1, [sp, #20]
 80172e8:	e7c4      	b.n	8017274 <_svfiprintf_r+0x130>
 80172ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80172ee:	4604      	mov	r4, r0
 80172f0:	2301      	movs	r3, #1
 80172f2:	e7f0      	b.n	80172d6 <_svfiprintf_r+0x192>
 80172f4:	ab03      	add	r3, sp, #12
 80172f6:	9300      	str	r3, [sp, #0]
 80172f8:	462a      	mov	r2, r5
 80172fa:	4b0e      	ldr	r3, [pc, #56]	@ (8017334 <_svfiprintf_r+0x1f0>)
 80172fc:	a904      	add	r1, sp, #16
 80172fe:	4638      	mov	r0, r7
 8017300:	f7fc fcb8 	bl	8013c74 <_printf_float>
 8017304:	1c42      	adds	r2, r0, #1
 8017306:	4606      	mov	r6, r0
 8017308:	d1d6      	bne.n	80172b8 <_svfiprintf_r+0x174>
 801730a:	89ab      	ldrh	r3, [r5, #12]
 801730c:	065b      	lsls	r3, r3, #25
 801730e:	f53f af2d 	bmi.w	801716c <_svfiprintf_r+0x28>
 8017312:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017314:	e72c      	b.n	8017170 <_svfiprintf_r+0x2c>
 8017316:	ab03      	add	r3, sp, #12
 8017318:	9300      	str	r3, [sp, #0]
 801731a:	462a      	mov	r2, r5
 801731c:	4b05      	ldr	r3, [pc, #20]	@ (8017334 <_svfiprintf_r+0x1f0>)
 801731e:	a904      	add	r1, sp, #16
 8017320:	4638      	mov	r0, r7
 8017322:	f7fc ff3f 	bl	80141a4 <_printf_i>
 8017326:	e7ed      	b.n	8017304 <_svfiprintf_r+0x1c0>
 8017328:	08025f31 	.word	0x08025f31
 801732c:	08025f3b 	.word	0x08025f3b
 8017330:	08013c75 	.word	0x08013c75
 8017334:	0801708d 	.word	0x0801708d
 8017338:	08025f37 	.word	0x08025f37

0801733c <__sfputc_r>:
 801733c:	6893      	ldr	r3, [r2, #8]
 801733e:	3b01      	subs	r3, #1
 8017340:	2b00      	cmp	r3, #0
 8017342:	b410      	push	{r4}
 8017344:	6093      	str	r3, [r2, #8]
 8017346:	da08      	bge.n	801735a <__sfputc_r+0x1e>
 8017348:	6994      	ldr	r4, [r2, #24]
 801734a:	42a3      	cmp	r3, r4
 801734c:	db01      	blt.n	8017352 <__sfputc_r+0x16>
 801734e:	290a      	cmp	r1, #10
 8017350:	d103      	bne.n	801735a <__sfputc_r+0x1e>
 8017352:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017356:	f000 b9df 	b.w	8017718 <__swbuf_r>
 801735a:	6813      	ldr	r3, [r2, #0]
 801735c:	1c58      	adds	r0, r3, #1
 801735e:	6010      	str	r0, [r2, #0]
 8017360:	7019      	strb	r1, [r3, #0]
 8017362:	4608      	mov	r0, r1
 8017364:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017368:	4770      	bx	lr

0801736a <__sfputs_r>:
 801736a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801736c:	4606      	mov	r6, r0
 801736e:	460f      	mov	r7, r1
 8017370:	4614      	mov	r4, r2
 8017372:	18d5      	adds	r5, r2, r3
 8017374:	42ac      	cmp	r4, r5
 8017376:	d101      	bne.n	801737c <__sfputs_r+0x12>
 8017378:	2000      	movs	r0, #0
 801737a:	e007      	b.n	801738c <__sfputs_r+0x22>
 801737c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017380:	463a      	mov	r2, r7
 8017382:	4630      	mov	r0, r6
 8017384:	f7ff ffda 	bl	801733c <__sfputc_r>
 8017388:	1c43      	adds	r3, r0, #1
 801738a:	d1f3      	bne.n	8017374 <__sfputs_r+0xa>
 801738c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017390 <_vfiprintf_r>:
 8017390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017394:	460d      	mov	r5, r1
 8017396:	b09d      	sub	sp, #116	@ 0x74
 8017398:	4614      	mov	r4, r2
 801739a:	4698      	mov	r8, r3
 801739c:	4606      	mov	r6, r0
 801739e:	b118      	cbz	r0, 80173a8 <_vfiprintf_r+0x18>
 80173a0:	6a03      	ldr	r3, [r0, #32]
 80173a2:	b90b      	cbnz	r3, 80173a8 <_vfiprintf_r+0x18>
 80173a4:	f7fd fabe 	bl	8014924 <__sinit>
 80173a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80173aa:	07d9      	lsls	r1, r3, #31
 80173ac:	d405      	bmi.n	80173ba <_vfiprintf_r+0x2a>
 80173ae:	89ab      	ldrh	r3, [r5, #12]
 80173b0:	059a      	lsls	r2, r3, #22
 80173b2:	d402      	bmi.n	80173ba <_vfiprintf_r+0x2a>
 80173b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80173b6:	f7fd fbde 	bl	8014b76 <__retarget_lock_acquire_recursive>
 80173ba:	89ab      	ldrh	r3, [r5, #12]
 80173bc:	071b      	lsls	r3, r3, #28
 80173be:	d501      	bpl.n	80173c4 <_vfiprintf_r+0x34>
 80173c0:	692b      	ldr	r3, [r5, #16]
 80173c2:	b99b      	cbnz	r3, 80173ec <_vfiprintf_r+0x5c>
 80173c4:	4629      	mov	r1, r5
 80173c6:	4630      	mov	r0, r6
 80173c8:	f000 f9e4 	bl	8017794 <__swsetup_r>
 80173cc:	b170      	cbz	r0, 80173ec <_vfiprintf_r+0x5c>
 80173ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80173d0:	07dc      	lsls	r4, r3, #31
 80173d2:	d504      	bpl.n	80173de <_vfiprintf_r+0x4e>
 80173d4:	f04f 30ff 	mov.w	r0, #4294967295
 80173d8:	b01d      	add	sp, #116	@ 0x74
 80173da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173de:	89ab      	ldrh	r3, [r5, #12]
 80173e0:	0598      	lsls	r0, r3, #22
 80173e2:	d4f7      	bmi.n	80173d4 <_vfiprintf_r+0x44>
 80173e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80173e6:	f7fd fbc7 	bl	8014b78 <__retarget_lock_release_recursive>
 80173ea:	e7f3      	b.n	80173d4 <_vfiprintf_r+0x44>
 80173ec:	2300      	movs	r3, #0
 80173ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80173f0:	2320      	movs	r3, #32
 80173f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80173f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80173fa:	2330      	movs	r3, #48	@ 0x30
 80173fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80175ac <_vfiprintf_r+0x21c>
 8017400:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017404:	f04f 0901 	mov.w	r9, #1
 8017408:	4623      	mov	r3, r4
 801740a:	469a      	mov	sl, r3
 801740c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017410:	b10a      	cbz	r2, 8017416 <_vfiprintf_r+0x86>
 8017412:	2a25      	cmp	r2, #37	@ 0x25
 8017414:	d1f9      	bne.n	801740a <_vfiprintf_r+0x7a>
 8017416:	ebba 0b04 	subs.w	fp, sl, r4
 801741a:	d00b      	beq.n	8017434 <_vfiprintf_r+0xa4>
 801741c:	465b      	mov	r3, fp
 801741e:	4622      	mov	r2, r4
 8017420:	4629      	mov	r1, r5
 8017422:	4630      	mov	r0, r6
 8017424:	f7ff ffa1 	bl	801736a <__sfputs_r>
 8017428:	3001      	adds	r0, #1
 801742a:	f000 80a7 	beq.w	801757c <_vfiprintf_r+0x1ec>
 801742e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017430:	445a      	add	r2, fp
 8017432:	9209      	str	r2, [sp, #36]	@ 0x24
 8017434:	f89a 3000 	ldrb.w	r3, [sl]
 8017438:	2b00      	cmp	r3, #0
 801743a:	f000 809f 	beq.w	801757c <_vfiprintf_r+0x1ec>
 801743e:	2300      	movs	r3, #0
 8017440:	f04f 32ff 	mov.w	r2, #4294967295
 8017444:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017448:	f10a 0a01 	add.w	sl, sl, #1
 801744c:	9304      	str	r3, [sp, #16]
 801744e:	9307      	str	r3, [sp, #28]
 8017450:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017454:	931a      	str	r3, [sp, #104]	@ 0x68
 8017456:	4654      	mov	r4, sl
 8017458:	2205      	movs	r2, #5
 801745a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801745e:	4853      	ldr	r0, [pc, #332]	@ (80175ac <_vfiprintf_r+0x21c>)
 8017460:	f7e8 fede 	bl	8000220 <memchr>
 8017464:	9a04      	ldr	r2, [sp, #16]
 8017466:	b9d8      	cbnz	r0, 80174a0 <_vfiprintf_r+0x110>
 8017468:	06d1      	lsls	r1, r2, #27
 801746a:	bf44      	itt	mi
 801746c:	2320      	movmi	r3, #32
 801746e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017472:	0713      	lsls	r3, r2, #28
 8017474:	bf44      	itt	mi
 8017476:	232b      	movmi	r3, #43	@ 0x2b
 8017478:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801747c:	f89a 3000 	ldrb.w	r3, [sl]
 8017480:	2b2a      	cmp	r3, #42	@ 0x2a
 8017482:	d015      	beq.n	80174b0 <_vfiprintf_r+0x120>
 8017484:	9a07      	ldr	r2, [sp, #28]
 8017486:	4654      	mov	r4, sl
 8017488:	2000      	movs	r0, #0
 801748a:	f04f 0c0a 	mov.w	ip, #10
 801748e:	4621      	mov	r1, r4
 8017490:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017494:	3b30      	subs	r3, #48	@ 0x30
 8017496:	2b09      	cmp	r3, #9
 8017498:	d94b      	bls.n	8017532 <_vfiprintf_r+0x1a2>
 801749a:	b1b0      	cbz	r0, 80174ca <_vfiprintf_r+0x13a>
 801749c:	9207      	str	r2, [sp, #28]
 801749e:	e014      	b.n	80174ca <_vfiprintf_r+0x13a>
 80174a0:	eba0 0308 	sub.w	r3, r0, r8
 80174a4:	fa09 f303 	lsl.w	r3, r9, r3
 80174a8:	4313      	orrs	r3, r2
 80174aa:	9304      	str	r3, [sp, #16]
 80174ac:	46a2      	mov	sl, r4
 80174ae:	e7d2      	b.n	8017456 <_vfiprintf_r+0xc6>
 80174b0:	9b03      	ldr	r3, [sp, #12]
 80174b2:	1d19      	adds	r1, r3, #4
 80174b4:	681b      	ldr	r3, [r3, #0]
 80174b6:	9103      	str	r1, [sp, #12]
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	bfbb      	ittet	lt
 80174bc:	425b      	neglt	r3, r3
 80174be:	f042 0202 	orrlt.w	r2, r2, #2
 80174c2:	9307      	strge	r3, [sp, #28]
 80174c4:	9307      	strlt	r3, [sp, #28]
 80174c6:	bfb8      	it	lt
 80174c8:	9204      	strlt	r2, [sp, #16]
 80174ca:	7823      	ldrb	r3, [r4, #0]
 80174cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80174ce:	d10a      	bne.n	80174e6 <_vfiprintf_r+0x156>
 80174d0:	7863      	ldrb	r3, [r4, #1]
 80174d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80174d4:	d132      	bne.n	801753c <_vfiprintf_r+0x1ac>
 80174d6:	9b03      	ldr	r3, [sp, #12]
 80174d8:	1d1a      	adds	r2, r3, #4
 80174da:	681b      	ldr	r3, [r3, #0]
 80174dc:	9203      	str	r2, [sp, #12]
 80174de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80174e2:	3402      	adds	r4, #2
 80174e4:	9305      	str	r3, [sp, #20]
 80174e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80175bc <_vfiprintf_r+0x22c>
 80174ea:	7821      	ldrb	r1, [r4, #0]
 80174ec:	2203      	movs	r2, #3
 80174ee:	4650      	mov	r0, sl
 80174f0:	f7e8 fe96 	bl	8000220 <memchr>
 80174f4:	b138      	cbz	r0, 8017506 <_vfiprintf_r+0x176>
 80174f6:	9b04      	ldr	r3, [sp, #16]
 80174f8:	eba0 000a 	sub.w	r0, r0, sl
 80174fc:	2240      	movs	r2, #64	@ 0x40
 80174fe:	4082      	lsls	r2, r0
 8017500:	4313      	orrs	r3, r2
 8017502:	3401      	adds	r4, #1
 8017504:	9304      	str	r3, [sp, #16]
 8017506:	f814 1b01 	ldrb.w	r1, [r4], #1
 801750a:	4829      	ldr	r0, [pc, #164]	@ (80175b0 <_vfiprintf_r+0x220>)
 801750c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017510:	2206      	movs	r2, #6
 8017512:	f7e8 fe85 	bl	8000220 <memchr>
 8017516:	2800      	cmp	r0, #0
 8017518:	d03f      	beq.n	801759a <_vfiprintf_r+0x20a>
 801751a:	4b26      	ldr	r3, [pc, #152]	@ (80175b4 <_vfiprintf_r+0x224>)
 801751c:	bb1b      	cbnz	r3, 8017566 <_vfiprintf_r+0x1d6>
 801751e:	9b03      	ldr	r3, [sp, #12]
 8017520:	3307      	adds	r3, #7
 8017522:	f023 0307 	bic.w	r3, r3, #7
 8017526:	3308      	adds	r3, #8
 8017528:	9303      	str	r3, [sp, #12]
 801752a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801752c:	443b      	add	r3, r7
 801752e:	9309      	str	r3, [sp, #36]	@ 0x24
 8017530:	e76a      	b.n	8017408 <_vfiprintf_r+0x78>
 8017532:	fb0c 3202 	mla	r2, ip, r2, r3
 8017536:	460c      	mov	r4, r1
 8017538:	2001      	movs	r0, #1
 801753a:	e7a8      	b.n	801748e <_vfiprintf_r+0xfe>
 801753c:	2300      	movs	r3, #0
 801753e:	3401      	adds	r4, #1
 8017540:	9305      	str	r3, [sp, #20]
 8017542:	4619      	mov	r1, r3
 8017544:	f04f 0c0a 	mov.w	ip, #10
 8017548:	4620      	mov	r0, r4
 801754a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801754e:	3a30      	subs	r2, #48	@ 0x30
 8017550:	2a09      	cmp	r2, #9
 8017552:	d903      	bls.n	801755c <_vfiprintf_r+0x1cc>
 8017554:	2b00      	cmp	r3, #0
 8017556:	d0c6      	beq.n	80174e6 <_vfiprintf_r+0x156>
 8017558:	9105      	str	r1, [sp, #20]
 801755a:	e7c4      	b.n	80174e6 <_vfiprintf_r+0x156>
 801755c:	fb0c 2101 	mla	r1, ip, r1, r2
 8017560:	4604      	mov	r4, r0
 8017562:	2301      	movs	r3, #1
 8017564:	e7f0      	b.n	8017548 <_vfiprintf_r+0x1b8>
 8017566:	ab03      	add	r3, sp, #12
 8017568:	9300      	str	r3, [sp, #0]
 801756a:	462a      	mov	r2, r5
 801756c:	4b12      	ldr	r3, [pc, #72]	@ (80175b8 <_vfiprintf_r+0x228>)
 801756e:	a904      	add	r1, sp, #16
 8017570:	4630      	mov	r0, r6
 8017572:	f7fc fb7f 	bl	8013c74 <_printf_float>
 8017576:	4607      	mov	r7, r0
 8017578:	1c78      	adds	r0, r7, #1
 801757a:	d1d6      	bne.n	801752a <_vfiprintf_r+0x19a>
 801757c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801757e:	07d9      	lsls	r1, r3, #31
 8017580:	d405      	bmi.n	801758e <_vfiprintf_r+0x1fe>
 8017582:	89ab      	ldrh	r3, [r5, #12]
 8017584:	059a      	lsls	r2, r3, #22
 8017586:	d402      	bmi.n	801758e <_vfiprintf_r+0x1fe>
 8017588:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801758a:	f7fd faf5 	bl	8014b78 <__retarget_lock_release_recursive>
 801758e:	89ab      	ldrh	r3, [r5, #12]
 8017590:	065b      	lsls	r3, r3, #25
 8017592:	f53f af1f 	bmi.w	80173d4 <_vfiprintf_r+0x44>
 8017596:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017598:	e71e      	b.n	80173d8 <_vfiprintf_r+0x48>
 801759a:	ab03      	add	r3, sp, #12
 801759c:	9300      	str	r3, [sp, #0]
 801759e:	462a      	mov	r2, r5
 80175a0:	4b05      	ldr	r3, [pc, #20]	@ (80175b8 <_vfiprintf_r+0x228>)
 80175a2:	a904      	add	r1, sp, #16
 80175a4:	4630      	mov	r0, r6
 80175a6:	f7fc fdfd 	bl	80141a4 <_printf_i>
 80175aa:	e7e4      	b.n	8017576 <_vfiprintf_r+0x1e6>
 80175ac:	08025f31 	.word	0x08025f31
 80175b0:	08025f3b 	.word	0x08025f3b
 80175b4:	08013c75 	.word	0x08013c75
 80175b8:	0801736b 	.word	0x0801736b
 80175bc:	08025f37 	.word	0x08025f37

080175c0 <__sflush_r>:
 80175c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80175c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175c8:	0716      	lsls	r6, r2, #28
 80175ca:	4605      	mov	r5, r0
 80175cc:	460c      	mov	r4, r1
 80175ce:	d454      	bmi.n	801767a <__sflush_r+0xba>
 80175d0:	684b      	ldr	r3, [r1, #4]
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	dc02      	bgt.n	80175dc <__sflush_r+0x1c>
 80175d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80175d8:	2b00      	cmp	r3, #0
 80175da:	dd48      	ble.n	801766e <__sflush_r+0xae>
 80175dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80175de:	2e00      	cmp	r6, #0
 80175e0:	d045      	beq.n	801766e <__sflush_r+0xae>
 80175e2:	2300      	movs	r3, #0
 80175e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80175e8:	682f      	ldr	r7, [r5, #0]
 80175ea:	6a21      	ldr	r1, [r4, #32]
 80175ec:	602b      	str	r3, [r5, #0]
 80175ee:	d030      	beq.n	8017652 <__sflush_r+0x92>
 80175f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80175f2:	89a3      	ldrh	r3, [r4, #12]
 80175f4:	0759      	lsls	r1, r3, #29
 80175f6:	d505      	bpl.n	8017604 <__sflush_r+0x44>
 80175f8:	6863      	ldr	r3, [r4, #4]
 80175fa:	1ad2      	subs	r2, r2, r3
 80175fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80175fe:	b10b      	cbz	r3, 8017604 <__sflush_r+0x44>
 8017600:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017602:	1ad2      	subs	r2, r2, r3
 8017604:	2300      	movs	r3, #0
 8017606:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017608:	6a21      	ldr	r1, [r4, #32]
 801760a:	4628      	mov	r0, r5
 801760c:	47b0      	blx	r6
 801760e:	1c43      	adds	r3, r0, #1
 8017610:	89a3      	ldrh	r3, [r4, #12]
 8017612:	d106      	bne.n	8017622 <__sflush_r+0x62>
 8017614:	6829      	ldr	r1, [r5, #0]
 8017616:	291d      	cmp	r1, #29
 8017618:	d82b      	bhi.n	8017672 <__sflush_r+0xb2>
 801761a:	4a2a      	ldr	r2, [pc, #168]	@ (80176c4 <__sflush_r+0x104>)
 801761c:	410a      	asrs	r2, r1
 801761e:	07d6      	lsls	r6, r2, #31
 8017620:	d427      	bmi.n	8017672 <__sflush_r+0xb2>
 8017622:	2200      	movs	r2, #0
 8017624:	6062      	str	r2, [r4, #4]
 8017626:	04d9      	lsls	r1, r3, #19
 8017628:	6922      	ldr	r2, [r4, #16]
 801762a:	6022      	str	r2, [r4, #0]
 801762c:	d504      	bpl.n	8017638 <__sflush_r+0x78>
 801762e:	1c42      	adds	r2, r0, #1
 8017630:	d101      	bne.n	8017636 <__sflush_r+0x76>
 8017632:	682b      	ldr	r3, [r5, #0]
 8017634:	b903      	cbnz	r3, 8017638 <__sflush_r+0x78>
 8017636:	6560      	str	r0, [r4, #84]	@ 0x54
 8017638:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801763a:	602f      	str	r7, [r5, #0]
 801763c:	b1b9      	cbz	r1, 801766e <__sflush_r+0xae>
 801763e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017642:	4299      	cmp	r1, r3
 8017644:	d002      	beq.n	801764c <__sflush_r+0x8c>
 8017646:	4628      	mov	r0, r5
 8017648:	f7fe f8ea 	bl	8015820 <_free_r>
 801764c:	2300      	movs	r3, #0
 801764e:	6363      	str	r3, [r4, #52]	@ 0x34
 8017650:	e00d      	b.n	801766e <__sflush_r+0xae>
 8017652:	2301      	movs	r3, #1
 8017654:	4628      	mov	r0, r5
 8017656:	47b0      	blx	r6
 8017658:	4602      	mov	r2, r0
 801765a:	1c50      	adds	r0, r2, #1
 801765c:	d1c9      	bne.n	80175f2 <__sflush_r+0x32>
 801765e:	682b      	ldr	r3, [r5, #0]
 8017660:	2b00      	cmp	r3, #0
 8017662:	d0c6      	beq.n	80175f2 <__sflush_r+0x32>
 8017664:	2b1d      	cmp	r3, #29
 8017666:	d001      	beq.n	801766c <__sflush_r+0xac>
 8017668:	2b16      	cmp	r3, #22
 801766a:	d11e      	bne.n	80176aa <__sflush_r+0xea>
 801766c:	602f      	str	r7, [r5, #0]
 801766e:	2000      	movs	r0, #0
 8017670:	e022      	b.n	80176b8 <__sflush_r+0xf8>
 8017672:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017676:	b21b      	sxth	r3, r3
 8017678:	e01b      	b.n	80176b2 <__sflush_r+0xf2>
 801767a:	690f      	ldr	r7, [r1, #16]
 801767c:	2f00      	cmp	r7, #0
 801767e:	d0f6      	beq.n	801766e <__sflush_r+0xae>
 8017680:	0793      	lsls	r3, r2, #30
 8017682:	680e      	ldr	r6, [r1, #0]
 8017684:	bf08      	it	eq
 8017686:	694b      	ldreq	r3, [r1, #20]
 8017688:	600f      	str	r7, [r1, #0]
 801768a:	bf18      	it	ne
 801768c:	2300      	movne	r3, #0
 801768e:	eba6 0807 	sub.w	r8, r6, r7
 8017692:	608b      	str	r3, [r1, #8]
 8017694:	f1b8 0f00 	cmp.w	r8, #0
 8017698:	dde9      	ble.n	801766e <__sflush_r+0xae>
 801769a:	6a21      	ldr	r1, [r4, #32]
 801769c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801769e:	4643      	mov	r3, r8
 80176a0:	463a      	mov	r2, r7
 80176a2:	4628      	mov	r0, r5
 80176a4:	47b0      	blx	r6
 80176a6:	2800      	cmp	r0, #0
 80176a8:	dc08      	bgt.n	80176bc <__sflush_r+0xfc>
 80176aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80176ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80176b2:	81a3      	strh	r3, [r4, #12]
 80176b4:	f04f 30ff 	mov.w	r0, #4294967295
 80176b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176bc:	4407      	add	r7, r0
 80176be:	eba8 0800 	sub.w	r8, r8, r0
 80176c2:	e7e7      	b.n	8017694 <__sflush_r+0xd4>
 80176c4:	dfbffffe 	.word	0xdfbffffe

080176c8 <_fflush_r>:
 80176c8:	b538      	push	{r3, r4, r5, lr}
 80176ca:	690b      	ldr	r3, [r1, #16]
 80176cc:	4605      	mov	r5, r0
 80176ce:	460c      	mov	r4, r1
 80176d0:	b913      	cbnz	r3, 80176d8 <_fflush_r+0x10>
 80176d2:	2500      	movs	r5, #0
 80176d4:	4628      	mov	r0, r5
 80176d6:	bd38      	pop	{r3, r4, r5, pc}
 80176d8:	b118      	cbz	r0, 80176e2 <_fflush_r+0x1a>
 80176da:	6a03      	ldr	r3, [r0, #32]
 80176dc:	b90b      	cbnz	r3, 80176e2 <_fflush_r+0x1a>
 80176de:	f7fd f921 	bl	8014924 <__sinit>
 80176e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	d0f3      	beq.n	80176d2 <_fflush_r+0xa>
 80176ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80176ec:	07d0      	lsls	r0, r2, #31
 80176ee:	d404      	bmi.n	80176fa <_fflush_r+0x32>
 80176f0:	0599      	lsls	r1, r3, #22
 80176f2:	d402      	bmi.n	80176fa <_fflush_r+0x32>
 80176f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80176f6:	f7fd fa3e 	bl	8014b76 <__retarget_lock_acquire_recursive>
 80176fa:	4628      	mov	r0, r5
 80176fc:	4621      	mov	r1, r4
 80176fe:	f7ff ff5f 	bl	80175c0 <__sflush_r>
 8017702:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017704:	07da      	lsls	r2, r3, #31
 8017706:	4605      	mov	r5, r0
 8017708:	d4e4      	bmi.n	80176d4 <_fflush_r+0xc>
 801770a:	89a3      	ldrh	r3, [r4, #12]
 801770c:	059b      	lsls	r3, r3, #22
 801770e:	d4e1      	bmi.n	80176d4 <_fflush_r+0xc>
 8017710:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017712:	f7fd fa31 	bl	8014b78 <__retarget_lock_release_recursive>
 8017716:	e7dd      	b.n	80176d4 <_fflush_r+0xc>

08017718 <__swbuf_r>:
 8017718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801771a:	460e      	mov	r6, r1
 801771c:	4614      	mov	r4, r2
 801771e:	4605      	mov	r5, r0
 8017720:	b118      	cbz	r0, 801772a <__swbuf_r+0x12>
 8017722:	6a03      	ldr	r3, [r0, #32]
 8017724:	b90b      	cbnz	r3, 801772a <__swbuf_r+0x12>
 8017726:	f7fd f8fd 	bl	8014924 <__sinit>
 801772a:	69a3      	ldr	r3, [r4, #24]
 801772c:	60a3      	str	r3, [r4, #8]
 801772e:	89a3      	ldrh	r3, [r4, #12]
 8017730:	071a      	lsls	r2, r3, #28
 8017732:	d501      	bpl.n	8017738 <__swbuf_r+0x20>
 8017734:	6923      	ldr	r3, [r4, #16]
 8017736:	b943      	cbnz	r3, 801774a <__swbuf_r+0x32>
 8017738:	4621      	mov	r1, r4
 801773a:	4628      	mov	r0, r5
 801773c:	f000 f82a 	bl	8017794 <__swsetup_r>
 8017740:	b118      	cbz	r0, 801774a <__swbuf_r+0x32>
 8017742:	f04f 37ff 	mov.w	r7, #4294967295
 8017746:	4638      	mov	r0, r7
 8017748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801774a:	6823      	ldr	r3, [r4, #0]
 801774c:	6922      	ldr	r2, [r4, #16]
 801774e:	1a98      	subs	r0, r3, r2
 8017750:	6963      	ldr	r3, [r4, #20]
 8017752:	b2f6      	uxtb	r6, r6
 8017754:	4283      	cmp	r3, r0
 8017756:	4637      	mov	r7, r6
 8017758:	dc05      	bgt.n	8017766 <__swbuf_r+0x4e>
 801775a:	4621      	mov	r1, r4
 801775c:	4628      	mov	r0, r5
 801775e:	f7ff ffb3 	bl	80176c8 <_fflush_r>
 8017762:	2800      	cmp	r0, #0
 8017764:	d1ed      	bne.n	8017742 <__swbuf_r+0x2a>
 8017766:	68a3      	ldr	r3, [r4, #8]
 8017768:	3b01      	subs	r3, #1
 801776a:	60a3      	str	r3, [r4, #8]
 801776c:	6823      	ldr	r3, [r4, #0]
 801776e:	1c5a      	adds	r2, r3, #1
 8017770:	6022      	str	r2, [r4, #0]
 8017772:	701e      	strb	r6, [r3, #0]
 8017774:	6962      	ldr	r2, [r4, #20]
 8017776:	1c43      	adds	r3, r0, #1
 8017778:	429a      	cmp	r2, r3
 801777a:	d004      	beq.n	8017786 <__swbuf_r+0x6e>
 801777c:	89a3      	ldrh	r3, [r4, #12]
 801777e:	07db      	lsls	r3, r3, #31
 8017780:	d5e1      	bpl.n	8017746 <__swbuf_r+0x2e>
 8017782:	2e0a      	cmp	r6, #10
 8017784:	d1df      	bne.n	8017746 <__swbuf_r+0x2e>
 8017786:	4621      	mov	r1, r4
 8017788:	4628      	mov	r0, r5
 801778a:	f7ff ff9d 	bl	80176c8 <_fflush_r>
 801778e:	2800      	cmp	r0, #0
 8017790:	d0d9      	beq.n	8017746 <__swbuf_r+0x2e>
 8017792:	e7d6      	b.n	8017742 <__swbuf_r+0x2a>

08017794 <__swsetup_r>:
 8017794:	b538      	push	{r3, r4, r5, lr}
 8017796:	4b29      	ldr	r3, [pc, #164]	@ (801783c <__swsetup_r+0xa8>)
 8017798:	4605      	mov	r5, r0
 801779a:	6818      	ldr	r0, [r3, #0]
 801779c:	460c      	mov	r4, r1
 801779e:	b118      	cbz	r0, 80177a8 <__swsetup_r+0x14>
 80177a0:	6a03      	ldr	r3, [r0, #32]
 80177a2:	b90b      	cbnz	r3, 80177a8 <__swsetup_r+0x14>
 80177a4:	f7fd f8be 	bl	8014924 <__sinit>
 80177a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80177ac:	0719      	lsls	r1, r3, #28
 80177ae:	d422      	bmi.n	80177f6 <__swsetup_r+0x62>
 80177b0:	06da      	lsls	r2, r3, #27
 80177b2:	d407      	bmi.n	80177c4 <__swsetup_r+0x30>
 80177b4:	2209      	movs	r2, #9
 80177b6:	602a      	str	r2, [r5, #0]
 80177b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80177bc:	81a3      	strh	r3, [r4, #12]
 80177be:	f04f 30ff 	mov.w	r0, #4294967295
 80177c2:	e033      	b.n	801782c <__swsetup_r+0x98>
 80177c4:	0758      	lsls	r0, r3, #29
 80177c6:	d512      	bpl.n	80177ee <__swsetup_r+0x5a>
 80177c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80177ca:	b141      	cbz	r1, 80177de <__swsetup_r+0x4a>
 80177cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80177d0:	4299      	cmp	r1, r3
 80177d2:	d002      	beq.n	80177da <__swsetup_r+0x46>
 80177d4:	4628      	mov	r0, r5
 80177d6:	f7fe f823 	bl	8015820 <_free_r>
 80177da:	2300      	movs	r3, #0
 80177dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80177de:	89a3      	ldrh	r3, [r4, #12]
 80177e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80177e4:	81a3      	strh	r3, [r4, #12]
 80177e6:	2300      	movs	r3, #0
 80177e8:	6063      	str	r3, [r4, #4]
 80177ea:	6923      	ldr	r3, [r4, #16]
 80177ec:	6023      	str	r3, [r4, #0]
 80177ee:	89a3      	ldrh	r3, [r4, #12]
 80177f0:	f043 0308 	orr.w	r3, r3, #8
 80177f4:	81a3      	strh	r3, [r4, #12]
 80177f6:	6923      	ldr	r3, [r4, #16]
 80177f8:	b94b      	cbnz	r3, 801780e <__swsetup_r+0x7a>
 80177fa:	89a3      	ldrh	r3, [r4, #12]
 80177fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017800:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017804:	d003      	beq.n	801780e <__swsetup_r+0x7a>
 8017806:	4621      	mov	r1, r4
 8017808:	4628      	mov	r0, r5
 801780a:	f000 fc5d 	bl	80180c8 <__smakebuf_r>
 801780e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017812:	f013 0201 	ands.w	r2, r3, #1
 8017816:	d00a      	beq.n	801782e <__swsetup_r+0x9a>
 8017818:	2200      	movs	r2, #0
 801781a:	60a2      	str	r2, [r4, #8]
 801781c:	6962      	ldr	r2, [r4, #20]
 801781e:	4252      	negs	r2, r2
 8017820:	61a2      	str	r2, [r4, #24]
 8017822:	6922      	ldr	r2, [r4, #16]
 8017824:	b942      	cbnz	r2, 8017838 <__swsetup_r+0xa4>
 8017826:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801782a:	d1c5      	bne.n	80177b8 <__swsetup_r+0x24>
 801782c:	bd38      	pop	{r3, r4, r5, pc}
 801782e:	0799      	lsls	r1, r3, #30
 8017830:	bf58      	it	pl
 8017832:	6962      	ldrpl	r2, [r4, #20]
 8017834:	60a2      	str	r2, [r4, #8]
 8017836:	e7f4      	b.n	8017822 <__swsetup_r+0x8e>
 8017838:	2000      	movs	r0, #0
 801783a:	e7f7      	b.n	801782c <__swsetup_r+0x98>
 801783c:	200001d4 	.word	0x200001d4

08017840 <memmove>:
 8017840:	4288      	cmp	r0, r1
 8017842:	b510      	push	{r4, lr}
 8017844:	eb01 0402 	add.w	r4, r1, r2
 8017848:	d902      	bls.n	8017850 <memmove+0x10>
 801784a:	4284      	cmp	r4, r0
 801784c:	4623      	mov	r3, r4
 801784e:	d807      	bhi.n	8017860 <memmove+0x20>
 8017850:	1e43      	subs	r3, r0, #1
 8017852:	42a1      	cmp	r1, r4
 8017854:	d008      	beq.n	8017868 <memmove+0x28>
 8017856:	f811 2b01 	ldrb.w	r2, [r1], #1
 801785a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801785e:	e7f8      	b.n	8017852 <memmove+0x12>
 8017860:	4402      	add	r2, r0
 8017862:	4601      	mov	r1, r0
 8017864:	428a      	cmp	r2, r1
 8017866:	d100      	bne.n	801786a <memmove+0x2a>
 8017868:	bd10      	pop	{r4, pc}
 801786a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801786e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017872:	e7f7      	b.n	8017864 <memmove+0x24>

08017874 <strncmp>:
 8017874:	b510      	push	{r4, lr}
 8017876:	b16a      	cbz	r2, 8017894 <strncmp+0x20>
 8017878:	3901      	subs	r1, #1
 801787a:	1884      	adds	r4, r0, r2
 801787c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017880:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017884:	429a      	cmp	r2, r3
 8017886:	d103      	bne.n	8017890 <strncmp+0x1c>
 8017888:	42a0      	cmp	r0, r4
 801788a:	d001      	beq.n	8017890 <strncmp+0x1c>
 801788c:	2a00      	cmp	r2, #0
 801788e:	d1f5      	bne.n	801787c <strncmp+0x8>
 8017890:	1ad0      	subs	r0, r2, r3
 8017892:	bd10      	pop	{r4, pc}
 8017894:	4610      	mov	r0, r2
 8017896:	e7fc      	b.n	8017892 <strncmp+0x1e>

08017898 <_sbrk_r>:
 8017898:	b538      	push	{r3, r4, r5, lr}
 801789a:	4d06      	ldr	r5, [pc, #24]	@ (80178b4 <_sbrk_r+0x1c>)
 801789c:	2300      	movs	r3, #0
 801789e:	4604      	mov	r4, r0
 80178a0:	4608      	mov	r0, r1
 80178a2:	602b      	str	r3, [r5, #0]
 80178a4:	f7ec fe3e 	bl	8004524 <_sbrk>
 80178a8:	1c43      	adds	r3, r0, #1
 80178aa:	d102      	bne.n	80178b2 <_sbrk_r+0x1a>
 80178ac:	682b      	ldr	r3, [r5, #0]
 80178ae:	b103      	cbz	r3, 80178b2 <_sbrk_r+0x1a>
 80178b0:	6023      	str	r3, [r4, #0]
 80178b2:	bd38      	pop	{r3, r4, r5, pc}
 80178b4:	20004fd4 	.word	0x20004fd4

080178b8 <memcpy>:
 80178b8:	440a      	add	r2, r1
 80178ba:	4291      	cmp	r1, r2
 80178bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80178c0:	d100      	bne.n	80178c4 <memcpy+0xc>
 80178c2:	4770      	bx	lr
 80178c4:	b510      	push	{r4, lr}
 80178c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80178ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80178ce:	4291      	cmp	r1, r2
 80178d0:	d1f9      	bne.n	80178c6 <memcpy+0xe>
 80178d2:	bd10      	pop	{r4, pc}
 80178d4:	0000      	movs	r0, r0
	...

080178d8 <nan>:
 80178d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80178e0 <nan+0x8>
 80178dc:	4770      	bx	lr
 80178de:	bf00      	nop
 80178e0:	00000000 	.word	0x00000000
 80178e4:	7ff80000 	.word	0x7ff80000

080178e8 <__assert_func>:
 80178e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80178ea:	4614      	mov	r4, r2
 80178ec:	461a      	mov	r2, r3
 80178ee:	4b09      	ldr	r3, [pc, #36]	@ (8017914 <__assert_func+0x2c>)
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	4605      	mov	r5, r0
 80178f4:	68d8      	ldr	r0, [r3, #12]
 80178f6:	b954      	cbnz	r4, 801790e <__assert_func+0x26>
 80178f8:	4b07      	ldr	r3, [pc, #28]	@ (8017918 <__assert_func+0x30>)
 80178fa:	461c      	mov	r4, r3
 80178fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017900:	9100      	str	r1, [sp, #0]
 8017902:	462b      	mov	r3, r5
 8017904:	4905      	ldr	r1, [pc, #20]	@ (801791c <__assert_func+0x34>)
 8017906:	f000 fba7 	bl	8018058 <fiprintf>
 801790a:	f000 fc3b 	bl	8018184 <abort>
 801790e:	4b04      	ldr	r3, [pc, #16]	@ (8017920 <__assert_func+0x38>)
 8017910:	e7f4      	b.n	80178fc <__assert_func+0x14>
 8017912:	bf00      	nop
 8017914:	200001d4 	.word	0x200001d4
 8017918:	08025f85 	.word	0x08025f85
 801791c:	08025f57 	.word	0x08025f57
 8017920:	08025f4a 	.word	0x08025f4a

08017924 <_calloc_r>:
 8017924:	b570      	push	{r4, r5, r6, lr}
 8017926:	fba1 5402 	umull	r5, r4, r1, r2
 801792a:	b93c      	cbnz	r4, 801793c <_calloc_r+0x18>
 801792c:	4629      	mov	r1, r5
 801792e:	f7fd ffeb 	bl	8015908 <_malloc_r>
 8017932:	4606      	mov	r6, r0
 8017934:	b928      	cbnz	r0, 8017942 <_calloc_r+0x1e>
 8017936:	2600      	movs	r6, #0
 8017938:	4630      	mov	r0, r6
 801793a:	bd70      	pop	{r4, r5, r6, pc}
 801793c:	220c      	movs	r2, #12
 801793e:	6002      	str	r2, [r0, #0]
 8017940:	e7f9      	b.n	8017936 <_calloc_r+0x12>
 8017942:	462a      	mov	r2, r5
 8017944:	4621      	mov	r1, r4
 8017946:	f7fd f898 	bl	8014a7a <memset>
 801794a:	e7f5      	b.n	8017938 <_calloc_r+0x14>

0801794c <rshift>:
 801794c:	6903      	ldr	r3, [r0, #16]
 801794e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017952:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017956:	ea4f 1261 	mov.w	r2, r1, asr #5
 801795a:	f100 0414 	add.w	r4, r0, #20
 801795e:	dd45      	ble.n	80179ec <rshift+0xa0>
 8017960:	f011 011f 	ands.w	r1, r1, #31
 8017964:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017968:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801796c:	d10c      	bne.n	8017988 <rshift+0x3c>
 801796e:	f100 0710 	add.w	r7, r0, #16
 8017972:	4629      	mov	r1, r5
 8017974:	42b1      	cmp	r1, r6
 8017976:	d334      	bcc.n	80179e2 <rshift+0x96>
 8017978:	1a9b      	subs	r3, r3, r2
 801797a:	009b      	lsls	r3, r3, #2
 801797c:	1eea      	subs	r2, r5, #3
 801797e:	4296      	cmp	r6, r2
 8017980:	bf38      	it	cc
 8017982:	2300      	movcc	r3, #0
 8017984:	4423      	add	r3, r4
 8017986:	e015      	b.n	80179b4 <rshift+0x68>
 8017988:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801798c:	f1c1 0820 	rsb	r8, r1, #32
 8017990:	40cf      	lsrs	r7, r1
 8017992:	f105 0e04 	add.w	lr, r5, #4
 8017996:	46a1      	mov	r9, r4
 8017998:	4576      	cmp	r6, lr
 801799a:	46f4      	mov	ip, lr
 801799c:	d815      	bhi.n	80179ca <rshift+0x7e>
 801799e:	1a9a      	subs	r2, r3, r2
 80179a0:	0092      	lsls	r2, r2, #2
 80179a2:	3a04      	subs	r2, #4
 80179a4:	3501      	adds	r5, #1
 80179a6:	42ae      	cmp	r6, r5
 80179a8:	bf38      	it	cc
 80179aa:	2200      	movcc	r2, #0
 80179ac:	18a3      	adds	r3, r4, r2
 80179ae:	50a7      	str	r7, [r4, r2]
 80179b0:	b107      	cbz	r7, 80179b4 <rshift+0x68>
 80179b2:	3304      	adds	r3, #4
 80179b4:	1b1a      	subs	r2, r3, r4
 80179b6:	42a3      	cmp	r3, r4
 80179b8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80179bc:	bf08      	it	eq
 80179be:	2300      	moveq	r3, #0
 80179c0:	6102      	str	r2, [r0, #16]
 80179c2:	bf08      	it	eq
 80179c4:	6143      	streq	r3, [r0, #20]
 80179c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80179ca:	f8dc c000 	ldr.w	ip, [ip]
 80179ce:	fa0c fc08 	lsl.w	ip, ip, r8
 80179d2:	ea4c 0707 	orr.w	r7, ip, r7
 80179d6:	f849 7b04 	str.w	r7, [r9], #4
 80179da:	f85e 7b04 	ldr.w	r7, [lr], #4
 80179de:	40cf      	lsrs	r7, r1
 80179e0:	e7da      	b.n	8017998 <rshift+0x4c>
 80179e2:	f851 cb04 	ldr.w	ip, [r1], #4
 80179e6:	f847 cf04 	str.w	ip, [r7, #4]!
 80179ea:	e7c3      	b.n	8017974 <rshift+0x28>
 80179ec:	4623      	mov	r3, r4
 80179ee:	e7e1      	b.n	80179b4 <rshift+0x68>

080179f0 <__hexdig_fun>:
 80179f0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80179f4:	2b09      	cmp	r3, #9
 80179f6:	d802      	bhi.n	80179fe <__hexdig_fun+0xe>
 80179f8:	3820      	subs	r0, #32
 80179fa:	b2c0      	uxtb	r0, r0
 80179fc:	4770      	bx	lr
 80179fe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8017a02:	2b05      	cmp	r3, #5
 8017a04:	d801      	bhi.n	8017a0a <__hexdig_fun+0x1a>
 8017a06:	3847      	subs	r0, #71	@ 0x47
 8017a08:	e7f7      	b.n	80179fa <__hexdig_fun+0xa>
 8017a0a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8017a0e:	2b05      	cmp	r3, #5
 8017a10:	d801      	bhi.n	8017a16 <__hexdig_fun+0x26>
 8017a12:	3827      	subs	r0, #39	@ 0x27
 8017a14:	e7f1      	b.n	80179fa <__hexdig_fun+0xa>
 8017a16:	2000      	movs	r0, #0
 8017a18:	4770      	bx	lr
	...

08017a1c <__gethex>:
 8017a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a20:	b085      	sub	sp, #20
 8017a22:	468a      	mov	sl, r1
 8017a24:	9302      	str	r3, [sp, #8]
 8017a26:	680b      	ldr	r3, [r1, #0]
 8017a28:	9001      	str	r0, [sp, #4]
 8017a2a:	4690      	mov	r8, r2
 8017a2c:	1c9c      	adds	r4, r3, #2
 8017a2e:	46a1      	mov	r9, r4
 8017a30:	f814 0b01 	ldrb.w	r0, [r4], #1
 8017a34:	2830      	cmp	r0, #48	@ 0x30
 8017a36:	d0fa      	beq.n	8017a2e <__gethex+0x12>
 8017a38:	eba9 0303 	sub.w	r3, r9, r3
 8017a3c:	f1a3 0b02 	sub.w	fp, r3, #2
 8017a40:	f7ff ffd6 	bl	80179f0 <__hexdig_fun>
 8017a44:	4605      	mov	r5, r0
 8017a46:	2800      	cmp	r0, #0
 8017a48:	d168      	bne.n	8017b1c <__gethex+0x100>
 8017a4a:	49a0      	ldr	r1, [pc, #640]	@ (8017ccc <__gethex+0x2b0>)
 8017a4c:	2201      	movs	r2, #1
 8017a4e:	4648      	mov	r0, r9
 8017a50:	f7ff ff10 	bl	8017874 <strncmp>
 8017a54:	4607      	mov	r7, r0
 8017a56:	2800      	cmp	r0, #0
 8017a58:	d167      	bne.n	8017b2a <__gethex+0x10e>
 8017a5a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8017a5e:	4626      	mov	r6, r4
 8017a60:	f7ff ffc6 	bl	80179f0 <__hexdig_fun>
 8017a64:	2800      	cmp	r0, #0
 8017a66:	d062      	beq.n	8017b2e <__gethex+0x112>
 8017a68:	4623      	mov	r3, r4
 8017a6a:	7818      	ldrb	r0, [r3, #0]
 8017a6c:	2830      	cmp	r0, #48	@ 0x30
 8017a6e:	4699      	mov	r9, r3
 8017a70:	f103 0301 	add.w	r3, r3, #1
 8017a74:	d0f9      	beq.n	8017a6a <__gethex+0x4e>
 8017a76:	f7ff ffbb 	bl	80179f0 <__hexdig_fun>
 8017a7a:	fab0 f580 	clz	r5, r0
 8017a7e:	096d      	lsrs	r5, r5, #5
 8017a80:	f04f 0b01 	mov.w	fp, #1
 8017a84:	464a      	mov	r2, r9
 8017a86:	4616      	mov	r6, r2
 8017a88:	3201      	adds	r2, #1
 8017a8a:	7830      	ldrb	r0, [r6, #0]
 8017a8c:	f7ff ffb0 	bl	80179f0 <__hexdig_fun>
 8017a90:	2800      	cmp	r0, #0
 8017a92:	d1f8      	bne.n	8017a86 <__gethex+0x6a>
 8017a94:	498d      	ldr	r1, [pc, #564]	@ (8017ccc <__gethex+0x2b0>)
 8017a96:	2201      	movs	r2, #1
 8017a98:	4630      	mov	r0, r6
 8017a9a:	f7ff feeb 	bl	8017874 <strncmp>
 8017a9e:	2800      	cmp	r0, #0
 8017aa0:	d13f      	bne.n	8017b22 <__gethex+0x106>
 8017aa2:	b944      	cbnz	r4, 8017ab6 <__gethex+0x9a>
 8017aa4:	1c74      	adds	r4, r6, #1
 8017aa6:	4622      	mov	r2, r4
 8017aa8:	4616      	mov	r6, r2
 8017aaa:	3201      	adds	r2, #1
 8017aac:	7830      	ldrb	r0, [r6, #0]
 8017aae:	f7ff ff9f 	bl	80179f0 <__hexdig_fun>
 8017ab2:	2800      	cmp	r0, #0
 8017ab4:	d1f8      	bne.n	8017aa8 <__gethex+0x8c>
 8017ab6:	1ba4      	subs	r4, r4, r6
 8017ab8:	00a7      	lsls	r7, r4, #2
 8017aba:	7833      	ldrb	r3, [r6, #0]
 8017abc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8017ac0:	2b50      	cmp	r3, #80	@ 0x50
 8017ac2:	d13e      	bne.n	8017b42 <__gethex+0x126>
 8017ac4:	7873      	ldrb	r3, [r6, #1]
 8017ac6:	2b2b      	cmp	r3, #43	@ 0x2b
 8017ac8:	d033      	beq.n	8017b32 <__gethex+0x116>
 8017aca:	2b2d      	cmp	r3, #45	@ 0x2d
 8017acc:	d034      	beq.n	8017b38 <__gethex+0x11c>
 8017ace:	1c71      	adds	r1, r6, #1
 8017ad0:	2400      	movs	r4, #0
 8017ad2:	7808      	ldrb	r0, [r1, #0]
 8017ad4:	f7ff ff8c 	bl	80179f0 <__hexdig_fun>
 8017ad8:	1e43      	subs	r3, r0, #1
 8017ada:	b2db      	uxtb	r3, r3
 8017adc:	2b18      	cmp	r3, #24
 8017ade:	d830      	bhi.n	8017b42 <__gethex+0x126>
 8017ae0:	f1a0 0210 	sub.w	r2, r0, #16
 8017ae4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017ae8:	f7ff ff82 	bl	80179f0 <__hexdig_fun>
 8017aec:	f100 3cff 	add.w	ip, r0, #4294967295
 8017af0:	fa5f fc8c 	uxtb.w	ip, ip
 8017af4:	f1bc 0f18 	cmp.w	ip, #24
 8017af8:	f04f 030a 	mov.w	r3, #10
 8017afc:	d91e      	bls.n	8017b3c <__gethex+0x120>
 8017afe:	b104      	cbz	r4, 8017b02 <__gethex+0xe6>
 8017b00:	4252      	negs	r2, r2
 8017b02:	4417      	add	r7, r2
 8017b04:	f8ca 1000 	str.w	r1, [sl]
 8017b08:	b1ed      	cbz	r5, 8017b46 <__gethex+0x12a>
 8017b0a:	f1bb 0f00 	cmp.w	fp, #0
 8017b0e:	bf0c      	ite	eq
 8017b10:	2506      	moveq	r5, #6
 8017b12:	2500      	movne	r5, #0
 8017b14:	4628      	mov	r0, r5
 8017b16:	b005      	add	sp, #20
 8017b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b1c:	2500      	movs	r5, #0
 8017b1e:	462c      	mov	r4, r5
 8017b20:	e7b0      	b.n	8017a84 <__gethex+0x68>
 8017b22:	2c00      	cmp	r4, #0
 8017b24:	d1c7      	bne.n	8017ab6 <__gethex+0x9a>
 8017b26:	4627      	mov	r7, r4
 8017b28:	e7c7      	b.n	8017aba <__gethex+0x9e>
 8017b2a:	464e      	mov	r6, r9
 8017b2c:	462f      	mov	r7, r5
 8017b2e:	2501      	movs	r5, #1
 8017b30:	e7c3      	b.n	8017aba <__gethex+0x9e>
 8017b32:	2400      	movs	r4, #0
 8017b34:	1cb1      	adds	r1, r6, #2
 8017b36:	e7cc      	b.n	8017ad2 <__gethex+0xb6>
 8017b38:	2401      	movs	r4, #1
 8017b3a:	e7fb      	b.n	8017b34 <__gethex+0x118>
 8017b3c:	fb03 0002 	mla	r0, r3, r2, r0
 8017b40:	e7ce      	b.n	8017ae0 <__gethex+0xc4>
 8017b42:	4631      	mov	r1, r6
 8017b44:	e7de      	b.n	8017b04 <__gethex+0xe8>
 8017b46:	eba6 0309 	sub.w	r3, r6, r9
 8017b4a:	3b01      	subs	r3, #1
 8017b4c:	4629      	mov	r1, r5
 8017b4e:	2b07      	cmp	r3, #7
 8017b50:	dc0a      	bgt.n	8017b68 <__gethex+0x14c>
 8017b52:	9801      	ldr	r0, [sp, #4]
 8017b54:	f7fd ff64 	bl	8015a20 <_Balloc>
 8017b58:	4604      	mov	r4, r0
 8017b5a:	b940      	cbnz	r0, 8017b6e <__gethex+0x152>
 8017b5c:	4b5c      	ldr	r3, [pc, #368]	@ (8017cd0 <__gethex+0x2b4>)
 8017b5e:	4602      	mov	r2, r0
 8017b60:	21e4      	movs	r1, #228	@ 0xe4
 8017b62:	485c      	ldr	r0, [pc, #368]	@ (8017cd4 <__gethex+0x2b8>)
 8017b64:	f7ff fec0 	bl	80178e8 <__assert_func>
 8017b68:	3101      	adds	r1, #1
 8017b6a:	105b      	asrs	r3, r3, #1
 8017b6c:	e7ef      	b.n	8017b4e <__gethex+0x132>
 8017b6e:	f100 0a14 	add.w	sl, r0, #20
 8017b72:	2300      	movs	r3, #0
 8017b74:	4655      	mov	r5, sl
 8017b76:	469b      	mov	fp, r3
 8017b78:	45b1      	cmp	r9, r6
 8017b7a:	d337      	bcc.n	8017bec <__gethex+0x1d0>
 8017b7c:	f845 bb04 	str.w	fp, [r5], #4
 8017b80:	eba5 050a 	sub.w	r5, r5, sl
 8017b84:	10ad      	asrs	r5, r5, #2
 8017b86:	6125      	str	r5, [r4, #16]
 8017b88:	4658      	mov	r0, fp
 8017b8a:	f7fe f83b 	bl	8015c04 <__hi0bits>
 8017b8e:	016d      	lsls	r5, r5, #5
 8017b90:	f8d8 6000 	ldr.w	r6, [r8]
 8017b94:	1a2d      	subs	r5, r5, r0
 8017b96:	42b5      	cmp	r5, r6
 8017b98:	dd54      	ble.n	8017c44 <__gethex+0x228>
 8017b9a:	1bad      	subs	r5, r5, r6
 8017b9c:	4629      	mov	r1, r5
 8017b9e:	4620      	mov	r0, r4
 8017ba0:	f7fe fbcf 	bl	8016342 <__any_on>
 8017ba4:	4681      	mov	r9, r0
 8017ba6:	b178      	cbz	r0, 8017bc8 <__gethex+0x1ac>
 8017ba8:	1e6b      	subs	r3, r5, #1
 8017baa:	1159      	asrs	r1, r3, #5
 8017bac:	f003 021f 	and.w	r2, r3, #31
 8017bb0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8017bb4:	f04f 0901 	mov.w	r9, #1
 8017bb8:	fa09 f202 	lsl.w	r2, r9, r2
 8017bbc:	420a      	tst	r2, r1
 8017bbe:	d003      	beq.n	8017bc8 <__gethex+0x1ac>
 8017bc0:	454b      	cmp	r3, r9
 8017bc2:	dc36      	bgt.n	8017c32 <__gethex+0x216>
 8017bc4:	f04f 0902 	mov.w	r9, #2
 8017bc8:	4629      	mov	r1, r5
 8017bca:	4620      	mov	r0, r4
 8017bcc:	f7ff febe 	bl	801794c <rshift>
 8017bd0:	442f      	add	r7, r5
 8017bd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017bd6:	42bb      	cmp	r3, r7
 8017bd8:	da42      	bge.n	8017c60 <__gethex+0x244>
 8017bda:	9801      	ldr	r0, [sp, #4]
 8017bdc:	4621      	mov	r1, r4
 8017bde:	f7fd ff5f 	bl	8015aa0 <_Bfree>
 8017be2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017be4:	2300      	movs	r3, #0
 8017be6:	6013      	str	r3, [r2, #0]
 8017be8:	25a3      	movs	r5, #163	@ 0xa3
 8017bea:	e793      	b.n	8017b14 <__gethex+0xf8>
 8017bec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8017bf0:	2a2e      	cmp	r2, #46	@ 0x2e
 8017bf2:	d012      	beq.n	8017c1a <__gethex+0x1fe>
 8017bf4:	2b20      	cmp	r3, #32
 8017bf6:	d104      	bne.n	8017c02 <__gethex+0x1e6>
 8017bf8:	f845 bb04 	str.w	fp, [r5], #4
 8017bfc:	f04f 0b00 	mov.w	fp, #0
 8017c00:	465b      	mov	r3, fp
 8017c02:	7830      	ldrb	r0, [r6, #0]
 8017c04:	9303      	str	r3, [sp, #12]
 8017c06:	f7ff fef3 	bl	80179f0 <__hexdig_fun>
 8017c0a:	9b03      	ldr	r3, [sp, #12]
 8017c0c:	f000 000f 	and.w	r0, r0, #15
 8017c10:	4098      	lsls	r0, r3
 8017c12:	ea4b 0b00 	orr.w	fp, fp, r0
 8017c16:	3304      	adds	r3, #4
 8017c18:	e7ae      	b.n	8017b78 <__gethex+0x15c>
 8017c1a:	45b1      	cmp	r9, r6
 8017c1c:	d8ea      	bhi.n	8017bf4 <__gethex+0x1d8>
 8017c1e:	492b      	ldr	r1, [pc, #172]	@ (8017ccc <__gethex+0x2b0>)
 8017c20:	9303      	str	r3, [sp, #12]
 8017c22:	2201      	movs	r2, #1
 8017c24:	4630      	mov	r0, r6
 8017c26:	f7ff fe25 	bl	8017874 <strncmp>
 8017c2a:	9b03      	ldr	r3, [sp, #12]
 8017c2c:	2800      	cmp	r0, #0
 8017c2e:	d1e1      	bne.n	8017bf4 <__gethex+0x1d8>
 8017c30:	e7a2      	b.n	8017b78 <__gethex+0x15c>
 8017c32:	1ea9      	subs	r1, r5, #2
 8017c34:	4620      	mov	r0, r4
 8017c36:	f7fe fb84 	bl	8016342 <__any_on>
 8017c3a:	2800      	cmp	r0, #0
 8017c3c:	d0c2      	beq.n	8017bc4 <__gethex+0x1a8>
 8017c3e:	f04f 0903 	mov.w	r9, #3
 8017c42:	e7c1      	b.n	8017bc8 <__gethex+0x1ac>
 8017c44:	da09      	bge.n	8017c5a <__gethex+0x23e>
 8017c46:	1b75      	subs	r5, r6, r5
 8017c48:	4621      	mov	r1, r4
 8017c4a:	9801      	ldr	r0, [sp, #4]
 8017c4c:	462a      	mov	r2, r5
 8017c4e:	f7fe f93f 	bl	8015ed0 <__lshift>
 8017c52:	1b7f      	subs	r7, r7, r5
 8017c54:	4604      	mov	r4, r0
 8017c56:	f100 0a14 	add.w	sl, r0, #20
 8017c5a:	f04f 0900 	mov.w	r9, #0
 8017c5e:	e7b8      	b.n	8017bd2 <__gethex+0x1b6>
 8017c60:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017c64:	42bd      	cmp	r5, r7
 8017c66:	dd6f      	ble.n	8017d48 <__gethex+0x32c>
 8017c68:	1bed      	subs	r5, r5, r7
 8017c6a:	42ae      	cmp	r6, r5
 8017c6c:	dc34      	bgt.n	8017cd8 <__gethex+0x2bc>
 8017c6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017c72:	2b02      	cmp	r3, #2
 8017c74:	d022      	beq.n	8017cbc <__gethex+0x2a0>
 8017c76:	2b03      	cmp	r3, #3
 8017c78:	d024      	beq.n	8017cc4 <__gethex+0x2a8>
 8017c7a:	2b01      	cmp	r3, #1
 8017c7c:	d115      	bne.n	8017caa <__gethex+0x28e>
 8017c7e:	42ae      	cmp	r6, r5
 8017c80:	d113      	bne.n	8017caa <__gethex+0x28e>
 8017c82:	2e01      	cmp	r6, #1
 8017c84:	d10b      	bne.n	8017c9e <__gethex+0x282>
 8017c86:	9a02      	ldr	r2, [sp, #8]
 8017c88:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017c8c:	6013      	str	r3, [r2, #0]
 8017c8e:	2301      	movs	r3, #1
 8017c90:	6123      	str	r3, [r4, #16]
 8017c92:	f8ca 3000 	str.w	r3, [sl]
 8017c96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017c98:	2562      	movs	r5, #98	@ 0x62
 8017c9a:	601c      	str	r4, [r3, #0]
 8017c9c:	e73a      	b.n	8017b14 <__gethex+0xf8>
 8017c9e:	1e71      	subs	r1, r6, #1
 8017ca0:	4620      	mov	r0, r4
 8017ca2:	f7fe fb4e 	bl	8016342 <__any_on>
 8017ca6:	2800      	cmp	r0, #0
 8017ca8:	d1ed      	bne.n	8017c86 <__gethex+0x26a>
 8017caa:	9801      	ldr	r0, [sp, #4]
 8017cac:	4621      	mov	r1, r4
 8017cae:	f7fd fef7 	bl	8015aa0 <_Bfree>
 8017cb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017cb4:	2300      	movs	r3, #0
 8017cb6:	6013      	str	r3, [r2, #0]
 8017cb8:	2550      	movs	r5, #80	@ 0x50
 8017cba:	e72b      	b.n	8017b14 <__gethex+0xf8>
 8017cbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d1f3      	bne.n	8017caa <__gethex+0x28e>
 8017cc2:	e7e0      	b.n	8017c86 <__gethex+0x26a>
 8017cc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d1dd      	bne.n	8017c86 <__gethex+0x26a>
 8017cca:	e7ee      	b.n	8017caa <__gethex+0x28e>
 8017ccc:	08025dd8 	.word	0x08025dd8
 8017cd0:	08025c71 	.word	0x08025c71
 8017cd4:	08025f86 	.word	0x08025f86
 8017cd8:	1e6f      	subs	r7, r5, #1
 8017cda:	f1b9 0f00 	cmp.w	r9, #0
 8017cde:	d130      	bne.n	8017d42 <__gethex+0x326>
 8017ce0:	b127      	cbz	r7, 8017cec <__gethex+0x2d0>
 8017ce2:	4639      	mov	r1, r7
 8017ce4:	4620      	mov	r0, r4
 8017ce6:	f7fe fb2c 	bl	8016342 <__any_on>
 8017cea:	4681      	mov	r9, r0
 8017cec:	117a      	asrs	r2, r7, #5
 8017cee:	2301      	movs	r3, #1
 8017cf0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8017cf4:	f007 071f 	and.w	r7, r7, #31
 8017cf8:	40bb      	lsls	r3, r7
 8017cfa:	4213      	tst	r3, r2
 8017cfc:	4629      	mov	r1, r5
 8017cfe:	4620      	mov	r0, r4
 8017d00:	bf18      	it	ne
 8017d02:	f049 0902 	orrne.w	r9, r9, #2
 8017d06:	f7ff fe21 	bl	801794c <rshift>
 8017d0a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8017d0e:	1b76      	subs	r6, r6, r5
 8017d10:	2502      	movs	r5, #2
 8017d12:	f1b9 0f00 	cmp.w	r9, #0
 8017d16:	d047      	beq.n	8017da8 <__gethex+0x38c>
 8017d18:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017d1c:	2b02      	cmp	r3, #2
 8017d1e:	d015      	beq.n	8017d4c <__gethex+0x330>
 8017d20:	2b03      	cmp	r3, #3
 8017d22:	d017      	beq.n	8017d54 <__gethex+0x338>
 8017d24:	2b01      	cmp	r3, #1
 8017d26:	d109      	bne.n	8017d3c <__gethex+0x320>
 8017d28:	f019 0f02 	tst.w	r9, #2
 8017d2c:	d006      	beq.n	8017d3c <__gethex+0x320>
 8017d2e:	f8da 3000 	ldr.w	r3, [sl]
 8017d32:	ea49 0903 	orr.w	r9, r9, r3
 8017d36:	f019 0f01 	tst.w	r9, #1
 8017d3a:	d10e      	bne.n	8017d5a <__gethex+0x33e>
 8017d3c:	f045 0510 	orr.w	r5, r5, #16
 8017d40:	e032      	b.n	8017da8 <__gethex+0x38c>
 8017d42:	f04f 0901 	mov.w	r9, #1
 8017d46:	e7d1      	b.n	8017cec <__gethex+0x2d0>
 8017d48:	2501      	movs	r5, #1
 8017d4a:	e7e2      	b.n	8017d12 <__gethex+0x2f6>
 8017d4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017d4e:	f1c3 0301 	rsb	r3, r3, #1
 8017d52:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017d54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d0f0      	beq.n	8017d3c <__gethex+0x320>
 8017d5a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017d5e:	f104 0314 	add.w	r3, r4, #20
 8017d62:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8017d66:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8017d6a:	f04f 0c00 	mov.w	ip, #0
 8017d6e:	4618      	mov	r0, r3
 8017d70:	f853 2b04 	ldr.w	r2, [r3], #4
 8017d74:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017d78:	d01b      	beq.n	8017db2 <__gethex+0x396>
 8017d7a:	3201      	adds	r2, #1
 8017d7c:	6002      	str	r2, [r0, #0]
 8017d7e:	2d02      	cmp	r5, #2
 8017d80:	f104 0314 	add.w	r3, r4, #20
 8017d84:	d13c      	bne.n	8017e00 <__gethex+0x3e4>
 8017d86:	f8d8 2000 	ldr.w	r2, [r8]
 8017d8a:	3a01      	subs	r2, #1
 8017d8c:	42b2      	cmp	r2, r6
 8017d8e:	d109      	bne.n	8017da4 <__gethex+0x388>
 8017d90:	1171      	asrs	r1, r6, #5
 8017d92:	2201      	movs	r2, #1
 8017d94:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017d98:	f006 061f 	and.w	r6, r6, #31
 8017d9c:	fa02 f606 	lsl.w	r6, r2, r6
 8017da0:	421e      	tst	r6, r3
 8017da2:	d13a      	bne.n	8017e1a <__gethex+0x3fe>
 8017da4:	f045 0520 	orr.w	r5, r5, #32
 8017da8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017daa:	601c      	str	r4, [r3, #0]
 8017dac:	9b02      	ldr	r3, [sp, #8]
 8017dae:	601f      	str	r7, [r3, #0]
 8017db0:	e6b0      	b.n	8017b14 <__gethex+0xf8>
 8017db2:	4299      	cmp	r1, r3
 8017db4:	f843 cc04 	str.w	ip, [r3, #-4]
 8017db8:	d8d9      	bhi.n	8017d6e <__gethex+0x352>
 8017dba:	68a3      	ldr	r3, [r4, #8]
 8017dbc:	459b      	cmp	fp, r3
 8017dbe:	db17      	blt.n	8017df0 <__gethex+0x3d4>
 8017dc0:	6861      	ldr	r1, [r4, #4]
 8017dc2:	9801      	ldr	r0, [sp, #4]
 8017dc4:	3101      	adds	r1, #1
 8017dc6:	f7fd fe2b 	bl	8015a20 <_Balloc>
 8017dca:	4681      	mov	r9, r0
 8017dcc:	b918      	cbnz	r0, 8017dd6 <__gethex+0x3ba>
 8017dce:	4b1a      	ldr	r3, [pc, #104]	@ (8017e38 <__gethex+0x41c>)
 8017dd0:	4602      	mov	r2, r0
 8017dd2:	2184      	movs	r1, #132	@ 0x84
 8017dd4:	e6c5      	b.n	8017b62 <__gethex+0x146>
 8017dd6:	6922      	ldr	r2, [r4, #16]
 8017dd8:	3202      	adds	r2, #2
 8017dda:	f104 010c 	add.w	r1, r4, #12
 8017dde:	0092      	lsls	r2, r2, #2
 8017de0:	300c      	adds	r0, #12
 8017de2:	f7ff fd69 	bl	80178b8 <memcpy>
 8017de6:	4621      	mov	r1, r4
 8017de8:	9801      	ldr	r0, [sp, #4]
 8017dea:	f7fd fe59 	bl	8015aa0 <_Bfree>
 8017dee:	464c      	mov	r4, r9
 8017df0:	6923      	ldr	r3, [r4, #16]
 8017df2:	1c5a      	adds	r2, r3, #1
 8017df4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017df8:	6122      	str	r2, [r4, #16]
 8017dfa:	2201      	movs	r2, #1
 8017dfc:	615a      	str	r2, [r3, #20]
 8017dfe:	e7be      	b.n	8017d7e <__gethex+0x362>
 8017e00:	6922      	ldr	r2, [r4, #16]
 8017e02:	455a      	cmp	r2, fp
 8017e04:	dd0b      	ble.n	8017e1e <__gethex+0x402>
 8017e06:	2101      	movs	r1, #1
 8017e08:	4620      	mov	r0, r4
 8017e0a:	f7ff fd9f 	bl	801794c <rshift>
 8017e0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017e12:	3701      	adds	r7, #1
 8017e14:	42bb      	cmp	r3, r7
 8017e16:	f6ff aee0 	blt.w	8017bda <__gethex+0x1be>
 8017e1a:	2501      	movs	r5, #1
 8017e1c:	e7c2      	b.n	8017da4 <__gethex+0x388>
 8017e1e:	f016 061f 	ands.w	r6, r6, #31
 8017e22:	d0fa      	beq.n	8017e1a <__gethex+0x3fe>
 8017e24:	4453      	add	r3, sl
 8017e26:	f1c6 0620 	rsb	r6, r6, #32
 8017e2a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8017e2e:	f7fd fee9 	bl	8015c04 <__hi0bits>
 8017e32:	42b0      	cmp	r0, r6
 8017e34:	dbe7      	blt.n	8017e06 <__gethex+0x3ea>
 8017e36:	e7f0      	b.n	8017e1a <__gethex+0x3fe>
 8017e38:	08025c71 	.word	0x08025c71

08017e3c <L_shift>:
 8017e3c:	f1c2 0208 	rsb	r2, r2, #8
 8017e40:	0092      	lsls	r2, r2, #2
 8017e42:	b570      	push	{r4, r5, r6, lr}
 8017e44:	f1c2 0620 	rsb	r6, r2, #32
 8017e48:	6843      	ldr	r3, [r0, #4]
 8017e4a:	6804      	ldr	r4, [r0, #0]
 8017e4c:	fa03 f506 	lsl.w	r5, r3, r6
 8017e50:	432c      	orrs	r4, r5
 8017e52:	40d3      	lsrs	r3, r2
 8017e54:	6004      	str	r4, [r0, #0]
 8017e56:	f840 3f04 	str.w	r3, [r0, #4]!
 8017e5a:	4288      	cmp	r0, r1
 8017e5c:	d3f4      	bcc.n	8017e48 <L_shift+0xc>
 8017e5e:	bd70      	pop	{r4, r5, r6, pc}

08017e60 <__match>:
 8017e60:	b530      	push	{r4, r5, lr}
 8017e62:	6803      	ldr	r3, [r0, #0]
 8017e64:	3301      	adds	r3, #1
 8017e66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017e6a:	b914      	cbnz	r4, 8017e72 <__match+0x12>
 8017e6c:	6003      	str	r3, [r0, #0]
 8017e6e:	2001      	movs	r0, #1
 8017e70:	bd30      	pop	{r4, r5, pc}
 8017e72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017e76:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8017e7a:	2d19      	cmp	r5, #25
 8017e7c:	bf98      	it	ls
 8017e7e:	3220      	addls	r2, #32
 8017e80:	42a2      	cmp	r2, r4
 8017e82:	d0f0      	beq.n	8017e66 <__match+0x6>
 8017e84:	2000      	movs	r0, #0
 8017e86:	e7f3      	b.n	8017e70 <__match+0x10>

08017e88 <__hexnan>:
 8017e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e8c:	680b      	ldr	r3, [r1, #0]
 8017e8e:	6801      	ldr	r1, [r0, #0]
 8017e90:	115e      	asrs	r6, r3, #5
 8017e92:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8017e96:	f013 031f 	ands.w	r3, r3, #31
 8017e9a:	b087      	sub	sp, #28
 8017e9c:	bf18      	it	ne
 8017e9e:	3604      	addne	r6, #4
 8017ea0:	2500      	movs	r5, #0
 8017ea2:	1f37      	subs	r7, r6, #4
 8017ea4:	4682      	mov	sl, r0
 8017ea6:	4690      	mov	r8, r2
 8017ea8:	9301      	str	r3, [sp, #4]
 8017eaa:	f846 5c04 	str.w	r5, [r6, #-4]
 8017eae:	46b9      	mov	r9, r7
 8017eb0:	463c      	mov	r4, r7
 8017eb2:	9502      	str	r5, [sp, #8]
 8017eb4:	46ab      	mov	fp, r5
 8017eb6:	784a      	ldrb	r2, [r1, #1]
 8017eb8:	1c4b      	adds	r3, r1, #1
 8017eba:	9303      	str	r3, [sp, #12]
 8017ebc:	b342      	cbz	r2, 8017f10 <__hexnan+0x88>
 8017ebe:	4610      	mov	r0, r2
 8017ec0:	9105      	str	r1, [sp, #20]
 8017ec2:	9204      	str	r2, [sp, #16]
 8017ec4:	f7ff fd94 	bl	80179f0 <__hexdig_fun>
 8017ec8:	2800      	cmp	r0, #0
 8017eca:	d151      	bne.n	8017f70 <__hexnan+0xe8>
 8017ecc:	9a04      	ldr	r2, [sp, #16]
 8017ece:	9905      	ldr	r1, [sp, #20]
 8017ed0:	2a20      	cmp	r2, #32
 8017ed2:	d818      	bhi.n	8017f06 <__hexnan+0x7e>
 8017ed4:	9b02      	ldr	r3, [sp, #8]
 8017ed6:	459b      	cmp	fp, r3
 8017ed8:	dd13      	ble.n	8017f02 <__hexnan+0x7a>
 8017eda:	454c      	cmp	r4, r9
 8017edc:	d206      	bcs.n	8017eec <__hexnan+0x64>
 8017ede:	2d07      	cmp	r5, #7
 8017ee0:	dc04      	bgt.n	8017eec <__hexnan+0x64>
 8017ee2:	462a      	mov	r2, r5
 8017ee4:	4649      	mov	r1, r9
 8017ee6:	4620      	mov	r0, r4
 8017ee8:	f7ff ffa8 	bl	8017e3c <L_shift>
 8017eec:	4544      	cmp	r4, r8
 8017eee:	d952      	bls.n	8017f96 <__hexnan+0x10e>
 8017ef0:	2300      	movs	r3, #0
 8017ef2:	f1a4 0904 	sub.w	r9, r4, #4
 8017ef6:	f844 3c04 	str.w	r3, [r4, #-4]
 8017efa:	f8cd b008 	str.w	fp, [sp, #8]
 8017efe:	464c      	mov	r4, r9
 8017f00:	461d      	mov	r5, r3
 8017f02:	9903      	ldr	r1, [sp, #12]
 8017f04:	e7d7      	b.n	8017eb6 <__hexnan+0x2e>
 8017f06:	2a29      	cmp	r2, #41	@ 0x29
 8017f08:	d157      	bne.n	8017fba <__hexnan+0x132>
 8017f0a:	3102      	adds	r1, #2
 8017f0c:	f8ca 1000 	str.w	r1, [sl]
 8017f10:	f1bb 0f00 	cmp.w	fp, #0
 8017f14:	d051      	beq.n	8017fba <__hexnan+0x132>
 8017f16:	454c      	cmp	r4, r9
 8017f18:	d206      	bcs.n	8017f28 <__hexnan+0xa0>
 8017f1a:	2d07      	cmp	r5, #7
 8017f1c:	dc04      	bgt.n	8017f28 <__hexnan+0xa0>
 8017f1e:	462a      	mov	r2, r5
 8017f20:	4649      	mov	r1, r9
 8017f22:	4620      	mov	r0, r4
 8017f24:	f7ff ff8a 	bl	8017e3c <L_shift>
 8017f28:	4544      	cmp	r4, r8
 8017f2a:	d936      	bls.n	8017f9a <__hexnan+0x112>
 8017f2c:	f1a8 0204 	sub.w	r2, r8, #4
 8017f30:	4623      	mov	r3, r4
 8017f32:	f853 1b04 	ldr.w	r1, [r3], #4
 8017f36:	f842 1f04 	str.w	r1, [r2, #4]!
 8017f3a:	429f      	cmp	r7, r3
 8017f3c:	d2f9      	bcs.n	8017f32 <__hexnan+0xaa>
 8017f3e:	1b3b      	subs	r3, r7, r4
 8017f40:	f023 0303 	bic.w	r3, r3, #3
 8017f44:	3304      	adds	r3, #4
 8017f46:	3401      	adds	r4, #1
 8017f48:	3e03      	subs	r6, #3
 8017f4a:	42b4      	cmp	r4, r6
 8017f4c:	bf88      	it	hi
 8017f4e:	2304      	movhi	r3, #4
 8017f50:	4443      	add	r3, r8
 8017f52:	2200      	movs	r2, #0
 8017f54:	f843 2b04 	str.w	r2, [r3], #4
 8017f58:	429f      	cmp	r7, r3
 8017f5a:	d2fb      	bcs.n	8017f54 <__hexnan+0xcc>
 8017f5c:	683b      	ldr	r3, [r7, #0]
 8017f5e:	b91b      	cbnz	r3, 8017f68 <__hexnan+0xe0>
 8017f60:	4547      	cmp	r7, r8
 8017f62:	d128      	bne.n	8017fb6 <__hexnan+0x12e>
 8017f64:	2301      	movs	r3, #1
 8017f66:	603b      	str	r3, [r7, #0]
 8017f68:	2005      	movs	r0, #5
 8017f6a:	b007      	add	sp, #28
 8017f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f70:	3501      	adds	r5, #1
 8017f72:	2d08      	cmp	r5, #8
 8017f74:	f10b 0b01 	add.w	fp, fp, #1
 8017f78:	dd06      	ble.n	8017f88 <__hexnan+0x100>
 8017f7a:	4544      	cmp	r4, r8
 8017f7c:	d9c1      	bls.n	8017f02 <__hexnan+0x7a>
 8017f7e:	2300      	movs	r3, #0
 8017f80:	f844 3c04 	str.w	r3, [r4, #-4]
 8017f84:	2501      	movs	r5, #1
 8017f86:	3c04      	subs	r4, #4
 8017f88:	6822      	ldr	r2, [r4, #0]
 8017f8a:	f000 000f 	and.w	r0, r0, #15
 8017f8e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017f92:	6020      	str	r0, [r4, #0]
 8017f94:	e7b5      	b.n	8017f02 <__hexnan+0x7a>
 8017f96:	2508      	movs	r5, #8
 8017f98:	e7b3      	b.n	8017f02 <__hexnan+0x7a>
 8017f9a:	9b01      	ldr	r3, [sp, #4]
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d0dd      	beq.n	8017f5c <__hexnan+0xd4>
 8017fa0:	f1c3 0320 	rsb	r3, r3, #32
 8017fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8017fa8:	40da      	lsrs	r2, r3
 8017faa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8017fae:	4013      	ands	r3, r2
 8017fb0:	f846 3c04 	str.w	r3, [r6, #-4]
 8017fb4:	e7d2      	b.n	8017f5c <__hexnan+0xd4>
 8017fb6:	3f04      	subs	r7, #4
 8017fb8:	e7d0      	b.n	8017f5c <__hexnan+0xd4>
 8017fba:	2004      	movs	r0, #4
 8017fbc:	e7d5      	b.n	8017f6a <__hexnan+0xe2>

08017fbe <__ascii_mbtowc>:
 8017fbe:	b082      	sub	sp, #8
 8017fc0:	b901      	cbnz	r1, 8017fc4 <__ascii_mbtowc+0x6>
 8017fc2:	a901      	add	r1, sp, #4
 8017fc4:	b142      	cbz	r2, 8017fd8 <__ascii_mbtowc+0x1a>
 8017fc6:	b14b      	cbz	r3, 8017fdc <__ascii_mbtowc+0x1e>
 8017fc8:	7813      	ldrb	r3, [r2, #0]
 8017fca:	600b      	str	r3, [r1, #0]
 8017fcc:	7812      	ldrb	r2, [r2, #0]
 8017fce:	1e10      	subs	r0, r2, #0
 8017fd0:	bf18      	it	ne
 8017fd2:	2001      	movne	r0, #1
 8017fd4:	b002      	add	sp, #8
 8017fd6:	4770      	bx	lr
 8017fd8:	4610      	mov	r0, r2
 8017fda:	e7fb      	b.n	8017fd4 <__ascii_mbtowc+0x16>
 8017fdc:	f06f 0001 	mvn.w	r0, #1
 8017fe0:	e7f8      	b.n	8017fd4 <__ascii_mbtowc+0x16>

08017fe2 <_realloc_r>:
 8017fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fe6:	4680      	mov	r8, r0
 8017fe8:	4615      	mov	r5, r2
 8017fea:	460c      	mov	r4, r1
 8017fec:	b921      	cbnz	r1, 8017ff8 <_realloc_r+0x16>
 8017fee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017ff2:	4611      	mov	r1, r2
 8017ff4:	f7fd bc88 	b.w	8015908 <_malloc_r>
 8017ff8:	b92a      	cbnz	r2, 8018006 <_realloc_r+0x24>
 8017ffa:	f7fd fc11 	bl	8015820 <_free_r>
 8017ffe:	2400      	movs	r4, #0
 8018000:	4620      	mov	r0, r4
 8018002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018006:	f000 f8c4 	bl	8018192 <_malloc_usable_size_r>
 801800a:	4285      	cmp	r5, r0
 801800c:	4606      	mov	r6, r0
 801800e:	d802      	bhi.n	8018016 <_realloc_r+0x34>
 8018010:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8018014:	d8f4      	bhi.n	8018000 <_realloc_r+0x1e>
 8018016:	4629      	mov	r1, r5
 8018018:	4640      	mov	r0, r8
 801801a:	f7fd fc75 	bl	8015908 <_malloc_r>
 801801e:	4607      	mov	r7, r0
 8018020:	2800      	cmp	r0, #0
 8018022:	d0ec      	beq.n	8017ffe <_realloc_r+0x1c>
 8018024:	42b5      	cmp	r5, r6
 8018026:	462a      	mov	r2, r5
 8018028:	4621      	mov	r1, r4
 801802a:	bf28      	it	cs
 801802c:	4632      	movcs	r2, r6
 801802e:	f7ff fc43 	bl	80178b8 <memcpy>
 8018032:	4621      	mov	r1, r4
 8018034:	4640      	mov	r0, r8
 8018036:	f7fd fbf3 	bl	8015820 <_free_r>
 801803a:	463c      	mov	r4, r7
 801803c:	e7e0      	b.n	8018000 <_realloc_r+0x1e>

0801803e <__ascii_wctomb>:
 801803e:	4603      	mov	r3, r0
 8018040:	4608      	mov	r0, r1
 8018042:	b141      	cbz	r1, 8018056 <__ascii_wctomb+0x18>
 8018044:	2aff      	cmp	r2, #255	@ 0xff
 8018046:	d904      	bls.n	8018052 <__ascii_wctomb+0x14>
 8018048:	228a      	movs	r2, #138	@ 0x8a
 801804a:	601a      	str	r2, [r3, #0]
 801804c:	f04f 30ff 	mov.w	r0, #4294967295
 8018050:	4770      	bx	lr
 8018052:	700a      	strb	r2, [r1, #0]
 8018054:	2001      	movs	r0, #1
 8018056:	4770      	bx	lr

08018058 <fiprintf>:
 8018058:	b40e      	push	{r1, r2, r3}
 801805a:	b503      	push	{r0, r1, lr}
 801805c:	4601      	mov	r1, r0
 801805e:	ab03      	add	r3, sp, #12
 8018060:	4805      	ldr	r0, [pc, #20]	@ (8018078 <fiprintf+0x20>)
 8018062:	f853 2b04 	ldr.w	r2, [r3], #4
 8018066:	6800      	ldr	r0, [r0, #0]
 8018068:	9301      	str	r3, [sp, #4]
 801806a:	f7ff f991 	bl	8017390 <_vfiprintf_r>
 801806e:	b002      	add	sp, #8
 8018070:	f85d eb04 	ldr.w	lr, [sp], #4
 8018074:	b003      	add	sp, #12
 8018076:	4770      	bx	lr
 8018078:	200001d4 	.word	0x200001d4

0801807c <__swhatbuf_r>:
 801807c:	b570      	push	{r4, r5, r6, lr}
 801807e:	460c      	mov	r4, r1
 8018080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018084:	2900      	cmp	r1, #0
 8018086:	b096      	sub	sp, #88	@ 0x58
 8018088:	4615      	mov	r5, r2
 801808a:	461e      	mov	r6, r3
 801808c:	da0d      	bge.n	80180aa <__swhatbuf_r+0x2e>
 801808e:	89a3      	ldrh	r3, [r4, #12]
 8018090:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018094:	f04f 0100 	mov.w	r1, #0
 8018098:	bf14      	ite	ne
 801809a:	2340      	movne	r3, #64	@ 0x40
 801809c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80180a0:	2000      	movs	r0, #0
 80180a2:	6031      	str	r1, [r6, #0]
 80180a4:	602b      	str	r3, [r5, #0]
 80180a6:	b016      	add	sp, #88	@ 0x58
 80180a8:	bd70      	pop	{r4, r5, r6, pc}
 80180aa:	466a      	mov	r2, sp
 80180ac:	f000 f848 	bl	8018140 <_fstat_r>
 80180b0:	2800      	cmp	r0, #0
 80180b2:	dbec      	blt.n	801808e <__swhatbuf_r+0x12>
 80180b4:	9901      	ldr	r1, [sp, #4]
 80180b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80180ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80180be:	4259      	negs	r1, r3
 80180c0:	4159      	adcs	r1, r3
 80180c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80180c6:	e7eb      	b.n	80180a0 <__swhatbuf_r+0x24>

080180c8 <__smakebuf_r>:
 80180c8:	898b      	ldrh	r3, [r1, #12]
 80180ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80180cc:	079d      	lsls	r5, r3, #30
 80180ce:	4606      	mov	r6, r0
 80180d0:	460c      	mov	r4, r1
 80180d2:	d507      	bpl.n	80180e4 <__smakebuf_r+0x1c>
 80180d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80180d8:	6023      	str	r3, [r4, #0]
 80180da:	6123      	str	r3, [r4, #16]
 80180dc:	2301      	movs	r3, #1
 80180de:	6163      	str	r3, [r4, #20]
 80180e0:	b003      	add	sp, #12
 80180e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80180e4:	ab01      	add	r3, sp, #4
 80180e6:	466a      	mov	r2, sp
 80180e8:	f7ff ffc8 	bl	801807c <__swhatbuf_r>
 80180ec:	9f00      	ldr	r7, [sp, #0]
 80180ee:	4605      	mov	r5, r0
 80180f0:	4639      	mov	r1, r7
 80180f2:	4630      	mov	r0, r6
 80180f4:	f7fd fc08 	bl	8015908 <_malloc_r>
 80180f8:	b948      	cbnz	r0, 801810e <__smakebuf_r+0x46>
 80180fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80180fe:	059a      	lsls	r2, r3, #22
 8018100:	d4ee      	bmi.n	80180e0 <__smakebuf_r+0x18>
 8018102:	f023 0303 	bic.w	r3, r3, #3
 8018106:	f043 0302 	orr.w	r3, r3, #2
 801810a:	81a3      	strh	r3, [r4, #12]
 801810c:	e7e2      	b.n	80180d4 <__smakebuf_r+0xc>
 801810e:	89a3      	ldrh	r3, [r4, #12]
 8018110:	6020      	str	r0, [r4, #0]
 8018112:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018116:	81a3      	strh	r3, [r4, #12]
 8018118:	9b01      	ldr	r3, [sp, #4]
 801811a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801811e:	b15b      	cbz	r3, 8018138 <__smakebuf_r+0x70>
 8018120:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018124:	4630      	mov	r0, r6
 8018126:	f000 f81d 	bl	8018164 <_isatty_r>
 801812a:	b128      	cbz	r0, 8018138 <__smakebuf_r+0x70>
 801812c:	89a3      	ldrh	r3, [r4, #12]
 801812e:	f023 0303 	bic.w	r3, r3, #3
 8018132:	f043 0301 	orr.w	r3, r3, #1
 8018136:	81a3      	strh	r3, [r4, #12]
 8018138:	89a3      	ldrh	r3, [r4, #12]
 801813a:	431d      	orrs	r5, r3
 801813c:	81a5      	strh	r5, [r4, #12]
 801813e:	e7cf      	b.n	80180e0 <__smakebuf_r+0x18>

08018140 <_fstat_r>:
 8018140:	b538      	push	{r3, r4, r5, lr}
 8018142:	4d07      	ldr	r5, [pc, #28]	@ (8018160 <_fstat_r+0x20>)
 8018144:	2300      	movs	r3, #0
 8018146:	4604      	mov	r4, r0
 8018148:	4608      	mov	r0, r1
 801814a:	4611      	mov	r1, r2
 801814c:	602b      	str	r3, [r5, #0]
 801814e:	f7ec f9c1 	bl	80044d4 <_fstat>
 8018152:	1c43      	adds	r3, r0, #1
 8018154:	d102      	bne.n	801815c <_fstat_r+0x1c>
 8018156:	682b      	ldr	r3, [r5, #0]
 8018158:	b103      	cbz	r3, 801815c <_fstat_r+0x1c>
 801815a:	6023      	str	r3, [r4, #0]
 801815c:	bd38      	pop	{r3, r4, r5, pc}
 801815e:	bf00      	nop
 8018160:	20004fd4 	.word	0x20004fd4

08018164 <_isatty_r>:
 8018164:	b538      	push	{r3, r4, r5, lr}
 8018166:	4d06      	ldr	r5, [pc, #24]	@ (8018180 <_isatty_r+0x1c>)
 8018168:	2300      	movs	r3, #0
 801816a:	4604      	mov	r4, r0
 801816c:	4608      	mov	r0, r1
 801816e:	602b      	str	r3, [r5, #0]
 8018170:	f7ec f9c0 	bl	80044f4 <_isatty>
 8018174:	1c43      	adds	r3, r0, #1
 8018176:	d102      	bne.n	801817e <_isatty_r+0x1a>
 8018178:	682b      	ldr	r3, [r5, #0]
 801817a:	b103      	cbz	r3, 801817e <_isatty_r+0x1a>
 801817c:	6023      	str	r3, [r4, #0]
 801817e:	bd38      	pop	{r3, r4, r5, pc}
 8018180:	20004fd4 	.word	0x20004fd4

08018184 <abort>:
 8018184:	b508      	push	{r3, lr}
 8018186:	2006      	movs	r0, #6
 8018188:	f000 f834 	bl	80181f4 <raise>
 801818c:	2001      	movs	r0, #1
 801818e:	f7ec f951 	bl	8004434 <_exit>

08018192 <_malloc_usable_size_r>:
 8018192:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018196:	1f18      	subs	r0, r3, #4
 8018198:	2b00      	cmp	r3, #0
 801819a:	bfbc      	itt	lt
 801819c:	580b      	ldrlt	r3, [r1, r0]
 801819e:	18c0      	addlt	r0, r0, r3
 80181a0:	4770      	bx	lr

080181a2 <_raise_r>:
 80181a2:	291f      	cmp	r1, #31
 80181a4:	b538      	push	{r3, r4, r5, lr}
 80181a6:	4605      	mov	r5, r0
 80181a8:	460c      	mov	r4, r1
 80181aa:	d904      	bls.n	80181b6 <_raise_r+0x14>
 80181ac:	2316      	movs	r3, #22
 80181ae:	6003      	str	r3, [r0, #0]
 80181b0:	f04f 30ff 	mov.w	r0, #4294967295
 80181b4:	bd38      	pop	{r3, r4, r5, pc}
 80181b6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80181b8:	b112      	cbz	r2, 80181c0 <_raise_r+0x1e>
 80181ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80181be:	b94b      	cbnz	r3, 80181d4 <_raise_r+0x32>
 80181c0:	4628      	mov	r0, r5
 80181c2:	f000 f831 	bl	8018228 <_getpid_r>
 80181c6:	4622      	mov	r2, r4
 80181c8:	4601      	mov	r1, r0
 80181ca:	4628      	mov	r0, r5
 80181cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80181d0:	f000 b818 	b.w	8018204 <_kill_r>
 80181d4:	2b01      	cmp	r3, #1
 80181d6:	d00a      	beq.n	80181ee <_raise_r+0x4c>
 80181d8:	1c59      	adds	r1, r3, #1
 80181da:	d103      	bne.n	80181e4 <_raise_r+0x42>
 80181dc:	2316      	movs	r3, #22
 80181de:	6003      	str	r3, [r0, #0]
 80181e0:	2001      	movs	r0, #1
 80181e2:	e7e7      	b.n	80181b4 <_raise_r+0x12>
 80181e4:	2100      	movs	r1, #0
 80181e6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80181ea:	4620      	mov	r0, r4
 80181ec:	4798      	blx	r3
 80181ee:	2000      	movs	r0, #0
 80181f0:	e7e0      	b.n	80181b4 <_raise_r+0x12>
	...

080181f4 <raise>:
 80181f4:	4b02      	ldr	r3, [pc, #8]	@ (8018200 <raise+0xc>)
 80181f6:	4601      	mov	r1, r0
 80181f8:	6818      	ldr	r0, [r3, #0]
 80181fa:	f7ff bfd2 	b.w	80181a2 <_raise_r>
 80181fe:	bf00      	nop
 8018200:	200001d4 	.word	0x200001d4

08018204 <_kill_r>:
 8018204:	b538      	push	{r3, r4, r5, lr}
 8018206:	4d07      	ldr	r5, [pc, #28]	@ (8018224 <_kill_r+0x20>)
 8018208:	2300      	movs	r3, #0
 801820a:	4604      	mov	r4, r0
 801820c:	4608      	mov	r0, r1
 801820e:	4611      	mov	r1, r2
 8018210:	602b      	str	r3, [r5, #0]
 8018212:	f7ec f8ff 	bl	8004414 <_kill>
 8018216:	1c43      	adds	r3, r0, #1
 8018218:	d102      	bne.n	8018220 <_kill_r+0x1c>
 801821a:	682b      	ldr	r3, [r5, #0]
 801821c:	b103      	cbz	r3, 8018220 <_kill_r+0x1c>
 801821e:	6023      	str	r3, [r4, #0]
 8018220:	bd38      	pop	{r3, r4, r5, pc}
 8018222:	bf00      	nop
 8018224:	20004fd4 	.word	0x20004fd4

08018228 <_getpid_r>:
 8018228:	f7ec b8ec 	b.w	8004404 <_getpid>

0801822c <_init>:
 801822c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801822e:	bf00      	nop
 8018230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018232:	bc08      	pop	{r3}
 8018234:	469e      	mov	lr, r3
 8018236:	4770      	bx	lr

08018238 <_fini>:
 8018238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801823a:	bf00      	nop
 801823c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801823e:	bc08      	pop	{r3}
 8018240:	469e      	mov	lr, r3
 8018242:	4770      	bx	lr
