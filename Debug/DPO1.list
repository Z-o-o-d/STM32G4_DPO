
DPO1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016bcc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e0e0  08016db0  08016db0  00017db0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024e90  08024e90  00026394  2**0
                  CONTENTS
  4 .ARM          00000008  08024e90  08024e90  00025e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024e98  08024e98  00026394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024e98  08024e98  00025e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08024e9c  08024e9c  00025e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000394  20000000  08024ea0  00026000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003b18  20000394  08025234  00026394  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003eac  08025234  00026eac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00026394  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d115  00000000  00000000  000263c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005e2e  00000000  00000000  000534d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025d8  00000000  00000000  00059308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d2b  00000000  00000000  0005b8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030933  00000000  00000000  0005d60b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031680  00000000  00000000  0008df3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012abda  00000000  00000000  000bf5be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ea198  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b730  00000000  00000000  001ea1dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  001f590c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000394 	.word	0x20000394
 80001fc:	00000000 	.word	0x00000000
 8000200:	08016d94 	.word	0x08016d94

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000398 	.word	0x20000398
 800021c:	08016d94 	.word	0x08016d94

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <TLC5952_WriteBit>:
/**
 * @brief 发送单个 bit
 * @param bit 0 或 1
 */
void TLC5952_WriteBit(uint8_t bit)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
    if (bit)
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d005      	beq.n	8001050 <TLC5952_WriteBit+0x1c>
        TLC5952_SIN_HIGH();
 8001044:	2201      	movs	r2, #1
 8001046:	2120      	movs	r1, #32
 8001048:	480b      	ldr	r0, [pc, #44]	@ (8001078 <TLC5952_WriteBit+0x44>)
 800104a:	f006 fd85 	bl	8007b58 <HAL_GPIO_WritePin>
 800104e:	e004      	b.n	800105a <TLC5952_WriteBit+0x26>
    else
        TLC5952_SIN_LOW();
 8001050:	2200      	movs	r2, #0
 8001052:	2120      	movs	r1, #32
 8001054:	4808      	ldr	r0, [pc, #32]	@ (8001078 <TLC5952_WriteBit+0x44>)
 8001056:	f006 fd7f 	bl	8007b58 <HAL_GPIO_WritePin>

    TLC5952_SCLK_HIGH();
 800105a:	2201      	movs	r2, #1
 800105c:	2108      	movs	r1, #8
 800105e:	4806      	ldr	r0, [pc, #24]	@ (8001078 <TLC5952_WriteBit+0x44>)
 8001060:	f006 fd7a 	bl	8007b58 <HAL_GPIO_WritePin>
    TLC5952_SCLK_LOW();
 8001064:	2200      	movs	r2, #0
 8001066:	2108      	movs	r1, #8
 8001068:	4803      	ldr	r0, [pc, #12]	@ (8001078 <TLC5952_WriteBit+0x44>)
 800106a:	f006 fd75 	bl	8007b58 <HAL_GPIO_WritePin>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	48000400 	.word	0x48000400

0800107c <TLC5952_WriteLED>:

/**
 * @brief 发送 24 位 LED 数据
 */
void TLC5952_WriteLED(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
    TLC5952_WriteBit(0);
 8001082:	2000      	movs	r0, #0
 8001084:	f7ff ffd6 	bl	8001034 <TLC5952_WriteBit>
    uint32_t *data = (uint32_t *)&allData;
 8001088:	4b15      	ldr	r3, [pc, #84]	@ (80010e0 <TLC5952_WriteLED+0x64>)
 800108a:	60bb      	str	r3, [r7, #8]
    for (int8_t i = 23; i >= 0; i--)
 800108c:	2317      	movs	r3, #23
 800108e:	73fb      	strb	r3, [r7, #15]
 8001090:	e013      	b.n	80010ba <TLC5952_WriteLED+0x3e>
    {
        uint8_t currentBit = (*data >> i) & 0x01;
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109a:	fa22 f303 	lsr.w	r3, r2, r3
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	71fb      	strb	r3, [r7, #7]
        TLC5952_WriteBit(currentBit);
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ffc3 	bl	8001034 <TLC5952_WriteBit>
    for (int8_t i = 23; i >= 0; i--)
 80010ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	3b01      	subs	r3, #1
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	73fb      	strb	r3, [r7, #15]
 80010ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	dae7      	bge.n	8001092 <TLC5952_WriteLED+0x16>
    }
    TLC5952_LAT_HIGH();
 80010c2:	2201      	movs	r2, #1
 80010c4:	2110      	movs	r1, #16
 80010c6:	4807      	ldr	r0, [pc, #28]	@ (80010e4 <TLC5952_WriteLED+0x68>)
 80010c8:	f006 fd46 	bl	8007b58 <HAL_GPIO_WritePin>
    TLC5952_LAT_LOW();
 80010cc:	2200      	movs	r2, #0
 80010ce:	2110      	movs	r1, #16
 80010d0:	4804      	ldr	r0, [pc, #16]	@ (80010e4 <TLC5952_WriteLED+0x68>)
 80010d2:	f006 fd41 	bl	8007b58 <HAL_GPIO_WritePin>
}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200003b0 	.word	0x200003b0
 80010e4:	48000400 	.word	0x48000400

080010e8 <TLC5952_WriteControl>:


/**
 * @brief 发送 24 位 控制 数据
 */
void TLC5952_WriteControl(void) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
    TLC5952_WriteBit(1);
 80010ee:	2001      	movs	r0, #1
 80010f0:	f7ff ffa0 	bl	8001034 <TLC5952_WriteBit>
    for (int i = 6; i >= 0; i--) {
 80010f4:	2306      	movs	r3, #6
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	e012      	b.n	8001120 <TLC5952_WriteControl+0x38>
        TLC5952_WriteBit((allData.red_brightness >> i) & 0x01);
 80010fa:	4b37      	ldr	r3, [pc, #220]	@ (80011d8 <TLC5952_WriteControl+0xf0>)
 80010fc:	78db      	ldrb	r3, [r3, #3]
 80010fe:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001102:	b2db      	uxtb	r3, r3
 8001104:	461a      	mov	r2, r3
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	fa42 f303 	asr.w	r3, r2, r3
 800110c:	b2db      	uxtb	r3, r3
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	b2db      	uxtb	r3, r3
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff8d 	bl	8001034 <TLC5952_WriteBit>
    for (int i = 6; i >= 0; i--) {
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	3b01      	subs	r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2b00      	cmp	r3, #0
 8001124:	dae9      	bge.n	80010fa <TLC5952_WriteControl+0x12>
    }
    for (int i = 6; i >= 0; i--) {
 8001126:	2306      	movs	r3, #6
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	e012      	b.n	8001152 <TLC5952_WriteControl+0x6a>
        TLC5952_WriteBit((allData.green_brightness >> i) & 0x01);
 800112c:	4b2a      	ldr	r3, [pc, #168]	@ (80011d8 <TLC5952_WriteControl+0xf0>)
 800112e:	791b      	ldrb	r3, [r3, #4]
 8001130:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001134:	b2db      	uxtb	r3, r3
 8001136:	461a      	mov	r2, r3
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	fa42 f303 	asr.w	r3, r2, r3
 800113e:	b2db      	uxtb	r3, r3
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	b2db      	uxtb	r3, r3
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff ff74 	bl	8001034 <TLC5952_WriteBit>
    for (int i = 6; i >= 0; i--) {
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	3b01      	subs	r3, #1
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	2b00      	cmp	r3, #0
 8001156:	dae9      	bge.n	800112c <TLC5952_WriteControl+0x44>
    }
    for (int i = 6; i >= 0; i--) {
 8001158:	2306      	movs	r3, #6
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	e012      	b.n	8001184 <TLC5952_WriteControl+0x9c>
        TLC5952_WriteBit((allData.blue_brightness >> i) & 0x01);
 800115e:	4b1e      	ldr	r3, [pc, #120]	@ (80011d8 <TLC5952_WriteControl+0xf0>)
 8001160:	889b      	ldrh	r3, [r3, #4]
 8001162:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 8001166:	b2db      	uxtb	r3, r3
 8001168:	461a      	mov	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	fa42 f303 	asr.w	r3, r2, r3
 8001170:	b2db      	uxtb	r3, r3
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	b2db      	uxtb	r3, r3
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff5b 	bl	8001034 <TLC5952_WriteBit>
    for (int i = 6; i >= 0; i--) {
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3b01      	subs	r3, #1
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	dae9      	bge.n	800115e <TLC5952_WriteControl+0x76>
    }
    for (int i = 2; i >= 0; i--) {
 800118a:	2302      	movs	r3, #2
 800118c:	603b      	str	r3, [r7, #0]
 800118e:	e012      	b.n	80011b6 <TLC5952_WriteControl+0xce>
        TLC5952_WriteBit((allData.detection_voltage_select >> i) & 0x01);
 8001190:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <TLC5952_WriteControl+0xf0>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f3c3 3382 	ubfx	r3, r3, #14, #3
 8001198:	b2db      	uxtb	r3, r3
 800119a:	461a      	mov	r2, r3
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	fa42 f303 	asr.w	r3, r2, r3
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff42 	bl	8001034 <TLC5952_WriteBit>
    for (int i = 2; i >= 0; i--) {
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	dae9      	bge.n	8001190 <TLC5952_WriteControl+0xa8>
    }
    TLC5952_LAT_HIGH();
 80011bc:	2201      	movs	r2, #1
 80011be:	2110      	movs	r1, #16
 80011c0:	4806      	ldr	r0, [pc, #24]	@ (80011dc <TLC5952_WriteControl+0xf4>)
 80011c2:	f006 fcc9 	bl	8007b58 <HAL_GPIO_WritePin>
    TLC5952_LAT_LOW();
 80011c6:	2200      	movs	r2, #0
 80011c8:	2110      	movs	r1, #16
 80011ca:	4804      	ldr	r0, [pc, #16]	@ (80011dc <TLC5952_WriteControl+0xf4>)
 80011cc:	f006 fcc4 	bl	8007b58 <HAL_GPIO_WritePin>
}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	200003b0 	.word	0x200003b0
 80011dc:	48000400 	.word	0x48000400

080011e0 <FT6336_ReadRegister>:

HAL_StatusTypeDef FT6336_WriteRegister( uint8_t RegAddress, uint8_t *pData, uint16_t Size) {
    return HAL_I2C_Mem_Write(&FT6336_I2C_PORT, FT6X36_ADDR, RegAddress, I2C_MEMADD_SIZE_8BIT, pData, Size, HAL_MAX_DELAY);
}

HAL_StatusTypeDef FT6336_ReadRegister( uint8_t RegAddress, uint8_t *pData, uint16_t Size) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af04      	add	r7, sp, #16
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]
 80011ec:	4613      	mov	r3, r2
 80011ee:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Read(&FT6336_I2C_PORT, FT6X36_ADDR, RegAddress, I2C_MEMADD_SIZE_8BIT, pData, Size, HAL_MAX_DELAY);
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	f04f 33ff 	mov.w	r3, #4294967295
 80011f8:	9302      	str	r3, [sp, #8]
 80011fa:	88bb      	ldrh	r3, [r7, #4]
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2301      	movs	r3, #1
 8001204:	2170      	movs	r1, #112	@ 0x70
 8001206:	4804      	ldr	r0, [pc, #16]	@ (8001218 <FT6336_ReadRegister+0x38>)
 8001208:	f006 fd7c 	bl	8007d04 <HAL_I2C_Mem_Read>
 800120c:	4603      	mov	r3, r0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000648 	.word	0x20000648

0800121c <FT6336_Init>:

void FT6336_Init(void) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
    FT6336_RST_L;
 8001222:	2200      	movs	r2, #0
 8001224:	2104      	movs	r1, #4
 8001226:	480f      	ldr	r0, [pc, #60]	@ (8001264 <FT6336_Init+0x48>)
 8001228:	f006 fc96 	bl	8007b58 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800122c:	200a      	movs	r0, #10
 800122e:	f003 f8e3 	bl	80043f8 <HAL_Delay>
    FT6336_RST_H;
 8001232:	2201      	movs	r2, #1
 8001234:	2104      	movs	r1, #4
 8001236:	480b      	ldr	r0, [pc, #44]	@ (8001264 <FT6336_Init+0x48>)
 8001238:	f006 fc8e 	bl	8007b58 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800123c:	2032      	movs	r0, #50	@ 0x32
 800123e:	f003 f8db 	bl	80043f8 <HAL_Delay>
//    FT6336_WriteRegister(0x00, 0x00,1);
//
//    // 设置 ID_G_MODE 为 0x00（启用中断输出）
//    FT6336_WriteRegister(0xA4, 0x00,1);

    uint8_t id = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	71fb      	strb	r3, [r7, #7]
    FT6336_ReadRegister(FT6336_FOCALTECH_ID, &id, 1);
 8001246:	1dfb      	adds	r3, r7, #7
 8001248:	2201      	movs	r2, #1
 800124a:	4619      	mov	r1, r3
 800124c:	20a8      	movs	r0, #168	@ 0xa8
 800124e:	f7ff ffc7 	bl	80011e0 <FT6336_ReadRegister>
    HAL_Delay(1000);
 8001252:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001256:	f003 f8cf 	bl	80043f8 <HAL_Delay>
//    HAL_Delay(1000);
    //used to debug IIC



}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	48000c00 	.word	0x48000c00

08001268 <AdjustTouchCoordinates>:

static void AdjustTouchCoordinates(uint16_t *x, uint16_t *y) {
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
    uint16_t rawX = *x;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	81fb      	strh	r3, [r7, #14]
    uint16_t rawY = *y;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	81bb      	strh	r3, [r7, #12]
//
//    *x = (*x * SCREEN_WIDTH) / TOUCH_WIDTH;
//    *y = (*y * SCREEN_HEIGHT) / TOUCH_HEIGHT;

    // 情况 X：特殊处理
    *x = rawY;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	89ba      	ldrh	r2, [r7, #12]
 8001282:	801a      	strh	r2, [r3, #0]
    *y = SCREEN_HEIGHT-rawX;
 8001284:	89fb      	ldrh	r3, [r7, #14]
 8001286:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800128a:	b29a      	uxth	r2, r3
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	801a      	strh	r2, [r3, #0]
}
 8001290:	bf00      	nop
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <FT6336_GetTouchPoint>:





void FT6336_GetTouchPoint(TouchPoints_HandleTypeDef *touchPoints) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
    uint8_t touchStatus = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	73bb      	strb	r3, [r7, #14]
    uint8_t touchData[4];  // 存储两个点的坐标数据 (每个点4个字节)

    // 读取触摸状态寄存器
    FT6336_ReadRegister(FT6336_TD_STATUS, &touchStatus, 1);
 80012a8:	f107 030e 	add.w	r3, r7, #14
 80012ac:	2201      	movs	r2, #1
 80012ae:	4619      	mov	r1, r3
 80012b0:	2002      	movs	r0, #2
 80012b2:	f7ff ff95 	bl	80011e0 <FT6336_ReadRegister>
    uint8_t touchCount = touchStatus & 0x0F;  // 获取触摸点数量
 80012b6:	7bbb      	ldrb	r3, [r7, #14]
 80012b8:	f003 030f 	and.w	r3, r3, #15
 80012bc:	73fb      	strb	r3, [r7, #15]

    if (touchCount > 0) {
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d054      	beq.n	800136e <FT6336_GetTouchPoint+0xd2>
        // 读取第一个触摸点的坐标 (4个字节)
    	FT6336_ReadRegister(FT6336_P1_XH, touchData, 4);
 80012c4:	f107 0308 	add.w	r3, r7, #8
 80012c8:	2204      	movs	r2, #4
 80012ca:	4619      	mov	r1, r3
 80012cc:	2003      	movs	r0, #3
 80012ce:	f7ff ff87 	bl	80011e0 <FT6336_ReadRegister>
        touchPoints->point1_x = ((touchData[0] & 0x0F) << 8) | touchData[1];
 80012d2:	7a3b      	ldrb	r3, [r7, #8]
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	b21b      	sxth	r3, r3
 80012d8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80012dc:	b21a      	sxth	r2, r3
 80012de:	7a7b      	ldrb	r3, [r7, #9]
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	4313      	orrs	r3, r2
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	801a      	strh	r2, [r3, #0]
        touchPoints->point1_y = ((touchData[2] & 0x0F) << 8) | touchData[3];
 80012ec:	7abb      	ldrb	r3, [r7, #10]
 80012ee:	021b      	lsls	r3, r3, #8
 80012f0:	b21b      	sxth	r3, r3
 80012f2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80012f6:	b21a      	sxth	r2, r3
 80012f8:	7afb      	ldrb	r3, [r7, #11]
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	4313      	orrs	r3, r2
 80012fe:	b21b      	sxth	r3, r3
 8001300:	b29a      	uxth	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	805a      	strh	r2, [r3, #2]
        AdjustTouchCoordinates(&touchPoints->point1_x, &touchPoints->point1_y);  // 调整第一个触摸点坐标
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3302      	adds	r3, #2
 800130c:	4619      	mov	r1, r3
 800130e:	4610      	mov	r0, r2
 8001310:	f7ff ffaa 	bl	8001268 <AdjustTouchCoordinates>

        if (touchCount > 1) {
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d929      	bls.n	800136e <FT6336_GetTouchPoint+0xd2>
            // 读取第二个触摸点的坐标 (4个字节)
        	FT6336_ReadRegister(FT6336_P2_XH, &touchData[4], 4);
 800131a:	f107 0308 	add.w	r3, r7, #8
 800131e:	3304      	adds	r3, #4
 8001320:	2204      	movs	r2, #4
 8001322:	4619      	mov	r1, r3
 8001324:	2009      	movs	r0, #9
 8001326:	f7ff ff5b 	bl	80011e0 <FT6336_ReadRegister>
            touchPoints->point2_x = ((touchData[4] & 0x0F) << 8) | touchData[5];
 800132a:	7b3b      	ldrb	r3, [r7, #12]
 800132c:	021b      	lsls	r3, r3, #8
 800132e:	b21b      	sxth	r3, r3
 8001330:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001334:	b21a      	sxth	r2, r3
 8001336:	7b7b      	ldrb	r3, [r7, #13]
 8001338:	b21b      	sxth	r3, r3
 800133a:	4313      	orrs	r3, r2
 800133c:	b21b      	sxth	r3, r3
 800133e:	b29a      	uxth	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	809a      	strh	r2, [r3, #4]
            touchPoints->point2_y = ((touchData[6] & 0x0F) << 8) | touchData[7];
 8001344:	7bbb      	ldrb	r3, [r7, #14]
 8001346:	021b      	lsls	r3, r3, #8
 8001348:	b21b      	sxth	r3, r3
 800134a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800134e:	b21a      	sxth	r2, r3
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	b21b      	sxth	r3, r3
 8001354:	4313      	orrs	r3, r2
 8001356:	b21b      	sxth	r3, r3
 8001358:	b29a      	uxth	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	80da      	strh	r2, [r3, #6]
            AdjustTouchCoordinates(&touchPoints->point2_x, &touchPoints->point2_y);  // 调整第二个触摸点坐标
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	1d1a      	adds	r2, r3, #4
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3306      	adds	r3, #6
 8001366:	4619      	mov	r1, r3
 8001368:	4610      	mov	r0, r2
 800136a:	f7ff ff7d 	bl	8001268 <AdjustTouchCoordinates>
        }
    }
}
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <__io_putchar>:
/* USER CODE BEGIN 0 */



int __io_putchar(int ch)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1 , (uint8_t *)&ch, 1, 0xFFFF);
 8001380:	1d39      	adds	r1, r7, #4
 8001382:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001386:	2201      	movs	r2, #1
 8001388:	4803      	ldr	r0, [pc, #12]	@ (8001398 <__io_putchar+0x20>)
 800138a:	f00c faed 	bl	800d968 <HAL_UART_Transmit>
    return ch;
 800138e:	687b      	ldr	r3, [r7, #4]
};
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	2000069c 	.word	0x2000069c

0800139c <Analog_FE_Update>:
    .CD_CH2 = 0,
    .OFFSET1 = 2200,
    .OFFSET2 = 2200
};

void Analog_FE_Update(void) {
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AC_DC_CH1_GPIO_Port, AC_DC_CH1_Pin, (GPIO_PinState)FEAnalog.AC_DC_CH1);
 80013a0:	4b47      	ldr	r3, [pc, #284]	@ (80014c0 <Analog_FE_Update+0x124>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	461a      	mov	r2, r3
 80013ac:	2120      	movs	r1, #32
 80013ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013b2:	f006 fbd1 	bl	8007b58 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(CD_CH1_A_GPIO_Port, CD_CH1_A_Pin, (GPIO_PinState)((FEAnalog.CD_CH1 >> 0) & 0x01));
 80013b6:	4b42      	ldr	r3, [pc, #264]	@ (80014c0 <Analog_FE_Update+0x124>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	f3c3 0382 	ubfx	r3, r3, #2, #3
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	461a      	mov	r2, r3
 80013c8:	2120      	movs	r1, #32
 80013ca:	483e      	ldr	r0, [pc, #248]	@ (80014c4 <Analog_FE_Update+0x128>)
 80013cc:	f006 fbc4 	bl	8007b58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CD_CH1_B_GPIO_Port, CD_CH1_B_Pin, (GPIO_PinState)((FEAnalog.CD_CH1 >> 1) & 0x01));
 80013d0:	4b3b      	ldr	r3, [pc, #236]	@ (80014c0 <Analog_FE_Update+0x124>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	f3c3 0382 	ubfx	r3, r3, #2, #3
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	105b      	asrs	r3, r3, #1
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	461a      	mov	r2, r3
 80013e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013ea:	4837      	ldr	r0, [pc, #220]	@ (80014c8 <Analog_FE_Update+0x12c>)
 80013ec:	f006 fbb4 	bl	8007b58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CD_CH1_C_GPIO_Port, CD_CH1_C_Pin, (GPIO_PinState)((FEAnalog.CD_CH1 >> 2) & 0x01));
 80013f0:	4b33      	ldr	r3, [pc, #204]	@ (80014c0 <Analog_FE_Update+0x124>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	f3c3 0382 	ubfx	r3, r3, #2, #3
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	109b      	asrs	r3, r3, #2
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	b2db      	uxtb	r3, r3
 8001404:	461a      	mov	r2, r3
 8001406:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800140a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800140e:	f006 fba3 	bl	8007b58 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(AC_DC_CH2_GPIO_Port, AC_DC_CH2_Pin, (GPIO_PinState)FEAnalog.AC_DC_CH2);
 8001412:	4b2b      	ldr	r3, [pc, #172]	@ (80014c0 <Analog_FE_Update+0x124>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800141a:	b2db      	uxtb	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001422:	4828      	ldr	r0, [pc, #160]	@ (80014c4 <Analog_FE_Update+0x128>)
 8001424:	f006 fb98 	bl	8007b58 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(CD_CH2_A_GPIO_Port, CD_CH2_A_Pin, (GPIO_PinState)((FEAnalog.CD_CH2 >> 0) & 0x01));
 8001428:	4b25      	ldr	r3, [pc, #148]	@ (80014c0 <Analog_FE_Update+0x124>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	b2db      	uxtb	r3, r3
 8001438:	461a      	mov	r2, r3
 800143a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800143e:	4821      	ldr	r0, [pc, #132]	@ (80014c4 <Analog_FE_Update+0x128>)
 8001440:	f006 fb8a 	bl	8007b58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CD_CH2_B_GPIO_Port, CD_CH2_B_Pin, (GPIO_PinState)((FEAnalog.CD_CH2 >> 1) & 0x01));
 8001444:	4b1e      	ldr	r3, [pc, #120]	@ (80014c0 <Analog_FE_Update+0x124>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800144c:	b2db      	uxtb	r3, r3
 800144e:	105b      	asrs	r3, r3, #1
 8001450:	b2db      	uxtb	r3, r3
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	b2db      	uxtb	r3, r3
 8001458:	461a      	mov	r2, r3
 800145a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800145e:	4819      	ldr	r0, [pc, #100]	@ (80014c4 <Analog_FE_Update+0x128>)
 8001460:	f006 fb7a 	bl	8007b58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CD_CH2_C_GPIO_Port, CD_CH2_C_Pin, (GPIO_PinState)((FEAnalog.CD_CH2 >> 2) & 0x01));
 8001464:	4b16      	ldr	r3, [pc, #88]	@ (80014c0 <Analog_FE_Update+0x124>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800146c:	b2db      	uxtb	r3, r3
 800146e:	109b      	asrs	r3, r3, #2
 8001470:	b2db      	uxtb	r3, r3
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	b2db      	uxtb	r3, r3
 8001478:	461a      	mov	r2, r3
 800147a:	2102      	movs	r1, #2
 800147c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001480:	f006 fb6a 	bl	8007b58 <HAL_GPIO_WritePin>

	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, FEAnalog.OFFSET1);
 8001484:	4b0e      	ldr	r3, [pc, #56]	@ (80014c0 <Analog_FE_Update+0x124>)
 8001486:	885b      	ldrh	r3, [r3, #2]
 8001488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800148c:	b29b      	uxth	r3, r3
 800148e:	2200      	movs	r2, #0
 8001490:	2100      	movs	r1, #0
 8001492:	480e      	ldr	r0, [pc, #56]	@ (80014cc <Analog_FE_Update+0x130>)
 8001494:	f005 fd84 	bl	8006fa0 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, FEAnalog.OFFSET2);
 8001498:	4b09      	ldr	r3, [pc, #36]	@ (80014c0 <Analog_FE_Update+0x124>)
 800149a:	889b      	ldrh	r3, [r3, #4]
 800149c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	2200      	movs	r2, #0
 80014a4:	2100      	movs	r1, #0
 80014a6:	480a      	ldr	r0, [pc, #40]	@ (80014d0 <Analog_FE_Update+0x134>)
 80014a8:	f005 fd7a 	bl	8006fa0 <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80014ac:	2100      	movs	r1, #0
 80014ae:	4807      	ldr	r0, [pc, #28]	@ (80014cc <Analog_FE_Update+0x130>)
 80014b0:	f005 fd0a 	bl	8006ec8 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 80014b4:	2100      	movs	r1, #0
 80014b6:	4806      	ldr	r0, [pc, #24]	@ (80014d0 <Analog_FE_Update+0x134>)
 80014b8:	f005 fd06 	bl	8006ec8 <HAL_DAC_Start>

}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000010 	.word	0x20000010
 80014c4:	48000800 	.word	0x48000800
 80014c8:	48000400 	.word	0x48000400
 80014cc:	2000060c 	.word	0x2000060c
 80014d0:	20000620 	.word	0x20000620

080014d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014da:	f002 ff1c 	bl	8004316 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014de:	f000 f8b1 	bl	8001644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014e2:	f001 f8ef 	bl	80026c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80014e6:	f001 f8a3 	bl	8002630 <MX_DMA_Init>
  MX_USB_Device_Init();
 80014ea:	f010 fb93 	bl	8011c14 <MX_USB_Device_Init>
  MX_COMP2_Init();
 80014ee:	f000 faab 	bl	8001a48 <MX_COMP2_Init>
  MX_COMP5_Init();
 80014f2:	f000 facf 	bl	8001a94 <MX_COMP5_Init>
  MX_DAC1_Init();
 80014f6:	f000 faf3 	bl	8001ae0 <MX_DAC1_Init>
  MX_DAC2_Init();
 80014fa:	f000 fb3b 	bl	8001b74 <MX_DAC2_Init>
  MX_OPAMP1_Init();
 80014fe:	f000 fc37 	bl	8001d70 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8001502:	f000 fc61 	bl	8001dc8 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8001506:	f000 fc85 	bl	8001e14 <MX_OPAMP3_Init>
  MX_OPAMP6_Init();
 800150a:	f000 fcf5 	bl	8001ef8 <MX_OPAMP6_Init>
  MX_TIM1_Init();
 800150e:	f000 fd5d 	bl	8001fcc <MX_TIM1_Init>
  MX_TIM4_Init();
 8001512:	f000 fe0b 	bl	800212c <MX_TIM4_Init>
  MX_TIM20_Init();
 8001516:	f001 f831 	bl	800257c <MX_TIM20_Init>
  MX_TIM3_Init();
 800151a:	f000 fdb1 	bl	8002080 <MX_TIM3_Init>
  MX_ADC5_Init();
 800151e:	f000 f9c1 	bl	80018a4 <MX_ADC5_Init>
  MX_TIM15_Init();
 8001522:	f000 ff87 	bl	8002434 <MX_TIM15_Init>
  MX_TIM8_Init();
 8001526:	f000 fec3 	bl	80022b0 <MX_TIM8_Init>
  MX_SPI3_Init();
 800152a:	f000 fd11 	bl	8001f50 <MX_SPI3_Init>
  MX_I2C3_Init();
 800152e:	f000 fb95 	bl	8001c5c <MX_I2C3_Init>
  MX_DAC4_Init();
 8001532:	f000 fb59 	bl	8001be8 <MX_DAC4_Init>
  MX_LPUART1_UART_Init();
 8001536:	f000 fbd1 	bl	8001cdc <MX_LPUART1_UART_Init>
  MX_OPAMP4_Init();
 800153a:	f000 fc91 	bl	8001e60 <MX_OPAMP4_Init>
  MX_OPAMP5_Init();
 800153e:	f000 fcb5 	bl	8001eac <MX_OPAMP5_Init>
  MX_TIM7_Init();
 8001542:	f000 fe7f 	bl	8002244 <MX_TIM7_Init>
  MX_ADC2_Init();
 8001546:	f000 f8cb 	bl	80016e0 <MX_ADC2_Init>
  MX_ADC3_Init();
 800154a:	f000 f931 	bl	80017b0 <MX_ADC3_Init>
  MX_TIM6_Init();
 800154e:	f000 fe43 	bl	80021d8 <MX_TIM6_Init>
//  HAL_OPAMP_Start(&hopamp4);
//  HAL_OPAMP_Start(&hopamp5);
//  HAL_OPAMP_Start(&hopamp6);


  HAL_ADC_Start_DMA(&hadc5, BUFFER_SYS_ADC, 5);
 8001552:	2205      	movs	r2, #5
 8001554:	492c      	ldr	r1, [pc, #176]	@ (8001608 <main+0x134>)
 8001556:	482d      	ldr	r0, [pc, #180]	@ (800160c <main+0x138>)
 8001558:	f003 fc68 	bl	8004e2c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim6);
 800155c:	482c      	ldr	r0, [pc, #176]	@ (8001610 <main+0x13c>)
 800155e:	f00a fb8b 	bl	800bc78 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim7);
 8001562:	482c      	ldr	r0, [pc, #176]	@ (8001614 <main+0x140>)
 8001564:	f00a fb88 	bl	800bc78 <HAL_TIM_Base_Start>


  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001568:	213c      	movs	r1, #60	@ 0x3c
 800156a:	482b      	ldr	r0, [pc, #172]	@ (8001618 <main+0x144>)
 800156c:	f00b f83a 	bl	800c5e4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001570:	213c      	movs	r1, #60	@ 0x3c
 8001572:	482a      	ldr	r0, [pc, #168]	@ (800161c <main+0x148>)
 8001574:	f00b f836 	bl	800c5e4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001578:	213c      	movs	r1, #60	@ 0x3c
 800157a:	4829      	ldr	r0, [pc, #164]	@ (8001620 <main+0x14c>)
 800157c:	f00b f832 	bl	800c5e4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim20, TIM_CHANNEL_ALL);
 8001580:	213c      	movs	r1, #60	@ 0x3c
 8001582:	4828      	ldr	r0, [pc, #160]	@ (8001624 <main+0x150>)
 8001584:	f00b f82e 	bl	800c5e4 <HAL_TIM_Encoder_Start>


  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001588:	2100      	movs	r1, #0
 800158a:	4827      	ldr	r0, [pc, #156]	@ (8001628 <main+0x154>)
 800158c:	f00a fc46 	bl	800be1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001590:	2100      	movs	r1, #0
 8001592:	4826      	ldr	r0, [pc, #152]	@ (800162c <main+0x158>)
 8001594:	f00a fc42 	bl	800be1c <HAL_TIM_PWM_Start>
  FT6336_Init();
 8001598:	f7ff fe40 	bl	800121c <FT6336_Init>
  ST7789_Init();
 800159c:	f001 faae 	bl	8002afc <ST7789_Init>
//	  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);


  View_DoubaoWelcome();
 80015a0:	f001 fcaa 	bl	8002ef8 <View_DoubaoWelcome>
  {
//	  ST7789_Test();
//	  ST7789_WriteString(10, 10, " !\"#\%\$", Han_Array, WHITE, BLACK);


	Analog_FE_Update();
 80015a4:	f7ff fefa 	bl	800139c <Analog_FE_Update>

	View_Sensor();
 80015a8:	f001 fcca 	bl	8002f40 <View_Sensor>

	HAL_ADC_Start_DMA(&hadc2, BUFFER_DPO_CH1, DPO_DEEP);
 80015ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015b0:	491f      	ldr	r1, [pc, #124]	@ (8001630 <main+0x15c>)
 80015b2:	4820      	ldr	r0, [pc, #128]	@ (8001634 <main+0x160>)
 80015b4:	f003 fc3a 	bl	8004e2c <HAL_ADC_Start_DMA>


    while (__HAL_DMA_GET_COUNTER(hadc2.DMA_Handle) != 0) {
 80015b8:	bf00      	nop
 80015ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001634 <main+0x160>)
 80015bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f9      	bne.n	80015ba <main+0xe6>
        // 等待 DMA 传输完成
    }
    printf("ADC DMA transfer completed!\n");
 80015c6:	481c      	ldr	r0, [pc, #112]	@ (8001638 <main+0x164>)
 80015c8:	f011 ff9e 	bl	8013508 <puts>

    // 可以在这里处理 ADC 转换结果
    for (int i = 0; i < DPO_DEEP; i++) {
 80015cc:	2300      	movs	r3, #0
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	e00a      	b.n	80015e8 <main+0x114>
        printf("ADC: %d\n", BUFFER_DPO_CH1[i]);
 80015d2:	4a17      	ldr	r2, [pc, #92]	@ (8001630 <main+0x15c>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015da:	4619      	mov	r1, r3
 80015dc:	4817      	ldr	r0, [pc, #92]	@ (800163c <main+0x168>)
 80015de:	f011 ff2b 	bl	8013438 <iprintf>
    for (int i = 0; i < DPO_DEEP; i++) {
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3301      	adds	r3, #1
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015ee:	dbf0      	blt.n	80015d2 <main+0xfe>
    }

    HAL_Delay(100);
 80015f0:	2064      	movs	r0, #100	@ 0x64
 80015f2:	f002 ff01 	bl	80043f8 <HAL_Delay>

	TLC5952_WriteLED();
 80015f6:	f7ff fd41 	bl	800107c <TLC5952_WriteLED>
	TLC5952_WriteControl();
 80015fa:	f7ff fd75 	bl	80010e8 <TLC5952_WriteControl>




	WS2812_Write_Colors(rainbow_colors, 10);
 80015fe:	210a      	movs	r1, #10
 8001600:	480f      	ldr	r0, [pc, #60]	@ (8001640 <main+0x16c>)
 8001602:	f002 fe01 	bl	8004208 <WS2812_Write_Colors>
	Analog_FE_Update();
 8001606:	e7cd      	b.n	80015a4 <main+0xd0>
 8001608:	20000c7c 	.word	0x20000c7c
 800160c:	20000498 	.word	0x20000498
 8001610:	20000a40 	.word	0x20000a40
 8001614:	20000a8c 	.word	0x20000a8c
 8001618:	2000095c 	.word	0x2000095c
 800161c:	200009a8 	.word	0x200009a8
 8001620:	200009f4 	.word	0x200009f4
 8001624:	20000b70 	.word	0x20000b70
 8001628:	20000b24 	.word	0x20000b24
 800162c:	20000ad8 	.word	0x20000ad8
 8001630:	20000c90 	.word	0x20000c90
 8001634:	200003c0 	.word	0x200003c0
 8001638:	08016db0 	.word	0x08016db0
 800163c:	08016dcc 	.word	0x08016dcc
 8001640:	20000018 	.word	0x20000018

08001644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b094      	sub	sp, #80	@ 0x50
 8001648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164a:	f107 0318 	add.w	r3, r7, #24
 800164e:	2238      	movs	r2, #56	@ 0x38
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f012 f858 	bl	8013708 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
 8001664:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001666:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800166a:	f008 fd3d 	bl	800a0e8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800166e:	2321      	movs	r3, #33	@ 0x21
 8001670:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001672:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001676:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001678:	2301      	movs	r3, #1
 800167a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800167c:	2302      	movs	r3, #2
 800167e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001680:	2303      	movs	r3, #3
 8001682:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001684:	2302      	movs	r3, #2
 8001686:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001688:	234b      	movs	r3, #75	@ 0x4b
 800168a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800168c:	2306      	movs	r3, #6
 800168e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001690:	2302      	movs	r3, #2
 8001692:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001694:	2302      	movs	r3, #2
 8001696:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001698:	f107 0318 	add.w	r3, r7, #24
 800169c:	4618      	mov	r0, r3
 800169e:	f008 fdd7 	bl	800a250 <HAL_RCC_OscConfig>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <SystemClock_Config+0x68>
  {
    Error_Handler();
 80016a8:	f001 f926 	bl	80028f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ac:	230f      	movs	r3, #15
 80016ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016b0:	2303      	movs	r3, #3
 80016b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016b8:	2300      	movs	r3, #0
 80016ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	2104      	movs	r1, #4
 80016c4:	4618      	mov	r0, r3
 80016c6:	f009 f8d5 	bl	800a874 <HAL_RCC_ClockConfig>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80016d0:	f001 f912 	bl	80028f8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80016d4:	f009 faa4 	bl	800ac20 <HAL_RCC_EnableCSS>
}
 80016d8:	bf00      	nop
 80016da:	3750      	adds	r7, #80	@ 0x50
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016e6:	463b      	mov	r3, r7
 80016e8:	2220      	movs	r2, #32
 80016ea:	2100      	movs	r1, #0
 80016ec:	4618      	mov	r0, r3
 80016ee:	f012 f80b 	bl	8013708 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80016f2:	4b2c      	ldr	r3, [pc, #176]	@ (80017a4 <MX_ADC2_Init+0xc4>)
 80016f4:	4a2c      	ldr	r2, [pc, #176]	@ (80017a8 <MX_ADC2_Init+0xc8>)
 80016f6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80016f8:	4b2a      	ldr	r3, [pc, #168]	@ (80017a4 <MX_ADC2_Init+0xc4>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80016fe:	4b29      	ldr	r3, [pc, #164]	@ (80017a4 <MX_ADC2_Init+0xc4>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001704:	4b27      	ldr	r3, [pc, #156]	@ (80017a4 <MX_ADC2_Init+0xc4>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800170a:	4b26      	ldr	r3, [pc, #152]	@ (80017a4 <MX_ADC2_Init+0xc4>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001710:	4b24      	ldr	r3, [pc, #144]	@ (80017a4 <MX_ADC2_Init+0xc4>)
 8001712:	2200      	movs	r2, #0
 8001714:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001716:	4b23      	ldr	r3, [pc, #140]	@ (80017a4 <MX_ADC2_Init+0xc4>)
 8001718:	2204      	movs	r2, #4
 800171a:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800171c:	4b21      	ldr	r3, [pc, #132]	@ (80017a4 <MX_ADC2_Init+0xc4>)
 800171e:	2200      	movs	r2, #0
 8001720:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001722:	4b20      	ldr	r3, [pc, #128]	@ (80017a4 <MX_ADC2_Init+0xc4>)
 8001724:	2200      	movs	r2, #0
 8001726:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001728:	4b1e      	ldr	r3, [pc, #120]	@ (80017a4 <MX_ADC2_Init+0xc4>)
 800172a:	2201      	movs	r2, #1
 800172c:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800172e:	4b1d      	ldr	r3, [pc, #116]	@ (80017a4 <MX_ADC2_Init+0xc4>)
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8001736:	4b1b      	ldr	r3, [pc, #108]	@ (80017a4 <MX_ADC2_Init+0xc4>)
 8001738:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 800173c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800173e:	4b19      	ldr	r3, [pc, #100]	@ (80017a4 <MX_ADC2_Init+0xc4>)
 8001740:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001744:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001746:	4b17      	ldr	r3, [pc, #92]	@ (80017a4 <MX_ADC2_Init+0xc4>)
 8001748:	2201      	movs	r2, #1
 800174a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800174e:	4b15      	ldr	r3, [pc, #84]	@ (80017a4 <MX_ADC2_Init+0xc4>)
 8001750:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001754:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001756:	4b13      	ldr	r3, [pc, #76]	@ (80017a4 <MX_ADC2_Init+0xc4>)
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800175e:	4811      	ldr	r0, [pc, #68]	@ (80017a4 <MX_ADC2_Init+0xc4>)
 8001760:	f003 f9a8 	bl	8004ab4 <HAL_ADC_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800176a:	f001 f8c5 	bl	80028f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800176e:	4b0f      	ldr	r3, [pc, #60]	@ (80017ac <MX_ADC2_Init+0xcc>)
 8001770:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001772:	2306      	movs	r3, #6
 8001774:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001776:	2300      	movs	r3, #0
 8001778:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800177a:	237f      	movs	r3, #127	@ 0x7f
 800177c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800177e:	2304      	movs	r3, #4
 8001780:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001786:	463b      	mov	r3, r7
 8001788:	4619      	mov	r1, r3
 800178a:	4806      	ldr	r0, [pc, #24]	@ (80017a4 <MX_ADC2_Init+0xc4>)
 800178c:	f003 feaa 	bl	80054e4 <HAL_ADC_ConfigChannel>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8001796:	f001 f8af 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800179a:	bf00      	nop
 800179c:	3720      	adds	r7, #32
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	200003c0 	.word	0x200003c0
 80017a8:	50000100 	.word	0x50000100
 80017ac:	10c00010 	.word	0x10c00010

080017b0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08c      	sub	sp, #48	@ 0x30
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80017b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	2220      	movs	r2, #32
 80017c6:	2100      	movs	r1, #0
 80017c8:	4618      	mov	r0, r3
 80017ca:	f011 ff9d 	bl	8013708 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80017ce:	4b32      	ldr	r3, [pc, #200]	@ (8001898 <MX_ADC3_Init+0xe8>)
 80017d0:	4a32      	ldr	r2, [pc, #200]	@ (800189c <MX_ADC3_Init+0xec>)
 80017d2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80017d4:	4b30      	ldr	r3, [pc, #192]	@ (8001898 <MX_ADC3_Init+0xe8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80017da:	4b2f      	ldr	r3, [pc, #188]	@ (8001898 <MX_ADC3_Init+0xe8>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001898 <MX_ADC3_Init+0xe8>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80017e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001898 <MX_ADC3_Init+0xe8>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001898 <MX_ADC3_Init+0xe8>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017f2:	4b29      	ldr	r3, [pc, #164]	@ (8001898 <MX_ADC3_Init+0xe8>)
 80017f4:	2204      	movs	r2, #4
 80017f6:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80017f8:	4b27      	ldr	r3, [pc, #156]	@ (8001898 <MX_ADC3_Init+0xe8>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80017fe:	4b26      	ldr	r3, [pc, #152]	@ (8001898 <MX_ADC3_Init+0xe8>)
 8001800:	2200      	movs	r2, #0
 8001802:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8001804:	4b24      	ldr	r3, [pc, #144]	@ (8001898 <MX_ADC3_Init+0xe8>)
 8001806:	2201      	movs	r2, #1
 8001808:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800180a:	4b23      	ldr	r3, [pc, #140]	@ (8001898 <MX_ADC3_Init+0xe8>)
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8001812:	4b21      	ldr	r3, [pc, #132]	@ (8001898 <MX_ADC3_Init+0xe8>)
 8001814:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8001818:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800181a:	4b1f      	ldr	r3, [pc, #124]	@ (8001898 <MX_ADC3_Init+0xe8>)
 800181c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001820:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001822:	4b1d      	ldr	r3, [pc, #116]	@ (8001898 <MX_ADC3_Init+0xe8>)
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800182a:	4b1b      	ldr	r3, [pc, #108]	@ (8001898 <MX_ADC3_Init+0xe8>)
 800182c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001830:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001832:	4b19      	ldr	r3, [pc, #100]	@ (8001898 <MX_ADC3_Init+0xe8>)
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800183a:	4817      	ldr	r0, [pc, #92]	@ (8001898 <MX_ADC3_Init+0xe8>)
 800183c:	f003 f93a 	bl	8004ab4 <HAL_ADC_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8001846:	f001 f857 	bl	80028f8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800184a:	2300      	movs	r3, #0
 800184c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800184e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001852:	4619      	mov	r1, r3
 8001854:	4810      	ldr	r0, [pc, #64]	@ (8001898 <MX_ADC3_Init+0xe8>)
 8001856:	f004 fe13 	bl	8006480 <HAL_ADCEx_MultiModeConfigChannel>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8001860:	f001 f84a 	bl	80028f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001864:	4b0e      	ldr	r3, [pc, #56]	@ (80018a0 <MX_ADC3_Init+0xf0>)
 8001866:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001868:	2306      	movs	r3, #6
 800186a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001870:	237f      	movs	r3, #127	@ 0x7f
 8001872:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001874:	2304      	movs	r3, #4
 8001876:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	4619      	mov	r1, r3
 8001880:	4805      	ldr	r0, [pc, #20]	@ (8001898 <MX_ADC3_Init+0xe8>)
 8001882:	f003 fe2f 	bl	80054e4 <HAL_ADC_ConfigChannel>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_ADC3_Init+0xe0>
  {
    Error_Handler();
 800188c:	f001 f834 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001890:	bf00      	nop
 8001892:	3730      	adds	r7, #48	@ 0x30
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	2000042c 	.word	0x2000042c
 800189c:	50000400 	.word	0x50000400
 80018a0:	14f00020 	.word	0x14f00020

080018a4 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b090      	sub	sp, #64	@ 0x40
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80018aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]
 80018b4:	609a      	str	r2, [r3, #8]
 80018b6:	60da      	str	r2, [r3, #12]
 80018b8:	611a      	str	r2, [r3, #16]
 80018ba:	615a      	str	r2, [r3, #20]
 80018bc:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	2220      	movs	r2, #32
 80018c2:	2100      	movs	r1, #0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f011 ff1f 	bl	8013708 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 80018ca:	4b57      	ldr	r3, [pc, #348]	@ (8001a28 <MX_ADC5_Init+0x184>)
 80018cc:	4a57      	ldr	r2, [pc, #348]	@ (8001a2c <MX_ADC5_Init+0x188>)
 80018ce:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80018d0:	4b55      	ldr	r3, [pc, #340]	@ (8001a28 <MX_ADC5_Init+0x184>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 80018d6:	4b54      	ldr	r3, [pc, #336]	@ (8001a28 <MX_ADC5_Init+0x184>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018dc:	4b52      	ldr	r3, [pc, #328]	@ (8001a28 <MX_ADC5_Init+0x184>)
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 80018e2:	4b51      	ldr	r3, [pc, #324]	@ (8001a28 <MX_ADC5_Init+0x184>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80018e8:	4b4f      	ldr	r3, [pc, #316]	@ (8001a28 <MX_ADC5_Init+0x184>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80018ee:	4b4e      	ldr	r3, [pc, #312]	@ (8001a28 <MX_ADC5_Init+0x184>)
 80018f0:	2208      	movs	r2, #8
 80018f2:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80018f4:	4b4c      	ldr	r3, [pc, #304]	@ (8001a28 <MX_ADC5_Init+0x184>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 80018fa:	4b4b      	ldr	r3, [pc, #300]	@ (8001a28 <MX_ADC5_Init+0x184>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 5;
 8001900:	4b49      	ldr	r3, [pc, #292]	@ (8001a28 <MX_ADC5_Init+0x184>)
 8001902:	2205      	movs	r2, #5
 8001904:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001906:	4b48      	ldr	r3, [pc, #288]	@ (8001a28 <MX_ADC5_Init+0x184>)
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T7_TRGO;
 800190e:	4b46      	ldr	r3, [pc, #280]	@ (8001a28 <MX_ADC5_Init+0x184>)
 8001910:	f44f 62f8 	mov.w	r2, #1984	@ 0x7c0
 8001914:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001916:	4b44      	ldr	r3, [pc, #272]	@ (8001a28 <MX_ADC5_Init+0x184>)
 8001918:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800191c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 800191e:	4b42      	ldr	r3, [pc, #264]	@ (8001a28 <MX_ADC5_Init+0x184>)
 8001920:	2201      	movs	r2, #1
 8001922:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001926:	4b40      	ldr	r3, [pc, #256]	@ (8001a28 <MX_ADC5_Init+0x184>)
 8001928:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800192c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 800192e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a28 <MX_ADC5_Init+0x184>)
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8001936:	483c      	ldr	r0, [pc, #240]	@ (8001a28 <MX_ADC5_Init+0x184>)
 8001938:	f003 f8bc 	bl	8004ab4 <HAL_ADC_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_ADC5_Init+0xa2>
  {
    Error_Handler();
 8001942:	f000 ffd9 	bl	80028f8 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8001946:	4b3a      	ldr	r3, [pc, #232]	@ (8001a30 <MX_ADC5_Init+0x18c>)
 8001948:	627b      	str	r3, [r7, #36]	@ 0x24
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 800194a:	f44f 0340 	mov.w	r3, #12582912	@ 0xc00000
 800194e:	62bb      	str	r3, [r7, #40]	@ 0x28
  AnalogWDGConfig.Channel = ADC_CHANNEL_2;
 8001950:	4b38      	ldr	r3, [pc, #224]	@ (8001a34 <MX_ADC5_Init+0x190>)
 8001952:	62fb      	str	r3, [r7, #44]	@ 0x2c
  AnalogWDGConfig.ITMode = ENABLE;
 8001954:	2301      	movs	r3, #1
 8001956:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  AnalogWDGConfig.HighThreshold = 4095;
 800195a:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800195e:	637b      	str	r3, [r7, #52]	@ 0x34
  AnalogWDGConfig.LowThreshold = 3500;
 8001960:	f640 53ac 	movw	r3, #3500	@ 0xdac
 8001964:	63bb      	str	r3, [r7, #56]	@ 0x38
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
 8001966:	2300      	movs	r3, #0
 8001968:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_ADC_AnalogWDGConfig(&hadc5, &AnalogWDGConfig) != HAL_OK)
 800196a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800196e:	4619      	mov	r1, r3
 8001970:	482d      	ldr	r0, [pc, #180]	@ (8001a28 <MX_ADC5_Init+0x184>)
 8001972:	f004 f9f7 	bl	8005d64 <HAL_ADC_AnalogWDGConfig>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_ADC5_Init+0xdc>
  {
    Error_Handler();
 800197c:	f000 ffbc 	bl	80028f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001980:	4b2c      	ldr	r3, [pc, #176]	@ (8001a34 <MX_ADC5_Init+0x190>)
 8001982:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001984:	2306      	movs	r3, #6
 8001986:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001988:	2307      	movs	r3, #7
 800198a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800198c:	237f      	movs	r3, #127	@ 0x7f
 800198e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001990:	2304      	movs	r3, #4
 8001992:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	4619      	mov	r1, r3
 800199c:	4822      	ldr	r0, [pc, #136]	@ (8001a28 <MX_ADC5_Init+0x184>)
 800199e:	f003 fda1 	bl	80054e4 <HAL_ADC_ConfigChannel>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_ADC5_Init+0x108>
  {
    Error_Handler();
 80019a8:	f000 ffa6 	bl	80028f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC5;
 80019ac:	4b22      	ldr	r3, [pc, #136]	@ (8001a38 <MX_ADC5_Init+0x194>)
 80019ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80019b0:	230c      	movs	r3, #12
 80019b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	4619      	mov	r1, r3
 80019b8:	481b      	ldr	r0, [pc, #108]	@ (8001a28 <MX_ADC5_Init+0x184>)
 80019ba:	f003 fd93 	bl	80054e4 <HAL_ADC_ConfigChannel>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_ADC5_Init+0x124>
  {
    Error_Handler();
 80019c4:	f000 ff98 	bl	80028f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 80019c8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a3c <MX_ADC5_Init+0x198>)
 80019ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80019cc:	2312      	movs	r3, #18
 80019ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	4619      	mov	r1, r3
 80019d4:	4814      	ldr	r0, [pc, #80]	@ (8001a28 <MX_ADC5_Init+0x184>)
 80019d6:	f003 fd85 	bl	80054e4 <HAL_ADC_ConfigChannel>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_ADC5_Init+0x140>
  {
    Error_Handler();
 80019e0:	f000 ff8a 	bl	80028f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80019e4:	4b16      	ldr	r3, [pc, #88]	@ (8001a40 <MX_ADC5_Init+0x19c>)
 80019e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80019e8:	2318      	movs	r3, #24
 80019ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	4619      	mov	r1, r3
 80019f0:	480d      	ldr	r0, [pc, #52]	@ (8001a28 <MX_ADC5_Init+0x184>)
 80019f2:	f003 fd77 	bl	80054e4 <HAL_ADC_ConfigChannel>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_ADC5_Init+0x15c>
  {
    Error_Handler();
 80019fc:	f000 ff7c 	bl	80028f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP5;
 8001a00:	4b10      	ldr	r3, [pc, #64]	@ (8001a44 <MX_ADC5_Init+0x1a0>)
 8001a02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001a04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a08:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4806      	ldr	r0, [pc, #24]	@ (8001a28 <MX_ADC5_Init+0x184>)
 8001a10:	f003 fd68 	bl	80054e4 <HAL_ADC_ConfigChannel>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_ADC5_Init+0x17a>
  {
    Error_Handler();
 8001a1a:	f000 ff6d 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8001a1e:	bf00      	nop
 8001a20:	3740      	adds	r7, #64	@ 0x40
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000498 	.word	0x20000498
 8001a2c:	50000600 	.word	0x50000600
 8001a30:	7dc00000 	.word	0x7dc00000
 8001a34:	08600004 	.word	0x08600004
 8001a38:	90c00010 	.word	0x90c00010
 8001a3c:	c7520000 	.word	0xc7520000
 8001a40:	cb840000 	.word	0xcb840000
 8001a44:	8c900008 	.word	0x8c900008

08001a48 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a8c <MX_COMP2_Init+0x44>)
 8001a4e:	4a10      	ldr	r2, [pc, #64]	@ (8001a90 <MX_COMP2_Init+0x48>)
 8001a50:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001a52:	4b0e      	ldr	r3, [pc, #56]	@ (8001a8c <MX_COMP2_Init+0x44>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	605a      	str	r2, [r3, #4]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 8001a58:	4b0c      	ldr	r3, [pc, #48]	@ (8001a8c <MX_COMP2_Init+0x44>)
 8001a5a:	2250      	movs	r2, #80	@ 0x50
 8001a5c:	609a      	str	r2, [r3, #8]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a8c <MX_COMP2_Init+0x44>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001a64:	4b09      	ldr	r3, [pc, #36]	@ (8001a8c <MX_COMP2_Init+0x44>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	60da      	str	r2, [r3, #12]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001a6a:	4b08      	ldr	r3, [pc, #32]	@ (8001a8c <MX_COMP2_Init+0x44>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	615a      	str	r2, [r3, #20]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001a70:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <MX_COMP2_Init+0x44>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8001a76:	4805      	ldr	r0, [pc, #20]	@ (8001a8c <MX_COMP2_Init+0x44>)
 8001a78:	f004 ff5a 	bl	8006930 <HAL_COMP_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_COMP2_Init+0x3e>
  {
    Error_Handler();
 8001a82:	f000 ff39 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	200005c4 	.word	0x200005c4
 8001a90:	40010204 	.word	0x40010204

08001a94 <MX_COMP5_Init>:
  * @brief COMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP5_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE END COMP5_Init 0 */

  /* USER CODE BEGIN COMP5_Init 1 */

  /* USER CODE END COMP5_Init 1 */
  hcomp5.Instance = COMP5;
 8001a98:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad8 <MX_COMP5_Init+0x44>)
 8001a9a:	4a10      	ldr	r2, [pc, #64]	@ (8001adc <MX_COMP5_Init+0x48>)
 8001a9c:	601a      	str	r2, [r3, #0]
  hcomp5.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad8 <MX_COMP5_Init+0x44>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	605a      	str	r2, [r3, #4]
  hcomp5.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad8 <MX_COMP5_Init+0x44>)
 8001aa6:	2250      	movs	r2, #80	@ 0x50
 8001aa8:	609a      	str	r2, [r3, #8]
  hcomp5.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad8 <MX_COMP5_Init+0x44>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	611a      	str	r2, [r3, #16]
  hcomp5.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001ab0:	4b09      	ldr	r3, [pc, #36]	@ (8001ad8 <MX_COMP5_Init+0x44>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	60da      	str	r2, [r3, #12]
  hcomp5.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001ab6:	4b08      	ldr	r3, [pc, #32]	@ (8001ad8 <MX_COMP5_Init+0x44>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	615a      	str	r2, [r3, #20]
  hcomp5.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001abc:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <MX_COMP5_Init+0x44>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp5) != HAL_OK)
 8001ac2:	4805      	ldr	r0, [pc, #20]	@ (8001ad8 <MX_COMP5_Init+0x44>)
 8001ac4:	f004 ff34 	bl	8006930 <HAL_COMP_Init>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_COMP5_Init+0x3e>
  {
    Error_Handler();
 8001ace:	f000 ff13 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN COMP5_Init 2 */

  /* USER CODE END COMP5_Init 2 */

}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	200005e8 	.word	0x200005e8
 8001adc:	40010210 	.word	0x40010210

08001ae0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08c      	sub	sp, #48	@ 0x30
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001ae6:	463b      	mov	r3, r7
 8001ae8:	2230      	movs	r2, #48	@ 0x30
 8001aea:	2100      	movs	r1, #0
 8001aec:	4618      	mov	r0, r3
 8001aee:	f011 fe0b 	bl	8013708 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001af2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b6c <MX_DAC1_Init+0x8c>)
 8001af4:	4a1e      	ldr	r2, [pc, #120]	@ (8001b70 <MX_DAC1_Init+0x90>)
 8001af6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001af8:	481c      	ldr	r0, [pc, #112]	@ (8001b6c <MX_DAC1_Init+0x8c>)
 8001afa:	f005 f9c2 	bl	8006e82 <HAL_DAC_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001b04:	f000 fef8 	bl	80028f8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001b10:	2300      	movs	r3, #0
 8001b12:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 8001b24:	2304      	movs	r3, #4
 8001b26:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001b2c:	463b      	mov	r3, r7
 8001b2e:	2200      	movs	r2, #0
 8001b30:	4619      	mov	r1, r3
 8001b32:	480e      	ldr	r0, [pc, #56]	@ (8001b6c <MX_DAC1_Init+0x8c>)
 8001b34:	f005 fa62 	bl	8006ffc <HAL_DAC_ConfigChannel>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001b3e:	f000 fedb 	bl	80028f8 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001b46:	2302      	movs	r3, #2
 8001b48:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001b4e:	463b      	mov	r3, r7
 8001b50:	2210      	movs	r2, #16
 8001b52:	4619      	mov	r1, r3
 8001b54:	4805      	ldr	r0, [pc, #20]	@ (8001b6c <MX_DAC1_Init+0x8c>)
 8001b56:	f005 fa51 	bl	8006ffc <HAL_DAC_ConfigChannel>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_DAC1_Init+0x84>
  {
    Error_Handler();
 8001b60:	f000 feca 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001b64:	bf00      	nop
 8001b66:	3730      	adds	r7, #48	@ 0x30
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	2000060c 	.word	0x2000060c
 8001b70:	50000800 	.word	0x50000800

08001b74 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08c      	sub	sp, #48	@ 0x30
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001b7a:	463b      	mov	r3, r7
 8001b7c:	2230      	movs	r2, #48	@ 0x30
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4618      	mov	r0, r3
 8001b82:	f011 fdc1 	bl	8013708 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8001b86:	4b16      	ldr	r3, [pc, #88]	@ (8001be0 <MX_DAC2_Init+0x6c>)
 8001b88:	4a16      	ldr	r2, [pc, #88]	@ (8001be4 <MX_DAC2_Init+0x70>)
 8001b8a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001b8c:	4814      	ldr	r0, [pc, #80]	@ (8001be0 <MX_DAC2_Init+0x6c>)
 8001b8e:	f005 f978 	bl	8006e82 <HAL_DAC_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8001b98:	f000 feae 	bl	80028f8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001bac:	2302      	movs	r3, #2
 8001bae:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 8001bb8:	2304      	movs	r3, #4
 8001bba:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001bc0:	463b      	mov	r3, r7
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4806      	ldr	r0, [pc, #24]	@ (8001be0 <MX_DAC2_Init+0x6c>)
 8001bc8:	f005 fa18 	bl	8006ffc <HAL_DAC_ConfigChannel>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8001bd2:	f000 fe91 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8001bd6:	bf00      	nop
 8001bd8:	3730      	adds	r7, #48	@ 0x30
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000620 	.word	0x20000620
 8001be4:	50000c00 	.word	0x50000c00

08001be8 <MX_DAC4_Init>:
  * @brief DAC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC4_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08c      	sub	sp, #48	@ 0x30
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC4_Init 0 */

  /* USER CODE END DAC4_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001bee:	463b      	mov	r3, r7
 8001bf0:	2230      	movs	r2, #48	@ 0x30
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f011 fd87 	bl	8013708 <memset>

  /* USER CODE END DAC4_Init 1 */

  /** DAC Initialization
  */
  hdac4.Instance = DAC4;
 8001bfa:	4b16      	ldr	r3, [pc, #88]	@ (8001c54 <MX_DAC4_Init+0x6c>)
 8001bfc:	4a16      	ldr	r2, [pc, #88]	@ (8001c58 <MX_DAC4_Init+0x70>)
 8001bfe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac4) != HAL_OK)
 8001c00:	4814      	ldr	r0, [pc, #80]	@ (8001c54 <MX_DAC4_Init+0x6c>)
 8001c02:	f005 f93e 	bl	8006e82 <HAL_DAC_Init>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_DAC4_Init+0x28>
  {
    Error_Handler();
 8001c0c:	f000 fe74 	bl	80028f8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001c10:	2302      	movs	r3, #2
 8001c12:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001c20:	2302      	movs	r3, #2
 8001c22:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001c24:	2300      	movs	r3, #0
 8001c26:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001c30:	2300      	movs	r3, #0
 8001c32:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac4, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001c34:	463b      	mov	r3, r7
 8001c36:	2200      	movs	r2, #0
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4806      	ldr	r0, [pc, #24]	@ (8001c54 <MX_DAC4_Init+0x6c>)
 8001c3c:	f005 f9de 	bl	8006ffc <HAL_DAC_ConfigChannel>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_DAC4_Init+0x62>
  {
    Error_Handler();
 8001c46:	f000 fe57 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC4_Init 2 */

  /* USER CODE END DAC4_Init 2 */

}
 8001c4a:	bf00      	nop
 8001c4c:	3730      	adds	r7, #48	@ 0x30
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000634 	.word	0x20000634
 8001c58:	50001400 	.word	0x50001400

08001c5c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001c60:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd0 <MX_I2C3_Init+0x74>)
 8001c62:	4a1c      	ldr	r2, [pc, #112]	@ (8001cd4 <MX_I2C3_Init+0x78>)
 8001c64:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10E32879;
 8001c66:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd0 <MX_I2C3_Init+0x74>)
 8001c68:	4a1b      	ldr	r2, [pc, #108]	@ (8001cd8 <MX_I2C3_Init+0x7c>)
 8001c6a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001c6c:	4b18      	ldr	r3, [pc, #96]	@ (8001cd0 <MX_I2C3_Init+0x74>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c72:	4b17      	ldr	r3, [pc, #92]	@ (8001cd0 <MX_I2C3_Init+0x74>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c78:	4b15      	ldr	r3, [pc, #84]	@ (8001cd0 <MX_I2C3_Init+0x74>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001c7e:	4b14      	ldr	r3, [pc, #80]	@ (8001cd0 <MX_I2C3_Init+0x74>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c84:	4b12      	ldr	r3, [pc, #72]	@ (8001cd0 <MX_I2C3_Init+0x74>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c8a:	4b11      	ldr	r3, [pc, #68]	@ (8001cd0 <MX_I2C3_Init+0x74>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c90:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd0 <MX_I2C3_Init+0x74>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c96:	480e      	ldr	r0, [pc, #56]	@ (8001cd0 <MX_I2C3_Init+0x74>)
 8001c98:	f005 ff99 	bl	8007bce <HAL_I2C_Init>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001ca2:	f000 fe29 	bl	80028f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	4809      	ldr	r0, [pc, #36]	@ (8001cd0 <MX_I2C3_Init+0x74>)
 8001caa:	f006 fbb3 	bl	8008414 <HAL_I2CEx_ConfigAnalogFilter>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001cb4:	f000 fe20 	bl	80028f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4805      	ldr	r0, [pc, #20]	@ (8001cd0 <MX_I2C3_Init+0x74>)
 8001cbc:	f006 fbf5 	bl	80084aa <HAL_I2CEx_ConfigDigitalFilter>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001cc6:	f000 fe17 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000648 	.word	0x20000648
 8001cd4:	40007800 	.word	0x40007800
 8001cd8:	10e32879 	.word	0x10e32879

08001cdc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001ce0:	4b21      	ldr	r3, [pc, #132]	@ (8001d68 <MX_LPUART1_UART_Init+0x8c>)
 8001ce2:	4a22      	ldr	r2, [pc, #136]	@ (8001d6c <MX_LPUART1_UART_Init+0x90>)
 8001ce4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 921600;
 8001ce6:	4b20      	ldr	r3, [pc, #128]	@ (8001d68 <MX_LPUART1_UART_Init+0x8c>)
 8001ce8:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001cec:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cee:	4b1e      	ldr	r3, [pc, #120]	@ (8001d68 <MX_LPUART1_UART_Init+0x8c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001cf4:	4b1c      	ldr	r3, [pc, #112]	@ (8001d68 <MX_LPUART1_UART_Init+0x8c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8001d68 <MX_LPUART1_UART_Init+0x8c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001d00:	4b19      	ldr	r3, [pc, #100]	@ (8001d68 <MX_LPUART1_UART_Init+0x8c>)
 8001d02:	220c      	movs	r2, #12
 8001d04:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d06:	4b18      	ldr	r3, [pc, #96]	@ (8001d68 <MX_LPUART1_UART_Init+0x8c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d0c:	4b16      	ldr	r3, [pc, #88]	@ (8001d68 <MX_LPUART1_UART_Init+0x8c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d12:	4b15      	ldr	r3, [pc, #84]	@ (8001d68 <MX_LPUART1_UART_Init+0x8c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d18:	4b13      	ldr	r3, [pc, #76]	@ (8001d68 <MX_LPUART1_UART_Init+0x8c>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001d1e:	4812      	ldr	r0, [pc, #72]	@ (8001d68 <MX_LPUART1_UART_Init+0x8c>)
 8001d20:	f00b fdd2 	bl	800d8c8 <HAL_UART_Init>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001d2a:	f000 fde5 	bl	80028f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d2e:	2100      	movs	r1, #0
 8001d30:	480d      	ldr	r0, [pc, #52]	@ (8001d68 <MX_LPUART1_UART_Init+0x8c>)
 8001d32:	f00c fbfb 	bl	800e52c <HAL_UARTEx_SetTxFifoThreshold>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001d3c:	f000 fddc 	bl	80028f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d40:	2100      	movs	r1, #0
 8001d42:	4809      	ldr	r0, [pc, #36]	@ (8001d68 <MX_LPUART1_UART_Init+0x8c>)
 8001d44:	f00c fc30 	bl	800e5a8 <HAL_UARTEx_SetRxFifoThreshold>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001d4e:	f000 fdd3 	bl	80028f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001d52:	4805      	ldr	r0, [pc, #20]	@ (8001d68 <MX_LPUART1_UART_Init+0x8c>)
 8001d54:	f00c fbb1 	bl	800e4ba <HAL_UARTEx_DisableFifoMode>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001d5e:	f000 fdcb 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	2000069c 	.word	0x2000069c
 8001d6c:	40008000 	.word	0x40008000

08001d70 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001d74:	4b12      	ldr	r3, [pc, #72]	@ (8001dc0 <MX_OPAMP1_Init+0x50>)
 8001d76:	4a13      	ldr	r2, [pc, #76]	@ (8001dc4 <MX_OPAMP1_Init+0x54>)
 8001d78:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001d7a:	4b11      	ldr	r3, [pc, #68]	@ (8001dc0 <MX_OPAMP1_Init+0x50>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8001d80:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc0 <MX_OPAMP1_Init+0x50>)
 8001d82:	2240      	movs	r2, #64	@ 0x40
 8001d84:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8001d86:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc0 <MX_OPAMP1_Init+0x50>)
 8001d88:	2208      	movs	r2, #8
 8001d8a:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc0 <MX_OPAMP1_Init+0x50>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001d92:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc0 <MX_OPAMP1_Init+0x50>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8001d98:	4b09      	ldr	r3, [pc, #36]	@ (8001dc0 <MX_OPAMP1_Init+0x50>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	625a      	str	r2, [r3, #36]	@ 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8001d9e:	4b08      	ldr	r3, [pc, #32]	@ (8001dc0 <MX_OPAMP1_Init+0x50>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	629a      	str	r2, [r3, #40]	@ 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001da4:	4b06      	ldr	r3, [pc, #24]	@ (8001dc0 <MX_OPAMP1_Init+0x50>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001daa:	4805      	ldr	r0, [pc, #20]	@ (8001dc0 <MX_OPAMP1_Init+0x50>)
 8001dac:	f006 fbca 	bl	8008544 <HAL_OPAMP_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_OPAMP1_Init+0x4a>
  {
    Error_Handler();
 8001db6:	f000 fd9f 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000730 	.word	0x20000730
 8001dc4:	40010300 	.word	0x40010300

08001dc8 <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8001e0c <MX_OPAMP2_Init+0x44>)
 8001dce:	4a10      	ldr	r2, [pc, #64]	@ (8001e10 <MX_OPAMP2_Init+0x48>)
 8001dd0:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001e0c <MX_OPAMP2_Init+0x44>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e0c <MX_OPAMP2_Init+0x44>)
 8001dda:	2260      	movs	r2, #96	@ 0x60
 8001ddc:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001dde:	4b0b      	ldr	r3, [pc, #44]	@ (8001e0c <MX_OPAMP2_Init+0x44>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = ENABLE;
 8001de4:	4b09      	ldr	r3, [pc, #36]	@ (8001e0c <MX_OPAMP2_Init+0x44>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001dea:	4b08      	ldr	r3, [pc, #32]	@ (8001e0c <MX_OPAMP2_Init+0x44>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001df0:	4b06      	ldr	r3, [pc, #24]	@ (8001e0c <MX_OPAMP2_Init+0x44>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001df6:	4805      	ldr	r0, [pc, #20]	@ (8001e0c <MX_OPAMP2_Init+0x44>)
 8001df8:	f006 fba4 	bl	8008544 <HAL_OPAMP_Init>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_OPAMP2_Init+0x3e>
  {
    Error_Handler();
 8001e02:	f000 fd79 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	2000076c 	.word	0x2000076c
 8001e10:	40010304 	.word	0x40010304

08001e14 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8001e18:	4b0f      	ldr	r3, [pc, #60]	@ (8001e58 <MX_OPAMP3_Init+0x44>)
 8001e1a:	4a10      	ldr	r2, [pc, #64]	@ (8001e5c <MX_OPAMP3_Init+0x48>)
 8001e1c:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e58 <MX_OPAMP3_Init+0x44>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001e24:	4b0c      	ldr	r3, [pc, #48]	@ (8001e58 <MX_OPAMP3_Init+0x44>)
 8001e26:	2260      	movs	r2, #96	@ 0x60
 8001e28:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO1;
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e58 <MX_OPAMP3_Init+0x44>)
 8001e2c:	2204      	movs	r2, #4
 8001e2e:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8001e30:	4b09      	ldr	r3, [pc, #36]	@ (8001e58 <MX_OPAMP3_Init+0x44>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001e36:	4b08      	ldr	r3, [pc, #32]	@ (8001e58 <MX_OPAMP3_Init+0x44>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001e3c:	4b06      	ldr	r3, [pc, #24]	@ (8001e58 <MX_OPAMP3_Init+0x44>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8001e42:	4805      	ldr	r0, [pc, #20]	@ (8001e58 <MX_OPAMP3_Init+0x44>)
 8001e44:	f006 fb7e 	bl	8008544 <HAL_OPAMP_Init>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 8001e4e:	f000 fd53 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	200007a8 	.word	0x200007a8
 8001e5c:	40010308 	.word	0x40010308

08001e60 <MX_OPAMP4_Init>:
  * @brief OPAMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP4_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP4_Init 0 */

  /* USER CODE BEGIN OPAMP4_Init 1 */

  /* USER CODE END OPAMP4_Init 1 */
  hopamp4.Instance = OPAMP4;
 8001e64:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea4 <MX_OPAMP4_Init+0x44>)
 8001e66:	4a10      	ldr	r2, [pc, #64]	@ (8001ea8 <MX_OPAMP4_Init+0x48>)
 8001e68:	601a      	str	r2, [r3, #0]
  hopamp4.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea4 <MX_OPAMP4_Init+0x44>)
 8001e6c:	2280      	movs	r2, #128	@ 0x80
 8001e6e:	605a      	str	r2, [r3, #4]
  hopamp4.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001e70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea4 <MX_OPAMP4_Init+0x44>)
 8001e72:	2260      	movs	r2, #96	@ 0x60
 8001e74:	609a      	str	r2, [r3, #8]
  hopamp4.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8001e76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea4 <MX_OPAMP4_Init+0x44>)
 8001e78:	220c      	movs	r2, #12
 8001e7a:	611a      	str	r2, [r3, #16]
  hopamp4.Init.InternalOutput = DISABLE;
 8001e7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ea4 <MX_OPAMP4_Init+0x44>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	751a      	strb	r2, [r3, #20]
  hopamp4.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001e82:	4b08      	ldr	r3, [pc, #32]	@ (8001ea4 <MX_OPAMP4_Init+0x44>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	619a      	str	r2, [r3, #24]
  hopamp4.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001e88:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <MX_OPAMP4_Init+0x44>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp4) != HAL_OK)
 8001e8e:	4805      	ldr	r0, [pc, #20]	@ (8001ea4 <MX_OPAMP4_Init+0x44>)
 8001e90:	f006 fb58 	bl	8008544 <HAL_OPAMP_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_OPAMP4_Init+0x3e>
  {
    Error_Handler();
 8001e9a:	f000 fd2d 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP4_Init 2 */

  /* USER CODE END OPAMP4_Init 2 */

}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	200007e4 	.word	0x200007e4
 8001ea8:	4001030c 	.word	0x4001030c

08001eac <MX_OPAMP5_Init>:
  * @brief OPAMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP5_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP5_Init 0 */

  /* USER CODE BEGIN OPAMP5_Init 1 */

  /* USER CODE END OPAMP5_Init 1 */
  hopamp5.Instance = OPAMP5;
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef0 <MX_OPAMP5_Init+0x44>)
 8001eb2:	4a10      	ldr	r2, [pc, #64]	@ (8001ef4 <MX_OPAMP5_Init+0x48>)
 8001eb4:	601a      	str	r2, [r3, #0]
  hopamp5.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef0 <MX_OPAMP5_Init+0x44>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	605a      	str	r2, [r3, #4]
  hopamp5.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef0 <MX_OPAMP5_Init+0x44>)
 8001ebe:	2260      	movs	r2, #96	@ 0x60
 8001ec0:	609a      	str	r2, [r3, #8]
  hopamp5.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef0 <MX_OPAMP5_Init+0x44>)
 8001ec4:	2208      	movs	r2, #8
 8001ec6:	611a      	str	r2, [r3, #16]
  hopamp5.Init.InternalOutput = ENABLE;
 8001ec8:	4b09      	ldr	r3, [pc, #36]	@ (8001ef0 <MX_OPAMP5_Init+0x44>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	751a      	strb	r2, [r3, #20]
  hopamp5.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001ece:	4b08      	ldr	r3, [pc, #32]	@ (8001ef0 <MX_OPAMP5_Init+0x44>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	619a      	str	r2, [r3, #24]
  hopamp5.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001ed4:	4b06      	ldr	r3, [pc, #24]	@ (8001ef0 <MX_OPAMP5_Init+0x44>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp5) != HAL_OK)
 8001eda:	4805      	ldr	r0, [pc, #20]	@ (8001ef0 <MX_OPAMP5_Init+0x44>)
 8001edc:	f006 fb32 	bl	8008544 <HAL_OPAMP_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_OPAMP5_Init+0x3e>
  {
    Error_Handler();
 8001ee6:	f000 fd07 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP5_Init 2 */

  /* USER CODE END OPAMP5_Init 2 */

}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000820 	.word	0x20000820
 8001ef4:	40010310 	.word	0x40010310

08001ef8 <MX_OPAMP6_Init>:
  * @brief OPAMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP6_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 8001efc:	4b12      	ldr	r3, [pc, #72]	@ (8001f48 <MX_OPAMP6_Init+0x50>)
 8001efe:	4a13      	ldr	r2, [pc, #76]	@ (8001f4c <MX_OPAMP6_Init+0x54>)
 8001f00:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001f02:	4b11      	ldr	r3, [pc, #68]	@ (8001f48 <MX_OPAMP6_Init+0x50>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_PGA_MODE;
 8001f08:	4b0f      	ldr	r3, [pc, #60]	@ (8001f48 <MX_OPAMP6_Init+0x50>)
 8001f0a:	2240      	movs	r2, #64	@ 0x40
 8001f0c:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f48 <MX_OPAMP6_Init+0x50>)
 8001f10:	2208      	movs	r2, #8
 8001f12:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = ENABLE;
 8001f14:	4b0c      	ldr	r3, [pc, #48]	@ (8001f48 <MX_OPAMP6_Init+0x50>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f48 <MX_OPAMP6_Init+0x50>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
  hopamp6.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8001f20:	4b09      	ldr	r3, [pc, #36]	@ (8001f48 <MX_OPAMP6_Init+0x50>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	625a      	str	r2, [r3, #36]	@ 0x24
  hopamp6.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8001f26:	4b08      	ldr	r3, [pc, #32]	@ (8001f48 <MX_OPAMP6_Init+0x50>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	629a      	str	r2, [r3, #40]	@ 0x28
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001f2c:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <MX_OPAMP6_Init+0x50>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 8001f32:	4805      	ldr	r0, [pc, #20]	@ (8001f48 <MX_OPAMP6_Init+0x50>)
 8001f34:	f006 fb06 	bl	8008544 <HAL_OPAMP_Init>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_OPAMP6_Init+0x4a>
  {
    Error_Handler();
 8001f3e:	f000 fcdb 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	2000085c 	.word	0x2000085c
 8001f4c:	40010314 	.word	0x40010314

08001f50 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001f54:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc4 <MX_SPI3_Init+0x74>)
 8001f56:	4a1c      	ldr	r2, [pc, #112]	@ (8001fc8 <MX_SPI3_Init+0x78>)
 8001f58:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc4 <MX_SPI3_Init+0x74>)
 8001f5c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f60:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8001f62:	4b18      	ldr	r3, [pc, #96]	@ (8001fc4 <MX_SPI3_Init+0x74>)
 8001f64:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001f68:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f6a:	4b16      	ldr	r3, [pc, #88]	@ (8001fc4 <MX_SPI3_Init+0x74>)
 8001f6c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001f70:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001f72:	4b14      	ldr	r3, [pc, #80]	@ (8001fc4 <MX_SPI3_Init+0x74>)
 8001f74:	2202      	movs	r2, #2
 8001f76:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f78:	4b12      	ldr	r3, [pc, #72]	@ (8001fc4 <MX_SPI3_Init+0x74>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001f7e:	4b11      	ldr	r3, [pc, #68]	@ (8001fc4 <MX_SPI3_Init+0x74>)
 8001f80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f84:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001f86:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc4 <MX_SPI3_Init+0x74>)
 8001f88:	2210      	movs	r2, #16
 8001f8a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc4 <MX_SPI3_Init+0x74>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f92:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc4 <MX_SPI3_Init+0x74>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f98:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc4 <MX_SPI3_Init+0x74>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001f9e:	4b09      	ldr	r3, [pc, #36]	@ (8001fc4 <MX_SPI3_Init+0x74>)
 8001fa0:	2207      	movs	r2, #7
 8001fa2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001fa4:	4b07      	ldr	r3, [pc, #28]	@ (8001fc4 <MX_SPI3_Init+0x74>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001faa:	4b06      	ldr	r3, [pc, #24]	@ (8001fc4 <MX_SPI3_Init+0x74>)
 8001fac:	2208      	movs	r2, #8
 8001fae:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001fb0:	4804      	ldr	r0, [pc, #16]	@ (8001fc4 <MX_SPI3_Init+0x74>)
 8001fb2:	f009 f8f5 	bl	800b1a0 <HAL_SPI_Init>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <MX_SPI3_Init+0x70>
  {
    Error_Handler();
 8001fbc:	f000 fc9c 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001fc0:	bf00      	nop
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20000898 	.word	0x20000898
 8001fc8:	40003c00 	.word	0x40003c00

08001fcc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08c      	sub	sp, #48	@ 0x30
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fd2:	f107 030c 	add.w	r3, r7, #12
 8001fd6:	2224      	movs	r2, #36	@ 0x24
 8001fd8:	2100      	movs	r1, #0
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f011 fb94 	bl	8013708 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe0:	463b      	mov	r3, r7
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	605a      	str	r2, [r3, #4]
 8001fe8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fea:	4b23      	ldr	r3, [pc, #140]	@ (8002078 <MX_TIM1_Init+0xac>)
 8001fec:	4a23      	ldr	r2, [pc, #140]	@ (800207c <MX_TIM1_Init+0xb0>)
 8001fee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ff0:	4b21      	ldr	r3, [pc, #132]	@ (8002078 <MX_TIM1_Init+0xac>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff6:	4b20      	ldr	r3, [pc, #128]	@ (8002078 <MX_TIM1_Init+0xac>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ffc:	4b1e      	ldr	r3, [pc, #120]	@ (8002078 <MX_TIM1_Init+0xac>)
 8001ffe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002002:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002004:	4b1c      	ldr	r3, [pc, #112]	@ (8002078 <MX_TIM1_Init+0xac>)
 8002006:	2200      	movs	r2, #0
 8002008:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800200a:	4b1b      	ldr	r3, [pc, #108]	@ (8002078 <MX_TIM1_Init+0xac>)
 800200c:	2200      	movs	r2, #0
 800200e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002010:	4b19      	ldr	r3, [pc, #100]	@ (8002078 <MX_TIM1_Init+0xac>)
 8002012:	2200      	movs	r2, #0
 8002014:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002016:	2301      	movs	r3, #1
 8002018:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800201a:	2300      	movs	r3, #0
 800201c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800201e:	2301      	movs	r3, #1
 8002020:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002022:	2300      	movs	r3, #0
 8002024:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002026:	230f      	movs	r3, #15
 8002028:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800202a:	2300      	movs	r3, #0
 800202c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800202e:	2301      	movs	r3, #1
 8002030:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002032:	2300      	movs	r3, #0
 8002034:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8002036:	230f      	movs	r3, #15
 8002038:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800203a:	f107 030c 	add.w	r3, r7, #12
 800203e:	4619      	mov	r1, r3
 8002040:	480d      	ldr	r0, [pc, #52]	@ (8002078 <MX_TIM1_Init+0xac>)
 8002042:	f00a fa29 	bl	800c498 <HAL_TIM_Encoder_Init>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800204c:	f000 fc54 	bl	80028f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002050:	2300      	movs	r3, #0
 8002052:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002054:	2300      	movs	r3, #0
 8002056:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002058:	2300      	movs	r3, #0
 800205a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800205c:	463b      	mov	r3, r7
 800205e:	4619      	mov	r1, r3
 8002060:	4805      	ldr	r0, [pc, #20]	@ (8002078 <MX_TIM1_Init+0xac>)
 8002062:	f00b fb07 	bl	800d674 <HAL_TIMEx_MasterConfigSynchronization>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800206c:	f000 fc44 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002070:	bf00      	nop
 8002072:	3730      	adds	r7, #48	@ 0x30
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	2000095c 	.word	0x2000095c
 800207c:	40012c00 	.word	0x40012c00

08002080 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08c      	sub	sp, #48	@ 0x30
 8002084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002086:	f107 030c 	add.w	r3, r7, #12
 800208a:	2224      	movs	r2, #36	@ 0x24
 800208c:	2100      	movs	r1, #0
 800208e:	4618      	mov	r0, r3
 8002090:	f011 fb3a 	bl	8013708 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002094:	463b      	mov	r3, r7
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
 800209c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800209e:	4b21      	ldr	r3, [pc, #132]	@ (8002124 <MX_TIM3_Init+0xa4>)
 80020a0:	4a21      	ldr	r2, [pc, #132]	@ (8002128 <MX_TIM3_Init+0xa8>)
 80020a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80020a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002124 <MX_TIM3_Init+0xa4>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002124 <MX_TIM3_Init+0xa4>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80020b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002124 <MX_TIM3_Init+0xa4>)
 80020b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002124 <MX_TIM3_Init+0xa4>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020be:	4b19      	ldr	r3, [pc, #100]	@ (8002124 <MX_TIM3_Init+0xa4>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80020c4:	2301      	movs	r3, #1
 80020c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020c8:	2300      	movs	r3, #0
 80020ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020cc:	2301      	movs	r3, #1
 80020ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80020d4:	230f      	movs	r3, #15
 80020d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020d8:	2300      	movs	r3, #0
 80020da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020dc:	2301      	movs	r3, #1
 80020de:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020e0:	2300      	movs	r3, #0
 80020e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80020e4:	230f      	movs	r3, #15
 80020e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80020e8:	f107 030c 	add.w	r3, r7, #12
 80020ec:	4619      	mov	r1, r3
 80020ee:	480d      	ldr	r0, [pc, #52]	@ (8002124 <MX_TIM3_Init+0xa4>)
 80020f0:	f00a f9d2 	bl	800c498 <HAL_TIM_Encoder_Init>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80020fa:	f000 fbfd 	bl	80028f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020fe:	2300      	movs	r3, #0
 8002100:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002102:	2300      	movs	r3, #0
 8002104:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002106:	463b      	mov	r3, r7
 8002108:	4619      	mov	r1, r3
 800210a:	4806      	ldr	r0, [pc, #24]	@ (8002124 <MX_TIM3_Init+0xa4>)
 800210c:	f00b fab2 	bl	800d674 <HAL_TIMEx_MasterConfigSynchronization>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002116:	f000 fbef 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800211a:	bf00      	nop
 800211c:	3730      	adds	r7, #48	@ 0x30
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	200009a8 	.word	0x200009a8
 8002128:	40000400 	.word	0x40000400

0800212c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08c      	sub	sp, #48	@ 0x30
 8002130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002132:	f107 030c 	add.w	r3, r7, #12
 8002136:	2224      	movs	r2, #36	@ 0x24
 8002138:	2100      	movs	r1, #0
 800213a:	4618      	mov	r0, r3
 800213c:	f011 fae4 	bl	8013708 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002140:	463b      	mov	r3, r7
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	605a      	str	r2, [r3, #4]
 8002148:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800214a:	4b21      	ldr	r3, [pc, #132]	@ (80021d0 <MX_TIM4_Init+0xa4>)
 800214c:	4a21      	ldr	r2, [pc, #132]	@ (80021d4 <MX_TIM4_Init+0xa8>)
 800214e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002150:	4b1f      	ldr	r3, [pc, #124]	@ (80021d0 <MX_TIM4_Init+0xa4>)
 8002152:	2200      	movs	r2, #0
 8002154:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002156:	4b1e      	ldr	r3, [pc, #120]	@ (80021d0 <MX_TIM4_Init+0xa4>)
 8002158:	2200      	movs	r2, #0
 800215a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800215c:	4b1c      	ldr	r3, [pc, #112]	@ (80021d0 <MX_TIM4_Init+0xa4>)
 800215e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002162:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002164:	4b1a      	ldr	r3, [pc, #104]	@ (80021d0 <MX_TIM4_Init+0xa4>)
 8002166:	2200      	movs	r2, #0
 8002168:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800216a:	4b19      	ldr	r3, [pc, #100]	@ (80021d0 <MX_TIM4_Init+0xa4>)
 800216c:	2200      	movs	r2, #0
 800216e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002170:	2301      	movs	r3, #1
 8002172:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002174:	2300      	movs	r3, #0
 8002176:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002178:	2301      	movs	r3, #1
 800217a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800217c:	2300      	movs	r3, #0
 800217e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002180:	230f      	movs	r3, #15
 8002182:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002184:	2300      	movs	r3, #0
 8002186:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002188:	2301      	movs	r3, #1
 800218a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800218c:	2300      	movs	r3, #0
 800218e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8002190:	230f      	movs	r3, #15
 8002192:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002194:	f107 030c 	add.w	r3, r7, #12
 8002198:	4619      	mov	r1, r3
 800219a:	480d      	ldr	r0, [pc, #52]	@ (80021d0 <MX_TIM4_Init+0xa4>)
 800219c:	f00a f97c 	bl	800c498 <HAL_TIM_Encoder_Init>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80021a6:	f000 fba7 	bl	80028f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021aa:	2300      	movs	r3, #0
 80021ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ae:	2300      	movs	r3, #0
 80021b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021b2:	463b      	mov	r3, r7
 80021b4:	4619      	mov	r1, r3
 80021b6:	4806      	ldr	r0, [pc, #24]	@ (80021d0 <MX_TIM4_Init+0xa4>)
 80021b8:	f00b fa5c 	bl	800d674 <HAL_TIMEx_MasterConfigSynchronization>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80021c2:	f000 fb99 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80021c6:	bf00      	nop
 80021c8:	3730      	adds	r7, #48	@ 0x30
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200009f4 	.word	0x200009f4
 80021d4:	40000800 	.word	0x40000800

080021d8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021de:	1d3b      	adds	r3, r7, #4
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80021e8:	4b14      	ldr	r3, [pc, #80]	@ (800223c <MX_TIM6_Init+0x64>)
 80021ea:	4a15      	ldr	r2, [pc, #84]	@ (8002240 <MX_TIM6_Init+0x68>)
 80021ec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80021ee:	4b13      	ldr	r3, [pc, #76]	@ (800223c <MX_TIM6_Init+0x64>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f4:	4b11      	ldr	r3, [pc, #68]	@ (800223c <MX_TIM6_Init+0x64>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 149;
 80021fa:	4b10      	ldr	r3, [pc, #64]	@ (800223c <MX_TIM6_Init+0x64>)
 80021fc:	2295      	movs	r2, #149	@ 0x95
 80021fe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002200:	4b0e      	ldr	r3, [pc, #56]	@ (800223c <MX_TIM6_Init+0x64>)
 8002202:	2200      	movs	r2, #0
 8002204:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002206:	480d      	ldr	r0, [pc, #52]	@ (800223c <MX_TIM6_Init+0x64>)
 8002208:	f009 fcde 	bl	800bbc8 <HAL_TIM_Base_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002212:	f000 fb71 	bl	80028f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002216:	2320      	movs	r3, #32
 8002218:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	4619      	mov	r1, r3
 8002222:	4806      	ldr	r0, [pc, #24]	@ (800223c <MX_TIM6_Init+0x64>)
 8002224:	f00b fa26 	bl	800d674 <HAL_TIMEx_MasterConfigSynchronization>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800222e:	f000 fb63 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002232:	bf00      	nop
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20000a40 	.word	0x20000a40
 8002240:	40001000 	.word	0x40001000

08002244 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800224a:	1d3b      	adds	r3, r7, #4
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002254:	4b14      	ldr	r3, [pc, #80]	@ (80022a8 <MX_TIM7_Init+0x64>)
 8002256:	4a15      	ldr	r2, [pc, #84]	@ (80022ac <MX_TIM7_Init+0x68>)
 8002258:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 180-1;
 800225a:	4b13      	ldr	r3, [pc, #76]	@ (80022a8 <MX_TIM7_Init+0x64>)
 800225c:	22b3      	movs	r2, #179	@ 0xb3
 800225e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002260:	4b11      	ldr	r3, [pc, #68]	@ (80022a8 <MX_TIM7_Init+0x64>)
 8002262:	2200      	movs	r2, #0
 8002264:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8002266:	4b10      	ldr	r3, [pc, #64]	@ (80022a8 <MX_TIM7_Init+0x64>)
 8002268:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800226c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800226e:	4b0e      	ldr	r3, [pc, #56]	@ (80022a8 <MX_TIM7_Init+0x64>)
 8002270:	2200      	movs	r2, #0
 8002272:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002274:	480c      	ldr	r0, [pc, #48]	@ (80022a8 <MX_TIM7_Init+0x64>)
 8002276:	f009 fca7 	bl	800bbc8 <HAL_TIM_Base_Init>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002280:	f000 fb3a 	bl	80028f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002284:	2320      	movs	r3, #32
 8002286:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002288:	2300      	movs	r3, #0
 800228a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800228c:	1d3b      	adds	r3, r7, #4
 800228e:	4619      	mov	r1, r3
 8002290:	4805      	ldr	r0, [pc, #20]	@ (80022a8 <MX_TIM7_Init+0x64>)
 8002292:	f00b f9ef 	bl	800d674 <HAL_TIMEx_MasterConfigSynchronization>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800229c:	f000 fb2c 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80022a0:	bf00      	nop
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20000a8c 	.word	0x20000a8c
 80022ac:	40001400 	.word	0x40001400

080022b0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b09c      	sub	sp, #112	@ 0x70
 80022b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022b6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	605a      	str	r2, [r3, #4]
 80022c0:	609a      	str	r2, [r3, #8]
 80022c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022c4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022d0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	60da      	str	r2, [r3, #12]
 80022de:	611a      	str	r2, [r3, #16]
 80022e0:	615a      	str	r2, [r3, #20]
 80022e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022e4:	1d3b      	adds	r3, r7, #4
 80022e6:	2234      	movs	r2, #52	@ 0x34
 80022e8:	2100      	movs	r1, #0
 80022ea:	4618      	mov	r0, r3
 80022ec:	f011 fa0c 	bl	8013708 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80022f0:	4b4e      	ldr	r3, [pc, #312]	@ (800242c <MX_TIM8_Init+0x17c>)
 80022f2:	4a4f      	ldr	r2, [pc, #316]	@ (8002430 <MX_TIM8_Init+0x180>)
 80022f4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80022f6:	4b4d      	ldr	r3, [pc, #308]	@ (800242c <MX_TIM8_Init+0x17c>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022fc:	4b4b      	ldr	r3, [pc, #300]	@ (800242c <MX_TIM8_Init+0x17c>)
 80022fe:	2200      	movs	r2, #0
 8002300:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 179;
 8002302:	4b4a      	ldr	r3, [pc, #296]	@ (800242c <MX_TIM8_Init+0x17c>)
 8002304:	22b3      	movs	r2, #179	@ 0xb3
 8002306:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002308:	4b48      	ldr	r3, [pc, #288]	@ (800242c <MX_TIM8_Init+0x17c>)
 800230a:	2200      	movs	r2, #0
 800230c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800230e:	4b47      	ldr	r3, [pc, #284]	@ (800242c <MX_TIM8_Init+0x17c>)
 8002310:	2200      	movs	r2, #0
 8002312:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002314:	4b45      	ldr	r3, [pc, #276]	@ (800242c <MX_TIM8_Init+0x17c>)
 8002316:	2200      	movs	r2, #0
 8002318:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800231a:	4844      	ldr	r0, [pc, #272]	@ (800242c <MX_TIM8_Init+0x17c>)
 800231c:	f009 fc54 	bl	800bbc8 <HAL_TIM_Base_Init>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002326:	f000 fae7 	bl	80028f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800232a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800232e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002330:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002334:	4619      	mov	r1, r3
 8002336:	483d      	ldr	r0, [pc, #244]	@ (800242c <MX_TIM8_Init+0x17c>)
 8002338:	f00a faf6 	bl	800c928 <HAL_TIM_ConfigClockSource>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002342:	f000 fad9 	bl	80028f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002346:	4839      	ldr	r0, [pc, #228]	@ (800242c <MX_TIM8_Init+0x17c>)
 8002348:	f009 fd06 	bl	800bd58 <HAL_TIM_PWM_Init>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002352:	f000 fad1 	bl	80028f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002356:	2300      	movs	r3, #0
 8002358:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800235a:	2300      	movs	r3, #0
 800235c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800235e:	2300      	movs	r3, #0
 8002360:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002362:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002366:	4619      	mov	r1, r3
 8002368:	4830      	ldr	r0, [pc, #192]	@ (800242c <MX_TIM8_Init+0x17c>)
 800236a:	f00b f983 	bl	800d674 <HAL_TIMEx_MasterConfigSynchronization>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8002374:	f000 fac0 	bl	80028f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002378:	2370      	movs	r3, #112	@ 0x70
 800237a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 90;
 800237c:	235a      	movs	r3, #90	@ 0x5a
 800237e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002380:	2302      	movs	r3, #2
 8002382:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002384:	2300      	movs	r3, #0
 8002386:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002388:	2300      	movs	r3, #0
 800238a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800238c:	2300      	movs	r3, #0
 800238e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002390:	2300      	movs	r3, #0
 8002392:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002394:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002398:	2200      	movs	r2, #0
 800239a:	4619      	mov	r1, r3
 800239c:	4823      	ldr	r0, [pc, #140]	@ (800242c <MX_TIM8_Init+0x17c>)
 800239e:	f00a f9af 	bl	800c700 <HAL_TIM_PWM_ConfigChannel>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 80023a8:	f000 faa6 	bl	80028f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023ac:	2360      	movs	r3, #96	@ 0x60
 80023ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023b0:	2300      	movs	r3, #0
 80023b2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 80023b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023ba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80023be:	2208      	movs	r2, #8
 80023c0:	4619      	mov	r1, r3
 80023c2:	481a      	ldr	r0, [pc, #104]	@ (800242c <MX_TIM8_Init+0x17c>)
 80023c4:	f00a f99c 	bl	800c700 <HAL_TIM_PWM_ConfigChannel>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_TIM8_Init+0x122>
  {
    Error_Handler();
 80023ce:	f000 fa93 	bl	80028f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023d2:	2300      	movs	r3, #0
 80023d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023d6:	2300      	movs	r3, #0
 80023d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023de:	2300      	movs	r3, #0
 80023e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80023f0:	2300      	movs	r3, #0
 80023f2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80023f4:	2300      	movs	r3, #0
 80023f6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80023f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002402:	2300      	movs	r3, #0
 8002404:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002406:	2300      	movs	r3, #0
 8002408:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800240a:	1d3b      	adds	r3, r7, #4
 800240c:	4619      	mov	r1, r3
 800240e:	4807      	ldr	r0, [pc, #28]	@ (800242c <MX_TIM8_Init+0x17c>)
 8002410:	f00b f9c6 	bl	800d7a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_TIM8_Init+0x16e>
  {
    Error_Handler();
 800241a:	f000 fa6d 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800241e:	4803      	ldr	r0, [pc, #12]	@ (800242c <MX_TIM8_Init+0x17c>)
 8002420:	f001 fc96 	bl	8003d50 <HAL_TIM_MspPostInit>

}
 8002424:	bf00      	nop
 8002426:	3770      	adds	r7, #112	@ 0x70
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20000ad8 	.word	0x20000ad8
 8002430:	40013400 	.word	0x40013400

08002434 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b09c      	sub	sp, #112	@ 0x70
 8002438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800243a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	605a      	str	r2, [r3, #4]
 8002444:	609a      	str	r2, [r3, #8]
 8002446:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002448:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002454:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	60da      	str	r2, [r3, #12]
 8002462:	611a      	str	r2, [r3, #16]
 8002464:	615a      	str	r2, [r3, #20]
 8002466:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002468:	1d3b      	adds	r3, r7, #4
 800246a:	2234      	movs	r2, #52	@ 0x34
 800246c:	2100      	movs	r1, #0
 800246e:	4618      	mov	r0, r3
 8002470:	f011 f94a 	bl	8013708 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002474:	4b3f      	ldr	r3, [pc, #252]	@ (8002574 <MX_TIM15_Init+0x140>)
 8002476:	4a40      	ldr	r2, [pc, #256]	@ (8002578 <MX_TIM15_Init+0x144>)
 8002478:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 150;
 800247a:	4b3e      	ldr	r3, [pc, #248]	@ (8002574 <MX_TIM15_Init+0x140>)
 800247c:	2296      	movs	r2, #150	@ 0x96
 800247e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002480:	4b3c      	ldr	r3, [pc, #240]	@ (8002574 <MX_TIM15_Init+0x140>)
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8002486:	4b3b      	ldr	r3, [pc, #236]	@ (8002574 <MX_TIM15_Init+0x140>)
 8002488:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800248c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800248e:	4b39      	ldr	r3, [pc, #228]	@ (8002574 <MX_TIM15_Init+0x140>)
 8002490:	2200      	movs	r2, #0
 8002492:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002494:	4b37      	ldr	r3, [pc, #220]	@ (8002574 <MX_TIM15_Init+0x140>)
 8002496:	2200      	movs	r2, #0
 8002498:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800249a:	4b36      	ldr	r3, [pc, #216]	@ (8002574 <MX_TIM15_Init+0x140>)
 800249c:	2200      	movs	r2, #0
 800249e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80024a0:	4834      	ldr	r0, [pc, #208]	@ (8002574 <MX_TIM15_Init+0x140>)
 80024a2:	f009 fb91 	bl	800bbc8 <HAL_TIM_Base_Init>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 80024ac:	f000 fa24 	bl	80028f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024b4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80024b6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80024ba:	4619      	mov	r1, r3
 80024bc:	482d      	ldr	r0, [pc, #180]	@ (8002574 <MX_TIM15_Init+0x140>)
 80024be:	f00a fa33 	bl	800c928 <HAL_TIM_ConfigClockSource>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 80024c8:	f000 fa16 	bl	80028f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80024cc:	4829      	ldr	r0, [pc, #164]	@ (8002574 <MX_TIM15_Init+0x140>)
 80024ce:	f009 fc43 	bl	800bd58 <HAL_TIM_PWM_Init>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 80024d8:	f000 fa0e 	bl	80028f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024dc:	2300      	movs	r3, #0
 80024de:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80024e4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024e8:	4619      	mov	r1, r3
 80024ea:	4822      	ldr	r0, [pc, #136]	@ (8002574 <MX_TIM15_Init+0x140>)
 80024ec:	f00b f8c2 	bl	800d674 <HAL_TIMEx_MasterConfigSynchronization>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 80024f6:	f000 f9ff 	bl	80028f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024fa:	2360      	movs	r3, #96	@ 0x60
 80024fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 499;
 80024fe:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8002502:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002504:	2300      	movs	r3, #0
 8002506:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002508:	2300      	movs	r3, #0
 800250a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800250c:	2300      	movs	r3, #0
 800250e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002510:	2300      	movs	r3, #0
 8002512:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002514:	2300      	movs	r3, #0
 8002516:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002518:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800251c:	2200      	movs	r2, #0
 800251e:	4619      	mov	r1, r3
 8002520:	4814      	ldr	r0, [pc, #80]	@ (8002574 <MX_TIM15_Init+0x140>)
 8002522:	f00a f8ed 	bl	800c700 <HAL_TIM_PWM_ConfigChannel>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 800252c:	f000 f9e4 	bl	80028f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002530:	2300      	movs	r3, #0
 8002532:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002534:	2300      	movs	r3, #0
 8002536:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002538:	2300      	movs	r3, #0
 800253a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800253c:	2300      	movs	r3, #0
 800253e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002544:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002548:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800254a:	2300      	movs	r3, #0
 800254c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800254e:	2300      	movs	r3, #0
 8002550:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002552:	1d3b      	adds	r3, r7, #4
 8002554:	4619      	mov	r1, r3
 8002556:	4807      	ldr	r0, [pc, #28]	@ (8002574 <MX_TIM15_Init+0x140>)
 8002558:	f00b f922 	bl	800d7a0 <HAL_TIMEx_ConfigBreakDeadTime>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8002562:	f000 f9c9 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002566:	4803      	ldr	r0, [pc, #12]	@ (8002574 <MX_TIM15_Init+0x140>)
 8002568:	f001 fbf2 	bl	8003d50 <HAL_TIM_MspPostInit>

}
 800256c:	bf00      	nop
 800256e:	3770      	adds	r7, #112	@ 0x70
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20000b24 	.word	0x20000b24
 8002578:	40014000 	.word	0x40014000

0800257c <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08c      	sub	sp, #48	@ 0x30
 8002580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002582:	f107 030c 	add.w	r3, r7, #12
 8002586:	2224      	movs	r2, #36	@ 0x24
 8002588:	2100      	movs	r1, #0
 800258a:	4618      	mov	r0, r3
 800258c:	f011 f8bc 	bl	8013708 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002590:	463b      	mov	r3, r7
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	605a      	str	r2, [r3, #4]
 8002598:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 800259a:	4b23      	ldr	r3, [pc, #140]	@ (8002628 <MX_TIM20_Init+0xac>)
 800259c:	4a23      	ldr	r2, [pc, #140]	@ (800262c <MX_TIM20_Init+0xb0>)
 800259e:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 80025a0:	4b21      	ldr	r3, [pc, #132]	@ (8002628 <MX_TIM20_Init+0xac>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025a6:	4b20      	ldr	r3, [pc, #128]	@ (8002628 <MX_TIM20_Init+0xac>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 80025ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002628 <MX_TIM20_Init+0xac>)
 80025ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025b2:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025b4:	4b1c      	ldr	r3, [pc, #112]	@ (8002628 <MX_TIM20_Init+0xac>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 80025ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002628 <MX_TIM20_Init+0xac>)
 80025bc:	2200      	movs	r2, #0
 80025be:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025c0:	4b19      	ldr	r3, [pc, #100]	@ (8002628 <MX_TIM20_Init+0xac>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80025c6:	2301      	movs	r3, #1
 80025c8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80025ca:	2300      	movs	r3, #0
 80025cc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80025ce:	2301      	movs	r3, #1
 80025d0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80025d6:	230f      	movs	r3, #15
 80025d8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80025da:	2300      	movs	r3, #0
 80025dc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80025de:	2301      	movs	r3, #1
 80025e0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80025e2:	2300      	movs	r3, #0
 80025e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80025e6:	230f      	movs	r3, #15
 80025e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim20, &sConfig) != HAL_OK)
 80025ea:	f107 030c 	add.w	r3, r7, #12
 80025ee:	4619      	mov	r1, r3
 80025f0:	480d      	ldr	r0, [pc, #52]	@ (8002628 <MX_TIM20_Init+0xac>)
 80025f2:	f009 ff51 	bl	800c498 <HAL_TIM_Encoder_Init>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_TIM20_Init+0x84>
  {
    Error_Handler();
 80025fc:	f000 f97c 	bl	80028f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002600:	2300      	movs	r3, #0
 8002602:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002604:	2300      	movs	r3, #0
 8002606:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002608:	2300      	movs	r3, #0
 800260a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 800260c:	463b      	mov	r3, r7
 800260e:	4619      	mov	r1, r3
 8002610:	4805      	ldr	r0, [pc, #20]	@ (8002628 <MX_TIM20_Init+0xac>)
 8002612:	f00b f82f 	bl	800d674 <HAL_TIMEx_MasterConfigSynchronization>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_TIM20_Init+0xa4>
  {
    Error_Handler();
 800261c:	f000 f96c 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 8002620:	bf00      	nop
 8002622:	3730      	adds	r7, #48	@ 0x30
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20000b70 	.word	0x20000b70
 800262c:	40015000 	.word	0x40015000

08002630 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002636:	4b22      	ldr	r3, [pc, #136]	@ (80026c0 <MX_DMA_Init+0x90>)
 8002638:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800263a:	4a21      	ldr	r2, [pc, #132]	@ (80026c0 <MX_DMA_Init+0x90>)
 800263c:	f043 0304 	orr.w	r3, r3, #4
 8002640:	6493      	str	r3, [r2, #72]	@ 0x48
 8002642:	4b1f      	ldr	r3, [pc, #124]	@ (80026c0 <MX_DMA_Init+0x90>)
 8002644:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002646:	f003 0304 	and.w	r3, r3, #4
 800264a:	607b      	str	r3, [r7, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800264e:	4b1c      	ldr	r3, [pc, #112]	@ (80026c0 <MX_DMA_Init+0x90>)
 8002650:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002652:	4a1b      	ldr	r2, [pc, #108]	@ (80026c0 <MX_DMA_Init+0x90>)
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	6493      	str	r3, [r2, #72]	@ 0x48
 800265a:	4b19      	ldr	r3, [pc, #100]	@ (80026c0 <MX_DMA_Init+0x90>)
 800265c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	603b      	str	r3, [r7, #0]
 8002664:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002666:	2200      	movs	r2, #0
 8002668:	2100      	movs	r1, #0
 800266a:	200b      	movs	r0, #11
 800266c:	f004 fbd5 	bl	8006e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002670:	200b      	movs	r0, #11
 8002672:	f004 fbec 	bl	8006e4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002676:	2200      	movs	r2, #0
 8002678:	2100      	movs	r1, #0
 800267a:	200c      	movs	r0, #12
 800267c:	f004 fbcd 	bl	8006e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002680:	200c      	movs	r0, #12
 8002682:	f004 fbe4 	bl	8006e4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002686:	2200      	movs	r2, #0
 8002688:	2100      	movs	r1, #0
 800268a:	200d      	movs	r0, #13
 800268c:	f004 fbc5 	bl	8006e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002690:	200d      	movs	r0, #13
 8002692:	f004 fbdc 	bl	8006e4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002696:	2200      	movs	r2, #0
 8002698:	2100      	movs	r1, #0
 800269a:	200e      	movs	r0, #14
 800269c:	f004 fbbd 	bl	8006e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80026a0:	200e      	movs	r0, #14
 80026a2:	f004 fbd4 	bl	8006e4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80026a6:	2200      	movs	r2, #0
 80026a8:	2100      	movs	r1, #0
 80026aa:	200f      	movs	r0, #15
 80026ac:	f004 fbb5 	bl	8006e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80026b0:	200f      	movs	r0, #15
 80026b2:	f004 fbcc 	bl	8006e4e <HAL_NVIC_EnableIRQ>

}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40021000 	.word	0x40021000

080026c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08a      	sub	sp, #40	@ 0x28
 80026c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ca:	f107 0314 	add.w	r3, r7, #20
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	605a      	str	r2, [r3, #4]
 80026d4:	609a      	str	r2, [r3, #8]
 80026d6:	60da      	str	r2, [r3, #12]
 80026d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026da:	4b83      	ldr	r3, [pc, #524]	@ (80028e8 <MX_GPIO_Init+0x224>)
 80026dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026de:	4a82      	ldr	r2, [pc, #520]	@ (80028e8 <MX_GPIO_Init+0x224>)
 80026e0:	f043 0304 	orr.w	r3, r3, #4
 80026e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026e6:	4b80      	ldr	r3, [pc, #512]	@ (80028e8 <MX_GPIO_Init+0x224>)
 80026e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ea:	f003 0304 	and.w	r3, r3, #4
 80026ee:	613b      	str	r3, [r7, #16]
 80026f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026f2:	4b7d      	ldr	r3, [pc, #500]	@ (80028e8 <MX_GPIO_Init+0x224>)
 80026f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026f6:	4a7c      	ldr	r2, [pc, #496]	@ (80028e8 <MX_GPIO_Init+0x224>)
 80026f8:	f043 0320 	orr.w	r3, r3, #32
 80026fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026fe:	4b7a      	ldr	r3, [pc, #488]	@ (80028e8 <MX_GPIO_Init+0x224>)
 8002700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002702:	f003 0320 	and.w	r3, r3, #32
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800270a:	4b77      	ldr	r3, [pc, #476]	@ (80028e8 <MX_GPIO_Init+0x224>)
 800270c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800270e:	4a76      	ldr	r2, [pc, #472]	@ (80028e8 <MX_GPIO_Init+0x224>)
 8002710:	f043 0301 	orr.w	r3, r3, #1
 8002714:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002716:	4b74      	ldr	r3, [pc, #464]	@ (80028e8 <MX_GPIO_Init+0x224>)
 8002718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002722:	4b71      	ldr	r3, [pc, #452]	@ (80028e8 <MX_GPIO_Init+0x224>)
 8002724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002726:	4a70      	ldr	r2, [pc, #448]	@ (80028e8 <MX_GPIO_Init+0x224>)
 8002728:	f043 0302 	orr.w	r3, r3, #2
 800272c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800272e:	4b6e      	ldr	r3, [pc, #440]	@ (80028e8 <MX_GPIO_Init+0x224>)
 8002730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	607b      	str	r3, [r7, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800273a:	4b6b      	ldr	r3, [pc, #428]	@ (80028e8 <MX_GPIO_Init+0x224>)
 800273c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800273e:	4a6a      	ldr	r2, [pc, #424]	@ (80028e8 <MX_GPIO_Init+0x224>)
 8002740:	f043 0308 	orr.w	r3, r3, #8
 8002744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002746:	4b68      	ldr	r3, [pc, #416]	@ (80028e8 <MX_GPIO_Init+0x224>)
 8002748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	603b      	str	r3, [r7, #0]
 8002750:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AC_DC_CH2_Pin|CD_CH2_A_Pin|CD_CH2_B_Pin|CD_CH1_A_Pin
 8002752:	2200      	movs	r2, #0
 8002754:	f64e 0120 	movw	r1, #59424	@ 0xe820
 8002758:	4864      	ldr	r0, [pc, #400]	@ (80028ec <MX_GPIO_Init+0x228>)
 800275a:	f005 f9fd 	bl	8007b58 <HAL_GPIO_WritePin>
                          |ST7789_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CD_CH2_C_Pin|AC_DC_CH1_Pin|CD_CH1_C_Pin, GPIO_PIN_RESET);
 800275e:	2200      	movs	r2, #0
 8002760:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8002764:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002768:	f005 f9f6 	bl	8007b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CD_CH1_B_Pin|TLC5952_SCLK_Pin|TLC5952_LAT_Pin|TLC5952_SIN_Pin, GPIO_PIN_RESET);
 800276c:	2200      	movs	r2, #0
 800276e:	f248 0138 	movw	r1, #32824	@ 0x8038
 8002772:	485f      	ldr	r0, [pc, #380]	@ (80028f0 <MX_GPIO_Init+0x22c>)
 8002774:	f005 f9f0 	bl	8007b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FT6336_RST_GPIO_Port, FT6336_RST_Pin, GPIO_PIN_RESET);
 8002778:	2200      	movs	r2, #0
 800277a:	2104      	movs	r1, #4
 800277c:	485d      	ldr	r0, [pc, #372]	@ (80028f4 <MX_GPIO_Init+0x230>)
 800277e:	f005 f9eb 	bl	8007b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AC_DC_CH2_Pin CD_CH2_A_Pin CD_CH2_B_Pin CD_CH1_A_Pin
                           ST7789_DC_Pin */
  GPIO_InitStruct.Pin = AC_DC_CH2_Pin|CD_CH2_A_Pin|CD_CH2_B_Pin|CD_CH1_A_Pin
 8002782:	f64e 0320 	movw	r3, #59424	@ 0xe820
 8002786:	617b      	str	r3, [r7, #20]
                          |ST7789_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002788:	2301      	movs	r3, #1
 800278a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	2300      	movs	r3, #0
 800278e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002790:	2300      	movs	r3, #0
 8002792:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002794:	f107 0314 	add.w	r3, r7, #20
 8002798:	4619      	mov	r1, r3
 800279a:	4854      	ldr	r0, [pc, #336]	@ (80028ec <MX_GPIO_Init+0x228>)
 800279c:	f005 f85a 	bl	8007854 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80027a0:	2301      	movs	r3, #1
 80027a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a4:	2302      	movs	r3, #2
 80027a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ac:	2300      	movs	r3, #0
 80027ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 80027b0:	230e      	movs	r3, #14
 80027b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b4:	f107 0314 	add.w	r3, r7, #20
 80027b8:	4619      	mov	r1, r3
 80027ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027be:	f005 f849 	bl	8007854 <HAL_GPIO_Init>

  /*Configure GPIO pins : CD_CH2_C_Pin AC_DC_CH1_Pin CD_CH1_C_Pin */
  GPIO_InitStruct.Pin = CD_CH2_C_Pin|AC_DC_CH1_Pin|CD_CH1_C_Pin;
 80027c2:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80027c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027c8:	2301      	movs	r3, #1
 80027ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d0:	2300      	movs	r3, #0
 80027d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d4:	f107 0314 	add.w	r3, r7, #20
 80027d8:	4619      	mov	r1, r3
 80027da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027de:	f005 f839 	bl	8007854 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10;
 80027e2:	f240 430c 	movw	r3, #1036	@ 0x40c
 80027e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027e8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80027ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f2:	f107 0314 	add.w	r3, r7, #20
 80027f6:	4619      	mov	r1, r3
 80027f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027fc:	f005 f82a 	bl	8007854 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002800:	2310      	movs	r3, #16
 8002802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002804:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800280e:	f107 0314 	add.w	r3, r7, #20
 8002812:	4619      	mov	r1, r3
 8002814:	4835      	ldr	r0, [pc, #212]	@ (80028ec <MX_GPIO_Init+0x228>)
 8002816:	f005 f81d 	bl	8007854 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8;
 800281a:	f240 1303 	movw	r3, #259	@ 0x103
 800281e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002820:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002826:	2300      	movs	r3, #0
 8002828:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800282a:	f107 0314 	add.w	r3, r7, #20
 800282e:	4619      	mov	r1, r3
 8002830:	482f      	ldr	r0, [pc, #188]	@ (80028f0 <MX_GPIO_Init+0x22c>)
 8002832:	f005 f80f 	bl	8007854 <HAL_GPIO_Init>

  /*Configure GPIO pins : CD_CH1_B_Pin TLC5952_SCLK_Pin TLC5952_LAT_Pin TLC5952_SIN_Pin */
  GPIO_InitStruct.Pin = CD_CH1_B_Pin|TLC5952_SCLK_Pin|TLC5952_LAT_Pin|TLC5952_SIN_Pin;
 8002836:	f248 0338 	movw	r3, #32824	@ 0x8038
 800283a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800283c:	2301      	movs	r3, #1
 800283e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002844:	2300      	movs	r3, #0
 8002846:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	4619      	mov	r1, r3
 800284e:	4828      	ldr	r0, [pc, #160]	@ (80028f0 <MX_GPIO_Init+0x22c>)
 8002850:	f005 f800 	bl	8007854 <HAL_GPIO_Init>

  /*Configure GPIO pin : FT6336_RST_Pin */
  GPIO_InitStruct.Pin = FT6336_RST_Pin;
 8002854:	2304      	movs	r3, #4
 8002856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002858:	2301      	movs	r3, #1
 800285a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285c:	2300      	movs	r3, #0
 800285e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002860:	2300      	movs	r3, #0
 8002862:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FT6336_RST_GPIO_Port, &GPIO_InitStruct);
 8002864:	f107 0314 	add.w	r3, r7, #20
 8002868:	4619      	mov	r1, r3
 800286a:	4822      	ldr	r0, [pc, #136]	@ (80028f4 <MX_GPIO_Init+0x230>)
 800286c:	f004 fff2 	bl	8007854 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002870:	2200      	movs	r2, #0
 8002872:	2100      	movs	r1, #0
 8002874:	2006      	movs	r0, #6
 8002876:	f004 fad0 	bl	8006e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800287a:	2006      	movs	r0, #6
 800287c:	f004 fae7 	bl	8006e4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002880:	2200      	movs	r2, #0
 8002882:	2100      	movs	r1, #0
 8002884:	2007      	movs	r0, #7
 8002886:	f004 fac8 	bl	8006e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800288a:	2007      	movs	r0, #7
 800288c:	f004 fadf 	bl	8006e4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002890:	2200      	movs	r2, #0
 8002892:	2100      	movs	r1, #0
 8002894:	2008      	movs	r0, #8
 8002896:	f004 fac0 	bl	8006e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800289a:	2008      	movs	r0, #8
 800289c:	f004 fad7 	bl	8006e4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80028a0:	2200      	movs	r2, #0
 80028a2:	2100      	movs	r1, #0
 80028a4:	2009      	movs	r0, #9
 80028a6:	f004 fab8 	bl	8006e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80028aa:	2009      	movs	r0, #9
 80028ac:	f004 facf 	bl	8006e4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80028b0:	2200      	movs	r2, #0
 80028b2:	2100      	movs	r1, #0
 80028b4:	200a      	movs	r0, #10
 80028b6:	f004 fab0 	bl	8006e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80028ba:	200a      	movs	r0, #10
 80028bc:	f004 fac7 	bl	8006e4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80028c0:	2200      	movs	r2, #0
 80028c2:	2100      	movs	r1, #0
 80028c4:	2017      	movs	r0, #23
 80028c6:	f004 faa8 	bl	8006e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80028ca:	2017      	movs	r0, #23
 80028cc:	f004 fabf 	bl	8006e4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80028d0:	2200      	movs	r2, #0
 80028d2:	2100      	movs	r1, #0
 80028d4:	2028      	movs	r0, #40	@ 0x28
 80028d6:	f004 faa0 	bl	8006e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80028da:	2028      	movs	r0, #40	@ 0x28
 80028dc:	f004 fab7 	bl	8006e4e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80028e0:	bf00      	nop
 80028e2:	3728      	adds	r7, #40	@ 0x28
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40021000 	.word	0x40021000
 80028ec:	48000800 	.word	0x48000800
 80028f0:	48000400 	.word	0x48000400
 80028f4:	48000c00 	.word	0x48000c00

080028f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028fc:	b672      	cpsid	i
}
 80028fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002900:	bf00      	nop
 8002902:	e7fd      	b.n	8002900 <Error_Handler+0x8>

08002904 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	4603      	mov	r3, r0
 800290c:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800290e:	bf00      	nop
	ST7789_DC_Clr();
 8002910:	2200      	movs	r2, #0
 8002912:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002916:	4807      	ldr	r0, [pc, #28]	@ (8002934 <ST7789_WriteCommand+0x30>)
 8002918:	f005 f91e 	bl	8007b58 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800291c:	1df9      	adds	r1, r7, #7
 800291e:	f04f 33ff 	mov.w	r3, #4294967295
 8002922:	2201      	movs	r2, #1
 8002924:	4804      	ldr	r0, [pc, #16]	@ (8002938 <ST7789_WriteCommand+0x34>)
 8002926:	f008 fce6 	bl	800b2f6 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 800292a:	bf00      	nop
}
 800292c:	bf00      	nop
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	48000800 	.word	0x48000800
 8002938:	20000898 	.word	0x20000898

0800293c <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8002946:	bf00      	nop
	ST7789_DC_Set();
 8002948:	2201      	movs	r2, #1
 800294a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800294e:	481b      	ldr	r0, [pc, #108]	@ (80029bc <ST7789_WriteData+0x80>)
 8002950:	f005 f902 	bl	8007b58 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8002954:	e02a      	b.n	80029ac <ST7789_WriteData+0x70>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800295c:	4293      	cmp	r3, r2
 800295e:	bf28      	it	cs
 8002960:	4613      	movcs	r3, r2
 8002962:	81fb      	strh	r3, [r7, #14]
		#ifdef USE_DMA
			if (DMA_MIN_SIZE <= buff_size)
 8002964:	4b16      	ldr	r3, [pc, #88]	@ (80029c0 <ST7789_WriteData+0x84>)
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	461a      	mov	r2, r3
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	4293      	cmp	r3, r2
 800296e:	d30e      	bcc.n	800298e <ST7789_WriteData+0x52>
			{
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 8002970:	89fb      	ldrh	r3, [r7, #14]
 8002972:	461a      	mov	r2, r3
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	4813      	ldr	r0, [pc, #76]	@ (80029c4 <ST7789_WriteData+0x88>)
 8002978:	f008 fe34 	bl	800b5e4 <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 800297c:	bf00      	nop
 800297e:	4b11      	ldr	r3, [pc, #68]	@ (80029c4 <ST7789_WriteData+0x88>)
 8002980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002982:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b01      	cmp	r3, #1
 800298a:	d1f8      	bne.n	800297e <ST7789_WriteData+0x42>
 800298c:	e006      	b.n	800299c <ST7789_WriteData+0x60>
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 800298e:	89fa      	ldrh	r2, [r7, #14]
 8002990:	f04f 33ff 	mov.w	r3, #4294967295
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	480b      	ldr	r0, [pc, #44]	@ (80029c4 <ST7789_WriteData+0x88>)
 8002998:	f008 fcad 	bl	800b2f6 <HAL_SPI_Transmit>
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#endif
		buff += chunk_size;
 800299c:	89fb      	ldrh	r3, [r7, #14]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	4413      	add	r3, r2
 80029a2:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 80029a4:	89fb      	ldrh	r3, [r7, #14]
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1d1      	bne.n	8002956 <ST7789_WriteData+0x1a>
	}

	ST7789_UnSelect();
 80029b2:	bf00      	nop
}
 80029b4:	bf00      	nop
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	48000800 	.word	0x48000800
 80029c0:	20000040 	.word	0x20000040
 80029c4:	20000898 	.word	0x20000898

080029c8 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 80029d2:	bf00      	nop
	ST7789_DC_Set();
 80029d4:	2201      	movs	r2, #1
 80029d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80029da:	4807      	ldr	r0, [pc, #28]	@ (80029f8 <ST7789_WriteSmallData+0x30>)
 80029dc:	f005 f8bc 	bl	8007b58 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 80029e0:	1df9      	adds	r1, r7, #7
 80029e2:	f04f 33ff 	mov.w	r3, #4294967295
 80029e6:	2201      	movs	r2, #1
 80029e8:	4804      	ldr	r0, [pc, #16]	@ (80029fc <ST7789_WriteSmallData+0x34>)
 80029ea:	f008 fc84 	bl	800b2f6 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 80029ee:	bf00      	nop
}
 80029f0:	bf00      	nop
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	48000800 	.word	0x48000800
 80029fc:	20000898 	.word	0x20000898

08002a00 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8002a0a:	2036      	movs	r0, #54	@ 0x36
 8002a0c:	f7ff ff7a 	bl	8002904 <ST7789_WriteCommand>
	switch (m) {
 8002a10:	79fb      	ldrb	r3, [r7, #7]
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	d81a      	bhi.n	8002a4c <ST7789_SetRotation+0x4c>
 8002a16:	a201      	add	r2, pc, #4	@ (adr r2, 8002a1c <ST7789_SetRotation+0x1c>)
 8002a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1c:	08002a2d 	.word	0x08002a2d
 8002a20:	08002a35 	.word	0x08002a35
 8002a24:	08002a3d 	.word	0x08002a3d
 8002a28:	08002a45 	.word	0x08002a45
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8002a2c:	20c0      	movs	r0, #192	@ 0xc0
 8002a2e:	f7ff ffcb 	bl	80029c8 <ST7789_WriteSmallData>
		break;
 8002a32:	e00c      	b.n	8002a4e <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8002a34:	20a0      	movs	r0, #160	@ 0xa0
 8002a36:	f7ff ffc7 	bl	80029c8 <ST7789_WriteSmallData>
		break;
 8002a3a:	e008      	b.n	8002a4e <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	f7ff ffc3 	bl	80029c8 <ST7789_WriteSmallData>
		break;
 8002a42:	e004      	b.n	8002a4e <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8002a44:	2060      	movs	r0, #96	@ 0x60
 8002a46:	f7ff ffbf 	bl	80029c8 <ST7789_WriteSmallData>
		break;
 8002a4a:	e000      	b.n	8002a4e <ST7789_SetRotation+0x4e>
	default:
		break;
 8002a4c:	bf00      	nop
	}
}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop

08002a58 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8002a58:	b590      	push	{r4, r7, lr}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4604      	mov	r4, r0
 8002a60:	4608      	mov	r0, r1
 8002a62:	4611      	mov	r1, r2
 8002a64:	461a      	mov	r2, r3
 8002a66:	4623      	mov	r3, r4
 8002a68:	80fb      	strh	r3, [r7, #6]
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	80bb      	strh	r3, [r7, #4]
 8002a6e:	460b      	mov	r3, r1
 8002a70:	807b      	strh	r3, [r7, #2]
 8002a72:	4613      	mov	r3, r2
 8002a74:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8002a76:	bf00      	nop
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8002a78:	88fb      	ldrh	r3, [r7, #6]
 8002a7a:	82fb      	strh	r3, [r7, #22]
 8002a7c:	887b      	ldrh	r3, [r7, #2]
 8002a7e:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8002a80:	88bb      	ldrh	r3, [r7, #4]
 8002a82:	827b      	strh	r3, [r7, #18]
 8002a84:	883b      	ldrh	r3, [r7, #0]
 8002a86:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8002a88:	202a      	movs	r0, #42	@ 0x2a
 8002a8a:	f7ff ff3b 	bl	8002904 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8002a8e:	8afb      	ldrh	r3, [r7, #22]
 8002a90:	0a1b      	lsrs	r3, r3, #8
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	733b      	strb	r3, [r7, #12]
 8002a98:	8afb      	ldrh	r3, [r7, #22]
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	737b      	strb	r3, [r7, #13]
 8002a9e:	8abb      	ldrh	r3, [r7, #20]
 8002aa0:	0a1b      	lsrs	r3, r3, #8
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	73bb      	strb	r3, [r7, #14]
 8002aa8:	8abb      	ldrh	r3, [r7, #20]
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8002aae:	f107 030c 	add.w	r3, r7, #12
 8002ab2:	2104      	movs	r1, #4
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff ff41 	bl	800293c <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8002aba:	202b      	movs	r0, #43	@ 0x2b
 8002abc:	f7ff ff22 	bl	8002904 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8002ac0:	8a7b      	ldrh	r3, [r7, #18]
 8002ac2:	0a1b      	lsrs	r3, r3, #8
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	723b      	strb	r3, [r7, #8]
 8002aca:	8a7b      	ldrh	r3, [r7, #18]
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	727b      	strb	r3, [r7, #9]
 8002ad0:	8a3b      	ldrh	r3, [r7, #16]
 8002ad2:	0a1b      	lsrs	r3, r3, #8
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	72bb      	strb	r3, [r7, #10]
 8002ada:	8a3b      	ldrh	r3, [r7, #16]
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8002ae0:	f107 0308 	add.w	r3, r7, #8
 8002ae4:	2104      	movs	r1, #4
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff ff28 	bl	800293c <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8002aec:	202c      	movs	r0, #44	@ 0x2c
 8002aee:	f7ff ff09 	bl	8002904 <ST7789_WriteCommand>
	ST7789_UnSelect();
 8002af2:	bf00      	nop
}
 8002af4:	bf00      	nop
 8002af6:	371c      	adds	r7, #28
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd90      	pop	{r4, r7, pc}

08002afc <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8002afc:	b590      	push	{r4, r7, lr}
 8002afe:	b08b      	sub	sp, #44	@ 0x2c
 8002b00:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
 8002b02:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8002b06:	2100      	movs	r1, #0
 8002b08:	484a      	ldr	r0, [pc, #296]	@ (8002c34 <ST7789_Init+0x138>)
 8002b0a:	f010 fdfd 	bl	8013708 <memset>
	#endif
	HAL_Delay(10);
 8002b0e:	200a      	movs	r0, #10
 8002b10:	f001 fc72 	bl	80043f8 <HAL_Delay>
    ST7789_RST_Clr();
 8002b14:	2200      	movs	r2, #0
 8002b16:	2104      	movs	r1, #4
 8002b18:	4847      	ldr	r0, [pc, #284]	@ (8002c38 <ST7789_Init+0x13c>)
 8002b1a:	f005 f81d 	bl	8007b58 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8002b1e:	200a      	movs	r0, #10
 8002b20:	f001 fc6a 	bl	80043f8 <HAL_Delay>
    ST7789_RST_Set();
 8002b24:	2201      	movs	r2, #1
 8002b26:	2104      	movs	r1, #4
 8002b28:	4843      	ldr	r0, [pc, #268]	@ (8002c38 <ST7789_Init+0x13c>)
 8002b2a:	f005 f815 	bl	8007b58 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8002b2e:	2014      	movs	r0, #20
 8002b30:	f001 fc62 	bl	80043f8 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8002b34:	203a      	movs	r0, #58	@ 0x3a
 8002b36:	f7ff fee5 	bl	8002904 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8002b3a:	2055      	movs	r0, #85	@ 0x55
 8002b3c:	f7ff ff44 	bl	80029c8 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8002b40:	20b2      	movs	r0, #178	@ 0xb2
 8002b42:	f7ff fedf 	bl	8002904 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8002b46:	4a3d      	ldr	r2, [pc, #244]	@ (8002c3c <ST7789_Init+0x140>)
 8002b48:	f107 0320 	add.w	r3, r7, #32
 8002b4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b50:	6018      	str	r0, [r3, #0]
 8002b52:	3304      	adds	r3, #4
 8002b54:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8002b56:	f107 0320 	add.w	r3, r7, #32
 8002b5a:	2105      	movs	r1, #5
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff feed 	bl	800293c <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8002b62:	2003      	movs	r0, #3
 8002b64:	f7ff ff4c 	bl	8002a00 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8002b68:	20b7      	movs	r0, #183	@ 0xb7
 8002b6a:	f7ff fecb 	bl	8002904 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8002b6e:	2035      	movs	r0, #53	@ 0x35
 8002b70:	f7ff ff2a 	bl	80029c8 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8002b74:	20bb      	movs	r0, #187	@ 0xbb
 8002b76:	f7ff fec5 	bl	8002904 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8002b7a:	2019      	movs	r0, #25
 8002b7c:	f7ff ff24 	bl	80029c8 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8002b80:	20c0      	movs	r0, #192	@ 0xc0
 8002b82:	f7ff febf 	bl	8002904 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 8002b86:	202c      	movs	r0, #44	@ 0x2c
 8002b88:	f7ff ff1e 	bl	80029c8 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8002b8c:	20c2      	movs	r0, #194	@ 0xc2
 8002b8e:	f7ff feb9 	bl	8002904 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8002b92:	2001      	movs	r0, #1
 8002b94:	f7ff ff18 	bl	80029c8 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8002b98:	20c3      	movs	r0, #195	@ 0xc3
 8002b9a:	f7ff feb3 	bl	8002904 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8002b9e:	2012      	movs	r0, #18
 8002ba0:	f7ff ff12 	bl	80029c8 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8002ba4:	20c4      	movs	r0, #196	@ 0xc4
 8002ba6:	f7ff fead 	bl	8002904 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8002baa:	2020      	movs	r0, #32
 8002bac:	f7ff ff0c 	bl	80029c8 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8002bb0:	20c6      	movs	r0, #198	@ 0xc6
 8002bb2:	f7ff fea7 	bl	8002904 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8002bb6:	200f      	movs	r0, #15
 8002bb8:	f7ff ff06 	bl	80029c8 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8002bbc:	20d0      	movs	r0, #208	@ 0xd0
 8002bbe:	f7ff fea1 	bl	8002904 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8002bc2:	20a4      	movs	r0, #164	@ 0xa4
 8002bc4:	f7ff ff00 	bl	80029c8 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8002bc8:	20a1      	movs	r0, #161	@ 0xa1
 8002bca:	f7ff fefd 	bl	80029c8 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8002bce:	20e0      	movs	r0, #224	@ 0xe0
 8002bd0:	f7ff fe98 	bl	8002904 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8002bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c40 <ST7789_Init+0x144>)
 8002bd6:	f107 0410 	add.w	r4, r7, #16
 8002bda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bdc:	c407      	stmia	r4!, {r0, r1, r2}
 8002bde:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8002be0:	f107 0310 	add.w	r3, r7, #16
 8002be4:	210e      	movs	r1, #14
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff fea8 	bl	800293c <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8002bec:	20e1      	movs	r0, #225	@ 0xe1
 8002bee:	f7ff fe89 	bl	8002904 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8002bf2:	4b14      	ldr	r3, [pc, #80]	@ (8002c44 <ST7789_Init+0x148>)
 8002bf4:	463c      	mov	r4, r7
 8002bf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bf8:	c407      	stmia	r4!, {r0, r1, r2}
 8002bfa:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8002bfc:	463b      	mov	r3, r7
 8002bfe:	210e      	movs	r1, #14
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff fe9b 	bl	800293c <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8002c06:	2021      	movs	r0, #33	@ 0x21
 8002c08:	f7ff fe7c 	bl	8002904 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8002c0c:	2011      	movs	r0, #17
 8002c0e:	f7ff fe79 	bl	8002904 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8002c12:	2013      	movs	r0, #19
 8002c14:	f7ff fe76 	bl	8002904 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8002c18:	2029      	movs	r0, #41	@ 0x29
 8002c1a:	f7ff fe73 	bl	8002904 <ST7789_WriteCommand>

	HAL_Delay(50);
 8002c1e:	2032      	movs	r0, #50	@ 0x32
 8002c20:	f001 fbea 	bl	80043f8 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8002c24:	2000      	movs	r0, #0
 8002c26:	f000 f80f 	bl	8002c48 <ST7789_Fill_Color>
}
 8002c2a:	bf00      	nop
 8002c2c:	372c      	adds	r7, #44	@ 0x2c
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd90      	pop	{r4, r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20001c90 	.word	0x20001c90
 8002c38:	48000c00 	.word	0x48000c00
 8002c3c:	08016dd8 	.word	0x08016dd8
 8002c40:	08016de0 	.word	0x08016de0
 8002c44:	08016df0 	.word	0x08016df0

08002c48 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8002c52:	23ef      	movs	r3, #239	@ 0xef
 8002c54:	f240 123f 	movw	r2, #319	@ 0x13f
 8002c58:	2100      	movs	r1, #0
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	f7ff fefc 	bl	8002a58 <ST7789_SetAddressWindow>
	ST7789_Select();
 8002c60:	bf00      	nop

	#ifdef USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8002c62:	2300      	movs	r3, #0
 8002c64:	81fb      	strh	r3, [r7, #14]
 8002c66:	e00e      	b.n	8002c86 <ST7789_Fill_Color+0x3e>
		{
			memset(disp_buf, color, sizeof(disp_buf));
 8002c68:	88fb      	ldrh	r3, [r7, #6]
 8002c6a:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4809      	ldr	r0, [pc, #36]	@ (8002c98 <ST7789_Fill_Color+0x50>)
 8002c72:	f010 fd49 	bl	8013708 <memset>
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
 8002c76:	f44f 6148 	mov.w	r1, #3200	@ 0xc80
 8002c7a:	4807      	ldr	r0, [pc, #28]	@ (8002c98 <ST7789_Fill_Color+0x50>)
 8002c7c:	f7ff fe5e 	bl	800293c <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8002c80:	89fb      	ldrh	r3, [r7, #14]
 8002c82:	3301      	adds	r3, #1
 8002c84:	81fb      	strh	r3, [r7, #14]
 8002c86:	89fb      	ldrh	r3, [r7, #14]
 8002c88:	2b2f      	cmp	r3, #47	@ 0x2f
 8002c8a:	d9ed      	bls.n	8002c68 <ST7789_Fill_Color+0x20>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 8002c8c:	bf00      	nop
}
 8002c8e:	bf00      	nop
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20001c90 	.word	0x20001c90

08002c9c <ST7789_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	80fb      	strh	r3, [r7, #6]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	80bb      	strh	r3, [r7, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 8002cae:	88fb      	ldrh	r3, [r7, #6]
 8002cb0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002cb4:	d219      	bcs.n	8002cea <ST7789_DrawPixel+0x4e>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8002cb6:	88bb      	ldrh	r3, [r7, #4]
 8002cb8:	2bef      	cmp	r3, #239	@ 0xef
 8002cba:	d816      	bhi.n	8002cea <ST7789_DrawPixel+0x4e>
	
	ST7789_SetAddressWindow(x, y, x, y);
 8002cbc:	88bb      	ldrh	r3, [r7, #4]
 8002cbe:	88fa      	ldrh	r2, [r7, #6]
 8002cc0:	88b9      	ldrh	r1, [r7, #4]
 8002cc2:	88f8      	ldrh	r0, [r7, #6]
 8002cc4:	f7ff fec8 	bl	8002a58 <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 8002cc8:	887b      	ldrh	r3, [r7, #2]
 8002cca:	0a1b      	lsrs	r3, r3, #8
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	733b      	strb	r3, [r7, #12]
 8002cd2:	887b      	ldrh	r3, [r7, #2]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	737b      	strb	r3, [r7, #13]
	ST7789_Select();
 8002cd8:	bf00      	nop
	ST7789_WriteData(data, sizeof(data));
 8002cda:	f107 030c 	add.w	r3, r7, #12
 8002cde:	2102      	movs	r1, #2
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff fe2b 	bl	800293c <ST7789_WriteData>
	ST7789_UnSelect();
 8002ce6:	bf00      	nop
 8002ce8:	e000      	b.n	8002cec <ST7789_DrawPixel+0x50>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8002cea:	bf00      	nop
}
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <ST7789_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void ST7789_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t *data)
{
 8002cf2:	b590      	push	{r4, r7, lr}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	4604      	mov	r4, r0
 8002cfa:	4608      	mov	r0, r1
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	461a      	mov	r2, r3
 8002d00:	4623      	mov	r3, r4
 8002d02:	80fb      	strh	r3, [r7, #6]
 8002d04:	4603      	mov	r3, r0
 8002d06:	80bb      	strh	r3, [r7, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	807b      	strh	r3, [r7, #2]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	803b      	strh	r3, [r7, #0]
	if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT))
 8002d10:	88fb      	ldrh	r3, [r7, #6]
 8002d12:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002d16:	d22a      	bcs.n	8002d6e <ST7789_DrawImage+0x7c>
 8002d18:	88bb      	ldrh	r3, [r7, #4]
 8002d1a:	2bef      	cmp	r3, #239	@ 0xef
 8002d1c:	d827      	bhi.n	8002d6e <ST7789_DrawImage+0x7c>
		return;
	if ((x + w - 1) >= ST7789_WIDTH)
 8002d1e:	88fa      	ldrh	r2, [r7, #6]
 8002d20:	887b      	ldrh	r3, [r7, #2]
 8002d22:	4413      	add	r3, r2
 8002d24:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002d28:	dc23      	bgt.n	8002d72 <ST7789_DrawImage+0x80>
		return;
	if ((y + h - 1) >= ST7789_HEIGHT)
 8002d2a:	88ba      	ldrh	r2, [r7, #4]
 8002d2c:	883b      	ldrh	r3, [r7, #0]
 8002d2e:	4413      	add	r3, r2
 8002d30:	2bf0      	cmp	r3, #240	@ 0xf0
 8002d32:	dc20      	bgt.n	8002d76 <ST7789_DrawImage+0x84>
		return;

	ST7789_Select();
 8002d34:	bf00      	nop
	ST7789_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8002d36:	88fa      	ldrh	r2, [r7, #6]
 8002d38:	887b      	ldrh	r3, [r7, #2]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29c      	uxth	r4, r3
 8002d42:	88ba      	ldrh	r2, [r7, #4]
 8002d44:	883b      	ldrh	r3, [r7, #0]
 8002d46:	4413      	add	r3, r2
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	88b9      	ldrh	r1, [r7, #4]
 8002d50:	88f8      	ldrh	r0, [r7, #6]
 8002d52:	4622      	mov	r2, r4
 8002d54:	f7ff fe80 	bl	8002a58 <ST7789_SetAddressWindow>
	ST7789_WriteData((uint8_t *)data, sizeof(uint16_t) * w * h);
 8002d58:	887b      	ldrh	r3, [r7, #2]
 8002d5a:	883a      	ldrh	r2, [r7, #0]
 8002d5c:	fb02 f303 	mul.w	r3, r2, r3
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	4619      	mov	r1, r3
 8002d64:	69b8      	ldr	r0, [r7, #24]
 8002d66:	f7ff fde9 	bl	800293c <ST7789_WriteData>
	ST7789_UnSelect();
 8002d6a:	bf00      	nop
 8002d6c:	e004      	b.n	8002d78 <ST7789_DrawImage+0x86>
		return;
 8002d6e:	bf00      	nop
 8002d70:	e002      	b.n	8002d78 <ST7789_DrawImage+0x86>
		return;
 8002d72:	bf00      	nop
 8002d74:	e000      	b.n	8002d78 <ST7789_DrawImage+0x86>
		return;
 8002d76:	bf00      	nop
}
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd90      	pop	{r4, r7, pc}

08002d7e <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8002d7e:	b082      	sub	sp, #8
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b088      	sub	sp, #32
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d88:	4603      	mov	r3, r0
 8002d8a:	80fb      	strh	r3, [r7, #6]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	80bb      	strh	r3, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8002d94:	bf00      	nop
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8002d96:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	88fb      	ldrh	r3, [r7, #6]
 8002d9e:	4413      	add	r3, r2
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002daa:	4619      	mov	r1, r3
 8002dac:	88bb      	ldrh	r3, [r7, #4]
 8002dae:	440b      	add	r3, r1
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	3b01      	subs	r3, #1
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	88b9      	ldrh	r1, [r7, #4]
 8002db8:	88f8      	ldrh	r0, [r7, #6]
 8002dba:	f7ff fe4d 	bl	8002a58 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61fb      	str	r3, [r7, #28]
 8002dc2:	e041      	b.n	8002e48 <ST7789_WriteChar+0xca>
		b = font.data[(ch - 32) * font.height + i];
 8002dc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dc6:	78fb      	ldrb	r3, [r7, #3]
 8002dc8:	3b20      	subs	r3, #32
 8002dca:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8002dce:	fb01 f303 	mul.w	r3, r1, r3
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	440b      	add	r3, r1
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	4413      	add	r3, r2
 8002ddc:	881b      	ldrh	r3, [r3, #0]
 8002dde:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8002de0:	2300      	movs	r3, #0
 8002de2:	61bb      	str	r3, [r7, #24]
 8002de4:	e027      	b.n	8002e36 <ST7789_WriteChar+0xb8>
			if ((b << j) & 0x8000) {
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00e      	beq.n	8002e14 <ST7789_WriteChar+0x96>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8002df6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002df8:	0a1b      	lsrs	r3, r3, #8
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	743b      	strb	r3, [r7, #16]
 8002e00:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8002e06:	f107 0310 	add.w	r3, r7, #16
 8002e0a:	2102      	movs	r1, #2
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff fd95 	bl	800293c <ST7789_WriteData>
 8002e12:	e00d      	b.n	8002e30 <ST7789_WriteChar+0xb2>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8002e14:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002e16:	0a1b      	lsrs	r3, r3, #8
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	733b      	strb	r3, [r7, #12]
 8002e1e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 8002e24:	f107 030c 	add.w	r3, r7, #12
 8002e28:	2102      	movs	r1, #2
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff fd86 	bl	800293c <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	3301      	adds	r3, #1
 8002e34:	61bb      	str	r3, [r7, #24]
 8002e36:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d3d1      	bcc.n	8002de6 <ST7789_WriteChar+0x68>
	for (i = 0; i < font.height; i++) {
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	3301      	adds	r3, #1
 8002e46:	61fb      	str	r3, [r7, #28]
 8002e48:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d3b7      	bcc.n	8002dc4 <ST7789_WriteChar+0x46>
			}
		}
	}
	ST7789_UnSelect();
 8002e54:	bf00      	nop
}
 8002e56:	bf00      	nop
 8002e58:	3720      	adds	r7, #32
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e60:	b002      	add	sp, #8
 8002e62:	4770      	bx	lr

08002e64 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8002e64:	b082      	sub	sp, #8
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b086      	sub	sp, #24
 8002e6a:	af04      	add	r7, sp, #16
 8002e6c:	603a      	str	r2, [r7, #0]
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	4603      	mov	r3, r0
 8002e72:	80fb      	strh	r3, [r7, #6]
 8002e74:	460b      	mov	r3, r1
 8002e76:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8002e78:	bf00      	nop
	while (*str) {
 8002e7a:	e02e      	b.n	8002eda <ST7789_WriteString+0x76>
		if (x + font.width >= ST7789_WIDTH) {
 8002e7c:	88fb      	ldrh	r3, [r7, #6]
 8002e7e:	7d3a      	ldrb	r2, [r7, #20]
 8002e80:	4413      	add	r3, r2
 8002e82:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002e86:	db13      	blt.n	8002eb0 <ST7789_WriteString+0x4c>
			x = 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8002e8c:	7d7b      	ldrb	r3, [r7, #21]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	88bb      	ldrh	r3, [r7, #4]
 8002e92:	4413      	add	r3, r2
 8002e94:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8002e96:	88bb      	ldrh	r3, [r7, #4]
 8002e98:	7d7a      	ldrb	r2, [r7, #21]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	2bef      	cmp	r3, #239	@ 0xef
 8002e9e:	dc21      	bgt.n	8002ee4 <ST7789_WriteString+0x80>
				break;
			}

			if (*str == ' ') {
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b20      	cmp	r3, #32
 8002ea6:	d103      	bne.n	8002eb0 <ST7789_WriteString+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	603b      	str	r3, [r7, #0]
				continue;
 8002eae:	e014      	b.n	8002eda <ST7789_WriteString+0x76>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	781a      	ldrb	r2, [r3, #0]
 8002eb4:	88b9      	ldrh	r1, [r7, #4]
 8002eb6:	88f8      	ldrh	r0, [r7, #6]
 8002eb8:	8c3b      	ldrh	r3, [r7, #32]
 8002eba:	9302      	str	r3, [sp, #8]
 8002ebc:	8bbb      	ldrh	r3, [r7, #28]
 8002ebe:	9301      	str	r3, [sp, #4]
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	f7ff ff5a 	bl	8002d7e <ST7789_WriteChar>
		x += font.width;
 8002eca:	7d3b      	ldrb	r3, [r7, #20]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	88fb      	ldrh	r3, [r7, #6]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	80fb      	strh	r3, [r7, #6]
		str++;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	603b      	str	r3, [r7, #0]
	while (*str) {
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1cc      	bne.n	8002e7c <ST7789_WriteString+0x18>
 8002ee2:	e000      	b.n	8002ee6 <ST7789_WriteString+0x82>
				break;
 8002ee4:	bf00      	nop
	}
	ST7789_UnSelect();
 8002ee6:	bf00      	nop
}
 8002ee8:	bf00      	nop
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ef2:	b002      	add	sp, #8
 8002ef4:	4770      	bx	lr
	...

08002ef8 <View_DoubaoWelcome>:
		ST7789_DrawCircle(90, 210, 10, WHITE);
		ST7789_DrawRectangle(140, 200, 160, 220, WHITE);
	}


void View_DoubaoWelcome(void){
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af04      	add	r7, sp, #16
		ST7789_DrawImage(10, 10, 160, 160, (uint16_t *)doubao);
 8002efe:	4b0c      	ldr	r3, [pc, #48]	@ (8002f30 <View_DoubaoWelcome+0x38>)
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	23a0      	movs	r3, #160	@ 0xa0
 8002f04:	22a0      	movs	r2, #160	@ 0xa0
 8002f06:	210a      	movs	r1, #10
 8002f08:	200a      	movs	r0, #10
 8002f0a:	f7ff fef2 	bl	8002cf2 <ST7789_DrawImage>
		ST7789_WriteString(0, 180, " !\"#$\%&\'\(\)\*+,-.", Han_Array, WHITE, BLACK);
 8002f0e:	4b09      	ldr	r3, [pc, #36]	@ (8002f34 <View_DoubaoWelcome+0x3c>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	9202      	str	r2, [sp, #8]
 8002f14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f18:	9201      	str	r2, [sp, #4]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	9200      	str	r2, [sp, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a05      	ldr	r2, [pc, #20]	@ (8002f38 <View_DoubaoWelcome+0x40>)
 8002f22:	21b4      	movs	r1, #180	@ 0xb4
 8002f24:	2000      	movs	r0, #0
 8002f26:	f7ff ff9d 	bl	8002e64 <ST7789_WriteString>
//		ST7789_WriteString(170, 180, "", Han_Array, WHITE, BLACK);
	}
 8002f2a:	bf00      	nop
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	08017c84 	.word	0x08017c84
 8002f34:	20000008 	.word	0x20000008
 8002f38:	08016e70 	.word	0x08016e70
 8002f3c:	00000000 	.word	0x00000000

08002f40 <View_Sensor>:

void View_Sensor(void){
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af04      	add	r7, sp, #16
	sprintf(BUFFER_Display,"ENC1:%5d",htim4.Instance->CNT);
 8002f46:	4b78      	ldr	r3, [pc, #480]	@ (8003128 <View_Sensor+0x1e8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	4977      	ldr	r1, [pc, #476]	@ (800312c <View_Sensor+0x1ec>)
 8002f50:	4877      	ldr	r0, [pc, #476]	@ (8003130 <View_Sensor+0x1f0>)
 8002f52:	f010 fae1 	bl	8013518 <siprintf>
	ST7789_WriteString(200, 10, BUFFER_Display, Font_11x18, WHITE, BLACK);
 8002f56:	4b77      	ldr	r3, [pc, #476]	@ (8003134 <View_Sensor+0x1f4>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	9202      	str	r2, [sp, #8]
 8002f5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f60:	9201      	str	r2, [sp, #4]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	9200      	str	r2, [sp, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a71      	ldr	r2, [pc, #452]	@ (8003130 <View_Sensor+0x1f0>)
 8002f6a:	210a      	movs	r1, #10
 8002f6c:	20c8      	movs	r0, #200	@ 0xc8
 8002f6e:	f7ff ff79 	bl	8002e64 <ST7789_WriteString>
	sprintf(BUFFER_Display,"ENC2:%5d",htim3.Instance->CNT);
 8002f72:	4b71      	ldr	r3, [pc, #452]	@ (8003138 <View_Sensor+0x1f8>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4970      	ldr	r1, [pc, #448]	@ (800313c <View_Sensor+0x1fc>)
 8002f7c:	486c      	ldr	r0, [pc, #432]	@ (8003130 <View_Sensor+0x1f0>)
 8002f7e:	f010 facb 	bl	8013518 <siprintf>
	ST7789_WriteString(200, 40, BUFFER_Display, Font_11x18, WHITE, BLACK);
 8002f82:	4b6c      	ldr	r3, [pc, #432]	@ (8003134 <View_Sensor+0x1f4>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	9202      	str	r2, [sp, #8]
 8002f88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f8c:	9201      	str	r2, [sp, #4]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	9200      	str	r2, [sp, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a66      	ldr	r2, [pc, #408]	@ (8003130 <View_Sensor+0x1f0>)
 8002f96:	2128      	movs	r1, #40	@ 0x28
 8002f98:	20c8      	movs	r0, #200	@ 0xc8
 8002f9a:	f7ff ff63 	bl	8002e64 <ST7789_WriteString>
	sprintf(BUFFER_Display,"ENC3:%5d",htim20.Instance->CNT);
 8002f9e:	4b68      	ldr	r3, [pc, #416]	@ (8003140 <View_Sensor+0x200>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4967      	ldr	r1, [pc, #412]	@ (8003144 <View_Sensor+0x204>)
 8002fa8:	4861      	ldr	r0, [pc, #388]	@ (8003130 <View_Sensor+0x1f0>)
 8002faa:	f010 fab5 	bl	8013518 <siprintf>
	ST7789_WriteString(200, 70, BUFFER_Display, Font_11x18, WHITE, BLACK);
 8002fae:	4b61      	ldr	r3, [pc, #388]	@ (8003134 <View_Sensor+0x1f4>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	9202      	str	r2, [sp, #8]
 8002fb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002fb8:	9201      	str	r2, [sp, #4]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	9200      	str	r2, [sp, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a5b      	ldr	r2, [pc, #364]	@ (8003130 <View_Sensor+0x1f0>)
 8002fc2:	2146      	movs	r1, #70	@ 0x46
 8002fc4:	20c8      	movs	r0, #200	@ 0xc8
 8002fc6:	f7ff ff4d 	bl	8002e64 <ST7789_WriteString>
	sprintf(BUFFER_Display,"ENC4:%5d",htim1.Instance->CNT);
 8002fca:	4b5f      	ldr	r3, [pc, #380]	@ (8003148 <View_Sensor+0x208>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	495e      	ldr	r1, [pc, #376]	@ (800314c <View_Sensor+0x20c>)
 8002fd4:	4856      	ldr	r0, [pc, #344]	@ (8003130 <View_Sensor+0x1f0>)
 8002fd6:	f010 fa9f 	bl	8013518 <siprintf>
	ST7789_WriteString(200, 100, BUFFER_Display, Font_11x18, WHITE, BLACK);
 8002fda:	4b56      	ldr	r3, [pc, #344]	@ (8003134 <View_Sensor+0x1f4>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	9202      	str	r2, [sp, #8]
 8002fe0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002fe4:	9201      	str	r2, [sp, #4]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	9200      	str	r2, [sp, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a50      	ldr	r2, [pc, #320]	@ (8003130 <View_Sensor+0x1f0>)
 8002fee:	2164      	movs	r1, #100	@ 0x64
 8002ff0:	20c8      	movs	r0, #200	@ 0xc8
 8002ff2:	f7ff ff37 	bl	8002e64 <ST7789_WriteString>

	sprintf(BUFFER_Display,"KEYs:%5d",BUFFER_SYS_ADC[0]);
 8002ff6:	4b56      	ldr	r3, [pc, #344]	@ (8003150 <View_Sensor+0x210>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	4955      	ldr	r1, [pc, #340]	@ (8003154 <View_Sensor+0x214>)
 8002ffe:	484c      	ldr	r0, [pc, #304]	@ (8003130 <View_Sensor+0x1f0>)
 8003000:	f010 fa8a 	bl	8013518 <siprintf>
	ST7789_WriteString(200, 130, BUFFER_Display, Font_11x18, WHITE, BLACK);
 8003004:	4b4b      	ldr	r3, [pc, #300]	@ (8003134 <View_Sensor+0x1f4>)
 8003006:	2200      	movs	r2, #0
 8003008:	9202      	str	r2, [sp, #8]
 800300a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800300e:	9201      	str	r2, [sp, #4]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	9200      	str	r2, [sp, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a46      	ldr	r2, [pc, #280]	@ (8003130 <View_Sensor+0x1f0>)
 8003018:	2182      	movs	r1, #130	@ 0x82
 800301a:	20c8      	movs	r0, #200	@ 0xc8
 800301c:	f7ff ff22 	bl	8002e64 <ST7789_WriteString>

	float temperate=(((float)BUFFER_SYS_ADC[1]*(3.3/4096)-0.76)/0.0025 + 30); //转换为温度值;
 8003020:	4b4b      	ldr	r3, [pc, #300]	@ (8003150 <View_Sensor+0x210>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	ee07 3a90 	vmov	s15, r3
 8003028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800302c:	ee17 0a90 	vmov	r0, s15
 8003030:	f7fd fab2 	bl	8000598 <__aeabi_f2d>
 8003034:	a336      	add	r3, pc, #216	@ (adr r3, 8003110 <View_Sensor+0x1d0>)
 8003036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303a:	f7fd fb05 	bl	8000648 <__aeabi_dmul>
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	4610      	mov	r0, r2
 8003044:	4619      	mov	r1, r3
 8003046:	a334      	add	r3, pc, #208	@ (adr r3, 8003118 <View_Sensor+0x1d8>)
 8003048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304c:	f7fd f944 	bl	80002d8 <__aeabi_dsub>
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	4610      	mov	r0, r2
 8003056:	4619      	mov	r1, r3
 8003058:	a331      	add	r3, pc, #196	@ (adr r3, 8003120 <View_Sensor+0x1e0>)
 800305a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305e:	f7fd fc1d 	bl	800089c <__aeabi_ddiv>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	4610      	mov	r0, r2
 8003068:	4619      	mov	r1, r3
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	4b3a      	ldr	r3, [pc, #232]	@ (8003158 <View_Sensor+0x218>)
 8003070:	f7fd f934 	bl	80002dc <__adddf3>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	4610      	mov	r0, r2
 800307a:	4619      	mov	r1, r3
 800307c:	f7fd fddc 	bl	8000c38 <__aeabi_d2f>
 8003080:	4603      	mov	r3, r0
 8003082:	607b      	str	r3, [r7, #4]
	sprintf(BUFFER_Display,"TEMP:%4.1f",temperate);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7fd fa87 	bl	8000598 <__aeabi_f2d>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	4933      	ldr	r1, [pc, #204]	@ (800315c <View_Sensor+0x21c>)
 8003090:	4827      	ldr	r0, [pc, #156]	@ (8003130 <View_Sensor+0x1f0>)
 8003092:	f010 fa41 	bl	8013518 <siprintf>
	ST7789_WriteString(200, 160, BUFFER_Display, Font_11x18, WHITE, BLACK);
 8003096:	4b27      	ldr	r3, [pc, #156]	@ (8003134 <View_Sensor+0x1f4>)
 8003098:	2200      	movs	r2, #0
 800309a:	9202      	str	r2, [sp, #8]
 800309c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030a0:	9201      	str	r2, [sp, #4]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	9200      	str	r2, [sp, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a21      	ldr	r2, [pc, #132]	@ (8003130 <View_Sensor+0x1f0>)
 80030aa:	21a0      	movs	r1, #160	@ 0xa0
 80030ac:	20c8      	movs	r0, #200	@ 0xc8
 80030ae:	f7ff fed9 	bl	8002e64 <ST7789_WriteString>

	sprintf(BUFFER_Display,"Vbat:%5d",BUFFER_SYS_ADC[2]);
 80030b2:	4b27      	ldr	r3, [pc, #156]	@ (8003150 <View_Sensor+0x210>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	461a      	mov	r2, r3
 80030b8:	4929      	ldr	r1, [pc, #164]	@ (8003160 <View_Sensor+0x220>)
 80030ba:	481d      	ldr	r0, [pc, #116]	@ (8003130 <View_Sensor+0x1f0>)
 80030bc:	f010 fa2c 	bl	8013518 <siprintf>
	ST7789_WriteString(200, 190, BUFFER_Display, Font_11x18, WHITE, BLACK);
 80030c0:	4b1c      	ldr	r3, [pc, #112]	@ (8003134 <View_Sensor+0x1f4>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	9202      	str	r2, [sp, #8]
 80030c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030ca:	9201      	str	r2, [sp, #4]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	9200      	str	r2, [sp, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a17      	ldr	r2, [pc, #92]	@ (8003130 <View_Sensor+0x1f0>)
 80030d4:	21be      	movs	r1, #190	@ 0xbe
 80030d6:	20c8      	movs	r0, #200	@ 0xc8
 80030d8:	f7ff fec4 	bl	8002e64 <ST7789_WriteString>

	sprintf(BUFFER_Display,"Vref:%5d",BUFFER_SYS_ADC[3]);
 80030dc:	4b1c      	ldr	r3, [pc, #112]	@ (8003150 <View_Sensor+0x210>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	461a      	mov	r2, r3
 80030e2:	4920      	ldr	r1, [pc, #128]	@ (8003164 <View_Sensor+0x224>)
 80030e4:	4812      	ldr	r0, [pc, #72]	@ (8003130 <View_Sensor+0x1f0>)
 80030e6:	f010 fa17 	bl	8013518 <siprintf>
	ST7789_WriteString(200, 220, BUFFER_Display, Font_11x18, WHITE, BLACK);
 80030ea:	4b12      	ldr	r3, [pc, #72]	@ (8003134 <View_Sensor+0x1f4>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	9202      	str	r2, [sp, #8]
 80030f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030f4:	9201      	str	r2, [sp, #4]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	9200      	str	r2, [sp, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a0c      	ldr	r2, [pc, #48]	@ (8003130 <View_Sensor+0x1f0>)
 80030fe:	21dc      	movs	r1, #220	@ 0xdc
 8003100:	20c8      	movs	r0, #200	@ 0xc8
 8003102:	f7ff feaf 	bl	8002e64 <ST7789_WriteString>

	}
 8003106:	bf00      	nop
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	66666666 	.word	0x66666666
 8003114:	3f4a6666 	.word	0x3f4a6666
 8003118:	851eb852 	.word	0x851eb852
 800311c:	3fe851eb 	.word	0x3fe851eb
 8003120:	47ae147b 	.word	0x47ae147b
 8003124:	3f647ae1 	.word	0x3f647ae1
 8003128:	200009f4 	.word	0x200009f4
 800312c:	08016e80 	.word	0x08016e80
 8003130:	20002910 	.word	0x20002910
 8003134:	20000000 	.word	0x20000000
 8003138:	200009a8 	.word	0x200009a8
 800313c:	08016e8c 	.word	0x08016e8c
 8003140:	20000b70 	.word	0x20000b70
 8003144:	08016e98 	.word	0x08016e98
 8003148:	2000095c 	.word	0x2000095c
 800314c:	08016ea4 	.word	0x08016ea4
 8003150:	20000c7c 	.word	0x20000c7c
 8003154:	08016eb0 	.word	0x08016eb0
 8003158:	403e0000 	.word	0x403e0000
 800315c:	08016ebc 	.word	0x08016ebc
 8003160:	08016ec8 	.word	0x08016ec8
 8003164:	08016ed4 	.word	0x08016ed4

08003168 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800316e:	4b11      	ldr	r3, [pc, #68]	@ (80031b4 <HAL_MspInit+0x4c>)
 8003170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003172:	4a10      	ldr	r2, [pc, #64]	@ (80031b4 <HAL_MspInit+0x4c>)
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	6613      	str	r3, [r2, #96]	@ 0x60
 800317a:	4b0e      	ldr	r3, [pc, #56]	@ (80031b4 <HAL_MspInit+0x4c>)
 800317c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	607b      	str	r3, [r7, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003186:	4b0b      	ldr	r3, [pc, #44]	@ (80031b4 <HAL_MspInit+0x4c>)
 8003188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318a:	4a0a      	ldr	r2, [pc, #40]	@ (80031b4 <HAL_MspInit+0x4c>)
 800318c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003190:	6593      	str	r3, [r2, #88]	@ 0x58
 8003192:	4b08      	ldr	r3, [pc, #32]	@ (80031b4 <HAL_MspInit+0x4c>)
 8003194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800319a:	603b      	str	r3, [r7, #0]
 800319c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 800319e:	f001 f961 	bl	8004464 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 80031a2:	2002      	movs	r0, #2
 80031a4:	f001 f94a 	bl	800443c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80031a8:	f007 f842 	bl	800a230 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031ac:	bf00      	nop
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40021000 	.word	0x40021000

080031b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b0a2      	sub	sp, #136	@ 0x88
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	605a      	str	r2, [r3, #4]
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	60da      	str	r2, [r3, #12]
 80031ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031d0:	f107 0320 	add.w	r3, r7, #32
 80031d4:	2254      	movs	r2, #84	@ 0x54
 80031d6:	2100      	movs	r1, #0
 80031d8:	4618      	mov	r0, r3
 80031da:	f010 fa95 	bl	8013708 <memset>
  if(hadc->Instance==ADC2)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a91      	ldr	r2, [pc, #580]	@ (8003428 <HAL_ADC_MspInit+0x270>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d160      	bne.n	80032aa <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80031e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031ec:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80031ee:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80031f2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031f4:	f107 0320 	add.w	r3, r7, #32
 80031f8:	4618      	mov	r0, r3
 80031fa:	f007 fd83 	bl	800ad04 <HAL_RCCEx_PeriphCLKConfig>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003204:	f7ff fb78 	bl	80028f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003208:	4b88      	ldr	r3, [pc, #544]	@ (800342c <HAL_ADC_MspInit+0x274>)
 800320a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800320c:	4a87      	ldr	r2, [pc, #540]	@ (800342c <HAL_ADC_MspInit+0x274>)
 800320e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003212:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003214:	4b85      	ldr	r3, [pc, #532]	@ (800342c <HAL_ADC_MspInit+0x274>)
 8003216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003218:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800321c:	61fb      	str	r3, [r7, #28]
 800321e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003220:	4b82      	ldr	r3, [pc, #520]	@ (800342c <HAL_ADC_MspInit+0x274>)
 8003222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003224:	4a81      	ldr	r2, [pc, #516]	@ (800342c <HAL_ADC_MspInit+0x274>)
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800322c:	4b7f      	ldr	r3, [pc, #508]	@ (800342c <HAL_ADC_MspInit+0x274>)
 800322e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	61bb      	str	r3, [r7, #24]
 8003236:	69bb      	ldr	r3, [r7, #24]
    /**ADC2 GPIO Configuration
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003238:	2380      	movs	r3, #128	@ 0x80
 800323a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800323c:	2303      	movs	r3, #3
 800323e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003240:	2300      	movs	r3, #0
 8003242:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003244:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003248:	4619      	mov	r1, r3
 800324a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800324e:	f004 fb01 	bl	8007854 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel5;
 8003252:	4b77      	ldr	r3, [pc, #476]	@ (8003430 <HAL_ADC_MspInit+0x278>)
 8003254:	4a77      	ldr	r2, [pc, #476]	@ (8003434 <HAL_ADC_MspInit+0x27c>)
 8003256:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8003258:	4b75      	ldr	r3, [pc, #468]	@ (8003430 <HAL_ADC_MspInit+0x278>)
 800325a:	2224      	movs	r2, #36	@ 0x24
 800325c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800325e:	4b74      	ldr	r3, [pc, #464]	@ (8003430 <HAL_ADC_MspInit+0x278>)
 8003260:	2200      	movs	r2, #0
 8003262:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003264:	4b72      	ldr	r3, [pc, #456]	@ (8003430 <HAL_ADC_MspInit+0x278>)
 8003266:	2200      	movs	r2, #0
 8003268:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800326a:	4b71      	ldr	r3, [pc, #452]	@ (8003430 <HAL_ADC_MspInit+0x278>)
 800326c:	2280      	movs	r2, #128	@ 0x80
 800326e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003270:	4b6f      	ldr	r3, [pc, #444]	@ (8003430 <HAL_ADC_MspInit+0x278>)
 8003272:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003276:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003278:	4b6d      	ldr	r3, [pc, #436]	@ (8003430 <HAL_ADC_MspInit+0x278>)
 800327a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800327e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8003280:	4b6b      	ldr	r3, [pc, #428]	@ (8003430 <HAL_ADC_MspInit+0x278>)
 8003282:	2200      	movs	r2, #0
 8003284:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003286:	4b6a      	ldr	r3, [pc, #424]	@ (8003430 <HAL_ADC_MspInit+0x278>)
 8003288:	2200      	movs	r2, #0
 800328a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800328c:	4868      	ldr	r0, [pc, #416]	@ (8003430 <HAL_ADC_MspInit+0x278>)
 800328e:	f004 f86f 	bl	8007370 <HAL_DMA_Init>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8003298:	f7ff fb2e 	bl	80028f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a64      	ldr	r2, [pc, #400]	@ (8003430 <HAL_ADC_MspInit+0x278>)
 80032a0:	655a      	str	r2, [r3, #84]	@ 0x54
 80032a2:	4a63      	ldr	r2, [pc, #396]	@ (8003430 <HAL_ADC_MspInit+0x278>)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 80032a8:	e0ba      	b.n	8003420 <HAL_ADC_MspInit+0x268>
  else if(hadc->Instance==ADC3)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a62      	ldr	r2, [pc, #392]	@ (8003438 <HAL_ADC_MspInit+0x280>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d13e      	bne.n	8003332 <HAL_ADC_MspInit+0x17a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80032b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80032b8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 80032ba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80032be:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032c0:	f107 0320 	add.w	r3, r7, #32
 80032c4:	4618      	mov	r0, r3
 80032c6:	f007 fd1d 	bl	800ad04 <HAL_RCCEx_PeriphCLKConfig>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <HAL_ADC_MspInit+0x11c>
      Error_Handler();
 80032d0:	f7ff fb12 	bl	80028f8 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80032d4:	4b59      	ldr	r3, [pc, #356]	@ (800343c <HAL_ADC_MspInit+0x284>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3301      	adds	r3, #1
 80032da:	4a58      	ldr	r2, [pc, #352]	@ (800343c <HAL_ADC_MspInit+0x284>)
 80032dc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80032de:	4b57      	ldr	r3, [pc, #348]	@ (800343c <HAL_ADC_MspInit+0x284>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d10b      	bne.n	80032fe <HAL_ADC_MspInit+0x146>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80032e6:	4b51      	ldr	r3, [pc, #324]	@ (800342c <HAL_ADC_MspInit+0x274>)
 80032e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ea:	4a50      	ldr	r2, [pc, #320]	@ (800342c <HAL_ADC_MspInit+0x274>)
 80032ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032f2:	4b4e      	ldr	r3, [pc, #312]	@ (800342c <HAL_ADC_MspInit+0x274>)
 80032f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032fe:	4b4b      	ldr	r3, [pc, #300]	@ (800342c <HAL_ADC_MspInit+0x274>)
 8003300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003302:	4a4a      	ldr	r2, [pc, #296]	@ (800342c <HAL_ADC_MspInit+0x274>)
 8003304:	f043 0302 	orr.w	r3, r3, #2
 8003308:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800330a:	4b48      	ldr	r3, [pc, #288]	@ (800342c <HAL_ADC_MspInit+0x274>)
 800330c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	613b      	str	r3, [r7, #16]
 8003314:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003316:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800331a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800331c:	2303      	movs	r3, #3
 800331e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003320:	2300      	movs	r3, #0
 8003322:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003324:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003328:	4619      	mov	r1, r3
 800332a:	4845      	ldr	r0, [pc, #276]	@ (8003440 <HAL_ADC_MspInit+0x288>)
 800332c:	f004 fa92 	bl	8007854 <HAL_GPIO_Init>
}
 8003330:	e076      	b.n	8003420 <HAL_ADC_MspInit+0x268>
  else if(hadc->Instance==ADC5)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a43      	ldr	r2, [pc, #268]	@ (8003444 <HAL_ADC_MspInit+0x28c>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d171      	bne.n	8003420 <HAL_ADC_MspInit+0x268>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800333c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003340:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8003342:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003346:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003348:	f107 0320 	add.w	r3, r7, #32
 800334c:	4618      	mov	r0, r3
 800334e:	f007 fcd9 	bl	800ad04 <HAL_RCCEx_PeriphCLKConfig>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <HAL_ADC_MspInit+0x1a4>
      Error_Handler();
 8003358:	f7ff face 	bl	80028f8 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800335c:	4b37      	ldr	r3, [pc, #220]	@ (800343c <HAL_ADC_MspInit+0x284>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	3301      	adds	r3, #1
 8003362:	4a36      	ldr	r2, [pc, #216]	@ (800343c <HAL_ADC_MspInit+0x284>)
 8003364:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8003366:	4b35      	ldr	r3, [pc, #212]	@ (800343c <HAL_ADC_MspInit+0x284>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d10b      	bne.n	8003386 <HAL_ADC_MspInit+0x1ce>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800336e:	4b2f      	ldr	r3, [pc, #188]	@ (800342c <HAL_ADC_MspInit+0x274>)
 8003370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003372:	4a2e      	ldr	r2, [pc, #184]	@ (800342c <HAL_ADC_MspInit+0x274>)
 8003374:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003378:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800337a:	4b2c      	ldr	r3, [pc, #176]	@ (800342c <HAL_ADC_MspInit+0x274>)
 800337c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800337e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003386:	4b29      	ldr	r3, [pc, #164]	@ (800342c <HAL_ADC_MspInit+0x274>)
 8003388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800338a:	4a28      	ldr	r2, [pc, #160]	@ (800342c <HAL_ADC_MspInit+0x274>)
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003392:	4b26      	ldr	r3, [pc, #152]	@ (800342c <HAL_ADC_MspInit+0x274>)
 8003394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	60bb      	str	r3, [r7, #8]
 800339c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_KEY_Pin;
 800339e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80033a2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033a4:	2303      	movs	r3, #3
 80033a6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a8:	2300      	movs	r3, #0
 80033aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(ADC_KEY_GPIO_Port, &GPIO_InitStruct);
 80033ac:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80033b0:	4619      	mov	r1, r3
 80033b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033b6:	f004 fa4d 	bl	8007854 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel4;
 80033ba:	4b23      	ldr	r3, [pc, #140]	@ (8003448 <HAL_ADC_MspInit+0x290>)
 80033bc:	4a23      	ldr	r2, [pc, #140]	@ (800344c <HAL_ADC_MspInit+0x294>)
 80033be:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 80033c0:	4b21      	ldr	r3, [pc, #132]	@ (8003448 <HAL_ADC_MspInit+0x290>)
 80033c2:	2227      	movs	r2, #39	@ 0x27
 80033c4:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033c6:	4b20      	ldr	r3, [pc, #128]	@ (8003448 <HAL_ADC_MspInit+0x290>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 80033cc:	4b1e      	ldr	r3, [pc, #120]	@ (8003448 <HAL_ADC_MspInit+0x290>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 80033d2:	4b1d      	ldr	r3, [pc, #116]	@ (8003448 <HAL_ADC_MspInit+0x290>)
 80033d4:	2280      	movs	r2, #128	@ 0x80
 80033d6:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80033d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003448 <HAL_ADC_MspInit+0x290>)
 80033da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033de:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80033e0:	4b19      	ldr	r3, [pc, #100]	@ (8003448 <HAL_ADC_MspInit+0x290>)
 80033e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033e6:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 80033e8:	4b17      	ldr	r3, [pc, #92]	@ (8003448 <HAL_ADC_MspInit+0x290>)
 80033ea:	2220      	movs	r2, #32
 80033ec:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 80033ee:	4b16      	ldr	r3, [pc, #88]	@ (8003448 <HAL_ADC_MspInit+0x290>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 80033f4:	4814      	ldr	r0, [pc, #80]	@ (8003448 <HAL_ADC_MspInit+0x290>)
 80033f6:	f003 ffbb 	bl	8007370 <HAL_DMA_Init>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <HAL_ADC_MspInit+0x24c>
      Error_Handler();
 8003400:	f7ff fa7a 	bl	80028f8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a10      	ldr	r2, [pc, #64]	@ (8003448 <HAL_ADC_MspInit+0x290>)
 8003408:	655a      	str	r2, [r3, #84]	@ 0x54
 800340a:	4a0f      	ldr	r2, [pc, #60]	@ (8003448 <HAL_ADC_MspInit+0x290>)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC5_IRQn, 0, 0);
 8003410:	2200      	movs	r2, #0
 8003412:	2100      	movs	r1, #0
 8003414:	203e      	movs	r0, #62	@ 0x3e
 8003416:	f003 fd00 	bl	8006e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC5_IRQn);
 800341a:	203e      	movs	r0, #62	@ 0x3e
 800341c:	f003 fd17 	bl	8006e4e <HAL_NVIC_EnableIRQ>
}
 8003420:	bf00      	nop
 8003422:	3788      	adds	r7, #136	@ 0x88
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	50000100 	.word	0x50000100
 800342c:	40021000 	.word	0x40021000
 8003430:	20000504 	.word	0x20000504
 8003434:	40020058 	.word	0x40020058
 8003438:	50000400 	.word	0x50000400
 800343c:	20002974 	.word	0x20002974
 8003440:	48000400 	.word	0x48000400
 8003444:	50000600 	.word	0x50000600
 8003448:	20000564 	.word	0x20000564
 800344c:	40020044 	.word	0x40020044

08003450 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08a      	sub	sp, #40	@ 0x28
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003458:	f107 0314 	add.w	r3, r7, #20
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	60da      	str	r2, [r3, #12]
 8003466:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a1f      	ldr	r2, [pc, #124]	@ (80034ec <HAL_COMP_MspInit+0x9c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d119      	bne.n	80034a6 <HAL_COMP_MspInit+0x56>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003472:	4b1f      	ldr	r3, [pc, #124]	@ (80034f0 <HAL_COMP_MspInit+0xa0>)
 8003474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003476:	4a1e      	ldr	r2, [pc, #120]	@ (80034f0 <HAL_COMP_MspInit+0xa0>)
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800347e:	4b1c      	ldr	r3, [pc, #112]	@ (80034f0 <HAL_COMP_MspInit+0xa0>)
 8003480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	613b      	str	r3, [r7, #16]
 8003488:	693b      	ldr	r3, [r7, #16]
    /**COMP2 GPIO Configuration
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800348a:	2380      	movs	r3, #128	@ 0x80
 800348c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800348e:	2303      	movs	r3, #3
 8003490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003492:	2300      	movs	r3, #0
 8003494:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003496:	f107 0314 	add.w	r3, r7, #20
 800349a:	4619      	mov	r1, r3
 800349c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034a0:	f004 f9d8 	bl	8007854 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP5_MspInit 1 */

  /* USER CODE END COMP5_MspInit 1 */
  }

}
 80034a4:	e01d      	b.n	80034e2 <HAL_COMP_MspInit+0x92>
  else if(hcomp->Instance==COMP5)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a12      	ldr	r2, [pc, #72]	@ (80034f4 <HAL_COMP_MspInit+0xa4>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d118      	bne.n	80034e2 <HAL_COMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034b0:	4b0f      	ldr	r3, [pc, #60]	@ (80034f0 <HAL_COMP_MspInit+0xa0>)
 80034b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034b4:	4a0e      	ldr	r2, [pc, #56]	@ (80034f0 <HAL_COMP_MspInit+0xa0>)
 80034b6:	f043 0302 	orr.w	r3, r3, #2
 80034ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034bc:	4b0c      	ldr	r3, [pc, #48]	@ (80034f0 <HAL_COMP_MspInit+0xa0>)
 80034be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80034c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80034cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034ce:	2303      	movs	r3, #3
 80034d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d2:	2300      	movs	r3, #0
 80034d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034d6:	f107 0314 	add.w	r3, r7, #20
 80034da:	4619      	mov	r1, r3
 80034dc:	4806      	ldr	r0, [pc, #24]	@ (80034f8 <HAL_COMP_MspInit+0xa8>)
 80034de:	f004 f9b9 	bl	8007854 <HAL_GPIO_Init>
}
 80034e2:	bf00      	nop
 80034e4:	3728      	adds	r7, #40	@ 0x28
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40010204 	.word	0x40010204
 80034f0:	40021000 	.word	0x40021000
 80034f4:	40010210 	.word	0x40010210
 80034f8:	48000400 	.word	0x48000400

080034fc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b08c      	sub	sp, #48	@ 0x30
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003504:	f107 031c 	add.w	r3, r7, #28
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	605a      	str	r2, [r3, #4]
 800350e:	609a      	str	r2, [r3, #8]
 8003510:	60da      	str	r2, [r3, #12]
 8003512:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a34      	ldr	r2, [pc, #208]	@ (80035ec <HAL_DAC_MspInit+0xf0>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d125      	bne.n	800356a <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800351e:	4b34      	ldr	r3, [pc, #208]	@ (80035f0 <HAL_DAC_MspInit+0xf4>)
 8003520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003522:	4a33      	ldr	r2, [pc, #204]	@ (80035f0 <HAL_DAC_MspInit+0xf4>)
 8003524:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800352a:	4b31      	ldr	r3, [pc, #196]	@ (80035f0 <HAL_DAC_MspInit+0xf4>)
 800352c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800352e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003532:	61bb      	str	r3, [r7, #24]
 8003534:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003536:	4b2e      	ldr	r3, [pc, #184]	@ (80035f0 <HAL_DAC_MspInit+0xf4>)
 8003538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800353a:	4a2d      	ldr	r2, [pc, #180]	@ (80035f0 <HAL_DAC_MspInit+0xf4>)
 800353c:	f043 0301 	orr.w	r3, r3, #1
 8003540:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003542:	4b2b      	ldr	r3, [pc, #172]	@ (80035f0 <HAL_DAC_MspInit+0xf4>)
 8003544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	617b      	str	r3, [r7, #20]
 800354c:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800354e:	2310      	movs	r3, #16
 8003550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003552:	2303      	movs	r3, #3
 8003554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003556:	2300      	movs	r3, #0
 8003558:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800355a:	f107 031c 	add.w	r3, r7, #28
 800355e:	4619      	mov	r1, r3
 8003560:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003564:	f004 f976 	bl	8007854 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC4_MspInit 1 */

  /* USER CODE END DAC4_MspInit 1 */
  }

}
 8003568:	e03b      	b.n	80035e2 <HAL_DAC_MspInit+0xe6>
  else if(hdac->Instance==DAC2)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a21      	ldr	r2, [pc, #132]	@ (80035f4 <HAL_DAC_MspInit+0xf8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d125      	bne.n	80035c0 <HAL_DAC_MspInit+0xc4>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8003574:	4b1e      	ldr	r3, [pc, #120]	@ (80035f0 <HAL_DAC_MspInit+0xf4>)
 8003576:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003578:	4a1d      	ldr	r2, [pc, #116]	@ (80035f0 <HAL_DAC_MspInit+0xf4>)
 800357a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800357e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003580:	4b1b      	ldr	r3, [pc, #108]	@ (80035f0 <HAL_DAC_MspInit+0xf4>)
 8003582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003584:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800358c:	4b18      	ldr	r3, [pc, #96]	@ (80035f0 <HAL_DAC_MspInit+0xf4>)
 800358e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003590:	4a17      	ldr	r2, [pc, #92]	@ (80035f0 <HAL_DAC_MspInit+0xf4>)
 8003592:	f043 0301 	orr.w	r3, r3, #1
 8003596:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003598:	4b15      	ldr	r3, [pc, #84]	@ (80035f0 <HAL_DAC_MspInit+0xf4>)
 800359a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80035a4:	2340      	movs	r3, #64	@ 0x40
 80035a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035a8:	2303      	movs	r3, #3
 80035aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ac:	2300      	movs	r3, #0
 80035ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035b0:	f107 031c 	add.w	r3, r7, #28
 80035b4:	4619      	mov	r1, r3
 80035b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035ba:	f004 f94b 	bl	8007854 <HAL_GPIO_Init>
}
 80035be:	e010      	b.n	80035e2 <HAL_DAC_MspInit+0xe6>
  else if(hdac->Instance==DAC4)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a0c      	ldr	r2, [pc, #48]	@ (80035f8 <HAL_DAC_MspInit+0xfc>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d10b      	bne.n	80035e2 <HAL_DAC_MspInit+0xe6>
    __HAL_RCC_DAC4_CLK_ENABLE();
 80035ca:	4b09      	ldr	r3, [pc, #36]	@ (80035f0 <HAL_DAC_MspInit+0xf4>)
 80035cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ce:	4a08      	ldr	r2, [pc, #32]	@ (80035f0 <HAL_DAC_MspInit+0xf4>)
 80035d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80035d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035d6:	4b06      	ldr	r3, [pc, #24]	@ (80035f0 <HAL_DAC_MspInit+0xf4>)
 80035d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035de:	60bb      	str	r3, [r7, #8]
 80035e0:	68bb      	ldr	r3, [r7, #8]
}
 80035e2:	bf00      	nop
 80035e4:	3730      	adds	r7, #48	@ 0x30
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	50000800 	.word	0x50000800
 80035f0:	40021000 	.word	0x40021000
 80035f4:	50000c00 	.word	0x50000c00
 80035f8:	50001400 	.word	0x50001400

080035fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b09e      	sub	sp, #120	@ 0x78
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003604:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	605a      	str	r2, [r3, #4]
 800360e:	609a      	str	r2, [r3, #8]
 8003610:	60da      	str	r2, [r3, #12]
 8003612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003614:	f107 0310 	add.w	r3, r7, #16
 8003618:	2254      	movs	r2, #84	@ 0x54
 800361a:	2100      	movs	r1, #0
 800361c:	4618      	mov	r0, r3
 800361e:	f010 f873 	bl	8013708 <memset>
  if(hi2c->Instance==I2C3)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a1f      	ldr	r2, [pc, #124]	@ (80036a4 <HAL_I2C_MspInit+0xa8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d137      	bne.n	800369c <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800362c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003630:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003632:	2300      	movs	r3, #0
 8003634:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003636:	f107 0310 	add.w	r3, r7, #16
 800363a:	4618      	mov	r0, r3
 800363c:	f007 fb62 	bl	800ad04 <HAL_RCCEx_PeriphCLKConfig>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003646:	f7ff f957 	bl	80028f8 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800364a:	4b17      	ldr	r3, [pc, #92]	@ (80036a8 <HAL_I2C_MspInit+0xac>)
 800364c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800364e:	4a16      	ldr	r2, [pc, #88]	@ (80036a8 <HAL_I2C_MspInit+0xac>)
 8003650:	f043 0304 	orr.w	r3, r3, #4
 8003654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003656:	4b14      	ldr	r3, [pc, #80]	@ (80036a8 <HAL_I2C_MspInit+0xac>)
 8003658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800365a:	f003 0304 	and.w	r3, r3, #4
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003662:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003666:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003668:	2312      	movs	r3, #18
 800366a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366c:	2300      	movs	r3, #0
 800366e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003670:	2300      	movs	r3, #0
 8003672:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8003674:	2308      	movs	r3, #8
 8003676:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003678:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800367c:	4619      	mov	r1, r3
 800367e:	480b      	ldr	r0, [pc, #44]	@ (80036ac <HAL_I2C_MspInit+0xb0>)
 8003680:	f004 f8e8 	bl	8007854 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003684:	4b08      	ldr	r3, [pc, #32]	@ (80036a8 <HAL_I2C_MspInit+0xac>)
 8003686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003688:	4a07      	ldr	r2, [pc, #28]	@ (80036a8 <HAL_I2C_MspInit+0xac>)
 800368a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800368e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003690:	4b05      	ldr	r3, [pc, #20]	@ (80036a8 <HAL_I2C_MspInit+0xac>)
 8003692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003694:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003698:	60bb      	str	r3, [r7, #8]
 800369a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800369c:	bf00      	nop
 800369e:	3778      	adds	r7, #120	@ 0x78
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40007800 	.word	0x40007800
 80036a8:	40021000 	.word	0x40021000
 80036ac:	48000800 	.word	0x48000800

080036b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b09e      	sub	sp, #120	@ 0x78
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	605a      	str	r2, [r3, #4]
 80036c2:	609a      	str	r2, [r3, #8]
 80036c4:	60da      	str	r2, [r3, #12]
 80036c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80036c8:	f107 0310 	add.w	r3, r7, #16
 80036cc:	2254      	movs	r2, #84	@ 0x54
 80036ce:	2100      	movs	r1, #0
 80036d0:	4618      	mov	r0, r3
 80036d2:	f010 f819 	bl	8013708 <memset>
  if(huart->Instance==LPUART1)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a1f      	ldr	r2, [pc, #124]	@ (8003758 <HAL_UART_MspInit+0xa8>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d136      	bne.n	800374e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80036e0:	2320      	movs	r3, #32
 80036e2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80036e4:	2300      	movs	r3, #0
 80036e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036e8:	f107 0310 	add.w	r3, r7, #16
 80036ec:	4618      	mov	r0, r3
 80036ee:	f007 fb09 	bl	800ad04 <HAL_RCCEx_PeriphCLKConfig>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80036f8:	f7ff f8fe 	bl	80028f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80036fc:	4b17      	ldr	r3, [pc, #92]	@ (800375c <HAL_UART_MspInit+0xac>)
 80036fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003700:	4a16      	ldr	r2, [pc, #88]	@ (800375c <HAL_UART_MspInit+0xac>)
 8003702:	f043 0301 	orr.w	r3, r3, #1
 8003706:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003708:	4b14      	ldr	r3, [pc, #80]	@ (800375c <HAL_UART_MspInit+0xac>)
 800370a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003714:	4b11      	ldr	r3, [pc, #68]	@ (800375c <HAL_UART_MspInit+0xac>)
 8003716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003718:	4a10      	ldr	r2, [pc, #64]	@ (800375c <HAL_UART_MspInit+0xac>)
 800371a:	f043 0302 	orr.w	r3, r3, #2
 800371e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003720:	4b0e      	ldr	r3, [pc, #56]	@ (800375c <HAL_UART_MspInit+0xac>)
 8003722:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	60bb      	str	r3, [r7, #8]
 800372a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800372c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003730:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003732:	2302      	movs	r3, #2
 8003734:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003736:	2300      	movs	r3, #0
 8003738:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800373a:	2300      	movs	r3, #0
 800373c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800373e:	2308      	movs	r3, #8
 8003740:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003742:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003746:	4619      	mov	r1, r3
 8003748:	4805      	ldr	r0, [pc, #20]	@ (8003760 <HAL_UART_MspInit+0xb0>)
 800374a:	f004 f883 	bl	8007854 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 800374e:	bf00      	nop
 8003750:	3778      	adds	r7, #120	@ 0x78
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40008000 	.word	0x40008000
 800375c:	40021000 	.word	0x40021000
 8003760:	48000400 	.word	0x48000400

08003764 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b08e      	sub	sp, #56	@ 0x38
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800376c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	605a      	str	r2, [r3, #4]
 8003776:	609a      	str	r2, [r3, #8]
 8003778:	60da      	str	r2, [r3, #12]
 800377a:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a5c      	ldr	r2, [pc, #368]	@ (80038f4 <HAL_OPAMP_MspInit+0x190>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d119      	bne.n	80037ba <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003786:	4b5c      	ldr	r3, [pc, #368]	@ (80038f8 <HAL_OPAMP_MspInit+0x194>)
 8003788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800378a:	4a5b      	ldr	r2, [pc, #364]	@ (80038f8 <HAL_OPAMP_MspInit+0x194>)
 800378c:	f043 0301 	orr.w	r3, r3, #1
 8003790:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003792:	4b59      	ldr	r3, [pc, #356]	@ (80038f8 <HAL_OPAMP_MspInit+0x194>)
 8003794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	623b      	str	r3, [r7, #32]
 800379c:	6a3b      	ldr	r3, [r7, #32]
    /**OPAMP1 GPIO Configuration
    PA7     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800379e:	2380      	movs	r3, #128	@ 0x80
 80037a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037a2:	2303      	movs	r3, #3
 80037a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a6:	2300      	movs	r3, #0
 80037a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037ae:	4619      	mov	r1, r3
 80037b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037b4:	f004 f84e 	bl	8007854 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }

}
 80037b8:	e098      	b.n	80038ec <HAL_OPAMP_MspInit+0x188>
  else if(hopamp->Instance==OPAMP2)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a4f      	ldr	r2, [pc, #316]	@ (80038fc <HAL_OPAMP_MspInit+0x198>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d119      	bne.n	80037f8 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037c4:	4b4c      	ldr	r3, [pc, #304]	@ (80038f8 <HAL_OPAMP_MspInit+0x194>)
 80037c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037c8:	4a4b      	ldr	r2, [pc, #300]	@ (80038f8 <HAL_OPAMP_MspInit+0x194>)
 80037ca:	f043 0301 	orr.w	r3, r3, #1
 80037ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037d0:	4b49      	ldr	r3, [pc, #292]	@ (80038f8 <HAL_OPAMP_MspInit+0x194>)
 80037d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	61fb      	str	r3, [r7, #28]
 80037da:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80037dc:	2380      	movs	r3, #128	@ 0x80
 80037de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037e0:	2303      	movs	r3, #3
 80037e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e4:	2300      	movs	r3, #0
 80037e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037ec:	4619      	mov	r1, r3
 80037ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037f2:	f004 f82f 	bl	8007854 <HAL_GPIO_Init>
}
 80037f6:	e079      	b.n	80038ec <HAL_OPAMP_MspInit+0x188>
  else if(hopamp->Instance==OPAMP3)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a40      	ldr	r2, [pc, #256]	@ (8003900 <HAL_OPAMP_MspInit+0x19c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d119      	bne.n	8003836 <HAL_OPAMP_MspInit+0xd2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003802:	4b3d      	ldr	r3, [pc, #244]	@ (80038f8 <HAL_OPAMP_MspInit+0x194>)
 8003804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003806:	4a3c      	ldr	r2, [pc, #240]	@ (80038f8 <HAL_OPAMP_MspInit+0x194>)
 8003808:	f043 0302 	orr.w	r3, r3, #2
 800380c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800380e:	4b3a      	ldr	r3, [pc, #232]	@ (80038f8 <HAL_OPAMP_MspInit+0x194>)
 8003810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	61bb      	str	r3, [r7, #24]
 8003818:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800381a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800381e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003820:	2303      	movs	r3, #3
 8003822:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003824:	2300      	movs	r3, #0
 8003826:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003828:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800382c:	4619      	mov	r1, r3
 800382e:	4835      	ldr	r0, [pc, #212]	@ (8003904 <HAL_OPAMP_MspInit+0x1a0>)
 8003830:	f004 f810 	bl	8007854 <HAL_GPIO_Init>
}
 8003834:	e05a      	b.n	80038ec <HAL_OPAMP_MspInit+0x188>
  else if(hopamp->Instance==OPAMP4)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a33      	ldr	r2, [pc, #204]	@ (8003908 <HAL_OPAMP_MspInit+0x1a4>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d119      	bne.n	8003874 <HAL_OPAMP_MspInit+0x110>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003840:	4b2d      	ldr	r3, [pc, #180]	@ (80038f8 <HAL_OPAMP_MspInit+0x194>)
 8003842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003844:	4a2c      	ldr	r2, [pc, #176]	@ (80038f8 <HAL_OPAMP_MspInit+0x194>)
 8003846:	f043 0302 	orr.w	r3, r3, #2
 800384a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800384c:	4b2a      	ldr	r3, [pc, #168]	@ (80038f8 <HAL_OPAMP_MspInit+0x194>)
 800384e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003858:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800385c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800385e:	2303      	movs	r3, #3
 8003860:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003862:	2300      	movs	r3, #0
 8003864:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003866:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800386a:	4619      	mov	r1, r3
 800386c:	4825      	ldr	r0, [pc, #148]	@ (8003904 <HAL_OPAMP_MspInit+0x1a0>)
 800386e:	f003 fff1 	bl	8007854 <HAL_GPIO_Init>
}
 8003872:	e03b      	b.n	80038ec <HAL_OPAMP_MspInit+0x188>
  else if(hopamp->Instance==OPAMP5)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a24      	ldr	r2, [pc, #144]	@ (800390c <HAL_OPAMP_MspInit+0x1a8>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d118      	bne.n	80038b0 <HAL_OPAMP_MspInit+0x14c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800387e:	4b1e      	ldr	r3, [pc, #120]	@ (80038f8 <HAL_OPAMP_MspInit+0x194>)
 8003880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003882:	4a1d      	ldr	r2, [pc, #116]	@ (80038f8 <HAL_OPAMP_MspInit+0x194>)
 8003884:	f043 0304 	orr.w	r3, r3, #4
 8003888:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800388a:	4b1b      	ldr	r3, [pc, #108]	@ (80038f8 <HAL_OPAMP_MspInit+0x194>)
 800388c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800388e:	f003 0304 	and.w	r3, r3, #4
 8003892:	613b      	str	r3, [r7, #16]
 8003894:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003896:	2308      	movs	r3, #8
 8003898:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800389a:	2303      	movs	r3, #3
 800389c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389e:	2300      	movs	r3, #0
 80038a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038a6:	4619      	mov	r1, r3
 80038a8:	4819      	ldr	r0, [pc, #100]	@ (8003910 <HAL_OPAMP_MspInit+0x1ac>)
 80038aa:	f003 ffd3 	bl	8007854 <HAL_GPIO_Init>
}
 80038ae:	e01d      	b.n	80038ec <HAL_OPAMP_MspInit+0x188>
  else if(hopamp->Instance==OPAMP6)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a17      	ldr	r2, [pc, #92]	@ (8003914 <HAL_OPAMP_MspInit+0x1b0>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d118      	bne.n	80038ec <HAL_OPAMP_MspInit+0x188>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ba:	4b0f      	ldr	r3, [pc, #60]	@ (80038f8 <HAL_OPAMP_MspInit+0x194>)
 80038bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038be:	4a0e      	ldr	r2, [pc, #56]	@ (80038f8 <HAL_OPAMP_MspInit+0x194>)
 80038c0:	f043 0302 	orr.w	r3, r3, #2
 80038c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038c6:	4b0c      	ldr	r3, [pc, #48]	@ (80038f8 <HAL_OPAMP_MspInit+0x194>)
 80038c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80038d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80038d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038d8:	2303      	movs	r3, #3
 80038da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038dc:	2300      	movs	r3, #0
 80038de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038e4:	4619      	mov	r1, r3
 80038e6:	4807      	ldr	r0, [pc, #28]	@ (8003904 <HAL_OPAMP_MspInit+0x1a0>)
 80038e8:	f003 ffb4 	bl	8007854 <HAL_GPIO_Init>
}
 80038ec:	bf00      	nop
 80038ee:	3738      	adds	r7, #56	@ 0x38
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40010300 	.word	0x40010300
 80038f8:	40021000 	.word	0x40021000
 80038fc:	40010304 	.word	0x40010304
 8003900:	40010308 	.word	0x40010308
 8003904:	48000400 	.word	0x48000400
 8003908:	4001030c 	.word	0x4001030c
 800390c:	40010310 	.word	0x40010310
 8003910:	48000800 	.word	0x48000800
 8003914:	40010314 	.word	0x40010314

08003918 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b08a      	sub	sp, #40	@ 0x28
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003920:	f107 0314 	add.w	r3, r7, #20
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	605a      	str	r2, [r3, #4]
 800392a:	609a      	str	r2, [r3, #8]
 800392c:	60da      	str	r2, [r3, #12]
 800392e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a2c      	ldr	r2, [pc, #176]	@ (80039e8 <HAL_SPI_MspInit+0xd0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d151      	bne.n	80039de <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800393a:	4b2c      	ldr	r3, [pc, #176]	@ (80039ec <HAL_SPI_MspInit+0xd4>)
 800393c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800393e:	4a2b      	ldr	r2, [pc, #172]	@ (80039ec <HAL_SPI_MspInit+0xd4>)
 8003940:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003944:	6593      	str	r3, [r2, #88]	@ 0x58
 8003946:	4b29      	ldr	r3, [pc, #164]	@ (80039ec <HAL_SPI_MspInit+0xd4>)
 8003948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800394a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800394e:	613b      	str	r3, [r7, #16]
 8003950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003952:	4b26      	ldr	r3, [pc, #152]	@ (80039ec <HAL_SPI_MspInit+0xd4>)
 8003954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003956:	4a25      	ldr	r2, [pc, #148]	@ (80039ec <HAL_SPI_MspInit+0xd4>)
 8003958:	f043 0304 	orr.w	r3, r3, #4
 800395c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800395e:	4b23      	ldr	r3, [pc, #140]	@ (80039ec <HAL_SPI_MspInit+0xd4>)
 8003960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003962:	f003 0304 	and.w	r3, r3, #4
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800396a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800396e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003970:	2302      	movs	r3, #2
 8003972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003974:	2300      	movs	r3, #0
 8003976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003978:	2300      	movs	r3, #0
 800397a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800397c:	2306      	movs	r3, #6
 800397e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003980:	f107 0314 	add.w	r3, r7, #20
 8003984:	4619      	mov	r1, r3
 8003986:	481a      	ldr	r0, [pc, #104]	@ (80039f0 <HAL_SPI_MspInit+0xd8>)
 8003988:	f003 ff64 	bl	8007854 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Channel3;
 800398c:	4b19      	ldr	r3, [pc, #100]	@ (80039f4 <HAL_SPI_MspInit+0xdc>)
 800398e:	4a1a      	ldr	r2, [pc, #104]	@ (80039f8 <HAL_SPI_MspInit+0xe0>)
 8003990:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8003992:	4b18      	ldr	r3, [pc, #96]	@ (80039f4 <HAL_SPI_MspInit+0xdc>)
 8003994:	220f      	movs	r2, #15
 8003996:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003998:	4b16      	ldr	r3, [pc, #88]	@ (80039f4 <HAL_SPI_MspInit+0xdc>)
 800399a:	2210      	movs	r2, #16
 800399c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800399e:	4b15      	ldr	r3, [pc, #84]	@ (80039f4 <HAL_SPI_MspInit+0xdc>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80039a4:	4b13      	ldr	r3, [pc, #76]	@ (80039f4 <HAL_SPI_MspInit+0xdc>)
 80039a6:	2280      	movs	r2, #128	@ 0x80
 80039a8:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039aa:	4b12      	ldr	r3, [pc, #72]	@ (80039f4 <HAL_SPI_MspInit+0xdc>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039b0:	4b10      	ldr	r3, [pc, #64]	@ (80039f4 <HAL_SPI_MspInit+0xdc>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80039b6:	4b0f      	ldr	r3, [pc, #60]	@ (80039f4 <HAL_SPI_MspInit+0xdc>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80039bc:	4b0d      	ldr	r3, [pc, #52]	@ (80039f4 <HAL_SPI_MspInit+0xdc>)
 80039be:	2200      	movs	r2, #0
 80039c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80039c2:	480c      	ldr	r0, [pc, #48]	@ (80039f4 <HAL_SPI_MspInit+0xdc>)
 80039c4:	f003 fcd4 	bl	8007370 <HAL_DMA_Init>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 80039ce:	f7fe ff93 	bl	80028f8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a07      	ldr	r2, [pc, #28]	@ (80039f4 <HAL_SPI_MspInit+0xdc>)
 80039d6:	655a      	str	r2, [r3, #84]	@ 0x54
 80039d8:	4a06      	ldr	r2, [pc, #24]	@ (80039f4 <HAL_SPI_MspInit+0xdc>)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80039de:	bf00      	nop
 80039e0:	3728      	adds	r7, #40	@ 0x28
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40003c00 	.word	0x40003c00
 80039ec:	40021000 	.word	0x40021000
 80039f0:	48000800 	.word	0x48000800
 80039f4:	200008fc 	.word	0x200008fc
 80039f8:	40020030 	.word	0x40020030

080039fc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b090      	sub	sp, #64	@ 0x40
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	605a      	str	r2, [r3, #4]
 8003a0e:	609a      	str	r2, [r3, #8]
 8003a10:	60da      	str	r2, [r3, #12]
 8003a12:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a6a      	ldr	r2, [pc, #424]	@ (8003bc4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d128      	bne.n	8003a70 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a1e:	4b6a      	ldr	r3, [pc, #424]	@ (8003bc8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a22:	4a69      	ldr	r2, [pc, #420]	@ (8003bc8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003a24:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003a28:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a2a:	4b67      	ldr	r3, [pc, #412]	@ (8003bc8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a36:	4b64      	ldr	r3, [pc, #400]	@ (8003bc8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a3a:	4a63      	ldr	r2, [pc, #396]	@ (8003bc8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003a3c:	f043 0304 	orr.w	r3, r3, #4
 8003a40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a42:	4b61      	ldr	r3, [pc, #388]	@ (8003bc8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a46:	f003 0304 	and.w	r3, r3, #4
 8003a4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a52:	2302      	movs	r3, #2
 8003a54:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a56:	2301      	movs	r3, #1
 8003a58:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003a5e:	2302      	movs	r3, #2
 8003a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a66:	4619      	mov	r1, r3
 8003a68:	4858      	ldr	r0, [pc, #352]	@ (8003bcc <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003a6a:	f003 fef3 	bl	8007854 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 8003a6e:	e0a4      	b.n	8003bba <HAL_TIM_Encoder_MspInit+0x1be>
  else if(htim_encoder->Instance==TIM3)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a56      	ldr	r2, [pc, #344]	@ (8003bd0 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d128      	bne.n	8003acc <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a7a:	4b53      	ldr	r3, [pc, #332]	@ (8003bc8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a7e:	4a52      	ldr	r2, [pc, #328]	@ (8003bc8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003a80:	f043 0302 	orr.w	r3, r3, #2
 8003a84:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a86:	4b50      	ldr	r3, [pc, #320]	@ (8003bc8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	623b      	str	r3, [r7, #32]
 8003a90:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a92:	4b4d      	ldr	r3, [pc, #308]	@ (8003bc8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a96:	4a4c      	ldr	r2, [pc, #304]	@ (8003bc8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003a98:	f043 0304 	orr.w	r3, r3, #4
 8003a9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a9e:	4b4a      	ldr	r3, [pc, #296]	@ (8003bc8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aa2:	f003 0304 	and.w	r3, r3, #4
 8003aa6:	61fb      	str	r3, [r7, #28]
 8003aa8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003aaa:	23c0      	movs	r3, #192	@ 0xc0
 8003aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aae:	2302      	movs	r3, #2
 8003ab0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003aba:	2302      	movs	r3, #2
 8003abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003abe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	4841      	ldr	r0, [pc, #260]	@ (8003bcc <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003ac6:	f003 fec5 	bl	8007854 <HAL_GPIO_Init>
}
 8003aca:	e076      	b.n	8003bba <HAL_TIM_Encoder_MspInit+0x1be>
  else if(htim_encoder->Instance==TIM4)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a40      	ldr	r2, [pc, #256]	@ (8003bd4 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d128      	bne.n	8003b28 <HAL_TIM_Encoder_MspInit+0x12c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003ad6:	4b3c      	ldr	r3, [pc, #240]	@ (8003bc8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ada:	4a3b      	ldr	r2, [pc, #236]	@ (8003bc8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003adc:	f043 0304 	orr.w	r3, r3, #4
 8003ae0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ae2:	4b39      	ldr	r3, [pc, #228]	@ (8003bc8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae6:	f003 0304 	and.w	r3, r3, #4
 8003aea:	61bb      	str	r3, [r7, #24]
 8003aec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aee:	4b36      	ldr	r3, [pc, #216]	@ (8003bc8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003af2:	4a35      	ldr	r2, [pc, #212]	@ (8003bc8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003af4:	f043 0302 	orr.w	r3, r3, #2
 8003af8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003afa:	4b33      	ldr	r3, [pc, #204]	@ (8003bc8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	617b      	str	r3, [r7, #20]
 8003b04:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003b06:	23c0      	movs	r3, #192	@ 0xc0
 8003b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b12:	2303      	movs	r3, #3
 8003b14:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003b16:	2302      	movs	r3, #2
 8003b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003b1e:	4619      	mov	r1, r3
 8003b20:	482d      	ldr	r0, [pc, #180]	@ (8003bd8 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8003b22:	f003 fe97 	bl	8007854 <HAL_GPIO_Init>
}
 8003b26:	e048      	b.n	8003bba <HAL_TIM_Encoder_MspInit+0x1be>
  else if(htim_encoder->Instance==TIM20)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a2b      	ldr	r2, [pc, #172]	@ (8003bdc <HAL_TIM_Encoder_MspInit+0x1e0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d143      	bne.n	8003bba <HAL_TIM_Encoder_MspInit+0x1be>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8003b32:	4b25      	ldr	r3, [pc, #148]	@ (8003bc8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003b34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b36:	4a24      	ldr	r2, [pc, #144]	@ (8003bc8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003b38:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b3e:	4b22      	ldr	r3, [pc, #136]	@ (8003bc8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b46:	613b      	str	r3, [r7, #16]
 8003b48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b4a:	4b1f      	ldr	r3, [pc, #124]	@ (8003bc8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b4e:	4a1e      	ldr	r2, [pc, #120]	@ (8003bc8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003b50:	f043 0304 	orr.w	r3, r3, #4
 8003b54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b56:	4b1c      	ldr	r3, [pc, #112]	@ (8003bc8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b62:	4b19      	ldr	r3, [pc, #100]	@ (8003bc8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b66:	4a18      	ldr	r2, [pc, #96]	@ (8003bc8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003b68:	f043 0302 	orr.w	r3, r3, #2
 8003b6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b6e:	4b16      	ldr	r3, [pc, #88]	@ (8003bc8 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	60bb      	str	r3, [r7, #8]
 8003b78:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003b7a:	2304      	movs	r3, #4
 8003b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b7e:	2302      	movs	r3, #2
 8003b80:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b82:	2301      	movs	r3, #1
 8003b84:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b86:	2303      	movs	r3, #3
 8003b88:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8003b8a:	2306      	movs	r3, #6
 8003b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003b92:	4619      	mov	r1, r3
 8003b94:	480d      	ldr	r0, [pc, #52]	@ (8003bcc <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003b96:	f003 fe5d 	bl	8007854 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003b9a:	2304      	movs	r3, #4
 8003b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8003baa:	2303      	movs	r3, #3
 8003bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	4808      	ldr	r0, [pc, #32]	@ (8003bd8 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8003bb6:	f003 fe4d 	bl	8007854 <HAL_GPIO_Init>
}
 8003bba:	bf00      	nop
 8003bbc:	3740      	adds	r7, #64	@ 0x40
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40012c00 	.word	0x40012c00
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	48000800 	.word	0x48000800
 8003bd0:	40000400 	.word	0x40000400
 8003bd4:	40000800 	.word	0x40000800
 8003bd8:	48000400 	.word	0x48000400
 8003bdc:	40015000 	.word	0x40015000

08003be0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a4f      	ldr	r2, [pc, #316]	@ (8003d2c <HAL_TIM_Base_MspInit+0x14c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d10c      	bne.n	8003c0c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003bf2:	4b4f      	ldr	r3, [pc, #316]	@ (8003d30 <HAL_TIM_Base_MspInit+0x150>)
 8003bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf6:	4a4e      	ldr	r2, [pc, #312]	@ (8003d30 <HAL_TIM_Base_MspInit+0x150>)
 8003bf8:	f043 0310 	orr.w	r3, r3, #16
 8003bfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bfe:	4b4c      	ldr	r3, [pc, #304]	@ (8003d30 <HAL_TIM_Base_MspInit+0x150>)
 8003c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c02:	f003 0310 	and.w	r3, r3, #16
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003c0a:	e08a      	b.n	8003d22 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM7)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a48      	ldr	r2, [pc, #288]	@ (8003d34 <HAL_TIM_Base_MspInit+0x154>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d10c      	bne.n	8003c30 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003c16:	4b46      	ldr	r3, [pc, #280]	@ (8003d30 <HAL_TIM_Base_MspInit+0x150>)
 8003c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c1a:	4a45      	ldr	r2, [pc, #276]	@ (8003d30 <HAL_TIM_Base_MspInit+0x150>)
 8003c1c:	f043 0320 	orr.w	r3, r3, #32
 8003c20:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c22:	4b43      	ldr	r3, [pc, #268]	@ (8003d30 <HAL_TIM_Base_MspInit+0x150>)
 8003c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c26:	f003 0320 	and.w	r3, r3, #32
 8003c2a:	613b      	str	r3, [r7, #16]
 8003c2c:	693b      	ldr	r3, [r7, #16]
}
 8003c2e:	e078      	b.n	8003d22 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM8)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a40      	ldr	r2, [pc, #256]	@ (8003d38 <HAL_TIM_Base_MspInit+0x158>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d137      	bne.n	8003caa <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003c3a:	4b3d      	ldr	r3, [pc, #244]	@ (8003d30 <HAL_TIM_Base_MspInit+0x150>)
 8003c3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c3e:	4a3c      	ldr	r2, [pc, #240]	@ (8003d30 <HAL_TIM_Base_MspInit+0x150>)
 8003c40:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003c44:	6613      	str	r3, [r2, #96]	@ 0x60
 8003c46:	4b3a      	ldr	r3, [pc, #232]	@ (8003d30 <HAL_TIM_Base_MspInit+0x150>)
 8003c48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	68fb      	ldr	r3, [r7, #12]
    hdma_tim8_ch3.Instance = DMA1_Channel1;
 8003c52:	4b3a      	ldr	r3, [pc, #232]	@ (8003d3c <HAL_TIM_Base_MspInit+0x15c>)
 8003c54:	4a3a      	ldr	r2, [pc, #232]	@ (8003d40 <HAL_TIM_Base_MspInit+0x160>)
 8003c56:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch3.Init.Request = DMA_REQUEST_TIM8_CH3;
 8003c58:	4b38      	ldr	r3, [pc, #224]	@ (8003d3c <HAL_TIM_Base_MspInit+0x15c>)
 8003c5a:	2233      	movs	r2, #51	@ 0x33
 8003c5c:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c5e:	4b37      	ldr	r3, [pc, #220]	@ (8003d3c <HAL_TIM_Base_MspInit+0x15c>)
 8003c60:	2210      	movs	r2, #16
 8003c62:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c64:	4b35      	ldr	r3, [pc, #212]	@ (8003d3c <HAL_TIM_Base_MspInit+0x15c>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003c6a:	4b34      	ldr	r3, [pc, #208]	@ (8003d3c <HAL_TIM_Base_MspInit+0x15c>)
 8003c6c:	2280      	movs	r2, #128	@ 0x80
 8003c6e:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003c70:	4b32      	ldr	r3, [pc, #200]	@ (8003d3c <HAL_TIM_Base_MspInit+0x15c>)
 8003c72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c76:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003c78:	4b30      	ldr	r3, [pc, #192]	@ (8003d3c <HAL_TIM_Base_MspInit+0x15c>)
 8003c7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c7e:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch3.Init.Mode = DMA_NORMAL;
 8003c80:	4b2e      	ldr	r3, [pc, #184]	@ (8003d3c <HAL_TIM_Base_MspInit+0x15c>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003c86:	4b2d      	ldr	r3, [pc, #180]	@ (8003d3c <HAL_TIM_Base_MspInit+0x15c>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim8_ch3) != HAL_OK)
 8003c8c:	482b      	ldr	r0, [pc, #172]	@ (8003d3c <HAL_TIM_Base_MspInit+0x15c>)
 8003c8e:	f003 fb6f 	bl	8007370 <HAL_DMA_Init>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <HAL_TIM_Base_MspInit+0xbc>
      Error_Handler();
 8003c98:	f7fe fe2e 	bl	80028f8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim8_ch3);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a27      	ldr	r2, [pc, #156]	@ (8003d3c <HAL_TIM_Base_MspInit+0x15c>)
 8003ca0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003ca2:	4a26      	ldr	r2, [pc, #152]	@ (8003d3c <HAL_TIM_Base_MspInit+0x15c>)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003ca8:	e03b      	b.n	8003d22 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM15)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a25      	ldr	r2, [pc, #148]	@ (8003d44 <HAL_TIM_Base_MspInit+0x164>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d136      	bne.n	8003d22 <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8003d30 <HAL_TIM_Base_MspInit+0x150>)
 8003cb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8003d30 <HAL_TIM_Base_MspInit+0x150>)
 8003cba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cbe:	6613      	str	r3, [r2, #96]	@ 0x60
 8003cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d30 <HAL_TIM_Base_MspInit+0x150>)
 8003cc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cc8:	60bb      	str	r3, [r7, #8]
 8003cca:	68bb      	ldr	r3, [r7, #8]
    hdma_tim15_ch1.Instance = DMA1_Channel2;
 8003ccc:	4b1e      	ldr	r3, [pc, #120]	@ (8003d48 <HAL_TIM_Base_MspInit+0x168>)
 8003cce:	4a1f      	ldr	r2, [pc, #124]	@ (8003d4c <HAL_TIM_Base_MspInit+0x16c>)
 8003cd0:	601a      	str	r2, [r3, #0]
    hdma_tim15_ch1.Init.Request = DMA_REQUEST_TIM15_CH1;
 8003cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8003d48 <HAL_TIM_Base_MspInit+0x168>)
 8003cd4:	224e      	movs	r2, #78	@ 0x4e
 8003cd6:	605a      	str	r2, [r3, #4]
    hdma_tim15_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8003d48 <HAL_TIM_Base_MspInit+0x168>)
 8003cda:	2210      	movs	r2, #16
 8003cdc:	609a      	str	r2, [r3, #8]
    hdma_tim15_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cde:	4b1a      	ldr	r3, [pc, #104]	@ (8003d48 <HAL_TIM_Base_MspInit+0x168>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	60da      	str	r2, [r3, #12]
    hdma_tim15_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003ce4:	4b18      	ldr	r3, [pc, #96]	@ (8003d48 <HAL_TIM_Base_MspInit+0x168>)
 8003ce6:	2280      	movs	r2, #128	@ 0x80
 8003ce8:	611a      	str	r2, [r3, #16]
    hdma_tim15_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003cea:	4b17      	ldr	r3, [pc, #92]	@ (8003d48 <HAL_TIM_Base_MspInit+0x168>)
 8003cec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003cf0:	615a      	str	r2, [r3, #20]
    hdma_tim15_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003cf2:	4b15      	ldr	r3, [pc, #84]	@ (8003d48 <HAL_TIM_Base_MspInit+0x168>)
 8003cf4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cf8:	619a      	str	r2, [r3, #24]
    hdma_tim15_ch1.Init.Mode = DMA_NORMAL;
 8003cfa:	4b13      	ldr	r3, [pc, #76]	@ (8003d48 <HAL_TIM_Base_MspInit+0x168>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	61da      	str	r2, [r3, #28]
    hdma_tim15_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003d00:	4b11      	ldr	r3, [pc, #68]	@ (8003d48 <HAL_TIM_Base_MspInit+0x168>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim15_ch1) != HAL_OK)
 8003d06:	4810      	ldr	r0, [pc, #64]	@ (8003d48 <HAL_TIM_Base_MspInit+0x168>)
 8003d08:	f003 fb32 	bl	8007370 <HAL_DMA_Init>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <HAL_TIM_Base_MspInit+0x136>
      Error_Handler();
 8003d12:	f7fe fdf1 	bl	80028f8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a0b      	ldr	r2, [pc, #44]	@ (8003d48 <HAL_TIM_Base_MspInit+0x168>)
 8003d1a:	625a      	str	r2, [r3, #36]	@ 0x24
 8003d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8003d48 <HAL_TIM_Base_MspInit+0x168>)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003d22:	bf00      	nop
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40001000 	.word	0x40001000
 8003d30:	40021000 	.word	0x40021000
 8003d34:	40001400 	.word	0x40001400
 8003d38:	40013400 	.word	0x40013400
 8003d3c:	20000bbc 	.word	0x20000bbc
 8003d40:	40020008 	.word	0x40020008
 8003d44:	40014000 	.word	0x40014000
 8003d48:	20000c1c 	.word	0x20000c1c
 8003d4c:	4002001c 	.word	0x4002001c

08003d50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b08a      	sub	sp, #40	@ 0x28
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d58:	f107 0314 	add.w	r3, r7, #20
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	605a      	str	r2, [r3, #4]
 8003d62:	609a      	str	r2, [r3, #8]
 8003d64:	60da      	str	r2, [r3, #12]
 8003d66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a32      	ldr	r2, [pc, #200]	@ (8003e38 <HAL_TIM_MspPostInit+0xe8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d13b      	bne.n	8003dea <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d72:	4b32      	ldr	r3, [pc, #200]	@ (8003e3c <HAL_TIM_MspPostInit+0xec>)
 8003d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d76:	4a31      	ldr	r2, [pc, #196]	@ (8003e3c <HAL_TIM_MspPostInit+0xec>)
 8003d78:	f043 0301 	orr.w	r3, r3, #1
 8003d7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d7e:	4b2f      	ldr	r3, [pc, #188]	@ (8003e3c <HAL_TIM_MspPostInit+0xec>)
 8003d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	613b      	str	r3, [r7, #16]
 8003d88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d8a:	4b2c      	ldr	r3, [pc, #176]	@ (8003e3c <HAL_TIM_MspPostInit+0xec>)
 8003d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d8e:	4a2b      	ldr	r2, [pc, #172]	@ (8003e3c <HAL_TIM_MspPostInit+0xec>)
 8003d90:	f043 0302 	orr.w	r3, r3, #2
 8003d94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d96:	4b29      	ldr	r3, [pc, #164]	@ (8003e3c <HAL_TIM_MspPostInit+0xec>)
 8003d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PA15     ------> TIM8_CH1
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003da2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003da8:	2302      	movs	r3, #2
 8003daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003dac:	2302      	movs	r3, #2
 8003dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003db0:	2303      	movs	r3, #3
 8003db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8003db4:	2302      	movs	r3, #2
 8003db6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003db8:	f107 0314 	add.w	r3, r7, #20
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003dc2:	f003 fd47 	bl	8007854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003dc6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dcc:	2302      	movs	r3, #2
 8003dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8003dd8:	230a      	movs	r3, #10
 8003dda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ddc:	f107 0314 	add.w	r3, r7, #20
 8003de0:	4619      	mov	r1, r3
 8003de2:	4817      	ldr	r0, [pc, #92]	@ (8003e40 <HAL_TIM_MspPostInit+0xf0>)
 8003de4:	f003 fd36 	bl	8007854 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8003de8:	e021      	b.n	8003e2e <HAL_TIM_MspPostInit+0xde>
  else if(htim->Instance==TIM15)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a15      	ldr	r2, [pc, #84]	@ (8003e44 <HAL_TIM_MspPostInit+0xf4>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d11c      	bne.n	8003e2e <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003df4:	4b11      	ldr	r3, [pc, #68]	@ (8003e3c <HAL_TIM_MspPostInit+0xec>)
 8003df6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003df8:	4a10      	ldr	r2, [pc, #64]	@ (8003e3c <HAL_TIM_MspPostInit+0xec>)
 8003dfa:	f043 0302 	orr.w	r3, r3, #2
 8003dfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e00:	4b0e      	ldr	r3, [pc, #56]	@ (8003e3c <HAL_TIM_MspPostInit+0xec>)
 8003e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	60bb      	str	r3, [r7, #8]
 8003e0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003e0c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e12:	2302      	movs	r3, #2
 8003e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e16:	2301      	movs	r3, #1
 8003e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e22:	f107 0314 	add.w	r3, r7, #20
 8003e26:	4619      	mov	r1, r3
 8003e28:	4805      	ldr	r0, [pc, #20]	@ (8003e40 <HAL_TIM_MspPostInit+0xf0>)
 8003e2a:	f003 fd13 	bl	8007854 <HAL_GPIO_Init>
}
 8003e2e:	bf00      	nop
 8003e30:	3728      	adds	r7, #40	@ 0x28
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	40013400 	.word	0x40013400
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	48000400 	.word	0x48000400
 8003e44:	40014000 	.word	0x40014000

08003e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003e4c:	f006 fef8 	bl	800ac40 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003e50:	bf00      	nop
 8003e52:	e7fd      	b.n	8003e50 <NMI_Handler+0x8>

08003e54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e58:	bf00      	nop
 8003e5a:	e7fd      	b.n	8003e58 <HardFault_Handler+0x4>

08003e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e60:	bf00      	nop
 8003e62:	e7fd      	b.n	8003e60 <MemManage_Handler+0x4>

08003e64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e68:	bf00      	nop
 8003e6a:	e7fd      	b.n	8003e68 <BusFault_Handler+0x4>

08003e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e70:	bf00      	nop
 8003e72:	e7fd      	b.n	8003e70 <UsageFault_Handler+0x4>

08003e74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e78:	bf00      	nop
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e82:	b480      	push	{r7}
 8003e84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e86:	bf00      	nop
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e94:	bf00      	nop
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ea2:	f000 fa8b 	bl	80043bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ea6:	bf00      	nop
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003eae:	2001      	movs	r0, #1
 8003eb0:	f003 fe6a 	bl	8007b88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003eb4:	bf00      	nop
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003ebc:	2002      	movs	r0, #2
 8003ebe:	f003 fe63 	bl	8007b88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003ec2:	bf00      	nop
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003eca:	2004      	movs	r0, #4
 8003ecc:	f003 fe5c 	bl	8007b88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003ed0:	bf00      	nop
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003ed8:	2008      	movs	r0, #8
 8003eda:	f003 fe55 	bl	8007b88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003ede:	bf00      	nop
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003ee6:	2010      	movs	r0, #16
 8003ee8:	f003 fe4e 	bl	8007b88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003eec:	bf00      	nop
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch3);
 8003ef4:	4802      	ldr	r0, [pc, #8]	@ (8003f00 <DMA1_Channel1_IRQHandler+0x10>)
 8003ef6:	f003 fb5e 	bl	80075b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003efa:	bf00      	nop
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20000bbc 	.word	0x20000bbc

08003f04 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim15_ch1);
 8003f08:	4802      	ldr	r0, [pc, #8]	@ (8003f14 <DMA1_Channel2_IRQHandler+0x10>)
 8003f0a:	f003 fb54 	bl	80075b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003f0e:	bf00      	nop
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	20000c1c 	.word	0x20000c1c

08003f18 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8003f1c:	4802      	ldr	r0, [pc, #8]	@ (8003f28 <DMA1_Channel3_IRQHandler+0x10>)
 8003f1e:	f003 fb4a 	bl	80075b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003f22:	bf00      	nop
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	200008fc 	.word	0x200008fc

08003f2c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8003f30:	4802      	ldr	r0, [pc, #8]	@ (8003f3c <DMA1_Channel4_IRQHandler+0x10>)
 8003f32:	f003 fb40 	bl	80075b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003f36:	bf00      	nop
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	20000564 	.word	0x20000564

08003f40 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003f44:	4802      	ldr	r0, [pc, #8]	@ (8003f50 <DMA1_Channel5_IRQHandler+0x10>)
 8003f46:	f003 fb36 	bl	80075b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003f4a:	bf00      	nop
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	20000504 	.word	0x20000504

08003f54 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003f58:	4802      	ldr	r0, [pc, #8]	@ (8003f64 <USB_LP_IRQHandler+0x10>)
 8003f5a:	f004 fcb3 	bl	80088c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8003f5e:	bf00      	nop
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	20003864 	.word	0x20003864

08003f68 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003f6c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003f70:	f003 fe0a 	bl	8007b88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003f74:	bf00      	nop
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	  FT6336_GetTouchPoint(&TouchPoints);
 8003f7c:	4808      	ldr	r0, [pc, #32]	@ (8003fa0 <EXTI15_10_IRQHandler+0x28>)
 8003f7e:	f7fd f98d 	bl	800129c <FT6336_GetTouchPoint>

	  ST7789_DrawPixel(TouchPoints.point1_x, TouchPoints.point1_y, 0xffffff);
 8003f82:	4b07      	ldr	r3, [pc, #28]	@ (8003fa0 <EXTI15_10_IRQHandler+0x28>)
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	4a06      	ldr	r2, [pc, #24]	@ (8003fa0 <EXTI15_10_IRQHandler+0x28>)
 8003f88:	8851      	ldrh	r1, [r2, #2]
 8003f8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fe fe84 	bl	8002c9c <ST7789_DrawPixel>


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003f94:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003f98:	f003 fdf6 	bl	8007b88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003f9c:	bf00      	nop
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	200003b8 	.word	0x200003b8

08003fa4 <ADC5_IRQHandler>:

/**
  * @brief This function handles ADC5 global interrupt.
  */
void ADC5_IRQHandler(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC5_IRQn 0 */



  /* USER CODE END ADC5_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc5);
 8003fa8:	4802      	ldr	r0, [pc, #8]	@ (8003fb4 <ADC5_IRQHandler+0x10>)
 8003faa:	f001 f813 	bl	8004fd4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC5_IRQn 1 */

  /* USER CODE END ADC5_IRQn 1 */
}
 8003fae:	bf00      	nop
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	20000498 	.word	0x20000498

08003fb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  return 1;
 8003fbc:	2301      	movs	r3, #1
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <_kill>:

int _kill(int pid, int sig)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003fd2:	f00f fbeb 	bl	80137ac <__errno>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2216      	movs	r2, #22
 8003fda:	601a      	str	r2, [r3, #0]
  return -1;
 8003fdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <_exit>:

void _exit (int status)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7ff ffe7 	bl	8003fc8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003ffa:	bf00      	nop
 8003ffc:	e7fd      	b.n	8003ffa <_exit+0x12>

08003ffe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b086      	sub	sp, #24
 8004002:	af00      	add	r7, sp, #0
 8004004:	60f8      	str	r0, [r7, #12]
 8004006:	60b9      	str	r1, [r7, #8]
 8004008:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800400a:	2300      	movs	r3, #0
 800400c:	617b      	str	r3, [r7, #20]
 800400e:	e00a      	b.n	8004026 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004010:	f3af 8000 	nop.w
 8004014:	4601      	mov	r1, r0
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	60ba      	str	r2, [r7, #8]
 800401c:	b2ca      	uxtb	r2, r1
 800401e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	3301      	adds	r3, #1
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	429a      	cmp	r2, r3
 800402c:	dbf0      	blt.n	8004010 <_read+0x12>
  }

  return len;
 800402e:	687b      	ldr	r3, [r7, #4]
}
 8004030:	4618      	mov	r0, r3
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	e009      	b.n	800405e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	1c5a      	adds	r2, r3, #1
 800404e:	60ba      	str	r2, [r7, #8]
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	4618      	mov	r0, r3
 8004054:	f7fd f990 	bl	8001378 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	3301      	adds	r3, #1
 800405c:	617b      	str	r3, [r7, #20]
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	429a      	cmp	r2, r3
 8004064:	dbf1      	blt.n	800404a <_write+0x12>
  }
  return len;
 8004066:	687b      	ldr	r3, [r7, #4]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <_close>:

int _close(int file)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004078:	f04f 33ff 	mov.w	r3, #4294967295
}
 800407c:	4618      	mov	r0, r3
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004098:	605a      	str	r2, [r3, #4]
  return 0;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <_isatty>:

int _isatty(int file)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80040b0:	2301      	movs	r3, #1
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80040be:	b480      	push	{r7}
 80040c0:	b085      	sub	sp, #20
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	60f8      	str	r0, [r7, #12]
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040e0:	4a14      	ldr	r2, [pc, #80]	@ (8004134 <_sbrk+0x5c>)
 80040e2:	4b15      	ldr	r3, [pc, #84]	@ (8004138 <_sbrk+0x60>)
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040ec:	4b13      	ldr	r3, [pc, #76]	@ (800413c <_sbrk+0x64>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d102      	bne.n	80040fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040f4:	4b11      	ldr	r3, [pc, #68]	@ (800413c <_sbrk+0x64>)
 80040f6:	4a12      	ldr	r2, [pc, #72]	@ (8004140 <_sbrk+0x68>)
 80040f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040fa:	4b10      	ldr	r3, [pc, #64]	@ (800413c <_sbrk+0x64>)
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4413      	add	r3, r2
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	429a      	cmp	r2, r3
 8004106:	d207      	bcs.n	8004118 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004108:	f00f fb50 	bl	80137ac <__errno>
 800410c:	4603      	mov	r3, r0
 800410e:	220c      	movs	r2, #12
 8004110:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004112:	f04f 33ff 	mov.w	r3, #4294967295
 8004116:	e009      	b.n	800412c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004118:	4b08      	ldr	r3, [pc, #32]	@ (800413c <_sbrk+0x64>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800411e:	4b07      	ldr	r3, [pc, #28]	@ (800413c <_sbrk+0x64>)
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4413      	add	r3, r2
 8004126:	4a05      	ldr	r2, [pc, #20]	@ (800413c <_sbrk+0x64>)
 8004128:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800412a:	68fb      	ldr	r3, [r7, #12]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3718      	adds	r7, #24
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	20020000 	.word	0x20020000
 8004138:	00000400 	.word	0x00000400
 800413c:	20002978 	.word	0x20002978
 8004140:	20003eb0 	.word	0x20003eb0

08004144 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004148:	4b06      	ldr	r3, [pc, #24]	@ (8004164 <SystemInit+0x20>)
 800414a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800414e:	4a05      	ldr	r2, [pc, #20]	@ (8004164 <SystemInit+0x20>)
 8004150:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004154:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004158:	bf00      	nop
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	e000ed00 	.word	0xe000ed00

08004168 <WS2812_Write_Data>:
 * @param  Color:颜色24bit of RGB888
 * @param  index:灯的标号
 * @return None
 */
void WS2812_Write_Data(uint32_t Color, uint8_t index)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	460b      	mov	r3, r1
 8004172:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < 24; i++)
 8004174:	2300      	movs	r3, #0
 8004176:	73fb      	strb	r3, [r7, #15]
 8004178:	e018      	b.n	80041ac <WS2812_Write_Data+0x44>
		WS2812_Buf[24 * index + i] = (((Color << i) & 0X800000) ? High_Code : Low_Code);
 800417a:	7bfb      	ldrb	r3, [r7, #15]
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <WS2812_Write_Data+0x26>
 800418a:	215a      	movs	r1, #90	@ 0x5a
 800418c:	e000      	b.n	8004190 <WS2812_Write_Data+0x28>
 800418e:	212d      	movs	r1, #45	@ 0x2d
 8004190:	78fa      	ldrb	r2, [r7, #3]
 8004192:	4613      	mov	r3, r2
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	4413      	add	r3, r2
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	461a      	mov	r2, r3
 800419c:	7bfb      	ldrb	r3, [r7, #15]
 800419e:	4413      	add	r3, r2
 80041a0:	4a07      	ldr	r2, [pc, #28]	@ (80041c0 <WS2812_Write_Data+0x58>)
 80041a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < 24; i++)
 80041a6:	7bfb      	ldrb	r3, [r7, #15]
 80041a8:	3301      	adds	r3, #1
 80041aa:	73fb      	strb	r3, [r7, #15]
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
 80041ae:	2b17      	cmp	r3, #23
 80041b0:	d9e3      	bls.n	800417a <WS2812_Write_Data+0x12>
}
 80041b2:	bf00      	nop
 80041b4:	bf00      	nop
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	2000297c 	.word	0x2000297c

080041c4 <WS2812_Update>:
 * @brief  WS2812更新指令
 * @param  None
 * @return None
 */
void WS2812_Update(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&WS2812_TIM,WS2812_CHANNEL,(uint32_t *)WS2812_Buf,WS2812_BUF_SIZE);
 80041c8:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80041cc:	4a03      	ldr	r2, [pc, #12]	@ (80041dc <WS2812_Update+0x18>)
 80041ce:	2108      	movs	r1, #8
 80041d0:	4803      	ldr	r0, [pc, #12]	@ (80041e0 <WS2812_Update+0x1c>)
 80041d2:	f007 ff35 	bl	800c040 <HAL_TIM_PWM_Start_DMA>
}
 80041d6:	bf00      	nop
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	2000297c 	.word	0x2000297c
 80041e0:	20000ad8 	.word	0x20000ad8

080041e4 <RGBColorToUint32>:

// 将位域结构体转换为 uint32_t 类型
uint32_t RGBColorToUint32(RGBColor color) {
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
    return (color.red << 16) | (color.green << 8) | color.blue;
 80041ec:	793b      	ldrb	r3, [r7, #4]
 80041ee:	041a      	lsls	r2, r3, #16
 80041f0:	797b      	ldrb	r3, [r7, #5]
 80041f2:	021b      	lsls	r3, r3, #8
 80041f4:	4313      	orrs	r3, r2
 80041f6:	79ba      	ldrb	r2, [r7, #6]
 80041f8:	4313      	orrs	r3, r2
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
	...

08004208 <WS2812_Write_Colors>:
 * @brief Write a series of RGB colors to WS2812 with brightness adjustment.
 * @param colors Pointer to the original RGBColor array.
 * @param count Number of elements in the array.
 * @return None
 */
void WS2812_Write_Colors(RGBColor *colors, uint8_t count) {
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	460b      	mov	r3, r1
 8004212:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < count; i++) {
 8004214:	2300      	movs	r3, #0
 8004216:	75fb      	strb	r3, [r7, #23]
 8004218:	e046      	b.n	80042a8 <WS2812_Write_Colors+0xa0>
        uint32_t color_value = RGBColorToUint32(colors[i]);
 800421a:	7dfb      	ldrb	r3, [r7, #23]
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	4413      	add	r3, r2
 8004222:	6818      	ldr	r0, [r3, #0]
 8004224:	f7ff ffde 	bl	80041e4 <RGBColorToUint32>
 8004228:	6138      	str	r0, [r7, #16]
        // 分离出 RGB 各通道
        uint8_t red = (color_value >> 16) & 0xFF;
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	0c1b      	lsrs	r3, r3, #16
 800422e:	73fb      	strb	r3, [r7, #15]
        uint8_t green = (color_value >> 8) & 0xFF;
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	0a1b      	lsrs	r3, r3, #8
 8004234:	73bb      	strb	r3, [r7, #14]
        uint8_t blue = color_value & 0xFF;
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	737b      	strb	r3, [r7, #13]

        // 调整各通道亮度
        red = (uint16_t)red * WS2812_Brightness / 255;
 800423a:	7bfb      	ldrb	r3, [r7, #15]
 800423c:	4a1f      	ldr	r2, [pc, #124]	@ (80042bc <WS2812_Write_Colors+0xb4>)
 800423e:	7812      	ldrb	r2, [r2, #0]
 8004240:	fb02 f303 	mul.w	r3, r2, r3
 8004244:	4a1e      	ldr	r2, [pc, #120]	@ (80042c0 <WS2812_Write_Colors+0xb8>)
 8004246:	fb82 1203 	smull	r1, r2, r2, r3
 800424a:	441a      	add	r2, r3
 800424c:	11d2      	asrs	r2, r2, #7
 800424e:	17db      	asrs	r3, r3, #31
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	73fb      	strb	r3, [r7, #15]
        green = (uint16_t)green * WS2812_Brightness / 255;
 8004254:	7bbb      	ldrb	r3, [r7, #14]
 8004256:	4a19      	ldr	r2, [pc, #100]	@ (80042bc <WS2812_Write_Colors+0xb4>)
 8004258:	7812      	ldrb	r2, [r2, #0]
 800425a:	fb02 f303 	mul.w	r3, r2, r3
 800425e:	4a18      	ldr	r2, [pc, #96]	@ (80042c0 <WS2812_Write_Colors+0xb8>)
 8004260:	fb82 1203 	smull	r1, r2, r2, r3
 8004264:	441a      	add	r2, r3
 8004266:	11d2      	asrs	r2, r2, #7
 8004268:	17db      	asrs	r3, r3, #31
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	73bb      	strb	r3, [r7, #14]
        blue = (uint16_t)blue * WS2812_Brightness / 255;
 800426e:	7b7b      	ldrb	r3, [r7, #13]
 8004270:	4a12      	ldr	r2, [pc, #72]	@ (80042bc <WS2812_Write_Colors+0xb4>)
 8004272:	7812      	ldrb	r2, [r2, #0]
 8004274:	fb02 f303 	mul.w	r3, r2, r3
 8004278:	4a11      	ldr	r2, [pc, #68]	@ (80042c0 <WS2812_Write_Colors+0xb8>)
 800427a:	fb82 1203 	smull	r1, r2, r2, r3
 800427e:	441a      	add	r2, r3
 8004280:	11d2      	asrs	r2, r2, #7
 8004282:	17db      	asrs	r3, r3, #31
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	737b      	strb	r3, [r7, #13]

        // 重新组合成 uint32_t 类型
        color_value = ((uint32_t)red << 16) | ((uint32_t)green << 8) | blue;
 8004288:	7bfb      	ldrb	r3, [r7, #15]
 800428a:	041a      	lsls	r2, r3, #16
 800428c:	7bbb      	ldrb	r3, [r7, #14]
 800428e:	021b      	lsls	r3, r3, #8
 8004290:	431a      	orrs	r2, r3
 8004292:	7b7b      	ldrb	r3, [r7, #13]
 8004294:	4313      	orrs	r3, r2
 8004296:	613b      	str	r3, [r7, #16]

        WS2812_Write_Data(color_value, i);
 8004298:	7dfb      	ldrb	r3, [r7, #23]
 800429a:	4619      	mov	r1, r3
 800429c:	6938      	ldr	r0, [r7, #16]
 800429e:	f7ff ff63 	bl	8004168 <WS2812_Write_Data>
    for (uint8_t i = 0; i < count; i++) {
 80042a2:	7dfb      	ldrb	r3, [r7, #23]
 80042a4:	3301      	adds	r3, #1
 80042a6:	75fb      	strb	r3, [r7, #23]
 80042a8:	7dfa      	ldrb	r2, [r7, #23]
 80042aa:	78fb      	ldrb	r3, [r7, #3]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d3b4      	bcc.n	800421a <WS2812_Write_Colors+0x12>
    }
    WS2812_Update();
 80042b0:	f7ff ff88 	bl	80041c4 <WS2812_Update>
}
 80042b4:	bf00      	nop
 80042b6:	3718      	adds	r7, #24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	20000048 	.word	0x20000048
 80042c0:	80808081 	.word	0x80808081

080042c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80042c4:	480d      	ldr	r0, [pc, #52]	@ (80042fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80042c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80042c8:	f7ff ff3c 	bl	8004144 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80042cc:	480c      	ldr	r0, [pc, #48]	@ (8004300 <LoopForever+0x6>)
  ldr r1, =_edata
 80042ce:	490d      	ldr	r1, [pc, #52]	@ (8004304 <LoopForever+0xa>)
  ldr r2, =_sidata
 80042d0:	4a0d      	ldr	r2, [pc, #52]	@ (8004308 <LoopForever+0xe>)
  movs r3, #0
 80042d2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80042d4:	e002      	b.n	80042dc <LoopCopyDataInit>

080042d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042da:	3304      	adds	r3, #4

080042dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042e0:	d3f9      	bcc.n	80042d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042e2:	4a0a      	ldr	r2, [pc, #40]	@ (800430c <LoopForever+0x12>)
  ldr r4, =_ebss
 80042e4:	4c0a      	ldr	r4, [pc, #40]	@ (8004310 <LoopForever+0x16>)
  movs r3, #0
 80042e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042e8:	e001      	b.n	80042ee <LoopFillZerobss>

080042ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042ec:	3204      	adds	r2, #4

080042ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042f0:	d3fb      	bcc.n	80042ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80042f2:	f00f fa61 	bl	80137b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80042f6:	f7fd f8ed 	bl	80014d4 <main>

080042fa <LoopForever>:

LoopForever:
    b LoopForever
 80042fa:	e7fe      	b.n	80042fa <LoopForever>
  ldr   r0, =_estack
 80042fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004304:	20000394 	.word	0x20000394
  ldr r2, =_sidata
 8004308:	08024ea0 	.word	0x08024ea0
  ldr r2, =_sbss
 800430c:	20000394 	.word	0x20000394
  ldr r4, =_ebss
 8004310:	20003eac 	.word	0x20003eac

08004314 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004314:	e7fe      	b.n	8004314 <ADC1_2_IRQHandler>

08004316 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b082      	sub	sp, #8
 800431a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800431c:	2300      	movs	r3, #0
 800431e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004320:	2003      	movs	r0, #3
 8004322:	f002 fd6f 	bl	8006e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004326:	200f      	movs	r0, #15
 8004328:	f000 f80e 	bl	8004348 <HAL_InitTick>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	71fb      	strb	r3, [r7, #7]
 8004336:	e001      	b.n	800433c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004338:	f7fe ff16 	bl	8003168 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800433c:	79fb      	ldrb	r3, [r7, #7]

}
 800433e:	4618      	mov	r0, r3
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004350:	2300      	movs	r3, #0
 8004352:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004354:	4b16      	ldr	r3, [pc, #88]	@ (80043b0 <HAL_InitTick+0x68>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d022      	beq.n	80043a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800435c:	4b15      	ldr	r3, [pc, #84]	@ (80043b4 <HAL_InitTick+0x6c>)
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	4b13      	ldr	r3, [pc, #76]	@ (80043b0 <HAL_InitTick+0x68>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004368:	fbb1 f3f3 	udiv	r3, r1, r3
 800436c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004370:	4618      	mov	r0, r3
 8004372:	f002 fd7a 	bl	8006e6a <HAL_SYSTICK_Config>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10f      	bne.n	800439c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b0f      	cmp	r3, #15
 8004380:	d809      	bhi.n	8004396 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004382:	2200      	movs	r2, #0
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	f04f 30ff 	mov.w	r0, #4294967295
 800438a:	f002 fd46 	bl	8006e1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800438e:	4a0a      	ldr	r2, [pc, #40]	@ (80043b8 <HAL_InitTick+0x70>)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6013      	str	r3, [r2, #0]
 8004394:	e007      	b.n	80043a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	73fb      	strb	r3, [r7, #15]
 800439a:	e004      	b.n	80043a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	73fb      	strb	r3, [r7, #15]
 80043a0:	e001      	b.n	80043a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80043a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	20000050 	.word	0x20000050
 80043b4:	20000044 	.word	0x20000044
 80043b8:	2000004c 	.word	0x2000004c

080043bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043c0:	4b05      	ldr	r3, [pc, #20]	@ (80043d8 <HAL_IncTick+0x1c>)
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	4b05      	ldr	r3, [pc, #20]	@ (80043dc <HAL_IncTick+0x20>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4413      	add	r3, r2
 80043ca:	4a03      	ldr	r2, [pc, #12]	@ (80043d8 <HAL_IncTick+0x1c>)
 80043cc:	6013      	str	r3, [r2, #0]
}
 80043ce:	bf00      	nop
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	20002b8c 	.word	0x20002b8c
 80043dc:	20000050 	.word	0x20000050

080043e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0
  return uwTick;
 80043e4:	4b03      	ldr	r3, [pc, #12]	@ (80043f4 <HAL_GetTick+0x14>)
 80043e6:	681b      	ldr	r3, [r3, #0]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	20002b8c 	.word	0x20002b8c

080043f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004400:	f7ff ffee 	bl	80043e0 <HAL_GetTick>
 8004404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004410:	d004      	beq.n	800441c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004412:	4b09      	ldr	r3, [pc, #36]	@ (8004438 <HAL_Delay+0x40>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	4413      	add	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800441c:	bf00      	nop
 800441e:	f7ff ffdf 	bl	80043e0 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	429a      	cmp	r2, r3
 800442c:	d8f7      	bhi.n	800441e <HAL_Delay+0x26>
  {
  }
}
 800442e:	bf00      	nop
 8004430:	bf00      	nop
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	20000050 	.word	0x20000050

0800443c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8004444:	4b06      	ldr	r3, [pc, #24]	@ (8004460 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f023 0202 	bic.w	r2, r3, #2
 800444c:	4904      	ldr	r1, [pc, #16]	@ (8004460 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4313      	orrs	r3, r2
 8004452:	600b      	str	r3, [r1, #0]
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	40010030 	.word	0x40010030

08004464 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8004468:	4b05      	ldr	r3, [pc, #20]	@ (8004480 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a04      	ldr	r2, [pc, #16]	@ (8004480 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 800446e:	f023 0301 	bic.w	r3, r3, #1
 8004472:	6013      	str	r3, [r2, #0]
}
 8004474:	bf00      	nop
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	40010030 	.word	0x40010030

08004484 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	431a      	orrs	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	609a      	str	r2, [r3, #8]
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b083      	sub	sp, #12
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	431a      	orrs	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	609a      	str	r2, [r3, #8]
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	3360      	adds	r3, #96	@ 0x60
 80044fe:	461a      	mov	r2, r3
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	4b08      	ldr	r3, [pc, #32]	@ (8004530 <LL_ADC_SetOffset+0x44>)
 800450e:	4013      	ands	r3, r2
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	4313      	orrs	r3, r2
 800451c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004524:	bf00      	nop
 8004526:	371c      	adds	r7, #28
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	03fff000 	.word	0x03fff000

08004534 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	3360      	adds	r3, #96	@ 0x60
 8004542:	461a      	mov	r2, r3
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004554:	4618      	mov	r0, r3
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004560:	b480      	push	{r7}
 8004562:	b087      	sub	sp, #28
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	3360      	adds	r3, #96	@ 0x60
 8004570:	461a      	mov	r2, r3
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	431a      	orrs	r2, r3
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800458a:	bf00      	nop
 800458c:	371c      	adds	r7, #28
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004596:	b480      	push	{r7}
 8004598:	b087      	sub	sp, #28
 800459a:	af00      	add	r7, sp, #0
 800459c:	60f8      	str	r0, [r7, #12]
 800459e:	60b9      	str	r1, [r7, #8]
 80045a0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	3360      	adds	r3, #96	@ 0x60
 80045a6:	461a      	mov	r2, r3
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4413      	add	r3, r2
 80045ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	431a      	orrs	r2, r3
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80045c0:	bf00      	nop
 80045c2:	371c      	adds	r7, #28
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b087      	sub	sp, #28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	3360      	adds	r3, #96	@ 0x60
 80045dc:	461a      	mov	r2, r3
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	431a      	orrs	r2, r3
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80045f6:	bf00      	nop
 80045f8:	371c      	adds	r7, #28
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004602:	b480      	push	{r7}
 8004604:	b083      	sub	sp, #12
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
 800460a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	615a      	str	r2, [r3, #20]
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800463c:	2301      	movs	r3, #1
 800463e:	e000      	b.n	8004642 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800464e:	b480      	push	{r7}
 8004650:	b087      	sub	sp, #28
 8004652:	af00      	add	r7, sp, #0
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	3330      	adds	r3, #48	@ 0x30
 800465e:	461a      	mov	r2, r3
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	0a1b      	lsrs	r3, r3, #8
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	f003 030c 	and.w	r3, r3, #12
 800466a:	4413      	add	r3, r2
 800466c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	f003 031f 	and.w	r3, r3, #31
 8004678:	211f      	movs	r1, #31
 800467a:	fa01 f303 	lsl.w	r3, r1, r3
 800467e:	43db      	mvns	r3, r3
 8004680:	401a      	ands	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	0e9b      	lsrs	r3, r3, #26
 8004686:	f003 011f 	and.w	r1, r3, #31
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	f003 031f 	and.w	r3, r3, #31
 8004690:	fa01 f303 	lsl.w	r3, r1, r3
 8004694:	431a      	orrs	r2, r3
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800469a:	bf00      	nop
 800469c:	371c      	adds	r7, #28
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b083      	sub	sp, #12
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046b2:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80046ba:	2301      	movs	r3, #1
 80046bc:	e000      	b.n	80046c0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	3314      	adds	r3, #20
 80046dc:	461a      	mov	r2, r3
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	0e5b      	lsrs	r3, r3, #25
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	f003 0304 	and.w	r3, r3, #4
 80046e8:	4413      	add	r3, r2
 80046ea:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	0d1b      	lsrs	r3, r3, #20
 80046f4:	f003 031f 	and.w	r3, r3, #31
 80046f8:	2107      	movs	r1, #7
 80046fa:	fa01 f303 	lsl.w	r3, r1, r3
 80046fe:	43db      	mvns	r3, r3
 8004700:	401a      	ands	r2, r3
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	0d1b      	lsrs	r3, r3, #20
 8004706:	f003 031f 	and.w	r3, r3, #31
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	fa01 f303 	lsl.w	r3, r1, r3
 8004710:	431a      	orrs	r2, r3
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004716:	bf00      	nop
 8004718:	371c      	adds	r7, #28
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
	...

08004724 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800473c:	43db      	mvns	r3, r3
 800473e:	401a      	ands	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f003 0318 	and.w	r3, r3, #24
 8004746:	4908      	ldr	r1, [pc, #32]	@ (8004768 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004748:	40d9      	lsrs	r1, r3
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	400b      	ands	r3, r1
 800474e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004752:	431a      	orrs	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800475a:	bf00      	nop
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	0007ffff 	.word	0x0007ffff

0800476c <LL_ADC_SetAnalogWDMonitChannels>:
  *             On this STM32 series, all ADCx are not available on all devices. Refer to device datasheet
  *             for more details.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 800476c:	b480      	push	{r7}
 800476e:	b087      	sub	sp, #28
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR,
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	330c      	adds	r3, #12
 800477c:	4618      	mov	r0, r3
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	0d1b      	lsrs	r3, r3, #20
 8004782:	f003 0103 	and.w	r1, r3, #3
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	f003 0201 	and.w	r2, r3, #1
 800478c:	4613      	mov	r3, r2
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	4413      	add	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	440b      	add	r3, r1
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4403      	add	r3, r0
 800479a:	617b      	str	r3, [r7, #20]
                                             ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK)
                                                * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f023 4302 	bic.w	r3, r3, #2181038080	@ 0x82000000
 80047a6:	f423 1360 	bic.w	r3, r3, #3670016	@ 0x380000
 80047aa:	43db      	mvns	r3, r3
 80047ac:	401a      	ands	r2, r3
 80047ae:	6879      	ldr	r1, [r7, #4]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	400b      	ands	r3, r1
 80047b4:	431a      	orrs	r2, r3
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 80047ba:	bf00      	nop
 80047bc:	371c      	adds	r7, #28
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b087      	sub	sp, #28
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	60f8      	str	r0, [r7, #12]
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	607a      	str	r2, [r7, #4]
 80047d2:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1,
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	3320      	adds	r3, #32
 80047d8:	461a      	mov	r2, r3
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	0d1b      	lsrs	r3, r3, #20
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	f003 030c 	and.w	r3, r3, #12
 80047e4:	4413      	add	r3, r2
 80047e6:	617b      	str	r3, [r7, #20]
                                             ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 22f0 	and.w	r2, r3, #4026593280	@ 0xf000f000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	0419      	lsls	r1, r3, #16
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	430b      	orrs	r3, r1
 80047f8:	431a      	orrs	r2, r3
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 80047fe:	bf00      	nop
 8004800:	371c      	adds	r7, #28
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 031f 	and.w	r3, r3, #31
}
 800481a:	4618      	mov	r0, r3
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8004836:	4618      	mov	r0, r3
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004852:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6093      	str	r3, [r2, #8]
}
 800485a:	bf00      	nop
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004876:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800487a:	d101      	bne.n	8004880 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800487c:	2301      	movs	r3, #1
 800487e:	e000      	b.n	8004882 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800488e:	b480      	push	{r7}
 8004890:	b083      	sub	sp, #12
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800489e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80048a2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048ca:	d101      	bne.n	80048d0 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80048cc:	2301      	movs	r3, #1
 80048ce:	e000      	b.n	80048d2 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80048ee:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80048f2:	f043 0201 	orr.w	r2, r3, #1
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b01      	cmp	r3, #1
 8004918:	d101      	bne.n	800491e <LL_ADC_IsEnabled+0x18>
 800491a:	2301      	movs	r3, #1
 800491c:	e000      	b.n	8004920 <LL_ADC_IsEnabled+0x1a>
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800493c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004940:	f043 0204 	orr.w	r2, r3, #4
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b04      	cmp	r3, #4
 8004966:	d101      	bne.n	800496c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004968:	2301      	movs	r3, #1
 800496a:	e000      	b.n	800496e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	2b08      	cmp	r3, #8
 800498c:	d101      	bne.n	8004992 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800498e:	2301      	movs	r3, #1
 8004990:	e000      	b.n	8004994 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2280      	movs	r2, #128	@ 0x80
 80049ac:	601a      	str	r2, [r3, #0]
}
 80049ae:	bf00      	nop
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80049c8:	601a      	str	r2, [r3, #0]
}
 80049ca:	bf00      	nop
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049e4:	601a      	str	r2, [r3, #0]
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	605a      	str	r2, [r3, #4]
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b083      	sub	sp, #12
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	605a      	str	r2, [r3, #4]
}
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b083      	sub	sp, #12
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	605a      	str	r2, [r3, #4]
}
 8004a46:	bf00      	nop
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	605a      	str	r2, [r3, #4]
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b083      	sub	sp, #12
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	605a      	str	r2, [r3, #4]
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	605a      	str	r2, [r3, #4]
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
	...

08004ab4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004ab4:	b590      	push	{r4, r7, lr}
 8004ab6:	b089      	sub	sp, #36	@ 0x24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004abc:	2300      	movs	r3, #0
 8004abe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e1a9      	b.n	8004e22 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d109      	bne.n	8004af0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7fe fb6b 	bl	80031b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7ff feb6 	bl	8004866 <LL_ADC_IsDeepPowerDownEnabled>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d004      	beq.n	8004b0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7ff fe9c 	bl	8004842 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7ff fed1 	bl	80048b6 <LL_ADC_IsInternalRegulatorEnabled>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d115      	bne.n	8004b46 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7ff feb5 	bl	800488e <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b24:	4b9c      	ldr	r3, [pc, #624]	@ (8004d98 <HAL_ADC_Init+0x2e4>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	099b      	lsrs	r3, r3, #6
 8004b2a:	4a9c      	ldr	r2, [pc, #624]	@ (8004d9c <HAL_ADC_Init+0x2e8>)
 8004b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b30:	099b      	lsrs	r3, r3, #6
 8004b32:	3301      	adds	r3, #1
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004b38:	e002      	b.n	8004b40 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1f9      	bne.n	8004b3a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7ff feb3 	bl	80048b6 <LL_ADC_IsInternalRegulatorEnabled>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10d      	bne.n	8004b72 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b5a:	f043 0210 	orr.w	r2, r3, #16
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b66:	f043 0201 	orr.w	r2, r3, #1
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7ff feec 	bl	8004954 <LL_ADC_REG_IsConversionOngoing>
 8004b7c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b82:	f003 0310 	and.w	r3, r3, #16
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f040 8142 	bne.w	8004e10 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f040 813e 	bne.w	8004e10 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b98:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004b9c:	f043 0202 	orr.w	r2, r3, #2
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7ff feac 	bl	8004906 <LL_ADC_IsEnabled>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d141      	bne.n	8004c38 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bbc:	d004      	beq.n	8004bc8 <HAL_ADC_Init+0x114>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a77      	ldr	r2, [pc, #476]	@ (8004da0 <HAL_ADC_Init+0x2ec>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d10f      	bne.n	8004be8 <HAL_ADC_Init+0x134>
 8004bc8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004bcc:	f7ff fe9b 	bl	8004906 <LL_ADC_IsEnabled>
 8004bd0:	4604      	mov	r4, r0
 8004bd2:	4873      	ldr	r0, [pc, #460]	@ (8004da0 <HAL_ADC_Init+0x2ec>)
 8004bd4:	f7ff fe97 	bl	8004906 <LL_ADC_IsEnabled>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	4323      	orrs	r3, r4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	bf0c      	ite	eq
 8004be0:	2301      	moveq	r3, #1
 8004be2:	2300      	movne	r3, #0
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	e012      	b.n	8004c0e <HAL_ADC_Init+0x15a>
 8004be8:	486e      	ldr	r0, [pc, #440]	@ (8004da4 <HAL_ADC_Init+0x2f0>)
 8004bea:	f7ff fe8c 	bl	8004906 <LL_ADC_IsEnabled>
 8004bee:	4604      	mov	r4, r0
 8004bf0:	486d      	ldr	r0, [pc, #436]	@ (8004da8 <HAL_ADC_Init+0x2f4>)
 8004bf2:	f7ff fe88 	bl	8004906 <LL_ADC_IsEnabled>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	431c      	orrs	r4, r3
 8004bfa:	486c      	ldr	r0, [pc, #432]	@ (8004dac <HAL_ADC_Init+0x2f8>)
 8004bfc:	f7ff fe83 	bl	8004906 <LL_ADC_IsEnabled>
 8004c00:	4603      	mov	r3, r0
 8004c02:	4323      	orrs	r3, r4
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	bf0c      	ite	eq
 8004c08:	2301      	moveq	r3, #1
 8004c0a:	2300      	movne	r3, #0
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d012      	beq.n	8004c38 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c1a:	d004      	beq.n	8004c26 <HAL_ADC_Init+0x172>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a5f      	ldr	r2, [pc, #380]	@ (8004da0 <HAL_ADC_Init+0x2ec>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d101      	bne.n	8004c2a <HAL_ADC_Init+0x176>
 8004c26:	4a62      	ldr	r2, [pc, #392]	@ (8004db0 <HAL_ADC_Init+0x2fc>)
 8004c28:	e000      	b.n	8004c2c <HAL_ADC_Init+0x178>
 8004c2a:	4a62      	ldr	r2, [pc, #392]	@ (8004db4 <HAL_ADC_Init+0x300>)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	4619      	mov	r1, r3
 8004c32:	4610      	mov	r0, r2
 8004c34:	f7ff fc26 	bl	8004484 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	7f5b      	ldrb	r3, [r3, #29]
 8004c3c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c42:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004c48:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004c4e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004c56:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d106      	bne.n	8004c74 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	045b      	lsls	r3, r3, #17
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d009      	beq.n	8004c90 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c80:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c88:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004c8a:	69ba      	ldr	r2, [r7, #24]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68da      	ldr	r2, [r3, #12]
 8004c96:	4b48      	ldr	r3, [pc, #288]	@ (8004db8 <HAL_ADC_Init+0x304>)
 8004c98:	4013      	ands	r3, r2
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	6812      	ldr	r2, [r2, #0]
 8004c9e:	69b9      	ldr	r1, [r7, #24]
 8004ca0:	430b      	orrs	r3, r1
 8004ca2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff fe5b 	bl	800497a <LL_ADC_INJ_IsConversionOngoing>
 8004cc4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d17f      	bne.n	8004dcc <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d17c      	bne.n	8004dcc <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004cd6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004cde:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cee:	f023 0302 	bic.w	r3, r3, #2
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	6812      	ldr	r2, [r2, #0]
 8004cf6:	69b9      	ldr	r1, [r7, #24]
 8004cf8:	430b      	orrs	r3, r1
 8004cfa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d017      	beq.n	8004d34 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	691a      	ldr	r2, [r3, #16]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004d12:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004d1c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004d20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	6911      	ldr	r1, [r2, #16]
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6812      	ldr	r2, [r2, #0]
 8004d2c:	430b      	orrs	r3, r1
 8004d2e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004d32:	e013      	b.n	8004d5c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	691a      	ldr	r2, [r3, #16]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004d42:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	6812      	ldr	r2, [r2, #0]
 8004d50:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004d54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004d58:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d12a      	bne.n	8004dbc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004d70:	f023 0304 	bic.w	r3, r3, #4
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004d7c:	4311      	orrs	r1, r2
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004d82:	4311      	orrs	r1, r2
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f042 0201 	orr.w	r2, r2, #1
 8004d94:	611a      	str	r2, [r3, #16]
 8004d96:	e019      	b.n	8004dcc <HAL_ADC_Init+0x318>
 8004d98:	20000044 	.word	0x20000044
 8004d9c:	053e2d63 	.word	0x053e2d63
 8004da0:	50000100 	.word	0x50000100
 8004da4:	50000400 	.word	0x50000400
 8004da8:	50000500 	.word	0x50000500
 8004dac:	50000600 	.word	0x50000600
 8004db0:	50000300 	.word	0x50000300
 8004db4:	50000700 	.word	0x50000700
 8004db8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	691a      	ldr	r2, [r3, #16]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 0201 	bic.w	r2, r2, #1
 8004dca:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d10c      	bne.n	8004dee <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dda:	f023 010f 	bic.w	r1, r3, #15
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	1e5a      	subs	r2, r3, #1
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	631a      	str	r2, [r3, #48]	@ 0x30
 8004dec:	e007      	b.n	8004dfe <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f022 020f 	bic.w	r2, r2, #15
 8004dfc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e02:	f023 0303 	bic.w	r3, r3, #3
 8004e06:	f043 0201 	orr.w	r2, r3, #1
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004e0e:	e007      	b.n	8004e20 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e14:	f043 0210 	orr.w	r2, r3, #16
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004e20:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3724      	adds	r7, #36	@ 0x24
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd90      	pop	{r4, r7, pc}
 8004e2a:	bf00      	nop

08004e2c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e40:	d004      	beq.n	8004e4c <HAL_ADC_Start_DMA+0x20>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a5a      	ldr	r2, [pc, #360]	@ (8004fb0 <HAL_ADC_Start_DMA+0x184>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d101      	bne.n	8004e50 <HAL_ADC_Start_DMA+0x24>
 8004e4c:	4b59      	ldr	r3, [pc, #356]	@ (8004fb4 <HAL_ADC_Start_DMA+0x188>)
 8004e4e:	e000      	b.n	8004e52 <HAL_ADC_Start_DMA+0x26>
 8004e50:	4b59      	ldr	r3, [pc, #356]	@ (8004fb8 <HAL_ADC_Start_DMA+0x18c>)
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7ff fcd9 	bl	800480a <LL_ADC_GetMultimode>
 8004e58:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7ff fd78 	bl	8004954 <LL_ADC_REG_IsConversionOngoing>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f040 809b 	bne.w	8004fa2 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d101      	bne.n	8004e7a <HAL_ADC_Start_DMA+0x4e>
 8004e76:	2302      	movs	r3, #2
 8004e78:	e096      	b.n	8004fa8 <HAL_ADC_Start_DMA+0x17c>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a4d      	ldr	r2, [pc, #308]	@ (8004fbc <HAL_ADC_Start_DMA+0x190>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d008      	beq.n	8004e9e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d005      	beq.n	8004e9e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	2b05      	cmp	r3, #5
 8004e96:	d002      	beq.n	8004e9e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	2b09      	cmp	r3, #9
 8004e9c:	d17a      	bne.n	8004f94 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f001 f96c 	bl	800617c <ADC_Enable>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004ea8:	7dfb      	ldrb	r3, [r7, #23]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d16d      	bne.n	8004f8a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eb2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004eb6:	f023 0301 	bic.w	r3, r3, #1
 8004eba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a3a      	ldr	r2, [pc, #232]	@ (8004fb0 <HAL_ADC_Start_DMA+0x184>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d009      	beq.n	8004ee0 <HAL_ADC_Start_DMA+0xb4>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a3b      	ldr	r2, [pc, #236]	@ (8004fc0 <HAL_ADC_Start_DMA+0x194>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d002      	beq.n	8004edc <HAL_ADC_Start_DMA+0xb0>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	e003      	b.n	8004ee4 <HAL_ADC_Start_DMA+0xb8>
 8004edc:	4b39      	ldr	r3, [pc, #228]	@ (8004fc4 <HAL_ADC_Start_DMA+0x198>)
 8004ede:	e001      	b.n	8004ee4 <HAL_ADC_Start_DMA+0xb8>
 8004ee0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	6812      	ldr	r2, [r2, #0]
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d002      	beq.n	8004ef2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d105      	bne.n	8004efe <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ef6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d006      	beq.n	8004f18 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f0e:	f023 0206 	bic.w	r2, r3, #6
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	661a      	str	r2, [r3, #96]	@ 0x60
 8004f16:	e002      	b.n	8004f1e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f22:	4a29      	ldr	r2, [pc, #164]	@ (8004fc8 <HAL_ADC_Start_DMA+0x19c>)
 8004f24:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f2a:	4a28      	ldr	r2, [pc, #160]	@ (8004fcc <HAL_ADC_Start_DMA+0x1a0>)
 8004f2c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f32:	4a27      	ldr	r2, [pc, #156]	@ (8004fd0 <HAL_ADC_Start_DMA+0x1a4>)
 8004f34:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	221c      	movs	r2, #28
 8004f3c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f042 0210 	orr.w	r2, r2, #16
 8004f54:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68da      	ldr	r2, [r3, #12]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f042 0201 	orr.w	r2, r2, #1
 8004f64:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	3340      	adds	r3, #64	@ 0x40
 8004f70:	4619      	mov	r1, r3
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f002 faa3 	bl	80074c0 <HAL_DMA_Start_IT>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7ff fcd2 	bl	800492c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004f88:	e00d      	b.n	8004fa6 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8004f92:	e008      	b.n	8004fa6 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004fa0:	e001      	b.n	8004fa6 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3718      	adds	r7, #24
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	50000100 	.word	0x50000100
 8004fb4:	50000300 	.word	0x50000300
 8004fb8:	50000700 	.word	0x50000700
 8004fbc:	50000600 	.word	0x50000600
 8004fc0:	50000500 	.word	0x50000500
 8004fc4:	50000400 	.word	0x50000400
 8004fc8:	080062a9 	.word	0x080062a9
 8004fcc:	08006381 	.word	0x08006381
 8004fd0:	0800639d 	.word	0x0800639d

08004fd4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b08a      	sub	sp, #40	@ 0x28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004fdc:	2300      	movs	r3, #0
 8004fde:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ff8:	d004      	beq.n	8005004 <HAL_ADC_IRQHandler+0x30>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a8e      	ldr	r2, [pc, #568]	@ (8005238 <HAL_ADC_IRQHandler+0x264>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d101      	bne.n	8005008 <HAL_ADC_IRQHandler+0x34>
 8005004:	4b8d      	ldr	r3, [pc, #564]	@ (800523c <HAL_ADC_IRQHandler+0x268>)
 8005006:	e000      	b.n	800500a <HAL_ADC_IRQHandler+0x36>
 8005008:	4b8d      	ldr	r3, [pc, #564]	@ (8005240 <HAL_ADC_IRQHandler+0x26c>)
 800500a:	4618      	mov	r0, r3
 800500c:	f7ff fbfd 	bl	800480a <LL_ADC_GetMultimode>
 8005010:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d017      	beq.n	800504c <HAL_ADC_IRQHandler+0x78>
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d012      	beq.n	800504c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800502a:	f003 0310 	and.w	r3, r3, #16
 800502e:	2b00      	cmp	r3, #0
 8005030:	d105      	bne.n	800503e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005036:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f001 fa14 	bl	800646c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2202      	movs	r2, #2
 800504a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	f003 0304 	and.w	r3, r3, #4
 8005052:	2b00      	cmp	r3, #0
 8005054:	d004      	beq.n	8005060 <HAL_ADC_IRQHandler+0x8c>
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10b      	bne.n	8005078 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 8094 	beq.w	8005194 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	f003 0308 	and.w	r3, r3, #8
 8005072:	2b00      	cmp	r3, #0
 8005074:	f000 808e 	beq.w	8005194 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800507c:	f003 0310 	and.w	r3, r3, #16
 8005080:	2b00      	cmp	r3, #0
 8005082:	d105      	bne.n	8005090 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005088:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4618      	mov	r0, r3
 8005096:	f7ff fac7 	bl	8004628 <LL_ADC_REG_IsTriggerSourceSWStart>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d072      	beq.n	8005186 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a64      	ldr	r2, [pc, #400]	@ (8005238 <HAL_ADC_IRQHandler+0x264>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d009      	beq.n	80050be <HAL_ADC_IRQHandler+0xea>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a65      	ldr	r2, [pc, #404]	@ (8005244 <HAL_ADC_IRQHandler+0x270>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d002      	beq.n	80050ba <HAL_ADC_IRQHandler+0xe6>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	e003      	b.n	80050c2 <HAL_ADC_IRQHandler+0xee>
 80050ba:	4b63      	ldr	r3, [pc, #396]	@ (8005248 <HAL_ADC_IRQHandler+0x274>)
 80050bc:	e001      	b.n	80050c2 <HAL_ADC_IRQHandler+0xee>
 80050be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	6812      	ldr	r2, [r2, #0]
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d008      	beq.n	80050dc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d005      	beq.n	80050dc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	2b05      	cmp	r3, #5
 80050d4:	d002      	beq.n	80050dc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	2b09      	cmp	r3, #9
 80050da:	d104      	bne.n	80050e6 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	623b      	str	r3, [r7, #32]
 80050e4:	e014      	b.n	8005110 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a53      	ldr	r2, [pc, #332]	@ (8005238 <HAL_ADC_IRQHandler+0x264>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d009      	beq.n	8005104 <HAL_ADC_IRQHandler+0x130>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a53      	ldr	r2, [pc, #332]	@ (8005244 <HAL_ADC_IRQHandler+0x270>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d002      	beq.n	8005100 <HAL_ADC_IRQHandler+0x12c>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	e003      	b.n	8005108 <HAL_ADC_IRQHandler+0x134>
 8005100:	4b51      	ldr	r3, [pc, #324]	@ (8005248 <HAL_ADC_IRQHandler+0x274>)
 8005102:	e001      	b.n	8005108 <HAL_ADC_IRQHandler+0x134>
 8005104:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005108:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005110:	6a3b      	ldr	r3, [r7, #32]
 8005112:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d135      	bne.n	8005186 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0308 	and.w	r3, r3, #8
 8005124:	2b08      	cmp	r3, #8
 8005126:	d12e      	bne.n	8005186 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4618      	mov	r0, r3
 800512e:	f7ff fc11 	bl	8004954 <LL_ADC_REG_IsConversionOngoing>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d11a      	bne.n	800516e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 020c 	bic.w	r2, r2, #12
 8005146:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800514c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005158:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d112      	bne.n	8005186 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005164:	f043 0201 	orr.w	r2, r3, #1
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800516c:	e00b      	b.n	8005186 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005172:	f043 0210 	orr.w	r2, r3, #16
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800517e:	f043 0201 	orr.w	r2, r3, #1
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f984 	bl	8005494 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	220c      	movs	r2, #12
 8005192:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	f003 0320 	and.w	r3, r3, #32
 800519a:	2b00      	cmp	r3, #0
 800519c:	d004      	beq.n	80051a8 <HAL_ADC_IRQHandler+0x1d4>
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	f003 0320 	and.w	r3, r3, #32
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10b      	bne.n	80051c0 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f000 80b3 	beq.w	800531a <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 80ad 	beq.w	800531a <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051c4:	f003 0310 	and.w	r3, r3, #16
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d105      	bne.n	80051d8 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051d0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4618      	mov	r0, r3
 80051de:	f7ff fa62 	bl	80046a6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80051e2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7ff fa1d 	bl	8004628 <LL_ADC_REG_IsTriggerSourceSWStart>
 80051ee:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a10      	ldr	r2, [pc, #64]	@ (8005238 <HAL_ADC_IRQHandler+0x264>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d009      	beq.n	800520e <HAL_ADC_IRQHandler+0x23a>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a11      	ldr	r2, [pc, #68]	@ (8005244 <HAL_ADC_IRQHandler+0x270>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d002      	beq.n	800520a <HAL_ADC_IRQHandler+0x236>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	e003      	b.n	8005212 <HAL_ADC_IRQHandler+0x23e>
 800520a:	4b0f      	ldr	r3, [pc, #60]	@ (8005248 <HAL_ADC_IRQHandler+0x274>)
 800520c:	e001      	b.n	8005212 <HAL_ADC_IRQHandler+0x23e>
 800520e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	6812      	ldr	r2, [r2, #0]
 8005216:	4293      	cmp	r3, r2
 8005218:	d008      	beq.n	800522c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d005      	beq.n	800522c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	2b06      	cmp	r3, #6
 8005224:	d002      	beq.n	800522c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2b07      	cmp	r3, #7
 800522a:	d10f      	bne.n	800524c <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	623b      	str	r3, [r7, #32]
 8005234:	e01f      	b.n	8005276 <HAL_ADC_IRQHandler+0x2a2>
 8005236:	bf00      	nop
 8005238:	50000100 	.word	0x50000100
 800523c:	50000300 	.word	0x50000300
 8005240:	50000700 	.word	0x50000700
 8005244:	50000500 	.word	0x50000500
 8005248:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a8b      	ldr	r2, [pc, #556]	@ (8005480 <HAL_ADC_IRQHandler+0x4ac>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d009      	beq.n	800526a <HAL_ADC_IRQHandler+0x296>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a8a      	ldr	r2, [pc, #552]	@ (8005484 <HAL_ADC_IRQHandler+0x4b0>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d002      	beq.n	8005266 <HAL_ADC_IRQHandler+0x292>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	e003      	b.n	800526e <HAL_ADC_IRQHandler+0x29a>
 8005266:	4b88      	ldr	r3, [pc, #544]	@ (8005488 <HAL_ADC_IRQHandler+0x4b4>)
 8005268:	e001      	b.n	800526e <HAL_ADC_IRQHandler+0x29a>
 800526a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800526e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d047      	beq.n	800530c <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800527c:	6a3b      	ldr	r3, [r7, #32]
 800527e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d007      	beq.n	8005296 <HAL_ADC_IRQHandler+0x2c2>
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d03f      	beq.n	800530c <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005292:	2b00      	cmp	r3, #0
 8005294:	d13a      	bne.n	800530c <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a0:	2b40      	cmp	r3, #64	@ 0x40
 80052a2:	d133      	bne.n	800530c <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80052a4:	6a3b      	ldr	r3, [r7, #32]
 80052a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d12e      	bne.n	800530c <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7ff fb61 	bl	800497a <LL_ADC_INJ_IsConversionOngoing>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d11a      	bne.n	80052f4 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80052cc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052d2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d112      	bne.n	800530c <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052ea:	f043 0201 	orr.w	r2, r3, #1
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80052f2:	e00b      	b.n	800530c <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052f8:	f043 0210 	orr.w	r2, r3, #16
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005304:	f043 0201 	orr.w	r2, r3, #1
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f001 f885 	bl	800641c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2260      	movs	r2, #96	@ 0x60
 8005318:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005320:	2b00      	cmp	r3, #0
 8005322:	d011      	beq.n	8005348 <HAL_ADC_IRQHandler+0x374>
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00c      	beq.n	8005348 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005332:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f8be 	bl	80054bc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2280      	movs	r2, #128	@ 0x80
 8005346:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800534e:	2b00      	cmp	r3, #0
 8005350:	d012      	beq.n	8005378 <HAL_ADC_IRQHandler+0x3a4>
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00d      	beq.n	8005378 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005360:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f001 f86b 	bl	8006444 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005376:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800537e:	2b00      	cmp	r3, #0
 8005380:	d012      	beq.n	80053a8 <HAL_ADC_IRQHandler+0x3d4>
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00d      	beq.n	80053a8 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005390:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f001 f85d 	bl	8006458 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053a6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	f003 0310 	and.w	r3, r3, #16
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d043      	beq.n	800543a <HAL_ADC_IRQHandler+0x466>
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	f003 0310 	and.w	r3, r3, #16
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d03e      	beq.n	800543a <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d102      	bne.n	80053ca <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80053c4:	2301      	movs	r3, #1
 80053c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80053c8:	e021      	b.n	800540e <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d015      	beq.n	80053fc <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053d8:	d004      	beq.n	80053e4 <HAL_ADC_IRQHandler+0x410>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a28      	ldr	r2, [pc, #160]	@ (8005480 <HAL_ADC_IRQHandler+0x4ac>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d101      	bne.n	80053e8 <HAL_ADC_IRQHandler+0x414>
 80053e4:	4b29      	ldr	r3, [pc, #164]	@ (800548c <HAL_ADC_IRQHandler+0x4b8>)
 80053e6:	e000      	b.n	80053ea <HAL_ADC_IRQHandler+0x416>
 80053e8:	4b29      	ldr	r3, [pc, #164]	@ (8005490 <HAL_ADC_IRQHandler+0x4bc>)
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7ff fa1b 	bl	8004826 <LL_ADC_GetMultiDMATransfer>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00b      	beq.n	800540e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80053f6:	2301      	movs	r3, #1
 80053f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80053fa:	e008      	b.n	800540e <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800540a:	2301      	movs	r3, #1
 800540c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800540e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005410:	2b01      	cmp	r3, #1
 8005412:	d10e      	bne.n	8005432 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005418:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005424:	f043 0202 	orr.w	r2, r3, #2
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f84f 	bl	80054d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2210      	movs	r2, #16
 8005438:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005440:	2b00      	cmp	r3, #0
 8005442:	d018      	beq.n	8005476 <HAL_ADC_IRQHandler+0x4a2>
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800544a:	2b00      	cmp	r3, #0
 800544c:	d013      	beq.n	8005476 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005452:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800545e:	f043 0208 	orr.w	r2, r3, #8
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800546e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 ffdd 	bl	8006430 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005476:	bf00      	nop
 8005478:	3728      	adds	r7, #40	@ 0x28
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	50000100 	.word	0x50000100
 8005484:	50000500 	.word	0x50000500
 8005488:	50000400 	.word	0x50000400
 800548c:	50000300 	.word	0x50000300
 8005490:	50000700 	.word	0x50000700

08005494 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b0b6      	sub	sp, #216	@ 0xd8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054ee:	2300      	movs	r3, #0
 80054f0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80054f4:	2300      	movs	r3, #0
 80054f6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d102      	bne.n	8005508 <HAL_ADC_ConfigChannel+0x24>
 8005502:	2302      	movs	r3, #2
 8005504:	f000 bc13 	b.w	8005d2e <HAL_ADC_ConfigChannel+0x84a>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4618      	mov	r0, r3
 8005516:	f7ff fa1d 	bl	8004954 <LL_ADC_REG_IsConversionOngoing>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	f040 83f3 	bne.w	8005d08 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6818      	ldr	r0, [r3, #0]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	6859      	ldr	r1, [r3, #4]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	461a      	mov	r2, r3
 8005530:	f7ff f88d 	bl	800464e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4618      	mov	r0, r3
 800553a:	f7ff fa0b 	bl	8004954 <LL_ADC_REG_IsConversionOngoing>
 800553e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4618      	mov	r0, r3
 8005548:	f7ff fa17 	bl	800497a <LL_ADC_INJ_IsConversionOngoing>
 800554c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005550:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005554:	2b00      	cmp	r3, #0
 8005556:	f040 81d9 	bne.w	800590c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800555a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800555e:	2b00      	cmp	r3, #0
 8005560:	f040 81d4 	bne.w	800590c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800556c:	d10f      	bne.n	800558e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6818      	ldr	r0, [r3, #0]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2200      	movs	r2, #0
 8005578:	4619      	mov	r1, r3
 800557a:	f7ff f8a7 	bl	80046cc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005586:	4618      	mov	r0, r3
 8005588:	f7ff f83b 	bl	8004602 <LL_ADC_SetSamplingTimeCommonConfig>
 800558c:	e00e      	b.n	80055ac <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6818      	ldr	r0, [r3, #0]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	6819      	ldr	r1, [r3, #0]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	461a      	mov	r2, r3
 800559c:	f7ff f896 	bl	80046cc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2100      	movs	r1, #0
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7ff f82b 	bl	8004602 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	695a      	ldr	r2, [r3, #20]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	08db      	lsrs	r3, r3, #3
 80055b8:	f003 0303 	and.w	r3, r3, #3
 80055bc:	005b      	lsls	r3, r3, #1
 80055be:	fa02 f303 	lsl.w	r3, r2, r3
 80055c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	2b04      	cmp	r3, #4
 80055cc:	d022      	beq.n	8005614 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6818      	ldr	r0, [r3, #0]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	6919      	ldr	r1, [r3, #16]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80055de:	f7fe ff85 	bl	80044ec <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6818      	ldr	r0, [r3, #0]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	6919      	ldr	r1, [r3, #16]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	461a      	mov	r2, r3
 80055f0:	f7fe ffd1 	bl	8004596 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6818      	ldr	r0, [r3, #0]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005600:	2b01      	cmp	r3, #1
 8005602:	d102      	bne.n	800560a <HAL_ADC_ConfigChannel+0x126>
 8005604:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005608:	e000      	b.n	800560c <HAL_ADC_ConfigChannel+0x128>
 800560a:	2300      	movs	r3, #0
 800560c:	461a      	mov	r2, r3
 800560e:	f7fe ffdd 	bl	80045cc <LL_ADC_SetOffsetSaturation>
 8005612:	e17b      	b.n	800590c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2100      	movs	r1, #0
 800561a:	4618      	mov	r0, r3
 800561c:	f7fe ff8a 	bl	8004534 <LL_ADC_GetOffsetChannel>
 8005620:	4603      	mov	r3, r0
 8005622:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10a      	bne.n	8005640 <HAL_ADC_ConfigChannel+0x15c>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2100      	movs	r1, #0
 8005630:	4618      	mov	r0, r3
 8005632:	f7fe ff7f 	bl	8004534 <LL_ADC_GetOffsetChannel>
 8005636:	4603      	mov	r3, r0
 8005638:	0e9b      	lsrs	r3, r3, #26
 800563a:	f003 021f 	and.w	r2, r3, #31
 800563e:	e01e      	b.n	800567e <HAL_ADC_ConfigChannel+0x19a>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2100      	movs	r1, #0
 8005646:	4618      	mov	r0, r3
 8005648:	f7fe ff74 	bl	8004534 <LL_ADC_GetOffsetChannel>
 800564c:	4603      	mov	r3, r0
 800564e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005652:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005656:	fa93 f3a3 	rbit	r3, r3
 800565a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800565e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005662:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005666:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800566e:	2320      	movs	r3, #32
 8005670:	e004      	b.n	800567c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005672:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005676:	fab3 f383 	clz	r3, r3
 800567a:	b2db      	uxtb	r3, r3
 800567c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005686:	2b00      	cmp	r3, #0
 8005688:	d105      	bne.n	8005696 <HAL_ADC_ConfigChannel+0x1b2>
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	0e9b      	lsrs	r3, r3, #26
 8005690:	f003 031f 	and.w	r3, r3, #31
 8005694:	e018      	b.n	80056c8 <HAL_ADC_ConfigChannel+0x1e4>
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800569e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80056a2:	fa93 f3a3 	rbit	r3, r3
 80056a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80056aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80056b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80056ba:	2320      	movs	r3, #32
 80056bc:	e004      	b.n	80056c8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80056be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80056c2:	fab3 f383 	clz	r3, r3
 80056c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d106      	bne.n	80056da <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2200      	movs	r2, #0
 80056d2:	2100      	movs	r1, #0
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7fe ff43 	bl	8004560 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2101      	movs	r1, #1
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7fe ff27 	bl	8004534 <LL_ADC_GetOffsetChannel>
 80056e6:	4603      	mov	r3, r0
 80056e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10a      	bne.n	8005706 <HAL_ADC_ConfigChannel+0x222>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2101      	movs	r1, #1
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7fe ff1c 	bl	8004534 <LL_ADC_GetOffsetChannel>
 80056fc:	4603      	mov	r3, r0
 80056fe:	0e9b      	lsrs	r3, r3, #26
 8005700:	f003 021f 	and.w	r2, r3, #31
 8005704:	e01e      	b.n	8005744 <HAL_ADC_ConfigChannel+0x260>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2101      	movs	r1, #1
 800570c:	4618      	mov	r0, r3
 800570e:	f7fe ff11 	bl	8004534 <LL_ADC_GetOffsetChannel>
 8005712:	4603      	mov	r3, r0
 8005714:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005718:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800571c:	fa93 f3a3 	rbit	r3, r3
 8005720:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8005724:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005728:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800572c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005730:	2b00      	cmp	r3, #0
 8005732:	d101      	bne.n	8005738 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005734:	2320      	movs	r3, #32
 8005736:	e004      	b.n	8005742 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005738:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800573c:	fab3 f383 	clz	r3, r3
 8005740:	b2db      	uxtb	r3, r3
 8005742:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800574c:	2b00      	cmp	r3, #0
 800574e:	d105      	bne.n	800575c <HAL_ADC_ConfigChannel+0x278>
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	0e9b      	lsrs	r3, r3, #26
 8005756:	f003 031f 	and.w	r3, r3, #31
 800575a:	e018      	b.n	800578e <HAL_ADC_ConfigChannel+0x2aa>
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005764:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005768:	fa93 f3a3 	rbit	r3, r3
 800576c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005770:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005774:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005778:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800577c:	2b00      	cmp	r3, #0
 800577e:	d101      	bne.n	8005784 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005780:	2320      	movs	r3, #32
 8005782:	e004      	b.n	800578e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005784:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005788:	fab3 f383 	clz	r3, r3
 800578c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800578e:	429a      	cmp	r2, r3
 8005790:	d106      	bne.n	80057a0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2200      	movs	r2, #0
 8005798:	2101      	movs	r1, #1
 800579a:	4618      	mov	r0, r3
 800579c:	f7fe fee0 	bl	8004560 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2102      	movs	r1, #2
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7fe fec4 	bl	8004534 <LL_ADC_GetOffsetChannel>
 80057ac:	4603      	mov	r3, r0
 80057ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10a      	bne.n	80057cc <HAL_ADC_ConfigChannel+0x2e8>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2102      	movs	r1, #2
 80057bc:	4618      	mov	r0, r3
 80057be:	f7fe feb9 	bl	8004534 <LL_ADC_GetOffsetChannel>
 80057c2:	4603      	mov	r3, r0
 80057c4:	0e9b      	lsrs	r3, r3, #26
 80057c6:	f003 021f 	and.w	r2, r3, #31
 80057ca:	e01e      	b.n	800580a <HAL_ADC_ConfigChannel+0x326>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2102      	movs	r1, #2
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fe feae 	bl	8004534 <LL_ADC_GetOffsetChannel>
 80057d8:	4603      	mov	r3, r0
 80057da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057e2:	fa93 f3a3 	rbit	r3, r3
 80057e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80057ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80057ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80057f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80057fa:	2320      	movs	r3, #32
 80057fc:	e004      	b.n	8005808 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80057fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005802:	fab3 f383 	clz	r3, r3
 8005806:	b2db      	uxtb	r3, r3
 8005808:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005812:	2b00      	cmp	r3, #0
 8005814:	d105      	bne.n	8005822 <HAL_ADC_ConfigChannel+0x33e>
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	0e9b      	lsrs	r3, r3, #26
 800581c:	f003 031f 	and.w	r3, r3, #31
 8005820:	e016      	b.n	8005850 <HAL_ADC_ConfigChannel+0x36c>
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800582a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800582e:	fa93 f3a3 	rbit	r3, r3
 8005832:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8005834:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005836:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800583a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8005842:	2320      	movs	r3, #32
 8005844:	e004      	b.n	8005850 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005846:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800584a:	fab3 f383 	clz	r3, r3
 800584e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005850:	429a      	cmp	r2, r3
 8005852:	d106      	bne.n	8005862 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2200      	movs	r2, #0
 800585a:	2102      	movs	r1, #2
 800585c:	4618      	mov	r0, r3
 800585e:	f7fe fe7f 	bl	8004560 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2103      	movs	r1, #3
 8005868:	4618      	mov	r0, r3
 800586a:	f7fe fe63 	bl	8004534 <LL_ADC_GetOffsetChannel>
 800586e:	4603      	mov	r3, r0
 8005870:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10a      	bne.n	800588e <HAL_ADC_ConfigChannel+0x3aa>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2103      	movs	r1, #3
 800587e:	4618      	mov	r0, r3
 8005880:	f7fe fe58 	bl	8004534 <LL_ADC_GetOffsetChannel>
 8005884:	4603      	mov	r3, r0
 8005886:	0e9b      	lsrs	r3, r3, #26
 8005888:	f003 021f 	and.w	r2, r3, #31
 800588c:	e017      	b.n	80058be <HAL_ADC_ConfigChannel+0x3da>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2103      	movs	r1, #3
 8005894:	4618      	mov	r0, r3
 8005896:	f7fe fe4d 	bl	8004534 <LL_ADC_GetOffsetChannel>
 800589a:	4603      	mov	r3, r0
 800589c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800589e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058a0:	fa93 f3a3 	rbit	r3, r3
 80058a4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80058a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058a8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80058aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d101      	bne.n	80058b4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80058b0:	2320      	movs	r3, #32
 80058b2:	e003      	b.n	80058bc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80058b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058b6:	fab3 f383 	clz	r3, r3
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d105      	bne.n	80058d6 <HAL_ADC_ConfigChannel+0x3f2>
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	0e9b      	lsrs	r3, r3, #26
 80058d0:	f003 031f 	and.w	r3, r3, #31
 80058d4:	e011      	b.n	80058fa <HAL_ADC_ConfigChannel+0x416>
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80058de:	fa93 f3a3 	rbit	r3, r3
 80058e2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80058e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80058e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80058ee:	2320      	movs	r3, #32
 80058f0:	e003      	b.n	80058fa <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80058f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058f4:	fab3 f383 	clz	r3, r3
 80058f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d106      	bne.n	800590c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2200      	movs	r2, #0
 8005904:	2103      	movs	r1, #3
 8005906:	4618      	mov	r0, r3
 8005908:	f7fe fe2a 	bl	8004560 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4618      	mov	r0, r3
 8005912:	f7fe fff8 	bl	8004906 <LL_ADC_IsEnabled>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	f040 813d 	bne.w	8005b98 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6818      	ldr	r0, [r3, #0]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	6819      	ldr	r1, [r3, #0]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	461a      	mov	r2, r3
 800592c:	f7fe fefa 	bl	8004724 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	4aa2      	ldr	r2, [pc, #648]	@ (8005bc0 <HAL_ADC_ConfigChannel+0x6dc>)
 8005936:	4293      	cmp	r3, r2
 8005938:	f040 812e 	bne.w	8005b98 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10b      	bne.n	8005964 <HAL_ADC_ConfigChannel+0x480>
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	0e9b      	lsrs	r3, r3, #26
 8005952:	3301      	adds	r3, #1
 8005954:	f003 031f 	and.w	r3, r3, #31
 8005958:	2b09      	cmp	r3, #9
 800595a:	bf94      	ite	ls
 800595c:	2301      	movls	r3, #1
 800595e:	2300      	movhi	r3, #0
 8005960:	b2db      	uxtb	r3, r3
 8005962:	e019      	b.n	8005998 <HAL_ADC_ConfigChannel+0x4b4>
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800596a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800596c:	fa93 f3a3 	rbit	r3, r3
 8005970:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8005972:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005974:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005976:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005978:	2b00      	cmp	r3, #0
 800597a:	d101      	bne.n	8005980 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800597c:	2320      	movs	r3, #32
 800597e:	e003      	b.n	8005988 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005980:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005982:	fab3 f383 	clz	r3, r3
 8005986:	b2db      	uxtb	r3, r3
 8005988:	3301      	adds	r3, #1
 800598a:	f003 031f 	and.w	r3, r3, #31
 800598e:	2b09      	cmp	r3, #9
 8005990:	bf94      	ite	ls
 8005992:	2301      	movls	r3, #1
 8005994:	2300      	movhi	r3, #0
 8005996:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005998:	2b00      	cmp	r3, #0
 800599a:	d079      	beq.n	8005a90 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d107      	bne.n	80059b8 <HAL_ADC_ConfigChannel+0x4d4>
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	0e9b      	lsrs	r3, r3, #26
 80059ae:	3301      	adds	r3, #1
 80059b0:	069b      	lsls	r3, r3, #26
 80059b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80059b6:	e015      	b.n	80059e4 <HAL_ADC_ConfigChannel+0x500>
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059c0:	fa93 f3a3 	rbit	r3, r3
 80059c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80059c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059c8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80059ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d101      	bne.n	80059d4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80059d0:	2320      	movs	r3, #32
 80059d2:	e003      	b.n	80059dc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80059d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059d6:	fab3 f383 	clz	r3, r3
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	3301      	adds	r3, #1
 80059de:	069b      	lsls	r3, r3, #26
 80059e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d109      	bne.n	8005a04 <HAL_ADC_ConfigChannel+0x520>
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	0e9b      	lsrs	r3, r3, #26
 80059f6:	3301      	adds	r3, #1
 80059f8:	f003 031f 	and.w	r3, r3, #31
 80059fc:	2101      	movs	r1, #1
 80059fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005a02:	e017      	b.n	8005a34 <HAL_ADC_ConfigChannel+0x550>
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a0c:	fa93 f3a3 	rbit	r3, r3
 8005a10:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005a12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a14:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005a16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d101      	bne.n	8005a20 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005a1c:	2320      	movs	r3, #32
 8005a1e:	e003      	b.n	8005a28 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005a20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a22:	fab3 f383 	clz	r3, r3
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	3301      	adds	r3, #1
 8005a2a:	f003 031f 	and.w	r3, r3, #31
 8005a2e:	2101      	movs	r1, #1
 8005a30:	fa01 f303 	lsl.w	r3, r1, r3
 8005a34:	ea42 0103 	orr.w	r1, r2, r3
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d10a      	bne.n	8005a5a <HAL_ADC_ConfigChannel+0x576>
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	0e9b      	lsrs	r3, r3, #26
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	f003 021f 	and.w	r2, r3, #31
 8005a50:	4613      	mov	r3, r2
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	4413      	add	r3, r2
 8005a56:	051b      	lsls	r3, r3, #20
 8005a58:	e018      	b.n	8005a8c <HAL_ADC_ConfigChannel+0x5a8>
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a62:	fa93 f3a3 	rbit	r3, r3
 8005a66:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005a6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d101      	bne.n	8005a76 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005a72:	2320      	movs	r3, #32
 8005a74:	e003      	b.n	8005a7e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005a76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a78:	fab3 f383 	clz	r3, r3
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	3301      	adds	r3, #1
 8005a80:	f003 021f 	and.w	r2, r3, #31
 8005a84:	4613      	mov	r3, r2
 8005a86:	005b      	lsls	r3, r3, #1
 8005a88:	4413      	add	r3, r2
 8005a8a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a8c:	430b      	orrs	r3, r1
 8005a8e:	e07e      	b.n	8005b8e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d107      	bne.n	8005aac <HAL_ADC_ConfigChannel+0x5c8>
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	0e9b      	lsrs	r3, r3, #26
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	069b      	lsls	r3, r3, #26
 8005aa6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005aaa:	e015      	b.n	8005ad8 <HAL_ADC_ConfigChannel+0x5f4>
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ab4:	fa93 f3a3 	rbit	r3, r3
 8005ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005abc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d101      	bne.n	8005ac8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005ac4:	2320      	movs	r3, #32
 8005ac6:	e003      	b.n	8005ad0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aca:	fab3 f383 	clz	r3, r3
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	069b      	lsls	r3, r3, #26
 8005ad4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d109      	bne.n	8005af8 <HAL_ADC_ConfigChannel+0x614>
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	0e9b      	lsrs	r3, r3, #26
 8005aea:	3301      	adds	r3, #1
 8005aec:	f003 031f 	and.w	r3, r3, #31
 8005af0:	2101      	movs	r1, #1
 8005af2:	fa01 f303 	lsl.w	r3, r1, r3
 8005af6:	e017      	b.n	8005b28 <HAL_ADC_ConfigChannel+0x644>
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	fa93 f3a3 	rbit	r3, r3
 8005b04:	61fb      	str	r3, [r7, #28]
  return result;
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d101      	bne.n	8005b14 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005b10:	2320      	movs	r3, #32
 8005b12:	e003      	b.n	8005b1c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b16:	fab3 f383 	clz	r3, r3
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	f003 031f 	and.w	r3, r3, #31
 8005b22:	2101      	movs	r1, #1
 8005b24:	fa01 f303 	lsl.w	r3, r1, r3
 8005b28:	ea42 0103 	orr.w	r1, r2, r3
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10d      	bne.n	8005b54 <HAL_ADC_ConfigChannel+0x670>
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	0e9b      	lsrs	r3, r3, #26
 8005b3e:	3301      	adds	r3, #1
 8005b40:	f003 021f 	and.w	r2, r3, #31
 8005b44:	4613      	mov	r3, r2
 8005b46:	005b      	lsls	r3, r3, #1
 8005b48:	4413      	add	r3, r2
 8005b4a:	3b1e      	subs	r3, #30
 8005b4c:	051b      	lsls	r3, r3, #20
 8005b4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005b52:	e01b      	b.n	8005b8c <HAL_ADC_ConfigChannel+0x6a8>
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	fa93 f3a3 	rbit	r3, r3
 8005b60:	613b      	str	r3, [r7, #16]
  return result;
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005b6c:	2320      	movs	r3, #32
 8005b6e:	e003      	b.n	8005b78 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	fab3 f383 	clz	r3, r3
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	3301      	adds	r3, #1
 8005b7a:	f003 021f 	and.w	r2, r3, #31
 8005b7e:	4613      	mov	r3, r2
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	4413      	add	r3, r2
 8005b84:	3b1e      	subs	r3, #30
 8005b86:	051b      	lsls	r3, r3, #20
 8005b88:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b8c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b92:	4619      	mov	r1, r3
 8005b94:	f7fe fd9a 	bl	80046cc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	4b09      	ldr	r3, [pc, #36]	@ (8005bc4 <HAL_ADC_ConfigChannel+0x6e0>)
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f000 80be 	beq.w	8005d22 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005bae:	d004      	beq.n	8005bba <HAL_ADC_ConfigChannel+0x6d6>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a04      	ldr	r2, [pc, #16]	@ (8005bc8 <HAL_ADC_ConfigChannel+0x6e4>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d10a      	bne.n	8005bd0 <HAL_ADC_ConfigChannel+0x6ec>
 8005bba:	4b04      	ldr	r3, [pc, #16]	@ (8005bcc <HAL_ADC_ConfigChannel+0x6e8>)
 8005bbc:	e009      	b.n	8005bd2 <HAL_ADC_ConfigChannel+0x6ee>
 8005bbe:	bf00      	nop
 8005bc0:	407f0000 	.word	0x407f0000
 8005bc4:	80080000 	.word	0x80080000
 8005bc8:	50000100 	.word	0x50000100
 8005bcc:	50000300 	.word	0x50000300
 8005bd0:	4b59      	ldr	r3, [pc, #356]	@ (8005d38 <HAL_ADC_ConfigChannel+0x854>)
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7fe fc7c 	bl	80044d0 <LL_ADC_GetCommonPathInternalCh>
 8005bd8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a56      	ldr	r2, [pc, #344]	@ (8005d3c <HAL_ADC_ConfigChannel+0x858>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d004      	beq.n	8005bf0 <HAL_ADC_ConfigChannel+0x70c>
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a55      	ldr	r2, [pc, #340]	@ (8005d40 <HAL_ADC_ConfigChannel+0x85c>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d13a      	bne.n	8005c66 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005bf0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005bf4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d134      	bne.n	8005c66 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c04:	d005      	beq.n	8005c12 <HAL_ADC_ConfigChannel+0x72e>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a4e      	ldr	r2, [pc, #312]	@ (8005d44 <HAL_ADC_ConfigChannel+0x860>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	f040 8085 	bne.w	8005d1c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c1a:	d004      	beq.n	8005c26 <HAL_ADC_ConfigChannel+0x742>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a49      	ldr	r2, [pc, #292]	@ (8005d48 <HAL_ADC_ConfigChannel+0x864>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d101      	bne.n	8005c2a <HAL_ADC_ConfigChannel+0x746>
 8005c26:	4a49      	ldr	r2, [pc, #292]	@ (8005d4c <HAL_ADC_ConfigChannel+0x868>)
 8005c28:	e000      	b.n	8005c2c <HAL_ADC_ConfigChannel+0x748>
 8005c2a:	4a43      	ldr	r2, [pc, #268]	@ (8005d38 <HAL_ADC_ConfigChannel+0x854>)
 8005c2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c30:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005c34:	4619      	mov	r1, r3
 8005c36:	4610      	mov	r0, r2
 8005c38:	f7fe fc37 	bl	80044aa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005c3c:	4b44      	ldr	r3, [pc, #272]	@ (8005d50 <HAL_ADC_ConfigChannel+0x86c>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	099b      	lsrs	r3, r3, #6
 8005c42:	4a44      	ldr	r2, [pc, #272]	@ (8005d54 <HAL_ADC_ConfigChannel+0x870>)
 8005c44:	fba2 2303 	umull	r2, r3, r2, r3
 8005c48:	099b      	lsrs	r3, r3, #6
 8005c4a:	1c5a      	adds	r2, r3, #1
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	4413      	add	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005c56:	e002      	b.n	8005c5e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1f9      	bne.n	8005c58 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005c64:	e05a      	b.n	8005d1c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a3b      	ldr	r2, [pc, #236]	@ (8005d58 <HAL_ADC_ConfigChannel+0x874>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d125      	bne.n	8005cbc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005c70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d11f      	bne.n	8005cbc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a31      	ldr	r2, [pc, #196]	@ (8005d48 <HAL_ADC_ConfigChannel+0x864>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d104      	bne.n	8005c90 <HAL_ADC_ConfigChannel+0x7ac>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a34      	ldr	r2, [pc, #208]	@ (8005d5c <HAL_ADC_ConfigChannel+0x878>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d047      	beq.n	8005d20 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c98:	d004      	beq.n	8005ca4 <HAL_ADC_ConfigChannel+0x7c0>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a2a      	ldr	r2, [pc, #168]	@ (8005d48 <HAL_ADC_ConfigChannel+0x864>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d101      	bne.n	8005ca8 <HAL_ADC_ConfigChannel+0x7c4>
 8005ca4:	4a29      	ldr	r2, [pc, #164]	@ (8005d4c <HAL_ADC_ConfigChannel+0x868>)
 8005ca6:	e000      	b.n	8005caa <HAL_ADC_ConfigChannel+0x7c6>
 8005ca8:	4a23      	ldr	r2, [pc, #140]	@ (8005d38 <HAL_ADC_ConfigChannel+0x854>)
 8005caa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005cae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	4610      	mov	r0, r2
 8005cb6:	f7fe fbf8 	bl	80044aa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005cba:	e031      	b.n	8005d20 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a27      	ldr	r2, [pc, #156]	@ (8005d60 <HAL_ADC_ConfigChannel+0x87c>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d12d      	bne.n	8005d22 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005cc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005cca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d127      	bne.n	8005d22 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a1c      	ldr	r2, [pc, #112]	@ (8005d48 <HAL_ADC_ConfigChannel+0x864>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d022      	beq.n	8005d22 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ce4:	d004      	beq.n	8005cf0 <HAL_ADC_ConfigChannel+0x80c>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a17      	ldr	r2, [pc, #92]	@ (8005d48 <HAL_ADC_ConfigChannel+0x864>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d101      	bne.n	8005cf4 <HAL_ADC_ConfigChannel+0x810>
 8005cf0:	4a16      	ldr	r2, [pc, #88]	@ (8005d4c <HAL_ADC_ConfigChannel+0x868>)
 8005cf2:	e000      	b.n	8005cf6 <HAL_ADC_ConfigChannel+0x812>
 8005cf4:	4a10      	ldr	r2, [pc, #64]	@ (8005d38 <HAL_ADC_ConfigChannel+0x854>)
 8005cf6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005cfa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005cfe:	4619      	mov	r1, r3
 8005d00:	4610      	mov	r0, r2
 8005d02:	f7fe fbd2 	bl	80044aa <LL_ADC_SetCommonPathInternalCh>
 8005d06:	e00c      	b.n	8005d22 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d0c:	f043 0220 	orr.w	r2, r3, #32
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005d1a:	e002      	b.n	8005d22 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005d1c:	bf00      	nop
 8005d1e:	e000      	b.n	8005d22 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005d20:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005d2a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	37d8      	adds	r7, #216	@ 0xd8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	50000700 	.word	0x50000700
 8005d3c:	c3210000 	.word	0xc3210000
 8005d40:	90c00010 	.word	0x90c00010
 8005d44:	50000600 	.word	0x50000600
 8005d48:	50000100 	.word	0x50000100
 8005d4c:	50000300 	.word	0x50000300
 8005d50:	20000044 	.word	0x20000044
 8005d54:	053e2d63 	.word	0x053e2d63
 8005d58:	c7520000 	.word	0xc7520000
 8005d5c:	50000500 	.word	0x50000500
 8005d60:	cb840000 	.word	0xcb840000

08005d64 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param pAnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, const ADC_AnalogWDGConfTypeDef *pAnalogWDGConfig)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b08e      	sub	sp, #56	@ 0x38
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(pAnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(pAnalogWDGConfig->WatchdogMode));
  assert_param(IS_ADC_ANALOG_WATCHDOG_FILTERING_MODE(pAnalogWDGConfig->FilteringConfig));
  assert_param(IS_FUNCTIONAL_STATE(pAnalogWDGConfig->ITMode));

  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005d7c:	d003      	beq.n	8005d86 <HAL_ADC_AnalogWDGConfig+0x22>
      (pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8005d82:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d101      	bne.n	8005d94 <HAL_ADC_AnalogWDGConfig+0x30>
 8005d90:	2302      	movs	r3, #2
 8005d92:	e1ea      	b.n	800616a <HAL_ADC_AnalogWDGConfig+0x406>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7fe fdd7 	bl	8004954 <LL_ADC_REG_IsConversionOngoing>
 8005da6:	62b8      	str	r0, [r7, #40]	@ 0x28
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7fe fde4 	bl	800497a <LL_ADC_INJ_IsConversionOngoing>
 8005db2:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f040 8175 	bne.w	80060a6 <HAL_ADC_AnalogWDGConfig+0x342>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f040 8171 	bne.w	80060a6 <HAL_ADC_AnalogWDGConfig+0x342>
     )
  {
    /* Analog watchdog configuration */
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a90      	ldr	r2, [pc, #576]	@ (800600c <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	f040 808d 	bne.w	8005eea <HAL_ADC_AnalogWDGConfig+0x186>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (pAnalogWDGConfig->WatchdogMode)
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8005dd8:	d034      	beq.n	8005e44 <HAL_ADC_AnalogWDGConfig+0xe0>
 8005dda:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8005dde:	d856      	bhi.n	8005e8e <HAL_ADC_AnalogWDGConfig+0x12a>
 8005de0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005de4:	d04b      	beq.n	8005e7e <HAL_ADC_AnalogWDGConfig+0x11a>
 8005de6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005dea:	d850      	bhi.n	8005e8e <HAL_ADC_AnalogWDGConfig+0x12a>
 8005dec:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8005df0:	d01b      	beq.n	8005e2a <HAL_ADC_AnalogWDGConfig+0xc6>
 8005df2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8005df6:	d84a      	bhi.n	8005e8e <HAL_ADC_AnalogWDGConfig+0x12a>
 8005df8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005dfc:	d037      	beq.n	8005e6e <HAL_ADC_AnalogWDGConfig+0x10a>
 8005dfe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e02:	d844      	bhi.n	8005e8e <HAL_ADC_AnalogWDGConfig+0x12a>
 8005e04:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e08:	d029      	beq.n	8005e5e <HAL_ADC_AnalogWDGConfig+0xfa>
 8005e0a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005e0e:	d13e      	bne.n	8005e8e <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8005e1c:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 8005e20:	461a      	mov	r2, r3
 8005e22:	497a      	ldr	r1, [pc, #488]	@ (800600c <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8005e24:	f7fe fca2 	bl	800476c <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR));
          break;
 8005e28:	e039      	b.n	8005e9e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8005e36:	f043 73a0 	orr.w	r3, r3, #20971520	@ 0x1400000
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	4973      	ldr	r1, [pc, #460]	@ (800600c <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8005e3e:	f7fe fc95 	bl	800476c <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_INJECTED));
          break;
 8005e42:	e02c      	b.n	8005e9e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8005e50:	f043 73e0 	orr.w	r3, r3, #29360128	@ 0x1c00000
 8005e54:	461a      	mov	r2, r3
 8005e56:	496d      	ldr	r1, [pc, #436]	@ (800600c <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8005e58:	f7fe fc88 	bl	800476c <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8005e5c:	e01f      	b.n	8005e9e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a6b      	ldr	r2, [pc, #428]	@ (8006010 <HAL_ADC_AnalogWDGConfig+0x2ac>)
 8005e64:	4969      	ldr	r1, [pc, #420]	@ (800600c <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7fe fc80 	bl	800476c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8005e6c:	e017      	b.n	8005e9e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a68      	ldr	r2, [pc, #416]	@ (8006014 <HAL_ADC_AnalogWDGConfig+0x2b0>)
 8005e74:	4965      	ldr	r1, [pc, #404]	@ (800600c <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7fe fc78 	bl	800476c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8005e7c:	e00f      	b.n	8005e9e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a65      	ldr	r2, [pc, #404]	@ (8006018 <HAL_ADC_AnalogWDGConfig+0x2b4>)
 8005e84:	4961      	ldr	r1, [pc, #388]	@ (800600c <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7fe fc70 	bl	800476c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8005e8c:	e007      	b.n	8005e9e <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2200      	movs	r2, #0
 8005e94:	495d      	ldr	r1, [pc, #372]	@ (800600c <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fe fc68 	bl	800476c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8005e9c:	bf00      	nop
      }

      /* Set the filtering configuration */
      MODIFY_REG(hadc->Instance->TR1,
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	6a1b      	ldr	r3, [r3, #32]
 8005ea4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	699a      	ldr	r2, [r3, #24]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	621a      	str	r2, [r3, #32]
                 ADC_TR1_AWDFILT,
                 pAnalogWDGConfig->FilteringConfig);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eb8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7fe fd6b 	bl	80049a0 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (pAnalogWDGConfig->ITMode == ENABLE)
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	7b1b      	ldrb	r3, [r3, #12]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d105      	bne.n	8005ede <HAL_ADC_AnalogWDGConfig+0x17a>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7fe fd8b 	bl	80049f2 <LL_ADC_EnableIT_AWD1>
 8005edc:	e0e3      	b.n	80060a6 <HAL_ADC_AnalogWDGConfig+0x342>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7fe fdb5 	bl	8004a52 <LL_ADC_DisableIT_AWD1>
 8005ee8:	e0dd      	b.n	80060a6 <HAL_ADC_AnalogWDGConfig+0x342>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (pAnalogWDGConfig->WatchdogMode)
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8005ef2:	d01d      	beq.n	8005f30 <HAL_ADC_AnalogWDGConfig+0x1cc>
 8005ef4:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8005ef8:	f200 8092 	bhi.w	8006020 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8005efc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005f00:	d07b      	beq.n	8005ffa <HAL_ADC_AnalogWDGConfig+0x296>
 8005f02:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005f06:	f200 808b 	bhi.w	8006020 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8005f0a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8005f0e:	d00f      	beq.n	8005f30 <HAL_ADC_AnalogWDGConfig+0x1cc>
 8005f10:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8005f14:	f200 8084 	bhi.w	8006020 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8005f18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f1c:	d06d      	beq.n	8005ffa <HAL_ADC_AnalogWDGConfig+0x296>
 8005f1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f22:	d87d      	bhi.n	8006020 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8005f24:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f28:	d067      	beq.n	8005ffa <HAL_ADC_AnalogWDGConfig+0x296>
 8005f2a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005f2e:	d177      	bne.n	8006020 <HAL_ADC_AnalogWDGConfig+0x2bc>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a39      	ldr	r2, [pc, #228]	@ (800601c <HAL_ADC_AnalogWDGConfig+0x2b8>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d12f      	bne.n	8005f9a <HAL_ADC_AnalogWDGConfig+0x236>
          {
            SET_BIT(hadc->Instance->AWD2CR,
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d108      	bne.n	8005f58 <HAL_ADC_AnalogWDGConfig+0x1f4>
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	0e9b      	lsrs	r3, r3, #26
 8005f4c:	f003 031f 	and.w	r3, r3, #31
 8005f50:	2201      	movs	r2, #1
 8005f52:	fa02 f303 	lsl.w	r3, r2, r3
 8005f56:	e016      	b.n	8005f86 <HAL_ADC_AnalogWDGConfig+0x222>
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	fa93 f3a3 	rbit	r3, r3
 8005f64:	61bb      	str	r3, [r7, #24]
  return result;
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d101      	bne.n	8005f74 <HAL_ADC_AnalogWDGConfig+0x210>
    return 32U;
 8005f70:	2320      	movs	r3, #32
 8005f72:	e003      	b.n	8005f7c <HAL_ADC_AnalogWDGConfig+0x218>
  return __builtin_clz(value);
 8005f74:	6a3b      	ldr	r3, [r7, #32]
 8005f76:	fab3 f383 	clz	r3, r3
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	f003 031f 	and.w	r3, r3, #31
 8005f80:	2201      	movs	r2, #1
 8005f82:	fa02 f303 	lsl.w	r3, r2, r3
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	6812      	ldr	r2, [r2, #0]
 8005f8a:	f8d2 10a0 	ldr.w	r1, [r2, #160]	@ 0xa0
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	6812      	ldr	r2, [r2, #0]
 8005f92:	430b      	orrs	r3, r1
 8005f94:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
          else
          {
            SET_BIT(hadc->Instance->AWD3CR,
                    (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8005f98:	e04b      	b.n	8006032 <HAL_ADC_AnalogWDGConfig+0x2ce>
            SET_BIT(hadc->Instance->AWD3CR,
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d108      	bne.n	8005fb8 <HAL_ADC_AnalogWDGConfig+0x254>
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	0e9b      	lsrs	r3, r3, #26
 8005fac:	f003 031f 	and.w	r3, r3, #31
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb6:	e016      	b.n	8005fe6 <HAL_ADC_AnalogWDGConfig+0x282>
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	fa93 f3a3 	rbit	r3, r3
 8005fc4:	60fb      	str	r3, [r7, #12]
  return result;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d101      	bne.n	8005fd4 <HAL_ADC_AnalogWDGConfig+0x270>
    return 32U;
 8005fd0:	2320      	movs	r3, #32
 8005fd2:	e003      	b.n	8005fdc <HAL_ADC_AnalogWDGConfig+0x278>
  return __builtin_clz(value);
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	fab3 f383 	clz	r3, r3
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	f003 031f 	and.w	r3, r3, #31
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	6812      	ldr	r2, [r2, #0]
 8005fea:	f8d2 10a4 	ldr.w	r1, [r2, #164]	@ 0xa4
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	6812      	ldr	r2, [r2, #0]
 8005ff2:	430b      	orrs	r3, r1
 8005ff4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
          break;
 8005ff8:	e01b      	b.n	8006032 <HAL_ADC_AnalogWDGConfig+0x2ce>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6818      	ldr	r0, [r3, #0]
                                          pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 8006002:	4a05      	ldr	r2, [pc, #20]	@ (8006018 <HAL_ADC_AnalogWDGConfig+0x2b4>)
 8006004:	4619      	mov	r1, r3
 8006006:	f7fe fbb1 	bl	800476c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800600a:	e012      	b.n	8006032 <HAL_ADC_AnalogWDGConfig+0x2ce>
 800600c:	7dc00000 	.word	0x7dc00000
 8006010:	0087ffff 	.word	0x0087ffff
 8006014:	0107ffff 	.word	0x0107ffff
 8006018:	0187ffff 	.word	0x0187ffff
 800601c:	0017ffff 	.word	0x0017ffff

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6818      	ldr	r0, [r3, #0]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2200      	movs	r2, #0
 800602a:	4619      	mov	r1, r3
 800602c:	f7fe fb9e 	bl	800476c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006030:	bf00      	nop
      }

      if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a4f      	ldr	r2, [pc, #316]	@ (8006174 <HAL_ADC_AnalogWDGConfig+0x410>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d11a      	bne.n	8006072 <HAL_ADC_AnalogWDGConfig+0x30e>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006040:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4618      	mov	r0, r3
 800604e:	f7fe fcb4 	bl	80049ba <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	7b1b      	ldrb	r3, [r3, #12]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d105      	bne.n	8006066 <HAL_ADC_AnalogWDGConfig+0x302>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4618      	mov	r0, r3
 8006060:	f7fe fcd7 	bl	8004a12 <LL_ADC_EnableIT_AWD2>
 8006064:	e01f      	b.n	80060a6 <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4618      	mov	r0, r3
 800606c:	f7fe fd01 	bl	8004a72 <LL_ADC_DisableIT_AWD2>
 8006070:	e019      	b.n	80060a6 <HAL_ADC_AnalogWDGConfig+0x342>
      }
      /* (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006076:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4618      	mov	r0, r3
 8006084:	f7fe fca7 	bl	80049d6 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	7b1b      	ldrb	r3, [r3, #12]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d105      	bne.n	800609c <HAL_ADC_AnalogWDGConfig+0x338>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4618      	mov	r0, r3
 8006096:	f7fe fccc 	bl	8004a32 <LL_ADC_EnableIT_AWD3>
 800609a:	e004      	b.n	80060a6 <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7fe fcf6 	bl	8004a92 <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a33      	ldr	r2, [pc, #204]	@ (8006178 <HAL_ADC_AnalogWDGConfig+0x414>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d118      	bne.n	80060e2 <HAL_ADC_AnalogWDGConfig+0x37e>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	691a      	ldr	r2, [r3, #16]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	08db      	lsrs	r3, r3, #3
 80060bc:	f003 0303 	and.w	r3, r3, #3
 80060c0:	005b      	lsls	r3, r3, #1
 80060c2:	fa02 f303 	lsl.w	r3, r2, r3
 80060c6:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	695a      	ldr	r2, [r3, #20]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	08db      	lsrs	r3, r3, #3
 80060d4:	f003 0303 	and.w	r3, r3, #3
 80060d8:	005b      	lsls	r3, r3, #1
 80060da:	fa02 f303 	lsl.w	r3, r2, r3
 80060de:	633b      	str	r3, [r7, #48]	@ 0x30
 80060e0:	e035      	b.n	800614e <HAL_ADC_AnalogWDGConfig+0x3ea>
  else
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	f003 0318 	and.w	r3, r3, #24
 80060ec:	2b18      	cmp	r3, #24
 80060ee:	d00f      	beq.n	8006110 <HAL_ADC_AnalogWDGConfig+0x3ac>
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	691a      	ldr	r2, [r3, #16]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	08db      	lsrs	r3, r3, #3
 80060fc:	f003 0303 	and.w	r3, r3, #3
 8006100:	f1c3 0302 	rsb	r3, r3, #2
 8006104:	005b      	lsls	r3, r3, #1
 8006106:	f003 031e 	and.w	r3, r3, #30
 800610a:	fa22 f303 	lsr.w	r3, r2, r3
 800610e:	e002      	b.n	8006116 <HAL_ADC_AnalogWDGConfig+0x3b2>
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp_awd_low_threshold_shifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	f003 0318 	and.w	r3, r3, #24
 8006122:	2b18      	cmp	r3, #24
 8006124:	d00f      	beq.n	8006146 <HAL_ADC_AnalogWDGConfig+0x3e2>
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	695a      	ldr	r2, [r3, #20]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	08db      	lsrs	r3, r3, #3
 8006132:	f003 0303 	and.w	r3, r3, #3
 8006136:	f1c3 0302 	rsb	r3, r3, #2
 800613a:	005b      	lsls	r3, r3, #1
 800613c:	f003 031e 	and.w	r3, r3, #30
 8006140:	fa22 f303 	lsr.w	r3, r2, r3
 8006144:	e002      	b.n	800614c <HAL_ADC_AnalogWDGConfig+0x3e8>
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, tmp_awd_high_threshold_shifted,
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6818      	ldr	r0, [r3, #0]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	6819      	ldr	r1, [r3, #0]
 8006156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006158:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800615a:	f7fe fb34 	bl	80047c6 <LL_ADC_ConfigAnalogWDThresholds>
                                  tmp_awd_low_threshold_shifted);

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006166:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800616a:	4618      	mov	r0, r3
 800616c:	3738      	adds	r7, #56	@ 0x38
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	0017ffff 	.word	0x0017ffff
 8006178:	7dc00000 	.word	0x7dc00000

0800617c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006184:	2300      	movs	r3, #0
 8006186:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4618      	mov	r0, r3
 800618e:	f7fe fbba 	bl	8004906 <LL_ADC_IsEnabled>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d176      	bne.n	8006286 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689a      	ldr	r2, [r3, #8]
 800619e:	4b3c      	ldr	r3, [pc, #240]	@ (8006290 <ADC_Enable+0x114>)
 80061a0:	4013      	ands	r3, r2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00d      	beq.n	80061c2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061aa:	f043 0210 	orr.w	r2, r3, #16
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061b6:	f043 0201 	orr.w	r2, r3, #1
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e062      	b.n	8006288 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7fe fb89 	bl	80048de <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061d4:	d004      	beq.n	80061e0 <ADC_Enable+0x64>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a2e      	ldr	r2, [pc, #184]	@ (8006294 <ADC_Enable+0x118>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d101      	bne.n	80061e4 <ADC_Enable+0x68>
 80061e0:	4b2d      	ldr	r3, [pc, #180]	@ (8006298 <ADC_Enable+0x11c>)
 80061e2:	e000      	b.n	80061e6 <ADC_Enable+0x6a>
 80061e4:	4b2d      	ldr	r3, [pc, #180]	@ (800629c <ADC_Enable+0x120>)
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7fe f972 	bl	80044d0 <LL_ADC_GetCommonPathInternalCh>
 80061ec:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80061ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d013      	beq.n	800621e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80061f6:	4b2a      	ldr	r3, [pc, #168]	@ (80062a0 <ADC_Enable+0x124>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	099b      	lsrs	r3, r3, #6
 80061fc:	4a29      	ldr	r2, [pc, #164]	@ (80062a4 <ADC_Enable+0x128>)
 80061fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006202:	099b      	lsrs	r3, r3, #6
 8006204:	1c5a      	adds	r2, r3, #1
 8006206:	4613      	mov	r3, r2
 8006208:	005b      	lsls	r3, r3, #1
 800620a:	4413      	add	r3, r2
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006210:	e002      	b.n	8006218 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	3b01      	subs	r3, #1
 8006216:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1f9      	bne.n	8006212 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800621e:	f7fe f8df 	bl	80043e0 <HAL_GetTick>
 8006222:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006224:	e028      	b.n	8006278 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4618      	mov	r0, r3
 800622c:	f7fe fb6b 	bl	8004906 <LL_ADC_IsEnabled>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d104      	bne.n	8006240 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4618      	mov	r0, r3
 800623c:	f7fe fb4f 	bl	80048de <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006240:	f7fe f8ce 	bl	80043e0 <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	2b02      	cmp	r3, #2
 800624c:	d914      	bls.n	8006278 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	2b01      	cmp	r3, #1
 800625a:	d00d      	beq.n	8006278 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006260:	f043 0210 	orr.w	r2, r3, #16
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800626c:	f043 0201 	orr.w	r2, r3, #1
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e007      	b.n	8006288 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	2b01      	cmp	r3, #1
 8006284:	d1cf      	bne.n	8006226 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	8000003f 	.word	0x8000003f
 8006294:	50000100 	.word	0x50000100
 8006298:	50000300 	.word	0x50000300
 800629c:	50000700 	.word	0x50000700
 80062a0:	20000044 	.word	0x20000044
 80062a4:	053e2d63 	.word	0x053e2d63

080062a8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062ba:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d14b      	bne.n	800635a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062c6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0308 	and.w	r3, r3, #8
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d021      	beq.n	8006320 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fe f9a1 	bl	8004628 <LL_ADC_REG_IsTriggerSourceSWStart>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d032      	beq.n	8006352 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d12b      	bne.n	8006352 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062fe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800630a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d11f      	bne.n	8006352 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006316:	f043 0201 	orr.w	r2, r3, #1
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800631e:	e018      	b.n	8006352 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	2b00      	cmp	r3, #0
 800632c:	d111      	bne.n	8006352 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006332:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800633e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d105      	bne.n	8006352 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800634a:	f043 0201 	orr.w	r2, r3, #1
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f7ff f89e 	bl	8005494 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006358:	e00e      	b.n	8006378 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800635e:	f003 0310 	and.w	r3, r3, #16
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f7ff f8b2 	bl	80054d0 <HAL_ADC_ErrorCallback>
}
 800636c:	e004      	b.n	8006378 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	4798      	blx	r3
}
 8006378:	bf00      	nop
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800638c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f7ff f88a 	bl	80054a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006394:	bf00      	nop
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063ba:	f043 0204 	orr.w	r2, r3, #4
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f7ff f884 	bl	80054d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80063c8:	bf00      	nop
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <LL_ADC_IsEnabled>:
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	f003 0301 	and.w	r3, r3, #1
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d101      	bne.n	80063e8 <LL_ADC_IsEnabled+0x18>
 80063e4:	2301      	movs	r3, #1
 80063e6:	e000      	b.n	80063ea <LL_ADC_IsEnabled+0x1a>
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <LL_ADC_REG_IsConversionOngoing>:
{
 80063f6:	b480      	push	{r7}
 80063f8:	b083      	sub	sp, #12
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f003 0304 	and.w	r3, r3, #4
 8006406:	2b04      	cmp	r3, #4
 8006408:	d101      	bne.n	800640e <LL_ADC_REG_IsConversionOngoing+0x18>
 800640a:	2301      	movs	r3, #1
 800640c:	e000      	b.n	8006410 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006480:	b590      	push	{r4, r7, lr}
 8006482:	b0a1      	sub	sp, #132	@ 0x84
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800648a:	2300      	movs	r3, #0
 800648c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006496:	2b01      	cmp	r3, #1
 8006498:	d101      	bne.n	800649e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800649a:	2302      	movs	r3, #2
 800649c:	e0e7      	b.n	800666e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80064a6:	2300      	movs	r3, #0
 80064a8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80064aa:	2300      	movs	r3, #0
 80064ac:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80064b6:	d102      	bne.n	80064be <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80064b8:	4b6f      	ldr	r3, [pc, #444]	@ (8006678 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80064ba:	60bb      	str	r3, [r7, #8]
 80064bc:	e009      	b.n	80064d2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a6e      	ldr	r2, [pc, #440]	@ (800667c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d102      	bne.n	80064ce <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80064c8:	4b6d      	ldr	r3, [pc, #436]	@ (8006680 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80064ca:	60bb      	str	r3, [r7, #8]
 80064cc:	e001      	b.n	80064d2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80064ce:	2300      	movs	r3, #0
 80064d0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10b      	bne.n	80064f0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064dc:	f043 0220 	orr.w	r2, r3, #32
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e0be      	b.n	800666e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7ff ff7f 	bl	80063f6 <LL_ADC_REG_IsConversionOngoing>
 80064f8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4618      	mov	r0, r3
 8006500:	f7ff ff79 	bl	80063f6 <LL_ADC_REG_IsConversionOngoing>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	f040 80a0 	bne.w	800664c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800650c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800650e:	2b00      	cmp	r3, #0
 8006510:	f040 809c 	bne.w	800664c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800651c:	d004      	beq.n	8006528 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a55      	ldr	r2, [pc, #340]	@ (8006678 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d101      	bne.n	800652c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006528:	4b56      	ldr	r3, [pc, #344]	@ (8006684 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800652a:	e000      	b.n	800652e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800652c:	4b56      	ldr	r3, [pc, #344]	@ (8006688 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800652e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d04b      	beq.n	80065d0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006538:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	6859      	ldr	r1, [r3, #4]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800654a:	035b      	lsls	r3, r3, #13
 800654c:	430b      	orrs	r3, r1
 800654e:	431a      	orrs	r2, r3
 8006550:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006552:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800655c:	d004      	beq.n	8006568 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a45      	ldr	r2, [pc, #276]	@ (8006678 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d10f      	bne.n	8006588 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8006568:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800656c:	f7ff ff30 	bl	80063d0 <LL_ADC_IsEnabled>
 8006570:	4604      	mov	r4, r0
 8006572:	4841      	ldr	r0, [pc, #260]	@ (8006678 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006574:	f7ff ff2c 	bl	80063d0 <LL_ADC_IsEnabled>
 8006578:	4603      	mov	r3, r0
 800657a:	4323      	orrs	r3, r4
 800657c:	2b00      	cmp	r3, #0
 800657e:	bf0c      	ite	eq
 8006580:	2301      	moveq	r3, #1
 8006582:	2300      	movne	r3, #0
 8006584:	b2db      	uxtb	r3, r3
 8006586:	e012      	b.n	80065ae <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8006588:	483c      	ldr	r0, [pc, #240]	@ (800667c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800658a:	f7ff ff21 	bl	80063d0 <LL_ADC_IsEnabled>
 800658e:	4604      	mov	r4, r0
 8006590:	483b      	ldr	r0, [pc, #236]	@ (8006680 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006592:	f7ff ff1d 	bl	80063d0 <LL_ADC_IsEnabled>
 8006596:	4603      	mov	r3, r0
 8006598:	431c      	orrs	r4, r3
 800659a:	483c      	ldr	r0, [pc, #240]	@ (800668c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800659c:	f7ff ff18 	bl	80063d0 <LL_ADC_IsEnabled>
 80065a0:	4603      	mov	r3, r0
 80065a2:	4323      	orrs	r3, r4
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	bf0c      	ite	eq
 80065a8:	2301      	moveq	r3, #1
 80065aa:	2300      	movne	r3, #0
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d056      	beq.n	8006660 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80065b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80065ba:	f023 030f 	bic.w	r3, r3, #15
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	6811      	ldr	r1, [r2, #0]
 80065c2:	683a      	ldr	r2, [r7, #0]
 80065c4:	6892      	ldr	r2, [r2, #8]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	431a      	orrs	r2, r3
 80065ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065cc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80065ce:	e047      	b.n	8006660 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80065d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80065d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065da:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065e4:	d004      	beq.n	80065f0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a23      	ldr	r2, [pc, #140]	@ (8006678 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d10f      	bne.n	8006610 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80065f0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80065f4:	f7ff feec 	bl	80063d0 <LL_ADC_IsEnabled>
 80065f8:	4604      	mov	r4, r0
 80065fa:	481f      	ldr	r0, [pc, #124]	@ (8006678 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80065fc:	f7ff fee8 	bl	80063d0 <LL_ADC_IsEnabled>
 8006600:	4603      	mov	r3, r0
 8006602:	4323      	orrs	r3, r4
 8006604:	2b00      	cmp	r3, #0
 8006606:	bf0c      	ite	eq
 8006608:	2301      	moveq	r3, #1
 800660a:	2300      	movne	r3, #0
 800660c:	b2db      	uxtb	r3, r3
 800660e:	e012      	b.n	8006636 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8006610:	481a      	ldr	r0, [pc, #104]	@ (800667c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006612:	f7ff fedd 	bl	80063d0 <LL_ADC_IsEnabled>
 8006616:	4604      	mov	r4, r0
 8006618:	4819      	ldr	r0, [pc, #100]	@ (8006680 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800661a:	f7ff fed9 	bl	80063d0 <LL_ADC_IsEnabled>
 800661e:	4603      	mov	r3, r0
 8006620:	431c      	orrs	r4, r3
 8006622:	481a      	ldr	r0, [pc, #104]	@ (800668c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006624:	f7ff fed4 	bl	80063d0 <LL_ADC_IsEnabled>
 8006628:	4603      	mov	r3, r0
 800662a:	4323      	orrs	r3, r4
 800662c:	2b00      	cmp	r3, #0
 800662e:	bf0c      	ite	eq
 8006630:	2301      	moveq	r3, #1
 8006632:	2300      	movne	r3, #0
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d012      	beq.n	8006660 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800663a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006642:	f023 030f 	bic.w	r3, r3, #15
 8006646:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006648:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800664a:	e009      	b.n	8006660 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006650:	f043 0220 	orr.w	r2, r3, #32
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800665e:	e000      	b.n	8006662 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006660:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800666a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800666e:	4618      	mov	r0, r3
 8006670:	3784      	adds	r7, #132	@ 0x84
 8006672:	46bd      	mov	sp, r7
 8006674:	bd90      	pop	{r4, r7, pc}
 8006676:	bf00      	nop
 8006678:	50000100 	.word	0x50000100
 800667c:	50000400 	.word	0x50000400
 8006680:	50000500 	.word	0x50000500
 8006684:	50000300 	.word	0x50000300
 8006688:	50000700 	.word	0x50000700
 800668c:	50000600 	.word	0x50000600

08006690 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006698:	4b05      	ldr	r3, [pc, #20]	@ (80066b0 <LL_EXTI_EnableIT_0_31+0x20>)
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	4904      	ldr	r1, [pc, #16]	@ (80066b0 <LL_EXTI_EnableIT_0_31+0x20>)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	600b      	str	r3, [r1, #0]
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr
 80066b0:	40010400 	.word	0x40010400

080066b4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80066bc:	4b05      	ldr	r3, [pc, #20]	@ (80066d4 <LL_EXTI_EnableIT_32_63+0x20>)
 80066be:	6a1a      	ldr	r2, [r3, #32]
 80066c0:	4904      	ldr	r1, [pc, #16]	@ (80066d4 <LL_EXTI_EnableIT_32_63+0x20>)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	620b      	str	r3, [r1, #32]
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	40010400 	.word	0x40010400

080066d8 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80066e0:	4b06      	ldr	r3, [pc, #24]	@ (80066fc <LL_EXTI_DisableIT_0_31+0x24>)
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	43db      	mvns	r3, r3
 80066e8:	4904      	ldr	r1, [pc, #16]	@ (80066fc <LL_EXTI_DisableIT_0_31+0x24>)
 80066ea:	4013      	ands	r3, r2
 80066ec:	600b      	str	r3, [r1, #0]
}
 80066ee:	bf00      	nop
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	40010400 	.word	0x40010400

08006700 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8006708:	4b06      	ldr	r3, [pc, #24]	@ (8006724 <LL_EXTI_DisableIT_32_63+0x24>)
 800670a:	6a1a      	ldr	r2, [r3, #32]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	43db      	mvns	r3, r3
 8006710:	4904      	ldr	r1, [pc, #16]	@ (8006724 <LL_EXTI_DisableIT_32_63+0x24>)
 8006712:	4013      	ands	r3, r2
 8006714:	620b      	str	r3, [r1, #32]
}
 8006716:	bf00      	nop
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	40010400 	.word	0x40010400

08006728 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8006730:	4b05      	ldr	r3, [pc, #20]	@ (8006748 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006732:	685a      	ldr	r2, [r3, #4]
 8006734:	4904      	ldr	r1, [pc, #16]	@ (8006748 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4313      	orrs	r3, r2
 800673a:	604b      	str	r3, [r1, #4]

}
 800673c:	bf00      	nop
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr
 8006748:	40010400 	.word	0x40010400

0800674c <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8006754:	4b05      	ldr	r3, [pc, #20]	@ (800676c <LL_EXTI_EnableEvent_32_63+0x20>)
 8006756:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006758:	4904      	ldr	r1, [pc, #16]	@ (800676c <LL_EXTI_EnableEvent_32_63+0x20>)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4313      	orrs	r3, r2
 800675e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	40010400 	.word	0x40010400

08006770 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006778:	4b06      	ldr	r3, [pc, #24]	@ (8006794 <LL_EXTI_DisableEvent_0_31+0x24>)
 800677a:	685a      	ldr	r2, [r3, #4]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	43db      	mvns	r3, r3
 8006780:	4904      	ldr	r1, [pc, #16]	@ (8006794 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006782:	4013      	ands	r3, r2
 8006784:	604b      	str	r3, [r1, #4]
}
 8006786:	bf00      	nop
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	40010400 	.word	0x40010400

08006798 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80067a0:	4b06      	ldr	r3, [pc, #24]	@ (80067bc <LL_EXTI_DisableEvent_32_63+0x24>)
 80067a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	43db      	mvns	r3, r3
 80067a8:	4904      	ldr	r1, [pc, #16]	@ (80067bc <LL_EXTI_DisableEvent_32_63+0x24>)
 80067aa:	4013      	ands	r3, r2
 80067ac:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80067ae:	bf00      	nop
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	40010400 	.word	0x40010400

080067c0 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80067c8:	4b05      	ldr	r3, [pc, #20]	@ (80067e0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80067ca:	689a      	ldr	r2, [r3, #8]
 80067cc:	4904      	ldr	r1, [pc, #16]	@ (80067e0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	608b      	str	r3, [r1, #8]

}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr
 80067e0:	40010400 	.word	0x40010400

080067e4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80067ec:	4b05      	ldr	r3, [pc, #20]	@ (8006804 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80067ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80067f0:	4904      	ldr	r1, [pc, #16]	@ (8006804 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	628b      	str	r3, [r1, #40]	@ 0x28
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr
 8006804:	40010400 	.word	0x40010400

08006808 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006810:	4b06      	ldr	r3, [pc, #24]	@ (800682c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006812:	689a      	ldr	r2, [r3, #8]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	43db      	mvns	r3, r3
 8006818:	4904      	ldr	r1, [pc, #16]	@ (800682c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800681a:	4013      	ands	r3, r2
 800681c:	608b      	str	r3, [r1, #8]

}
 800681e:	bf00      	nop
 8006820:	370c      	adds	r7, #12
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	40010400 	.word	0x40010400

08006830 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8006838:	4b06      	ldr	r3, [pc, #24]	@ (8006854 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800683a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	43db      	mvns	r3, r3
 8006840:	4904      	ldr	r1, [pc, #16]	@ (8006854 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8006842:	4013      	ands	r3, r2
 8006844:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8006846:	bf00      	nop
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	40010400 	.word	0x40010400

08006858 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8006860:	4b05      	ldr	r3, [pc, #20]	@ (8006878 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006862:	68da      	ldr	r2, [r3, #12]
 8006864:	4904      	ldr	r1, [pc, #16]	@ (8006878 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4313      	orrs	r3, r2
 800686a:	60cb      	str	r3, [r1, #12]
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr
 8006878:	40010400 	.word	0x40010400

0800687c <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8006884:	4b05      	ldr	r3, [pc, #20]	@ (800689c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8006886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006888:	4904      	ldr	r1, [pc, #16]	@ (800689c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4313      	orrs	r3, r2
 800688e:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr
 800689c:	40010400 	.word	0x40010400

080068a0 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80068a8:	4b06      	ldr	r3, [pc, #24]	@ (80068c4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80068aa:	68da      	ldr	r2, [r3, #12]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	43db      	mvns	r3, r3
 80068b0:	4904      	ldr	r1, [pc, #16]	@ (80068c4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80068b2:	4013      	ands	r3, r2
 80068b4:	60cb      	str	r3, [r1, #12]
}
 80068b6:	bf00      	nop
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	40010400 	.word	0x40010400

080068c8 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80068d0:	4b06      	ldr	r3, [pc, #24]	@ (80068ec <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80068d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	43db      	mvns	r3, r3
 80068d8:	4904      	ldr	r1, [pc, #16]	@ (80068ec <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80068da:	4013      	ands	r3, r2
 80068dc:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 80068de:	bf00      	nop
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	40010400 	.word	0x40010400

080068f0 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80068f8:	4a04      	ldr	r2, [pc, #16]	@ (800690c <LL_EXTI_ClearFlag_0_31+0x1c>)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6153      	str	r3, [r2, #20]
}
 80068fe:	bf00      	nop
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	40010400 	.word	0x40010400

08006910 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8006918:	4a04      	ldr	r2, [pc, #16]	@ (800692c <LL_EXTI_ClearFlag_32_63+0x1c>)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800691e:	bf00      	nop
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	40010400 	.word	0x40010400

08006930 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b088      	sub	sp, #32
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8006938:	2300      	movs	r3, #0
 800693a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800693c:	2300      	movs	r3, #0
 800693e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d102      	bne.n	800694c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	77fb      	strb	r3, [r7, #31]
 800694a:	e181      	b.n	8006c50 <HAL_COMP_Init+0x320>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006956:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800695a:	d102      	bne.n	8006962 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	77fb      	strb	r3, [r7, #31]
 8006960:	e176      	b.n	8006c50 <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	7f5b      	ldrb	r3, [r3, #29]
 8006966:	b2db      	uxtb	r3, r3
 8006968:	2b00      	cmp	r3, #0
 800696a:	d108      	bne.n	800697e <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f7fc fd69 	bl	8003450 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006988:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	695b      	ldr	r3, [r3, #20]
 8006998:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 80069a4:	4313      	orrs	r3, r2
 80069a6:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	4b90      	ldr	r3, [pc, #576]	@ (8006bf0 <HAL_COMP_Init+0x2c0>)
 80069b0:	4013      	ands	r3, r2
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	6812      	ldr	r2, [r2, #0]
 80069b6:	6979      	ldr	r1, [r7, #20]
 80069b8:	430b      	orrs	r3, r1
 80069ba:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d016      	beq.n	80069f8 <HAL_COMP_Init+0xc8>
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d113      	bne.n	80069f8 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80069d0:	4b88      	ldr	r3, [pc, #544]	@ (8006bf4 <HAL_COMP_Init+0x2c4>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	099b      	lsrs	r3, r3, #6
 80069d6:	4a88      	ldr	r2, [pc, #544]	@ (8006bf8 <HAL_COMP_Init+0x2c8>)
 80069d8:	fba2 2303 	umull	r2, r3, r2, r3
 80069dc:	099b      	lsrs	r3, r3, #6
 80069de:	1c5a      	adds	r2, r3, #1
 80069e0:	4613      	mov	r3, r2
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4413      	add	r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80069ea:	e002      	b.n	80069f2 <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	3b01      	subs	r3, #1
 80069f0:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1f9      	bne.n	80069ec <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a7f      	ldr	r2, [pc, #508]	@ (8006bfc <HAL_COMP_Init+0x2cc>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d028      	beq.n	8006a54 <HAL_COMP_Init+0x124>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a7e      	ldr	r2, [pc, #504]	@ (8006c00 <HAL_COMP_Init+0x2d0>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d020      	beq.n	8006a4e <HAL_COMP_Init+0x11e>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a7c      	ldr	r2, [pc, #496]	@ (8006c04 <HAL_COMP_Init+0x2d4>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d018      	beq.n	8006a48 <HAL_COMP_Init+0x118>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a7b      	ldr	r2, [pc, #492]	@ (8006c08 <HAL_COMP_Init+0x2d8>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d010      	beq.n	8006a42 <HAL_COMP_Init+0x112>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a79      	ldr	r2, [pc, #484]	@ (8006c0c <HAL_COMP_Init+0x2dc>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d008      	beq.n	8006a3c <HAL_COMP_Init+0x10c>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a78      	ldr	r2, [pc, #480]	@ (8006c10 <HAL_COMP_Init+0x2e0>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d101      	bne.n	8006a38 <HAL_COMP_Init+0x108>
 8006a34:	2301      	movs	r3, #1
 8006a36:	e00f      	b.n	8006a58 <HAL_COMP_Init+0x128>
 8006a38:	2302      	movs	r3, #2
 8006a3a:	e00d      	b.n	8006a58 <HAL_COMP_Init+0x128>
 8006a3c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006a40:	e00a      	b.n	8006a58 <HAL_COMP_Init+0x128>
 8006a42:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006a46:	e007      	b.n	8006a58 <HAL_COMP_Init+0x128>
 8006a48:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8006a4c:	e004      	b.n	8006a58 <HAL_COMP_Init+0x128>
 8006a4e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006a52:	e001      	b.n	8006a58 <HAL_COMP_Init+0x128>
 8006a54:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006a58:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	f003 0303 	and.w	r3, r3, #3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f000 80b6 	beq.w	8006bd4 <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	f003 0310 	and.w	r3, r3, #16
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d011      	beq.n	8006a98 <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a65      	ldr	r2, [pc, #404]	@ (8006c10 <HAL_COMP_Init+0x2e0>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d004      	beq.n	8006a88 <HAL_COMP_Init+0x158>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a64      	ldr	r2, [pc, #400]	@ (8006c14 <HAL_COMP_Init+0x2e4>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d103      	bne.n	8006a90 <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8006a88:	6938      	ldr	r0, [r7, #16]
 8006a8a:	f7ff feab 	bl	80067e4 <LL_EXTI_EnableRisingTrig_32_63>
 8006a8e:	e014      	b.n	8006aba <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8006a90:	6938      	ldr	r0, [r7, #16]
 8006a92:	f7ff fe95 	bl	80067c0 <LL_EXTI_EnableRisingTrig_0_31>
 8006a96:	e010      	b.n	8006aba <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a5c      	ldr	r2, [pc, #368]	@ (8006c10 <HAL_COMP_Init+0x2e0>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d004      	beq.n	8006aac <HAL_COMP_Init+0x17c>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a5b      	ldr	r2, [pc, #364]	@ (8006c14 <HAL_COMP_Init+0x2e4>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d103      	bne.n	8006ab4 <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8006aac:	6938      	ldr	r0, [r7, #16]
 8006aae:	f7ff febf 	bl	8006830 <LL_EXTI_DisableRisingTrig_32_63>
 8006ab2:	e002      	b.n	8006aba <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8006ab4:	6938      	ldr	r0, [r7, #16]
 8006ab6:	f7ff fea7 	bl	8006808 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	f003 0320 	and.w	r3, r3, #32
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d011      	beq.n	8006aea <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a51      	ldr	r2, [pc, #324]	@ (8006c10 <HAL_COMP_Init+0x2e0>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d004      	beq.n	8006ada <HAL_COMP_Init+0x1aa>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a4f      	ldr	r2, [pc, #316]	@ (8006c14 <HAL_COMP_Init+0x2e4>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d103      	bne.n	8006ae2 <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8006ada:	6938      	ldr	r0, [r7, #16]
 8006adc:	f7ff fece 	bl	800687c <LL_EXTI_EnableFallingTrig_32_63>
 8006ae0:	e014      	b.n	8006b0c <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8006ae2:	6938      	ldr	r0, [r7, #16]
 8006ae4:	f7ff feb8 	bl	8006858 <LL_EXTI_EnableFallingTrig_0_31>
 8006ae8:	e010      	b.n	8006b0c <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a48      	ldr	r2, [pc, #288]	@ (8006c10 <HAL_COMP_Init+0x2e0>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d004      	beq.n	8006afe <HAL_COMP_Init+0x1ce>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a46      	ldr	r2, [pc, #280]	@ (8006c14 <HAL_COMP_Init+0x2e4>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d103      	bne.n	8006b06 <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8006afe:	6938      	ldr	r0, [r7, #16]
 8006b00:	f7ff fee2 	bl	80068c8 <LL_EXTI_DisableFallingTrig_32_63>
 8006b04:	e002      	b.n	8006b0c <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8006b06:	6938      	ldr	r0, [r7, #16]
 8006b08:	f7ff feca 	bl	80068a0 <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a3f      	ldr	r2, [pc, #252]	@ (8006c10 <HAL_COMP_Init+0x2e0>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d004      	beq.n	8006b20 <HAL_COMP_Init+0x1f0>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a3e      	ldr	r2, [pc, #248]	@ (8006c14 <HAL_COMP_Init+0x2e4>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d103      	bne.n	8006b28 <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8006b20:	6938      	ldr	r0, [r7, #16]
 8006b22:	f7ff fef5 	bl	8006910 <LL_EXTI_ClearFlag_32_63>
 8006b26:	e002      	b.n	8006b2e <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8006b28:	6938      	ldr	r0, [r7, #16]
 8006b2a:	f7ff fee1 	bl	80068f0 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	f003 0302 	and.w	r3, r3, #2
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d011      	beq.n	8006b5e <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a34      	ldr	r2, [pc, #208]	@ (8006c10 <HAL_COMP_Init+0x2e0>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d004      	beq.n	8006b4e <HAL_COMP_Init+0x21e>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a32      	ldr	r2, [pc, #200]	@ (8006c14 <HAL_COMP_Init+0x2e4>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d103      	bne.n	8006b56 <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8006b4e:	6938      	ldr	r0, [r7, #16]
 8006b50:	f7ff fdfc 	bl	800674c <LL_EXTI_EnableEvent_32_63>
 8006b54:	e014      	b.n	8006b80 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8006b56:	6938      	ldr	r0, [r7, #16]
 8006b58:	f7ff fde6 	bl	8006728 <LL_EXTI_EnableEvent_0_31>
 8006b5c:	e010      	b.n	8006b80 <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a2b      	ldr	r2, [pc, #172]	@ (8006c10 <HAL_COMP_Init+0x2e0>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d004      	beq.n	8006b72 <HAL_COMP_Init+0x242>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a29      	ldr	r2, [pc, #164]	@ (8006c14 <HAL_COMP_Init+0x2e4>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d103      	bne.n	8006b7a <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8006b72:	6938      	ldr	r0, [r7, #16]
 8006b74:	f7ff fe10 	bl	8006798 <LL_EXTI_DisableEvent_32_63>
 8006b78:	e002      	b.n	8006b80 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8006b7a:	6938      	ldr	r0, [r7, #16]
 8006b7c:	f7ff fdf8 	bl	8006770 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	f003 0301 	and.w	r3, r3, #1
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d011      	beq.n	8006bb0 <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a1f      	ldr	r2, [pc, #124]	@ (8006c10 <HAL_COMP_Init+0x2e0>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d004      	beq.n	8006ba0 <HAL_COMP_Init+0x270>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a1e      	ldr	r2, [pc, #120]	@ (8006c14 <HAL_COMP_Init+0x2e4>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d103      	bne.n	8006ba8 <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8006ba0:	6938      	ldr	r0, [r7, #16]
 8006ba2:	f7ff fd87 	bl	80066b4 <LL_EXTI_EnableIT_32_63>
 8006ba6:	e04b      	b.n	8006c40 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8006ba8:	6938      	ldr	r0, [r7, #16]
 8006baa:	f7ff fd71 	bl	8006690 <LL_EXTI_EnableIT_0_31>
 8006bae:	e047      	b.n	8006c40 <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a16      	ldr	r2, [pc, #88]	@ (8006c10 <HAL_COMP_Init+0x2e0>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d004      	beq.n	8006bc4 <HAL_COMP_Init+0x294>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a15      	ldr	r2, [pc, #84]	@ (8006c14 <HAL_COMP_Init+0x2e4>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d103      	bne.n	8006bcc <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8006bc4:	6938      	ldr	r0, [r7, #16]
 8006bc6:	f7ff fd9b 	bl	8006700 <LL_EXTI_DisableIT_32_63>
 8006bca:	e039      	b.n	8006c40 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8006bcc:	6938      	ldr	r0, [r7, #16]
 8006bce:	f7ff fd83 	bl	80066d8 <LL_EXTI_DisableIT_0_31>
 8006bd2:	e035      	b.n	8006c40 <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8006c10 <HAL_COMP_Init+0x2e0>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d004      	beq.n	8006be8 <HAL_COMP_Init+0x2b8>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a0c      	ldr	r2, [pc, #48]	@ (8006c14 <HAL_COMP_Init+0x2e4>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d117      	bne.n	8006c18 <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8006be8:	6938      	ldr	r0, [r7, #16]
 8006bea:	f7ff fdd5 	bl	8006798 <LL_EXTI_DisableEvent_32_63>
 8006bee:	e016      	b.n	8006c1e <HAL_COMP_Init+0x2ee>
 8006bf0:	ff007e0f 	.word	0xff007e0f
 8006bf4:	20000044 	.word	0x20000044
 8006bf8:	053e2d63 	.word	0x053e2d63
 8006bfc:	40010200 	.word	0x40010200
 8006c00:	40010204 	.word	0x40010204
 8006c04:	40010208 	.word	0x40010208
 8006c08:	4001020c 	.word	0x4001020c
 8006c0c:	40010210 	.word	0x40010210
 8006c10:	40010214 	.word	0x40010214
 8006c14:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8006c18:	6938      	ldr	r0, [r7, #16]
 8006c1a:	f7ff fda9 	bl	8006770 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a0e      	ldr	r2, [pc, #56]	@ (8006c5c <HAL_COMP_Init+0x32c>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d004      	beq.n	8006c32 <HAL_COMP_Init+0x302>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a0c      	ldr	r2, [pc, #48]	@ (8006c60 <HAL_COMP_Init+0x330>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d103      	bne.n	8006c3a <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8006c32:	6938      	ldr	r0, [r7, #16]
 8006c34:	f7ff fd64 	bl	8006700 <LL_EXTI_DisableIT_32_63>
 8006c38:	e002      	b.n	8006c40 <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8006c3a:	6938      	ldr	r0, [r7, #16]
 8006c3c:	f7ff fd4c 	bl	80066d8 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	7f5b      	ldrb	r3, [r3, #29]
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d102      	bne.n	8006c50 <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8006c50:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3720      	adds	r7, #32
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	40010214 	.word	0x40010214
 8006c60:	40010218 	.word	0x40010218

08006c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f003 0307 	and.w	r3, r3, #7
 8006c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006c74:	4b0c      	ldr	r3, [pc, #48]	@ (8006ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006c80:	4013      	ands	r3, r2
 8006c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006c8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006c90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006c96:	4a04      	ldr	r2, [pc, #16]	@ (8006ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	60d3      	str	r3, [r2, #12]
}
 8006c9c:	bf00      	nop
 8006c9e:	3714      	adds	r7, #20
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr
 8006ca8:	e000ed00 	.word	0xe000ed00

08006cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006cac:	b480      	push	{r7}
 8006cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006cb0:	4b04      	ldr	r3, [pc, #16]	@ (8006cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	0a1b      	lsrs	r3, r3, #8
 8006cb6:	f003 0307 	and.w	r3, r3, #7
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr
 8006cc4:	e000ed00 	.word	0xe000ed00

08006cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	4603      	mov	r3, r0
 8006cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	db0b      	blt.n	8006cf2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006cda:	79fb      	ldrb	r3, [r7, #7]
 8006cdc:	f003 021f 	and.w	r2, r3, #31
 8006ce0:	4907      	ldr	r1, [pc, #28]	@ (8006d00 <__NVIC_EnableIRQ+0x38>)
 8006ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ce6:	095b      	lsrs	r3, r3, #5
 8006ce8:	2001      	movs	r0, #1
 8006cea:	fa00 f202 	lsl.w	r2, r0, r2
 8006cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006cf2:	bf00      	nop
 8006cf4:	370c      	adds	r7, #12
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	e000e100 	.word	0xe000e100

08006d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	6039      	str	r1, [r7, #0]
 8006d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	db0a      	blt.n	8006d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	b2da      	uxtb	r2, r3
 8006d1c:	490c      	ldr	r1, [pc, #48]	@ (8006d50 <__NVIC_SetPriority+0x4c>)
 8006d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d22:	0112      	lsls	r2, r2, #4
 8006d24:	b2d2      	uxtb	r2, r2
 8006d26:	440b      	add	r3, r1
 8006d28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006d2c:	e00a      	b.n	8006d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	b2da      	uxtb	r2, r3
 8006d32:	4908      	ldr	r1, [pc, #32]	@ (8006d54 <__NVIC_SetPriority+0x50>)
 8006d34:	79fb      	ldrb	r3, [r7, #7]
 8006d36:	f003 030f 	and.w	r3, r3, #15
 8006d3a:	3b04      	subs	r3, #4
 8006d3c:	0112      	lsls	r2, r2, #4
 8006d3e:	b2d2      	uxtb	r2, r2
 8006d40:	440b      	add	r3, r1
 8006d42:	761a      	strb	r2, [r3, #24]
}
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr
 8006d50:	e000e100 	.word	0xe000e100
 8006d54:	e000ed00 	.word	0xe000ed00

08006d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b089      	sub	sp, #36	@ 0x24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f003 0307 	and.w	r3, r3, #7
 8006d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	f1c3 0307 	rsb	r3, r3, #7
 8006d72:	2b04      	cmp	r3, #4
 8006d74:	bf28      	it	cs
 8006d76:	2304      	movcs	r3, #4
 8006d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	3304      	adds	r3, #4
 8006d7e:	2b06      	cmp	r3, #6
 8006d80:	d902      	bls.n	8006d88 <NVIC_EncodePriority+0x30>
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	3b03      	subs	r3, #3
 8006d86:	e000      	b.n	8006d8a <NVIC_EncodePriority+0x32>
 8006d88:	2300      	movs	r3, #0
 8006d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	fa02 f303 	lsl.w	r3, r2, r3
 8006d96:	43da      	mvns	r2, r3
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	401a      	ands	r2, r3
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006da0:	f04f 31ff 	mov.w	r1, #4294967295
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	fa01 f303 	lsl.w	r3, r1, r3
 8006daa:	43d9      	mvns	r1, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006db0:	4313      	orrs	r3, r2
         );
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3724      	adds	r7, #36	@ 0x24
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
	...

08006dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006dd0:	d301      	bcc.n	8006dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e00f      	b.n	8006df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8006e00 <SysTick_Config+0x40>)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006dde:	210f      	movs	r1, #15
 8006de0:	f04f 30ff 	mov.w	r0, #4294967295
 8006de4:	f7ff ff8e 	bl	8006d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006de8:	4b05      	ldr	r3, [pc, #20]	@ (8006e00 <SysTick_Config+0x40>)
 8006dea:	2200      	movs	r2, #0
 8006dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006dee:	4b04      	ldr	r3, [pc, #16]	@ (8006e00 <SysTick_Config+0x40>)
 8006df0:	2207      	movs	r2, #7
 8006df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3708      	adds	r7, #8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	e000e010 	.word	0xe000e010

08006e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f7ff ff29 	bl	8006c64 <__NVIC_SetPriorityGrouping>
}
 8006e12:	bf00      	nop
 8006e14:	3708      	adds	r7, #8
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b086      	sub	sp, #24
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	4603      	mov	r3, r0
 8006e22:	60b9      	str	r1, [r7, #8]
 8006e24:	607a      	str	r2, [r7, #4]
 8006e26:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006e28:	f7ff ff40 	bl	8006cac <__NVIC_GetPriorityGrouping>
 8006e2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	68b9      	ldr	r1, [r7, #8]
 8006e32:	6978      	ldr	r0, [r7, #20]
 8006e34:	f7ff ff90 	bl	8006d58 <NVIC_EncodePriority>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e3e:	4611      	mov	r1, r2
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7ff ff5f 	bl	8006d04 <__NVIC_SetPriority>
}
 8006e46:	bf00      	nop
 8006e48:	3718      	adds	r7, #24
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b082      	sub	sp, #8
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	4603      	mov	r3, r0
 8006e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7ff ff33 	bl	8006cc8 <__NVIC_EnableIRQ>
}
 8006e62:	bf00      	nop
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b082      	sub	sp, #8
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7ff ffa4 	bl	8006dc0 <SysTick_Config>
 8006e78:	4603      	mov	r3, r0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3708      	adds	r7, #8
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b082      	sub	sp, #8
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d101      	bne.n	8006e94 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e014      	b.n	8006ebe <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	791b      	ldrb	r3, [r3, #4]
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d105      	bne.n	8006eaa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f7fc fb29 	bl	80034fc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2202      	movs	r2, #2
 8006eae:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3708      	adds	r7, #8
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
	...

08006ec8 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d101      	bne.n	8006edc <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e056      	b.n	8006f8a <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	795b      	ldrb	r3, [r3, #5]
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d101      	bne.n	8006ee8 <HAL_DAC_Start+0x20>
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	e050      	b.n	8006f8a <HAL_DAC_Start+0xc2>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2202      	movs	r2, #2
 8006ef2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	6819      	ldr	r1, [r3, #0]
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	f003 0310 	and.w	r3, r3, #16
 8006f00:	2201      	movs	r2, #1
 8006f02:	409a      	lsls	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	430a      	orrs	r2, r1
 8006f0a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006f0c:	4b22      	ldr	r3, [pc, #136]	@ (8006f98 <HAL_DAC_Start+0xd0>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	099b      	lsrs	r3, r3, #6
 8006f12:	4a22      	ldr	r2, [pc, #136]	@ (8006f9c <HAL_DAC_Start+0xd4>)
 8006f14:	fba2 2303 	umull	r2, r3, r2, r3
 8006f18:	099b      	lsrs	r3, r3, #6
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8006f1e:	e002      	b.n	8006f26 <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	3b01      	subs	r3, #1
 8006f24:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1f9      	bne.n	8006f20 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d10f      	bne.n	8006f52 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d11d      	bne.n	8006f7c <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	685a      	ldr	r2, [r3, #4]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f042 0201 	orr.w	r2, r2, #1
 8006f4e:	605a      	str	r2, [r3, #4]
 8006f50:	e014      	b.n	8006f7c <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	f003 0310 	and.w	r3, r3, #16
 8006f62:	2102      	movs	r1, #2
 8006f64:	fa01 f303 	lsl.w	r3, r1, r3
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d107      	bne.n	8006f7c <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	685a      	ldr	r2, [r3, #4]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f042 0202 	orr.w	r2, r2, #2
 8006f7a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3714      	adds	r7, #20
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	20000044 	.word	0x20000044
 8006f9c:	053e2d63 	.word	0x053e2d63

08006fa0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b087      	sub	sp, #28
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	607a      	str	r2, [r7, #4]
 8006fac:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d101      	bne.n	8006fbc <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e018      	b.n	8006fee <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d105      	bne.n	8006fda <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	3308      	adds	r3, #8
 8006fd6:	617b      	str	r3, [r7, #20]
 8006fd8:	e004      	b.n	8006fe4 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4413      	add	r3, r2
 8006fe0:	3314      	adds	r3, #20
 8006fe2:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	371c      	adds	r7, #28
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
	...

08006ffc <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b08a      	sub	sp, #40	@ 0x28
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007008:	2300      	movs	r3, #0
 800700a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d002      	beq.n	8007018 <HAL_DAC_ConfigChannel+0x1c>
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d101      	bne.n	800701c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e1a1      	b.n	8007360 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	795b      	ldrb	r3, [r3, #5]
 8007026:	2b01      	cmp	r3, #1
 8007028:	d101      	bne.n	800702e <HAL_DAC_ConfigChannel+0x32>
 800702a:	2302      	movs	r3, #2
 800702c:	e198      	b.n	8007360 <HAL_DAC_ConfigChannel+0x364>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2201      	movs	r2, #1
 8007032:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2202      	movs	r2, #2
 8007038:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	2b04      	cmp	r3, #4
 8007040:	d17a      	bne.n	8007138 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8007042:	f7fd f9cd 	bl	80043e0 <HAL_GetTick>
 8007046:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d13d      	bne.n	80070ca <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800704e:	e018      	b.n	8007082 <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007050:	f7fd f9c6 	bl	80043e0 <HAL_GetTick>
 8007054:	4602      	mov	r2, r0
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	2b01      	cmp	r3, #1
 800705c:	d911      	bls.n	8007082 <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007064:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00a      	beq.n	8007082 <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	f043 0208 	orr.w	r2, r3, #8
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2203      	movs	r2, #3
 800707c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e16e      	b.n	8007360 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007088:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1df      	bne.n	8007050 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68ba      	ldr	r2, [r7, #8]
 8007096:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007098:	641a      	str	r2, [r3, #64]	@ 0x40
 800709a:	e020      	b.n	80070de <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800709c:	f7fd f9a0 	bl	80043e0 <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d90f      	bls.n	80070ca <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	da0a      	bge.n	80070ca <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	f043 0208 	orr.w	r2, r3, #8
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2203      	movs	r2, #3
 80070c4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e14a      	b.n	8007360 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	dbe3      	blt.n	800709c <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80070dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f003 0310 	and.w	r3, r3, #16
 80070ea:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80070ee:	fa01 f303 	lsl.w	r3, r1, r3
 80070f2:	43db      	mvns	r3, r3
 80070f4:	ea02 0103 	and.w	r1, r2, r3
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f003 0310 	and.w	r3, r3, #16
 8007102:	409a      	lsls	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	430a      	orrs	r2, r1
 800710a:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f003 0310 	and.w	r3, r3, #16
 8007118:	21ff      	movs	r1, #255	@ 0xff
 800711a:	fa01 f303 	lsl.w	r3, r1, r3
 800711e:	43db      	mvns	r3, r3
 8007120:	ea02 0103 	and.w	r1, r2, r3
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f003 0310 	and.w	r3, r3, #16
 800712e:	409a      	lsls	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	430a      	orrs	r2, r1
 8007136:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	69db      	ldr	r3, [r3, #28]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d11d      	bne.n	800717c <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007146:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f003 0310 	and.w	r3, r3, #16
 800714e:	221f      	movs	r2, #31
 8007150:	fa02 f303 	lsl.w	r3, r2, r3
 8007154:	43db      	mvns	r3, r3
 8007156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007158:	4013      	ands	r3, r2
 800715a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	6a1b      	ldr	r3, [r3, #32]
 8007160:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f003 0310 	and.w	r3, r3, #16
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	fa02 f303 	lsl.w	r3, r2, r3
 800716e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007170:	4313      	orrs	r3, r2
 8007172:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800717a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007182:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f003 0310 	and.w	r3, r3, #16
 800718a:	2207      	movs	r2, #7
 800718c:	fa02 f303 	lsl.w	r3, r2, r3
 8007190:	43db      	mvns	r3, r3
 8007192:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007194:	4013      	ands	r3, r2
 8007196:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	699b      	ldr	r3, [r3, #24]
 800719c:	2b01      	cmp	r3, #1
 800719e:	d102      	bne.n	80071a6 <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 80071a0:	2300      	movs	r3, #0
 80071a2:	623b      	str	r3, [r7, #32]
 80071a4:	e00f      	b.n	80071c6 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d102      	bne.n	80071b4 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80071ae:	2301      	movs	r3, #1
 80071b0:	623b      	str	r3, [r7, #32]
 80071b2:	e008      	b.n	80071c6 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	695b      	ldr	r3, [r3, #20]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d102      	bne.n	80071c2 <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80071bc:	2301      	movs	r3, #1
 80071be:	623b      	str	r3, [r7, #32]
 80071c0:	e001      	b.n	80071c6 <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80071c2:	2300      	movs	r3, #0
 80071c4:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	689a      	ldr	r2, [r3, #8]
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	6a3a      	ldr	r2, [r7, #32]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f003 0310 	and.w	r3, r3, #16
 80071dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80071e0:	fa02 f303 	lsl.w	r3, r2, r3
 80071e4:	43db      	mvns	r3, r3
 80071e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071e8:	4013      	ands	r3, r2
 80071ea:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	791b      	ldrb	r3, [r3, #4]
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d102      	bne.n	80071fa <HAL_DAC_ConfigChannel+0x1fe>
 80071f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80071f8:	e000      	b.n	80071fc <HAL_DAC_ConfigChannel+0x200>
 80071fa:	2300      	movs	r3, #0
 80071fc:	697a      	ldr	r2, [r7, #20]
 80071fe:	4313      	orrs	r3, r2
 8007200:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f003 0310 	and.w	r3, r3, #16
 8007208:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800720c:	fa02 f303 	lsl.w	r3, r2, r3
 8007210:	43db      	mvns	r3, r3
 8007212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007214:	4013      	ands	r3, r2
 8007216:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	795b      	ldrb	r3, [r3, #5]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d102      	bne.n	8007226 <HAL_DAC_ConfigChannel+0x22a>
 8007220:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007224:	e000      	b.n	8007228 <HAL_DAC_ConfigChannel+0x22c>
 8007226:	2300      	movs	r3, #0
 8007228:	697a      	ldr	r2, [r7, #20]
 800722a:	4313      	orrs	r3, r2
 800722c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800722e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007230:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8007234:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2b02      	cmp	r3, #2
 800723c:	d114      	bne.n	8007268 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800723e:	f003 fcb7 	bl	800abb0 <HAL_RCC_GetHCLKFreq>
 8007242:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	4a48      	ldr	r2, [pc, #288]	@ (8007368 <HAL_DAC_ConfigChannel+0x36c>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d904      	bls.n	8007256 <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800724c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007252:	627b      	str	r3, [r7, #36]	@ 0x24
 8007254:	e00f      	b.n	8007276 <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	4a44      	ldr	r2, [pc, #272]	@ (800736c <HAL_DAC_ConfigChannel+0x370>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d90a      	bls.n	8007274 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800725e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007260:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007264:	627b      	str	r3, [r7, #36]	@ 0x24
 8007266:	e006      	b.n	8007276 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800726e:	4313      	orrs	r3, r2
 8007270:	627b      	str	r3, [r7, #36]	@ 0x24
 8007272:	e000      	b.n	8007276 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8007274:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f003 0310 	and.w	r3, r3, #16
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	fa02 f303 	lsl.w	r3, r2, r3
 8007282:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007284:	4313      	orrs	r3, r2
 8007286:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800728e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	6819      	ldr	r1, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f003 0310 	and.w	r3, r3, #16
 800729c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80072a0:	fa02 f303 	lsl.w	r3, r2, r3
 80072a4:	43da      	mvns	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	400a      	ands	r2, r1
 80072ac:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f003 0310 	and.w	r3, r3, #16
 80072bc:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80072c0:	fa02 f303 	lsl.w	r3, r2, r3
 80072c4:	43db      	mvns	r3, r3
 80072c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072c8:	4013      	ands	r3, r2
 80072ca:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f003 0310 	and.w	r3, r3, #16
 80072d8:	697a      	ldr	r2, [r7, #20]
 80072da:	fa02 f303 	lsl.w	r3, r2, r3
 80072de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072e0:	4313      	orrs	r3, r2
 80072e2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072ea:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6819      	ldr	r1, [r3, #0]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f003 0310 	and.w	r3, r3, #16
 80072f8:	22c0      	movs	r2, #192	@ 0xc0
 80072fa:	fa02 f303 	lsl.w	r3, r2, r3
 80072fe:	43da      	mvns	r2, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	400a      	ands	r2, r1
 8007306:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	089b      	lsrs	r3, r3, #2
 800730e:	f003 030f 	and.w	r3, r3, #15
 8007312:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	089b      	lsrs	r3, r3, #2
 800731a:	021b      	lsls	r3, r3, #8
 800731c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007320:	697a      	ldr	r2, [r7, #20]
 8007322:	4313      	orrs	r3, r2
 8007324:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f003 0310 	and.w	r3, r3, #16
 8007332:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8007336:	fa01 f303 	lsl.w	r3, r1, r3
 800733a:	43db      	mvns	r3, r3
 800733c:	ea02 0103 	and.w	r1, r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f003 0310 	and.w	r3, r3, #16
 8007346:	697a      	ldr	r2, [r7, #20]
 8007348:	409a      	lsls	r2, r3
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	430a      	orrs	r2, r1
 8007350:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2201      	movs	r2, #1
 8007356:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2200      	movs	r2, #0
 800735c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800735e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007360:	4618      	mov	r0, r3
 8007362:	3728      	adds	r7, #40	@ 0x28
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	09896800 	.word	0x09896800
 800736c:	04c4b400 	.word	0x04c4b400

08007370 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d101      	bne.n	8007382 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e08d      	b.n	800749e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	461a      	mov	r2, r3
 8007388:	4b47      	ldr	r3, [pc, #284]	@ (80074a8 <HAL_DMA_Init+0x138>)
 800738a:	429a      	cmp	r2, r3
 800738c:	d80f      	bhi.n	80073ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	461a      	mov	r2, r3
 8007394:	4b45      	ldr	r3, [pc, #276]	@ (80074ac <HAL_DMA_Init+0x13c>)
 8007396:	4413      	add	r3, r2
 8007398:	4a45      	ldr	r2, [pc, #276]	@ (80074b0 <HAL_DMA_Init+0x140>)
 800739a:	fba2 2303 	umull	r2, r3, r2, r3
 800739e:	091b      	lsrs	r3, r3, #4
 80073a0:	009a      	lsls	r2, r3, #2
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a42      	ldr	r2, [pc, #264]	@ (80074b4 <HAL_DMA_Init+0x144>)
 80073aa:	641a      	str	r2, [r3, #64]	@ 0x40
 80073ac:	e00e      	b.n	80073cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	461a      	mov	r2, r3
 80073b4:	4b40      	ldr	r3, [pc, #256]	@ (80074b8 <HAL_DMA_Init+0x148>)
 80073b6:	4413      	add	r3, r2
 80073b8:	4a3d      	ldr	r2, [pc, #244]	@ (80074b0 <HAL_DMA_Init+0x140>)
 80073ba:	fba2 2303 	umull	r2, r3, r2, r3
 80073be:	091b      	lsrs	r3, r3, #4
 80073c0:	009a      	lsls	r2, r3, #2
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a3c      	ldr	r2, [pc, #240]	@ (80074bc <HAL_DMA_Init+0x14c>)
 80073ca:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2202      	movs	r2, #2
 80073d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80073e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80073f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007408:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	4313      	orrs	r3, r2
 8007414:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f9b6 	bl	8007790 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800742c:	d102      	bne.n	8007434 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685a      	ldr	r2, [r3, #4]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800743c:	b2d2      	uxtb	r2, r2
 800743e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007448:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d010      	beq.n	8007474 <HAL_DMA_Init+0x104>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	2b04      	cmp	r3, #4
 8007458:	d80c      	bhi.n	8007474 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f9d6 	bl	800780c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007464:	2200      	movs	r2, #0
 8007466:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007470:	605a      	str	r2, [r3, #4]
 8007472:	e008      	b.n	8007486 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	40020407 	.word	0x40020407
 80074ac:	bffdfff8 	.word	0xbffdfff8
 80074b0:	cccccccd 	.word	0xcccccccd
 80074b4:	40020000 	.word	0x40020000
 80074b8:	bffdfbf8 	.word	0xbffdfbf8
 80074bc:	40020400 	.word	0x40020400

080074c0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b086      	sub	sp, #24
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	607a      	str	r2, [r7, #4]
 80074cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074ce:	2300      	movs	r3, #0
 80074d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d101      	bne.n	80074e0 <HAL_DMA_Start_IT+0x20>
 80074dc:	2302      	movs	r3, #2
 80074de:	e066      	b.n	80075ae <HAL_DMA_Start_IT+0xee>
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d155      	bne.n	80075a0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2202      	movs	r2, #2
 80074f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2200      	movs	r2, #0
 8007500:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f022 0201 	bic.w	r2, r2, #1
 8007510:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	68b9      	ldr	r1, [r7, #8]
 8007518:	68f8      	ldr	r0, [r7, #12]
 800751a:	f000 f8fb 	bl	8007714 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007522:	2b00      	cmp	r3, #0
 8007524:	d008      	beq.n	8007538 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f042 020e 	orr.w	r2, r2, #14
 8007534:	601a      	str	r2, [r3, #0]
 8007536:	e00f      	b.n	8007558 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f022 0204 	bic.w	r2, r2, #4
 8007546:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f042 020a 	orr.w	r2, r2, #10
 8007556:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007562:	2b00      	cmp	r3, #0
 8007564:	d007      	beq.n	8007576 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007570:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007574:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800757a:	2b00      	cmp	r3, #0
 800757c:	d007      	beq.n	800758e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007588:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800758c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f042 0201 	orr.w	r2, r2, #1
 800759c:	601a      	str	r2, [r3, #0]
 800759e:	e005      	b.n	80075ac <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80075a8:	2302      	movs	r3, #2
 80075aa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80075ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3718      	adds	r7, #24
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b084      	sub	sp, #16
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075d2:	f003 031f 	and.w	r3, r3, #31
 80075d6:	2204      	movs	r2, #4
 80075d8:	409a      	lsls	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	4013      	ands	r3, r2
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d026      	beq.n	8007630 <HAL_DMA_IRQHandler+0x7a>
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	f003 0304 	and.w	r3, r3, #4
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d021      	beq.n	8007630 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 0320 	and.w	r3, r3, #32
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d107      	bne.n	800760a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f022 0204 	bic.w	r2, r2, #4
 8007608:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800760e:	f003 021f 	and.w	r2, r3, #31
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007616:	2104      	movs	r1, #4
 8007618:	fa01 f202 	lsl.w	r2, r1, r2
 800761c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007622:	2b00      	cmp	r3, #0
 8007624:	d071      	beq.n	800770a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800762e:	e06c      	b.n	800770a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007634:	f003 031f 	and.w	r3, r3, #31
 8007638:	2202      	movs	r2, #2
 800763a:	409a      	lsls	r2, r3
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	4013      	ands	r3, r2
 8007640:	2b00      	cmp	r3, #0
 8007642:	d02e      	beq.n	80076a2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	f003 0302 	and.w	r3, r3, #2
 800764a:	2b00      	cmp	r3, #0
 800764c:	d029      	beq.n	80076a2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 0320 	and.w	r3, r3, #32
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10b      	bne.n	8007674 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f022 020a 	bic.w	r2, r2, #10
 800766a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007678:	f003 021f 	and.w	r2, r3, #31
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007680:	2102      	movs	r1, #2
 8007682:	fa01 f202 	lsl.w	r2, r1, r2
 8007686:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007694:	2b00      	cmp	r3, #0
 8007696:	d038      	beq.n	800770a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80076a0:	e033      	b.n	800770a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076a6:	f003 031f 	and.w	r3, r3, #31
 80076aa:	2208      	movs	r2, #8
 80076ac:	409a      	lsls	r2, r3
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	4013      	ands	r3, r2
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d02a      	beq.n	800770c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	f003 0308 	and.w	r3, r3, #8
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d025      	beq.n	800770c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f022 020e 	bic.w	r2, r2, #14
 80076ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076d4:	f003 021f 	and.w	r2, r3, #31
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076dc:	2101      	movs	r1, #1
 80076de:	fa01 f202 	lsl.w	r2, r1, r2
 80076e2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d004      	beq.n	800770c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800770a:	bf00      	nop
 800770c:	bf00      	nop
}
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007714:	b480      	push	{r7}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]
 8007720:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800772a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007730:	2b00      	cmp	r3, #0
 8007732:	d004      	beq.n	800773e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800773c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007742:	f003 021f 	and.w	r2, r3, #31
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800774a:	2101      	movs	r1, #1
 800774c:	fa01 f202 	lsl.w	r2, r1, r2
 8007750:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	683a      	ldr	r2, [r7, #0]
 8007758:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	2b10      	cmp	r3, #16
 8007760:	d108      	bne.n	8007774 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007772:	e007      	b.n	8007784 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68ba      	ldr	r2, [r7, #8]
 800777a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	60da      	str	r2, [r3, #12]
}
 8007784:	bf00      	nop
 8007786:	3714      	adds	r7, #20
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007790:	b480      	push	{r7}
 8007792:	b087      	sub	sp, #28
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	461a      	mov	r2, r3
 800779e:	4b16      	ldr	r3, [pc, #88]	@ (80077f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d802      	bhi.n	80077aa <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80077a4:	4b15      	ldr	r3, [pc, #84]	@ (80077fc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80077a6:	617b      	str	r3, [r7, #20]
 80077a8:	e001      	b.n	80077ae <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80077aa:	4b15      	ldr	r3, [pc, #84]	@ (8007800 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80077ac:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	3b08      	subs	r3, #8
 80077ba:	4a12      	ldr	r2, [pc, #72]	@ (8007804 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80077bc:	fba2 2303 	umull	r2, r3, r2, r3
 80077c0:	091b      	lsrs	r3, r3, #4
 80077c2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077c8:	089b      	lsrs	r3, r3, #2
 80077ca:	009a      	lsls	r2, r3, #2
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	4413      	add	r3, r2
 80077d0:	461a      	mov	r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a0b      	ldr	r2, [pc, #44]	@ (8007808 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80077da:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f003 031f 	and.w	r3, r3, #31
 80077e2:	2201      	movs	r2, #1
 80077e4:	409a      	lsls	r2, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80077ea:	bf00      	nop
 80077ec:	371c      	adds	r7, #28
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	40020407 	.word	0x40020407
 80077fc:	40020800 	.word	0x40020800
 8007800:	40020820 	.word	0x40020820
 8007804:	cccccccd 	.word	0xcccccccd
 8007808:	40020880 	.word	0x40020880

0800780c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	b2db      	uxtb	r3, r3
 800781a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	4b0b      	ldr	r3, [pc, #44]	@ (800784c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007820:	4413      	add	r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	461a      	mov	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a08      	ldr	r2, [pc, #32]	@ (8007850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800782e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	3b01      	subs	r3, #1
 8007834:	f003 031f 	and.w	r3, r3, #31
 8007838:	2201      	movs	r2, #1
 800783a:	409a      	lsls	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007840:	bf00      	nop
 8007842:	3714      	adds	r7, #20
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	1000823f 	.word	0x1000823f
 8007850:	40020940 	.word	0x40020940

08007854 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007854:	b480      	push	{r7}
 8007856:	b087      	sub	sp, #28
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800785e:	2300      	movs	r3, #0
 8007860:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007862:	e15a      	b.n	8007b1a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	2101      	movs	r1, #1
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	fa01 f303 	lsl.w	r3, r1, r3
 8007870:	4013      	ands	r3, r2
 8007872:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2b00      	cmp	r3, #0
 8007878:	f000 814c 	beq.w	8007b14 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	f003 0303 	and.w	r3, r3, #3
 8007884:	2b01      	cmp	r3, #1
 8007886:	d005      	beq.n	8007894 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007890:	2b02      	cmp	r3, #2
 8007892:	d130      	bne.n	80078f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	005b      	lsls	r3, r3, #1
 800789e:	2203      	movs	r2, #3
 80078a0:	fa02 f303 	lsl.w	r3, r2, r3
 80078a4:	43db      	mvns	r3, r3
 80078a6:	693a      	ldr	r2, [r7, #16]
 80078a8:	4013      	ands	r3, r2
 80078aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	68da      	ldr	r2, [r3, #12]
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	005b      	lsls	r3, r3, #1
 80078b4:	fa02 f303 	lsl.w	r3, r2, r3
 80078b8:	693a      	ldr	r2, [r7, #16]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	693a      	ldr	r2, [r7, #16]
 80078c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80078ca:	2201      	movs	r2, #1
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	fa02 f303 	lsl.w	r3, r2, r3
 80078d2:	43db      	mvns	r3, r3
 80078d4:	693a      	ldr	r2, [r7, #16]
 80078d6:	4013      	ands	r3, r2
 80078d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	091b      	lsrs	r3, r3, #4
 80078e0:	f003 0201 	and.w	r2, r3, #1
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	fa02 f303 	lsl.w	r3, r2, r3
 80078ea:	693a      	ldr	r2, [r7, #16]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	693a      	ldr	r2, [r7, #16]
 80078f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	f003 0303 	and.w	r3, r3, #3
 80078fe:	2b03      	cmp	r3, #3
 8007900:	d017      	beq.n	8007932 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	005b      	lsls	r3, r3, #1
 800790c:	2203      	movs	r2, #3
 800790e:	fa02 f303 	lsl.w	r3, r2, r3
 8007912:	43db      	mvns	r3, r3
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	4013      	ands	r3, r2
 8007918:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	689a      	ldr	r2, [r3, #8]
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	005b      	lsls	r3, r3, #1
 8007922:	fa02 f303 	lsl.w	r3, r2, r3
 8007926:	693a      	ldr	r2, [r7, #16]
 8007928:	4313      	orrs	r3, r2
 800792a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	693a      	ldr	r2, [r7, #16]
 8007930:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	f003 0303 	and.w	r3, r3, #3
 800793a:	2b02      	cmp	r3, #2
 800793c:	d123      	bne.n	8007986 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	08da      	lsrs	r2, r3, #3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	3208      	adds	r2, #8
 8007946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800794a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	f003 0307 	and.w	r3, r3, #7
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	220f      	movs	r2, #15
 8007956:	fa02 f303 	lsl.w	r3, r2, r3
 800795a:	43db      	mvns	r3, r3
 800795c:	693a      	ldr	r2, [r7, #16]
 800795e:	4013      	ands	r3, r2
 8007960:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	691a      	ldr	r2, [r3, #16]
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	f003 0307 	and.w	r3, r3, #7
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	fa02 f303 	lsl.w	r3, r2, r3
 8007972:	693a      	ldr	r2, [r7, #16]
 8007974:	4313      	orrs	r3, r2
 8007976:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	08da      	lsrs	r2, r3, #3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	3208      	adds	r2, #8
 8007980:	6939      	ldr	r1, [r7, #16]
 8007982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	005b      	lsls	r3, r3, #1
 8007990:	2203      	movs	r2, #3
 8007992:	fa02 f303 	lsl.w	r3, r2, r3
 8007996:	43db      	mvns	r3, r3
 8007998:	693a      	ldr	r2, [r7, #16]
 800799a:	4013      	ands	r3, r2
 800799c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	f003 0203 	and.w	r2, r3, #3
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	005b      	lsls	r3, r3, #1
 80079aa:	fa02 f303 	lsl.w	r3, r2, r3
 80079ae:	693a      	ldr	r2, [r7, #16]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	693a      	ldr	r2, [r7, #16]
 80079b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f000 80a6 	beq.w	8007b14 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079c8:	4b5b      	ldr	r3, [pc, #364]	@ (8007b38 <HAL_GPIO_Init+0x2e4>)
 80079ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079cc:	4a5a      	ldr	r2, [pc, #360]	@ (8007b38 <HAL_GPIO_Init+0x2e4>)
 80079ce:	f043 0301 	orr.w	r3, r3, #1
 80079d2:	6613      	str	r3, [r2, #96]	@ 0x60
 80079d4:	4b58      	ldr	r3, [pc, #352]	@ (8007b38 <HAL_GPIO_Init+0x2e4>)
 80079d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079d8:	f003 0301 	and.w	r3, r3, #1
 80079dc:	60bb      	str	r3, [r7, #8]
 80079de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80079e0:	4a56      	ldr	r2, [pc, #344]	@ (8007b3c <HAL_GPIO_Init+0x2e8>)
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	089b      	lsrs	r3, r3, #2
 80079e6:	3302      	adds	r3, #2
 80079e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	f003 0303 	and.w	r3, r3, #3
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	220f      	movs	r2, #15
 80079f8:	fa02 f303 	lsl.w	r3, r2, r3
 80079fc:	43db      	mvns	r3, r3
 80079fe:	693a      	ldr	r2, [r7, #16]
 8007a00:	4013      	ands	r3, r2
 8007a02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007a0a:	d01f      	beq.n	8007a4c <HAL_GPIO_Init+0x1f8>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a4c      	ldr	r2, [pc, #304]	@ (8007b40 <HAL_GPIO_Init+0x2ec>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d019      	beq.n	8007a48 <HAL_GPIO_Init+0x1f4>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4a4b      	ldr	r2, [pc, #300]	@ (8007b44 <HAL_GPIO_Init+0x2f0>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d013      	beq.n	8007a44 <HAL_GPIO_Init+0x1f0>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a4a      	ldr	r2, [pc, #296]	@ (8007b48 <HAL_GPIO_Init+0x2f4>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d00d      	beq.n	8007a40 <HAL_GPIO_Init+0x1ec>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a49      	ldr	r2, [pc, #292]	@ (8007b4c <HAL_GPIO_Init+0x2f8>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d007      	beq.n	8007a3c <HAL_GPIO_Init+0x1e8>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a48      	ldr	r2, [pc, #288]	@ (8007b50 <HAL_GPIO_Init+0x2fc>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d101      	bne.n	8007a38 <HAL_GPIO_Init+0x1e4>
 8007a34:	2305      	movs	r3, #5
 8007a36:	e00a      	b.n	8007a4e <HAL_GPIO_Init+0x1fa>
 8007a38:	2306      	movs	r3, #6
 8007a3a:	e008      	b.n	8007a4e <HAL_GPIO_Init+0x1fa>
 8007a3c:	2304      	movs	r3, #4
 8007a3e:	e006      	b.n	8007a4e <HAL_GPIO_Init+0x1fa>
 8007a40:	2303      	movs	r3, #3
 8007a42:	e004      	b.n	8007a4e <HAL_GPIO_Init+0x1fa>
 8007a44:	2302      	movs	r3, #2
 8007a46:	e002      	b.n	8007a4e <HAL_GPIO_Init+0x1fa>
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e000      	b.n	8007a4e <HAL_GPIO_Init+0x1fa>
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	f002 0203 	and.w	r2, r2, #3
 8007a54:	0092      	lsls	r2, r2, #2
 8007a56:	4093      	lsls	r3, r2
 8007a58:	693a      	ldr	r2, [r7, #16]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007a5e:	4937      	ldr	r1, [pc, #220]	@ (8007b3c <HAL_GPIO_Init+0x2e8>)
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	089b      	lsrs	r3, r3, #2
 8007a64:	3302      	adds	r3, #2
 8007a66:	693a      	ldr	r2, [r7, #16]
 8007a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007a6c:	4b39      	ldr	r3, [pc, #228]	@ (8007b54 <HAL_GPIO_Init+0x300>)
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	43db      	mvns	r3, r3
 8007a76:	693a      	ldr	r2, [r7, #16]
 8007a78:	4013      	ands	r3, r2
 8007a7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d003      	beq.n	8007a90 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007a88:	693a      	ldr	r2, [r7, #16]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007a90:	4a30      	ldr	r2, [pc, #192]	@ (8007b54 <HAL_GPIO_Init+0x300>)
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007a96:	4b2f      	ldr	r3, [pc, #188]	@ (8007b54 <HAL_GPIO_Init+0x300>)
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	43db      	mvns	r3, r3
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d003      	beq.n	8007aba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007ab2:	693a      	ldr	r2, [r7, #16]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007aba:	4a26      	ldr	r2, [pc, #152]	@ (8007b54 <HAL_GPIO_Init+0x300>)
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007ac0:	4b24      	ldr	r3, [pc, #144]	@ (8007b54 <HAL_GPIO_Init+0x300>)
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	43db      	mvns	r3, r3
 8007aca:	693a      	ldr	r2, [r7, #16]
 8007acc:	4013      	ands	r3, r2
 8007ace:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d003      	beq.n	8007ae4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007adc:	693a      	ldr	r2, [r7, #16]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8007b54 <HAL_GPIO_Init+0x300>)
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007aea:	4b1a      	ldr	r3, [pc, #104]	@ (8007b54 <HAL_GPIO_Init+0x300>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	43db      	mvns	r3, r3
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	4013      	ands	r3, r2
 8007af8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d003      	beq.n	8007b0e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007b06:	693a      	ldr	r2, [r7, #16]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007b0e:	4a11      	ldr	r2, [pc, #68]	@ (8007b54 <HAL_GPIO_Init+0x300>)
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	3301      	adds	r3, #1
 8007b18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	fa22 f303 	lsr.w	r3, r2, r3
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f47f ae9d 	bne.w	8007864 <HAL_GPIO_Init+0x10>
  }
}
 8007b2a:	bf00      	nop
 8007b2c:	bf00      	nop
 8007b2e:	371c      	adds	r7, #28
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr
 8007b38:	40021000 	.word	0x40021000
 8007b3c:	40010000 	.word	0x40010000
 8007b40:	48000400 	.word	0x48000400
 8007b44:	48000800 	.word	0x48000800
 8007b48:	48000c00 	.word	0x48000c00
 8007b4c:	48001000 	.word	0x48001000
 8007b50:	48001400 	.word	0x48001400
 8007b54:	40010400 	.word	0x40010400

08007b58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	460b      	mov	r3, r1
 8007b62:	807b      	strh	r3, [r7, #2]
 8007b64:	4613      	mov	r3, r2
 8007b66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007b68:	787b      	ldrb	r3, [r7, #1]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d003      	beq.n	8007b76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007b6e:	887a      	ldrh	r2, [r7, #2]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007b74:	e002      	b.n	8007b7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007b76:	887a      	ldrh	r2, [r7, #2]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007b7c:	bf00      	nop
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	4603      	mov	r3, r0
 8007b90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007b92:	4b08      	ldr	r3, [pc, #32]	@ (8007bb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007b94:	695a      	ldr	r2, [r3, #20]
 8007b96:	88fb      	ldrh	r3, [r7, #6]
 8007b98:	4013      	ands	r3, r2
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d006      	beq.n	8007bac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007b9e:	4a05      	ldr	r2, [pc, #20]	@ (8007bb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007ba0:	88fb      	ldrh	r3, [r7, #6]
 8007ba2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007ba4:	88fb      	ldrh	r3, [r7, #6]
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f000 f806 	bl	8007bb8 <HAL_GPIO_EXTI_Callback>
  }
}
 8007bac:	bf00      	nop
 8007bae:	3708      	adds	r7, #8
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}
 8007bb4:	40010400 	.word	0x40010400

08007bb8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007bc2:	bf00      	nop
 8007bc4:	370c      	adds	r7, #12
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b082      	sub	sp, #8
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d101      	bne.n	8007be0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e08d      	b.n	8007cfc <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d106      	bne.n	8007bfa <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f7fb fd01 	bl	80035fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2224      	movs	r2, #36	@ 0x24
 8007bfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f022 0201 	bic.w	r2, r2, #1
 8007c10:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	685a      	ldr	r2, [r3, #4]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007c1e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	689a      	ldr	r2, [r3, #8]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007c2e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d107      	bne.n	8007c48 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	689a      	ldr	r2, [r3, #8]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c44:	609a      	str	r2, [r3, #8]
 8007c46:	e006      	b.n	8007c56 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	689a      	ldr	r2, [r3, #8]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007c54:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d108      	bne.n	8007c70 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	685a      	ldr	r2, [r3, #4]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c6c:	605a      	str	r2, [r3, #4]
 8007c6e:	e007      	b.n	8007c80 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007c7e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	6812      	ldr	r2, [r2, #0]
 8007c8a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007c8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c92:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68da      	ldr	r2, [r3, #12]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007ca2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	691a      	ldr	r2, [r3, #16]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	695b      	ldr	r3, [r3, #20]
 8007cac:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	430a      	orrs	r2, r1
 8007cbc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	69d9      	ldr	r1, [r3, #28]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a1a      	ldr	r2, [r3, #32]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	430a      	orrs	r2, r1
 8007ccc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f042 0201 	orr.w	r2, r2, #1
 8007cdc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2220      	movs	r2, #32
 8007ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3708      	adds	r7, #8
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b088      	sub	sp, #32
 8007d08:	af02      	add	r7, sp, #8
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	4608      	mov	r0, r1
 8007d0e:	4611      	mov	r1, r2
 8007d10:	461a      	mov	r2, r3
 8007d12:	4603      	mov	r3, r0
 8007d14:	817b      	strh	r3, [r7, #10]
 8007d16:	460b      	mov	r3, r1
 8007d18:	813b      	strh	r3, [r7, #8]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	2b20      	cmp	r3, #32
 8007d28:	f040 80fd 	bne.w	8007f26 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d2c:	6a3b      	ldr	r3, [r7, #32]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d002      	beq.n	8007d38 <HAL_I2C_Mem_Read+0x34>
 8007d32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d105      	bne.n	8007d44 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d3e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e0f1      	b.n	8007f28 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d101      	bne.n	8007d52 <HAL_I2C_Mem_Read+0x4e>
 8007d4e:	2302      	movs	r3, #2
 8007d50:	e0ea      	b.n	8007f28 <HAL_I2C_Mem_Read+0x224>
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2201      	movs	r2, #1
 8007d56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007d5a:	f7fc fb41 	bl	80043e0 <HAL_GetTick>
 8007d5e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	9300      	str	r3, [sp, #0]
 8007d64:	2319      	movs	r3, #25
 8007d66:	2201      	movs	r2, #1
 8007d68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	f000 f95b 	bl	8008028 <I2C_WaitOnFlagUntilTimeout>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d001      	beq.n	8007d7c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e0d5      	b.n	8007f28 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2222      	movs	r2, #34	@ 0x22
 8007d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2240      	movs	r2, #64	@ 0x40
 8007d88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6a3a      	ldr	r2, [r7, #32]
 8007d96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007d9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2200      	movs	r2, #0
 8007da2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007da4:	88f8      	ldrh	r0, [r7, #6]
 8007da6:	893a      	ldrh	r2, [r7, #8]
 8007da8:	8979      	ldrh	r1, [r7, #10]
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	9301      	str	r3, [sp, #4]
 8007dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007db0:	9300      	str	r3, [sp, #0]
 8007db2:	4603      	mov	r3, r0
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f000 f8bf 	bl	8007f38 <I2C_RequestMemoryRead>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d005      	beq.n	8007dcc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e0ad      	b.n	8007f28 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	2bff      	cmp	r3, #255	@ 0xff
 8007dd4:	d90e      	bls.n	8007df4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	22ff      	movs	r2, #255	@ 0xff
 8007dda:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007de0:	b2da      	uxtb	r2, r3
 8007de2:	8979      	ldrh	r1, [r7, #10]
 8007de4:	4b52      	ldr	r3, [pc, #328]	@ (8007f30 <HAL_I2C_Mem_Read+0x22c>)
 8007de6:	9300      	str	r3, [sp, #0]
 8007de8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f000 fadf 	bl	80083b0 <I2C_TransferConfig>
 8007df2:	e00f      	b.n	8007e14 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e02:	b2da      	uxtb	r2, r3
 8007e04:	8979      	ldrh	r1, [r7, #10]
 8007e06:	4b4a      	ldr	r3, [pc, #296]	@ (8007f30 <HAL_I2C_Mem_Read+0x22c>)
 8007e08:	9300      	str	r3, [sp, #0]
 8007e0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f000 face 	bl	80083b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	9300      	str	r3, [sp, #0]
 8007e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	2104      	movs	r1, #4
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f000 f902 	bl	8008028 <I2C_WaitOnFlagUntilTimeout>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d001      	beq.n	8007e2e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e07c      	b.n	8007f28 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e38:	b2d2      	uxtb	r2, r2
 8007e3a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e40:	1c5a      	adds	r2, r3, #1
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	b29a      	uxth	r2, r3
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d034      	beq.n	8007ed4 <HAL_I2C_Mem_Read+0x1d0>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d130      	bne.n	8007ed4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e78:	2200      	movs	r2, #0
 8007e7a:	2180      	movs	r1, #128	@ 0x80
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f000 f8d3 	bl	8008028 <I2C_WaitOnFlagUntilTimeout>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d001      	beq.n	8007e8c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e04d      	b.n	8007f28 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	2bff      	cmp	r3, #255	@ 0xff
 8007e94:	d90e      	bls.n	8007eb4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	22ff      	movs	r2, #255	@ 0xff
 8007e9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ea0:	b2da      	uxtb	r2, r3
 8007ea2:	8979      	ldrh	r1, [r7, #10]
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	9300      	str	r3, [sp, #0]
 8007ea8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f000 fa7f 	bl	80083b0 <I2C_TransferConfig>
 8007eb2:	e00f      	b.n	8007ed4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007eb8:	b29a      	uxth	r2, r3
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ec2:	b2da      	uxtb	r2, r3
 8007ec4:	8979      	ldrh	r1, [r7, #10]
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f000 fa6e 	bl	80083b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d19a      	bne.n	8007e14 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f000 f940 	bl	8008168 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d001      	beq.n	8007ef2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e01a      	b.n	8007f28 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2220      	movs	r2, #32
 8007ef8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	6859      	ldr	r1, [r3, #4]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	4b0b      	ldr	r3, [pc, #44]	@ (8007f34 <HAL_I2C_Mem_Read+0x230>)
 8007f06:	400b      	ands	r3, r1
 8007f08:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2220      	movs	r2, #32
 8007f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007f22:	2300      	movs	r3, #0
 8007f24:	e000      	b.n	8007f28 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007f26:	2302      	movs	r3, #2
  }
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3718      	adds	r7, #24
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	80002400 	.word	0x80002400
 8007f34:	fe00e800 	.word	0xfe00e800

08007f38 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b086      	sub	sp, #24
 8007f3c:	af02      	add	r7, sp, #8
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	4608      	mov	r0, r1
 8007f42:	4611      	mov	r1, r2
 8007f44:	461a      	mov	r2, r3
 8007f46:	4603      	mov	r3, r0
 8007f48:	817b      	strh	r3, [r7, #10]
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	813b      	strh	r3, [r7, #8]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007f52:	88fb      	ldrh	r3, [r7, #6]
 8007f54:	b2da      	uxtb	r2, r3
 8007f56:	8979      	ldrh	r1, [r7, #10]
 8007f58:	4b20      	ldr	r3, [pc, #128]	@ (8007fdc <I2C_RequestMemoryRead+0xa4>)
 8007f5a:	9300      	str	r3, [sp, #0]
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	f000 fa26 	bl	80083b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f64:	69fa      	ldr	r2, [r7, #28]
 8007f66:	69b9      	ldr	r1, [r7, #24]
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f000 f8b6 	bl	80080da <I2C_WaitOnTXISFlagUntilTimeout>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d001      	beq.n	8007f78 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	e02c      	b.n	8007fd2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007f78:	88fb      	ldrh	r3, [r7, #6]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d105      	bne.n	8007f8a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007f7e:	893b      	ldrh	r3, [r7, #8]
 8007f80:	b2da      	uxtb	r2, r3
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	629a      	str	r2, [r3, #40]	@ 0x28
 8007f88:	e015      	b.n	8007fb6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007f8a:	893b      	ldrh	r3, [r7, #8]
 8007f8c:	0a1b      	lsrs	r3, r3, #8
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	b2da      	uxtb	r2, r3
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f98:	69fa      	ldr	r2, [r7, #28]
 8007f9a:	69b9      	ldr	r1, [r7, #24]
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f000 f89c 	bl	80080da <I2C_WaitOnTXISFlagUntilTimeout>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d001      	beq.n	8007fac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e012      	b.n	8007fd2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007fac:	893b      	ldrh	r3, [r7, #8]
 8007fae:	b2da      	uxtb	r2, r3
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	9300      	str	r3, [sp, #0]
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	2140      	movs	r1, #64	@ 0x40
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f000 f831 	bl	8008028 <I2C_WaitOnFlagUntilTimeout>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d001      	beq.n	8007fd0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e000      	b.n	8007fd2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	80002000 	.word	0x80002000

08007fe0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	699b      	ldr	r3, [r3, #24]
 8007fee:	f003 0302 	and.w	r3, r3, #2
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d103      	bne.n	8007ffe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	699b      	ldr	r3, [r3, #24]
 8008004:	f003 0301 	and.w	r3, r3, #1
 8008008:	2b01      	cmp	r3, #1
 800800a:	d007      	beq.n	800801c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	699a      	ldr	r2, [r3, #24]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f042 0201 	orr.w	r2, r2, #1
 800801a:	619a      	str	r2, [r3, #24]
  }
}
 800801c:	bf00      	nop
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	603b      	str	r3, [r7, #0]
 8008034:	4613      	mov	r3, r2
 8008036:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008038:	e03b      	b.n	80080b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800803a:	69ba      	ldr	r2, [r7, #24]
 800803c:	6839      	ldr	r1, [r7, #0]
 800803e:	68f8      	ldr	r0, [r7, #12]
 8008040:	f000 f8d6 	bl	80081f0 <I2C_IsErrorOccurred>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d001      	beq.n	800804e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e041      	b.n	80080d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008054:	d02d      	beq.n	80080b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008056:	f7fc f9c3 	bl	80043e0 <HAL_GetTick>
 800805a:	4602      	mov	r2, r0
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	1ad3      	subs	r3, r2, r3
 8008060:	683a      	ldr	r2, [r7, #0]
 8008062:	429a      	cmp	r2, r3
 8008064:	d302      	bcc.n	800806c <I2C_WaitOnFlagUntilTimeout+0x44>
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d122      	bne.n	80080b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	699a      	ldr	r2, [r3, #24]
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	4013      	ands	r3, r2
 8008076:	68ba      	ldr	r2, [r7, #8]
 8008078:	429a      	cmp	r2, r3
 800807a:	bf0c      	ite	eq
 800807c:	2301      	moveq	r3, #1
 800807e:	2300      	movne	r3, #0
 8008080:	b2db      	uxtb	r3, r3
 8008082:	461a      	mov	r2, r3
 8008084:	79fb      	ldrb	r3, [r7, #7]
 8008086:	429a      	cmp	r2, r3
 8008088:	d113      	bne.n	80080b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800808e:	f043 0220 	orr.w	r2, r3, #32
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2220      	movs	r2, #32
 800809a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	e00f      	b.n	80080d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	699a      	ldr	r2, [r3, #24]
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	4013      	ands	r3, r2
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	429a      	cmp	r2, r3
 80080c0:	bf0c      	ite	eq
 80080c2:	2301      	moveq	r3, #1
 80080c4:	2300      	movne	r3, #0
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	461a      	mov	r2, r3
 80080ca:	79fb      	ldrb	r3, [r7, #7]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d0b4      	beq.n	800803a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b084      	sub	sp, #16
 80080de:	af00      	add	r7, sp, #0
 80080e0:	60f8      	str	r0, [r7, #12]
 80080e2:	60b9      	str	r1, [r7, #8]
 80080e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80080e6:	e033      	b.n	8008150 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	68b9      	ldr	r1, [r7, #8]
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f000 f87f 	bl	80081f0 <I2C_IsErrorOccurred>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d001      	beq.n	80080fc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	e031      	b.n	8008160 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008102:	d025      	beq.n	8008150 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008104:	f7fc f96c 	bl	80043e0 <HAL_GetTick>
 8008108:	4602      	mov	r2, r0
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	1ad3      	subs	r3, r2, r3
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	429a      	cmp	r2, r3
 8008112:	d302      	bcc.n	800811a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d11a      	bne.n	8008150 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	699b      	ldr	r3, [r3, #24]
 8008120:	f003 0302 	and.w	r3, r3, #2
 8008124:	2b02      	cmp	r3, #2
 8008126:	d013      	beq.n	8008150 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800812c:	f043 0220 	orr.w	r2, r3, #32
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2220      	movs	r2, #32
 8008138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2200      	movs	r2, #0
 8008140:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	e007      	b.n	8008160 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	f003 0302 	and.w	r3, r3, #2
 800815a:	2b02      	cmp	r3, #2
 800815c:	d1c4      	bne.n	80080e8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3710      	adds	r7, #16
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008174:	e02f      	b.n	80081d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	68b9      	ldr	r1, [r7, #8]
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f000 f838 	bl	80081f0 <I2C_IsErrorOccurred>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d001      	beq.n	800818a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	e02d      	b.n	80081e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800818a:	f7fc f929 	bl	80043e0 <HAL_GetTick>
 800818e:	4602      	mov	r2, r0
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	68ba      	ldr	r2, [r7, #8]
 8008196:	429a      	cmp	r2, r3
 8008198:	d302      	bcc.n	80081a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d11a      	bne.n	80081d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	f003 0320 	and.w	r3, r3, #32
 80081aa:	2b20      	cmp	r3, #32
 80081ac:	d013      	beq.n	80081d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081b2:	f043 0220 	orr.w	r2, r3, #32
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2220      	movs	r2, #32
 80081be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	e007      	b.n	80081e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	699b      	ldr	r3, [r3, #24]
 80081dc:	f003 0320 	and.w	r3, r3, #32
 80081e0:	2b20      	cmp	r3, #32
 80081e2:	d1c8      	bne.n	8008176 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
	...

080081f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b08a      	sub	sp, #40	@ 0x28
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081fc:	2300      	movs	r3, #0
 80081fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	699b      	ldr	r3, [r3, #24]
 8008208:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800820a:	2300      	movs	r3, #0
 800820c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008212:	69bb      	ldr	r3, [r7, #24]
 8008214:	f003 0310 	and.w	r3, r3, #16
 8008218:	2b00      	cmp	r3, #0
 800821a:	d068      	beq.n	80082ee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2210      	movs	r2, #16
 8008222:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008224:	e049      	b.n	80082ba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800822c:	d045      	beq.n	80082ba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800822e:	f7fc f8d7 	bl	80043e0 <HAL_GetTick>
 8008232:	4602      	mov	r2, r0
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	68ba      	ldr	r2, [r7, #8]
 800823a:	429a      	cmp	r2, r3
 800823c:	d302      	bcc.n	8008244 <I2C_IsErrorOccurred+0x54>
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d13a      	bne.n	80082ba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800824e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008256:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	699b      	ldr	r3, [r3, #24]
 800825e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008262:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008266:	d121      	bne.n	80082ac <I2C_IsErrorOccurred+0xbc>
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800826e:	d01d      	beq.n	80082ac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008270:	7cfb      	ldrb	r3, [r7, #19]
 8008272:	2b20      	cmp	r3, #32
 8008274:	d01a      	beq.n	80082ac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	685a      	ldr	r2, [r3, #4]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008284:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008286:	f7fc f8ab 	bl	80043e0 <HAL_GetTick>
 800828a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800828c:	e00e      	b.n	80082ac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800828e:	f7fc f8a7 	bl	80043e0 <HAL_GetTick>
 8008292:	4602      	mov	r2, r0
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	1ad3      	subs	r3, r2, r3
 8008298:	2b19      	cmp	r3, #25
 800829a:	d907      	bls.n	80082ac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800829c:	6a3b      	ldr	r3, [r7, #32]
 800829e:	f043 0320 	orr.w	r3, r3, #32
 80082a2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80082aa:	e006      	b.n	80082ba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	699b      	ldr	r3, [r3, #24]
 80082b2:	f003 0320 	and.w	r3, r3, #32
 80082b6:	2b20      	cmp	r3, #32
 80082b8:	d1e9      	bne.n	800828e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	f003 0320 	and.w	r3, r3, #32
 80082c4:	2b20      	cmp	r3, #32
 80082c6:	d003      	beq.n	80082d0 <I2C_IsErrorOccurred+0xe0>
 80082c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d0aa      	beq.n	8008226 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80082d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d103      	bne.n	80082e0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2220      	movs	r2, #32
 80082de:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80082e0:	6a3b      	ldr	r3, [r7, #32]
 80082e2:	f043 0304 	orr.w	r3, r3, #4
 80082e6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	699b      	ldr	r3, [r3, #24]
 80082f4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00b      	beq.n	8008318 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008300:	6a3b      	ldr	r3, [r7, #32]
 8008302:	f043 0301 	orr.w	r3, r3, #1
 8008306:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008310:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00b      	beq.n	800833a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008322:	6a3b      	ldr	r3, [r7, #32]
 8008324:	f043 0308 	orr.w	r3, r3, #8
 8008328:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008332:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008340:	2b00      	cmp	r3, #0
 8008342:	d00b      	beq.n	800835c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008344:	6a3b      	ldr	r3, [r7, #32]
 8008346:	f043 0302 	orr.w	r3, r3, #2
 800834a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008354:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800835c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008360:	2b00      	cmp	r3, #0
 8008362:	d01c      	beq.n	800839e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008364:	68f8      	ldr	r0, [r7, #12]
 8008366:	f7ff fe3b 	bl	8007fe0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	6859      	ldr	r1, [r3, #4]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	4b0d      	ldr	r3, [pc, #52]	@ (80083ac <I2C_IsErrorOccurred+0x1bc>)
 8008376:	400b      	ands	r3, r1
 8008378:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800837e:	6a3b      	ldr	r3, [r7, #32]
 8008380:	431a      	orrs	r2, r3
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2220      	movs	r2, #32
 800838a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2200      	movs	r2, #0
 8008392:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2200      	movs	r2, #0
 800839a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800839e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3728      	adds	r7, #40	@ 0x28
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	fe00e800 	.word	0xfe00e800

080083b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b087      	sub	sp, #28
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	607b      	str	r3, [r7, #4]
 80083ba:	460b      	mov	r3, r1
 80083bc:	817b      	strh	r3, [r7, #10]
 80083be:	4613      	mov	r3, r2
 80083c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80083c2:	897b      	ldrh	r3, [r7, #10]
 80083c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80083c8:	7a7b      	ldrb	r3, [r7, #9]
 80083ca:	041b      	lsls	r3, r3, #16
 80083cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80083d0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80083d6:	6a3b      	ldr	r3, [r7, #32]
 80083d8:	4313      	orrs	r3, r2
 80083da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80083de:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	685a      	ldr	r2, [r3, #4]
 80083e6:	6a3b      	ldr	r3, [r7, #32]
 80083e8:	0d5b      	lsrs	r3, r3, #21
 80083ea:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80083ee:	4b08      	ldr	r3, [pc, #32]	@ (8008410 <I2C_TransferConfig+0x60>)
 80083f0:	430b      	orrs	r3, r1
 80083f2:	43db      	mvns	r3, r3
 80083f4:	ea02 0103 	and.w	r1, r2, r3
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	697a      	ldr	r2, [r7, #20]
 80083fe:	430a      	orrs	r2, r1
 8008400:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008402:	bf00      	nop
 8008404:	371c      	adds	r7, #28
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	03ff63ff 	.word	0x03ff63ff

08008414 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008424:	b2db      	uxtb	r3, r3
 8008426:	2b20      	cmp	r3, #32
 8008428:	d138      	bne.n	800849c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008430:	2b01      	cmp	r3, #1
 8008432:	d101      	bne.n	8008438 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008434:	2302      	movs	r3, #2
 8008436:	e032      	b.n	800849e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2224      	movs	r2, #36	@ 0x24
 8008444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f022 0201 	bic.w	r2, r2, #1
 8008456:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008466:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	6819      	ldr	r1, [r3, #0]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	683a      	ldr	r2, [r7, #0]
 8008474:	430a      	orrs	r2, r1
 8008476:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f042 0201 	orr.w	r2, r2, #1
 8008486:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2220      	movs	r2, #32
 800848c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008498:	2300      	movs	r3, #0
 800849a:	e000      	b.n	800849e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800849c:	2302      	movs	r3, #2
  }
}
 800849e:	4618      	mov	r0, r3
 80084a0:	370c      	adds	r7, #12
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80084aa:	b480      	push	{r7}
 80084ac:	b085      	sub	sp, #20
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
 80084b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	2b20      	cmp	r3, #32
 80084be:	d139      	bne.n	8008534 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d101      	bne.n	80084ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80084ca:	2302      	movs	r3, #2
 80084cc:	e033      	b.n	8008536 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2201      	movs	r2, #1
 80084d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2224      	movs	r2, #36	@ 0x24
 80084da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f022 0201 	bic.w	r2, r2, #1
 80084ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80084fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	021b      	lsls	r3, r3, #8
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	4313      	orrs	r3, r2
 8008506:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f042 0201 	orr.w	r2, r2, #1
 800851e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2220      	movs	r2, #32
 8008524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008530:	2300      	movs	r3, #0
 8008532:	e000      	b.n	8008536 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008534:	2302      	movs	r3, #2
  }
}
 8008536:	4618      	mov	r0, r3
 8008538:	3714      	adds	r7, #20
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr
	...

08008544 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800854c:	2300      	movs	r3, #0
 800854e:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d101      	bne.n	800855a <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	e0bb      	b.n	80086d2 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8008560:	b2db      	uxtb	r3, r3
 8008562:	2b05      	cmp	r3, #5
 8008564:	d101      	bne.n	800856a <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e0b3      	b.n	80086d2 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8008570:	b2db      	uxtb	r3, r3
 8008572:	2b02      	cmp	r3, #2
 8008574:	d101      	bne.n	800857a <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	e0ab      	b.n	80086d2 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800857a:	4b58      	ldr	r3, [pc, #352]	@ (80086dc <HAL_OPAMP_Init+0x198>)
 800857c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800857e:	4a57      	ldr	r2, [pc, #348]	@ (80086dc <HAL_OPAMP_Init+0x198>)
 8008580:	f043 0301 	orr.w	r3, r3, #1
 8008584:	6613      	str	r3, [r2, #96]	@ 0x60
 8008586:	4b55      	ldr	r3, [pc, #340]	@ (80086dc <HAL_OPAMP_Init+0x198>)
 8008588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800858a:	f003 0301 	and.w	r3, r3, #1
 800858e:	60bb      	str	r3, [r7, #8]
 8008590:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8008598:	b2db      	uxtb	r3, r3
 800859a:	2b00      	cmp	r3, #0
 800859c:	d103      	bne.n	80085a6 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f7fb f8dc 	bl	8003764 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	2b40      	cmp	r3, #64	@ 0x40
 80085b2:	d003      	beq.n	80085bc <HAL_OPAMP_Init+0x78>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	2b60      	cmp	r3, #96	@ 0x60
 80085ba:	d133      	bne.n	8008624 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f023 0110 	bic.w	r1, r3, #16
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	430a      	orrs	r2, r1
 80085d0:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	4b41      	ldr	r3, [pc, #260]	@ (80086e0 <HAL_OPAMP_Init+0x19c>)
 80085da:	4013      	ands	r3, r2
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	6851      	ldr	r1, [r2, #4]
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	6892      	ldr	r2, [r2, #8]
 80085e4:	4311      	orrs	r1, r2
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	6912      	ldr	r2, [r2, #16]
 80085ea:	430a      	orrs	r2, r1
 80085ec:	6879      	ldr	r1, [r7, #4]
 80085ee:	7d09      	ldrb	r1, [r1, #20]
 80085f0:	2901      	cmp	r1, #1
 80085f2:	d102      	bne.n	80085fa <HAL_OPAMP_Init+0xb6>
 80085f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80085f8:	e000      	b.n	80085fc <HAL_OPAMP_Init+0xb8>
 80085fa:	2100      	movs	r1, #0
 80085fc:	4311      	orrs	r1, r2
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008602:	4311      	orrs	r1, r2
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008608:	4311      	orrs	r1, r2
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800860e:	04d2      	lsls	r2, r2, #19
 8008610:	4311      	orrs	r1, r2
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008616:	0612      	lsls	r2, r2, #24
 8008618:	4311      	orrs	r1, r2
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	6812      	ldr	r2, [r2, #0]
 800861e:	430b      	orrs	r3, r1
 8008620:	6013      	str	r3, [r2, #0]
 8008622:	e035      	b.n	8008690 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f023 0110 	bic.w	r1, r3, #16
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	430a      	orrs	r2, r1
 8008638:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	4b27      	ldr	r3, [pc, #156]	@ (80086e0 <HAL_OPAMP_Init+0x19c>)
 8008642:	4013      	ands	r3, r2
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	6851      	ldr	r1, [r2, #4]
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	6892      	ldr	r2, [r2, #8]
 800864c:	4311      	orrs	r1, r2
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	68d2      	ldr	r2, [r2, #12]
 8008652:	4311      	orrs	r1, r2
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	6912      	ldr	r2, [r2, #16]
 8008658:	430a      	orrs	r2, r1
 800865a:	6879      	ldr	r1, [r7, #4]
 800865c:	7d09      	ldrb	r1, [r1, #20]
 800865e:	2901      	cmp	r1, #1
 8008660:	d102      	bne.n	8008668 <HAL_OPAMP_Init+0x124>
 8008662:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008666:	e000      	b.n	800866a <HAL_OPAMP_Init+0x126>
 8008668:	2100      	movs	r1, #0
 800866a:	4311      	orrs	r1, r2
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008670:	4311      	orrs	r1, r2
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008676:	4311      	orrs	r1, r2
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800867c:	04d2      	lsls	r2, r2, #19
 800867e:	4311      	orrs	r1, r2
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008684:	0612      	lsls	r2, r2, #24
 8008686:	4311      	orrs	r1, r2
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	6812      	ldr	r2, [r2, #0]
 800868c:	430b      	orrs	r3, r1
 800868e:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	699b      	ldr	r3, [r3, #24]
 8008696:	2b00      	cmp	r3, #0
 8008698:	db10      	blt.n	80086bc <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	699b      	ldr	r3, [r3, #24]
 80086a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	699a      	ldr	r2, [r3, #24]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	69db      	ldr	r3, [r3, #28]
 80086ac:	431a      	orrs	r2, r3
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a1b      	ldr	r3, [r3, #32]
 80086b2:	431a      	orrs	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	430a      	orrs	r2, r1
 80086ba:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d103      	bne.n	80086d0 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3710      	adds	r7, #16
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	40021000 	.word	0x40021000
 80086e0:	e0003e11 	.word	0xe0003e11

080086e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d101      	bne.n	80086f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	e0c0      	b.n	8008878 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d106      	bne.n	8008710 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f009 fc62 	bl	8011fd4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2203      	movs	r2, #3
 8008714:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4618      	mov	r0, r3
 800871e:	f005 ffe6 	bl	800e6ee <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008722:	2300      	movs	r3, #0
 8008724:	73fb      	strb	r3, [r7, #15]
 8008726:	e03e      	b.n	80087a6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008728:	7bfa      	ldrb	r2, [r7, #15]
 800872a:	6879      	ldr	r1, [r7, #4]
 800872c:	4613      	mov	r3, r2
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	4413      	add	r3, r2
 8008732:	00db      	lsls	r3, r3, #3
 8008734:	440b      	add	r3, r1
 8008736:	3311      	adds	r3, #17
 8008738:	2201      	movs	r2, #1
 800873a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800873c:	7bfa      	ldrb	r2, [r7, #15]
 800873e:	6879      	ldr	r1, [r7, #4]
 8008740:	4613      	mov	r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	4413      	add	r3, r2
 8008746:	00db      	lsls	r3, r3, #3
 8008748:	440b      	add	r3, r1
 800874a:	3310      	adds	r3, #16
 800874c:	7bfa      	ldrb	r2, [r7, #15]
 800874e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008750:	7bfa      	ldrb	r2, [r7, #15]
 8008752:	6879      	ldr	r1, [r7, #4]
 8008754:	4613      	mov	r3, r2
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	4413      	add	r3, r2
 800875a:	00db      	lsls	r3, r3, #3
 800875c:	440b      	add	r3, r1
 800875e:	3313      	adds	r3, #19
 8008760:	2200      	movs	r2, #0
 8008762:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008764:	7bfa      	ldrb	r2, [r7, #15]
 8008766:	6879      	ldr	r1, [r7, #4]
 8008768:	4613      	mov	r3, r2
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	4413      	add	r3, r2
 800876e:	00db      	lsls	r3, r3, #3
 8008770:	440b      	add	r3, r1
 8008772:	3320      	adds	r3, #32
 8008774:	2200      	movs	r2, #0
 8008776:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008778:	7bfa      	ldrb	r2, [r7, #15]
 800877a:	6879      	ldr	r1, [r7, #4]
 800877c:	4613      	mov	r3, r2
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	4413      	add	r3, r2
 8008782:	00db      	lsls	r3, r3, #3
 8008784:	440b      	add	r3, r1
 8008786:	3324      	adds	r3, #36	@ 0x24
 8008788:	2200      	movs	r2, #0
 800878a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800878c:	7bfb      	ldrb	r3, [r7, #15]
 800878e:	6879      	ldr	r1, [r7, #4]
 8008790:	1c5a      	adds	r2, r3, #1
 8008792:	4613      	mov	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	4413      	add	r3, r2
 8008798:	00db      	lsls	r3, r3, #3
 800879a:	440b      	add	r3, r1
 800879c:	2200      	movs	r2, #0
 800879e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80087a0:	7bfb      	ldrb	r3, [r7, #15]
 80087a2:	3301      	adds	r3, #1
 80087a4:	73fb      	strb	r3, [r7, #15]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	791b      	ldrb	r3, [r3, #4]
 80087aa:	7bfa      	ldrb	r2, [r7, #15]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d3bb      	bcc.n	8008728 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80087b0:	2300      	movs	r3, #0
 80087b2:	73fb      	strb	r3, [r7, #15]
 80087b4:	e044      	b.n	8008840 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80087b6:	7bfa      	ldrb	r2, [r7, #15]
 80087b8:	6879      	ldr	r1, [r7, #4]
 80087ba:	4613      	mov	r3, r2
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	4413      	add	r3, r2
 80087c0:	00db      	lsls	r3, r3, #3
 80087c2:	440b      	add	r3, r1
 80087c4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80087c8:	2200      	movs	r2, #0
 80087ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80087cc:	7bfa      	ldrb	r2, [r7, #15]
 80087ce:	6879      	ldr	r1, [r7, #4]
 80087d0:	4613      	mov	r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	4413      	add	r3, r2
 80087d6:	00db      	lsls	r3, r3, #3
 80087d8:	440b      	add	r3, r1
 80087da:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80087de:	7bfa      	ldrb	r2, [r7, #15]
 80087e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80087e2:	7bfa      	ldrb	r2, [r7, #15]
 80087e4:	6879      	ldr	r1, [r7, #4]
 80087e6:	4613      	mov	r3, r2
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	4413      	add	r3, r2
 80087ec:	00db      	lsls	r3, r3, #3
 80087ee:	440b      	add	r3, r1
 80087f0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80087f4:	2200      	movs	r2, #0
 80087f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80087f8:	7bfa      	ldrb	r2, [r7, #15]
 80087fa:	6879      	ldr	r1, [r7, #4]
 80087fc:	4613      	mov	r3, r2
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	4413      	add	r3, r2
 8008802:	00db      	lsls	r3, r3, #3
 8008804:	440b      	add	r3, r1
 8008806:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800880a:	2200      	movs	r2, #0
 800880c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800880e:	7bfa      	ldrb	r2, [r7, #15]
 8008810:	6879      	ldr	r1, [r7, #4]
 8008812:	4613      	mov	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4413      	add	r3, r2
 8008818:	00db      	lsls	r3, r3, #3
 800881a:	440b      	add	r3, r1
 800881c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008820:	2200      	movs	r2, #0
 8008822:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008824:	7bfa      	ldrb	r2, [r7, #15]
 8008826:	6879      	ldr	r1, [r7, #4]
 8008828:	4613      	mov	r3, r2
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	4413      	add	r3, r2
 800882e:	00db      	lsls	r3, r3, #3
 8008830:	440b      	add	r3, r1
 8008832:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8008836:	2200      	movs	r2, #0
 8008838:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800883a:	7bfb      	ldrb	r3, [r7, #15]
 800883c:	3301      	adds	r3, #1
 800883e:	73fb      	strb	r3, [r7, #15]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	791b      	ldrb	r3, [r3, #4]
 8008844:	7bfa      	ldrb	r2, [r7, #15]
 8008846:	429a      	cmp	r2, r3
 8008848:	d3b5      	bcc.n	80087b6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6818      	ldr	r0, [r3, #0]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	3304      	adds	r3, #4
 8008852:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008856:	f005 ff65 	bl	800e724 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	7a9b      	ldrb	r3, [r3, #10]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d102      	bne.n	8008876 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f001 fc0e 	bl	800a092 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3710      	adds	r7, #16
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800888e:	2b01      	cmp	r3, #1
 8008890:	d101      	bne.n	8008896 <HAL_PCD_Start+0x16>
 8008892:	2302      	movs	r3, #2
 8008894:	e012      	b.n	80088bc <HAL_PCD_Start+0x3c>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2201      	movs	r2, #1
 800889a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4618      	mov	r0, r3
 80088a4:	f005 ff0c 	bl	800e6c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f007 fce9 	bl	8010284 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3708      	adds	r7, #8
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4618      	mov	r0, r3
 80088d2:	f007 fcee 	bl	80102b2 <USB_ReadInterrupts>
 80088d6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d003      	beq.n	80088ea <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 fb06 	bl	8008ef4 <PCD_EP_ISR_Handler>

    return;
 80088e8:	e110      	b.n	8008b0c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d013      	beq.n	800891c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80088fc:	b29a      	uxth	r2, r3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008906:	b292      	uxth	r2, r2
 8008908:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f009 fbf2 	bl	80120f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8008912:	2100      	movs	r1, #0
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 f8fc 	bl	8008b12 <HAL_PCD_SetAddress>

    return;
 800891a:	e0f7      	b.n	8008b0c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008922:	2b00      	cmp	r3, #0
 8008924:	d00c      	beq.n	8008940 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800892e:	b29a      	uxth	r2, r3
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008938:	b292      	uxth	r2, r2
 800893a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800893e:	e0e5      	b.n	8008b0c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00c      	beq.n	8008964 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008952:	b29a      	uxth	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800895c:	b292      	uxth	r2, r2
 800895e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8008962:	e0d3      	b.n	8008b0c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800896a:	2b00      	cmp	r3, #0
 800896c:	d034      	beq.n	80089d8 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008976:	b29a      	uxth	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f022 0204 	bic.w	r2, r2, #4
 8008980:	b292      	uxth	r2, r2
 8008982:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800898e:	b29a      	uxth	r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f022 0208 	bic.w	r2, r2, #8
 8008998:	b292      	uxth	r2, r2
 800899a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d107      	bne.n	80089b8 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80089b0:	2100      	movs	r1, #0
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f009 fd92 	bl	80124dc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f009 fbd5 	bl	8012168 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80089c6:	b29a      	uxth	r2, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80089d0:	b292      	uxth	r2, r2
 80089d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80089d6:	e099      	b.n	8008b0c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d027      	beq.n	8008a32 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f042 0208 	orr.w	r2, r2, #8
 80089f4:	b292      	uxth	r2, r2
 80089f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008a02:	b29a      	uxth	r2, r3
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008a0c:	b292      	uxth	r2, r2
 8008a0e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008a1a:	b29a      	uxth	r2, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f042 0204 	orr.w	r2, r2, #4
 8008a24:	b292      	uxth	r2, r2
 8008a26:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f009 fb82 	bl	8012134 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8008a30:	e06c      	b.n	8008b0c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d040      	beq.n	8008abe <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008a4e:	b292      	uxth	r2, r2
 8008a50:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d12b      	bne.n	8008ab6 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008a66:	b29a      	uxth	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f042 0204 	orr.w	r2, r2, #4
 8008a70:	b292      	uxth	r2, r2
 8008a72:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008a7e:	b29a      	uxth	r2, r3
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f042 0208 	orr.w	r2, r2, #8
 8008a88:	b292      	uxth	r2, r2
 8008a8a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2201      	movs	r2, #1
 8008a92:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	089b      	lsrs	r3, r3, #2
 8008aa2:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008aac:	2101      	movs	r1, #1
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f009 fd14 	bl	80124dc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8008ab4:	e02a      	b.n	8008b0c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f009 fb3c 	bl	8012134 <HAL_PCD_SuspendCallback>
    return;
 8008abc:	e026      	b.n	8008b0c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d00f      	beq.n	8008ae8 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008ad0:	b29a      	uxth	r2, r3
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008ada:	b292      	uxth	r2, r2
 8008adc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f009 fafa 	bl	80120da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8008ae6:	e011      	b.n	8008b0c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00c      	beq.n	8008b0c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008b04:	b292      	uxth	r2, r2
 8008b06:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8008b0a:	bf00      	nop
  }
}
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b082      	sub	sp, #8
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d101      	bne.n	8008b2c <HAL_PCD_SetAddress+0x1a>
 8008b28:	2302      	movs	r3, #2
 8008b2a:	e012      	b.n	8008b52 <HAL_PCD_SetAddress+0x40>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	78fa      	ldrb	r2, [r7, #3]
 8008b38:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	78fa      	ldrb	r2, [r7, #3]
 8008b40:	4611      	mov	r1, r2
 8008b42:	4618      	mov	r0, r3
 8008b44:	f007 fb8a 	bl	801025c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3708      	adds	r7, #8
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b084      	sub	sp, #16
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
 8008b62:	4608      	mov	r0, r1
 8008b64:	4611      	mov	r1, r2
 8008b66:	461a      	mov	r2, r3
 8008b68:	4603      	mov	r3, r0
 8008b6a:	70fb      	strb	r3, [r7, #3]
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	803b      	strh	r3, [r7, #0]
 8008b70:	4613      	mov	r3, r2
 8008b72:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8008b74:	2300      	movs	r3, #0
 8008b76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008b78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	da0e      	bge.n	8008b9e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b80:	78fb      	ldrb	r3, [r7, #3]
 8008b82:	f003 0207 	and.w	r2, r3, #7
 8008b86:	4613      	mov	r3, r2
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	4413      	add	r3, r2
 8008b8c:	00db      	lsls	r3, r3, #3
 8008b8e:	3310      	adds	r3, #16
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	4413      	add	r3, r2
 8008b94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2201      	movs	r2, #1
 8008b9a:	705a      	strb	r2, [r3, #1]
 8008b9c:	e00e      	b.n	8008bbc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b9e:	78fb      	ldrb	r3, [r7, #3]
 8008ba0:	f003 0207 	and.w	r2, r3, #7
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	4413      	add	r3, r2
 8008baa:	00db      	lsls	r3, r3, #3
 8008bac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008bbc:	78fb      	ldrb	r3, [r7, #3]
 8008bbe:	f003 0307 	and.w	r3, r3, #7
 8008bc2:	b2da      	uxtb	r2, r3
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8008bc8:	883b      	ldrh	r3, [r7, #0]
 8008bca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	78ba      	ldrb	r2, [r7, #2]
 8008bd6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008bd8:	78bb      	ldrb	r3, [r7, #2]
 8008bda:	2b02      	cmp	r3, #2
 8008bdc:	d102      	bne.n	8008be4 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2200      	movs	r2, #0
 8008be2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d101      	bne.n	8008bf2 <HAL_PCD_EP_Open+0x98>
 8008bee:	2302      	movs	r3, #2
 8008bf0:	e00e      	b.n	8008c10 <HAL_PCD_EP_Open+0xb6>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	68f9      	ldr	r1, [r7, #12]
 8008c00:	4618      	mov	r0, r3
 8008c02:	f005 fdad 	bl	800e760 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8008c0e:	7afb      	ldrb	r3, [r7, #11]
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	460b      	mov	r3, r1
 8008c22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008c24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	da0e      	bge.n	8008c4a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c2c:	78fb      	ldrb	r3, [r7, #3]
 8008c2e:	f003 0207 	and.w	r2, r3, #7
 8008c32:	4613      	mov	r3, r2
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	4413      	add	r3, r2
 8008c38:	00db      	lsls	r3, r3, #3
 8008c3a:	3310      	adds	r3, #16
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	4413      	add	r3, r2
 8008c40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2201      	movs	r2, #1
 8008c46:	705a      	strb	r2, [r3, #1]
 8008c48:	e00e      	b.n	8008c68 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c4a:	78fb      	ldrb	r3, [r7, #3]
 8008c4c:	f003 0207 	and.w	r2, r3, #7
 8008c50:	4613      	mov	r3, r2
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	4413      	add	r3, r2
 8008c56:	00db      	lsls	r3, r3, #3
 8008c58:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	4413      	add	r3, r2
 8008c60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2200      	movs	r2, #0
 8008c66:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c68:	78fb      	ldrb	r3, [r7, #3]
 8008c6a:	f003 0307 	and.w	r3, r3, #7
 8008c6e:	b2da      	uxtb	r2, r3
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d101      	bne.n	8008c82 <HAL_PCD_EP_Close+0x6a>
 8008c7e:	2302      	movs	r3, #2
 8008c80:	e00e      	b.n	8008ca0 <HAL_PCD_EP_Close+0x88>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2201      	movs	r2, #1
 8008c86:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	68f9      	ldr	r1, [r7, #12]
 8008c90:	4618      	mov	r0, r3
 8008c92:	f006 fa4d 	bl	800f130 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3710      	adds	r7, #16
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b086      	sub	sp, #24
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	607a      	str	r2, [r7, #4]
 8008cb2:	603b      	str	r3, [r7, #0]
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008cb8:	7afb      	ldrb	r3, [r7, #11]
 8008cba:	f003 0207 	and.w	r2, r3, #7
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	4413      	add	r3, r2
 8008cc4:	00db      	lsls	r3, r3, #3
 8008cc6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	4413      	add	r3, r2
 8008cce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	683a      	ldr	r2, [r7, #0]
 8008cda:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008ce8:	7afb      	ldrb	r3, [r7, #11]
 8008cea:	f003 0307 	and.w	r3, r3, #7
 8008cee:	b2da      	uxtb	r2, r3
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	6979      	ldr	r1, [r7, #20]
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f006 fc05 	bl	800f50a <USB_EPStartXfer>

  return HAL_OK;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3718      	adds	r7, #24
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}

08008d0a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8008d0a:	b480      	push	{r7}
 8008d0c:	b083      	sub	sp, #12
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
 8008d12:	460b      	mov	r3, r1
 8008d14:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008d16:	78fb      	ldrb	r3, [r7, #3]
 8008d18:	f003 0207 	and.w	r2, r3, #7
 8008d1c:	6879      	ldr	r1, [r7, #4]
 8008d1e:	4613      	mov	r3, r2
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	4413      	add	r3, r2
 8008d24:	00db      	lsls	r3, r3, #3
 8008d26:	440b      	add	r3, r1
 8008d28:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8008d2c:	681b      	ldr	r3, [r3, #0]
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	370c      	adds	r7, #12
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr

08008d3a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b086      	sub	sp, #24
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	60f8      	str	r0, [r7, #12]
 8008d42:	607a      	str	r2, [r7, #4]
 8008d44:	603b      	str	r3, [r7, #0]
 8008d46:	460b      	mov	r3, r1
 8008d48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d4a:	7afb      	ldrb	r3, [r7, #11]
 8008d4c:	f003 0207 	and.w	r2, r3, #7
 8008d50:	4613      	mov	r3, r2
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	4413      	add	r3, r2
 8008d56:	00db      	lsls	r3, r3, #3
 8008d58:	3310      	adds	r3, #16
 8008d5a:	68fa      	ldr	r2, [r7, #12]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	683a      	ldr	r2, [r7, #0]
 8008d6a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	683a      	ldr	r2, [r7, #0]
 8008d78:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	2201      	movs	r2, #1
 8008d84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008d86:	7afb      	ldrb	r3, [r7, #11]
 8008d88:	f003 0307 	and.w	r3, r3, #7
 8008d8c:	b2da      	uxtb	r2, r3
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	6979      	ldr	r1, [r7, #20]
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f006 fbb6 	bl	800f50a <USB_EPStartXfer>

  return HAL_OK;
 8008d9e:	2300      	movs	r3, #0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3718      	adds	r7, #24
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	460b      	mov	r3, r1
 8008db2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008db4:	78fb      	ldrb	r3, [r7, #3]
 8008db6:	f003 0307 	and.w	r3, r3, #7
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	7912      	ldrb	r2, [r2, #4]
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d901      	bls.n	8008dc6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e03e      	b.n	8008e44 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008dc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	da0e      	bge.n	8008dec <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008dce:	78fb      	ldrb	r3, [r7, #3]
 8008dd0:	f003 0207 	and.w	r2, r3, #7
 8008dd4:	4613      	mov	r3, r2
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	4413      	add	r3, r2
 8008dda:	00db      	lsls	r3, r3, #3
 8008ddc:	3310      	adds	r3, #16
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	4413      	add	r3, r2
 8008de2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2201      	movs	r2, #1
 8008de8:	705a      	strb	r2, [r3, #1]
 8008dea:	e00c      	b.n	8008e06 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008dec:	78fa      	ldrb	r2, [r7, #3]
 8008dee:	4613      	mov	r3, r2
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	4413      	add	r3, r2
 8008df4:	00db      	lsls	r3, r3, #3
 8008df6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2200      	movs	r2, #0
 8008e04:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008e0c:	78fb      	ldrb	r3, [r7, #3]
 8008e0e:	f003 0307 	and.w	r3, r3, #7
 8008e12:	b2da      	uxtb	r2, r3
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d101      	bne.n	8008e26 <HAL_PCD_EP_SetStall+0x7e>
 8008e22:	2302      	movs	r3, #2
 8008e24:	e00e      	b.n	8008e44 <HAL_PCD_EP_SetStall+0x9c>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2201      	movs	r2, #1
 8008e2a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	68f9      	ldr	r1, [r7, #12]
 8008e34:	4618      	mov	r0, r3
 8008e36:	f007 f917 	bl	8010068 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3710      	adds	r7, #16
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	460b      	mov	r3, r1
 8008e56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008e58:	78fb      	ldrb	r3, [r7, #3]
 8008e5a:	f003 030f 	and.w	r3, r3, #15
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	7912      	ldrb	r2, [r2, #4]
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d901      	bls.n	8008e6a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	e040      	b.n	8008eec <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008e6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	da0e      	bge.n	8008e90 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e72:	78fb      	ldrb	r3, [r7, #3]
 8008e74:	f003 0207 	and.w	r2, r3, #7
 8008e78:	4613      	mov	r3, r2
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	4413      	add	r3, r2
 8008e7e:	00db      	lsls	r3, r3, #3
 8008e80:	3310      	adds	r3, #16
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	4413      	add	r3, r2
 8008e86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	705a      	strb	r2, [r3, #1]
 8008e8e:	e00e      	b.n	8008eae <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008e90:	78fb      	ldrb	r3, [r7, #3]
 8008e92:	f003 0207 	and.w	r2, r3, #7
 8008e96:	4613      	mov	r3, r2
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	4413      	add	r3, r2
 8008e9c:	00db      	lsls	r3, r3, #3
 8008e9e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008eb4:	78fb      	ldrb	r3, [r7, #3]
 8008eb6:	f003 0307 	and.w	r3, r3, #7
 8008eba:	b2da      	uxtb	r2, r3
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d101      	bne.n	8008ece <HAL_PCD_EP_ClrStall+0x82>
 8008eca:	2302      	movs	r3, #2
 8008ecc:	e00e      	b.n	8008eec <HAL_PCD_EP_ClrStall+0xa0>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	68f9      	ldr	r1, [r7, #12]
 8008edc:	4618      	mov	r0, r3
 8008ede:	f007 f914 	bl	801010a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3710      	adds	r7, #16
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b092      	sub	sp, #72	@ 0x48
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008efc:	e333      	b.n	8009566 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008f06:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8008f08:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	f003 030f 	and.w	r3, r3, #15
 8008f10:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8008f14:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f040 8108 	bne.w	800912e <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8008f1e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008f20:	f003 0310 	and.w	r3, r3, #16
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d14c      	bne.n	8008fc2 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	881b      	ldrh	r3, [r3, #0]
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8008f34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f38:	813b      	strh	r3, [r7, #8]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	893b      	ldrh	r3, [r7, #8]
 8008f40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	3310      	adds	r3, #16
 8008f50:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	00db      	lsls	r3, r3, #3
 8008f64:	4413      	add	r3, r2
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	6812      	ldr	r2, [r2, #0]
 8008f6a:	4413      	add	r3, r2
 8008f6c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008f70:	881b      	ldrh	r3, [r3, #0]
 8008f72:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008f76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f78:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8008f7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f7c:	695a      	ldr	r2, [r3, #20]
 8008f7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f80:	69db      	ldr	r3, [r3, #28]
 8008f82:	441a      	add	r2, r3
 8008f84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f86:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8008f88:	2100      	movs	r1, #0
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f009 f88b 	bl	80120a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	7b1b      	ldrb	r3, [r3, #12]
 8008f94:	b2db      	uxtb	r3, r3
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	f000 82e5 	beq.w	8009566 <PCD_EP_ISR_Handler+0x672>
 8008f9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f9e:	699b      	ldr	r3, [r3, #24]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	f040 82e0 	bne.w	8009566 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	7b1b      	ldrb	r3, [r3, #12]
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008fb0:	b2da      	uxtb	r2, r3
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	731a      	strb	r2, [r3, #12]
 8008fc0:	e2d1      	b.n	8009566 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008fc8:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	881b      	ldrh	r3, [r3, #0]
 8008fd0:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8008fd2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008fd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d032      	beq.n	8009042 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	00db      	lsls	r3, r3, #3
 8008fee:	4413      	add	r3, r2
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	6812      	ldr	r2, [r2, #0]
 8008ff4:	4413      	add	r3, r2
 8008ff6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008ffa:	881b      	ldrh	r3, [r3, #0]
 8008ffc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009000:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009002:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6818      	ldr	r0, [r3, #0]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800900e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009010:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8009012:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009014:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009016:	b29b      	uxth	r3, r3
 8009018:	f007 f99d 	bl	8010356 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	881b      	ldrh	r3, [r3, #0]
 8009022:	b29a      	uxth	r2, r3
 8009024:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8009028:	4013      	ands	r3, r2
 800902a:	817b      	strh	r3, [r7, #10]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	897a      	ldrh	r2, [r7, #10]
 8009032:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009036:	b292      	uxth	r2, r2
 8009038:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f009 f806 	bl	801204c <HAL_PCD_SetupStageCallback>
 8009040:	e291      	b.n	8009566 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009042:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8009046:	2b00      	cmp	r3, #0
 8009048:	f280 828d 	bge.w	8009566 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	881b      	ldrh	r3, [r3, #0]
 8009052:	b29a      	uxth	r2, r3
 8009054:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8009058:	4013      	ands	r3, r2
 800905a:	81fb      	strh	r3, [r7, #14]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	89fa      	ldrh	r2, [r7, #14]
 8009062:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009066:	b292      	uxth	r2, r2
 8009068:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009072:	b29b      	uxth	r3, r3
 8009074:	461a      	mov	r2, r3
 8009076:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	00db      	lsls	r3, r3, #3
 800907c:	4413      	add	r3, r2
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	6812      	ldr	r2, [r2, #0]
 8009082:	4413      	add	r3, r2
 8009084:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009088:	881b      	ldrh	r3, [r3, #0]
 800908a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800908e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009090:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8009092:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009094:	69db      	ldr	r3, [r3, #28]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d019      	beq.n	80090ce <PCD_EP_ISR_Handler+0x1da>
 800909a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800909c:	695b      	ldr	r3, [r3, #20]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d015      	beq.n	80090ce <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6818      	ldr	r0, [r3, #0]
 80090a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090a8:	6959      	ldr	r1, [r3, #20]
 80090aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090ac:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80090ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090b0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	f007 f94f 	bl	8010356 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80090b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090ba:	695a      	ldr	r2, [r3, #20]
 80090bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090be:	69db      	ldr	r3, [r3, #28]
 80090c0:	441a      	add	r2, r3
 80090c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090c4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80090c6:	2100      	movs	r1, #0
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f008 ffd1 	bl	8012070 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	881b      	ldrh	r3, [r3, #0]
 80090d4:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80090d6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80090d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80090dc:	2b00      	cmp	r3, #0
 80090de:	f040 8242 	bne.w	8009566 <PCD_EP_ISR_Handler+0x672>
 80090e2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80090e4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80090e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80090ec:	f000 823b 	beq.w	8009566 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	881b      	ldrh	r3, [r3, #0]
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80090fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009100:	81bb      	strh	r3, [r7, #12]
 8009102:	89bb      	ldrh	r3, [r7, #12]
 8009104:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009108:	81bb      	strh	r3, [r7, #12]
 800910a:	89bb      	ldrh	r3, [r7, #12]
 800910c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009110:	81bb      	strh	r3, [r7, #12]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	89bb      	ldrh	r3, [r7, #12]
 8009118:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800911c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009120:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009124:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009128:	b29b      	uxth	r3, r3
 800912a:	8013      	strh	r3, [r2, #0]
 800912c:	e21b      	b.n	8009566 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	461a      	mov	r2, r3
 8009134:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	4413      	add	r3, r2
 800913c:	881b      	ldrh	r3, [r3, #0]
 800913e:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009140:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8009144:	2b00      	cmp	r3, #0
 8009146:	f280 80f1 	bge.w	800932c <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	461a      	mov	r2, r3
 8009150:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	4413      	add	r3, r2
 8009158:	881b      	ldrh	r3, [r3, #0]
 800915a:	b29a      	uxth	r2, r3
 800915c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8009160:	4013      	ands	r3, r2
 8009162:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	461a      	mov	r2, r3
 800916a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	4413      	add	r3, r2
 8009172:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8009174:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009178:	b292      	uxth	r2, r2
 800917a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800917c:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8009180:	4613      	mov	r3, r2
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	4413      	add	r3, r2
 8009186:	00db      	lsls	r3, r3, #3
 8009188:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	4413      	add	r3, r2
 8009190:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8009192:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009194:	7b1b      	ldrb	r3, [r3, #12]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d123      	bne.n	80091e2 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	461a      	mov	r2, r3
 80091a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	00db      	lsls	r3, r3, #3
 80091ac:	4413      	add	r3, r2
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	6812      	ldr	r2, [r2, #0]
 80091b2:	4413      	add	r3, r2
 80091b4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80091b8:	881b      	ldrh	r3, [r3, #0]
 80091ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80091be:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80091c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	f000 808b 	beq.w	80092e2 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6818      	ldr	r0, [r3, #0]
 80091d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091d2:	6959      	ldr	r1, [r3, #20]
 80091d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091d6:	88da      	ldrh	r2, [r3, #6]
 80091d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80091dc:	f007 f8bb 	bl	8010356 <USB_ReadPMA>
 80091e0:	e07f      	b.n	80092e2 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80091e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091e4:	78db      	ldrb	r3, [r3, #3]
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d109      	bne.n	80091fe <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80091ea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80091ec:	461a      	mov	r2, r3
 80091ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 f9c6 	bl	8009582 <HAL_PCD_EP_DB_Receive>
 80091f6:	4603      	mov	r3, r0
 80091f8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80091fc:	e071      	b.n	80092e2 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	461a      	mov	r2, r3
 8009204:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	4413      	add	r3, r2
 800920c:	881b      	ldrh	r3, [r3, #0]
 800920e:	b29b      	uxth	r3, r3
 8009210:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009214:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009218:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	461a      	mov	r2, r3
 8009220:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	441a      	add	r2, r3
 8009228:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800922a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800922e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009232:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009236:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800923a:	b29b      	uxth	r3, r3
 800923c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	461a      	mov	r2, r3
 8009244:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	4413      	add	r3, r2
 800924c:	881b      	ldrh	r3, [r3, #0]
 800924e:	b29b      	uxth	r3, r3
 8009250:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009254:	2b00      	cmp	r3, #0
 8009256:	d022      	beq.n	800929e <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009260:	b29b      	uxth	r3, r3
 8009262:	461a      	mov	r2, r3
 8009264:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	00db      	lsls	r3, r3, #3
 800926a:	4413      	add	r3, r2
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	6812      	ldr	r2, [r2, #0]
 8009270:	4413      	add	r3, r2
 8009272:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009276:	881b      	ldrh	r3, [r3, #0]
 8009278:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800927c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8009280:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009284:	2b00      	cmp	r3, #0
 8009286:	d02c      	beq.n	80092e2 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6818      	ldr	r0, [r3, #0]
 800928c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800928e:	6959      	ldr	r1, [r3, #20]
 8009290:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009292:	891a      	ldrh	r2, [r3, #8]
 8009294:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009298:	f007 f85d 	bl	8010356 <USB_ReadPMA>
 800929c:	e021      	b.n	80092e2 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	461a      	mov	r2, r3
 80092aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	00db      	lsls	r3, r3, #3
 80092b0:	4413      	add	r3, r2
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	6812      	ldr	r2, [r2, #0]
 80092b6:	4413      	add	r3, r2
 80092b8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80092bc:	881b      	ldrh	r3, [r3, #0]
 80092be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80092c2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80092c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d009      	beq.n	80092e2 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6818      	ldr	r0, [r3, #0]
 80092d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092d4:	6959      	ldr	r1, [r3, #20]
 80092d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092d8:	895a      	ldrh	r2, [r3, #10]
 80092da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80092de:	f007 f83a 	bl	8010356 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80092e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092e4:	69da      	ldr	r2, [r3, #28]
 80092e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80092ea:	441a      	add	r2, r3
 80092ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092ee:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80092f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092f2:	695a      	ldr	r2, [r3, #20]
 80092f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80092f8:	441a      	add	r2, r3
 80092fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092fc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80092fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009300:	699b      	ldr	r3, [r3, #24]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d005      	beq.n	8009312 <PCD_EP_ISR_Handler+0x41e>
 8009306:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800930a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800930c:	691b      	ldr	r3, [r3, #16]
 800930e:	429a      	cmp	r2, r3
 8009310:	d206      	bcs.n	8009320 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8009312:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	4619      	mov	r1, r3
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f008 fea9 	bl	8012070 <HAL_PCD_DataOutStageCallback>
 800931e:	e005      	b.n	800932c <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009326:	4618      	mov	r0, r3
 8009328:	f006 f8ef 	bl	800f50a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800932c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800932e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009332:	2b00      	cmp	r3, #0
 8009334:	f000 8117 	beq.w	8009566 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8009338:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800933c:	4613      	mov	r3, r2
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	4413      	add	r3, r2
 8009342:	00db      	lsls	r3, r3, #3
 8009344:	3310      	adds	r3, #16
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	4413      	add	r3, r2
 800934a:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	461a      	mov	r2, r3
 8009352:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	4413      	add	r3, r2
 800935a:	881b      	ldrh	r3, [r3, #0]
 800935c:	b29b      	uxth	r3, r3
 800935e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8009362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009366:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	461a      	mov	r2, r3
 800936e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	441a      	add	r2, r3
 8009376:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009378:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800937c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009380:	b29b      	uxth	r3, r3
 8009382:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8009384:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009386:	78db      	ldrb	r3, [r3, #3]
 8009388:	2b01      	cmp	r3, #1
 800938a:	f040 80a1 	bne.w	80094d0 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800938e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009390:	2200      	movs	r2, #0
 8009392:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8009394:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009396:	7b1b      	ldrb	r3, [r3, #12]
 8009398:	2b00      	cmp	r3, #0
 800939a:	f000 8092 	beq.w	80094c2 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800939e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80093a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d046      	beq.n	8009436 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80093a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093aa:	785b      	ldrb	r3, [r3, #1]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d126      	bne.n	80093fe <PCD_EP_ISR_Handler+0x50a>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	617b      	str	r3, [r7, #20]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80093be:	b29b      	uxth	r3, r3
 80093c0:	461a      	mov	r2, r3
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	4413      	add	r3, r2
 80093c6:	617b      	str	r3, [r7, #20]
 80093c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	00da      	lsls	r2, r3, #3
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	4413      	add	r3, r2
 80093d2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80093d6:	613b      	str	r3, [r7, #16]
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	881b      	ldrh	r3, [r3, #0]
 80093dc:	b29b      	uxth	r3, r3
 80093de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80093e2:	b29a      	uxth	r2, r3
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	801a      	strh	r2, [r3, #0]
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	881b      	ldrh	r3, [r3, #0]
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093f6:	b29a      	uxth	r2, r3
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	801a      	strh	r2, [r3, #0]
 80093fc:	e061      	b.n	80094c2 <PCD_EP_ISR_Handler+0x5ce>
 80093fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009400:	785b      	ldrb	r3, [r3, #1]
 8009402:	2b01      	cmp	r3, #1
 8009404:	d15d      	bne.n	80094c2 <PCD_EP_ISR_Handler+0x5ce>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	61fb      	str	r3, [r7, #28]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009414:	b29b      	uxth	r3, r3
 8009416:	461a      	mov	r2, r3
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	4413      	add	r3, r2
 800941c:	61fb      	str	r3, [r7, #28]
 800941e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	00da      	lsls	r2, r3, #3
 8009424:	69fb      	ldr	r3, [r7, #28]
 8009426:	4413      	add	r3, r2
 8009428:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800942c:	61bb      	str	r3, [r7, #24]
 800942e:	69bb      	ldr	r3, [r7, #24]
 8009430:	2200      	movs	r2, #0
 8009432:	801a      	strh	r2, [r3, #0]
 8009434:	e045      	b.n	80094c2 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800943c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800943e:	785b      	ldrb	r3, [r3, #1]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d126      	bne.n	8009492 <PCD_EP_ISR_Handler+0x59e>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	627b      	str	r3, [r7, #36]	@ 0x24
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009452:	b29b      	uxth	r3, r3
 8009454:	461a      	mov	r2, r3
 8009456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009458:	4413      	add	r3, r2
 800945a:	627b      	str	r3, [r7, #36]	@ 0x24
 800945c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	00da      	lsls	r2, r3, #3
 8009462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009464:	4413      	add	r3, r2
 8009466:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800946a:	623b      	str	r3, [r7, #32]
 800946c:	6a3b      	ldr	r3, [r7, #32]
 800946e:	881b      	ldrh	r3, [r3, #0]
 8009470:	b29b      	uxth	r3, r3
 8009472:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009476:	b29a      	uxth	r2, r3
 8009478:	6a3b      	ldr	r3, [r7, #32]
 800947a:	801a      	strh	r2, [r3, #0]
 800947c:	6a3b      	ldr	r3, [r7, #32]
 800947e:	881b      	ldrh	r3, [r3, #0]
 8009480:	b29b      	uxth	r3, r3
 8009482:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009486:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800948a:	b29a      	uxth	r2, r3
 800948c:	6a3b      	ldr	r3, [r7, #32]
 800948e:	801a      	strh	r2, [r3, #0]
 8009490:	e017      	b.n	80094c2 <PCD_EP_ISR_Handler+0x5ce>
 8009492:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009494:	785b      	ldrb	r3, [r3, #1]
 8009496:	2b01      	cmp	r3, #1
 8009498:	d113      	bne.n	80094c2 <PCD_EP_ISR_Handler+0x5ce>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	461a      	mov	r2, r3
 80094a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094a8:	4413      	add	r3, r2
 80094aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	00da      	lsls	r2, r3, #3
 80094b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094b4:	4413      	add	r3, r2
 80094b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80094ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80094bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094be:	2200      	movs	r2, #0
 80094c0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80094c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	4619      	mov	r1, r3
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f008 fdec 	bl	80120a6 <HAL_PCD_DataInStageCallback>
 80094ce:	e04a      	b.n	8009566 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80094d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80094d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d13f      	bne.n	800955a <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	461a      	mov	r2, r3
 80094e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	00db      	lsls	r3, r3, #3
 80094ec:	4413      	add	r3, r2
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	6812      	ldr	r2, [r2, #0]
 80094f2:	4413      	add	r3, r2
 80094f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80094f8:	881b      	ldrh	r3, [r3, #0]
 80094fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80094fe:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8009500:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009502:	699a      	ldr	r2, [r3, #24]
 8009504:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009506:	429a      	cmp	r2, r3
 8009508:	d906      	bls.n	8009518 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800950a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800950c:	699a      	ldr	r2, [r3, #24]
 800950e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009510:	1ad2      	subs	r2, r2, r3
 8009512:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009514:	619a      	str	r2, [r3, #24]
 8009516:	e002      	b.n	800951e <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8009518:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800951a:	2200      	movs	r2, #0
 800951c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800951e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009520:	699b      	ldr	r3, [r3, #24]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d106      	bne.n	8009534 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009526:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	4619      	mov	r1, r3
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f008 fdba 	bl	80120a6 <HAL_PCD_DataInStageCallback>
 8009532:	e018      	b.n	8009566 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8009534:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009536:	695a      	ldr	r2, [r3, #20]
 8009538:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800953a:	441a      	add	r2, r3
 800953c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800953e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8009540:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009542:	69da      	ldr	r2, [r3, #28]
 8009544:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009546:	441a      	add	r2, r3
 8009548:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800954a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009552:	4618      	mov	r0, r3
 8009554:	f005 ffd9 	bl	800f50a <USB_EPStartXfer>
 8009558:	e005      	b.n	8009566 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800955a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800955c:	461a      	mov	r2, r3
 800955e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 f917 	bl	8009794 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800956e:	b29b      	uxth	r3, r3
 8009570:	b21b      	sxth	r3, r3
 8009572:	2b00      	cmp	r3, #0
 8009574:	f6ff acc3 	blt.w	8008efe <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8009578:	2300      	movs	r3, #0
}
 800957a:	4618      	mov	r0, r3
 800957c:	3748      	adds	r7, #72	@ 0x48
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}

08009582 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009582:	b580      	push	{r7, lr}
 8009584:	b088      	sub	sp, #32
 8009586:	af00      	add	r7, sp, #0
 8009588:	60f8      	str	r0, [r7, #12]
 800958a:	60b9      	str	r1, [r7, #8]
 800958c:	4613      	mov	r3, r2
 800958e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009590:	88fb      	ldrh	r3, [r7, #6]
 8009592:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009596:	2b00      	cmp	r3, #0
 8009598:	d07c      	beq.n	8009694 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	461a      	mov	r2, r3
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	00db      	lsls	r3, r3, #3
 80095ac:	4413      	add	r3, r2
 80095ae:	68fa      	ldr	r2, [r7, #12]
 80095b0:	6812      	ldr	r2, [r2, #0]
 80095b2:	4413      	add	r3, r2
 80095b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80095b8:	881b      	ldrh	r3, [r3, #0]
 80095ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80095be:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	699a      	ldr	r2, [r3, #24]
 80095c4:	8b7b      	ldrh	r3, [r7, #26]
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d306      	bcc.n	80095d8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	699a      	ldr	r2, [r3, #24]
 80095ce:	8b7b      	ldrh	r3, [r7, #26]
 80095d0:	1ad2      	subs	r2, r2, r3
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	619a      	str	r2, [r3, #24]
 80095d6:	e002      	b.n	80095de <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	2200      	movs	r2, #0
 80095dc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	699b      	ldr	r3, [r3, #24]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d123      	bne.n	800962e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	461a      	mov	r2, r3
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	4413      	add	r3, r2
 80095f4:	881b      	ldrh	r3, [r3, #0]
 80095f6:	b29b      	uxth	r3, r3
 80095f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80095fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009600:	833b      	strh	r3, [r7, #24]
 8009602:	8b3b      	ldrh	r3, [r7, #24]
 8009604:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009608:	833b      	strh	r3, [r7, #24]
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	461a      	mov	r2, r3
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	441a      	add	r2, r3
 8009618:	8b3b      	ldrh	r3, [r7, #24]
 800961a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800961e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009622:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009626:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800962a:	b29b      	uxth	r3, r3
 800962c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800962e:	88fb      	ldrh	r3, [r7, #6]
 8009630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009634:	2b00      	cmp	r3, #0
 8009636:	d01f      	beq.n	8009678 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	461a      	mov	r2, r3
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	4413      	add	r3, r2
 8009646:	881b      	ldrh	r3, [r3, #0]
 8009648:	b29b      	uxth	r3, r3
 800964a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800964e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009652:	82fb      	strh	r3, [r7, #22]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	461a      	mov	r2, r3
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	441a      	add	r2, r3
 8009662:	8afb      	ldrh	r3, [r7, #22]
 8009664:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009668:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800966c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009670:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009674:	b29b      	uxth	r3, r3
 8009676:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009678:	8b7b      	ldrh	r3, [r7, #26]
 800967a:	2b00      	cmp	r3, #0
 800967c:	f000 8085 	beq.w	800978a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6818      	ldr	r0, [r3, #0]
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	6959      	ldr	r1, [r3, #20]
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	891a      	ldrh	r2, [r3, #8]
 800968c:	8b7b      	ldrh	r3, [r7, #26]
 800968e:	f006 fe62 	bl	8010356 <USB_ReadPMA>
 8009692:	e07a      	b.n	800978a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800969c:	b29b      	uxth	r3, r3
 800969e:	461a      	mov	r2, r3
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	00db      	lsls	r3, r3, #3
 80096a6:	4413      	add	r3, r2
 80096a8:	68fa      	ldr	r2, [r7, #12]
 80096aa:	6812      	ldr	r2, [r2, #0]
 80096ac:	4413      	add	r3, r2
 80096ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80096b2:	881b      	ldrh	r3, [r3, #0]
 80096b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096b8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	699a      	ldr	r2, [r3, #24]
 80096be:	8b7b      	ldrh	r3, [r7, #26]
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d306      	bcc.n	80096d2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	699a      	ldr	r2, [r3, #24]
 80096c8:	8b7b      	ldrh	r3, [r7, #26]
 80096ca:	1ad2      	subs	r2, r2, r3
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	619a      	str	r2, [r3, #24]
 80096d0:	e002      	b.n	80096d8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	2200      	movs	r2, #0
 80096d6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	699b      	ldr	r3, [r3, #24]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d123      	bne.n	8009728 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	461a      	mov	r2, r3
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	4413      	add	r3, r2
 80096ee:	881b      	ldrh	r3, [r3, #0]
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80096f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096fa:	83fb      	strh	r3, [r7, #30]
 80096fc:	8bfb      	ldrh	r3, [r7, #30]
 80096fe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009702:	83fb      	strh	r3, [r7, #30]
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	461a      	mov	r2, r3
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	009b      	lsls	r3, r3, #2
 8009710:	441a      	add	r2, r3
 8009712:	8bfb      	ldrh	r3, [r7, #30]
 8009714:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009718:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800971c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009720:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009724:	b29b      	uxth	r3, r3
 8009726:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8009728:	88fb      	ldrh	r3, [r7, #6]
 800972a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800972e:	2b00      	cmp	r3, #0
 8009730:	d11f      	bne.n	8009772 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	461a      	mov	r2, r3
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	009b      	lsls	r3, r3, #2
 800973e:	4413      	add	r3, r2
 8009740:	881b      	ldrh	r3, [r3, #0]
 8009742:	b29b      	uxth	r3, r3
 8009744:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009748:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800974c:	83bb      	strh	r3, [r7, #28]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	461a      	mov	r2, r3
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	441a      	add	r2, r3
 800975c:	8bbb      	ldrh	r3, [r7, #28]
 800975e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009762:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009766:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800976a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800976e:	b29b      	uxth	r3, r3
 8009770:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009772:	8b7b      	ldrh	r3, [r7, #26]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d008      	beq.n	800978a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6818      	ldr	r0, [r3, #0]
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	6959      	ldr	r1, [r3, #20]
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	895a      	ldrh	r2, [r3, #10]
 8009784:	8b7b      	ldrh	r3, [r7, #26]
 8009786:	f006 fde6 	bl	8010356 <USB_ReadPMA>
    }
  }

  return count;
 800978a:	8b7b      	ldrh	r3, [r7, #26]
}
 800978c:	4618      	mov	r0, r3
 800978e:	3720      	adds	r7, #32
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b0a6      	sub	sp, #152	@ 0x98
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	4613      	mov	r3, r2
 80097a0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80097a2:	88fb      	ldrh	r3, [r7, #6]
 80097a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	f000 81f7 	beq.w	8009b9c <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	461a      	mov	r2, r3
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	00db      	lsls	r3, r3, #3
 80097c0:	4413      	add	r3, r2
 80097c2:	68fa      	ldr	r2, [r7, #12]
 80097c4:	6812      	ldr	r2, [r2, #0]
 80097c6:	4413      	add	r3, r2
 80097c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80097cc:	881b      	ldrh	r3, [r3, #0]
 80097ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80097d2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	699a      	ldr	r2, [r3, #24]
 80097da:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80097de:	429a      	cmp	r2, r3
 80097e0:	d907      	bls.n	80097f2 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	699a      	ldr	r2, [r3, #24]
 80097e6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80097ea:	1ad2      	subs	r2, r2, r3
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	619a      	str	r2, [r3, #24]
 80097f0:	e002      	b.n	80097f8 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	2200      	movs	r2, #0
 80097f6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	699b      	ldr	r3, [r3, #24]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f040 80e1 	bne.w	80099c4 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	785b      	ldrb	r3, [r3, #1]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d126      	bne.n	8009858 <HAL_PCD_EP_DB_Transmit+0xc4>
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009818:	b29b      	uxth	r3, r3
 800981a:	461a      	mov	r2, r3
 800981c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800981e:	4413      	add	r3, r2
 8009820:	633b      	str	r3, [r7, #48]	@ 0x30
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	00da      	lsls	r2, r3, #3
 8009828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800982a:	4413      	add	r3, r2
 800982c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009830:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009834:	881b      	ldrh	r3, [r3, #0]
 8009836:	b29b      	uxth	r3, r3
 8009838:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800983c:	b29a      	uxth	r2, r3
 800983e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009840:	801a      	strh	r2, [r3, #0]
 8009842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009844:	881b      	ldrh	r3, [r3, #0]
 8009846:	b29b      	uxth	r3, r3
 8009848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800984c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009850:	b29a      	uxth	r2, r3
 8009852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009854:	801a      	strh	r2, [r3, #0]
 8009856:	e01a      	b.n	800988e <HAL_PCD_EP_DB_Transmit+0xfa>
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	785b      	ldrb	r3, [r3, #1]
 800985c:	2b01      	cmp	r3, #1
 800985e:	d116      	bne.n	800988e <HAL_PCD_EP_DB_Transmit+0xfa>
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800986e:	b29b      	uxth	r3, r3
 8009870:	461a      	mov	r2, r3
 8009872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009874:	4413      	add	r3, r2
 8009876:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	00da      	lsls	r2, r3, #3
 800987e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009880:	4413      	add	r3, r2
 8009882:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009886:	637b      	str	r3, [r7, #52]	@ 0x34
 8009888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800988a:	2200      	movs	r2, #0
 800988c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	785b      	ldrb	r3, [r3, #1]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d126      	bne.n	80098ea <HAL_PCD_EP_DB_Transmit+0x156>
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	623b      	str	r3, [r7, #32]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	461a      	mov	r2, r3
 80098ae:	6a3b      	ldr	r3, [r7, #32]
 80098b0:	4413      	add	r3, r2
 80098b2:	623b      	str	r3, [r7, #32]
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	00da      	lsls	r2, r3, #3
 80098ba:	6a3b      	ldr	r3, [r7, #32]
 80098bc:	4413      	add	r3, r2
 80098be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80098c2:	61fb      	str	r3, [r7, #28]
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	881b      	ldrh	r3, [r3, #0]
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098ce:	b29a      	uxth	r2, r3
 80098d0:	69fb      	ldr	r3, [r7, #28]
 80098d2:	801a      	strh	r2, [r3, #0]
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	881b      	ldrh	r3, [r3, #0]
 80098d8:	b29b      	uxth	r3, r3
 80098da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098e2:	b29a      	uxth	r2, r3
 80098e4:	69fb      	ldr	r3, [r7, #28]
 80098e6:	801a      	strh	r2, [r3, #0]
 80098e8:	e017      	b.n	800991a <HAL_PCD_EP_DB_Transmit+0x186>
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	785b      	ldrb	r3, [r3, #1]
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d113      	bne.n	800991a <HAL_PCD_EP_DB_Transmit+0x186>
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	461a      	mov	r2, r3
 80098fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009900:	4413      	add	r3, r2
 8009902:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	00da      	lsls	r2, r3, #3
 800990a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800990c:	4413      	add	r3, r2
 800990e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009912:	627b      	str	r3, [r7, #36]	@ 0x24
 8009914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009916:	2200      	movs	r2, #0
 8009918:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	78db      	ldrb	r3, [r3, #3]
 800991e:	2b02      	cmp	r3, #2
 8009920:	d123      	bne.n	800996a <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	461a      	mov	r2, r3
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	4413      	add	r3, r2
 8009930:	881b      	ldrh	r3, [r3, #0]
 8009932:	b29b      	uxth	r3, r3
 8009934:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009938:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800993c:	837b      	strh	r3, [r7, #26]
 800993e:	8b7b      	ldrh	r3, [r7, #26]
 8009940:	f083 0320 	eor.w	r3, r3, #32
 8009944:	837b      	strh	r3, [r7, #26]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	461a      	mov	r2, r3
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	441a      	add	r2, r3
 8009954:	8b7b      	ldrh	r3, [r7, #26]
 8009956:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800995a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800995e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009962:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009966:	b29b      	uxth	r3, r3
 8009968:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	4619      	mov	r1, r3
 8009970:	68f8      	ldr	r0, [r7, #12]
 8009972:	f008 fb98 	bl	80120a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009976:	88fb      	ldrh	r3, [r7, #6]
 8009978:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800997c:	2b00      	cmp	r3, #0
 800997e:	d01f      	beq.n	80099c0 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	461a      	mov	r2, r3
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	4413      	add	r3, r2
 800998e:	881b      	ldrh	r3, [r3, #0]
 8009990:	b29b      	uxth	r3, r3
 8009992:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800999a:	833b      	strh	r3, [r7, #24]
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	461a      	mov	r2, r3
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	441a      	add	r2, r3
 80099aa:	8b3b      	ldrh	r3, [r7, #24]
 80099ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80099b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80099b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80099b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099bc:	b29b      	uxth	r3, r3
 80099be:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80099c0:	2300      	movs	r3, #0
 80099c2:	e31f      	b.n	800a004 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80099c4:	88fb      	ldrh	r3, [r7, #6]
 80099c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d021      	beq.n	8009a12 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	461a      	mov	r2, r3
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	4413      	add	r3, r2
 80099dc:	881b      	ldrh	r3, [r3, #0]
 80099de:	b29b      	uxth	r3, r3
 80099e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80099e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099e8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	461a      	mov	r2, r3
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	441a      	add	r2, r3
 80099fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80099fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a06:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009a0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	f040 82ca 	bne.w	8009fb2 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	695a      	ldr	r2, [r3, #20]
 8009a22:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009a26:	441a      	add	r2, r3
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	69da      	ldr	r2, [r3, #28]
 8009a30:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009a34:	441a      	add	r2, r3
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	6a1a      	ldr	r2, [r3, #32]
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	691b      	ldr	r3, [r3, #16]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d309      	bcc.n	8009a5a <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	691b      	ldr	r3, [r3, #16]
 8009a4a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	6a1a      	ldr	r2, [r3, #32]
 8009a50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009a52:	1ad2      	subs	r2, r2, r3
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	621a      	str	r2, [r3, #32]
 8009a58:	e015      	b.n	8009a86 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	6a1b      	ldr	r3, [r3, #32]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d107      	bne.n	8009a72 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8009a62:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009a66:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8009a70:	e009      	b.n	8009a86 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	2200      	movs	r2, #0
 8009a76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	6a1b      	ldr	r3, [r3, #32]
 8009a7e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	2200      	movs	r2, #0
 8009a84:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	785b      	ldrb	r3, [r3, #1]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d15f      	bne.n	8009b4e <HAL_PCD_EP_DB_Transmit+0x3ba>
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009aa2:	4413      	add	r3, r2
 8009aa4:	643b      	str	r3, [r7, #64]	@ 0x40
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	00da      	lsls	r2, r3, #3
 8009aac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009aae:	4413      	add	r3, r2
 8009ab0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ab8:	881b      	ldrh	r3, [r3, #0]
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ac0:	b29a      	uxth	r2, r3
 8009ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ac4:	801a      	strh	r2, [r3, #0]
 8009ac6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d10a      	bne.n	8009ae2 <HAL_PCD_EP_DB_Transmit+0x34e>
 8009acc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ace:	881b      	ldrh	r3, [r3, #0]
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ad6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ada:	b29a      	uxth	r2, r3
 8009adc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ade:	801a      	strh	r2, [r3, #0]
 8009ae0:	e051      	b.n	8009b86 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8009ae2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ae4:	2b3e      	cmp	r3, #62	@ 0x3e
 8009ae6:	d816      	bhi.n	8009b16 <HAL_PCD_EP_DB_Transmit+0x382>
 8009ae8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009aea:	085b      	lsrs	r3, r3, #1
 8009aec:	653b      	str	r3, [r7, #80]	@ 0x50
 8009aee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009af0:	f003 0301 	and.w	r3, r3, #1
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d002      	beq.n	8009afe <HAL_PCD_EP_DB_Transmit+0x36a>
 8009af8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009afa:	3301      	adds	r3, #1
 8009afc:	653b      	str	r3, [r7, #80]	@ 0x50
 8009afe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b00:	881b      	ldrh	r3, [r3, #0]
 8009b02:	b29a      	uxth	r2, r3
 8009b04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	029b      	lsls	r3, r3, #10
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	4313      	orrs	r3, r2
 8009b0e:	b29a      	uxth	r2, r3
 8009b10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b12:	801a      	strh	r2, [r3, #0]
 8009b14:	e037      	b.n	8009b86 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8009b16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009b18:	095b      	lsrs	r3, r3, #5
 8009b1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009b1e:	f003 031f 	and.w	r3, r3, #31
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d102      	bne.n	8009b2c <HAL_PCD_EP_DB_Transmit+0x398>
 8009b26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b28:	3b01      	subs	r3, #1
 8009b2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b2e:	881b      	ldrh	r3, [r3, #0]
 8009b30:	b29a      	uxth	r2, r3
 8009b32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	029b      	lsls	r3, r3, #10
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b46:	b29a      	uxth	r2, r3
 8009b48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b4a:	801a      	strh	r2, [r3, #0]
 8009b4c:	e01b      	b.n	8009b86 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	785b      	ldrb	r3, [r3, #1]
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d117      	bne.n	8009b86 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	461a      	mov	r2, r3
 8009b68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b6a:	4413      	add	r3, r2
 8009b6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	00da      	lsls	r2, r3, #3
 8009b74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b76:	4413      	add	r3, r2
 8009b78:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009b7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009b80:	b29a      	uxth	r2, r3
 8009b82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b84:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	6818      	ldr	r0, [r3, #0]
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	6959      	ldr	r1, [r3, #20]
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	891a      	ldrh	r2, [r3, #8]
 8009b92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	f006 fb9c 	bl	80102d2 <USB_WritePMA>
 8009b9a:	e20a      	b.n	8009fb2 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	00db      	lsls	r3, r3, #3
 8009bae:	4413      	add	r3, r2
 8009bb0:	68fa      	ldr	r2, [r7, #12]
 8009bb2:	6812      	ldr	r2, [r2, #0]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009bba:	881b      	ldrh	r3, [r3, #0]
 8009bbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009bc0:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	699a      	ldr	r2, [r3, #24]
 8009bc8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d307      	bcc.n	8009be0 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	699a      	ldr	r2, [r3, #24]
 8009bd4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009bd8:	1ad2      	subs	r2, r2, r3
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	619a      	str	r2, [r3, #24]
 8009bde:	e002      	b.n	8009be6 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	2200      	movs	r2, #0
 8009be4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	699b      	ldr	r3, [r3, #24]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	f040 80f6 	bne.w	8009ddc <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	785b      	ldrb	r3, [r3, #1]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d126      	bne.n	8009c46 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	677b      	str	r3, [r7, #116]	@ 0x74
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	461a      	mov	r2, r3
 8009c0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009c0c:	4413      	add	r3, r2
 8009c0e:	677b      	str	r3, [r7, #116]	@ 0x74
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	00da      	lsls	r2, r3, #3
 8009c16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009c18:	4413      	add	r3, r2
 8009c1a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009c1e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009c20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c22:	881b      	ldrh	r3, [r3, #0]
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c2a:	b29a      	uxth	r2, r3
 8009c2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c2e:	801a      	strh	r2, [r3, #0]
 8009c30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c32:	881b      	ldrh	r3, [r3, #0]
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c3e:	b29a      	uxth	r2, r3
 8009c40:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c42:	801a      	strh	r2, [r3, #0]
 8009c44:	e01a      	b.n	8009c7c <HAL_PCD_EP_DB_Transmit+0x4e8>
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	785b      	ldrb	r3, [r3, #1]
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d116      	bne.n	8009c7c <HAL_PCD_EP_DB_Transmit+0x4e8>
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	461a      	mov	r2, r3
 8009c60:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009c62:	4413      	add	r3, r2
 8009c64:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	00da      	lsls	r2, r3, #3
 8009c6c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009c6e:	4413      	add	r3, r2
 8009c70:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009c74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009c76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c78:	2200      	movs	r2, #0
 8009c7a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	785b      	ldrb	r3, [r3, #1]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d12f      	bne.n	8009cec <HAL_PCD_EP_DB_Transmit+0x558>
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ca4:	4413      	add	r3, r2
 8009ca6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	00da      	lsls	r2, r3, #3
 8009cb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009cb4:	4413      	add	r3, r2
 8009cb6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009cba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009cbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009cc2:	881b      	ldrh	r3, [r3, #0]
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009cca:	b29a      	uxth	r2, r3
 8009ccc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009cd0:	801a      	strh	r2, [r3, #0]
 8009cd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009cd6:	881b      	ldrh	r3, [r3, #0]
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ce2:	b29a      	uxth	r2, r3
 8009ce4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009ce8:	801a      	strh	r2, [r3, #0]
 8009cea:	e01c      	b.n	8009d26 <HAL_PCD_EP_DB_Transmit+0x592>
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	785b      	ldrb	r3, [r3, #1]
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d118      	bne.n	8009d26 <HAL_PCD_EP_DB_Transmit+0x592>
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	461a      	mov	r2, r3
 8009d00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009d04:	4413      	add	r3, r2
 8009d06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	00da      	lsls	r2, r3, #3
 8009d10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009d14:	4413      	add	r3, r2
 8009d16:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009d1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009d1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009d22:	2200      	movs	r2, #0
 8009d24:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	78db      	ldrb	r3, [r3, #3]
 8009d2a:	2b02      	cmp	r3, #2
 8009d2c:	d127      	bne.n	8009d7e <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	461a      	mov	r2, r3
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	4413      	add	r3, r2
 8009d3c:	881b      	ldrh	r3, [r3, #0]
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d48:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8009d4c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8009d50:	f083 0320 	eor.w	r3, r3, #32
 8009d54:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	009b      	lsls	r3, r3, #2
 8009d64:	441a      	add	r2, r3
 8009d66:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8009d6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	4619      	mov	r1, r3
 8009d84:	68f8      	ldr	r0, [r7, #12]
 8009d86:	f008 f98e 	bl	80120a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009d8a:	88fb      	ldrh	r3, [r7, #6]
 8009d8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d121      	bne.n	8009dd8 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	461a      	mov	r2, r3
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	4413      	add	r3, r2
 8009da2:	881b      	ldrh	r3, [r3, #0]
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dae:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	461a      	mov	r2, r3
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	441a      	add	r2, r3
 8009dc0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009dc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009dc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009dcc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009dd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	e113      	b.n	800a004 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009ddc:	88fb      	ldrh	r3, [r7, #6]
 8009dde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d121      	bne.n	8009e2a <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	461a      	mov	r2, r3
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	4413      	add	r3, r2
 8009df4:	881b      	ldrh	r3, [r3, #0]
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009dfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e00:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	461a      	mov	r2, r3
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	441a      	add	r2, r3
 8009e12:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009e16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009e22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e26:	b29b      	uxth	r3, r3
 8009e28:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	f040 80be 	bne.w	8009fb2 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	695a      	ldr	r2, [r3, #20]
 8009e3a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009e3e:	441a      	add	r2, r3
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	69da      	ldr	r2, [r3, #28]
 8009e48:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009e4c:	441a      	add	r2, r3
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	6a1a      	ldr	r2, [r3, #32]
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	691b      	ldr	r3, [r3, #16]
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d309      	bcc.n	8009e72 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	691b      	ldr	r3, [r3, #16]
 8009e62:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	6a1a      	ldr	r2, [r3, #32]
 8009e68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009e6a:	1ad2      	subs	r2, r2, r3
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	621a      	str	r2, [r3, #32]
 8009e70:	e015      	b.n	8009e9e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	6a1b      	ldr	r3, [r3, #32]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d107      	bne.n	8009e8a <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8009e7a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009e7e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	2200      	movs	r2, #0
 8009e84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8009e88:	e009      	b.n	8009e9e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	6a1b      	ldr	r3, [r3, #32]
 8009e8e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	2200      	movs	r2, #0
 8009e94:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	785b      	ldrb	r3, [r3, #1]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d15f      	bne.n	8009f6c <HAL_PCD_EP_DB_Transmit+0x7d8>
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009ec0:	4413      	add	r3, r2
 8009ec2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	00da      	lsls	r2, r3, #3
 8009eca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009ecc:	4413      	add	r3, r2
 8009ece:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009ed2:	667b      	str	r3, [r7, #100]	@ 0x64
 8009ed4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ed6:	881b      	ldrh	r3, [r3, #0]
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ede:	b29a      	uxth	r2, r3
 8009ee0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ee2:	801a      	strh	r2, [r3, #0]
 8009ee4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d10a      	bne.n	8009f00 <HAL_PCD_EP_DB_Transmit+0x76c>
 8009eea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009eec:	881b      	ldrh	r3, [r3, #0]
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ef4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ef8:	b29a      	uxth	r2, r3
 8009efa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009efc:	801a      	strh	r2, [r3, #0]
 8009efe:	e04e      	b.n	8009f9e <HAL_PCD_EP_DB_Transmit+0x80a>
 8009f00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f02:	2b3e      	cmp	r3, #62	@ 0x3e
 8009f04:	d816      	bhi.n	8009f34 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8009f06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f08:	085b      	lsrs	r3, r3, #1
 8009f0a:	663b      	str	r3, [r7, #96]	@ 0x60
 8009f0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f0e:	f003 0301 	and.w	r3, r3, #1
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d002      	beq.n	8009f1c <HAL_PCD_EP_DB_Transmit+0x788>
 8009f16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009f18:	3301      	adds	r3, #1
 8009f1a:	663b      	str	r3, [r7, #96]	@ 0x60
 8009f1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f1e:	881b      	ldrh	r3, [r3, #0]
 8009f20:	b29a      	uxth	r2, r3
 8009f22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	029b      	lsls	r3, r3, #10
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	b29a      	uxth	r2, r3
 8009f2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f30:	801a      	strh	r2, [r3, #0]
 8009f32:	e034      	b.n	8009f9e <HAL_PCD_EP_DB_Transmit+0x80a>
 8009f34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f36:	095b      	lsrs	r3, r3, #5
 8009f38:	663b      	str	r3, [r7, #96]	@ 0x60
 8009f3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f3c:	f003 031f 	and.w	r3, r3, #31
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d102      	bne.n	8009f4a <HAL_PCD_EP_DB_Transmit+0x7b6>
 8009f44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009f46:	3b01      	subs	r3, #1
 8009f48:	663b      	str	r3, [r7, #96]	@ 0x60
 8009f4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f4c:	881b      	ldrh	r3, [r3, #0]
 8009f4e:	b29a      	uxth	r2, r3
 8009f50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	029b      	lsls	r3, r3, #10
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f64:	b29a      	uxth	r2, r3
 8009f66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f68:	801a      	strh	r2, [r3, #0]
 8009f6a:	e018      	b.n	8009f9e <HAL_PCD_EP_DB_Transmit+0x80a>
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	785b      	ldrb	r3, [r3, #1]
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d114      	bne.n	8009f9e <HAL_PCD_EP_DB_Transmit+0x80a>
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	461a      	mov	r2, r3
 8009f80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f82:	4413      	add	r3, r2
 8009f84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	00da      	lsls	r2, r3, #3
 8009f8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f8e:	4413      	add	r3, r2
 8009f90:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009f94:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009f96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f9c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	6818      	ldr	r0, [r3, #0]
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	6959      	ldr	r1, [r3, #20]
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	895a      	ldrh	r2, [r3, #10]
 8009faa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	f006 f990 	bl	80102d2 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	4413      	add	r3, r2
 8009fc0:	881b      	ldrh	r3, [r3, #0]
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009fc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fcc:	82fb      	strh	r3, [r7, #22]
 8009fce:	8afb      	ldrh	r3, [r7, #22]
 8009fd0:	f083 0310 	eor.w	r3, r3, #16
 8009fd4:	82fb      	strh	r3, [r7, #22]
 8009fd6:	8afb      	ldrh	r3, [r7, #22]
 8009fd8:	f083 0320 	eor.w	r3, r3, #32
 8009fdc:	82fb      	strh	r3, [r7, #22]
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	441a      	add	r2, r3
 8009fec:	8afb      	ldrh	r3, [r7, #22]
 8009fee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ff2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ff6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800a002:	2300      	movs	r3, #0
}
 800a004:	4618      	mov	r0, r3
 800a006:	3798      	adds	r7, #152	@ 0x98
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b087      	sub	sp, #28
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	607b      	str	r3, [r7, #4]
 800a016:	460b      	mov	r3, r1
 800a018:	817b      	strh	r3, [r7, #10]
 800a01a:	4613      	mov	r3, r2
 800a01c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800a01e:	897b      	ldrh	r3, [r7, #10]
 800a020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a024:	b29b      	uxth	r3, r3
 800a026:	2b00      	cmp	r3, #0
 800a028:	d00b      	beq.n	800a042 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a02a:	897b      	ldrh	r3, [r7, #10]
 800a02c:	f003 0207 	and.w	r2, r3, #7
 800a030:	4613      	mov	r3, r2
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	4413      	add	r3, r2
 800a036:	00db      	lsls	r3, r3, #3
 800a038:	3310      	adds	r3, #16
 800a03a:	68fa      	ldr	r2, [r7, #12]
 800a03c:	4413      	add	r3, r2
 800a03e:	617b      	str	r3, [r7, #20]
 800a040:	e009      	b.n	800a056 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a042:	897a      	ldrh	r2, [r7, #10]
 800a044:	4613      	mov	r3, r2
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	4413      	add	r3, r2
 800a04a:	00db      	lsls	r3, r3, #3
 800a04c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a050:	68fa      	ldr	r2, [r7, #12]
 800a052:	4413      	add	r3, r2
 800a054:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800a056:	893b      	ldrh	r3, [r7, #8]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d107      	bne.n	800a06c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	2200      	movs	r2, #0
 800a060:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	b29a      	uxth	r2, r3
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	80da      	strh	r2, [r3, #6]
 800a06a:	e00b      	b.n	800a084 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	2201      	movs	r2, #1
 800a070:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	b29a      	uxth	r2, r3
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	0c1b      	lsrs	r3, r3, #16
 800a07e:	b29a      	uxth	r2, r3
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	371c      	adds	r7, #28
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr

0800a092 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a092:	b480      	push	{r7}
 800a094:	b085      	sub	sp, #20
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	f043 0301 	orr.w	r3, r3, #1
 800a0bc:	b29a      	uxth	r2, r3
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	f043 0302 	orr.w	r3, r3, #2
 800a0d0:	b29a      	uxth	r2, r3
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3714      	adds	r7, #20
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr
	...

0800a0e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b085      	sub	sp, #20
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d141      	bne.n	800a17a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a0f6:	4b4b      	ldr	r3, [pc, #300]	@ (800a224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a0fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a102:	d131      	bne.n	800a168 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a104:	4b47      	ldr	r3, [pc, #284]	@ (800a224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a106:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a10a:	4a46      	ldr	r2, [pc, #280]	@ (800a224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a10c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a110:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a114:	4b43      	ldr	r3, [pc, #268]	@ (800a224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800a11c:	4a41      	ldr	r2, [pc, #260]	@ (800a224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a11e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a122:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a124:	4b40      	ldr	r3, [pc, #256]	@ (800a228 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	2232      	movs	r2, #50	@ 0x32
 800a12a:	fb02 f303 	mul.w	r3, r2, r3
 800a12e:	4a3f      	ldr	r2, [pc, #252]	@ (800a22c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a130:	fba2 2303 	umull	r2, r3, r2, r3
 800a134:	0c9b      	lsrs	r3, r3, #18
 800a136:	3301      	adds	r3, #1
 800a138:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a13a:	e002      	b.n	800a142 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	3b01      	subs	r3, #1
 800a140:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a142:	4b38      	ldr	r3, [pc, #224]	@ (800a224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a144:	695b      	ldr	r3, [r3, #20]
 800a146:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a14a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a14e:	d102      	bne.n	800a156 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d1f2      	bne.n	800a13c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a156:	4b33      	ldr	r3, [pc, #204]	@ (800a224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a158:	695b      	ldr	r3, [r3, #20]
 800a15a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a15e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a162:	d158      	bne.n	800a216 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a164:	2303      	movs	r3, #3
 800a166:	e057      	b.n	800a218 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a168:	4b2e      	ldr	r3, [pc, #184]	@ (800a224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a16a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a16e:	4a2d      	ldr	r2, [pc, #180]	@ (800a224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a170:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a174:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800a178:	e04d      	b.n	800a216 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a180:	d141      	bne.n	800a206 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a182:	4b28      	ldr	r3, [pc, #160]	@ (800a224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a18a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a18e:	d131      	bne.n	800a1f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a190:	4b24      	ldr	r3, [pc, #144]	@ (800a224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a192:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a196:	4a23      	ldr	r2, [pc, #140]	@ (800a224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a198:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a19c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a1a0:	4b20      	ldr	r3, [pc, #128]	@ (800a224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800a1a8:	4a1e      	ldr	r2, [pc, #120]	@ (800a224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a1aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a1ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a1b0:	4b1d      	ldr	r3, [pc, #116]	@ (800a228 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2232      	movs	r2, #50	@ 0x32
 800a1b6:	fb02 f303 	mul.w	r3, r2, r3
 800a1ba:	4a1c      	ldr	r2, [pc, #112]	@ (800a22c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a1bc:	fba2 2303 	umull	r2, r3, r2, r3
 800a1c0:	0c9b      	lsrs	r3, r3, #18
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a1c6:	e002      	b.n	800a1ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	3b01      	subs	r3, #1
 800a1cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a1ce:	4b15      	ldr	r3, [pc, #84]	@ (800a224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a1d0:	695b      	ldr	r3, [r3, #20]
 800a1d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a1d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a1da:	d102      	bne.n	800a1e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d1f2      	bne.n	800a1c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a1e2:	4b10      	ldr	r3, [pc, #64]	@ (800a224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a1e4:	695b      	ldr	r3, [r3, #20]
 800a1e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a1ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a1ee:	d112      	bne.n	800a216 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a1f0:	2303      	movs	r3, #3
 800a1f2:	e011      	b.n	800a218 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a1f4:	4b0b      	ldr	r3, [pc, #44]	@ (800a224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a1f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1fa:	4a0a      	ldr	r2, [pc, #40]	@ (800a224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a1fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a200:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800a204:	e007      	b.n	800a216 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a206:	4b07      	ldr	r3, [pc, #28]	@ (800a224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800a20e:	4a05      	ldr	r2, [pc, #20]	@ (800a224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a210:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a214:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800a216:	2300      	movs	r3, #0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3714      	adds	r7, #20
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr
 800a224:	40007000 	.word	0x40007000
 800a228:	20000044 	.word	0x20000044
 800a22c:	431bde83 	.word	0x431bde83

0800a230 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800a230:	b480      	push	{r7}
 800a232:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800a234:	4b05      	ldr	r3, [pc, #20]	@ (800a24c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	4a04      	ldr	r2, [pc, #16]	@ (800a24c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800a23a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a23e:	6093      	str	r3, [r2, #8]
}
 800a240:	bf00      	nop
 800a242:	46bd      	mov	sp, r7
 800a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a248:	4770      	bx	lr
 800a24a:	bf00      	nop
 800a24c:	40007000 	.word	0x40007000

0800a250 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b088      	sub	sp, #32
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d101      	bne.n	800a262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a25e:	2301      	movs	r3, #1
 800a260:	e2fe      	b.n	800a860 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f003 0301 	and.w	r3, r3, #1
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d075      	beq.n	800a35a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a26e:	4b97      	ldr	r3, [pc, #604]	@ (800a4cc <HAL_RCC_OscConfig+0x27c>)
 800a270:	689b      	ldr	r3, [r3, #8]
 800a272:	f003 030c 	and.w	r3, r3, #12
 800a276:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a278:	4b94      	ldr	r3, [pc, #592]	@ (800a4cc <HAL_RCC_OscConfig+0x27c>)
 800a27a:	68db      	ldr	r3, [r3, #12]
 800a27c:	f003 0303 	and.w	r3, r3, #3
 800a280:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	2b0c      	cmp	r3, #12
 800a286:	d102      	bne.n	800a28e <HAL_RCC_OscConfig+0x3e>
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	2b03      	cmp	r3, #3
 800a28c:	d002      	beq.n	800a294 <HAL_RCC_OscConfig+0x44>
 800a28e:	69bb      	ldr	r3, [r7, #24]
 800a290:	2b08      	cmp	r3, #8
 800a292:	d10b      	bne.n	800a2ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a294:	4b8d      	ldr	r3, [pc, #564]	@ (800a4cc <HAL_RCC_OscConfig+0x27c>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d05b      	beq.n	800a358 <HAL_RCC_OscConfig+0x108>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d157      	bne.n	800a358 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	e2d9      	b.n	800a860 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2b4:	d106      	bne.n	800a2c4 <HAL_RCC_OscConfig+0x74>
 800a2b6:	4b85      	ldr	r3, [pc, #532]	@ (800a4cc <HAL_RCC_OscConfig+0x27c>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a84      	ldr	r2, [pc, #528]	@ (800a4cc <HAL_RCC_OscConfig+0x27c>)
 800a2bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a2c0:	6013      	str	r3, [r2, #0]
 800a2c2:	e01d      	b.n	800a300 <HAL_RCC_OscConfig+0xb0>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a2cc:	d10c      	bne.n	800a2e8 <HAL_RCC_OscConfig+0x98>
 800a2ce:	4b7f      	ldr	r3, [pc, #508]	@ (800a4cc <HAL_RCC_OscConfig+0x27c>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4a7e      	ldr	r2, [pc, #504]	@ (800a4cc <HAL_RCC_OscConfig+0x27c>)
 800a2d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a2d8:	6013      	str	r3, [r2, #0]
 800a2da:	4b7c      	ldr	r3, [pc, #496]	@ (800a4cc <HAL_RCC_OscConfig+0x27c>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	4a7b      	ldr	r2, [pc, #492]	@ (800a4cc <HAL_RCC_OscConfig+0x27c>)
 800a2e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a2e4:	6013      	str	r3, [r2, #0]
 800a2e6:	e00b      	b.n	800a300 <HAL_RCC_OscConfig+0xb0>
 800a2e8:	4b78      	ldr	r3, [pc, #480]	@ (800a4cc <HAL_RCC_OscConfig+0x27c>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a77      	ldr	r2, [pc, #476]	@ (800a4cc <HAL_RCC_OscConfig+0x27c>)
 800a2ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a2f2:	6013      	str	r3, [r2, #0]
 800a2f4:	4b75      	ldr	r3, [pc, #468]	@ (800a4cc <HAL_RCC_OscConfig+0x27c>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a74      	ldr	r2, [pc, #464]	@ (800a4cc <HAL_RCC_OscConfig+0x27c>)
 800a2fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a2fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d013      	beq.n	800a330 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a308:	f7fa f86a 	bl	80043e0 <HAL_GetTick>
 800a30c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a30e:	e008      	b.n	800a322 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a310:	f7fa f866 	bl	80043e0 <HAL_GetTick>
 800a314:	4602      	mov	r2, r0
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	1ad3      	subs	r3, r2, r3
 800a31a:	2b64      	cmp	r3, #100	@ 0x64
 800a31c:	d901      	bls.n	800a322 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a31e:	2303      	movs	r3, #3
 800a320:	e29e      	b.n	800a860 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a322:	4b6a      	ldr	r3, [pc, #424]	@ (800a4cc <HAL_RCC_OscConfig+0x27c>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d0f0      	beq.n	800a310 <HAL_RCC_OscConfig+0xc0>
 800a32e:	e014      	b.n	800a35a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a330:	f7fa f856 	bl	80043e0 <HAL_GetTick>
 800a334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a336:	e008      	b.n	800a34a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a338:	f7fa f852 	bl	80043e0 <HAL_GetTick>
 800a33c:	4602      	mov	r2, r0
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	1ad3      	subs	r3, r2, r3
 800a342:	2b64      	cmp	r3, #100	@ 0x64
 800a344:	d901      	bls.n	800a34a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a346:	2303      	movs	r3, #3
 800a348:	e28a      	b.n	800a860 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a34a:	4b60      	ldr	r3, [pc, #384]	@ (800a4cc <HAL_RCC_OscConfig+0x27c>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a352:	2b00      	cmp	r3, #0
 800a354:	d1f0      	bne.n	800a338 <HAL_RCC_OscConfig+0xe8>
 800a356:	e000      	b.n	800a35a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f003 0302 	and.w	r3, r3, #2
 800a362:	2b00      	cmp	r3, #0
 800a364:	d075      	beq.n	800a452 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a366:	4b59      	ldr	r3, [pc, #356]	@ (800a4cc <HAL_RCC_OscConfig+0x27c>)
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	f003 030c 	and.w	r3, r3, #12
 800a36e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a370:	4b56      	ldr	r3, [pc, #344]	@ (800a4cc <HAL_RCC_OscConfig+0x27c>)
 800a372:	68db      	ldr	r3, [r3, #12]
 800a374:	f003 0303 	and.w	r3, r3, #3
 800a378:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800a37a:	69bb      	ldr	r3, [r7, #24]
 800a37c:	2b0c      	cmp	r3, #12
 800a37e:	d102      	bne.n	800a386 <HAL_RCC_OscConfig+0x136>
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	2b02      	cmp	r3, #2
 800a384:	d002      	beq.n	800a38c <HAL_RCC_OscConfig+0x13c>
 800a386:	69bb      	ldr	r3, [r7, #24]
 800a388:	2b04      	cmp	r3, #4
 800a38a:	d11f      	bne.n	800a3cc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a38c:	4b4f      	ldr	r3, [pc, #316]	@ (800a4cc <HAL_RCC_OscConfig+0x27c>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a394:	2b00      	cmp	r3, #0
 800a396:	d005      	beq.n	800a3a4 <HAL_RCC_OscConfig+0x154>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	68db      	ldr	r3, [r3, #12]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d101      	bne.n	800a3a4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	e25d      	b.n	800a860 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a3a4:	4b49      	ldr	r3, [pc, #292]	@ (800a4cc <HAL_RCC_OscConfig+0x27c>)
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	691b      	ldr	r3, [r3, #16]
 800a3b0:	061b      	lsls	r3, r3, #24
 800a3b2:	4946      	ldr	r1, [pc, #280]	@ (800a4cc <HAL_RCC_OscConfig+0x27c>)
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a3b8:	4b45      	ldr	r3, [pc, #276]	@ (800a4d0 <HAL_RCC_OscConfig+0x280>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f7f9 ffc3 	bl	8004348 <HAL_InitTick>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d043      	beq.n	800a450 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	e249      	b.n	800a860 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	68db      	ldr	r3, [r3, #12]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d023      	beq.n	800a41c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a3d4:	4b3d      	ldr	r3, [pc, #244]	@ (800a4cc <HAL_RCC_OscConfig+0x27c>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4a3c      	ldr	r2, [pc, #240]	@ (800a4cc <HAL_RCC_OscConfig+0x27c>)
 800a3da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a3de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3e0:	f7f9 fffe 	bl	80043e0 <HAL_GetTick>
 800a3e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a3e6:	e008      	b.n	800a3fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a3e8:	f7f9 fffa 	bl	80043e0 <HAL_GetTick>
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	1ad3      	subs	r3, r2, r3
 800a3f2:	2b02      	cmp	r3, #2
 800a3f4:	d901      	bls.n	800a3fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a3f6:	2303      	movs	r3, #3
 800a3f8:	e232      	b.n	800a860 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a3fa:	4b34      	ldr	r3, [pc, #208]	@ (800a4cc <HAL_RCC_OscConfig+0x27c>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a402:	2b00      	cmp	r3, #0
 800a404:	d0f0      	beq.n	800a3e8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a406:	4b31      	ldr	r3, [pc, #196]	@ (800a4cc <HAL_RCC_OscConfig+0x27c>)
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	691b      	ldr	r3, [r3, #16]
 800a412:	061b      	lsls	r3, r3, #24
 800a414:	492d      	ldr	r1, [pc, #180]	@ (800a4cc <HAL_RCC_OscConfig+0x27c>)
 800a416:	4313      	orrs	r3, r2
 800a418:	604b      	str	r3, [r1, #4]
 800a41a:	e01a      	b.n	800a452 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a41c:	4b2b      	ldr	r3, [pc, #172]	@ (800a4cc <HAL_RCC_OscConfig+0x27c>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a2a      	ldr	r2, [pc, #168]	@ (800a4cc <HAL_RCC_OscConfig+0x27c>)
 800a422:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a428:	f7f9 ffda 	bl	80043e0 <HAL_GetTick>
 800a42c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a42e:	e008      	b.n	800a442 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a430:	f7f9 ffd6 	bl	80043e0 <HAL_GetTick>
 800a434:	4602      	mov	r2, r0
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	1ad3      	subs	r3, r2, r3
 800a43a:	2b02      	cmp	r3, #2
 800a43c:	d901      	bls.n	800a442 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800a43e:	2303      	movs	r3, #3
 800a440:	e20e      	b.n	800a860 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a442:	4b22      	ldr	r3, [pc, #136]	@ (800a4cc <HAL_RCC_OscConfig+0x27c>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d1f0      	bne.n	800a430 <HAL_RCC_OscConfig+0x1e0>
 800a44e:	e000      	b.n	800a452 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a450:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f003 0308 	and.w	r3, r3, #8
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d041      	beq.n	800a4e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	695b      	ldr	r3, [r3, #20]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d01c      	beq.n	800a4a0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a466:	4b19      	ldr	r3, [pc, #100]	@ (800a4cc <HAL_RCC_OscConfig+0x27c>)
 800a468:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a46c:	4a17      	ldr	r2, [pc, #92]	@ (800a4cc <HAL_RCC_OscConfig+0x27c>)
 800a46e:	f043 0301 	orr.w	r3, r3, #1
 800a472:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a476:	f7f9 ffb3 	bl	80043e0 <HAL_GetTick>
 800a47a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a47c:	e008      	b.n	800a490 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a47e:	f7f9 ffaf 	bl	80043e0 <HAL_GetTick>
 800a482:	4602      	mov	r2, r0
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	1ad3      	subs	r3, r2, r3
 800a488:	2b02      	cmp	r3, #2
 800a48a:	d901      	bls.n	800a490 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a48c:	2303      	movs	r3, #3
 800a48e:	e1e7      	b.n	800a860 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a490:	4b0e      	ldr	r3, [pc, #56]	@ (800a4cc <HAL_RCC_OscConfig+0x27c>)
 800a492:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a496:	f003 0302 	and.w	r3, r3, #2
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d0ef      	beq.n	800a47e <HAL_RCC_OscConfig+0x22e>
 800a49e:	e020      	b.n	800a4e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a4a0:	4b0a      	ldr	r3, [pc, #40]	@ (800a4cc <HAL_RCC_OscConfig+0x27c>)
 800a4a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a4a6:	4a09      	ldr	r2, [pc, #36]	@ (800a4cc <HAL_RCC_OscConfig+0x27c>)
 800a4a8:	f023 0301 	bic.w	r3, r3, #1
 800a4ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4b0:	f7f9 ff96 	bl	80043e0 <HAL_GetTick>
 800a4b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a4b6:	e00d      	b.n	800a4d4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a4b8:	f7f9 ff92 	bl	80043e0 <HAL_GetTick>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	1ad3      	subs	r3, r2, r3
 800a4c2:	2b02      	cmp	r3, #2
 800a4c4:	d906      	bls.n	800a4d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a4c6:	2303      	movs	r3, #3
 800a4c8:	e1ca      	b.n	800a860 <HAL_RCC_OscConfig+0x610>
 800a4ca:	bf00      	nop
 800a4cc:	40021000 	.word	0x40021000
 800a4d0:	2000004c 	.word	0x2000004c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a4d4:	4b8c      	ldr	r3, [pc, #560]	@ (800a708 <HAL_RCC_OscConfig+0x4b8>)
 800a4d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a4da:	f003 0302 	and.w	r3, r3, #2
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d1ea      	bne.n	800a4b8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f003 0304 	and.w	r3, r3, #4
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	f000 80a6 	beq.w	800a63c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a4f4:	4b84      	ldr	r3, [pc, #528]	@ (800a708 <HAL_RCC_OscConfig+0x4b8>)
 800a4f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d101      	bne.n	800a504 <HAL_RCC_OscConfig+0x2b4>
 800a500:	2301      	movs	r3, #1
 800a502:	e000      	b.n	800a506 <HAL_RCC_OscConfig+0x2b6>
 800a504:	2300      	movs	r3, #0
 800a506:	2b00      	cmp	r3, #0
 800a508:	d00d      	beq.n	800a526 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a50a:	4b7f      	ldr	r3, [pc, #508]	@ (800a708 <HAL_RCC_OscConfig+0x4b8>)
 800a50c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a50e:	4a7e      	ldr	r2, [pc, #504]	@ (800a708 <HAL_RCC_OscConfig+0x4b8>)
 800a510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a514:	6593      	str	r3, [r2, #88]	@ 0x58
 800a516:	4b7c      	ldr	r3, [pc, #496]	@ (800a708 <HAL_RCC_OscConfig+0x4b8>)
 800a518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a51a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a51e:	60fb      	str	r3, [r7, #12]
 800a520:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a522:	2301      	movs	r3, #1
 800a524:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a526:	4b79      	ldr	r3, [pc, #484]	@ (800a70c <HAL_RCC_OscConfig+0x4bc>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d118      	bne.n	800a564 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a532:	4b76      	ldr	r3, [pc, #472]	@ (800a70c <HAL_RCC_OscConfig+0x4bc>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4a75      	ldr	r2, [pc, #468]	@ (800a70c <HAL_RCC_OscConfig+0x4bc>)
 800a538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a53c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a53e:	f7f9 ff4f 	bl	80043e0 <HAL_GetTick>
 800a542:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a544:	e008      	b.n	800a558 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a546:	f7f9 ff4b 	bl	80043e0 <HAL_GetTick>
 800a54a:	4602      	mov	r2, r0
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	1ad3      	subs	r3, r2, r3
 800a550:	2b02      	cmp	r3, #2
 800a552:	d901      	bls.n	800a558 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800a554:	2303      	movs	r3, #3
 800a556:	e183      	b.n	800a860 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a558:	4b6c      	ldr	r3, [pc, #432]	@ (800a70c <HAL_RCC_OscConfig+0x4bc>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a560:	2b00      	cmp	r3, #0
 800a562:	d0f0      	beq.n	800a546 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	689b      	ldr	r3, [r3, #8]
 800a568:	2b01      	cmp	r3, #1
 800a56a:	d108      	bne.n	800a57e <HAL_RCC_OscConfig+0x32e>
 800a56c:	4b66      	ldr	r3, [pc, #408]	@ (800a708 <HAL_RCC_OscConfig+0x4b8>)
 800a56e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a572:	4a65      	ldr	r2, [pc, #404]	@ (800a708 <HAL_RCC_OscConfig+0x4b8>)
 800a574:	f043 0301 	orr.w	r3, r3, #1
 800a578:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a57c:	e024      	b.n	800a5c8 <HAL_RCC_OscConfig+0x378>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	2b05      	cmp	r3, #5
 800a584:	d110      	bne.n	800a5a8 <HAL_RCC_OscConfig+0x358>
 800a586:	4b60      	ldr	r3, [pc, #384]	@ (800a708 <HAL_RCC_OscConfig+0x4b8>)
 800a588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a58c:	4a5e      	ldr	r2, [pc, #376]	@ (800a708 <HAL_RCC_OscConfig+0x4b8>)
 800a58e:	f043 0304 	orr.w	r3, r3, #4
 800a592:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a596:	4b5c      	ldr	r3, [pc, #368]	@ (800a708 <HAL_RCC_OscConfig+0x4b8>)
 800a598:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a59c:	4a5a      	ldr	r2, [pc, #360]	@ (800a708 <HAL_RCC_OscConfig+0x4b8>)
 800a59e:	f043 0301 	orr.w	r3, r3, #1
 800a5a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a5a6:	e00f      	b.n	800a5c8 <HAL_RCC_OscConfig+0x378>
 800a5a8:	4b57      	ldr	r3, [pc, #348]	@ (800a708 <HAL_RCC_OscConfig+0x4b8>)
 800a5aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5ae:	4a56      	ldr	r2, [pc, #344]	@ (800a708 <HAL_RCC_OscConfig+0x4b8>)
 800a5b0:	f023 0301 	bic.w	r3, r3, #1
 800a5b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a5b8:	4b53      	ldr	r3, [pc, #332]	@ (800a708 <HAL_RCC_OscConfig+0x4b8>)
 800a5ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5be:	4a52      	ldr	r2, [pc, #328]	@ (800a708 <HAL_RCC_OscConfig+0x4b8>)
 800a5c0:	f023 0304 	bic.w	r3, r3, #4
 800a5c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	689b      	ldr	r3, [r3, #8]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d016      	beq.n	800a5fe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5d0:	f7f9 ff06 	bl	80043e0 <HAL_GetTick>
 800a5d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a5d6:	e00a      	b.n	800a5ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5d8:	f7f9 ff02 	bl	80043e0 <HAL_GetTick>
 800a5dc:	4602      	mov	r2, r0
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	1ad3      	subs	r3, r2, r3
 800a5e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d901      	bls.n	800a5ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800a5ea:	2303      	movs	r3, #3
 800a5ec:	e138      	b.n	800a860 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a5ee:	4b46      	ldr	r3, [pc, #280]	@ (800a708 <HAL_RCC_OscConfig+0x4b8>)
 800a5f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5f4:	f003 0302 	and.w	r3, r3, #2
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d0ed      	beq.n	800a5d8 <HAL_RCC_OscConfig+0x388>
 800a5fc:	e015      	b.n	800a62a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5fe:	f7f9 feef 	bl	80043e0 <HAL_GetTick>
 800a602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a604:	e00a      	b.n	800a61c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a606:	f7f9 feeb 	bl	80043e0 <HAL_GetTick>
 800a60a:	4602      	mov	r2, r0
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	1ad3      	subs	r3, r2, r3
 800a610:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a614:	4293      	cmp	r3, r2
 800a616:	d901      	bls.n	800a61c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800a618:	2303      	movs	r3, #3
 800a61a:	e121      	b.n	800a860 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a61c:	4b3a      	ldr	r3, [pc, #232]	@ (800a708 <HAL_RCC_OscConfig+0x4b8>)
 800a61e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a622:	f003 0302 	and.w	r3, r3, #2
 800a626:	2b00      	cmp	r3, #0
 800a628:	d1ed      	bne.n	800a606 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a62a:	7ffb      	ldrb	r3, [r7, #31]
 800a62c:	2b01      	cmp	r3, #1
 800a62e:	d105      	bne.n	800a63c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a630:	4b35      	ldr	r3, [pc, #212]	@ (800a708 <HAL_RCC_OscConfig+0x4b8>)
 800a632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a634:	4a34      	ldr	r2, [pc, #208]	@ (800a708 <HAL_RCC_OscConfig+0x4b8>)
 800a636:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a63a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f003 0320 	and.w	r3, r3, #32
 800a644:	2b00      	cmp	r3, #0
 800a646:	d03c      	beq.n	800a6c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	699b      	ldr	r3, [r3, #24]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d01c      	beq.n	800a68a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a650:	4b2d      	ldr	r3, [pc, #180]	@ (800a708 <HAL_RCC_OscConfig+0x4b8>)
 800a652:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a656:	4a2c      	ldr	r2, [pc, #176]	@ (800a708 <HAL_RCC_OscConfig+0x4b8>)
 800a658:	f043 0301 	orr.w	r3, r3, #1
 800a65c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a660:	f7f9 febe 	bl	80043e0 <HAL_GetTick>
 800a664:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a666:	e008      	b.n	800a67a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a668:	f7f9 feba 	bl	80043e0 <HAL_GetTick>
 800a66c:	4602      	mov	r2, r0
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	1ad3      	subs	r3, r2, r3
 800a672:	2b02      	cmp	r3, #2
 800a674:	d901      	bls.n	800a67a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800a676:	2303      	movs	r3, #3
 800a678:	e0f2      	b.n	800a860 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a67a:	4b23      	ldr	r3, [pc, #140]	@ (800a708 <HAL_RCC_OscConfig+0x4b8>)
 800a67c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a680:	f003 0302 	and.w	r3, r3, #2
 800a684:	2b00      	cmp	r3, #0
 800a686:	d0ef      	beq.n	800a668 <HAL_RCC_OscConfig+0x418>
 800a688:	e01b      	b.n	800a6c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a68a:	4b1f      	ldr	r3, [pc, #124]	@ (800a708 <HAL_RCC_OscConfig+0x4b8>)
 800a68c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a690:	4a1d      	ldr	r2, [pc, #116]	@ (800a708 <HAL_RCC_OscConfig+0x4b8>)
 800a692:	f023 0301 	bic.w	r3, r3, #1
 800a696:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a69a:	f7f9 fea1 	bl	80043e0 <HAL_GetTick>
 800a69e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a6a0:	e008      	b.n	800a6b4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a6a2:	f7f9 fe9d 	bl	80043e0 <HAL_GetTick>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	1ad3      	subs	r3, r2, r3
 800a6ac:	2b02      	cmp	r3, #2
 800a6ae:	d901      	bls.n	800a6b4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800a6b0:	2303      	movs	r3, #3
 800a6b2:	e0d5      	b.n	800a860 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a6b4:	4b14      	ldr	r3, [pc, #80]	@ (800a708 <HAL_RCC_OscConfig+0x4b8>)
 800a6b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a6ba:	f003 0302 	and.w	r3, r3, #2
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d1ef      	bne.n	800a6a2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	69db      	ldr	r3, [r3, #28]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	f000 80c9 	beq.w	800a85e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a6cc:	4b0e      	ldr	r3, [pc, #56]	@ (800a708 <HAL_RCC_OscConfig+0x4b8>)
 800a6ce:	689b      	ldr	r3, [r3, #8]
 800a6d0:	f003 030c 	and.w	r3, r3, #12
 800a6d4:	2b0c      	cmp	r3, #12
 800a6d6:	f000 8083 	beq.w	800a7e0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	69db      	ldr	r3, [r3, #28]
 800a6de:	2b02      	cmp	r3, #2
 800a6e0:	d15e      	bne.n	800a7a0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a6e2:	4b09      	ldr	r3, [pc, #36]	@ (800a708 <HAL_RCC_OscConfig+0x4b8>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a08      	ldr	r2, [pc, #32]	@ (800a708 <HAL_RCC_OscConfig+0x4b8>)
 800a6e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a6ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6ee:	f7f9 fe77 	bl	80043e0 <HAL_GetTick>
 800a6f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a6f4:	e00c      	b.n	800a710 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6f6:	f7f9 fe73 	bl	80043e0 <HAL_GetTick>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	1ad3      	subs	r3, r2, r3
 800a700:	2b02      	cmp	r3, #2
 800a702:	d905      	bls.n	800a710 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800a704:	2303      	movs	r3, #3
 800a706:	e0ab      	b.n	800a860 <HAL_RCC_OscConfig+0x610>
 800a708:	40021000 	.word	0x40021000
 800a70c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a710:	4b55      	ldr	r3, [pc, #340]	@ (800a868 <HAL_RCC_OscConfig+0x618>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d1ec      	bne.n	800a6f6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a71c:	4b52      	ldr	r3, [pc, #328]	@ (800a868 <HAL_RCC_OscConfig+0x618>)
 800a71e:	68da      	ldr	r2, [r3, #12]
 800a720:	4b52      	ldr	r3, [pc, #328]	@ (800a86c <HAL_RCC_OscConfig+0x61c>)
 800a722:	4013      	ands	r3, r2
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	6a11      	ldr	r1, [r2, #32]
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a72c:	3a01      	subs	r2, #1
 800a72e:	0112      	lsls	r2, r2, #4
 800a730:	4311      	orrs	r1, r2
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800a736:	0212      	lsls	r2, r2, #8
 800a738:	4311      	orrs	r1, r2
 800a73a:	687a      	ldr	r2, [r7, #4]
 800a73c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a73e:	0852      	lsrs	r2, r2, #1
 800a740:	3a01      	subs	r2, #1
 800a742:	0552      	lsls	r2, r2, #21
 800a744:	4311      	orrs	r1, r2
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a74a:	0852      	lsrs	r2, r2, #1
 800a74c:	3a01      	subs	r2, #1
 800a74e:	0652      	lsls	r2, r2, #25
 800a750:	4311      	orrs	r1, r2
 800a752:	687a      	ldr	r2, [r7, #4]
 800a754:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a756:	06d2      	lsls	r2, r2, #27
 800a758:	430a      	orrs	r2, r1
 800a75a:	4943      	ldr	r1, [pc, #268]	@ (800a868 <HAL_RCC_OscConfig+0x618>)
 800a75c:	4313      	orrs	r3, r2
 800a75e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a760:	4b41      	ldr	r3, [pc, #260]	@ (800a868 <HAL_RCC_OscConfig+0x618>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a40      	ldr	r2, [pc, #256]	@ (800a868 <HAL_RCC_OscConfig+0x618>)
 800a766:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a76a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a76c:	4b3e      	ldr	r3, [pc, #248]	@ (800a868 <HAL_RCC_OscConfig+0x618>)
 800a76e:	68db      	ldr	r3, [r3, #12]
 800a770:	4a3d      	ldr	r2, [pc, #244]	@ (800a868 <HAL_RCC_OscConfig+0x618>)
 800a772:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a776:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a778:	f7f9 fe32 	bl	80043e0 <HAL_GetTick>
 800a77c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a77e:	e008      	b.n	800a792 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a780:	f7f9 fe2e 	bl	80043e0 <HAL_GetTick>
 800a784:	4602      	mov	r2, r0
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	1ad3      	subs	r3, r2, r3
 800a78a:	2b02      	cmp	r3, #2
 800a78c:	d901      	bls.n	800a792 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800a78e:	2303      	movs	r3, #3
 800a790:	e066      	b.n	800a860 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a792:	4b35      	ldr	r3, [pc, #212]	@ (800a868 <HAL_RCC_OscConfig+0x618>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d0f0      	beq.n	800a780 <HAL_RCC_OscConfig+0x530>
 800a79e:	e05e      	b.n	800a85e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a7a0:	4b31      	ldr	r3, [pc, #196]	@ (800a868 <HAL_RCC_OscConfig+0x618>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a30      	ldr	r2, [pc, #192]	@ (800a868 <HAL_RCC_OscConfig+0x618>)
 800a7a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a7aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7ac:	f7f9 fe18 	bl	80043e0 <HAL_GetTick>
 800a7b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a7b2:	e008      	b.n	800a7c6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7b4:	f7f9 fe14 	bl	80043e0 <HAL_GetTick>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	1ad3      	subs	r3, r2, r3
 800a7be:	2b02      	cmp	r3, #2
 800a7c0:	d901      	bls.n	800a7c6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800a7c2:	2303      	movs	r3, #3
 800a7c4:	e04c      	b.n	800a860 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a7c6:	4b28      	ldr	r3, [pc, #160]	@ (800a868 <HAL_RCC_OscConfig+0x618>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d1f0      	bne.n	800a7b4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800a7d2:	4b25      	ldr	r3, [pc, #148]	@ (800a868 <HAL_RCC_OscConfig+0x618>)
 800a7d4:	68da      	ldr	r2, [r3, #12]
 800a7d6:	4924      	ldr	r1, [pc, #144]	@ (800a868 <HAL_RCC_OscConfig+0x618>)
 800a7d8:	4b25      	ldr	r3, [pc, #148]	@ (800a870 <HAL_RCC_OscConfig+0x620>)
 800a7da:	4013      	ands	r3, r2
 800a7dc:	60cb      	str	r3, [r1, #12]
 800a7de:	e03e      	b.n	800a85e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	69db      	ldr	r3, [r3, #28]
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d101      	bne.n	800a7ec <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	e039      	b.n	800a860 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800a7ec:	4b1e      	ldr	r3, [pc, #120]	@ (800a868 <HAL_RCC_OscConfig+0x618>)
 800a7ee:	68db      	ldr	r3, [r3, #12]
 800a7f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	f003 0203 	and.w	r2, r3, #3
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6a1b      	ldr	r3, [r3, #32]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d12c      	bne.n	800a85a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a80a:	3b01      	subs	r3, #1
 800a80c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a80e:	429a      	cmp	r2, r3
 800a810:	d123      	bne.n	800a85a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a81c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a81e:	429a      	cmp	r2, r3
 800a820:	d11b      	bne.n	800a85a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a82c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a82e:	429a      	cmp	r2, r3
 800a830:	d113      	bne.n	800a85a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a83c:	085b      	lsrs	r3, r3, #1
 800a83e:	3b01      	subs	r3, #1
 800a840:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a842:	429a      	cmp	r2, r3
 800a844:	d109      	bne.n	800a85a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a850:	085b      	lsrs	r3, r3, #1
 800a852:	3b01      	subs	r3, #1
 800a854:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a856:	429a      	cmp	r2, r3
 800a858:	d001      	beq.n	800a85e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800a85a:	2301      	movs	r3, #1
 800a85c:	e000      	b.n	800a860 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800a85e:	2300      	movs	r3, #0
}
 800a860:	4618      	mov	r0, r3
 800a862:	3720      	adds	r7, #32
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}
 800a868:	40021000 	.word	0x40021000
 800a86c:	019f800c 	.word	0x019f800c
 800a870:	feeefffc 	.word	0xfeeefffc

0800a874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b086      	sub	sp, #24
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a87e:	2300      	movs	r3, #0
 800a880:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d101      	bne.n	800a88c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a888:	2301      	movs	r3, #1
 800a88a:	e11e      	b.n	800aaca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a88c:	4b91      	ldr	r3, [pc, #580]	@ (800aad4 <HAL_RCC_ClockConfig+0x260>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f003 030f 	and.w	r3, r3, #15
 800a894:	683a      	ldr	r2, [r7, #0]
 800a896:	429a      	cmp	r2, r3
 800a898:	d910      	bls.n	800a8bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a89a:	4b8e      	ldr	r3, [pc, #568]	@ (800aad4 <HAL_RCC_ClockConfig+0x260>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f023 020f 	bic.w	r2, r3, #15
 800a8a2:	498c      	ldr	r1, [pc, #560]	@ (800aad4 <HAL_RCC_ClockConfig+0x260>)
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a8aa:	4b8a      	ldr	r3, [pc, #552]	@ (800aad4 <HAL_RCC_ClockConfig+0x260>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f003 030f 	and.w	r3, r3, #15
 800a8b2:	683a      	ldr	r2, [r7, #0]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d001      	beq.n	800a8bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	e106      	b.n	800aaca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f003 0301 	and.w	r3, r3, #1
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d073      	beq.n	800a9b0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	2b03      	cmp	r3, #3
 800a8ce:	d129      	bne.n	800a924 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a8d0:	4b81      	ldr	r3, [pc, #516]	@ (800aad8 <HAL_RCC_ClockConfig+0x264>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d101      	bne.n	800a8e0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	e0f4      	b.n	800aaca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800a8e0:	f000 f9ca 	bl	800ac78 <RCC_GetSysClockFreqFromPLLSource>
 800a8e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	4a7c      	ldr	r2, [pc, #496]	@ (800aadc <HAL_RCC_ClockConfig+0x268>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d93f      	bls.n	800a96e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a8ee:	4b7a      	ldr	r3, [pc, #488]	@ (800aad8 <HAL_RCC_ClockConfig+0x264>)
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d009      	beq.n	800a90e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a902:	2b00      	cmp	r3, #0
 800a904:	d033      	beq.n	800a96e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d12f      	bne.n	800a96e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a90e:	4b72      	ldr	r3, [pc, #456]	@ (800aad8 <HAL_RCC_ClockConfig+0x264>)
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a916:	4a70      	ldr	r2, [pc, #448]	@ (800aad8 <HAL_RCC_ClockConfig+0x264>)
 800a918:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a91c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a91e:	2380      	movs	r3, #128	@ 0x80
 800a920:	617b      	str	r3, [r7, #20]
 800a922:	e024      	b.n	800a96e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	2b02      	cmp	r3, #2
 800a92a:	d107      	bne.n	800a93c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a92c:	4b6a      	ldr	r3, [pc, #424]	@ (800aad8 <HAL_RCC_ClockConfig+0x264>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a934:	2b00      	cmp	r3, #0
 800a936:	d109      	bne.n	800a94c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a938:	2301      	movs	r3, #1
 800a93a:	e0c6      	b.n	800aaca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a93c:	4b66      	ldr	r3, [pc, #408]	@ (800aad8 <HAL_RCC_ClockConfig+0x264>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a944:	2b00      	cmp	r3, #0
 800a946:	d101      	bne.n	800a94c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a948:	2301      	movs	r3, #1
 800a94a:	e0be      	b.n	800aaca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800a94c:	f000 f8ce 	bl	800aaec <HAL_RCC_GetSysClockFreq>
 800a950:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	4a61      	ldr	r2, [pc, #388]	@ (800aadc <HAL_RCC_ClockConfig+0x268>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d909      	bls.n	800a96e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a95a:	4b5f      	ldr	r3, [pc, #380]	@ (800aad8 <HAL_RCC_ClockConfig+0x264>)
 800a95c:	689b      	ldr	r3, [r3, #8]
 800a95e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a962:	4a5d      	ldr	r2, [pc, #372]	@ (800aad8 <HAL_RCC_ClockConfig+0x264>)
 800a964:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a968:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800a96a:	2380      	movs	r3, #128	@ 0x80
 800a96c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a96e:	4b5a      	ldr	r3, [pc, #360]	@ (800aad8 <HAL_RCC_ClockConfig+0x264>)
 800a970:	689b      	ldr	r3, [r3, #8]
 800a972:	f023 0203 	bic.w	r2, r3, #3
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	4957      	ldr	r1, [pc, #348]	@ (800aad8 <HAL_RCC_ClockConfig+0x264>)
 800a97c:	4313      	orrs	r3, r2
 800a97e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a980:	f7f9 fd2e 	bl	80043e0 <HAL_GetTick>
 800a984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a986:	e00a      	b.n	800a99e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a988:	f7f9 fd2a 	bl	80043e0 <HAL_GetTick>
 800a98c:	4602      	mov	r2, r0
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	1ad3      	subs	r3, r2, r3
 800a992:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a996:	4293      	cmp	r3, r2
 800a998:	d901      	bls.n	800a99e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800a99a:	2303      	movs	r3, #3
 800a99c:	e095      	b.n	800aaca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a99e:	4b4e      	ldr	r3, [pc, #312]	@ (800aad8 <HAL_RCC_ClockConfig+0x264>)
 800a9a0:	689b      	ldr	r3, [r3, #8]
 800a9a2:	f003 020c 	and.w	r2, r3, #12
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	009b      	lsls	r3, r3, #2
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d1eb      	bne.n	800a988 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f003 0302 	and.w	r3, r3, #2
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d023      	beq.n	800aa04 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f003 0304 	and.w	r3, r3, #4
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d005      	beq.n	800a9d4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a9c8:	4b43      	ldr	r3, [pc, #268]	@ (800aad8 <HAL_RCC_ClockConfig+0x264>)
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	4a42      	ldr	r2, [pc, #264]	@ (800aad8 <HAL_RCC_ClockConfig+0x264>)
 800a9ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a9d2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f003 0308 	and.w	r3, r3, #8
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d007      	beq.n	800a9f0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800a9e0:	4b3d      	ldr	r3, [pc, #244]	@ (800aad8 <HAL_RCC_ClockConfig+0x264>)
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a9e8:	4a3b      	ldr	r2, [pc, #236]	@ (800aad8 <HAL_RCC_ClockConfig+0x264>)
 800a9ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a9ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a9f0:	4b39      	ldr	r3, [pc, #228]	@ (800aad8 <HAL_RCC_ClockConfig+0x264>)
 800a9f2:	689b      	ldr	r3, [r3, #8]
 800a9f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	4936      	ldr	r1, [pc, #216]	@ (800aad8 <HAL_RCC_ClockConfig+0x264>)
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	608b      	str	r3, [r1, #8]
 800aa02:	e008      	b.n	800aa16 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	2b80      	cmp	r3, #128	@ 0x80
 800aa08:	d105      	bne.n	800aa16 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800aa0a:	4b33      	ldr	r3, [pc, #204]	@ (800aad8 <HAL_RCC_ClockConfig+0x264>)
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	4a32      	ldr	r2, [pc, #200]	@ (800aad8 <HAL_RCC_ClockConfig+0x264>)
 800aa10:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800aa14:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800aa16:	4b2f      	ldr	r3, [pc, #188]	@ (800aad4 <HAL_RCC_ClockConfig+0x260>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f003 030f 	and.w	r3, r3, #15
 800aa1e:	683a      	ldr	r2, [r7, #0]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d21d      	bcs.n	800aa60 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa24:	4b2b      	ldr	r3, [pc, #172]	@ (800aad4 <HAL_RCC_ClockConfig+0x260>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f023 020f 	bic.w	r2, r3, #15
 800aa2c:	4929      	ldr	r1, [pc, #164]	@ (800aad4 <HAL_RCC_ClockConfig+0x260>)
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	4313      	orrs	r3, r2
 800aa32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800aa34:	f7f9 fcd4 	bl	80043e0 <HAL_GetTick>
 800aa38:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa3a:	e00a      	b.n	800aa52 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa3c:	f7f9 fcd0 	bl	80043e0 <HAL_GetTick>
 800aa40:	4602      	mov	r2, r0
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	1ad3      	subs	r3, r2, r3
 800aa46:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d901      	bls.n	800aa52 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800aa4e:	2303      	movs	r3, #3
 800aa50:	e03b      	b.n	800aaca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa52:	4b20      	ldr	r3, [pc, #128]	@ (800aad4 <HAL_RCC_ClockConfig+0x260>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f003 030f 	and.w	r3, r3, #15
 800aa5a:	683a      	ldr	r2, [r7, #0]
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d1ed      	bne.n	800aa3c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f003 0304 	and.w	r3, r3, #4
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d008      	beq.n	800aa7e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aa6c:	4b1a      	ldr	r3, [pc, #104]	@ (800aad8 <HAL_RCC_ClockConfig+0x264>)
 800aa6e:	689b      	ldr	r3, [r3, #8]
 800aa70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	68db      	ldr	r3, [r3, #12]
 800aa78:	4917      	ldr	r1, [pc, #92]	@ (800aad8 <HAL_RCC_ClockConfig+0x264>)
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f003 0308 	and.w	r3, r3, #8
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d009      	beq.n	800aa9e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800aa8a:	4b13      	ldr	r3, [pc, #76]	@ (800aad8 <HAL_RCC_ClockConfig+0x264>)
 800aa8c:	689b      	ldr	r3, [r3, #8]
 800aa8e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	691b      	ldr	r3, [r3, #16]
 800aa96:	00db      	lsls	r3, r3, #3
 800aa98:	490f      	ldr	r1, [pc, #60]	@ (800aad8 <HAL_RCC_ClockConfig+0x264>)
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800aa9e:	f000 f825 	bl	800aaec <HAL_RCC_GetSysClockFreq>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	4b0c      	ldr	r3, [pc, #48]	@ (800aad8 <HAL_RCC_ClockConfig+0x264>)
 800aaa6:	689b      	ldr	r3, [r3, #8]
 800aaa8:	091b      	lsrs	r3, r3, #4
 800aaaa:	f003 030f 	and.w	r3, r3, #15
 800aaae:	490c      	ldr	r1, [pc, #48]	@ (800aae0 <HAL_RCC_ClockConfig+0x26c>)
 800aab0:	5ccb      	ldrb	r3, [r1, r3]
 800aab2:	f003 031f 	and.w	r3, r3, #31
 800aab6:	fa22 f303 	lsr.w	r3, r2, r3
 800aaba:	4a0a      	ldr	r2, [pc, #40]	@ (800aae4 <HAL_RCC_ClockConfig+0x270>)
 800aabc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800aabe:	4b0a      	ldr	r3, [pc, #40]	@ (800aae8 <HAL_RCC_ClockConfig+0x274>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7f9 fc40 	bl	8004348 <HAL_InitTick>
 800aac8:	4603      	mov	r3, r0
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3718      	adds	r7, #24
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}
 800aad2:	bf00      	nop
 800aad4:	40022000 	.word	0x40022000
 800aad8:	40021000 	.word	0x40021000
 800aadc:	04c4b400 	.word	0x04c4b400
 800aae0:	08024a24 	.word	0x08024a24
 800aae4:	20000044 	.word	0x20000044
 800aae8:	2000004c 	.word	0x2000004c

0800aaec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b087      	sub	sp, #28
 800aaf0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800aaf2:	4b2c      	ldr	r3, [pc, #176]	@ (800aba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800aaf4:	689b      	ldr	r3, [r3, #8]
 800aaf6:	f003 030c 	and.w	r3, r3, #12
 800aafa:	2b04      	cmp	r3, #4
 800aafc:	d102      	bne.n	800ab04 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800aafe:	4b2a      	ldr	r3, [pc, #168]	@ (800aba8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800ab00:	613b      	str	r3, [r7, #16]
 800ab02:	e047      	b.n	800ab94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800ab04:	4b27      	ldr	r3, [pc, #156]	@ (800aba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ab06:	689b      	ldr	r3, [r3, #8]
 800ab08:	f003 030c 	and.w	r3, r3, #12
 800ab0c:	2b08      	cmp	r3, #8
 800ab0e:	d102      	bne.n	800ab16 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ab10:	4b26      	ldr	r3, [pc, #152]	@ (800abac <HAL_RCC_GetSysClockFreq+0xc0>)
 800ab12:	613b      	str	r3, [r7, #16]
 800ab14:	e03e      	b.n	800ab94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800ab16:	4b23      	ldr	r3, [pc, #140]	@ (800aba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ab18:	689b      	ldr	r3, [r3, #8]
 800ab1a:	f003 030c 	and.w	r3, r3, #12
 800ab1e:	2b0c      	cmp	r3, #12
 800ab20:	d136      	bne.n	800ab90 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ab22:	4b20      	ldr	r3, [pc, #128]	@ (800aba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ab24:	68db      	ldr	r3, [r3, #12]
 800ab26:	f003 0303 	and.w	r3, r3, #3
 800ab2a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ab2c:	4b1d      	ldr	r3, [pc, #116]	@ (800aba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ab2e:	68db      	ldr	r3, [r3, #12]
 800ab30:	091b      	lsrs	r3, r3, #4
 800ab32:	f003 030f 	and.w	r3, r3, #15
 800ab36:	3301      	adds	r3, #1
 800ab38:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2b03      	cmp	r3, #3
 800ab3e:	d10c      	bne.n	800ab5a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ab40:	4a1a      	ldr	r2, [pc, #104]	@ (800abac <HAL_RCC_GetSysClockFreq+0xc0>)
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab48:	4a16      	ldr	r2, [pc, #88]	@ (800aba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ab4a:	68d2      	ldr	r2, [r2, #12]
 800ab4c:	0a12      	lsrs	r2, r2, #8
 800ab4e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ab52:	fb02 f303 	mul.w	r3, r2, r3
 800ab56:	617b      	str	r3, [r7, #20]
      break;
 800ab58:	e00c      	b.n	800ab74 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ab5a:	4a13      	ldr	r2, [pc, #76]	@ (800aba8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab62:	4a10      	ldr	r2, [pc, #64]	@ (800aba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ab64:	68d2      	ldr	r2, [r2, #12]
 800ab66:	0a12      	lsrs	r2, r2, #8
 800ab68:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ab6c:	fb02 f303 	mul.w	r3, r2, r3
 800ab70:	617b      	str	r3, [r7, #20]
      break;
 800ab72:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ab74:	4b0b      	ldr	r3, [pc, #44]	@ (800aba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ab76:	68db      	ldr	r3, [r3, #12]
 800ab78:	0e5b      	lsrs	r3, r3, #25
 800ab7a:	f003 0303 	and.w	r3, r3, #3
 800ab7e:	3301      	adds	r3, #1
 800ab80:	005b      	lsls	r3, r3, #1
 800ab82:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800ab84:	697a      	ldr	r2, [r7, #20]
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab8c:	613b      	str	r3, [r7, #16]
 800ab8e:	e001      	b.n	800ab94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800ab90:	2300      	movs	r3, #0
 800ab92:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800ab94:	693b      	ldr	r3, [r7, #16]
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	371c      	adds	r7, #28
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr
 800aba2:	bf00      	nop
 800aba4:	40021000 	.word	0x40021000
 800aba8:	00f42400 	.word	0x00f42400
 800abac:	007a1200 	.word	0x007a1200

0800abb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800abb0:	b480      	push	{r7}
 800abb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800abb4:	4b03      	ldr	r3, [pc, #12]	@ (800abc4 <HAL_RCC_GetHCLKFreq+0x14>)
 800abb6:	681b      	ldr	r3, [r3, #0]
}
 800abb8:	4618      	mov	r0, r3
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr
 800abc2:	bf00      	nop
 800abc4:	20000044 	.word	0x20000044

0800abc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800abcc:	f7ff fff0 	bl	800abb0 <HAL_RCC_GetHCLKFreq>
 800abd0:	4602      	mov	r2, r0
 800abd2:	4b06      	ldr	r3, [pc, #24]	@ (800abec <HAL_RCC_GetPCLK1Freq+0x24>)
 800abd4:	689b      	ldr	r3, [r3, #8]
 800abd6:	0a1b      	lsrs	r3, r3, #8
 800abd8:	f003 0307 	and.w	r3, r3, #7
 800abdc:	4904      	ldr	r1, [pc, #16]	@ (800abf0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800abde:	5ccb      	ldrb	r3, [r1, r3]
 800abe0:	f003 031f 	and.w	r3, r3, #31
 800abe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800abe8:	4618      	mov	r0, r3
 800abea:	bd80      	pop	{r7, pc}
 800abec:	40021000 	.word	0x40021000
 800abf0:	08024a34 	.word	0x08024a34

0800abf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800abf8:	f7ff ffda 	bl	800abb0 <HAL_RCC_GetHCLKFreq>
 800abfc:	4602      	mov	r2, r0
 800abfe:	4b06      	ldr	r3, [pc, #24]	@ (800ac18 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ac00:	689b      	ldr	r3, [r3, #8]
 800ac02:	0adb      	lsrs	r3, r3, #11
 800ac04:	f003 0307 	and.w	r3, r3, #7
 800ac08:	4904      	ldr	r1, [pc, #16]	@ (800ac1c <HAL_RCC_GetPCLK2Freq+0x28>)
 800ac0a:	5ccb      	ldrb	r3, [r1, r3]
 800ac0c:	f003 031f 	and.w	r3, r3, #31
 800ac10:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	bd80      	pop	{r7, pc}
 800ac18:	40021000 	.word	0x40021000
 800ac1c:	08024a34 	.word	0x08024a34

0800ac20 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800ac20:	b480      	push	{r7}
 800ac22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 800ac24:	4b05      	ldr	r3, [pc, #20]	@ (800ac3c <HAL_RCC_EnableCSS+0x1c>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4a04      	ldr	r2, [pc, #16]	@ (800ac3c <HAL_RCC_EnableCSS+0x1c>)
 800ac2a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ac2e:	6013      	str	r3, [r2, #0]
}
 800ac30:	bf00      	nop
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr
 800ac3a:	bf00      	nop
 800ac3c:	40021000 	.word	0x40021000

0800ac40 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800ac44:	4b07      	ldr	r3, [pc, #28]	@ (800ac64 <HAL_RCC_NMI_IRQHandler+0x24>)
 800ac46:	69db      	ldr	r3, [r3, #28]
 800ac48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac50:	d105      	bne.n	800ac5e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800ac52:	f000 f809 	bl	800ac68 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800ac56:	4b03      	ldr	r3, [pc, #12]	@ (800ac64 <HAL_RCC_NMI_IRQHandler+0x24>)
 800ac58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ac5c:	621a      	str	r2, [r3, #32]
  }
}
 800ac5e:	bf00      	nop
 800ac60:	bd80      	pop	{r7, pc}
 800ac62:	bf00      	nop
 800ac64:	40021000 	.word	0x40021000

0800ac68 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 800ac6c:	bf00      	nop
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac74:	4770      	bx	lr
	...

0800ac78 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b087      	sub	sp, #28
 800ac7c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ac7e:	4b1e      	ldr	r3, [pc, #120]	@ (800acf8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ac80:	68db      	ldr	r3, [r3, #12]
 800ac82:	f003 0303 	and.w	r3, r3, #3
 800ac86:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ac88:	4b1b      	ldr	r3, [pc, #108]	@ (800acf8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ac8a:	68db      	ldr	r3, [r3, #12]
 800ac8c:	091b      	lsrs	r3, r3, #4
 800ac8e:	f003 030f 	and.w	r3, r3, #15
 800ac92:	3301      	adds	r3, #1
 800ac94:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	2b03      	cmp	r3, #3
 800ac9a:	d10c      	bne.n	800acb6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ac9c:	4a17      	ldr	r2, [pc, #92]	@ (800acfc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aca4:	4a14      	ldr	r2, [pc, #80]	@ (800acf8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800aca6:	68d2      	ldr	r2, [r2, #12]
 800aca8:	0a12      	lsrs	r2, r2, #8
 800acaa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800acae:	fb02 f303 	mul.w	r3, r2, r3
 800acb2:	617b      	str	r3, [r7, #20]
    break;
 800acb4:	e00c      	b.n	800acd0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800acb6:	4a12      	ldr	r2, [pc, #72]	@ (800ad00 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	fbb2 f3f3 	udiv	r3, r2, r3
 800acbe:	4a0e      	ldr	r2, [pc, #56]	@ (800acf8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800acc0:	68d2      	ldr	r2, [r2, #12]
 800acc2:	0a12      	lsrs	r2, r2, #8
 800acc4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800acc8:	fb02 f303 	mul.w	r3, r2, r3
 800accc:	617b      	str	r3, [r7, #20]
    break;
 800acce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800acd0:	4b09      	ldr	r3, [pc, #36]	@ (800acf8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800acd2:	68db      	ldr	r3, [r3, #12]
 800acd4:	0e5b      	lsrs	r3, r3, #25
 800acd6:	f003 0303 	and.w	r3, r3, #3
 800acda:	3301      	adds	r3, #1
 800acdc:	005b      	lsls	r3, r3, #1
 800acde:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800ace0:	697a      	ldr	r2, [r7, #20]
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ace8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800acea:	687b      	ldr	r3, [r7, #4]
}
 800acec:	4618      	mov	r0, r3
 800acee:	371c      	adds	r7, #28
 800acf0:	46bd      	mov	sp, r7
 800acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf6:	4770      	bx	lr
 800acf8:	40021000 	.word	0x40021000
 800acfc:	007a1200 	.word	0x007a1200
 800ad00:	00f42400 	.word	0x00f42400

0800ad04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b086      	sub	sp, #24
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ad10:	2300      	movs	r3, #0
 800ad12:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	f000 8098 	beq.w	800ae52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ad22:	2300      	movs	r3, #0
 800ad24:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ad26:	4b43      	ldr	r3, [pc, #268]	@ (800ae34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ad28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d10d      	bne.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ad32:	4b40      	ldr	r3, [pc, #256]	@ (800ae34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ad34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad36:	4a3f      	ldr	r2, [pc, #252]	@ (800ae34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ad38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad3c:	6593      	str	r3, [r2, #88]	@ 0x58
 800ad3e:	4b3d      	ldr	r3, [pc, #244]	@ (800ae34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ad40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ad46:	60bb      	str	r3, [r7, #8]
 800ad48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ad4e:	4b3a      	ldr	r3, [pc, #232]	@ (800ae38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4a39      	ldr	r2, [pc, #228]	@ (800ae38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ad54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ad58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ad5a:	f7f9 fb41 	bl	80043e0 <HAL_GetTick>
 800ad5e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ad60:	e009      	b.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ad62:	f7f9 fb3d 	bl	80043e0 <HAL_GetTick>
 800ad66:	4602      	mov	r2, r0
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	1ad3      	subs	r3, r2, r3
 800ad6c:	2b02      	cmp	r3, #2
 800ad6e:	d902      	bls.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800ad70:	2303      	movs	r3, #3
 800ad72:	74fb      	strb	r3, [r7, #19]
        break;
 800ad74:	e005      	b.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ad76:	4b30      	ldr	r3, [pc, #192]	@ (800ae38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d0ef      	beq.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800ad82:	7cfb      	ldrb	r3, [r7, #19]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d159      	bne.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ad88:	4b2a      	ldr	r3, [pc, #168]	@ (800ae34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ad8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad92:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d01e      	beq.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad9e:	697a      	ldr	r2, [r7, #20]
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d019      	beq.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800ada4:	4b23      	ldr	r3, [pc, #140]	@ (800ae34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ada6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800adae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800adb0:	4b20      	ldr	r3, [pc, #128]	@ (800ae34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800adb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adb6:	4a1f      	ldr	r2, [pc, #124]	@ (800ae34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800adb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800adbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800adc0:	4b1c      	ldr	r3, [pc, #112]	@ (800ae34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800adc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adc6:	4a1b      	ldr	r2, [pc, #108]	@ (800ae34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800adc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800adcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800add0:	4a18      	ldr	r2, [pc, #96]	@ (800ae34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	f003 0301 	and.w	r3, r3, #1
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d016      	beq.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ade2:	f7f9 fafd 	bl	80043e0 <HAL_GetTick>
 800ade6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ade8:	e00b      	b.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800adea:	f7f9 faf9 	bl	80043e0 <HAL_GetTick>
 800adee:	4602      	mov	r2, r0
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	1ad3      	subs	r3, r2, r3
 800adf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d902      	bls.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800adfc:	2303      	movs	r3, #3
 800adfe:	74fb      	strb	r3, [r7, #19]
            break;
 800ae00:	e006      	b.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ae02:	4b0c      	ldr	r3, [pc, #48]	@ (800ae34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ae04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae08:	f003 0302 	and.w	r3, r3, #2
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d0ec      	beq.n	800adea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800ae10:	7cfb      	ldrb	r3, [r7, #19]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d10b      	bne.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ae16:	4b07      	ldr	r3, [pc, #28]	@ (800ae34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ae18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae24:	4903      	ldr	r1, [pc, #12]	@ (800ae34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ae26:	4313      	orrs	r3, r2
 800ae28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800ae2c:	e008      	b.n	800ae40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ae2e:	7cfb      	ldrb	r3, [r7, #19]
 800ae30:	74bb      	strb	r3, [r7, #18]
 800ae32:	e005      	b.n	800ae40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800ae34:	40021000 	.word	0x40021000
 800ae38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae3c:	7cfb      	ldrb	r3, [r7, #19]
 800ae3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ae40:	7c7b      	ldrb	r3, [r7, #17]
 800ae42:	2b01      	cmp	r3, #1
 800ae44:	d105      	bne.n	800ae52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ae46:	4ba7      	ldr	r3, [pc, #668]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae4a:	4aa6      	ldr	r2, [pc, #664]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ae50:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f003 0301 	and.w	r3, r3, #1
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d00a      	beq.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ae5e:	4ba1      	ldr	r3, [pc, #644]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae64:	f023 0203 	bic.w	r2, r3, #3
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	499d      	ldr	r1, [pc, #628]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f003 0302 	and.w	r3, r3, #2
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d00a      	beq.n	800ae96 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ae80:	4b98      	ldr	r3, [pc, #608]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae86:	f023 020c 	bic.w	r2, r3, #12
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	689b      	ldr	r3, [r3, #8]
 800ae8e:	4995      	ldr	r1, [pc, #596]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae90:	4313      	orrs	r3, r2
 800ae92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f003 0304 	and.w	r3, r3, #4
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d00a      	beq.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800aea2:	4b90      	ldr	r3, [pc, #576]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aea8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	68db      	ldr	r3, [r3, #12]
 800aeb0:	498c      	ldr	r1, [pc, #560]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f003 0308 	and.w	r3, r3, #8
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d00a      	beq.n	800aeda <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800aec4:	4b87      	ldr	r3, [pc, #540]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aeca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	691b      	ldr	r3, [r3, #16]
 800aed2:	4984      	ldr	r1, [pc, #528]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aed4:	4313      	orrs	r3, r2
 800aed6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f003 0310 	and.w	r3, r3, #16
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d00a      	beq.n	800aefc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800aee6:	4b7f      	ldr	r3, [pc, #508]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aeec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	695b      	ldr	r3, [r3, #20]
 800aef4:	497b      	ldr	r1, [pc, #492]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aef6:	4313      	orrs	r3, r2
 800aef8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f003 0320 	and.w	r3, r3, #32
 800af04:	2b00      	cmp	r3, #0
 800af06:	d00a      	beq.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800af08:	4b76      	ldr	r3, [pc, #472]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800af0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af0e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	699b      	ldr	r3, [r3, #24]
 800af16:	4973      	ldr	r1, [pc, #460]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800af18:	4313      	orrs	r3, r2
 800af1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af26:	2b00      	cmp	r3, #0
 800af28:	d00a      	beq.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800af2a:	4b6e      	ldr	r3, [pc, #440]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800af2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af30:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	69db      	ldr	r3, [r3, #28]
 800af38:	496a      	ldr	r1, [pc, #424]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800af3a:	4313      	orrs	r3, r2
 800af3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d00a      	beq.n	800af62 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800af4c:	4b65      	ldr	r3, [pc, #404]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800af4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af52:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6a1b      	ldr	r3, [r3, #32]
 800af5a:	4962      	ldr	r1, [pc, #392]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800af5c:	4313      	orrs	r3, r2
 800af5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d00a      	beq.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800af6e:	4b5d      	ldr	r3, [pc, #372]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800af70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af74:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af7c:	4959      	ldr	r1, [pc, #356]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800af7e:	4313      	orrs	r3, r2
 800af80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d00a      	beq.n	800afa6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800af90:	4b54      	ldr	r3, [pc, #336]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800af92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800af96:	f023 0203 	bic.w	r2, r3, #3
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af9e:	4951      	ldr	r1, [pc, #324]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800afa0:	4313      	orrs	r3, r2
 800afa2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d00a      	beq.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800afb2:	4b4c      	ldr	r3, [pc, #304]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800afb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afb8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afc0:	4948      	ldr	r1, [pc, #288]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800afc2:	4313      	orrs	r3, r2
 800afc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d015      	beq.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800afd4:	4b43      	ldr	r3, [pc, #268]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800afd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afda:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afe2:	4940      	ldr	r1, [pc, #256]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800afe4:	4313      	orrs	r3, r2
 800afe6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aff2:	d105      	bne.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aff4:	4b3b      	ldr	r3, [pc, #236]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aff6:	68db      	ldr	r3, [r3, #12]
 800aff8:	4a3a      	ldr	r2, [pc, #232]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800affa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800affe:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d015      	beq.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b00c:	4b35      	ldr	r3, [pc, #212]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b00e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b012:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b01a:	4932      	ldr	r1, [pc, #200]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b01c:	4313      	orrs	r3, r2
 800b01e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b026:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b02a:	d105      	bne.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b02c:	4b2d      	ldr	r3, [pc, #180]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b02e:	68db      	ldr	r3, [r3, #12]
 800b030:	4a2c      	ldr	r2, [pc, #176]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b032:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b036:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b040:	2b00      	cmp	r3, #0
 800b042:	d015      	beq.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b044:	4b27      	ldr	r3, [pc, #156]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b04a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b052:	4924      	ldr	r1, [pc, #144]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b054:	4313      	orrs	r3, r2
 800b056:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b05e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b062:	d105      	bne.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b064:	4b1f      	ldr	r3, [pc, #124]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b066:	68db      	ldr	r3, [r3, #12]
 800b068:	4a1e      	ldr	r2, [pc, #120]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b06a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b06e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d015      	beq.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b07c:	4b19      	ldr	r3, [pc, #100]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b07e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b082:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b08a:	4916      	ldr	r1, [pc, #88]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b08c:	4313      	orrs	r3, r2
 800b08e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b096:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b09a:	d105      	bne.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b09c:	4b11      	ldr	r3, [pc, #68]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b09e:	68db      	ldr	r3, [r3, #12]
 800b0a0:	4a10      	ldr	r2, [pc, #64]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b0a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b0a6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d019      	beq.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b0b4:	4b0b      	ldr	r3, [pc, #44]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b0b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0c2:	4908      	ldr	r1, [pc, #32]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b0d2:	d109      	bne.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b0d4:	4b03      	ldr	r3, [pc, #12]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b0d6:	68db      	ldr	r3, [r3, #12]
 800b0d8:	4a02      	ldr	r2, [pc, #8]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b0da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b0de:	60d3      	str	r3, [r2, #12]
 800b0e0:	e002      	b.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800b0e2:	bf00      	nop
 800b0e4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d015      	beq.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800b0f4:	4b29      	ldr	r3, [pc, #164]	@ (800b19c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b0f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0fa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b102:	4926      	ldr	r1, [pc, #152]	@ (800b19c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b104:	4313      	orrs	r3, r2
 800b106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b10e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b112:	d105      	bne.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b114:	4b21      	ldr	r3, [pc, #132]	@ (800b19c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b116:	68db      	ldr	r3, [r3, #12]
 800b118:	4a20      	ldr	r2, [pc, #128]	@ (800b19c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b11a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b11e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d015      	beq.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800b12c:	4b1b      	ldr	r3, [pc, #108]	@ (800b19c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b12e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b132:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b13a:	4918      	ldr	r1, [pc, #96]	@ (800b19c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b13c:	4313      	orrs	r3, r2
 800b13e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b146:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b14a:	d105      	bne.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b14c:	4b13      	ldr	r3, [pc, #76]	@ (800b19c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b14e:	68db      	ldr	r3, [r3, #12]
 800b150:	4a12      	ldr	r2, [pc, #72]	@ (800b19c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b152:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b156:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b160:	2b00      	cmp	r3, #0
 800b162:	d015      	beq.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b164:	4b0d      	ldr	r3, [pc, #52]	@ (800b19c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b166:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b16a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b172:	490a      	ldr	r1, [pc, #40]	@ (800b19c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b174:	4313      	orrs	r3, r2
 800b176:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b17e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b182:	d105      	bne.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b184:	4b05      	ldr	r3, [pc, #20]	@ (800b19c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	4a04      	ldr	r2, [pc, #16]	@ (800b19c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b18a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b18e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800b190:	7cbb      	ldrb	r3, [r7, #18]
}
 800b192:	4618      	mov	r0, r3
 800b194:	3718      	adds	r7, #24
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
 800b19a:	bf00      	nop
 800b19c:	40021000 	.word	0x40021000

0800b1a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b084      	sub	sp, #16
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d101      	bne.n	800b1b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	e09d      	b.n	800b2ee <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d108      	bne.n	800b1cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b1c2:	d009      	beq.n	800b1d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	61da      	str	r2, [r3, #28]
 800b1ca:	e005      	b.n	800b1d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d106      	bne.n	800b1f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f7f8 fb90 	bl	8003918 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2202      	movs	r2, #2
 800b1fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	681a      	ldr	r2, [r3, #0]
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b20e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	68db      	ldr	r3, [r3, #12]
 800b214:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800b218:	d902      	bls.n	800b220 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b21a:	2300      	movs	r3, #0
 800b21c:	60fb      	str	r3, [r7, #12]
 800b21e:	e002      	b.n	800b226 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b220:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b224:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	68db      	ldr	r3, [r3, #12]
 800b22a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800b22e:	d007      	beq.n	800b240 <HAL_SPI_Init+0xa0>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	68db      	ldr	r3, [r3, #12]
 800b234:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800b238:	d002      	beq.n	800b240 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2200      	movs	r2, #0
 800b23e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	689b      	ldr	r3, [r3, #8]
 800b24c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800b250:	431a      	orrs	r2, r3
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	691b      	ldr	r3, [r3, #16]
 800b256:	f003 0302 	and.w	r3, r3, #2
 800b25a:	431a      	orrs	r2, r3
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	695b      	ldr	r3, [r3, #20]
 800b260:	f003 0301 	and.w	r3, r3, #1
 800b264:	431a      	orrs	r2, r3
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	699b      	ldr	r3, [r3, #24]
 800b26a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b26e:	431a      	orrs	r2, r3
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	69db      	ldr	r3, [r3, #28]
 800b274:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b278:	431a      	orrs	r2, r3
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6a1b      	ldr	r3, [r3, #32]
 800b27e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b282:	ea42 0103 	orr.w	r1, r2, r3
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b28a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	430a      	orrs	r2, r1
 800b294:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	699b      	ldr	r3, [r3, #24]
 800b29a:	0c1b      	lsrs	r3, r3, #16
 800b29c:	f003 0204 	and.w	r2, r3, #4
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2a4:	f003 0310 	and.w	r3, r3, #16
 800b2a8:	431a      	orrs	r2, r3
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2ae:	f003 0308 	and.w	r3, r3, #8
 800b2b2:	431a      	orrs	r2, r3
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	68db      	ldr	r3, [r3, #12]
 800b2b8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800b2bc:	ea42 0103 	orr.w	r1, r2, r3
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	430a      	orrs	r2, r1
 800b2cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	69da      	ldr	r2, [r3, #28]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b2dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800b2ec:	2300      	movs	r3, #0
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3710      	adds	r7, #16
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}

0800b2f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b2f6:	b580      	push	{r7, lr}
 800b2f8:	b088      	sub	sp, #32
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	60f8      	str	r0, [r7, #12]
 800b2fe:	60b9      	str	r1, [r7, #8]
 800b300:	603b      	str	r3, [r7, #0]
 800b302:	4613      	mov	r3, r2
 800b304:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b306:	f7f9 f86b 	bl	80043e0 <HAL_GetTick>
 800b30a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800b30c:	88fb      	ldrh	r3, [r7, #6]
 800b30e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800b316:	b2db      	uxtb	r3, r3
 800b318:	2b01      	cmp	r3, #1
 800b31a:	d001      	beq.n	800b320 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800b31c:	2302      	movs	r3, #2
 800b31e:	e15c      	b.n	800b5da <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d002      	beq.n	800b32c <HAL_SPI_Transmit+0x36>
 800b326:	88fb      	ldrh	r3, [r7, #6]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d101      	bne.n	800b330 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800b32c:	2301      	movs	r3, #1
 800b32e:	e154      	b.n	800b5da <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b336:	2b01      	cmp	r3, #1
 800b338:	d101      	bne.n	800b33e <HAL_SPI_Transmit+0x48>
 800b33a:	2302      	movs	r3, #2
 800b33c:	e14d      	b.n	800b5da <HAL_SPI_Transmit+0x2e4>
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2201      	movs	r2, #1
 800b342:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2203      	movs	r2, #3
 800b34a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	2200      	movs	r2, #0
 800b352:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	68ba      	ldr	r2, [r7, #8]
 800b358:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	88fa      	ldrh	r2, [r7, #6]
 800b35e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	88fa      	ldrh	r2, [r7, #6]
 800b364:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2200      	movs	r2, #0
 800b36a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2200      	movs	r2, #0
 800b370:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2200      	movs	r2, #0
 800b378:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	2200      	movs	r2, #0
 800b380:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2200      	movs	r2, #0
 800b386:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	689b      	ldr	r3, [r3, #8]
 800b38c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b390:	d10f      	bne.n	800b3b2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	681a      	ldr	r2, [r3, #0]
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b3a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	681a      	ldr	r2, [r3, #0]
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b3b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3bc:	2b40      	cmp	r3, #64	@ 0x40
 800b3be:	d007      	beq.n	800b3d0 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	681a      	ldr	r2, [r3, #0]
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b3ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	68db      	ldr	r3, [r3, #12]
 800b3d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800b3d8:	d952      	bls.n	800b480 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d002      	beq.n	800b3e8 <HAL_SPI_Transmit+0xf2>
 800b3e2:	8b7b      	ldrh	r3, [r7, #26]
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	d145      	bne.n	800b474 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3ec:	881a      	ldrh	r2, [r3, #0]
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3f8:	1c9a      	adds	r2, r3, #2
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b402:	b29b      	uxth	r3, r3
 800b404:	3b01      	subs	r3, #1
 800b406:	b29a      	uxth	r2, r3
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b40c:	e032      	b.n	800b474 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	689b      	ldr	r3, [r3, #8]
 800b414:	f003 0302 	and.w	r3, r3, #2
 800b418:	2b02      	cmp	r3, #2
 800b41a:	d112      	bne.n	800b442 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b420:	881a      	ldrh	r2, [r3, #0]
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b42c:	1c9a      	adds	r2, r3, #2
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b436:	b29b      	uxth	r3, r3
 800b438:	3b01      	subs	r3, #1
 800b43a:	b29a      	uxth	r2, r3
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b440:	e018      	b.n	800b474 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b442:	f7f8 ffcd 	bl	80043e0 <HAL_GetTick>
 800b446:	4602      	mov	r2, r0
 800b448:	69fb      	ldr	r3, [r7, #28]
 800b44a:	1ad3      	subs	r3, r2, r3
 800b44c:	683a      	ldr	r2, [r7, #0]
 800b44e:	429a      	cmp	r2, r3
 800b450:	d803      	bhi.n	800b45a <HAL_SPI_Transmit+0x164>
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b458:	d102      	bne.n	800b460 <HAL_SPI_Transmit+0x16a>
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d109      	bne.n	800b474 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2201      	movs	r2, #1
 800b464:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2200      	movs	r2, #0
 800b46c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800b470:	2303      	movs	r3, #3
 800b472:	e0b2      	b.n	800b5da <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b478:	b29b      	uxth	r3, r3
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d1c7      	bne.n	800b40e <HAL_SPI_Transmit+0x118>
 800b47e:	e083      	b.n	800b588 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d002      	beq.n	800b48e <HAL_SPI_Transmit+0x198>
 800b488:	8b7b      	ldrh	r3, [r7, #26]
 800b48a:	2b01      	cmp	r3, #1
 800b48c:	d177      	bne.n	800b57e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b492:	b29b      	uxth	r3, r3
 800b494:	2b01      	cmp	r3, #1
 800b496:	d912      	bls.n	800b4be <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b49c:	881a      	ldrh	r2, [r3, #0]
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4a8:	1c9a      	adds	r2, r3, #2
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	3b02      	subs	r3, #2
 800b4b6:	b29a      	uxth	r2, r3
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b4bc:	e05f      	b.n	800b57e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	330c      	adds	r3, #12
 800b4c8:	7812      	ldrb	r2, [r2, #0]
 800b4ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4d0:	1c5a      	adds	r2, r3, #1
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b4da:	b29b      	uxth	r3, r3
 800b4dc:	3b01      	subs	r3, #1
 800b4de:	b29a      	uxth	r2, r3
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800b4e4:	e04b      	b.n	800b57e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	689b      	ldr	r3, [r3, #8]
 800b4ec:	f003 0302 	and.w	r3, r3, #2
 800b4f0:	2b02      	cmp	r3, #2
 800b4f2:	d12b      	bne.n	800b54c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b4f8:	b29b      	uxth	r3, r3
 800b4fa:	2b01      	cmp	r3, #1
 800b4fc:	d912      	bls.n	800b524 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b502:	881a      	ldrh	r2, [r3, #0]
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b50e:	1c9a      	adds	r2, r3, #2
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b518:	b29b      	uxth	r3, r3
 800b51a:	3b02      	subs	r3, #2
 800b51c:	b29a      	uxth	r2, r3
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b522:	e02c      	b.n	800b57e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	330c      	adds	r3, #12
 800b52e:	7812      	ldrb	r2, [r2, #0]
 800b530:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b536:	1c5a      	adds	r2, r3, #1
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b540:	b29b      	uxth	r3, r3
 800b542:	3b01      	subs	r3, #1
 800b544:	b29a      	uxth	r2, r3
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b54a:	e018      	b.n	800b57e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b54c:	f7f8 ff48 	bl	80043e0 <HAL_GetTick>
 800b550:	4602      	mov	r2, r0
 800b552:	69fb      	ldr	r3, [r7, #28]
 800b554:	1ad3      	subs	r3, r2, r3
 800b556:	683a      	ldr	r2, [r7, #0]
 800b558:	429a      	cmp	r2, r3
 800b55a:	d803      	bhi.n	800b564 <HAL_SPI_Transmit+0x26e>
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b562:	d102      	bne.n	800b56a <HAL_SPI_Transmit+0x274>
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d109      	bne.n	800b57e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	2201      	movs	r2, #1
 800b56e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2200      	movs	r2, #0
 800b576:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800b57a:	2303      	movs	r3, #3
 800b57c:	e02d      	b.n	800b5da <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b582:	b29b      	uxth	r3, r3
 800b584:	2b00      	cmp	r3, #0
 800b586:	d1ae      	bne.n	800b4e6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b588:	69fa      	ldr	r2, [r7, #28]
 800b58a:	6839      	ldr	r1, [r7, #0]
 800b58c:	68f8      	ldr	r0, [r7, #12]
 800b58e:	f000 fad5 	bl	800bb3c <SPI_EndRxTxTransaction>
 800b592:	4603      	mov	r3, r0
 800b594:	2b00      	cmp	r3, #0
 800b596:	d002      	beq.n	800b59e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2220      	movs	r2, #32
 800b59c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	689b      	ldr	r3, [r3, #8]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d10a      	bne.n	800b5bc <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	617b      	str	r3, [r7, #20]
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	68db      	ldr	r3, [r3, #12]
 800b5b0:	617b      	str	r3, [r7, #20]
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	689b      	ldr	r3, [r3, #8]
 800b5b8:	617b      	str	r3, [r7, #20]
 800b5ba:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	2201      	movs	r2, #1
 800b5c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d001      	beq.n	800b5d8 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	e000      	b.n	800b5da <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800b5d8:	2300      	movs	r3, #0
  }
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3720      	adds	r7, #32
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
	...

0800b5e4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b084      	sub	sp, #16
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	60f8      	str	r0, [r7, #12]
 800b5ec:	60b9      	str	r1, [r7, #8]
 800b5ee:	4613      	mov	r3, r2
 800b5f0:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800b5f8:	b2db      	uxtb	r3, r3
 800b5fa:	2b01      	cmp	r3, #1
 800b5fc:	d001      	beq.n	800b602 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800b5fe:	2302      	movs	r3, #2
 800b600:	e0d4      	b.n	800b7ac <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d002      	beq.n	800b60e <HAL_SPI_Transmit_DMA+0x2a>
 800b608:	88fb      	ldrh	r3, [r7, #6]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d101      	bne.n	800b612 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800b60e:	2301      	movs	r3, #1
 800b610:	e0cc      	b.n	800b7ac <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b618:	2b01      	cmp	r3, #1
 800b61a:	d101      	bne.n	800b620 <HAL_SPI_Transmit_DMA+0x3c>
 800b61c:	2302      	movs	r3, #2
 800b61e:	e0c5      	b.n	800b7ac <HAL_SPI_Transmit_DMA+0x1c8>
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2201      	movs	r2, #1
 800b624:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2203      	movs	r2, #3
 800b62c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2200      	movs	r2, #0
 800b634:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	68ba      	ldr	r2, [r7, #8]
 800b63a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	88fa      	ldrh	r2, [r7, #6]
 800b640:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	88fa      	ldrh	r2, [r7, #6]
 800b646:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	2200      	movs	r2, #0
 800b64c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2200      	movs	r2, #0
 800b652:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2200      	movs	r2, #0
 800b658:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	2200      	movs	r2, #0
 800b65e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	2200      	movs	r2, #0
 800b666:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	689b      	ldr	r3, [r3, #8]
 800b66e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b672:	d10f      	bne.n	800b694 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b682:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	681a      	ldr	r2, [r3, #0]
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b692:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b698:	4a46      	ldr	r2, [pc, #280]	@ (800b7b4 <HAL_SPI_Transmit_DMA+0x1d0>)
 800b69a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6a0:	4a45      	ldr	r2, [pc, #276]	@ (800b7b8 <HAL_SPI_Transmit_DMA+0x1d4>)
 800b6a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6a8:	4a44      	ldr	r2, [pc, #272]	@ (800b7bc <HAL_SPI_Transmit_DMA+0x1d8>)
 800b6aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	685a      	ldr	r2, [r3, #4]
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b6c2:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800b6cc:	d82d      	bhi.n	800b72a <HAL_SPI_Transmit_DMA+0x146>
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6d2:	699b      	ldr	r3, [r3, #24]
 800b6d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b6d8:	d127      	bne.n	800b72a <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b6de:	b29b      	uxth	r3, r3
 800b6e0:	f003 0301 	and.w	r3, r3, #1
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d10f      	bne.n	800b708 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	685a      	ldr	r2, [r3, #4]
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b6f6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b6fc:	b29b      	uxth	r3, r3
 800b6fe:	085b      	lsrs	r3, r3, #1
 800b700:	b29a      	uxth	r2, r3
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b706:	e010      	b.n	800b72a <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	685a      	ldr	r2, [r3, #4]
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b716:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b71c:	b29b      	uxth	r3, r3
 800b71e:	085b      	lsrs	r3, r3, #1
 800b720:	b29b      	uxth	r3, r3
 800b722:	3301      	adds	r3, #1
 800b724:	b29a      	uxth	r2, r3
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b732:	4619      	mov	r1, r3
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	330c      	adds	r3, #12
 800b73a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b740:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b742:	f7fb febd 	bl	80074c0 <HAL_DMA_Start_IT>
 800b746:	4603      	mov	r3, r0
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d00b      	beq.n	800b764 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b750:	f043 0210 	orr.w	r2, r3, #16
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2200      	movs	r2, #0
 800b75c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800b760:	2301      	movs	r3, #1
 800b762:	e023      	b.n	800b7ac <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b76e:	2b40      	cmp	r3, #64	@ 0x40
 800b770:	d007      	beq.n	800b782 <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	681a      	ldr	r2, [r3, #0]
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b780:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2200      	movs	r2, #0
 800b786:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	685a      	ldr	r2, [r3, #4]
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f042 0220 	orr.w	r2, r2, #32
 800b798:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	685a      	ldr	r2, [r3, #4]
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f042 0202 	orr.w	r2, r2, #2
 800b7a8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b7aa:	2300      	movs	r3, #0
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3710      	adds	r7, #16
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}
 800b7b4:	0800b8a3 	.word	0x0800b8a3
 800b7b8:	0800b7fd 	.word	0x0800b7fd
 800b7bc:	0800b8bf 	.word	0x0800b8bf

0800b7c0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b083      	sub	sp, #12
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800b7c8:	bf00      	nop
 800b7ca:	370c      	adds	r7, #12
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d2:	4770      	bx	lr

0800b7d4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b083      	sub	sp, #12
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800b7dc:	bf00      	nop
 800b7de:	370c      	adds	r7, #12
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr

0800b7e8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b083      	sub	sp, #12
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b7f0:	bf00      	nop
 800b7f2:	370c      	adds	r7, #12
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fa:	4770      	bx	lr

0800b7fc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b086      	sub	sp, #24
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b808:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b80a:	f7f8 fde9 	bl	80043e0 <HAL_GetTick>
 800b80e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f003 0320 	and.w	r3, r3, #32
 800b81a:	2b20      	cmp	r3, #32
 800b81c:	d03b      	beq.n	800b896 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	685a      	ldr	r2, [r3, #4]
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f022 0220 	bic.w	r2, r2, #32
 800b82c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	685a      	ldr	r2, [r3, #4]
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f022 0202 	bic.w	r2, r2, #2
 800b83c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b83e:	693a      	ldr	r2, [r7, #16]
 800b840:	2164      	movs	r1, #100	@ 0x64
 800b842:	6978      	ldr	r0, [r7, #20]
 800b844:	f000 f97a 	bl	800bb3c <SPI_EndRxTxTransaction>
 800b848:	4603      	mov	r3, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d005      	beq.n	800b85a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b852:	f043 0220 	orr.w	r2, r3, #32
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	689b      	ldr	r3, [r3, #8]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d10a      	bne.n	800b878 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b862:	2300      	movs	r3, #0
 800b864:	60fb      	str	r3, [r7, #12]
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	68db      	ldr	r3, [r3, #12]
 800b86c:	60fb      	str	r3, [r7, #12]
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	689b      	ldr	r3, [r3, #8]
 800b874:	60fb      	str	r3, [r7, #12]
 800b876:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	2200      	movs	r2, #0
 800b87c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	2201      	movs	r2, #1
 800b882:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d003      	beq.n	800b896 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b88e:	6978      	ldr	r0, [r7, #20]
 800b890:	f7ff ffaa 	bl	800b7e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b894:	e002      	b.n	800b89c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800b896:	6978      	ldr	r0, [r7, #20]
 800b898:	f7ff ff92 	bl	800b7c0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b89c:	3718      	adds	r7, #24
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}

0800b8a2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b8a2:	b580      	push	{r7, lr}
 800b8a4:	b084      	sub	sp, #16
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8ae:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800b8b0:	68f8      	ldr	r0, [r7, #12]
 800b8b2:	f7ff ff8f 	bl	800b7d4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b8b6:	bf00      	nop
 800b8b8:	3710      	adds	r7, #16
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}

0800b8be <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b8be:	b580      	push	{r7, lr}
 800b8c0:	b084      	sub	sp, #16
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8ca:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	685a      	ldr	r2, [r3, #4]
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f022 0203 	bic.w	r2, r2, #3
 800b8da:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b8e0:	f043 0210 	orr.w	r2, r3, #16
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b8f0:	68f8      	ldr	r0, [r7, #12]
 800b8f2:	f7ff ff79 	bl	800b7e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b8f6:	bf00      	nop
 800b8f8:	3710      	adds	r7, #16
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}
	...

0800b900 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b088      	sub	sp, #32
 800b904:	af00      	add	r7, sp, #0
 800b906:	60f8      	str	r0, [r7, #12]
 800b908:	60b9      	str	r1, [r7, #8]
 800b90a:	603b      	str	r3, [r7, #0]
 800b90c:	4613      	mov	r3, r2
 800b90e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b910:	f7f8 fd66 	bl	80043e0 <HAL_GetTick>
 800b914:	4602      	mov	r2, r0
 800b916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b918:	1a9b      	subs	r3, r3, r2
 800b91a:	683a      	ldr	r2, [r7, #0]
 800b91c:	4413      	add	r3, r2
 800b91e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b920:	f7f8 fd5e 	bl	80043e0 <HAL_GetTick>
 800b924:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b926:	4b39      	ldr	r3, [pc, #228]	@ (800ba0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	015b      	lsls	r3, r3, #5
 800b92c:	0d1b      	lsrs	r3, r3, #20
 800b92e:	69fa      	ldr	r2, [r7, #28]
 800b930:	fb02 f303 	mul.w	r3, r2, r3
 800b934:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b936:	e054      	b.n	800b9e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b93e:	d050      	beq.n	800b9e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b940:	f7f8 fd4e 	bl	80043e0 <HAL_GetTick>
 800b944:	4602      	mov	r2, r0
 800b946:	69bb      	ldr	r3, [r7, #24]
 800b948:	1ad3      	subs	r3, r2, r3
 800b94a:	69fa      	ldr	r2, [r7, #28]
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d902      	bls.n	800b956 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b950:	69fb      	ldr	r3, [r7, #28]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d13d      	bne.n	800b9d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	685a      	ldr	r2, [r3, #4]
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b964:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b96e:	d111      	bne.n	800b994 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	689b      	ldr	r3, [r3, #8]
 800b974:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b978:	d004      	beq.n	800b984 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	689b      	ldr	r3, [r3, #8]
 800b97e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b982:	d107      	bne.n	800b994 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b992:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b998:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b99c:	d10f      	bne.n	800b9be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	681a      	ldr	r2, [r3, #0]
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b9ac:	601a      	str	r2, [r3, #0]
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b9bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	2201      	movs	r2, #1
 800b9c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800b9ce:	2303      	movs	r3, #3
 800b9d0:	e017      	b.n	800ba02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d101      	bne.n	800b9dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	3b01      	subs	r3, #1
 800b9e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	689a      	ldr	r2, [r3, #8]
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	4013      	ands	r3, r2
 800b9ec:	68ba      	ldr	r2, [r7, #8]
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	bf0c      	ite	eq
 800b9f2:	2301      	moveq	r3, #1
 800b9f4:	2300      	movne	r3, #0
 800b9f6:	b2db      	uxtb	r3, r3
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	79fb      	ldrb	r3, [r7, #7]
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d19b      	bne.n	800b938 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ba00:	2300      	movs	r3, #0
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3720      	adds	r7, #32
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	20000044 	.word	0x20000044

0800ba10 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b08a      	sub	sp, #40	@ 0x28
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	60f8      	str	r0, [r7, #12]
 800ba18:	60b9      	str	r1, [r7, #8]
 800ba1a:	607a      	str	r2, [r7, #4]
 800ba1c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ba22:	f7f8 fcdd 	bl	80043e0 <HAL_GetTick>
 800ba26:	4602      	mov	r2, r0
 800ba28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba2a:	1a9b      	subs	r3, r3, r2
 800ba2c:	683a      	ldr	r2, [r7, #0]
 800ba2e:	4413      	add	r3, r2
 800ba30:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800ba32:	f7f8 fcd5 	bl	80043e0 <HAL_GetTick>
 800ba36:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	330c      	adds	r3, #12
 800ba3e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ba40:	4b3d      	ldr	r3, [pc, #244]	@ (800bb38 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800ba42:	681a      	ldr	r2, [r3, #0]
 800ba44:	4613      	mov	r3, r2
 800ba46:	009b      	lsls	r3, r3, #2
 800ba48:	4413      	add	r3, r2
 800ba4a:	00da      	lsls	r2, r3, #3
 800ba4c:	1ad3      	subs	r3, r2, r3
 800ba4e:	0d1b      	lsrs	r3, r3, #20
 800ba50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba52:	fb02 f303 	mul.w	r3, r2, r3
 800ba56:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800ba58:	e060      	b.n	800bb1c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800ba60:	d107      	bne.n	800ba72 <SPI_WaitFifoStateUntilTimeout+0x62>
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d104      	bne.n	800ba72 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800ba68:	69fb      	ldr	r3, [r7, #28]
 800ba6a:	781b      	ldrb	r3, [r3, #0]
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800ba70:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba78:	d050      	beq.n	800bb1c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ba7a:	f7f8 fcb1 	bl	80043e0 <HAL_GetTick>
 800ba7e:	4602      	mov	r2, r0
 800ba80:	6a3b      	ldr	r3, [r7, #32]
 800ba82:	1ad3      	subs	r3, r2, r3
 800ba84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d902      	bls.n	800ba90 <SPI_WaitFifoStateUntilTimeout+0x80>
 800ba8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d13d      	bne.n	800bb0c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	685a      	ldr	r2, [r3, #4]
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ba9e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800baa8:	d111      	bne.n	800bace <SPI_WaitFifoStateUntilTimeout+0xbe>
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	689b      	ldr	r3, [r3, #8]
 800baae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bab2:	d004      	beq.n	800babe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	689b      	ldr	r3, [r3, #8]
 800bab8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800babc:	d107      	bne.n	800bace <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	681a      	ldr	r2, [r3, #0]
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bacc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bad2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bad6:	d10f      	bne.n	800baf8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	681a      	ldr	r2, [r3, #0]
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bae6:	601a      	str	r2, [r3, #0]
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	681a      	ldr	r2, [r3, #0]
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800baf6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2201      	movs	r2, #1
 800bafc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2200      	movs	r2, #0
 800bb04:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800bb08:	2303      	movs	r3, #3
 800bb0a:	e010      	b.n	800bb2e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bb0c:	69bb      	ldr	r3, [r7, #24]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d101      	bne.n	800bb16 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800bb12:	2300      	movs	r3, #0
 800bb14:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800bb16:	69bb      	ldr	r3, [r7, #24]
 800bb18:	3b01      	subs	r3, #1
 800bb1a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	689a      	ldr	r2, [r3, #8]
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	4013      	ands	r3, r2
 800bb26:	687a      	ldr	r2, [r7, #4]
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d196      	bne.n	800ba5a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800bb2c:	2300      	movs	r3, #0
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3728      	adds	r7, #40	@ 0x28
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
 800bb36:	bf00      	nop
 800bb38:	20000044 	.word	0x20000044

0800bb3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b086      	sub	sp, #24
 800bb40:	af02      	add	r7, sp, #8
 800bb42:	60f8      	str	r0, [r7, #12]
 800bb44:	60b9      	str	r1, [r7, #8]
 800bb46:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	9300      	str	r3, [sp, #0]
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800bb54:	68f8      	ldr	r0, [r7, #12]
 800bb56:	f7ff ff5b 	bl	800ba10 <SPI_WaitFifoStateUntilTimeout>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d007      	beq.n	800bb70 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bb64:	f043 0220 	orr.w	r2, r3, #32
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800bb6c:	2303      	movs	r3, #3
 800bb6e:	e027      	b.n	800bbc0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	9300      	str	r3, [sp, #0]
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	2200      	movs	r2, #0
 800bb78:	2180      	movs	r1, #128	@ 0x80
 800bb7a:	68f8      	ldr	r0, [r7, #12]
 800bb7c:	f7ff fec0 	bl	800b900 <SPI_WaitFlagStateUntilTimeout>
 800bb80:	4603      	mov	r3, r0
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d007      	beq.n	800bb96 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bb8a:	f043 0220 	orr.w	r2, r3, #32
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800bb92:	2303      	movs	r3, #3
 800bb94:	e014      	b.n	800bbc0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	9300      	str	r3, [sp, #0]
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800bba2:	68f8      	ldr	r0, [r7, #12]
 800bba4:	f7ff ff34 	bl	800ba10 <SPI_WaitFifoStateUntilTimeout>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d007      	beq.n	800bbbe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bbb2:	f043 0220 	orr.w	r2, r3, #32
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800bbba:	2303      	movs	r3, #3
 800bbbc:	e000      	b.n	800bbc0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800bbbe:	2300      	movs	r3, #0
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3710      	adds	r7, #16
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b082      	sub	sp, #8
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d101      	bne.n	800bbda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	e049      	b.n	800bc6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bbe0:	b2db      	uxtb	r3, r3
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d106      	bne.n	800bbf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f7f7 fff6 	bl	8003be0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2202      	movs	r2, #2
 800bbf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681a      	ldr	r2, [r3, #0]
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	3304      	adds	r3, #4
 800bc04:	4619      	mov	r1, r3
 800bc06:	4610      	mov	r0, r2
 800bc08:	f001 f894 	bl	800cd34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2201      	movs	r2, #1
 800bc10:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2201      	movs	r2, #1
 800bc18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2201      	movs	r2, #1
 800bc20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2201      	movs	r2, #1
 800bc28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2201      	movs	r2, #1
 800bc30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2201      	movs	r2, #1
 800bc38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2201      	movs	r2, #1
 800bc40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2201      	movs	r2, #1
 800bc48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2201      	movs	r2, #1
 800bc50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2201      	movs	r2, #1
 800bc58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2201      	movs	r2, #1
 800bc60:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2201      	movs	r2, #1
 800bc68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bc6c:	2300      	movs	r3, #0
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3708      	adds	r7, #8
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
	...

0800bc78 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b085      	sub	sp, #20
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bc86:	b2db      	uxtb	r3, r3
 800bc88:	2b01      	cmp	r3, #1
 800bc8a:	d001      	beq.n	800bc90 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	e04c      	b.n	800bd2a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2202      	movs	r2, #2
 800bc94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	4a26      	ldr	r2, [pc, #152]	@ (800bd38 <HAL_TIM_Base_Start+0xc0>)
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d022      	beq.n	800bce8 <HAL_TIM_Base_Start+0x70>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcaa:	d01d      	beq.n	800bce8 <HAL_TIM_Base_Start+0x70>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4a22      	ldr	r2, [pc, #136]	@ (800bd3c <HAL_TIM_Base_Start+0xc4>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d018      	beq.n	800bce8 <HAL_TIM_Base_Start+0x70>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4a21      	ldr	r2, [pc, #132]	@ (800bd40 <HAL_TIM_Base_Start+0xc8>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d013      	beq.n	800bce8 <HAL_TIM_Base_Start+0x70>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4a1f      	ldr	r2, [pc, #124]	@ (800bd44 <HAL_TIM_Base_Start+0xcc>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d00e      	beq.n	800bce8 <HAL_TIM_Base_Start+0x70>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	4a1e      	ldr	r2, [pc, #120]	@ (800bd48 <HAL_TIM_Base_Start+0xd0>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d009      	beq.n	800bce8 <HAL_TIM_Base_Start+0x70>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	4a1c      	ldr	r2, [pc, #112]	@ (800bd4c <HAL_TIM_Base_Start+0xd4>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d004      	beq.n	800bce8 <HAL_TIM_Base_Start+0x70>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	4a1b      	ldr	r2, [pc, #108]	@ (800bd50 <HAL_TIM_Base_Start+0xd8>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d115      	bne.n	800bd14 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	689a      	ldr	r2, [r3, #8]
 800bcee:	4b19      	ldr	r3, [pc, #100]	@ (800bd54 <HAL_TIM_Base_Start+0xdc>)
 800bcf0:	4013      	ands	r3, r2
 800bcf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2b06      	cmp	r3, #6
 800bcf8:	d015      	beq.n	800bd26 <HAL_TIM_Base_Start+0xae>
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd00:	d011      	beq.n	800bd26 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	681a      	ldr	r2, [r3, #0]
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f042 0201 	orr.w	r2, r2, #1
 800bd10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd12:	e008      	b.n	800bd26 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	681a      	ldr	r2, [r3, #0]
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f042 0201 	orr.w	r2, r2, #1
 800bd22:	601a      	str	r2, [r3, #0]
 800bd24:	e000      	b.n	800bd28 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bd28:	2300      	movs	r3, #0
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3714      	adds	r7, #20
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd34:	4770      	bx	lr
 800bd36:	bf00      	nop
 800bd38:	40012c00 	.word	0x40012c00
 800bd3c:	40000400 	.word	0x40000400
 800bd40:	40000800 	.word	0x40000800
 800bd44:	40000c00 	.word	0x40000c00
 800bd48:	40013400 	.word	0x40013400
 800bd4c:	40014000 	.word	0x40014000
 800bd50:	40015000 	.word	0x40015000
 800bd54:	00010007 	.word	0x00010007

0800bd58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b082      	sub	sp, #8
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d101      	bne.n	800bd6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bd66:	2301      	movs	r3, #1
 800bd68:	e049      	b.n	800bdfe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bd70:	b2db      	uxtb	r3, r3
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d106      	bne.n	800bd84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f000 f841 	bl	800be06 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2202      	movs	r2, #2
 800bd88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681a      	ldr	r2, [r3, #0]
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	3304      	adds	r3, #4
 800bd94:	4619      	mov	r1, r3
 800bd96:	4610      	mov	r0, r2
 800bd98:	f000 ffcc 	bl	800cd34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2201      	movs	r2, #1
 800bda0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2201      	movs	r2, #1
 800bda8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2201      	movs	r2, #1
 800bdb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2201      	movs	r2, #1
 800bdb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2201      	movs	r2, #1
 800bdd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2201      	movs	r2, #1
 800bde0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2201      	movs	r2, #1
 800bde8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2201      	movs	r2, #1
 800bdf0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bdfc:	2300      	movs	r3, #0
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3708      	adds	r7, #8
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}

0800be06 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800be06:	b480      	push	{r7}
 800be08:	b083      	sub	sp, #12
 800be0a:	af00      	add	r7, sp, #0
 800be0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800be0e:	bf00      	nop
 800be10:	370c      	adds	r7, #12
 800be12:	46bd      	mov	sp, r7
 800be14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be18:	4770      	bx	lr
	...

0800be1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b084      	sub	sp, #16
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d109      	bne.n	800be40 <HAL_TIM_PWM_Start+0x24>
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800be32:	b2db      	uxtb	r3, r3
 800be34:	2b01      	cmp	r3, #1
 800be36:	bf14      	ite	ne
 800be38:	2301      	movne	r3, #1
 800be3a:	2300      	moveq	r3, #0
 800be3c:	b2db      	uxtb	r3, r3
 800be3e:	e03c      	b.n	800beba <HAL_TIM_PWM_Start+0x9e>
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	2b04      	cmp	r3, #4
 800be44:	d109      	bne.n	800be5a <HAL_TIM_PWM_Start+0x3e>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800be4c:	b2db      	uxtb	r3, r3
 800be4e:	2b01      	cmp	r3, #1
 800be50:	bf14      	ite	ne
 800be52:	2301      	movne	r3, #1
 800be54:	2300      	moveq	r3, #0
 800be56:	b2db      	uxtb	r3, r3
 800be58:	e02f      	b.n	800beba <HAL_TIM_PWM_Start+0x9e>
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	2b08      	cmp	r3, #8
 800be5e:	d109      	bne.n	800be74 <HAL_TIM_PWM_Start+0x58>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800be66:	b2db      	uxtb	r3, r3
 800be68:	2b01      	cmp	r3, #1
 800be6a:	bf14      	ite	ne
 800be6c:	2301      	movne	r3, #1
 800be6e:	2300      	moveq	r3, #0
 800be70:	b2db      	uxtb	r3, r3
 800be72:	e022      	b.n	800beba <HAL_TIM_PWM_Start+0x9e>
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	2b0c      	cmp	r3, #12
 800be78:	d109      	bne.n	800be8e <HAL_TIM_PWM_Start+0x72>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800be80:	b2db      	uxtb	r3, r3
 800be82:	2b01      	cmp	r3, #1
 800be84:	bf14      	ite	ne
 800be86:	2301      	movne	r3, #1
 800be88:	2300      	moveq	r3, #0
 800be8a:	b2db      	uxtb	r3, r3
 800be8c:	e015      	b.n	800beba <HAL_TIM_PWM_Start+0x9e>
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	2b10      	cmp	r3, #16
 800be92:	d109      	bne.n	800bea8 <HAL_TIM_PWM_Start+0x8c>
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800be9a:	b2db      	uxtb	r3, r3
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	bf14      	ite	ne
 800bea0:	2301      	movne	r3, #1
 800bea2:	2300      	moveq	r3, #0
 800bea4:	b2db      	uxtb	r3, r3
 800bea6:	e008      	b.n	800beba <HAL_TIM_PWM_Start+0x9e>
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800beae:	b2db      	uxtb	r3, r3
 800beb0:	2b01      	cmp	r3, #1
 800beb2:	bf14      	ite	ne
 800beb4:	2301      	movne	r3, #1
 800beb6:	2300      	moveq	r3, #0
 800beb8:	b2db      	uxtb	r3, r3
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d001      	beq.n	800bec2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bebe:	2301      	movs	r3, #1
 800bec0:	e0a6      	b.n	800c010 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d104      	bne.n	800bed2 <HAL_TIM_PWM_Start+0xb6>
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2202      	movs	r2, #2
 800becc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bed0:	e023      	b.n	800bf1a <HAL_TIM_PWM_Start+0xfe>
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	2b04      	cmp	r3, #4
 800bed6:	d104      	bne.n	800bee2 <HAL_TIM_PWM_Start+0xc6>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2202      	movs	r2, #2
 800bedc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bee0:	e01b      	b.n	800bf1a <HAL_TIM_PWM_Start+0xfe>
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	2b08      	cmp	r3, #8
 800bee6:	d104      	bne.n	800bef2 <HAL_TIM_PWM_Start+0xd6>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2202      	movs	r2, #2
 800beec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bef0:	e013      	b.n	800bf1a <HAL_TIM_PWM_Start+0xfe>
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	2b0c      	cmp	r3, #12
 800bef6:	d104      	bne.n	800bf02 <HAL_TIM_PWM_Start+0xe6>
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2202      	movs	r2, #2
 800befc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bf00:	e00b      	b.n	800bf1a <HAL_TIM_PWM_Start+0xfe>
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	2b10      	cmp	r3, #16
 800bf06:	d104      	bne.n	800bf12 <HAL_TIM_PWM_Start+0xf6>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2202      	movs	r2, #2
 800bf0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bf10:	e003      	b.n	800bf1a <HAL_TIM_PWM_Start+0xfe>
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2202      	movs	r2, #2
 800bf16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	2201      	movs	r2, #1
 800bf20:	6839      	ldr	r1, [r7, #0]
 800bf22:	4618      	mov	r0, r3
 800bf24:	f001 fb80 	bl	800d628 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	4a3a      	ldr	r2, [pc, #232]	@ (800c018 <HAL_TIM_PWM_Start+0x1fc>)
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	d018      	beq.n	800bf64 <HAL_TIM_PWM_Start+0x148>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	4a39      	ldr	r2, [pc, #228]	@ (800c01c <HAL_TIM_PWM_Start+0x200>)
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d013      	beq.n	800bf64 <HAL_TIM_PWM_Start+0x148>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4a37      	ldr	r2, [pc, #220]	@ (800c020 <HAL_TIM_PWM_Start+0x204>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d00e      	beq.n	800bf64 <HAL_TIM_PWM_Start+0x148>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	4a36      	ldr	r2, [pc, #216]	@ (800c024 <HAL_TIM_PWM_Start+0x208>)
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d009      	beq.n	800bf64 <HAL_TIM_PWM_Start+0x148>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4a34      	ldr	r2, [pc, #208]	@ (800c028 <HAL_TIM_PWM_Start+0x20c>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d004      	beq.n	800bf64 <HAL_TIM_PWM_Start+0x148>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4a33      	ldr	r2, [pc, #204]	@ (800c02c <HAL_TIM_PWM_Start+0x210>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d101      	bne.n	800bf68 <HAL_TIM_PWM_Start+0x14c>
 800bf64:	2301      	movs	r3, #1
 800bf66:	e000      	b.n	800bf6a <HAL_TIM_PWM_Start+0x14e>
 800bf68:	2300      	movs	r3, #0
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d007      	beq.n	800bf7e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bf7c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	4a25      	ldr	r2, [pc, #148]	@ (800c018 <HAL_TIM_PWM_Start+0x1fc>)
 800bf84:	4293      	cmp	r3, r2
 800bf86:	d022      	beq.n	800bfce <HAL_TIM_PWM_Start+0x1b2>
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf90:	d01d      	beq.n	800bfce <HAL_TIM_PWM_Start+0x1b2>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	4a26      	ldr	r2, [pc, #152]	@ (800c030 <HAL_TIM_PWM_Start+0x214>)
 800bf98:	4293      	cmp	r3, r2
 800bf9a:	d018      	beq.n	800bfce <HAL_TIM_PWM_Start+0x1b2>
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	4a24      	ldr	r2, [pc, #144]	@ (800c034 <HAL_TIM_PWM_Start+0x218>)
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d013      	beq.n	800bfce <HAL_TIM_PWM_Start+0x1b2>
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	4a23      	ldr	r2, [pc, #140]	@ (800c038 <HAL_TIM_PWM_Start+0x21c>)
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d00e      	beq.n	800bfce <HAL_TIM_PWM_Start+0x1b2>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4a19      	ldr	r2, [pc, #100]	@ (800c01c <HAL_TIM_PWM_Start+0x200>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d009      	beq.n	800bfce <HAL_TIM_PWM_Start+0x1b2>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	4a18      	ldr	r2, [pc, #96]	@ (800c020 <HAL_TIM_PWM_Start+0x204>)
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	d004      	beq.n	800bfce <HAL_TIM_PWM_Start+0x1b2>
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4a18      	ldr	r2, [pc, #96]	@ (800c02c <HAL_TIM_PWM_Start+0x210>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d115      	bne.n	800bffa <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	689a      	ldr	r2, [r3, #8]
 800bfd4:	4b19      	ldr	r3, [pc, #100]	@ (800c03c <HAL_TIM_PWM_Start+0x220>)
 800bfd6:	4013      	ands	r3, r2
 800bfd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	2b06      	cmp	r3, #6
 800bfde:	d015      	beq.n	800c00c <HAL_TIM_PWM_Start+0x1f0>
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bfe6:	d011      	beq.n	800c00c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	681a      	ldr	r2, [r3, #0]
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f042 0201 	orr.w	r2, r2, #1
 800bff6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bff8:	e008      	b.n	800c00c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	681a      	ldr	r2, [r3, #0]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f042 0201 	orr.w	r2, r2, #1
 800c008:	601a      	str	r2, [r3, #0]
 800c00a:	e000      	b.n	800c00e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c00c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c00e:	2300      	movs	r3, #0
}
 800c010:	4618      	mov	r0, r3
 800c012:	3710      	adds	r7, #16
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}
 800c018:	40012c00 	.word	0x40012c00
 800c01c:	40013400 	.word	0x40013400
 800c020:	40014000 	.word	0x40014000
 800c024:	40014400 	.word	0x40014400
 800c028:	40014800 	.word	0x40014800
 800c02c:	40015000 	.word	0x40015000
 800c030:	40000400 	.word	0x40000400
 800c034:	40000800 	.word	0x40000800
 800c038:	40000c00 	.word	0x40000c00
 800c03c:	00010007 	.word	0x00010007

0800c040 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b086      	sub	sp, #24
 800c044:	af00      	add	r7, sp, #0
 800c046:	60f8      	str	r0, [r7, #12]
 800c048:	60b9      	str	r1, [r7, #8]
 800c04a:	607a      	str	r2, [r7, #4]
 800c04c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800c04e:	2300      	movs	r3, #0
 800c050:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d109      	bne.n	800c06c <HAL_TIM_PWM_Start_DMA+0x2c>
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c05e:	b2db      	uxtb	r3, r3
 800c060:	2b02      	cmp	r3, #2
 800c062:	bf0c      	ite	eq
 800c064:	2301      	moveq	r3, #1
 800c066:	2300      	movne	r3, #0
 800c068:	b2db      	uxtb	r3, r3
 800c06a:	e03c      	b.n	800c0e6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	2b04      	cmp	r3, #4
 800c070:	d109      	bne.n	800c086 <HAL_TIM_PWM_Start_DMA+0x46>
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c078:	b2db      	uxtb	r3, r3
 800c07a:	2b02      	cmp	r3, #2
 800c07c:	bf0c      	ite	eq
 800c07e:	2301      	moveq	r3, #1
 800c080:	2300      	movne	r3, #0
 800c082:	b2db      	uxtb	r3, r3
 800c084:	e02f      	b.n	800c0e6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	2b08      	cmp	r3, #8
 800c08a:	d109      	bne.n	800c0a0 <HAL_TIM_PWM_Start_DMA+0x60>
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c092:	b2db      	uxtb	r3, r3
 800c094:	2b02      	cmp	r3, #2
 800c096:	bf0c      	ite	eq
 800c098:	2301      	moveq	r3, #1
 800c09a:	2300      	movne	r3, #0
 800c09c:	b2db      	uxtb	r3, r3
 800c09e:	e022      	b.n	800c0e6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	2b0c      	cmp	r3, #12
 800c0a4:	d109      	bne.n	800c0ba <HAL_TIM_PWM_Start_DMA+0x7a>
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c0ac:	b2db      	uxtb	r3, r3
 800c0ae:	2b02      	cmp	r3, #2
 800c0b0:	bf0c      	ite	eq
 800c0b2:	2301      	moveq	r3, #1
 800c0b4:	2300      	movne	r3, #0
 800c0b6:	b2db      	uxtb	r3, r3
 800c0b8:	e015      	b.n	800c0e6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	2b10      	cmp	r3, #16
 800c0be:	d109      	bne.n	800c0d4 <HAL_TIM_PWM_Start_DMA+0x94>
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c0c6:	b2db      	uxtb	r3, r3
 800c0c8:	2b02      	cmp	r3, #2
 800c0ca:	bf0c      	ite	eq
 800c0cc:	2301      	moveq	r3, #1
 800c0ce:	2300      	movne	r3, #0
 800c0d0:	b2db      	uxtb	r3, r3
 800c0d2:	e008      	b.n	800c0e6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c0da:	b2db      	uxtb	r3, r3
 800c0dc:	2b02      	cmp	r3, #2
 800c0de:	bf0c      	ite	eq
 800c0e0:	2301      	moveq	r3, #1
 800c0e2:	2300      	movne	r3, #0
 800c0e4:	b2db      	uxtb	r3, r3
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d001      	beq.n	800c0ee <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800c0ea:	2302      	movs	r3, #2
 800c0ec:	e1b5      	b.n	800c45a <HAL_TIM_PWM_Start_DMA+0x41a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d109      	bne.n	800c108 <HAL_TIM_PWM_Start_DMA+0xc8>
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c0fa:	b2db      	uxtb	r3, r3
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	bf0c      	ite	eq
 800c100:	2301      	moveq	r3, #1
 800c102:	2300      	movne	r3, #0
 800c104:	b2db      	uxtb	r3, r3
 800c106:	e03c      	b.n	800c182 <HAL_TIM_PWM_Start_DMA+0x142>
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	2b04      	cmp	r3, #4
 800c10c:	d109      	bne.n	800c122 <HAL_TIM_PWM_Start_DMA+0xe2>
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c114:	b2db      	uxtb	r3, r3
 800c116:	2b01      	cmp	r3, #1
 800c118:	bf0c      	ite	eq
 800c11a:	2301      	moveq	r3, #1
 800c11c:	2300      	movne	r3, #0
 800c11e:	b2db      	uxtb	r3, r3
 800c120:	e02f      	b.n	800c182 <HAL_TIM_PWM_Start_DMA+0x142>
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	2b08      	cmp	r3, #8
 800c126:	d109      	bne.n	800c13c <HAL_TIM_PWM_Start_DMA+0xfc>
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c12e:	b2db      	uxtb	r3, r3
 800c130:	2b01      	cmp	r3, #1
 800c132:	bf0c      	ite	eq
 800c134:	2301      	moveq	r3, #1
 800c136:	2300      	movne	r3, #0
 800c138:	b2db      	uxtb	r3, r3
 800c13a:	e022      	b.n	800c182 <HAL_TIM_PWM_Start_DMA+0x142>
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	2b0c      	cmp	r3, #12
 800c140:	d109      	bne.n	800c156 <HAL_TIM_PWM_Start_DMA+0x116>
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	2b01      	cmp	r3, #1
 800c14c:	bf0c      	ite	eq
 800c14e:	2301      	moveq	r3, #1
 800c150:	2300      	movne	r3, #0
 800c152:	b2db      	uxtb	r3, r3
 800c154:	e015      	b.n	800c182 <HAL_TIM_PWM_Start_DMA+0x142>
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	2b10      	cmp	r3, #16
 800c15a:	d109      	bne.n	800c170 <HAL_TIM_PWM_Start_DMA+0x130>
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c162:	b2db      	uxtb	r3, r3
 800c164:	2b01      	cmp	r3, #1
 800c166:	bf0c      	ite	eq
 800c168:	2301      	moveq	r3, #1
 800c16a:	2300      	movne	r3, #0
 800c16c:	b2db      	uxtb	r3, r3
 800c16e:	e008      	b.n	800c182 <HAL_TIM_PWM_Start_DMA+0x142>
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c176:	b2db      	uxtb	r3, r3
 800c178:	2b01      	cmp	r3, #1
 800c17a:	bf0c      	ite	eq
 800c17c:	2301      	moveq	r3, #1
 800c17e:	2300      	movne	r3, #0
 800c180:	b2db      	uxtb	r3, r3
 800c182:	2b00      	cmp	r3, #0
 800c184:	d034      	beq.n	800c1f0 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d002      	beq.n	800c192 <HAL_TIM_PWM_Start_DMA+0x152>
 800c18c:	887b      	ldrh	r3, [r7, #2]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d101      	bne.n	800c196 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800c192:	2301      	movs	r3, #1
 800c194:	e161      	b.n	800c45a <HAL_TIM_PWM_Start_DMA+0x41a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d104      	bne.n	800c1a6 <HAL_TIM_PWM_Start_DMA+0x166>
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	2202      	movs	r2, #2
 800c1a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c1a4:	e026      	b.n	800c1f4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	2b04      	cmp	r3, #4
 800c1aa:	d104      	bne.n	800c1b6 <HAL_TIM_PWM_Start_DMA+0x176>
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	2202      	movs	r2, #2
 800c1b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c1b4:	e01e      	b.n	800c1f4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800c1b6:	68bb      	ldr	r3, [r7, #8]
 800c1b8:	2b08      	cmp	r3, #8
 800c1ba:	d104      	bne.n	800c1c6 <HAL_TIM_PWM_Start_DMA+0x186>
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	2202      	movs	r2, #2
 800c1c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c1c4:	e016      	b.n	800c1f4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	2b0c      	cmp	r3, #12
 800c1ca:	d104      	bne.n	800c1d6 <HAL_TIM_PWM_Start_DMA+0x196>
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	2202      	movs	r2, #2
 800c1d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c1d4:	e00e      	b.n	800c1f4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	2b10      	cmp	r3, #16
 800c1da:	d104      	bne.n	800c1e6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	2202      	movs	r2, #2
 800c1e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c1e4:	e006      	b.n	800c1f4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	2202      	movs	r2, #2
 800c1ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c1ee:	e001      	b.n	800c1f4 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	e132      	b.n	800c45a <HAL_TIM_PWM_Start_DMA+0x41a>
  }

  switch (Channel)
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	2b0c      	cmp	r3, #12
 800c1f8:	f200 80ae 	bhi.w	800c358 <HAL_TIM_PWM_Start_DMA+0x318>
 800c1fc:	a201      	add	r2, pc, #4	@ (adr r2, 800c204 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800c1fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c202:	bf00      	nop
 800c204:	0800c239 	.word	0x0800c239
 800c208:	0800c359 	.word	0x0800c359
 800c20c:	0800c359 	.word	0x0800c359
 800c210:	0800c359 	.word	0x0800c359
 800c214:	0800c281 	.word	0x0800c281
 800c218:	0800c359 	.word	0x0800c359
 800c21c:	0800c359 	.word	0x0800c359
 800c220:	0800c359 	.word	0x0800c359
 800c224:	0800c2c9 	.word	0x0800c2c9
 800c228:	0800c359 	.word	0x0800c359
 800c22c:	0800c359 	.word	0x0800c359
 800c230:	0800c359 	.word	0x0800c359
 800c234:	0800c311 	.word	0x0800c311
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c23c:	4a89      	ldr	r2, [pc, #548]	@ (800c464 <HAL_TIM_PWM_Start_DMA+0x424>)
 800c23e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c244:	4a88      	ldr	r2, [pc, #544]	@ (800c468 <HAL_TIM_PWM_Start_DMA+0x428>)
 800c246:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c24c:	4a87      	ldr	r2, [pc, #540]	@ (800c46c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800c24e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800c254:	6879      	ldr	r1, [r7, #4]
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	3334      	adds	r3, #52	@ 0x34
 800c25c:	461a      	mov	r2, r3
 800c25e:	887b      	ldrh	r3, [r7, #2]
 800c260:	f7fb f92e 	bl	80074c0 <HAL_DMA_Start_IT>
 800c264:	4603      	mov	r3, r0
 800c266:	2b00      	cmp	r3, #0
 800c268:	d001      	beq.n	800c26e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800c26a:	2301      	movs	r3, #1
 800c26c:	e0f5      	b.n	800c45a <HAL_TIM_PWM_Start_DMA+0x41a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	68da      	ldr	r2, [r3, #12]
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c27c:	60da      	str	r2, [r3, #12]
      break;
 800c27e:	e06e      	b.n	800c35e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c284:	4a77      	ldr	r2, [pc, #476]	@ (800c464 <HAL_TIM_PWM_Start_DMA+0x424>)
 800c286:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c28c:	4a76      	ldr	r2, [pc, #472]	@ (800c468 <HAL_TIM_PWM_Start_DMA+0x428>)
 800c28e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c294:	4a75      	ldr	r2, [pc, #468]	@ (800c46c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800c296:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800c29c:	6879      	ldr	r1, [r7, #4]
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	3338      	adds	r3, #56	@ 0x38
 800c2a4:	461a      	mov	r2, r3
 800c2a6:	887b      	ldrh	r3, [r7, #2]
 800c2a8:	f7fb f90a 	bl	80074c0 <HAL_DMA_Start_IT>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d001      	beq.n	800c2b6 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	e0d1      	b.n	800c45a <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	68da      	ldr	r2, [r3, #12]
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c2c4:	60da      	str	r2, [r3, #12]
      break;
 800c2c6:	e04a      	b.n	800c35e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2cc:	4a65      	ldr	r2, [pc, #404]	@ (800c464 <HAL_TIM_PWM_Start_DMA+0x424>)
 800c2ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2d4:	4a64      	ldr	r2, [pc, #400]	@ (800c468 <HAL_TIM_PWM_Start_DMA+0x428>)
 800c2d6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2dc:	4a63      	ldr	r2, [pc, #396]	@ (800c46c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800c2de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800c2e4:	6879      	ldr	r1, [r7, #4]
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	333c      	adds	r3, #60	@ 0x3c
 800c2ec:	461a      	mov	r2, r3
 800c2ee:	887b      	ldrh	r3, [r7, #2]
 800c2f0:	f7fb f8e6 	bl	80074c0 <HAL_DMA_Start_IT>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d001      	beq.n	800c2fe <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	e0ad      	b.n	800c45a <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	68da      	ldr	r2, [r3, #12]
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c30c:	60da      	str	r2, [r3, #12]
      break;
 800c30e:	e026      	b.n	800c35e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c314:	4a53      	ldr	r2, [pc, #332]	@ (800c464 <HAL_TIM_PWM_Start_DMA+0x424>)
 800c316:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c31c:	4a52      	ldr	r2, [pc, #328]	@ (800c468 <HAL_TIM_PWM_Start_DMA+0x428>)
 800c31e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c324:	4a51      	ldr	r2, [pc, #324]	@ (800c46c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800c326:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c32c:	6879      	ldr	r1, [r7, #4]
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	3340      	adds	r3, #64	@ 0x40
 800c334:	461a      	mov	r2, r3
 800c336:	887b      	ldrh	r3, [r7, #2]
 800c338:	f7fb f8c2 	bl	80074c0 <HAL_DMA_Start_IT>
 800c33c:	4603      	mov	r3, r0
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d001      	beq.n	800c346 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800c342:	2301      	movs	r3, #1
 800c344:	e089      	b.n	800c45a <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	68da      	ldr	r2, [r3, #12]
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c354:	60da      	str	r2, [r3, #12]
      break;
 800c356:	e002      	b.n	800c35e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800c358:	2301      	movs	r3, #1
 800c35a:	75fb      	strb	r3, [r7, #23]
      break;
 800c35c:	bf00      	nop
  }

  if (status == HAL_OK)
 800c35e:	7dfb      	ldrb	r3, [r7, #23]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d179      	bne.n	800c458 <HAL_TIM_PWM_Start_DMA+0x418>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	2201      	movs	r2, #1
 800c36a:	68b9      	ldr	r1, [r7, #8]
 800c36c:	4618      	mov	r0, r3
 800c36e:	f001 f95b 	bl	800d628 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4a3e      	ldr	r2, [pc, #248]	@ (800c470 <HAL_TIM_PWM_Start_DMA+0x430>)
 800c378:	4293      	cmp	r3, r2
 800c37a:	d018      	beq.n	800c3ae <HAL_TIM_PWM_Start_DMA+0x36e>
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4a3c      	ldr	r2, [pc, #240]	@ (800c474 <HAL_TIM_PWM_Start_DMA+0x434>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d013      	beq.n	800c3ae <HAL_TIM_PWM_Start_DMA+0x36e>
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4a3b      	ldr	r2, [pc, #236]	@ (800c478 <HAL_TIM_PWM_Start_DMA+0x438>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d00e      	beq.n	800c3ae <HAL_TIM_PWM_Start_DMA+0x36e>
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	4a39      	ldr	r2, [pc, #228]	@ (800c47c <HAL_TIM_PWM_Start_DMA+0x43c>)
 800c396:	4293      	cmp	r3, r2
 800c398:	d009      	beq.n	800c3ae <HAL_TIM_PWM_Start_DMA+0x36e>
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	4a38      	ldr	r2, [pc, #224]	@ (800c480 <HAL_TIM_PWM_Start_DMA+0x440>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d004      	beq.n	800c3ae <HAL_TIM_PWM_Start_DMA+0x36e>
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	4a36      	ldr	r2, [pc, #216]	@ (800c484 <HAL_TIM_PWM_Start_DMA+0x444>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d101      	bne.n	800c3b2 <HAL_TIM_PWM_Start_DMA+0x372>
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	e000      	b.n	800c3b4 <HAL_TIM_PWM_Start_DMA+0x374>
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d007      	beq.n	800c3c8 <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c3c6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	4a28      	ldr	r2, [pc, #160]	@ (800c470 <HAL_TIM_PWM_Start_DMA+0x430>)
 800c3ce:	4293      	cmp	r3, r2
 800c3d0:	d022      	beq.n	800c418 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c3da:	d01d      	beq.n	800c418 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	4a29      	ldr	r2, [pc, #164]	@ (800c488 <HAL_TIM_PWM_Start_DMA+0x448>)
 800c3e2:	4293      	cmp	r3, r2
 800c3e4:	d018      	beq.n	800c418 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	4a28      	ldr	r2, [pc, #160]	@ (800c48c <HAL_TIM_PWM_Start_DMA+0x44c>)
 800c3ec:	4293      	cmp	r3, r2
 800c3ee:	d013      	beq.n	800c418 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4a26      	ldr	r2, [pc, #152]	@ (800c490 <HAL_TIM_PWM_Start_DMA+0x450>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d00e      	beq.n	800c418 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	4a1d      	ldr	r2, [pc, #116]	@ (800c474 <HAL_TIM_PWM_Start_DMA+0x434>)
 800c400:	4293      	cmp	r3, r2
 800c402:	d009      	beq.n	800c418 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	4a1b      	ldr	r2, [pc, #108]	@ (800c478 <HAL_TIM_PWM_Start_DMA+0x438>)
 800c40a:	4293      	cmp	r3, r2
 800c40c:	d004      	beq.n	800c418 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	4a1c      	ldr	r2, [pc, #112]	@ (800c484 <HAL_TIM_PWM_Start_DMA+0x444>)
 800c414:	4293      	cmp	r3, r2
 800c416:	d115      	bne.n	800c444 <HAL_TIM_PWM_Start_DMA+0x404>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	689a      	ldr	r2, [r3, #8]
 800c41e:	4b1d      	ldr	r3, [pc, #116]	@ (800c494 <HAL_TIM_PWM_Start_DMA+0x454>)
 800c420:	4013      	ands	r3, r2
 800c422:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	2b06      	cmp	r3, #6
 800c428:	d015      	beq.n	800c456 <HAL_TIM_PWM_Start_DMA+0x416>
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c430:	d011      	beq.n	800c456 <HAL_TIM_PWM_Start_DMA+0x416>
      {
        __HAL_TIM_ENABLE(htim);
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	681a      	ldr	r2, [r3, #0]
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f042 0201 	orr.w	r2, r2, #1
 800c440:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c442:	e008      	b.n	800c456 <HAL_TIM_PWM_Start_DMA+0x416>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	681a      	ldr	r2, [r3, #0]
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f042 0201 	orr.w	r2, r2, #1
 800c452:	601a      	str	r2, [r3, #0]
 800c454:	e000      	b.n	800c458 <HAL_TIM_PWM_Start_DMA+0x418>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c456:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c458:	7dfb      	ldrb	r3, [r7, #23]
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3718      	adds	r7, #24
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
 800c462:	bf00      	nop
 800c464:	0800cc23 	.word	0x0800cc23
 800c468:	0800cccb 	.word	0x0800cccb
 800c46c:	0800cb91 	.word	0x0800cb91
 800c470:	40012c00 	.word	0x40012c00
 800c474:	40013400 	.word	0x40013400
 800c478:	40014000 	.word	0x40014000
 800c47c:	40014400 	.word	0x40014400
 800c480:	40014800 	.word	0x40014800
 800c484:	40015000 	.word	0x40015000
 800c488:	40000400 	.word	0x40000400
 800c48c:	40000800 	.word	0x40000800
 800c490:	40000c00 	.word	0x40000c00
 800c494:	00010007 	.word	0x00010007

0800c498 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b086      	sub	sp, #24
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
 800c4a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d101      	bne.n	800c4ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	e097      	b.n	800c5dc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c4b2:	b2db      	uxtb	r3, r3
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d106      	bne.n	800c4c6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f7f7 fa9b 	bl	80039fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2202      	movs	r2, #2
 800c4ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	689b      	ldr	r3, [r3, #8]
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	6812      	ldr	r2, [r2, #0]
 800c4d8:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800c4dc:	f023 0307 	bic.w	r3, r3, #7
 800c4e0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681a      	ldr	r2, [r3, #0]
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	3304      	adds	r3, #4
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	4610      	mov	r0, r2
 800c4ee:	f000 fc21 	bl	800cd34 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	689b      	ldr	r3, [r3, #8]
 800c4f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	699b      	ldr	r3, [r3, #24]
 800c500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	6a1b      	ldr	r3, [r3, #32]
 800c508:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	697a      	ldr	r2, [r7, #20]
 800c510:	4313      	orrs	r3, r2
 800c512:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c51a:	f023 0303 	bic.w	r3, r3, #3
 800c51e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	689a      	ldr	r2, [r3, #8]
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	699b      	ldr	r3, [r3, #24]
 800c528:	021b      	lsls	r3, r3, #8
 800c52a:	4313      	orrs	r3, r2
 800c52c:	693a      	ldr	r2, [r7, #16]
 800c52e:	4313      	orrs	r3, r2
 800c530:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800c538:	f023 030c 	bic.w	r3, r3, #12
 800c53c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c544:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c548:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	68da      	ldr	r2, [r3, #12]
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	69db      	ldr	r3, [r3, #28]
 800c552:	021b      	lsls	r3, r3, #8
 800c554:	4313      	orrs	r3, r2
 800c556:	693a      	ldr	r2, [r7, #16]
 800c558:	4313      	orrs	r3, r2
 800c55a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	691b      	ldr	r3, [r3, #16]
 800c560:	011a      	lsls	r2, r3, #4
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	6a1b      	ldr	r3, [r3, #32]
 800c566:	031b      	lsls	r3, r3, #12
 800c568:	4313      	orrs	r3, r2
 800c56a:	693a      	ldr	r2, [r7, #16]
 800c56c:	4313      	orrs	r3, r2
 800c56e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800c576:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800c57e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	685a      	ldr	r2, [r3, #4]
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	695b      	ldr	r3, [r3, #20]
 800c588:	011b      	lsls	r3, r3, #4
 800c58a:	4313      	orrs	r3, r2
 800c58c:	68fa      	ldr	r2, [r7, #12]
 800c58e:	4313      	orrs	r3, r2
 800c590:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	697a      	ldr	r2, [r7, #20]
 800c598:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	693a      	ldr	r2, [r7, #16]
 800c5a0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	68fa      	ldr	r2, [r7, #12]
 800c5a8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2201      	movs	r2, #1
 800c5ae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2201      	movs	r2, #1
 800c5b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2201      	movs	r2, #1
 800c5be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2201      	movs	r2, #1
 800c5c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2201      	movs	r2, #1
 800c5ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2201      	movs	r2, #1
 800c5d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c5da:	2300      	movs	r3, #0
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3718      	adds	r7, #24
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}

0800c5e4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b084      	sub	sp, #16
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c5f4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c5fc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c604:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c60c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d110      	bne.n	800c636 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c614:	7bfb      	ldrb	r3, [r7, #15]
 800c616:	2b01      	cmp	r3, #1
 800c618:	d102      	bne.n	800c620 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800c61a:	7b7b      	ldrb	r3, [r7, #13]
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d001      	beq.n	800c624 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800c620:	2301      	movs	r3, #1
 800c622:	e069      	b.n	800c6f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2202      	movs	r2, #2
 800c628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2202      	movs	r2, #2
 800c630:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c634:	e031      	b.n	800c69a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	2b04      	cmp	r3, #4
 800c63a:	d110      	bne.n	800c65e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c63c:	7bbb      	ldrb	r3, [r7, #14]
 800c63e:	2b01      	cmp	r3, #1
 800c640:	d102      	bne.n	800c648 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c642:	7b3b      	ldrb	r3, [r7, #12]
 800c644:	2b01      	cmp	r3, #1
 800c646:	d001      	beq.n	800c64c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800c648:	2301      	movs	r3, #1
 800c64a:	e055      	b.n	800c6f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2202      	movs	r2, #2
 800c650:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2202      	movs	r2, #2
 800c658:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c65c:	e01d      	b.n	800c69a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c65e:	7bfb      	ldrb	r3, [r7, #15]
 800c660:	2b01      	cmp	r3, #1
 800c662:	d108      	bne.n	800c676 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c664:	7bbb      	ldrb	r3, [r7, #14]
 800c666:	2b01      	cmp	r3, #1
 800c668:	d105      	bne.n	800c676 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c66a:	7b7b      	ldrb	r3, [r7, #13]
 800c66c:	2b01      	cmp	r3, #1
 800c66e:	d102      	bne.n	800c676 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c670:	7b3b      	ldrb	r3, [r7, #12]
 800c672:	2b01      	cmp	r3, #1
 800c674:	d001      	beq.n	800c67a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800c676:	2301      	movs	r3, #1
 800c678:	e03e      	b.n	800c6f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2202      	movs	r2, #2
 800c67e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2202      	movs	r2, #2
 800c686:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2202      	movs	r2, #2
 800c68e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2202      	movs	r2, #2
 800c696:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d003      	beq.n	800c6a8 <HAL_TIM_Encoder_Start+0xc4>
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	2b04      	cmp	r3, #4
 800c6a4:	d008      	beq.n	800c6b8 <HAL_TIM_Encoder_Start+0xd4>
 800c6a6:	e00f      	b.n	800c6c8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	2201      	movs	r2, #1
 800c6ae:	2100      	movs	r1, #0
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f000 ffb9 	bl	800d628 <TIM_CCxChannelCmd>
      break;
 800c6b6:	e016      	b.n	800c6e6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	2201      	movs	r2, #1
 800c6be:	2104      	movs	r1, #4
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f000 ffb1 	bl	800d628 <TIM_CCxChannelCmd>
      break;
 800c6c6:	e00e      	b.n	800c6e6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	2201      	movs	r2, #1
 800c6ce:	2100      	movs	r1, #0
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f000 ffa9 	bl	800d628 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	2201      	movs	r2, #1
 800c6dc:	2104      	movs	r1, #4
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f000 ffa2 	bl	800d628 <TIM_CCxChannelCmd>
      break;
 800c6e4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	681a      	ldr	r2, [r3, #0]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f042 0201 	orr.w	r2, r2, #1
 800c6f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c6f6:	2300      	movs	r3, #0
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3710      	adds	r7, #16
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}

0800c700 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b086      	sub	sp, #24
 800c704:	af00      	add	r7, sp, #0
 800c706:	60f8      	str	r0, [r7, #12]
 800c708:	60b9      	str	r1, [r7, #8]
 800c70a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c70c:	2300      	movs	r3, #0
 800c70e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c716:	2b01      	cmp	r3, #1
 800c718:	d101      	bne.n	800c71e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c71a:	2302      	movs	r3, #2
 800c71c:	e0ff      	b.n	800c91e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	2201      	movs	r2, #1
 800c722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2b14      	cmp	r3, #20
 800c72a:	f200 80f0 	bhi.w	800c90e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c72e:	a201      	add	r2, pc, #4	@ (adr r2, 800c734 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c734:	0800c789 	.word	0x0800c789
 800c738:	0800c90f 	.word	0x0800c90f
 800c73c:	0800c90f 	.word	0x0800c90f
 800c740:	0800c90f 	.word	0x0800c90f
 800c744:	0800c7c9 	.word	0x0800c7c9
 800c748:	0800c90f 	.word	0x0800c90f
 800c74c:	0800c90f 	.word	0x0800c90f
 800c750:	0800c90f 	.word	0x0800c90f
 800c754:	0800c80b 	.word	0x0800c80b
 800c758:	0800c90f 	.word	0x0800c90f
 800c75c:	0800c90f 	.word	0x0800c90f
 800c760:	0800c90f 	.word	0x0800c90f
 800c764:	0800c84b 	.word	0x0800c84b
 800c768:	0800c90f 	.word	0x0800c90f
 800c76c:	0800c90f 	.word	0x0800c90f
 800c770:	0800c90f 	.word	0x0800c90f
 800c774:	0800c88d 	.word	0x0800c88d
 800c778:	0800c90f 	.word	0x0800c90f
 800c77c:	0800c90f 	.word	0x0800c90f
 800c780:	0800c90f 	.word	0x0800c90f
 800c784:	0800c8cd 	.word	0x0800c8cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	68b9      	ldr	r1, [r7, #8]
 800c78e:	4618      	mov	r0, r3
 800c790:	f000 fb84 	bl	800ce9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	699a      	ldr	r2, [r3, #24]
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	f042 0208 	orr.w	r2, r2, #8
 800c7a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	699a      	ldr	r2, [r3, #24]
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	f022 0204 	bic.w	r2, r2, #4
 800c7b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	6999      	ldr	r1, [r3, #24]
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	691a      	ldr	r2, [r3, #16]
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	430a      	orrs	r2, r1
 800c7c4:	619a      	str	r2, [r3, #24]
      break;
 800c7c6:	e0a5      	b.n	800c914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	68b9      	ldr	r1, [r7, #8]
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f000 fbfe 	bl	800cfd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	699a      	ldr	r2, [r3, #24]
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c7e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	699a      	ldr	r2, [r3, #24]
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c7f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	6999      	ldr	r1, [r3, #24]
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	691b      	ldr	r3, [r3, #16]
 800c7fe:	021a      	lsls	r2, r3, #8
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	430a      	orrs	r2, r1
 800c806:	619a      	str	r2, [r3, #24]
      break;
 800c808:	e084      	b.n	800c914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	68b9      	ldr	r1, [r7, #8]
 800c810:	4618      	mov	r0, r3
 800c812:	f000 fc71 	bl	800d0f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	69da      	ldr	r2, [r3, #28]
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f042 0208 	orr.w	r2, r2, #8
 800c824:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	69da      	ldr	r2, [r3, #28]
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f022 0204 	bic.w	r2, r2, #4
 800c834:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	69d9      	ldr	r1, [r3, #28]
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	691a      	ldr	r2, [r3, #16]
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	430a      	orrs	r2, r1
 800c846:	61da      	str	r2, [r3, #28]
      break;
 800c848:	e064      	b.n	800c914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	68b9      	ldr	r1, [r7, #8]
 800c850:	4618      	mov	r0, r3
 800c852:	f000 fce3 	bl	800d21c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	69da      	ldr	r2, [r3, #28]
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c864:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	69da      	ldr	r2, [r3, #28]
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c874:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	69d9      	ldr	r1, [r3, #28]
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	691b      	ldr	r3, [r3, #16]
 800c880:	021a      	lsls	r2, r3, #8
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	430a      	orrs	r2, r1
 800c888:	61da      	str	r2, [r3, #28]
      break;
 800c88a:	e043      	b.n	800c914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	68b9      	ldr	r1, [r7, #8]
 800c892:	4618      	mov	r0, r3
 800c894:	f000 fd56 	bl	800d344 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f042 0208 	orr.w	r2, r2, #8
 800c8a6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f022 0204 	bic.w	r2, r2, #4
 800c8b6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	691a      	ldr	r2, [r3, #16]
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	430a      	orrs	r2, r1
 800c8c8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800c8ca:	e023      	b.n	800c914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	68b9      	ldr	r1, [r7, #8]
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f000 fda0 	bl	800d418 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c8e6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c8f6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	691b      	ldr	r3, [r3, #16]
 800c902:	021a      	lsls	r2, r3, #8
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	430a      	orrs	r2, r1
 800c90a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800c90c:	e002      	b.n	800c914 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c90e:	2301      	movs	r3, #1
 800c910:	75fb      	strb	r3, [r7, #23]
      break;
 800c912:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2200      	movs	r2, #0
 800c918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c91c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3718      	adds	r7, #24
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}
 800c926:	bf00      	nop

0800c928 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b084      	sub	sp, #16
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c932:	2300      	movs	r3, #0
 800c934:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c93c:	2b01      	cmp	r3, #1
 800c93e:	d101      	bne.n	800c944 <HAL_TIM_ConfigClockSource+0x1c>
 800c940:	2302      	movs	r3, #2
 800c942:	e0f6      	b.n	800cb32 <HAL_TIM_ConfigClockSource+0x20a>
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2201      	movs	r2, #1
 800c948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2202      	movs	r2, #2
 800c950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	689b      	ldr	r3, [r3, #8]
 800c95a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800c962:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c966:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c96e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	68ba      	ldr	r2, [r7, #8]
 800c976:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	4a6f      	ldr	r2, [pc, #444]	@ (800cb3c <HAL_TIM_ConfigClockSource+0x214>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	f000 80c1 	beq.w	800cb06 <HAL_TIM_ConfigClockSource+0x1de>
 800c984:	4a6d      	ldr	r2, [pc, #436]	@ (800cb3c <HAL_TIM_ConfigClockSource+0x214>)
 800c986:	4293      	cmp	r3, r2
 800c988:	f200 80c6 	bhi.w	800cb18 <HAL_TIM_ConfigClockSource+0x1f0>
 800c98c:	4a6c      	ldr	r2, [pc, #432]	@ (800cb40 <HAL_TIM_ConfigClockSource+0x218>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	f000 80b9 	beq.w	800cb06 <HAL_TIM_ConfigClockSource+0x1de>
 800c994:	4a6a      	ldr	r2, [pc, #424]	@ (800cb40 <HAL_TIM_ConfigClockSource+0x218>)
 800c996:	4293      	cmp	r3, r2
 800c998:	f200 80be 	bhi.w	800cb18 <HAL_TIM_ConfigClockSource+0x1f0>
 800c99c:	4a69      	ldr	r2, [pc, #420]	@ (800cb44 <HAL_TIM_ConfigClockSource+0x21c>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	f000 80b1 	beq.w	800cb06 <HAL_TIM_ConfigClockSource+0x1de>
 800c9a4:	4a67      	ldr	r2, [pc, #412]	@ (800cb44 <HAL_TIM_ConfigClockSource+0x21c>)
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	f200 80b6 	bhi.w	800cb18 <HAL_TIM_ConfigClockSource+0x1f0>
 800c9ac:	4a66      	ldr	r2, [pc, #408]	@ (800cb48 <HAL_TIM_ConfigClockSource+0x220>)
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	f000 80a9 	beq.w	800cb06 <HAL_TIM_ConfigClockSource+0x1de>
 800c9b4:	4a64      	ldr	r2, [pc, #400]	@ (800cb48 <HAL_TIM_ConfigClockSource+0x220>)
 800c9b6:	4293      	cmp	r3, r2
 800c9b8:	f200 80ae 	bhi.w	800cb18 <HAL_TIM_ConfigClockSource+0x1f0>
 800c9bc:	4a63      	ldr	r2, [pc, #396]	@ (800cb4c <HAL_TIM_ConfigClockSource+0x224>)
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	f000 80a1 	beq.w	800cb06 <HAL_TIM_ConfigClockSource+0x1de>
 800c9c4:	4a61      	ldr	r2, [pc, #388]	@ (800cb4c <HAL_TIM_ConfigClockSource+0x224>)
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	f200 80a6 	bhi.w	800cb18 <HAL_TIM_ConfigClockSource+0x1f0>
 800c9cc:	4a60      	ldr	r2, [pc, #384]	@ (800cb50 <HAL_TIM_ConfigClockSource+0x228>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	f000 8099 	beq.w	800cb06 <HAL_TIM_ConfigClockSource+0x1de>
 800c9d4:	4a5e      	ldr	r2, [pc, #376]	@ (800cb50 <HAL_TIM_ConfigClockSource+0x228>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	f200 809e 	bhi.w	800cb18 <HAL_TIM_ConfigClockSource+0x1f0>
 800c9dc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c9e0:	f000 8091 	beq.w	800cb06 <HAL_TIM_ConfigClockSource+0x1de>
 800c9e4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c9e8:	f200 8096 	bhi.w	800cb18 <HAL_TIM_ConfigClockSource+0x1f0>
 800c9ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c9f0:	f000 8089 	beq.w	800cb06 <HAL_TIM_ConfigClockSource+0x1de>
 800c9f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c9f8:	f200 808e 	bhi.w	800cb18 <HAL_TIM_ConfigClockSource+0x1f0>
 800c9fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ca00:	d03e      	beq.n	800ca80 <HAL_TIM_ConfigClockSource+0x158>
 800ca02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ca06:	f200 8087 	bhi.w	800cb18 <HAL_TIM_ConfigClockSource+0x1f0>
 800ca0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca0e:	f000 8086 	beq.w	800cb1e <HAL_TIM_ConfigClockSource+0x1f6>
 800ca12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca16:	d87f      	bhi.n	800cb18 <HAL_TIM_ConfigClockSource+0x1f0>
 800ca18:	2b70      	cmp	r3, #112	@ 0x70
 800ca1a:	d01a      	beq.n	800ca52 <HAL_TIM_ConfigClockSource+0x12a>
 800ca1c:	2b70      	cmp	r3, #112	@ 0x70
 800ca1e:	d87b      	bhi.n	800cb18 <HAL_TIM_ConfigClockSource+0x1f0>
 800ca20:	2b60      	cmp	r3, #96	@ 0x60
 800ca22:	d050      	beq.n	800cac6 <HAL_TIM_ConfigClockSource+0x19e>
 800ca24:	2b60      	cmp	r3, #96	@ 0x60
 800ca26:	d877      	bhi.n	800cb18 <HAL_TIM_ConfigClockSource+0x1f0>
 800ca28:	2b50      	cmp	r3, #80	@ 0x50
 800ca2a:	d03c      	beq.n	800caa6 <HAL_TIM_ConfigClockSource+0x17e>
 800ca2c:	2b50      	cmp	r3, #80	@ 0x50
 800ca2e:	d873      	bhi.n	800cb18 <HAL_TIM_ConfigClockSource+0x1f0>
 800ca30:	2b40      	cmp	r3, #64	@ 0x40
 800ca32:	d058      	beq.n	800cae6 <HAL_TIM_ConfigClockSource+0x1be>
 800ca34:	2b40      	cmp	r3, #64	@ 0x40
 800ca36:	d86f      	bhi.n	800cb18 <HAL_TIM_ConfigClockSource+0x1f0>
 800ca38:	2b30      	cmp	r3, #48	@ 0x30
 800ca3a:	d064      	beq.n	800cb06 <HAL_TIM_ConfigClockSource+0x1de>
 800ca3c:	2b30      	cmp	r3, #48	@ 0x30
 800ca3e:	d86b      	bhi.n	800cb18 <HAL_TIM_ConfigClockSource+0x1f0>
 800ca40:	2b20      	cmp	r3, #32
 800ca42:	d060      	beq.n	800cb06 <HAL_TIM_ConfigClockSource+0x1de>
 800ca44:	2b20      	cmp	r3, #32
 800ca46:	d867      	bhi.n	800cb18 <HAL_TIM_ConfigClockSource+0x1f0>
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d05c      	beq.n	800cb06 <HAL_TIM_ConfigClockSource+0x1de>
 800ca4c:	2b10      	cmp	r3, #16
 800ca4e:	d05a      	beq.n	800cb06 <HAL_TIM_ConfigClockSource+0x1de>
 800ca50:	e062      	b.n	800cb18 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ca62:	f000 fdc1 	bl	800d5e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	689b      	ldr	r3, [r3, #8]
 800ca6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ca74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	68ba      	ldr	r2, [r7, #8]
 800ca7c:	609a      	str	r2, [r3, #8]
      break;
 800ca7e:	e04f      	b.n	800cb20 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ca90:	f000 fdaa 	bl	800d5e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	689a      	ldr	r2, [r3, #8]
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800caa2:	609a      	str	r2, [r3, #8]
      break;
 800caa4:	e03c      	b.n	800cb20 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cab2:	461a      	mov	r2, r3
 800cab4:	f000 fd1c 	bl	800d4f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	2150      	movs	r1, #80	@ 0x50
 800cabe:	4618      	mov	r0, r3
 800cac0:	f000 fd75 	bl	800d5ae <TIM_ITRx_SetConfig>
      break;
 800cac4:	e02c      	b.n	800cb20 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cad2:	461a      	mov	r2, r3
 800cad4:	f000 fd3b 	bl	800d54e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	2160      	movs	r1, #96	@ 0x60
 800cade:	4618      	mov	r0, r3
 800cae0:	f000 fd65 	bl	800d5ae <TIM_ITRx_SetConfig>
      break;
 800cae4:	e01c      	b.n	800cb20 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800caf2:	461a      	mov	r2, r3
 800caf4:	f000 fcfc 	bl	800d4f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	2140      	movs	r1, #64	@ 0x40
 800cafe:	4618      	mov	r0, r3
 800cb00:	f000 fd55 	bl	800d5ae <TIM_ITRx_SetConfig>
      break;
 800cb04:	e00c      	b.n	800cb20 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681a      	ldr	r2, [r3, #0]
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	4619      	mov	r1, r3
 800cb10:	4610      	mov	r0, r2
 800cb12:	f000 fd4c 	bl	800d5ae <TIM_ITRx_SetConfig>
      break;
 800cb16:	e003      	b.n	800cb20 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800cb18:	2301      	movs	r3, #1
 800cb1a:	73fb      	strb	r3, [r7, #15]
      break;
 800cb1c:	e000      	b.n	800cb20 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800cb1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2201      	movs	r2, #1
 800cb24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cb30:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb32:	4618      	mov	r0, r3
 800cb34:	3710      	adds	r7, #16
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}
 800cb3a:	bf00      	nop
 800cb3c:	00100070 	.word	0x00100070
 800cb40:	00100060 	.word	0x00100060
 800cb44:	00100050 	.word	0x00100050
 800cb48:	00100040 	.word	0x00100040
 800cb4c:	00100030 	.word	0x00100030
 800cb50:	00100020 	.word	0x00100020

0800cb54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cb54:	b480      	push	{r7}
 800cb56:	b083      	sub	sp, #12
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cb5c:	bf00      	nop
 800cb5e:	370c      	adds	r7, #12
 800cb60:	46bd      	mov	sp, r7
 800cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb66:	4770      	bx	lr

0800cb68 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b083      	sub	sp, #12
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800cb70:	bf00      	nop
 800cb72:	370c      	adds	r7, #12
 800cb74:	46bd      	mov	sp, r7
 800cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7a:	4770      	bx	lr

0800cb7c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b083      	sub	sp, #12
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800cb84:	bf00      	nop
 800cb86:	370c      	adds	r7, #12
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8e:	4770      	bx	lr

0800cb90 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b084      	sub	sp, #16
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb9c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cba2:	687a      	ldr	r2, [r7, #4]
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d107      	bne.n	800cbb8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	2201      	movs	r2, #1
 800cbac:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	2201      	movs	r2, #1
 800cbb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cbb6:	e02a      	b.n	800cc0e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbbc:	687a      	ldr	r2, [r7, #4]
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	d107      	bne.n	800cbd2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	2202      	movs	r2, #2
 800cbc6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	2201      	movs	r2, #1
 800cbcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cbd0:	e01d      	b.n	800cc0e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbd6:	687a      	ldr	r2, [r7, #4]
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d107      	bne.n	800cbec <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	2204      	movs	r2, #4
 800cbe0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	2201      	movs	r2, #1
 800cbe6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cbea:	e010      	b.n	800cc0e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbf0:	687a      	ldr	r2, [r7, #4]
 800cbf2:	429a      	cmp	r2, r3
 800cbf4:	d107      	bne.n	800cc06 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	2208      	movs	r2, #8
 800cbfa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	2201      	movs	r2, #1
 800cc00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cc04:	e003      	b.n	800cc0e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	2201      	movs	r2, #1
 800cc0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800cc0e:	68f8      	ldr	r0, [r7, #12]
 800cc10:	f7ff ffb4 	bl	800cb7c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	2200      	movs	r2, #0
 800cc18:	771a      	strb	r2, [r3, #28]
}
 800cc1a:	bf00      	nop
 800cc1c:	3710      	adds	r7, #16
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}

0800cc22 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800cc22:	b580      	push	{r7, lr}
 800cc24:	b084      	sub	sp, #16
 800cc26:	af00      	add	r7, sp, #0
 800cc28:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc2e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc34:	687a      	ldr	r2, [r7, #4]
 800cc36:	429a      	cmp	r2, r3
 800cc38:	d10b      	bne.n	800cc52 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	2201      	movs	r2, #1
 800cc3e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	69db      	ldr	r3, [r3, #28]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d136      	bne.n	800ccb6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	2201      	movs	r2, #1
 800cc4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cc50:	e031      	b.n	800ccb6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc56:	687a      	ldr	r2, [r7, #4]
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	d10b      	bne.n	800cc74 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	2202      	movs	r2, #2
 800cc60:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	69db      	ldr	r3, [r3, #28]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d125      	bne.n	800ccb6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	2201      	movs	r2, #1
 800cc6e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cc72:	e020      	b.n	800ccb6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc78:	687a      	ldr	r2, [r7, #4]
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	d10b      	bne.n	800cc96 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	2204      	movs	r2, #4
 800cc82:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	69db      	ldr	r3, [r3, #28]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d114      	bne.n	800ccb6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	2201      	movs	r2, #1
 800cc90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cc94:	e00f      	b.n	800ccb6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc9a:	687a      	ldr	r2, [r7, #4]
 800cc9c:	429a      	cmp	r2, r3
 800cc9e:	d10a      	bne.n	800ccb6 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	2208      	movs	r2, #8
 800cca4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	69db      	ldr	r3, [r3, #28]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d103      	bne.n	800ccb6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	2201      	movs	r2, #1
 800ccb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ccb6:	68f8      	ldr	r0, [r7, #12]
 800ccb8:	f7ff ff4c 	bl	800cb54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	771a      	strb	r2, [r3, #28]
}
 800ccc2:	bf00      	nop
 800ccc4:	3710      	adds	r7, #16
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}

0800ccca <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ccca:	b580      	push	{r7, lr}
 800cccc:	b084      	sub	sp, #16
 800ccce:	af00      	add	r7, sp, #0
 800ccd0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccd6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccdc:	687a      	ldr	r2, [r7, #4]
 800ccde:	429a      	cmp	r2, r3
 800cce0:	d103      	bne.n	800ccea <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2201      	movs	r2, #1
 800cce6:	771a      	strb	r2, [r3, #28]
 800cce8:	e019      	b.n	800cd1e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccee:	687a      	ldr	r2, [r7, #4]
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	d103      	bne.n	800ccfc <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	2202      	movs	r2, #2
 800ccf8:	771a      	strb	r2, [r3, #28]
 800ccfa:	e010      	b.n	800cd1e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd00:	687a      	ldr	r2, [r7, #4]
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d103      	bne.n	800cd0e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	2204      	movs	r2, #4
 800cd0a:	771a      	strb	r2, [r3, #28]
 800cd0c:	e007      	b.n	800cd1e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd12:	687a      	ldr	r2, [r7, #4]
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d102      	bne.n	800cd1e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	2208      	movs	r2, #8
 800cd1c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800cd1e:	68f8      	ldr	r0, [r7, #12]
 800cd20:	f7ff ff22 	bl	800cb68 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	2200      	movs	r2, #0
 800cd28:	771a      	strb	r2, [r3, #28]
}
 800cd2a:	bf00      	nop
 800cd2c:	3710      	adds	r7, #16
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}
	...

0800cd34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cd34:	b480      	push	{r7}
 800cd36:	b085      	sub	sp, #20
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
 800cd3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	4a4c      	ldr	r2, [pc, #304]	@ (800ce78 <TIM_Base_SetConfig+0x144>)
 800cd48:	4293      	cmp	r3, r2
 800cd4a:	d017      	beq.n	800cd7c <TIM_Base_SetConfig+0x48>
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd52:	d013      	beq.n	800cd7c <TIM_Base_SetConfig+0x48>
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	4a49      	ldr	r2, [pc, #292]	@ (800ce7c <TIM_Base_SetConfig+0x148>)
 800cd58:	4293      	cmp	r3, r2
 800cd5a:	d00f      	beq.n	800cd7c <TIM_Base_SetConfig+0x48>
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	4a48      	ldr	r2, [pc, #288]	@ (800ce80 <TIM_Base_SetConfig+0x14c>)
 800cd60:	4293      	cmp	r3, r2
 800cd62:	d00b      	beq.n	800cd7c <TIM_Base_SetConfig+0x48>
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	4a47      	ldr	r2, [pc, #284]	@ (800ce84 <TIM_Base_SetConfig+0x150>)
 800cd68:	4293      	cmp	r3, r2
 800cd6a:	d007      	beq.n	800cd7c <TIM_Base_SetConfig+0x48>
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	4a46      	ldr	r2, [pc, #280]	@ (800ce88 <TIM_Base_SetConfig+0x154>)
 800cd70:	4293      	cmp	r3, r2
 800cd72:	d003      	beq.n	800cd7c <TIM_Base_SetConfig+0x48>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	4a45      	ldr	r2, [pc, #276]	@ (800ce8c <TIM_Base_SetConfig+0x158>)
 800cd78:	4293      	cmp	r3, r2
 800cd7a:	d108      	bne.n	800cd8e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	685b      	ldr	r3, [r3, #4]
 800cd88:	68fa      	ldr	r2, [r7, #12]
 800cd8a:	4313      	orrs	r3, r2
 800cd8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	4a39      	ldr	r2, [pc, #228]	@ (800ce78 <TIM_Base_SetConfig+0x144>)
 800cd92:	4293      	cmp	r3, r2
 800cd94:	d023      	beq.n	800cdde <TIM_Base_SetConfig+0xaa>
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd9c:	d01f      	beq.n	800cdde <TIM_Base_SetConfig+0xaa>
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	4a36      	ldr	r2, [pc, #216]	@ (800ce7c <TIM_Base_SetConfig+0x148>)
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d01b      	beq.n	800cdde <TIM_Base_SetConfig+0xaa>
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	4a35      	ldr	r2, [pc, #212]	@ (800ce80 <TIM_Base_SetConfig+0x14c>)
 800cdaa:	4293      	cmp	r3, r2
 800cdac:	d017      	beq.n	800cdde <TIM_Base_SetConfig+0xaa>
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	4a34      	ldr	r2, [pc, #208]	@ (800ce84 <TIM_Base_SetConfig+0x150>)
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	d013      	beq.n	800cdde <TIM_Base_SetConfig+0xaa>
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	4a33      	ldr	r2, [pc, #204]	@ (800ce88 <TIM_Base_SetConfig+0x154>)
 800cdba:	4293      	cmp	r3, r2
 800cdbc:	d00f      	beq.n	800cdde <TIM_Base_SetConfig+0xaa>
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	4a33      	ldr	r2, [pc, #204]	@ (800ce90 <TIM_Base_SetConfig+0x15c>)
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	d00b      	beq.n	800cdde <TIM_Base_SetConfig+0xaa>
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	4a32      	ldr	r2, [pc, #200]	@ (800ce94 <TIM_Base_SetConfig+0x160>)
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	d007      	beq.n	800cdde <TIM_Base_SetConfig+0xaa>
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	4a31      	ldr	r2, [pc, #196]	@ (800ce98 <TIM_Base_SetConfig+0x164>)
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	d003      	beq.n	800cdde <TIM_Base_SetConfig+0xaa>
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	4a2c      	ldr	r2, [pc, #176]	@ (800ce8c <TIM_Base_SetConfig+0x158>)
 800cdda:	4293      	cmp	r3, r2
 800cddc:	d108      	bne.n	800cdf0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cde4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	68db      	ldr	r3, [r3, #12]
 800cdea:	68fa      	ldr	r2, [r7, #12]
 800cdec:	4313      	orrs	r3, r2
 800cdee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	695b      	ldr	r3, [r3, #20]
 800cdfa:	4313      	orrs	r3, r2
 800cdfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	68fa      	ldr	r2, [r7, #12]
 800ce02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	689a      	ldr	r2, [r3, #8]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	681a      	ldr	r2, [r3, #0]
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	4a18      	ldr	r2, [pc, #96]	@ (800ce78 <TIM_Base_SetConfig+0x144>)
 800ce18:	4293      	cmp	r3, r2
 800ce1a:	d013      	beq.n	800ce44 <TIM_Base_SetConfig+0x110>
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	4a1a      	ldr	r2, [pc, #104]	@ (800ce88 <TIM_Base_SetConfig+0x154>)
 800ce20:	4293      	cmp	r3, r2
 800ce22:	d00f      	beq.n	800ce44 <TIM_Base_SetConfig+0x110>
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	4a1a      	ldr	r2, [pc, #104]	@ (800ce90 <TIM_Base_SetConfig+0x15c>)
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	d00b      	beq.n	800ce44 <TIM_Base_SetConfig+0x110>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	4a19      	ldr	r2, [pc, #100]	@ (800ce94 <TIM_Base_SetConfig+0x160>)
 800ce30:	4293      	cmp	r3, r2
 800ce32:	d007      	beq.n	800ce44 <TIM_Base_SetConfig+0x110>
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	4a18      	ldr	r2, [pc, #96]	@ (800ce98 <TIM_Base_SetConfig+0x164>)
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d003      	beq.n	800ce44 <TIM_Base_SetConfig+0x110>
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	4a13      	ldr	r2, [pc, #76]	@ (800ce8c <TIM_Base_SetConfig+0x158>)
 800ce40:	4293      	cmp	r3, r2
 800ce42:	d103      	bne.n	800ce4c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	691a      	ldr	r2, [r3, #16]
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2201      	movs	r2, #1
 800ce50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	691b      	ldr	r3, [r3, #16]
 800ce56:	f003 0301 	and.w	r3, r3, #1
 800ce5a:	2b01      	cmp	r3, #1
 800ce5c:	d105      	bne.n	800ce6a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	691b      	ldr	r3, [r3, #16]
 800ce62:	f023 0201 	bic.w	r2, r3, #1
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	611a      	str	r2, [r3, #16]
  }
}
 800ce6a:	bf00      	nop
 800ce6c:	3714      	adds	r7, #20
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce74:	4770      	bx	lr
 800ce76:	bf00      	nop
 800ce78:	40012c00 	.word	0x40012c00
 800ce7c:	40000400 	.word	0x40000400
 800ce80:	40000800 	.word	0x40000800
 800ce84:	40000c00 	.word	0x40000c00
 800ce88:	40013400 	.word	0x40013400
 800ce8c:	40015000 	.word	0x40015000
 800ce90:	40014000 	.word	0x40014000
 800ce94:	40014400 	.word	0x40014400
 800ce98:	40014800 	.word	0x40014800

0800ce9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b087      	sub	sp, #28
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6a1b      	ldr	r3, [r3, #32]
 800ceaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6a1b      	ldr	r3, [r3, #32]
 800ceb0:	f023 0201 	bic.w	r2, r3, #1
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	685b      	ldr	r3, [r3, #4]
 800cebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	699b      	ldr	r3, [r3, #24]
 800cec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ceca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	f023 0303 	bic.w	r3, r3, #3
 800ced6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	68fa      	ldr	r2, [r7, #12]
 800cede:	4313      	orrs	r3, r2
 800cee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cee2:	697b      	ldr	r3, [r7, #20]
 800cee4:	f023 0302 	bic.w	r3, r3, #2
 800cee8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	689b      	ldr	r3, [r3, #8]
 800ceee:	697a      	ldr	r2, [r7, #20]
 800cef0:	4313      	orrs	r3, r2
 800cef2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	4a30      	ldr	r2, [pc, #192]	@ (800cfb8 <TIM_OC1_SetConfig+0x11c>)
 800cef8:	4293      	cmp	r3, r2
 800cefa:	d013      	beq.n	800cf24 <TIM_OC1_SetConfig+0x88>
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	4a2f      	ldr	r2, [pc, #188]	@ (800cfbc <TIM_OC1_SetConfig+0x120>)
 800cf00:	4293      	cmp	r3, r2
 800cf02:	d00f      	beq.n	800cf24 <TIM_OC1_SetConfig+0x88>
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	4a2e      	ldr	r2, [pc, #184]	@ (800cfc0 <TIM_OC1_SetConfig+0x124>)
 800cf08:	4293      	cmp	r3, r2
 800cf0a:	d00b      	beq.n	800cf24 <TIM_OC1_SetConfig+0x88>
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	4a2d      	ldr	r2, [pc, #180]	@ (800cfc4 <TIM_OC1_SetConfig+0x128>)
 800cf10:	4293      	cmp	r3, r2
 800cf12:	d007      	beq.n	800cf24 <TIM_OC1_SetConfig+0x88>
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	4a2c      	ldr	r2, [pc, #176]	@ (800cfc8 <TIM_OC1_SetConfig+0x12c>)
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	d003      	beq.n	800cf24 <TIM_OC1_SetConfig+0x88>
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	4a2b      	ldr	r2, [pc, #172]	@ (800cfcc <TIM_OC1_SetConfig+0x130>)
 800cf20:	4293      	cmp	r3, r2
 800cf22:	d10c      	bne.n	800cf3e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	f023 0308 	bic.w	r3, r3, #8
 800cf2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	68db      	ldr	r3, [r3, #12]
 800cf30:	697a      	ldr	r2, [r7, #20]
 800cf32:	4313      	orrs	r3, r2
 800cf34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cf36:	697b      	ldr	r3, [r7, #20]
 800cf38:	f023 0304 	bic.w	r3, r3, #4
 800cf3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	4a1d      	ldr	r2, [pc, #116]	@ (800cfb8 <TIM_OC1_SetConfig+0x11c>)
 800cf42:	4293      	cmp	r3, r2
 800cf44:	d013      	beq.n	800cf6e <TIM_OC1_SetConfig+0xd2>
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	4a1c      	ldr	r2, [pc, #112]	@ (800cfbc <TIM_OC1_SetConfig+0x120>)
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d00f      	beq.n	800cf6e <TIM_OC1_SetConfig+0xd2>
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	4a1b      	ldr	r2, [pc, #108]	@ (800cfc0 <TIM_OC1_SetConfig+0x124>)
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d00b      	beq.n	800cf6e <TIM_OC1_SetConfig+0xd2>
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	4a1a      	ldr	r2, [pc, #104]	@ (800cfc4 <TIM_OC1_SetConfig+0x128>)
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d007      	beq.n	800cf6e <TIM_OC1_SetConfig+0xd2>
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	4a19      	ldr	r2, [pc, #100]	@ (800cfc8 <TIM_OC1_SetConfig+0x12c>)
 800cf62:	4293      	cmp	r3, r2
 800cf64:	d003      	beq.n	800cf6e <TIM_OC1_SetConfig+0xd2>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	4a18      	ldr	r2, [pc, #96]	@ (800cfcc <TIM_OC1_SetConfig+0x130>)
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	d111      	bne.n	800cf92 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cf74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cf7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	695b      	ldr	r3, [r3, #20]
 800cf82:	693a      	ldr	r2, [r7, #16]
 800cf84:	4313      	orrs	r3, r2
 800cf86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	699b      	ldr	r3, [r3, #24]
 800cf8c:	693a      	ldr	r2, [r7, #16]
 800cf8e:	4313      	orrs	r3, r2
 800cf90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	693a      	ldr	r2, [r7, #16]
 800cf96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	68fa      	ldr	r2, [r7, #12]
 800cf9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	685a      	ldr	r2, [r3, #4]
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	697a      	ldr	r2, [r7, #20]
 800cfaa:	621a      	str	r2, [r3, #32]
}
 800cfac:	bf00      	nop
 800cfae:	371c      	adds	r7, #28
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb6:	4770      	bx	lr
 800cfb8:	40012c00 	.word	0x40012c00
 800cfbc:	40013400 	.word	0x40013400
 800cfc0:	40014000 	.word	0x40014000
 800cfc4:	40014400 	.word	0x40014400
 800cfc8:	40014800 	.word	0x40014800
 800cfcc:	40015000 	.word	0x40015000

0800cfd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b087      	sub	sp, #28
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
 800cfd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6a1b      	ldr	r3, [r3, #32]
 800cfde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6a1b      	ldr	r3, [r3, #32]
 800cfe4:	f023 0210 	bic.w	r2, r3, #16
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	685b      	ldr	r3, [r3, #4]
 800cff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	699b      	ldr	r3, [r3, #24]
 800cff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cffe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d00a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	021b      	lsls	r3, r3, #8
 800d012:	68fa      	ldr	r2, [r7, #12]
 800d014:	4313      	orrs	r3, r2
 800d016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	f023 0320 	bic.w	r3, r3, #32
 800d01e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	689b      	ldr	r3, [r3, #8]
 800d024:	011b      	lsls	r3, r3, #4
 800d026:	697a      	ldr	r2, [r7, #20]
 800d028:	4313      	orrs	r3, r2
 800d02a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	4a2c      	ldr	r2, [pc, #176]	@ (800d0e0 <TIM_OC2_SetConfig+0x110>)
 800d030:	4293      	cmp	r3, r2
 800d032:	d007      	beq.n	800d044 <TIM_OC2_SetConfig+0x74>
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	4a2b      	ldr	r2, [pc, #172]	@ (800d0e4 <TIM_OC2_SetConfig+0x114>)
 800d038:	4293      	cmp	r3, r2
 800d03a:	d003      	beq.n	800d044 <TIM_OC2_SetConfig+0x74>
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	4a2a      	ldr	r2, [pc, #168]	@ (800d0e8 <TIM_OC2_SetConfig+0x118>)
 800d040:	4293      	cmp	r3, r2
 800d042:	d10d      	bne.n	800d060 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d04a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	68db      	ldr	r3, [r3, #12]
 800d050:	011b      	lsls	r3, r3, #4
 800d052:	697a      	ldr	r2, [r7, #20]
 800d054:	4313      	orrs	r3, r2
 800d056:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d05e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	4a1f      	ldr	r2, [pc, #124]	@ (800d0e0 <TIM_OC2_SetConfig+0x110>)
 800d064:	4293      	cmp	r3, r2
 800d066:	d013      	beq.n	800d090 <TIM_OC2_SetConfig+0xc0>
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	4a1e      	ldr	r2, [pc, #120]	@ (800d0e4 <TIM_OC2_SetConfig+0x114>)
 800d06c:	4293      	cmp	r3, r2
 800d06e:	d00f      	beq.n	800d090 <TIM_OC2_SetConfig+0xc0>
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	4a1e      	ldr	r2, [pc, #120]	@ (800d0ec <TIM_OC2_SetConfig+0x11c>)
 800d074:	4293      	cmp	r3, r2
 800d076:	d00b      	beq.n	800d090 <TIM_OC2_SetConfig+0xc0>
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	4a1d      	ldr	r2, [pc, #116]	@ (800d0f0 <TIM_OC2_SetConfig+0x120>)
 800d07c:	4293      	cmp	r3, r2
 800d07e:	d007      	beq.n	800d090 <TIM_OC2_SetConfig+0xc0>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	4a1c      	ldr	r2, [pc, #112]	@ (800d0f4 <TIM_OC2_SetConfig+0x124>)
 800d084:	4293      	cmp	r3, r2
 800d086:	d003      	beq.n	800d090 <TIM_OC2_SetConfig+0xc0>
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	4a17      	ldr	r2, [pc, #92]	@ (800d0e8 <TIM_OC2_SetConfig+0x118>)
 800d08c:	4293      	cmp	r3, r2
 800d08e:	d113      	bne.n	800d0b8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d090:	693b      	ldr	r3, [r7, #16]
 800d092:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d096:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d098:	693b      	ldr	r3, [r7, #16]
 800d09a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d09e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	695b      	ldr	r3, [r3, #20]
 800d0a4:	009b      	lsls	r3, r3, #2
 800d0a6:	693a      	ldr	r2, [r7, #16]
 800d0a8:	4313      	orrs	r3, r2
 800d0aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	699b      	ldr	r3, [r3, #24]
 800d0b0:	009b      	lsls	r3, r3, #2
 800d0b2:	693a      	ldr	r2, [r7, #16]
 800d0b4:	4313      	orrs	r3, r2
 800d0b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	693a      	ldr	r2, [r7, #16]
 800d0bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	68fa      	ldr	r2, [r7, #12]
 800d0c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	685a      	ldr	r2, [r3, #4]
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	697a      	ldr	r2, [r7, #20]
 800d0d0:	621a      	str	r2, [r3, #32]
}
 800d0d2:	bf00      	nop
 800d0d4:	371c      	adds	r7, #28
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0dc:	4770      	bx	lr
 800d0de:	bf00      	nop
 800d0e0:	40012c00 	.word	0x40012c00
 800d0e4:	40013400 	.word	0x40013400
 800d0e8:	40015000 	.word	0x40015000
 800d0ec:	40014000 	.word	0x40014000
 800d0f0:	40014400 	.word	0x40014400
 800d0f4:	40014800 	.word	0x40014800

0800d0f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b087      	sub	sp, #28
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6a1b      	ldr	r3, [r3, #32]
 800d106:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	6a1b      	ldr	r3, [r3, #32]
 800d10c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	685b      	ldr	r3, [r3, #4]
 800d118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	69db      	ldr	r3, [r3, #28]
 800d11e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d12a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	f023 0303 	bic.w	r3, r3, #3
 800d132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	68fa      	ldr	r2, [r7, #12]
 800d13a:	4313      	orrs	r3, r2
 800d13c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	689b      	ldr	r3, [r3, #8]
 800d14a:	021b      	lsls	r3, r3, #8
 800d14c:	697a      	ldr	r2, [r7, #20]
 800d14e:	4313      	orrs	r3, r2
 800d150:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	4a2b      	ldr	r2, [pc, #172]	@ (800d204 <TIM_OC3_SetConfig+0x10c>)
 800d156:	4293      	cmp	r3, r2
 800d158:	d007      	beq.n	800d16a <TIM_OC3_SetConfig+0x72>
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	4a2a      	ldr	r2, [pc, #168]	@ (800d208 <TIM_OC3_SetConfig+0x110>)
 800d15e:	4293      	cmp	r3, r2
 800d160:	d003      	beq.n	800d16a <TIM_OC3_SetConfig+0x72>
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	4a29      	ldr	r2, [pc, #164]	@ (800d20c <TIM_OC3_SetConfig+0x114>)
 800d166:	4293      	cmp	r3, r2
 800d168:	d10d      	bne.n	800d186 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d170:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	68db      	ldr	r3, [r3, #12]
 800d176:	021b      	lsls	r3, r3, #8
 800d178:	697a      	ldr	r2, [r7, #20]
 800d17a:	4313      	orrs	r3, r2
 800d17c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d184:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	4a1e      	ldr	r2, [pc, #120]	@ (800d204 <TIM_OC3_SetConfig+0x10c>)
 800d18a:	4293      	cmp	r3, r2
 800d18c:	d013      	beq.n	800d1b6 <TIM_OC3_SetConfig+0xbe>
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	4a1d      	ldr	r2, [pc, #116]	@ (800d208 <TIM_OC3_SetConfig+0x110>)
 800d192:	4293      	cmp	r3, r2
 800d194:	d00f      	beq.n	800d1b6 <TIM_OC3_SetConfig+0xbe>
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	4a1d      	ldr	r2, [pc, #116]	@ (800d210 <TIM_OC3_SetConfig+0x118>)
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d00b      	beq.n	800d1b6 <TIM_OC3_SetConfig+0xbe>
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	4a1c      	ldr	r2, [pc, #112]	@ (800d214 <TIM_OC3_SetConfig+0x11c>)
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	d007      	beq.n	800d1b6 <TIM_OC3_SetConfig+0xbe>
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	4a1b      	ldr	r2, [pc, #108]	@ (800d218 <TIM_OC3_SetConfig+0x120>)
 800d1aa:	4293      	cmp	r3, r2
 800d1ac:	d003      	beq.n	800d1b6 <TIM_OC3_SetConfig+0xbe>
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	4a16      	ldr	r2, [pc, #88]	@ (800d20c <TIM_OC3_SetConfig+0x114>)
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d113      	bne.n	800d1de <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d1bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d1c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	695b      	ldr	r3, [r3, #20]
 800d1ca:	011b      	lsls	r3, r3, #4
 800d1cc:	693a      	ldr	r2, [r7, #16]
 800d1ce:	4313      	orrs	r3, r2
 800d1d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	699b      	ldr	r3, [r3, #24]
 800d1d6:	011b      	lsls	r3, r3, #4
 800d1d8:	693a      	ldr	r2, [r7, #16]
 800d1da:	4313      	orrs	r3, r2
 800d1dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	693a      	ldr	r2, [r7, #16]
 800d1e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	68fa      	ldr	r2, [r7, #12]
 800d1e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	685a      	ldr	r2, [r3, #4]
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	697a      	ldr	r2, [r7, #20]
 800d1f6:	621a      	str	r2, [r3, #32]
}
 800d1f8:	bf00      	nop
 800d1fa:	371c      	adds	r7, #28
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d202:	4770      	bx	lr
 800d204:	40012c00 	.word	0x40012c00
 800d208:	40013400 	.word	0x40013400
 800d20c:	40015000 	.word	0x40015000
 800d210:	40014000 	.word	0x40014000
 800d214:	40014400 	.word	0x40014400
 800d218:	40014800 	.word	0x40014800

0800d21c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d21c:	b480      	push	{r7}
 800d21e:	b087      	sub	sp, #28
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
 800d224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6a1b      	ldr	r3, [r3, #32]
 800d22a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	6a1b      	ldr	r3, [r3, #32]
 800d230:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	685b      	ldr	r3, [r3, #4]
 800d23c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	69db      	ldr	r3, [r3, #28]
 800d242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d24a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d24e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	021b      	lsls	r3, r3, #8
 800d25e:	68fa      	ldr	r2, [r7, #12]
 800d260:	4313      	orrs	r3, r2
 800d262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d26a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	689b      	ldr	r3, [r3, #8]
 800d270:	031b      	lsls	r3, r3, #12
 800d272:	697a      	ldr	r2, [r7, #20]
 800d274:	4313      	orrs	r3, r2
 800d276:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	4a2c      	ldr	r2, [pc, #176]	@ (800d32c <TIM_OC4_SetConfig+0x110>)
 800d27c:	4293      	cmp	r3, r2
 800d27e:	d007      	beq.n	800d290 <TIM_OC4_SetConfig+0x74>
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	4a2b      	ldr	r2, [pc, #172]	@ (800d330 <TIM_OC4_SetConfig+0x114>)
 800d284:	4293      	cmp	r3, r2
 800d286:	d003      	beq.n	800d290 <TIM_OC4_SetConfig+0x74>
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	4a2a      	ldr	r2, [pc, #168]	@ (800d334 <TIM_OC4_SetConfig+0x118>)
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d10d      	bne.n	800d2ac <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d296:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	68db      	ldr	r3, [r3, #12]
 800d29c:	031b      	lsls	r3, r3, #12
 800d29e:	697a      	ldr	r2, [r7, #20]
 800d2a0:	4313      	orrs	r3, r2
 800d2a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d2aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	4a1f      	ldr	r2, [pc, #124]	@ (800d32c <TIM_OC4_SetConfig+0x110>)
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d013      	beq.n	800d2dc <TIM_OC4_SetConfig+0xc0>
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	4a1e      	ldr	r2, [pc, #120]	@ (800d330 <TIM_OC4_SetConfig+0x114>)
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	d00f      	beq.n	800d2dc <TIM_OC4_SetConfig+0xc0>
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	4a1e      	ldr	r2, [pc, #120]	@ (800d338 <TIM_OC4_SetConfig+0x11c>)
 800d2c0:	4293      	cmp	r3, r2
 800d2c2:	d00b      	beq.n	800d2dc <TIM_OC4_SetConfig+0xc0>
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	4a1d      	ldr	r2, [pc, #116]	@ (800d33c <TIM_OC4_SetConfig+0x120>)
 800d2c8:	4293      	cmp	r3, r2
 800d2ca:	d007      	beq.n	800d2dc <TIM_OC4_SetConfig+0xc0>
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	4a1c      	ldr	r2, [pc, #112]	@ (800d340 <TIM_OC4_SetConfig+0x124>)
 800d2d0:	4293      	cmp	r3, r2
 800d2d2:	d003      	beq.n	800d2dc <TIM_OC4_SetConfig+0xc0>
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	4a17      	ldr	r2, [pc, #92]	@ (800d334 <TIM_OC4_SetConfig+0x118>)
 800d2d8:	4293      	cmp	r3, r2
 800d2da:	d113      	bne.n	800d304 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d2e2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800d2e4:	693b      	ldr	r3, [r7, #16]
 800d2e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d2ea:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	695b      	ldr	r3, [r3, #20]
 800d2f0:	019b      	lsls	r3, r3, #6
 800d2f2:	693a      	ldr	r2, [r7, #16]
 800d2f4:	4313      	orrs	r3, r2
 800d2f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	699b      	ldr	r3, [r3, #24]
 800d2fc:	019b      	lsls	r3, r3, #6
 800d2fe:	693a      	ldr	r2, [r7, #16]
 800d300:	4313      	orrs	r3, r2
 800d302:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	693a      	ldr	r2, [r7, #16]
 800d308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	68fa      	ldr	r2, [r7, #12]
 800d30e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	685a      	ldr	r2, [r3, #4]
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	697a      	ldr	r2, [r7, #20]
 800d31c:	621a      	str	r2, [r3, #32]
}
 800d31e:	bf00      	nop
 800d320:	371c      	adds	r7, #28
 800d322:	46bd      	mov	sp, r7
 800d324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d328:	4770      	bx	lr
 800d32a:	bf00      	nop
 800d32c:	40012c00 	.word	0x40012c00
 800d330:	40013400 	.word	0x40013400
 800d334:	40015000 	.word	0x40015000
 800d338:	40014000 	.word	0x40014000
 800d33c:	40014400 	.word	0x40014400
 800d340:	40014800 	.word	0x40014800

0800d344 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d344:	b480      	push	{r7}
 800d346:	b087      	sub	sp, #28
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6a1b      	ldr	r3, [r3, #32]
 800d352:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6a1b      	ldr	r3, [r3, #32]
 800d358:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	685b      	ldr	r3, [r3, #4]
 800d364:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d36a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d372:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	68fa      	ldr	r2, [r7, #12]
 800d37e:	4313      	orrs	r3, r2
 800d380:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d382:	693b      	ldr	r3, [r7, #16]
 800d384:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d388:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	689b      	ldr	r3, [r3, #8]
 800d38e:	041b      	lsls	r3, r3, #16
 800d390:	693a      	ldr	r2, [r7, #16]
 800d392:	4313      	orrs	r3, r2
 800d394:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	4a19      	ldr	r2, [pc, #100]	@ (800d400 <TIM_OC5_SetConfig+0xbc>)
 800d39a:	4293      	cmp	r3, r2
 800d39c:	d013      	beq.n	800d3c6 <TIM_OC5_SetConfig+0x82>
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	4a18      	ldr	r2, [pc, #96]	@ (800d404 <TIM_OC5_SetConfig+0xc0>)
 800d3a2:	4293      	cmp	r3, r2
 800d3a4:	d00f      	beq.n	800d3c6 <TIM_OC5_SetConfig+0x82>
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	4a17      	ldr	r2, [pc, #92]	@ (800d408 <TIM_OC5_SetConfig+0xc4>)
 800d3aa:	4293      	cmp	r3, r2
 800d3ac:	d00b      	beq.n	800d3c6 <TIM_OC5_SetConfig+0x82>
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	4a16      	ldr	r2, [pc, #88]	@ (800d40c <TIM_OC5_SetConfig+0xc8>)
 800d3b2:	4293      	cmp	r3, r2
 800d3b4:	d007      	beq.n	800d3c6 <TIM_OC5_SetConfig+0x82>
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	4a15      	ldr	r2, [pc, #84]	@ (800d410 <TIM_OC5_SetConfig+0xcc>)
 800d3ba:	4293      	cmp	r3, r2
 800d3bc:	d003      	beq.n	800d3c6 <TIM_OC5_SetConfig+0x82>
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	4a14      	ldr	r2, [pc, #80]	@ (800d414 <TIM_OC5_SetConfig+0xd0>)
 800d3c2:	4293      	cmp	r3, r2
 800d3c4:	d109      	bne.n	800d3da <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d3cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	695b      	ldr	r3, [r3, #20]
 800d3d2:	021b      	lsls	r3, r3, #8
 800d3d4:	697a      	ldr	r2, [r7, #20]
 800d3d6:	4313      	orrs	r3, r2
 800d3d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	697a      	ldr	r2, [r7, #20]
 800d3de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	68fa      	ldr	r2, [r7, #12]
 800d3e4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	685a      	ldr	r2, [r3, #4]
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	693a      	ldr	r2, [r7, #16]
 800d3f2:	621a      	str	r2, [r3, #32]
}
 800d3f4:	bf00      	nop
 800d3f6:	371c      	adds	r7, #28
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fe:	4770      	bx	lr
 800d400:	40012c00 	.word	0x40012c00
 800d404:	40013400 	.word	0x40013400
 800d408:	40014000 	.word	0x40014000
 800d40c:	40014400 	.word	0x40014400
 800d410:	40014800 	.word	0x40014800
 800d414:	40015000 	.word	0x40015000

0800d418 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d418:	b480      	push	{r7}
 800d41a:	b087      	sub	sp, #28
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
 800d420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6a1b      	ldr	r3, [r3, #32]
 800d426:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6a1b      	ldr	r3, [r3, #32]
 800d42c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	685b      	ldr	r3, [r3, #4]
 800d438:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d43e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d446:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d44a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	021b      	lsls	r3, r3, #8
 800d452:	68fa      	ldr	r2, [r7, #12]
 800d454:	4313      	orrs	r3, r2
 800d456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d458:	693b      	ldr	r3, [r7, #16]
 800d45a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d45e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	689b      	ldr	r3, [r3, #8]
 800d464:	051b      	lsls	r3, r3, #20
 800d466:	693a      	ldr	r2, [r7, #16]
 800d468:	4313      	orrs	r3, r2
 800d46a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	4a1a      	ldr	r2, [pc, #104]	@ (800d4d8 <TIM_OC6_SetConfig+0xc0>)
 800d470:	4293      	cmp	r3, r2
 800d472:	d013      	beq.n	800d49c <TIM_OC6_SetConfig+0x84>
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	4a19      	ldr	r2, [pc, #100]	@ (800d4dc <TIM_OC6_SetConfig+0xc4>)
 800d478:	4293      	cmp	r3, r2
 800d47a:	d00f      	beq.n	800d49c <TIM_OC6_SetConfig+0x84>
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	4a18      	ldr	r2, [pc, #96]	@ (800d4e0 <TIM_OC6_SetConfig+0xc8>)
 800d480:	4293      	cmp	r3, r2
 800d482:	d00b      	beq.n	800d49c <TIM_OC6_SetConfig+0x84>
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	4a17      	ldr	r2, [pc, #92]	@ (800d4e4 <TIM_OC6_SetConfig+0xcc>)
 800d488:	4293      	cmp	r3, r2
 800d48a:	d007      	beq.n	800d49c <TIM_OC6_SetConfig+0x84>
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	4a16      	ldr	r2, [pc, #88]	@ (800d4e8 <TIM_OC6_SetConfig+0xd0>)
 800d490:	4293      	cmp	r3, r2
 800d492:	d003      	beq.n	800d49c <TIM_OC6_SetConfig+0x84>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	4a15      	ldr	r2, [pc, #84]	@ (800d4ec <TIM_OC6_SetConfig+0xd4>)
 800d498:	4293      	cmp	r3, r2
 800d49a:	d109      	bne.n	800d4b0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d4a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	695b      	ldr	r3, [r3, #20]
 800d4a8:	029b      	lsls	r3, r3, #10
 800d4aa:	697a      	ldr	r2, [r7, #20]
 800d4ac:	4313      	orrs	r3, r2
 800d4ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	697a      	ldr	r2, [r7, #20]
 800d4b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	68fa      	ldr	r2, [r7, #12]
 800d4ba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	685a      	ldr	r2, [r3, #4]
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	693a      	ldr	r2, [r7, #16]
 800d4c8:	621a      	str	r2, [r3, #32]
}
 800d4ca:	bf00      	nop
 800d4cc:	371c      	adds	r7, #28
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d4:	4770      	bx	lr
 800d4d6:	bf00      	nop
 800d4d8:	40012c00 	.word	0x40012c00
 800d4dc:	40013400 	.word	0x40013400
 800d4e0:	40014000 	.word	0x40014000
 800d4e4:	40014400 	.word	0x40014400
 800d4e8:	40014800 	.word	0x40014800
 800d4ec:	40015000 	.word	0x40015000

0800d4f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b087      	sub	sp, #28
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	60f8      	str	r0, [r7, #12]
 800d4f8:	60b9      	str	r1, [r7, #8]
 800d4fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	6a1b      	ldr	r3, [r3, #32]
 800d500:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	6a1b      	ldr	r3, [r3, #32]
 800d506:	f023 0201 	bic.w	r2, r3, #1
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	699b      	ldr	r3, [r3, #24]
 800d512:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d514:	693b      	ldr	r3, [r7, #16]
 800d516:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d51a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	011b      	lsls	r3, r3, #4
 800d520:	693a      	ldr	r2, [r7, #16]
 800d522:	4313      	orrs	r3, r2
 800d524:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	f023 030a 	bic.w	r3, r3, #10
 800d52c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d52e:	697a      	ldr	r2, [r7, #20]
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	4313      	orrs	r3, r2
 800d534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	693a      	ldr	r2, [r7, #16]
 800d53a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	697a      	ldr	r2, [r7, #20]
 800d540:	621a      	str	r2, [r3, #32]
}
 800d542:	bf00      	nop
 800d544:	371c      	adds	r7, #28
 800d546:	46bd      	mov	sp, r7
 800d548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54c:	4770      	bx	lr

0800d54e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d54e:	b480      	push	{r7}
 800d550:	b087      	sub	sp, #28
 800d552:	af00      	add	r7, sp, #0
 800d554:	60f8      	str	r0, [r7, #12]
 800d556:	60b9      	str	r1, [r7, #8]
 800d558:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	6a1b      	ldr	r3, [r3, #32]
 800d55e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	6a1b      	ldr	r3, [r3, #32]
 800d564:	f023 0210 	bic.w	r2, r3, #16
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	699b      	ldr	r3, [r3, #24]
 800d570:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d572:	693b      	ldr	r3, [r7, #16]
 800d574:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d578:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	031b      	lsls	r3, r3, #12
 800d57e:	693a      	ldr	r2, [r7, #16]
 800d580:	4313      	orrs	r3, r2
 800d582:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d584:	697b      	ldr	r3, [r7, #20]
 800d586:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d58a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	011b      	lsls	r3, r3, #4
 800d590:	697a      	ldr	r2, [r7, #20]
 800d592:	4313      	orrs	r3, r2
 800d594:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	693a      	ldr	r2, [r7, #16]
 800d59a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	697a      	ldr	r2, [r7, #20]
 800d5a0:	621a      	str	r2, [r3, #32]
}
 800d5a2:	bf00      	nop
 800d5a4:	371c      	adds	r7, #28
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ac:	4770      	bx	lr

0800d5ae <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d5ae:	b480      	push	{r7}
 800d5b0:	b085      	sub	sp, #20
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	6078      	str	r0, [r7, #4]
 800d5b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	689b      	ldr	r3, [r3, #8]
 800d5bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800d5c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d5c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d5ca:	683a      	ldr	r2, [r7, #0]
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	4313      	orrs	r3, r2
 800d5d0:	f043 0307 	orr.w	r3, r3, #7
 800d5d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	68fa      	ldr	r2, [r7, #12]
 800d5da:	609a      	str	r2, [r3, #8]
}
 800d5dc:	bf00      	nop
 800d5de:	3714      	adds	r7, #20
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e6:	4770      	bx	lr

0800d5e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d5e8:	b480      	push	{r7}
 800d5ea:	b087      	sub	sp, #28
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	60f8      	str	r0, [r7, #12]
 800d5f0:	60b9      	str	r1, [r7, #8]
 800d5f2:	607a      	str	r2, [r7, #4]
 800d5f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	689b      	ldr	r3, [r3, #8]
 800d5fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d5fc:	697b      	ldr	r3, [r7, #20]
 800d5fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d602:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	021a      	lsls	r2, r3, #8
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	431a      	orrs	r2, r3
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	4313      	orrs	r3, r2
 800d610:	697a      	ldr	r2, [r7, #20]
 800d612:	4313      	orrs	r3, r2
 800d614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	697a      	ldr	r2, [r7, #20]
 800d61a:	609a      	str	r2, [r3, #8]
}
 800d61c:	bf00      	nop
 800d61e:	371c      	adds	r7, #28
 800d620:	46bd      	mov	sp, r7
 800d622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d626:	4770      	bx	lr

0800d628 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d628:	b480      	push	{r7}
 800d62a:	b087      	sub	sp, #28
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	60f8      	str	r0, [r7, #12]
 800d630:	60b9      	str	r1, [r7, #8]
 800d632:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	f003 031f 	and.w	r3, r3, #31
 800d63a:	2201      	movs	r2, #1
 800d63c:	fa02 f303 	lsl.w	r3, r2, r3
 800d640:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	6a1a      	ldr	r2, [r3, #32]
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	43db      	mvns	r3, r3
 800d64a:	401a      	ands	r2, r3
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	6a1a      	ldr	r2, [r3, #32]
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	f003 031f 	and.w	r3, r3, #31
 800d65a:	6879      	ldr	r1, [r7, #4]
 800d65c:	fa01 f303 	lsl.w	r3, r1, r3
 800d660:	431a      	orrs	r2, r3
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	621a      	str	r2, [r3, #32]
}
 800d666:	bf00      	nop
 800d668:	371c      	adds	r7, #28
 800d66a:	46bd      	mov	sp, r7
 800d66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d670:	4770      	bx	lr
	...

0800d674 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d674:	b480      	push	{r7}
 800d676:	b085      	sub	sp, #20
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
 800d67c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d684:	2b01      	cmp	r3, #1
 800d686:	d101      	bne.n	800d68c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d688:	2302      	movs	r3, #2
 800d68a:	e074      	b.n	800d776 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2201      	movs	r2, #1
 800d690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2202      	movs	r2, #2
 800d698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	685b      	ldr	r3, [r3, #4]
 800d6a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	689b      	ldr	r3, [r3, #8]
 800d6aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	4a34      	ldr	r2, [pc, #208]	@ (800d784 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d6b2:	4293      	cmp	r3, r2
 800d6b4:	d009      	beq.n	800d6ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	4a33      	ldr	r2, [pc, #204]	@ (800d788 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d6bc:	4293      	cmp	r3, r2
 800d6be:	d004      	beq.n	800d6ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	4a31      	ldr	r2, [pc, #196]	@ (800d78c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	d108      	bne.n	800d6dc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d6d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	685b      	ldr	r3, [r3, #4]
 800d6d6:	68fa      	ldr	r2, [r7, #12]
 800d6d8:	4313      	orrs	r3, r2
 800d6da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800d6e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d6e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	68fa      	ldr	r2, [r7, #12]
 800d6ee:	4313      	orrs	r3, r2
 800d6f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	68fa      	ldr	r2, [r7, #12]
 800d6f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	4a21      	ldr	r2, [pc, #132]	@ (800d784 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d700:	4293      	cmp	r3, r2
 800d702:	d022      	beq.n	800d74a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d70c:	d01d      	beq.n	800d74a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	4a1f      	ldr	r2, [pc, #124]	@ (800d790 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800d714:	4293      	cmp	r3, r2
 800d716:	d018      	beq.n	800d74a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	4a1d      	ldr	r2, [pc, #116]	@ (800d794 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800d71e:	4293      	cmp	r3, r2
 800d720:	d013      	beq.n	800d74a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	4a1c      	ldr	r2, [pc, #112]	@ (800d798 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800d728:	4293      	cmp	r3, r2
 800d72a:	d00e      	beq.n	800d74a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	4a15      	ldr	r2, [pc, #84]	@ (800d788 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d732:	4293      	cmp	r3, r2
 800d734:	d009      	beq.n	800d74a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	4a18      	ldr	r2, [pc, #96]	@ (800d79c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800d73c:	4293      	cmp	r3, r2
 800d73e:	d004      	beq.n	800d74a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	4a11      	ldr	r2, [pc, #68]	@ (800d78c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d746:	4293      	cmp	r3, r2
 800d748:	d10c      	bne.n	800d764 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d74a:	68bb      	ldr	r3, [r7, #8]
 800d74c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d750:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	689b      	ldr	r3, [r3, #8]
 800d756:	68ba      	ldr	r2, [r7, #8]
 800d758:	4313      	orrs	r3, r2
 800d75a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	68ba      	ldr	r2, [r7, #8]
 800d762:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2201      	movs	r2, #1
 800d768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2200      	movs	r2, #0
 800d770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d774:	2300      	movs	r3, #0
}
 800d776:	4618      	mov	r0, r3
 800d778:	3714      	adds	r7, #20
 800d77a:	46bd      	mov	sp, r7
 800d77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d780:	4770      	bx	lr
 800d782:	bf00      	nop
 800d784:	40012c00 	.word	0x40012c00
 800d788:	40013400 	.word	0x40013400
 800d78c:	40015000 	.word	0x40015000
 800d790:	40000400 	.word	0x40000400
 800d794:	40000800 	.word	0x40000800
 800d798:	40000c00 	.word	0x40000c00
 800d79c:	40014000 	.word	0x40014000

0800d7a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b085      	sub	sp, #20
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
 800d7a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d7b4:	2b01      	cmp	r3, #1
 800d7b6:	d101      	bne.n	800d7bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d7b8:	2302      	movs	r3, #2
 800d7ba:	e078      	b.n	800d8ae <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2201      	movs	r2, #1
 800d7c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	68db      	ldr	r3, [r3, #12]
 800d7ce:	4313      	orrs	r3, r2
 800d7d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	689b      	ldr	r3, [r3, #8]
 800d7dc:	4313      	orrs	r3, r2
 800d7de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	685b      	ldr	r3, [r3, #4]
 800d7ea:	4313      	orrs	r3, r2
 800d7ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	4313      	orrs	r3, r2
 800d7fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	691b      	ldr	r3, [r3, #16]
 800d806:	4313      	orrs	r3, r2
 800d808:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	695b      	ldr	r3, [r3, #20]
 800d814:	4313      	orrs	r3, r2
 800d816:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d822:	4313      	orrs	r3, r2
 800d824:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	699b      	ldr	r3, [r3, #24]
 800d830:	041b      	lsls	r3, r3, #16
 800d832:	4313      	orrs	r3, r2
 800d834:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	69db      	ldr	r3, [r3, #28]
 800d840:	4313      	orrs	r3, r2
 800d842:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	4a1c      	ldr	r2, [pc, #112]	@ (800d8bc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800d84a:	4293      	cmp	r3, r2
 800d84c:	d009      	beq.n	800d862 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	4a1b      	ldr	r2, [pc, #108]	@ (800d8c0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800d854:	4293      	cmp	r3, r2
 800d856:	d004      	beq.n	800d862 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	4a19      	ldr	r2, [pc, #100]	@ (800d8c4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800d85e:	4293      	cmp	r3, r2
 800d860:	d11c      	bne.n	800d89c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d86c:	051b      	lsls	r3, r3, #20
 800d86e:	4313      	orrs	r3, r2
 800d870:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	6a1b      	ldr	r3, [r3, #32]
 800d87c:	4313      	orrs	r3, r2
 800d87e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d88a:	4313      	orrs	r3, r2
 800d88c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d898:	4313      	orrs	r3, r2
 800d89a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	68fa      	ldr	r2, [r7, #12]
 800d8a2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d8ac:	2300      	movs	r3, #0
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3714      	adds	r7, #20
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b8:	4770      	bx	lr
 800d8ba:	bf00      	nop
 800d8bc:	40012c00 	.word	0x40012c00
 800d8c0:	40013400 	.word	0x40013400
 800d8c4:	40015000 	.word	0x40015000

0800d8c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b082      	sub	sp, #8
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d101      	bne.n	800d8da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	e042      	b.n	800d960 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d106      	bne.n	800d8f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f7f5 fedf 	bl	80036b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2224      	movs	r2, #36	@ 0x24
 800d8f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	681a      	ldr	r2, [r3, #0]
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	f022 0201 	bic.w	r2, r2, #1
 800d908:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d002      	beq.n	800d918 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	f000 fbb2 	bl	800e07c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f000 f8b3 	bl	800da84 <UART_SetConfig>
 800d91e:	4603      	mov	r3, r0
 800d920:	2b01      	cmp	r3, #1
 800d922:	d101      	bne.n	800d928 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d924:	2301      	movs	r3, #1
 800d926:	e01b      	b.n	800d960 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	685a      	ldr	r2, [r3, #4]
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d936:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	689a      	ldr	r2, [r3, #8]
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d946:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	681a      	ldr	r2, [r3, #0]
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	f042 0201 	orr.w	r2, r2, #1
 800d956:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f000 fc31 	bl	800e1c0 <UART_CheckIdleState>
 800d95e:	4603      	mov	r3, r0
}
 800d960:	4618      	mov	r0, r3
 800d962:	3708      	adds	r7, #8
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}

0800d968 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b08a      	sub	sp, #40	@ 0x28
 800d96c:	af02      	add	r7, sp, #8
 800d96e:	60f8      	str	r0, [r7, #12]
 800d970:	60b9      	str	r1, [r7, #8]
 800d972:	603b      	str	r3, [r7, #0]
 800d974:	4613      	mov	r3, r2
 800d976:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d97e:	2b20      	cmp	r3, #32
 800d980:	d17b      	bne.n	800da7a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d002      	beq.n	800d98e <HAL_UART_Transmit+0x26>
 800d988:	88fb      	ldrh	r3, [r7, #6]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d101      	bne.n	800d992 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d98e:	2301      	movs	r3, #1
 800d990:	e074      	b.n	800da7c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	2200      	movs	r2, #0
 800d996:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	2221      	movs	r2, #33	@ 0x21
 800d99e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d9a2:	f7f6 fd1d 	bl	80043e0 <HAL_GetTick>
 800d9a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	88fa      	ldrh	r2, [r7, #6]
 800d9ac:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	88fa      	ldrh	r2, [r7, #6]
 800d9b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	689b      	ldr	r3, [r3, #8]
 800d9bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d9c0:	d108      	bne.n	800d9d4 <HAL_UART_Transmit+0x6c>
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	691b      	ldr	r3, [r3, #16]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d104      	bne.n	800d9d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	61bb      	str	r3, [r7, #24]
 800d9d2:	e003      	b.n	800d9dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d9d8:	2300      	movs	r3, #0
 800d9da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d9dc:	e030      	b.n	800da40 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	9300      	str	r3, [sp, #0]
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	2180      	movs	r1, #128	@ 0x80
 800d9e8:	68f8      	ldr	r0, [r7, #12]
 800d9ea:	f000 fc93 	bl	800e314 <UART_WaitOnFlagUntilTimeout>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d005      	beq.n	800da00 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	2220      	movs	r2, #32
 800d9f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800d9fc:	2303      	movs	r3, #3
 800d9fe:	e03d      	b.n	800da7c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800da00:	69fb      	ldr	r3, [r7, #28]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d10b      	bne.n	800da1e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800da06:	69bb      	ldr	r3, [r7, #24]
 800da08:	881b      	ldrh	r3, [r3, #0]
 800da0a:	461a      	mov	r2, r3
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800da14:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800da16:	69bb      	ldr	r3, [r7, #24]
 800da18:	3302      	adds	r3, #2
 800da1a:	61bb      	str	r3, [r7, #24]
 800da1c:	e007      	b.n	800da2e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800da1e:	69fb      	ldr	r3, [r7, #28]
 800da20:	781a      	ldrb	r2, [r3, #0]
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800da28:	69fb      	ldr	r3, [r7, #28]
 800da2a:	3301      	adds	r3, #1
 800da2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800da34:	b29b      	uxth	r3, r3
 800da36:	3b01      	subs	r3, #1
 800da38:	b29a      	uxth	r2, r3
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800da46:	b29b      	uxth	r3, r3
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d1c8      	bne.n	800d9de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	9300      	str	r3, [sp, #0]
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	2200      	movs	r2, #0
 800da54:	2140      	movs	r1, #64	@ 0x40
 800da56:	68f8      	ldr	r0, [r7, #12]
 800da58:	f000 fc5c 	bl	800e314 <UART_WaitOnFlagUntilTimeout>
 800da5c:	4603      	mov	r3, r0
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d005      	beq.n	800da6e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	2220      	movs	r2, #32
 800da66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800da6a:	2303      	movs	r3, #3
 800da6c:	e006      	b.n	800da7c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	2220      	movs	r2, #32
 800da72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800da76:	2300      	movs	r3, #0
 800da78:	e000      	b.n	800da7c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800da7a:	2302      	movs	r3, #2
  }
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	3720      	adds	r7, #32
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}

0800da84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800da84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800da88:	b08c      	sub	sp, #48	@ 0x30
 800da8a:	af00      	add	r7, sp, #0
 800da8c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800da8e:	2300      	movs	r3, #0
 800da90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800da94:	697b      	ldr	r3, [r7, #20]
 800da96:	689a      	ldr	r2, [r3, #8]
 800da98:	697b      	ldr	r3, [r7, #20]
 800da9a:	691b      	ldr	r3, [r3, #16]
 800da9c:	431a      	orrs	r2, r3
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	695b      	ldr	r3, [r3, #20]
 800daa2:	431a      	orrs	r2, r3
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	69db      	ldr	r3, [r3, #28]
 800daa8:	4313      	orrs	r3, r2
 800daaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800daac:	697b      	ldr	r3, [r7, #20]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	681a      	ldr	r2, [r3, #0]
 800dab2:	4baa      	ldr	r3, [pc, #680]	@ (800dd5c <UART_SetConfig+0x2d8>)
 800dab4:	4013      	ands	r3, r2
 800dab6:	697a      	ldr	r2, [r7, #20]
 800dab8:	6812      	ldr	r2, [r2, #0]
 800daba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dabc:	430b      	orrs	r3, r1
 800dabe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	685b      	ldr	r3, [r3, #4]
 800dac6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	68da      	ldr	r2, [r3, #12]
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	430a      	orrs	r2, r1
 800dad4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dad6:	697b      	ldr	r3, [r7, #20]
 800dad8:	699b      	ldr	r3, [r3, #24]
 800dada:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	4a9f      	ldr	r2, [pc, #636]	@ (800dd60 <UART_SetConfig+0x2dc>)
 800dae2:	4293      	cmp	r3, r2
 800dae4:	d004      	beq.n	800daf0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dae6:	697b      	ldr	r3, [r7, #20]
 800dae8:	6a1b      	ldr	r3, [r3, #32]
 800daea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800daec:	4313      	orrs	r3, r2
 800daee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	689b      	ldr	r3, [r3, #8]
 800daf6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800dafa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800dafe:	697a      	ldr	r2, [r7, #20]
 800db00:	6812      	ldr	r2, [r2, #0]
 800db02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800db04:	430b      	orrs	r3, r1
 800db06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db0e:	f023 010f 	bic.w	r1, r3, #15
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800db16:	697b      	ldr	r3, [r7, #20]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	430a      	orrs	r2, r1
 800db1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	4a90      	ldr	r2, [pc, #576]	@ (800dd64 <UART_SetConfig+0x2e0>)
 800db24:	4293      	cmp	r3, r2
 800db26:	d125      	bne.n	800db74 <UART_SetConfig+0xf0>
 800db28:	4b8f      	ldr	r3, [pc, #572]	@ (800dd68 <UART_SetConfig+0x2e4>)
 800db2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800db2e:	f003 0303 	and.w	r3, r3, #3
 800db32:	2b03      	cmp	r3, #3
 800db34:	d81a      	bhi.n	800db6c <UART_SetConfig+0xe8>
 800db36:	a201      	add	r2, pc, #4	@ (adr r2, 800db3c <UART_SetConfig+0xb8>)
 800db38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db3c:	0800db4d 	.word	0x0800db4d
 800db40:	0800db5d 	.word	0x0800db5d
 800db44:	0800db55 	.word	0x0800db55
 800db48:	0800db65 	.word	0x0800db65
 800db4c:	2301      	movs	r3, #1
 800db4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800db52:	e116      	b.n	800dd82 <UART_SetConfig+0x2fe>
 800db54:	2302      	movs	r3, #2
 800db56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800db5a:	e112      	b.n	800dd82 <UART_SetConfig+0x2fe>
 800db5c:	2304      	movs	r3, #4
 800db5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800db62:	e10e      	b.n	800dd82 <UART_SetConfig+0x2fe>
 800db64:	2308      	movs	r3, #8
 800db66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800db6a:	e10a      	b.n	800dd82 <UART_SetConfig+0x2fe>
 800db6c:	2310      	movs	r3, #16
 800db6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800db72:	e106      	b.n	800dd82 <UART_SetConfig+0x2fe>
 800db74:	697b      	ldr	r3, [r7, #20]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	4a7c      	ldr	r2, [pc, #496]	@ (800dd6c <UART_SetConfig+0x2e8>)
 800db7a:	4293      	cmp	r3, r2
 800db7c:	d138      	bne.n	800dbf0 <UART_SetConfig+0x16c>
 800db7e:	4b7a      	ldr	r3, [pc, #488]	@ (800dd68 <UART_SetConfig+0x2e4>)
 800db80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800db84:	f003 030c 	and.w	r3, r3, #12
 800db88:	2b0c      	cmp	r3, #12
 800db8a:	d82d      	bhi.n	800dbe8 <UART_SetConfig+0x164>
 800db8c:	a201      	add	r2, pc, #4	@ (adr r2, 800db94 <UART_SetConfig+0x110>)
 800db8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db92:	bf00      	nop
 800db94:	0800dbc9 	.word	0x0800dbc9
 800db98:	0800dbe9 	.word	0x0800dbe9
 800db9c:	0800dbe9 	.word	0x0800dbe9
 800dba0:	0800dbe9 	.word	0x0800dbe9
 800dba4:	0800dbd9 	.word	0x0800dbd9
 800dba8:	0800dbe9 	.word	0x0800dbe9
 800dbac:	0800dbe9 	.word	0x0800dbe9
 800dbb0:	0800dbe9 	.word	0x0800dbe9
 800dbb4:	0800dbd1 	.word	0x0800dbd1
 800dbb8:	0800dbe9 	.word	0x0800dbe9
 800dbbc:	0800dbe9 	.word	0x0800dbe9
 800dbc0:	0800dbe9 	.word	0x0800dbe9
 800dbc4:	0800dbe1 	.word	0x0800dbe1
 800dbc8:	2300      	movs	r3, #0
 800dbca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dbce:	e0d8      	b.n	800dd82 <UART_SetConfig+0x2fe>
 800dbd0:	2302      	movs	r3, #2
 800dbd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dbd6:	e0d4      	b.n	800dd82 <UART_SetConfig+0x2fe>
 800dbd8:	2304      	movs	r3, #4
 800dbda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dbde:	e0d0      	b.n	800dd82 <UART_SetConfig+0x2fe>
 800dbe0:	2308      	movs	r3, #8
 800dbe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dbe6:	e0cc      	b.n	800dd82 <UART_SetConfig+0x2fe>
 800dbe8:	2310      	movs	r3, #16
 800dbea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dbee:	e0c8      	b.n	800dd82 <UART_SetConfig+0x2fe>
 800dbf0:	697b      	ldr	r3, [r7, #20]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	4a5e      	ldr	r2, [pc, #376]	@ (800dd70 <UART_SetConfig+0x2ec>)
 800dbf6:	4293      	cmp	r3, r2
 800dbf8:	d125      	bne.n	800dc46 <UART_SetConfig+0x1c2>
 800dbfa:	4b5b      	ldr	r3, [pc, #364]	@ (800dd68 <UART_SetConfig+0x2e4>)
 800dbfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dc00:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800dc04:	2b30      	cmp	r3, #48	@ 0x30
 800dc06:	d016      	beq.n	800dc36 <UART_SetConfig+0x1b2>
 800dc08:	2b30      	cmp	r3, #48	@ 0x30
 800dc0a:	d818      	bhi.n	800dc3e <UART_SetConfig+0x1ba>
 800dc0c:	2b20      	cmp	r3, #32
 800dc0e:	d00a      	beq.n	800dc26 <UART_SetConfig+0x1a2>
 800dc10:	2b20      	cmp	r3, #32
 800dc12:	d814      	bhi.n	800dc3e <UART_SetConfig+0x1ba>
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d002      	beq.n	800dc1e <UART_SetConfig+0x19a>
 800dc18:	2b10      	cmp	r3, #16
 800dc1a:	d008      	beq.n	800dc2e <UART_SetConfig+0x1aa>
 800dc1c:	e00f      	b.n	800dc3e <UART_SetConfig+0x1ba>
 800dc1e:	2300      	movs	r3, #0
 800dc20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dc24:	e0ad      	b.n	800dd82 <UART_SetConfig+0x2fe>
 800dc26:	2302      	movs	r3, #2
 800dc28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dc2c:	e0a9      	b.n	800dd82 <UART_SetConfig+0x2fe>
 800dc2e:	2304      	movs	r3, #4
 800dc30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dc34:	e0a5      	b.n	800dd82 <UART_SetConfig+0x2fe>
 800dc36:	2308      	movs	r3, #8
 800dc38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dc3c:	e0a1      	b.n	800dd82 <UART_SetConfig+0x2fe>
 800dc3e:	2310      	movs	r3, #16
 800dc40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dc44:	e09d      	b.n	800dd82 <UART_SetConfig+0x2fe>
 800dc46:	697b      	ldr	r3, [r7, #20]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	4a4a      	ldr	r2, [pc, #296]	@ (800dd74 <UART_SetConfig+0x2f0>)
 800dc4c:	4293      	cmp	r3, r2
 800dc4e:	d125      	bne.n	800dc9c <UART_SetConfig+0x218>
 800dc50:	4b45      	ldr	r3, [pc, #276]	@ (800dd68 <UART_SetConfig+0x2e4>)
 800dc52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dc56:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800dc5a:	2bc0      	cmp	r3, #192	@ 0xc0
 800dc5c:	d016      	beq.n	800dc8c <UART_SetConfig+0x208>
 800dc5e:	2bc0      	cmp	r3, #192	@ 0xc0
 800dc60:	d818      	bhi.n	800dc94 <UART_SetConfig+0x210>
 800dc62:	2b80      	cmp	r3, #128	@ 0x80
 800dc64:	d00a      	beq.n	800dc7c <UART_SetConfig+0x1f8>
 800dc66:	2b80      	cmp	r3, #128	@ 0x80
 800dc68:	d814      	bhi.n	800dc94 <UART_SetConfig+0x210>
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d002      	beq.n	800dc74 <UART_SetConfig+0x1f0>
 800dc6e:	2b40      	cmp	r3, #64	@ 0x40
 800dc70:	d008      	beq.n	800dc84 <UART_SetConfig+0x200>
 800dc72:	e00f      	b.n	800dc94 <UART_SetConfig+0x210>
 800dc74:	2300      	movs	r3, #0
 800dc76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dc7a:	e082      	b.n	800dd82 <UART_SetConfig+0x2fe>
 800dc7c:	2302      	movs	r3, #2
 800dc7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dc82:	e07e      	b.n	800dd82 <UART_SetConfig+0x2fe>
 800dc84:	2304      	movs	r3, #4
 800dc86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dc8a:	e07a      	b.n	800dd82 <UART_SetConfig+0x2fe>
 800dc8c:	2308      	movs	r3, #8
 800dc8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dc92:	e076      	b.n	800dd82 <UART_SetConfig+0x2fe>
 800dc94:	2310      	movs	r3, #16
 800dc96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dc9a:	e072      	b.n	800dd82 <UART_SetConfig+0x2fe>
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	4a35      	ldr	r2, [pc, #212]	@ (800dd78 <UART_SetConfig+0x2f4>)
 800dca2:	4293      	cmp	r3, r2
 800dca4:	d12a      	bne.n	800dcfc <UART_SetConfig+0x278>
 800dca6:	4b30      	ldr	r3, [pc, #192]	@ (800dd68 <UART_SetConfig+0x2e4>)
 800dca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dcac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dcb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dcb4:	d01a      	beq.n	800dcec <UART_SetConfig+0x268>
 800dcb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dcba:	d81b      	bhi.n	800dcf4 <UART_SetConfig+0x270>
 800dcbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dcc0:	d00c      	beq.n	800dcdc <UART_SetConfig+0x258>
 800dcc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dcc6:	d815      	bhi.n	800dcf4 <UART_SetConfig+0x270>
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d003      	beq.n	800dcd4 <UART_SetConfig+0x250>
 800dccc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dcd0:	d008      	beq.n	800dce4 <UART_SetConfig+0x260>
 800dcd2:	e00f      	b.n	800dcf4 <UART_SetConfig+0x270>
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dcda:	e052      	b.n	800dd82 <UART_SetConfig+0x2fe>
 800dcdc:	2302      	movs	r3, #2
 800dcde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dce2:	e04e      	b.n	800dd82 <UART_SetConfig+0x2fe>
 800dce4:	2304      	movs	r3, #4
 800dce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dcea:	e04a      	b.n	800dd82 <UART_SetConfig+0x2fe>
 800dcec:	2308      	movs	r3, #8
 800dcee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dcf2:	e046      	b.n	800dd82 <UART_SetConfig+0x2fe>
 800dcf4:	2310      	movs	r3, #16
 800dcf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dcfa:	e042      	b.n	800dd82 <UART_SetConfig+0x2fe>
 800dcfc:	697b      	ldr	r3, [r7, #20]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	4a17      	ldr	r2, [pc, #92]	@ (800dd60 <UART_SetConfig+0x2dc>)
 800dd02:	4293      	cmp	r3, r2
 800dd04:	d13a      	bne.n	800dd7c <UART_SetConfig+0x2f8>
 800dd06:	4b18      	ldr	r3, [pc, #96]	@ (800dd68 <UART_SetConfig+0x2e4>)
 800dd08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dd0c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800dd10:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800dd14:	d01a      	beq.n	800dd4c <UART_SetConfig+0x2c8>
 800dd16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800dd1a:	d81b      	bhi.n	800dd54 <UART_SetConfig+0x2d0>
 800dd1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dd20:	d00c      	beq.n	800dd3c <UART_SetConfig+0x2b8>
 800dd22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dd26:	d815      	bhi.n	800dd54 <UART_SetConfig+0x2d0>
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d003      	beq.n	800dd34 <UART_SetConfig+0x2b0>
 800dd2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dd30:	d008      	beq.n	800dd44 <UART_SetConfig+0x2c0>
 800dd32:	e00f      	b.n	800dd54 <UART_SetConfig+0x2d0>
 800dd34:	2300      	movs	r3, #0
 800dd36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dd3a:	e022      	b.n	800dd82 <UART_SetConfig+0x2fe>
 800dd3c:	2302      	movs	r3, #2
 800dd3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dd42:	e01e      	b.n	800dd82 <UART_SetConfig+0x2fe>
 800dd44:	2304      	movs	r3, #4
 800dd46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dd4a:	e01a      	b.n	800dd82 <UART_SetConfig+0x2fe>
 800dd4c:	2308      	movs	r3, #8
 800dd4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dd52:	e016      	b.n	800dd82 <UART_SetConfig+0x2fe>
 800dd54:	2310      	movs	r3, #16
 800dd56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dd5a:	e012      	b.n	800dd82 <UART_SetConfig+0x2fe>
 800dd5c:	cfff69f3 	.word	0xcfff69f3
 800dd60:	40008000 	.word	0x40008000
 800dd64:	40013800 	.word	0x40013800
 800dd68:	40021000 	.word	0x40021000
 800dd6c:	40004400 	.word	0x40004400
 800dd70:	40004800 	.word	0x40004800
 800dd74:	40004c00 	.word	0x40004c00
 800dd78:	40005000 	.word	0x40005000
 800dd7c:	2310      	movs	r3, #16
 800dd7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	4aae      	ldr	r2, [pc, #696]	@ (800e040 <UART_SetConfig+0x5bc>)
 800dd88:	4293      	cmp	r3, r2
 800dd8a:	f040 8097 	bne.w	800debc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dd8e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800dd92:	2b08      	cmp	r3, #8
 800dd94:	d823      	bhi.n	800ddde <UART_SetConfig+0x35a>
 800dd96:	a201      	add	r2, pc, #4	@ (adr r2, 800dd9c <UART_SetConfig+0x318>)
 800dd98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd9c:	0800ddc1 	.word	0x0800ddc1
 800dda0:	0800dddf 	.word	0x0800dddf
 800dda4:	0800ddc9 	.word	0x0800ddc9
 800dda8:	0800dddf 	.word	0x0800dddf
 800ddac:	0800ddcf 	.word	0x0800ddcf
 800ddb0:	0800dddf 	.word	0x0800dddf
 800ddb4:	0800dddf 	.word	0x0800dddf
 800ddb8:	0800dddf 	.word	0x0800dddf
 800ddbc:	0800ddd7 	.word	0x0800ddd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ddc0:	f7fc ff02 	bl	800abc8 <HAL_RCC_GetPCLK1Freq>
 800ddc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ddc6:	e010      	b.n	800ddea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ddc8:	4b9e      	ldr	r3, [pc, #632]	@ (800e044 <UART_SetConfig+0x5c0>)
 800ddca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ddcc:	e00d      	b.n	800ddea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ddce:	f7fc fe8d 	bl	800aaec <HAL_RCC_GetSysClockFreq>
 800ddd2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ddd4:	e009      	b.n	800ddea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ddd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ddda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800dddc:	e005      	b.n	800ddea <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ddde:	2300      	movs	r3, #0
 800dde0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800dde2:	2301      	movs	r3, #1
 800dde4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800dde8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ddea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	f000 8130 	beq.w	800e052 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ddf2:	697b      	ldr	r3, [r7, #20]
 800ddf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddf6:	4a94      	ldr	r2, [pc, #592]	@ (800e048 <UART_SetConfig+0x5c4>)
 800ddf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ddfc:	461a      	mov	r2, r3
 800ddfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de00:	fbb3 f3f2 	udiv	r3, r3, r2
 800de04:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800de06:	697b      	ldr	r3, [r7, #20]
 800de08:	685a      	ldr	r2, [r3, #4]
 800de0a:	4613      	mov	r3, r2
 800de0c:	005b      	lsls	r3, r3, #1
 800de0e:	4413      	add	r3, r2
 800de10:	69ba      	ldr	r2, [r7, #24]
 800de12:	429a      	cmp	r2, r3
 800de14:	d305      	bcc.n	800de22 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	685b      	ldr	r3, [r3, #4]
 800de1a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800de1c:	69ba      	ldr	r2, [r7, #24]
 800de1e:	429a      	cmp	r2, r3
 800de20:	d903      	bls.n	800de2a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800de22:	2301      	movs	r3, #1
 800de24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800de28:	e113      	b.n	800e052 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de2c:	2200      	movs	r2, #0
 800de2e:	60bb      	str	r3, [r7, #8]
 800de30:	60fa      	str	r2, [r7, #12]
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de36:	4a84      	ldr	r2, [pc, #528]	@ (800e048 <UART_SetConfig+0x5c4>)
 800de38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de3c:	b29b      	uxth	r3, r3
 800de3e:	2200      	movs	r2, #0
 800de40:	603b      	str	r3, [r7, #0]
 800de42:	607a      	str	r2, [r7, #4]
 800de44:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800de4c:	f7f2 ff44 	bl	8000cd8 <__aeabi_uldivmod>
 800de50:	4602      	mov	r2, r0
 800de52:	460b      	mov	r3, r1
 800de54:	4610      	mov	r0, r2
 800de56:	4619      	mov	r1, r3
 800de58:	f04f 0200 	mov.w	r2, #0
 800de5c:	f04f 0300 	mov.w	r3, #0
 800de60:	020b      	lsls	r3, r1, #8
 800de62:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800de66:	0202      	lsls	r2, r0, #8
 800de68:	6979      	ldr	r1, [r7, #20]
 800de6a:	6849      	ldr	r1, [r1, #4]
 800de6c:	0849      	lsrs	r1, r1, #1
 800de6e:	2000      	movs	r0, #0
 800de70:	460c      	mov	r4, r1
 800de72:	4605      	mov	r5, r0
 800de74:	eb12 0804 	adds.w	r8, r2, r4
 800de78:	eb43 0905 	adc.w	r9, r3, r5
 800de7c:	697b      	ldr	r3, [r7, #20]
 800de7e:	685b      	ldr	r3, [r3, #4]
 800de80:	2200      	movs	r2, #0
 800de82:	469a      	mov	sl, r3
 800de84:	4693      	mov	fp, r2
 800de86:	4652      	mov	r2, sl
 800de88:	465b      	mov	r3, fp
 800de8a:	4640      	mov	r0, r8
 800de8c:	4649      	mov	r1, r9
 800de8e:	f7f2 ff23 	bl	8000cd8 <__aeabi_uldivmod>
 800de92:	4602      	mov	r2, r0
 800de94:	460b      	mov	r3, r1
 800de96:	4613      	mov	r3, r2
 800de98:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800de9a:	6a3b      	ldr	r3, [r7, #32]
 800de9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dea0:	d308      	bcc.n	800deb4 <UART_SetConfig+0x430>
 800dea2:	6a3b      	ldr	r3, [r7, #32]
 800dea4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dea8:	d204      	bcs.n	800deb4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800deaa:	697b      	ldr	r3, [r7, #20]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	6a3a      	ldr	r2, [r7, #32]
 800deb0:	60da      	str	r2, [r3, #12]
 800deb2:	e0ce      	b.n	800e052 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800deb4:	2301      	movs	r3, #1
 800deb6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800deba:	e0ca      	b.n	800e052 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	69db      	ldr	r3, [r3, #28]
 800dec0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dec4:	d166      	bne.n	800df94 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800dec6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800deca:	2b08      	cmp	r3, #8
 800decc:	d827      	bhi.n	800df1e <UART_SetConfig+0x49a>
 800dece:	a201      	add	r2, pc, #4	@ (adr r2, 800ded4 <UART_SetConfig+0x450>)
 800ded0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ded4:	0800def9 	.word	0x0800def9
 800ded8:	0800df01 	.word	0x0800df01
 800dedc:	0800df09 	.word	0x0800df09
 800dee0:	0800df1f 	.word	0x0800df1f
 800dee4:	0800df0f 	.word	0x0800df0f
 800dee8:	0800df1f 	.word	0x0800df1f
 800deec:	0800df1f 	.word	0x0800df1f
 800def0:	0800df1f 	.word	0x0800df1f
 800def4:	0800df17 	.word	0x0800df17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800def8:	f7fc fe66 	bl	800abc8 <HAL_RCC_GetPCLK1Freq>
 800defc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800defe:	e014      	b.n	800df2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800df00:	f7fc fe78 	bl	800abf4 <HAL_RCC_GetPCLK2Freq>
 800df04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800df06:	e010      	b.n	800df2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800df08:	4b4e      	ldr	r3, [pc, #312]	@ (800e044 <UART_SetConfig+0x5c0>)
 800df0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800df0c:	e00d      	b.n	800df2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800df0e:	f7fc fded 	bl	800aaec <HAL_RCC_GetSysClockFreq>
 800df12:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800df14:	e009      	b.n	800df2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800df16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800df1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800df1c:	e005      	b.n	800df2a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800df1e:	2300      	movs	r3, #0
 800df20:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800df22:	2301      	movs	r3, #1
 800df24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800df28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800df2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	f000 8090 	beq.w	800e052 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800df32:	697b      	ldr	r3, [r7, #20]
 800df34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df36:	4a44      	ldr	r2, [pc, #272]	@ (800e048 <UART_SetConfig+0x5c4>)
 800df38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df3c:	461a      	mov	r2, r3
 800df3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df40:	fbb3 f3f2 	udiv	r3, r3, r2
 800df44:	005a      	lsls	r2, r3, #1
 800df46:	697b      	ldr	r3, [r7, #20]
 800df48:	685b      	ldr	r3, [r3, #4]
 800df4a:	085b      	lsrs	r3, r3, #1
 800df4c:	441a      	add	r2, r3
 800df4e:	697b      	ldr	r3, [r7, #20]
 800df50:	685b      	ldr	r3, [r3, #4]
 800df52:	fbb2 f3f3 	udiv	r3, r2, r3
 800df56:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800df58:	6a3b      	ldr	r3, [r7, #32]
 800df5a:	2b0f      	cmp	r3, #15
 800df5c:	d916      	bls.n	800df8c <UART_SetConfig+0x508>
 800df5e:	6a3b      	ldr	r3, [r7, #32]
 800df60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df64:	d212      	bcs.n	800df8c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800df66:	6a3b      	ldr	r3, [r7, #32]
 800df68:	b29b      	uxth	r3, r3
 800df6a:	f023 030f 	bic.w	r3, r3, #15
 800df6e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800df70:	6a3b      	ldr	r3, [r7, #32]
 800df72:	085b      	lsrs	r3, r3, #1
 800df74:	b29b      	uxth	r3, r3
 800df76:	f003 0307 	and.w	r3, r3, #7
 800df7a:	b29a      	uxth	r2, r3
 800df7c:	8bfb      	ldrh	r3, [r7, #30]
 800df7e:	4313      	orrs	r3, r2
 800df80:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800df82:	697b      	ldr	r3, [r7, #20]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	8bfa      	ldrh	r2, [r7, #30]
 800df88:	60da      	str	r2, [r3, #12]
 800df8a:	e062      	b.n	800e052 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800df8c:	2301      	movs	r3, #1
 800df8e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800df92:	e05e      	b.n	800e052 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800df94:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800df98:	2b08      	cmp	r3, #8
 800df9a:	d828      	bhi.n	800dfee <UART_SetConfig+0x56a>
 800df9c:	a201      	add	r2, pc, #4	@ (adr r2, 800dfa4 <UART_SetConfig+0x520>)
 800df9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfa2:	bf00      	nop
 800dfa4:	0800dfc9 	.word	0x0800dfc9
 800dfa8:	0800dfd1 	.word	0x0800dfd1
 800dfac:	0800dfd9 	.word	0x0800dfd9
 800dfb0:	0800dfef 	.word	0x0800dfef
 800dfb4:	0800dfdf 	.word	0x0800dfdf
 800dfb8:	0800dfef 	.word	0x0800dfef
 800dfbc:	0800dfef 	.word	0x0800dfef
 800dfc0:	0800dfef 	.word	0x0800dfef
 800dfc4:	0800dfe7 	.word	0x0800dfe7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dfc8:	f7fc fdfe 	bl	800abc8 <HAL_RCC_GetPCLK1Freq>
 800dfcc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800dfce:	e014      	b.n	800dffa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dfd0:	f7fc fe10 	bl	800abf4 <HAL_RCC_GetPCLK2Freq>
 800dfd4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800dfd6:	e010      	b.n	800dffa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dfd8:	4b1a      	ldr	r3, [pc, #104]	@ (800e044 <UART_SetConfig+0x5c0>)
 800dfda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800dfdc:	e00d      	b.n	800dffa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dfde:	f7fc fd85 	bl	800aaec <HAL_RCC_GetSysClockFreq>
 800dfe2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800dfe4:	e009      	b.n	800dffa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dfe6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dfea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800dfec:	e005      	b.n	800dffa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800dfee:	2300      	movs	r3, #0
 800dff0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800dff2:	2301      	movs	r3, #1
 800dff4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800dff8:	bf00      	nop
    }

    if (pclk != 0U)
 800dffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d028      	beq.n	800e052 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e000:	697b      	ldr	r3, [r7, #20]
 800e002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e004:	4a10      	ldr	r2, [pc, #64]	@ (800e048 <UART_SetConfig+0x5c4>)
 800e006:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e00a:	461a      	mov	r2, r3
 800e00c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e00e:	fbb3 f2f2 	udiv	r2, r3, r2
 800e012:	697b      	ldr	r3, [r7, #20]
 800e014:	685b      	ldr	r3, [r3, #4]
 800e016:	085b      	lsrs	r3, r3, #1
 800e018:	441a      	add	r2, r3
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	685b      	ldr	r3, [r3, #4]
 800e01e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e022:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e024:	6a3b      	ldr	r3, [r7, #32]
 800e026:	2b0f      	cmp	r3, #15
 800e028:	d910      	bls.n	800e04c <UART_SetConfig+0x5c8>
 800e02a:	6a3b      	ldr	r3, [r7, #32]
 800e02c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e030:	d20c      	bcs.n	800e04c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e032:	6a3b      	ldr	r3, [r7, #32]
 800e034:	b29a      	uxth	r2, r3
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	60da      	str	r2, [r3, #12]
 800e03c:	e009      	b.n	800e052 <UART_SetConfig+0x5ce>
 800e03e:	bf00      	nop
 800e040:	40008000 	.word	0x40008000
 800e044:	00f42400 	.word	0x00f42400
 800e048:	08024a3c 	.word	0x08024a3c
      }
      else
      {
        ret = HAL_ERROR;
 800e04c:	2301      	movs	r3, #1
 800e04e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e052:	697b      	ldr	r3, [r7, #20]
 800e054:	2201      	movs	r2, #1
 800e056:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	2201      	movs	r2, #1
 800e05e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e062:	697b      	ldr	r3, [r7, #20]
 800e064:	2200      	movs	r2, #0
 800e066:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e068:	697b      	ldr	r3, [r7, #20]
 800e06a:	2200      	movs	r2, #0
 800e06c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e06e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800e072:	4618      	mov	r0, r3
 800e074:	3730      	adds	r7, #48	@ 0x30
 800e076:	46bd      	mov	sp, r7
 800e078:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e07c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e07c:	b480      	push	{r7}
 800e07e:	b083      	sub	sp, #12
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e088:	f003 0308 	and.w	r3, r3, #8
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d00a      	beq.n	800e0a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	685b      	ldr	r3, [r3, #4]
 800e096:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	430a      	orrs	r2, r1
 800e0a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0aa:	f003 0301 	and.w	r3, r3, #1
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d00a      	beq.n	800e0c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	685b      	ldr	r3, [r3, #4]
 800e0b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	430a      	orrs	r2, r1
 800e0c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0cc:	f003 0302 	and.w	r3, r3, #2
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d00a      	beq.n	800e0ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	685b      	ldr	r3, [r3, #4]
 800e0da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	430a      	orrs	r2, r1
 800e0e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0ee:	f003 0304 	and.w	r3, r3, #4
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d00a      	beq.n	800e10c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	685b      	ldr	r3, [r3, #4]
 800e0fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	430a      	orrs	r2, r1
 800e10a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e110:	f003 0310 	and.w	r3, r3, #16
 800e114:	2b00      	cmp	r3, #0
 800e116:	d00a      	beq.n	800e12e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	689b      	ldr	r3, [r3, #8]
 800e11e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	430a      	orrs	r2, r1
 800e12c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e132:	f003 0320 	and.w	r3, r3, #32
 800e136:	2b00      	cmp	r3, #0
 800e138:	d00a      	beq.n	800e150 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	689b      	ldr	r3, [r3, #8]
 800e140:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	430a      	orrs	r2, r1
 800e14e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d01a      	beq.n	800e192 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	685b      	ldr	r3, [r3, #4]
 800e162:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	430a      	orrs	r2, r1
 800e170:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e176:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e17a:	d10a      	bne.n	800e192 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	685b      	ldr	r3, [r3, #4]
 800e182:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	430a      	orrs	r2, r1
 800e190:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d00a      	beq.n	800e1b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	685b      	ldr	r3, [r3, #4]
 800e1a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	430a      	orrs	r2, r1
 800e1b2:	605a      	str	r2, [r3, #4]
  }
}
 800e1b4:	bf00      	nop
 800e1b6:	370c      	adds	r7, #12
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1be:	4770      	bx	lr

0800e1c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b098      	sub	sp, #96	@ 0x60
 800e1c4:	af02      	add	r7, sp, #8
 800e1c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e1d0:	f7f6 f906 	bl	80043e0 <HAL_GetTick>
 800e1d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	f003 0308 	and.w	r3, r3, #8
 800e1e0:	2b08      	cmp	r3, #8
 800e1e2:	d12f      	bne.n	800e244 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e1e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e1e8:	9300      	str	r3, [sp, #0]
 800e1ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e1f2:	6878      	ldr	r0, [r7, #4]
 800e1f4:	f000 f88e 	bl	800e314 <UART_WaitOnFlagUntilTimeout>
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d022      	beq.n	800e244 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e206:	e853 3f00 	ldrex	r3, [r3]
 800e20a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e20c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e20e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e212:	653b      	str	r3, [r7, #80]	@ 0x50
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	461a      	mov	r2, r3
 800e21a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e21c:	647b      	str	r3, [r7, #68]	@ 0x44
 800e21e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e220:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e222:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e224:	e841 2300 	strex	r3, r2, [r1]
 800e228:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e22a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d1e6      	bne.n	800e1fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2220      	movs	r2, #32
 800e234:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2200      	movs	r2, #0
 800e23c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e240:	2303      	movs	r3, #3
 800e242:	e063      	b.n	800e30c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	f003 0304 	and.w	r3, r3, #4
 800e24e:	2b04      	cmp	r3, #4
 800e250:	d149      	bne.n	800e2e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e252:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e256:	9300      	str	r3, [sp, #0]
 800e258:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e25a:	2200      	movs	r2, #0
 800e25c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e260:	6878      	ldr	r0, [r7, #4]
 800e262:	f000 f857 	bl	800e314 <UART_WaitOnFlagUntilTimeout>
 800e266:	4603      	mov	r3, r0
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d03c      	beq.n	800e2e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e274:	e853 3f00 	ldrex	r3, [r3]
 800e278:	623b      	str	r3, [r7, #32]
   return(result);
 800e27a:	6a3b      	ldr	r3, [r7, #32]
 800e27c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e280:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	461a      	mov	r2, r3
 800e288:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e28a:	633b      	str	r3, [r7, #48]	@ 0x30
 800e28c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e28e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e290:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e292:	e841 2300 	strex	r3, r2, [r1]
 800e296:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d1e6      	bne.n	800e26c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	3308      	adds	r3, #8
 800e2a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2a6:	693b      	ldr	r3, [r7, #16]
 800e2a8:	e853 3f00 	ldrex	r3, [r3]
 800e2ac:	60fb      	str	r3, [r7, #12]
   return(result);
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	f023 0301 	bic.w	r3, r3, #1
 800e2b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	3308      	adds	r3, #8
 800e2bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e2be:	61fa      	str	r2, [r7, #28]
 800e2c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2c2:	69b9      	ldr	r1, [r7, #24]
 800e2c4:	69fa      	ldr	r2, [r7, #28]
 800e2c6:	e841 2300 	strex	r3, r2, [r1]
 800e2ca:	617b      	str	r3, [r7, #20]
   return(result);
 800e2cc:	697b      	ldr	r3, [r7, #20]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d1e5      	bne.n	800e29e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2220      	movs	r2, #32
 800e2d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2200      	movs	r2, #0
 800e2de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e2e2:	2303      	movs	r3, #3
 800e2e4:	e012      	b.n	800e30c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	2220      	movs	r2, #32
 800e2ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2220      	movs	r2, #32
 800e2f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	2200      	movs	r2, #0
 800e300:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	2200      	movs	r2, #0
 800e306:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e30a:	2300      	movs	r3, #0
}
 800e30c:	4618      	mov	r0, r3
 800e30e:	3758      	adds	r7, #88	@ 0x58
 800e310:	46bd      	mov	sp, r7
 800e312:	bd80      	pop	{r7, pc}

0800e314 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b084      	sub	sp, #16
 800e318:	af00      	add	r7, sp, #0
 800e31a:	60f8      	str	r0, [r7, #12]
 800e31c:	60b9      	str	r1, [r7, #8]
 800e31e:	603b      	str	r3, [r7, #0]
 800e320:	4613      	mov	r3, r2
 800e322:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e324:	e04f      	b.n	800e3c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e326:	69bb      	ldr	r3, [r7, #24]
 800e328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e32c:	d04b      	beq.n	800e3c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e32e:	f7f6 f857 	bl	80043e0 <HAL_GetTick>
 800e332:	4602      	mov	r2, r0
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	1ad3      	subs	r3, r2, r3
 800e338:	69ba      	ldr	r2, [r7, #24]
 800e33a:	429a      	cmp	r2, r3
 800e33c:	d302      	bcc.n	800e344 <UART_WaitOnFlagUntilTimeout+0x30>
 800e33e:	69bb      	ldr	r3, [r7, #24]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d101      	bne.n	800e348 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e344:	2303      	movs	r3, #3
 800e346:	e04e      	b.n	800e3e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	f003 0304 	and.w	r3, r3, #4
 800e352:	2b00      	cmp	r3, #0
 800e354:	d037      	beq.n	800e3c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	2b80      	cmp	r3, #128	@ 0x80
 800e35a:	d034      	beq.n	800e3c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	2b40      	cmp	r3, #64	@ 0x40
 800e360:	d031      	beq.n	800e3c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	69db      	ldr	r3, [r3, #28]
 800e368:	f003 0308 	and.w	r3, r3, #8
 800e36c:	2b08      	cmp	r3, #8
 800e36e:	d110      	bne.n	800e392 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	2208      	movs	r2, #8
 800e376:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e378:	68f8      	ldr	r0, [r7, #12]
 800e37a:	f000 f838 	bl	800e3ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	2208      	movs	r2, #8
 800e382:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	2200      	movs	r2, #0
 800e38a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e38e:	2301      	movs	r3, #1
 800e390:	e029      	b.n	800e3e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	69db      	ldr	r3, [r3, #28]
 800e398:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e39c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e3a0:	d111      	bne.n	800e3c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e3aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e3ac:	68f8      	ldr	r0, [r7, #12]
 800e3ae:	f000 f81e 	bl	800e3ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	2220      	movs	r2, #32
 800e3b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	2200      	movs	r2, #0
 800e3be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e3c2:	2303      	movs	r3, #3
 800e3c4:	e00f      	b.n	800e3e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	69da      	ldr	r2, [r3, #28]
 800e3cc:	68bb      	ldr	r3, [r7, #8]
 800e3ce:	4013      	ands	r3, r2
 800e3d0:	68ba      	ldr	r2, [r7, #8]
 800e3d2:	429a      	cmp	r2, r3
 800e3d4:	bf0c      	ite	eq
 800e3d6:	2301      	moveq	r3, #1
 800e3d8:	2300      	movne	r3, #0
 800e3da:	b2db      	uxtb	r3, r3
 800e3dc:	461a      	mov	r2, r3
 800e3de:	79fb      	ldrb	r3, [r7, #7]
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	d0a0      	beq.n	800e326 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e3e4:	2300      	movs	r3, #0
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3710      	adds	r7, #16
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}

0800e3ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e3ee:	b480      	push	{r7}
 800e3f0:	b095      	sub	sp, #84	@ 0x54
 800e3f2:	af00      	add	r7, sp, #0
 800e3f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3fe:	e853 3f00 	ldrex	r3, [r3]
 800e402:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e406:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e40a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	461a      	mov	r2, r3
 800e412:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e414:	643b      	str	r3, [r7, #64]	@ 0x40
 800e416:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e418:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e41a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e41c:	e841 2300 	strex	r3, r2, [r1]
 800e420:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e424:	2b00      	cmp	r3, #0
 800e426:	d1e6      	bne.n	800e3f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	3308      	adds	r3, #8
 800e42e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e430:	6a3b      	ldr	r3, [r7, #32]
 800e432:	e853 3f00 	ldrex	r3, [r3]
 800e436:	61fb      	str	r3, [r7, #28]
   return(result);
 800e438:	69fb      	ldr	r3, [r7, #28]
 800e43a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e43e:	f023 0301 	bic.w	r3, r3, #1
 800e442:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	3308      	adds	r3, #8
 800e44a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e44c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e44e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e450:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e452:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e454:	e841 2300 	strex	r3, r2, [r1]
 800e458:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d1e3      	bne.n	800e428 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e464:	2b01      	cmp	r3, #1
 800e466:	d118      	bne.n	800e49a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	e853 3f00 	ldrex	r3, [r3]
 800e474:	60bb      	str	r3, [r7, #8]
   return(result);
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	f023 0310 	bic.w	r3, r3, #16
 800e47c:	647b      	str	r3, [r7, #68]	@ 0x44
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	461a      	mov	r2, r3
 800e484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e486:	61bb      	str	r3, [r7, #24]
 800e488:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e48a:	6979      	ldr	r1, [r7, #20]
 800e48c:	69ba      	ldr	r2, [r7, #24]
 800e48e:	e841 2300 	strex	r3, r2, [r1]
 800e492:	613b      	str	r3, [r7, #16]
   return(result);
 800e494:	693b      	ldr	r3, [r7, #16]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d1e6      	bne.n	800e468 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	2220      	movs	r2, #32
 800e49e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e4ae:	bf00      	nop
 800e4b0:	3754      	adds	r7, #84	@ 0x54
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b8:	4770      	bx	lr

0800e4ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e4ba:	b480      	push	{r7}
 800e4bc:	b085      	sub	sp, #20
 800e4be:	af00      	add	r7, sp, #0
 800e4c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e4c8:	2b01      	cmp	r3, #1
 800e4ca:	d101      	bne.n	800e4d0 <HAL_UARTEx_DisableFifoMode+0x16>
 800e4cc:	2302      	movs	r3, #2
 800e4ce:	e027      	b.n	800e520 <HAL_UARTEx_DisableFifoMode+0x66>
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2201      	movs	r2, #1
 800e4d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2224      	movs	r2, #36	@ 0x24
 800e4dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	681a      	ldr	r2, [r3, #0]
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	f022 0201 	bic.w	r2, r2, #1
 800e4f6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e4fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2200      	movs	r2, #0
 800e504:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	68fa      	ldr	r2, [r7, #12]
 800e50c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	2220      	movs	r2, #32
 800e512:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	2200      	movs	r2, #0
 800e51a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e51e:	2300      	movs	r3, #0
}
 800e520:	4618      	mov	r0, r3
 800e522:	3714      	adds	r7, #20
 800e524:	46bd      	mov	sp, r7
 800e526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52a:	4770      	bx	lr

0800e52c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b084      	sub	sp, #16
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e53c:	2b01      	cmp	r3, #1
 800e53e:	d101      	bne.n	800e544 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e540:	2302      	movs	r3, #2
 800e542:	e02d      	b.n	800e5a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2201      	movs	r2, #1
 800e548:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2224      	movs	r2, #36	@ 0x24
 800e550:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	681a      	ldr	r2, [r3, #0]
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	f022 0201 	bic.w	r2, r2, #1
 800e56a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	689b      	ldr	r3, [r3, #8]
 800e572:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	683a      	ldr	r2, [r7, #0]
 800e57c:	430a      	orrs	r2, r1
 800e57e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f000 f84f 	bl	800e624 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	68fa      	ldr	r2, [r7, #12]
 800e58c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	2220      	movs	r2, #32
 800e592:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2200      	movs	r2, #0
 800e59a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e59e:	2300      	movs	r3, #0
}
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	3710      	adds	r7, #16
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}

0800e5a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b084      	sub	sp, #16
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
 800e5b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e5b8:	2b01      	cmp	r3, #1
 800e5ba:	d101      	bne.n	800e5c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e5bc:	2302      	movs	r3, #2
 800e5be:	e02d      	b.n	800e61c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2201      	movs	r2, #1
 800e5c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2224      	movs	r2, #36	@ 0x24
 800e5cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	681a      	ldr	r2, [r3, #0]
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	f022 0201 	bic.w	r2, r2, #1
 800e5e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	689b      	ldr	r3, [r3, #8]
 800e5ee:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	683a      	ldr	r2, [r7, #0]
 800e5f8:	430a      	orrs	r2, r1
 800e5fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e5fc:	6878      	ldr	r0, [r7, #4]
 800e5fe:	f000 f811 	bl	800e624 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	68fa      	ldr	r2, [r7, #12]
 800e608:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2220      	movs	r2, #32
 800e60e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	2200      	movs	r2, #0
 800e616:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e61a:	2300      	movs	r3, #0
}
 800e61c:	4618      	mov	r0, r3
 800e61e:	3710      	adds	r7, #16
 800e620:	46bd      	mov	sp, r7
 800e622:	bd80      	pop	{r7, pc}

0800e624 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e624:	b480      	push	{r7}
 800e626:	b085      	sub	sp, #20
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e630:	2b00      	cmp	r3, #0
 800e632:	d108      	bne.n	800e646 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2201      	movs	r2, #1
 800e638:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2201      	movs	r2, #1
 800e640:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e644:	e031      	b.n	800e6aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e646:	2308      	movs	r3, #8
 800e648:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e64a:	2308      	movs	r3, #8
 800e64c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	689b      	ldr	r3, [r3, #8]
 800e654:	0e5b      	lsrs	r3, r3, #25
 800e656:	b2db      	uxtb	r3, r3
 800e658:	f003 0307 	and.w	r3, r3, #7
 800e65c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	689b      	ldr	r3, [r3, #8]
 800e664:	0f5b      	lsrs	r3, r3, #29
 800e666:	b2db      	uxtb	r3, r3
 800e668:	f003 0307 	and.w	r3, r3, #7
 800e66c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e66e:	7bbb      	ldrb	r3, [r7, #14]
 800e670:	7b3a      	ldrb	r2, [r7, #12]
 800e672:	4911      	ldr	r1, [pc, #68]	@ (800e6b8 <UARTEx_SetNbDataToProcess+0x94>)
 800e674:	5c8a      	ldrb	r2, [r1, r2]
 800e676:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e67a:	7b3a      	ldrb	r2, [r7, #12]
 800e67c:	490f      	ldr	r1, [pc, #60]	@ (800e6bc <UARTEx_SetNbDataToProcess+0x98>)
 800e67e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e680:	fb93 f3f2 	sdiv	r3, r3, r2
 800e684:	b29a      	uxth	r2, r3
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e68c:	7bfb      	ldrb	r3, [r7, #15]
 800e68e:	7b7a      	ldrb	r2, [r7, #13]
 800e690:	4909      	ldr	r1, [pc, #36]	@ (800e6b8 <UARTEx_SetNbDataToProcess+0x94>)
 800e692:	5c8a      	ldrb	r2, [r1, r2]
 800e694:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e698:	7b7a      	ldrb	r2, [r7, #13]
 800e69a:	4908      	ldr	r1, [pc, #32]	@ (800e6bc <UARTEx_SetNbDataToProcess+0x98>)
 800e69c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e69e:	fb93 f3f2 	sdiv	r3, r3, r2
 800e6a2:	b29a      	uxth	r2, r3
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e6aa:	bf00      	nop
 800e6ac:	3714      	adds	r7, #20
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b4:	4770      	bx	lr
 800e6b6:	bf00      	nop
 800e6b8:	08024a54 	.word	0x08024a54
 800e6bc:	08024a5c 	.word	0x08024a5c

0800e6c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800e6c0:	b480      	push	{r7}
 800e6c2:	b085      	sub	sp, #20
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800e6d0:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800e6d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	b29a      	uxth	r2, r3
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800e6e0:	2300      	movs	r3, #0
}
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	3714      	adds	r7, #20
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ec:	4770      	bx	lr

0800e6ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800e6ee:	b480      	push	{r7}
 800e6f0:	b085      	sub	sp, #20
 800e6f2:	af00      	add	r7, sp, #0
 800e6f4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800e6f6:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800e6fa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800e702:	b29a      	uxth	r2, r3
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	b29b      	uxth	r3, r3
 800e708:	43db      	mvns	r3, r3
 800e70a:	b29b      	uxth	r3, r3
 800e70c:	4013      	ands	r3, r2
 800e70e:	b29a      	uxth	r2, r3
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800e716:	2300      	movs	r3, #0
}
 800e718:	4618      	mov	r0, r3
 800e71a:	3714      	adds	r7, #20
 800e71c:	46bd      	mov	sp, r7
 800e71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e722:	4770      	bx	lr

0800e724 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800e724:	b480      	push	{r7}
 800e726:	b085      	sub	sp, #20
 800e728:	af00      	add	r7, sp, #0
 800e72a:	60f8      	str	r0, [r7, #12]
 800e72c:	1d3b      	adds	r3, r7, #4
 800e72e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	2201      	movs	r2, #1
 800e736:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	2200      	movs	r2, #0
 800e73e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	2200      	movs	r2, #0
 800e746:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	2200      	movs	r2, #0
 800e74e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800e752:	2300      	movs	r3, #0
}
 800e754:	4618      	mov	r0, r3
 800e756:	3714      	adds	r7, #20
 800e758:	46bd      	mov	sp, r7
 800e75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75e:	4770      	bx	lr

0800e760 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e760:	b480      	push	{r7}
 800e762:	b0a7      	sub	sp, #156	@ 0x9c
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
 800e768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800e76a:	2300      	movs	r3, #0
 800e76c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800e770:	687a      	ldr	r2, [r7, #4]
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	781b      	ldrb	r3, [r3, #0]
 800e776:	009b      	lsls	r3, r3, #2
 800e778:	4413      	add	r3, r2
 800e77a:	881b      	ldrh	r3, [r3, #0]
 800e77c:	b29b      	uxth	r3, r3
 800e77e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800e782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e786:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	78db      	ldrb	r3, [r3, #3]
 800e78e:	2b03      	cmp	r3, #3
 800e790:	d81f      	bhi.n	800e7d2 <USB_ActivateEndpoint+0x72>
 800e792:	a201      	add	r2, pc, #4	@ (adr r2, 800e798 <USB_ActivateEndpoint+0x38>)
 800e794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e798:	0800e7a9 	.word	0x0800e7a9
 800e79c:	0800e7c5 	.word	0x0800e7c5
 800e7a0:	0800e7db 	.word	0x0800e7db
 800e7a4:	0800e7b7 	.word	0x0800e7b7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800e7a8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800e7ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e7b0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800e7b4:	e012      	b.n	800e7dc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800e7b6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800e7ba:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800e7be:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800e7c2:	e00b      	b.n	800e7dc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800e7c4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800e7c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800e7cc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800e7d0:	e004      	b.n	800e7dc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800e7d2:	2301      	movs	r3, #1
 800e7d4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800e7d8:	e000      	b.n	800e7dc <USB_ActivateEndpoint+0x7c>
      break;
 800e7da:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800e7dc:	687a      	ldr	r2, [r7, #4]
 800e7de:	683b      	ldr	r3, [r7, #0]
 800e7e0:	781b      	ldrb	r3, [r3, #0]
 800e7e2:	009b      	lsls	r3, r3, #2
 800e7e4:	441a      	add	r2, r3
 800e7e6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800e7ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e7ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e7f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e7f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e7fa:	b29b      	uxth	r3, r3
 800e7fc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800e7fe:	687a      	ldr	r2, [r7, #4]
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	781b      	ldrb	r3, [r3, #0]
 800e804:	009b      	lsls	r3, r3, #2
 800e806:	4413      	add	r3, r2
 800e808:	881b      	ldrh	r3, [r3, #0]
 800e80a:	b29b      	uxth	r3, r3
 800e80c:	b21b      	sxth	r3, r3
 800e80e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e816:	b21a      	sxth	r2, r3
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	781b      	ldrb	r3, [r3, #0]
 800e81c:	b21b      	sxth	r3, r3
 800e81e:	4313      	orrs	r3, r2
 800e820:	b21b      	sxth	r3, r3
 800e822:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800e826:	687a      	ldr	r2, [r7, #4]
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	781b      	ldrb	r3, [r3, #0]
 800e82c:	009b      	lsls	r3, r3, #2
 800e82e:	441a      	add	r2, r3
 800e830:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800e834:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e838:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e83c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e840:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e844:	b29b      	uxth	r3, r3
 800e846:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	7b1b      	ldrb	r3, [r3, #12]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	f040 8180 	bne.w	800eb52 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	785b      	ldrb	r3, [r3, #1]
 800e856:	2b00      	cmp	r3, #0
 800e858:	f000 8084 	beq.w	800e964 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	61bb      	str	r3, [r7, #24]
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e866:	b29b      	uxth	r3, r3
 800e868:	461a      	mov	r2, r3
 800e86a:	69bb      	ldr	r3, [r7, #24]
 800e86c:	4413      	add	r3, r2
 800e86e:	61bb      	str	r3, [r7, #24]
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	781b      	ldrb	r3, [r3, #0]
 800e874:	00da      	lsls	r2, r3, #3
 800e876:	69bb      	ldr	r3, [r7, #24]
 800e878:	4413      	add	r3, r2
 800e87a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e87e:	617b      	str	r3, [r7, #20]
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	88db      	ldrh	r3, [r3, #6]
 800e884:	085b      	lsrs	r3, r3, #1
 800e886:	b29b      	uxth	r3, r3
 800e888:	005b      	lsls	r3, r3, #1
 800e88a:	b29a      	uxth	r2, r3
 800e88c:	697b      	ldr	r3, [r7, #20]
 800e88e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e890:	687a      	ldr	r2, [r7, #4]
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	781b      	ldrb	r3, [r3, #0]
 800e896:	009b      	lsls	r3, r3, #2
 800e898:	4413      	add	r3, r2
 800e89a:	881b      	ldrh	r3, [r3, #0]
 800e89c:	827b      	strh	r3, [r7, #18]
 800e89e:	8a7b      	ldrh	r3, [r7, #18]
 800e8a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d01b      	beq.n	800e8e0 <USB_ActivateEndpoint+0x180>
 800e8a8:	687a      	ldr	r2, [r7, #4]
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	781b      	ldrb	r3, [r3, #0]
 800e8ae:	009b      	lsls	r3, r3, #2
 800e8b0:	4413      	add	r3, r2
 800e8b2:	881b      	ldrh	r3, [r3, #0]
 800e8b4:	b29b      	uxth	r3, r3
 800e8b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e8ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e8be:	823b      	strh	r3, [r7, #16]
 800e8c0:	687a      	ldr	r2, [r7, #4]
 800e8c2:	683b      	ldr	r3, [r7, #0]
 800e8c4:	781b      	ldrb	r3, [r3, #0]
 800e8c6:	009b      	lsls	r3, r3, #2
 800e8c8:	441a      	add	r2, r3
 800e8ca:	8a3b      	ldrh	r3, [r7, #16]
 800e8cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e8d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e8d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e8d8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e8dc:	b29b      	uxth	r3, r3
 800e8de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	78db      	ldrb	r3, [r3, #3]
 800e8e4:	2b01      	cmp	r3, #1
 800e8e6:	d020      	beq.n	800e92a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e8e8:	687a      	ldr	r2, [r7, #4]
 800e8ea:	683b      	ldr	r3, [r7, #0]
 800e8ec:	781b      	ldrb	r3, [r3, #0]
 800e8ee:	009b      	lsls	r3, r3, #2
 800e8f0:	4413      	add	r3, r2
 800e8f2:	881b      	ldrh	r3, [r3, #0]
 800e8f4:	b29b      	uxth	r3, r3
 800e8f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e8fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e8fe:	81bb      	strh	r3, [r7, #12]
 800e900:	89bb      	ldrh	r3, [r7, #12]
 800e902:	f083 0320 	eor.w	r3, r3, #32
 800e906:	81bb      	strh	r3, [r7, #12]
 800e908:	687a      	ldr	r2, [r7, #4]
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	781b      	ldrb	r3, [r3, #0]
 800e90e:	009b      	lsls	r3, r3, #2
 800e910:	441a      	add	r2, r3
 800e912:	89bb      	ldrh	r3, [r7, #12]
 800e914:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e918:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e91c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e920:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e924:	b29b      	uxth	r3, r3
 800e926:	8013      	strh	r3, [r2, #0]
 800e928:	e3f9      	b.n	800f11e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e92a:	687a      	ldr	r2, [r7, #4]
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	781b      	ldrb	r3, [r3, #0]
 800e930:	009b      	lsls	r3, r3, #2
 800e932:	4413      	add	r3, r2
 800e934:	881b      	ldrh	r3, [r3, #0]
 800e936:	b29b      	uxth	r3, r3
 800e938:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e93c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e940:	81fb      	strh	r3, [r7, #14]
 800e942:	687a      	ldr	r2, [r7, #4]
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	781b      	ldrb	r3, [r3, #0]
 800e948:	009b      	lsls	r3, r3, #2
 800e94a:	441a      	add	r2, r3
 800e94c:	89fb      	ldrh	r3, [r7, #14]
 800e94e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e952:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e956:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e95a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e95e:	b29b      	uxth	r3, r3
 800e960:	8013      	strh	r3, [r2, #0]
 800e962:	e3dc      	b.n	800f11e <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	633b      	str	r3, [r7, #48]	@ 0x30
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e96e:	b29b      	uxth	r3, r3
 800e970:	461a      	mov	r2, r3
 800e972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e974:	4413      	add	r3, r2
 800e976:	633b      	str	r3, [r7, #48]	@ 0x30
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	781b      	ldrb	r3, [r3, #0]
 800e97c:	00da      	lsls	r2, r3, #3
 800e97e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e980:	4413      	add	r3, r2
 800e982:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800e986:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	88db      	ldrh	r3, [r3, #6]
 800e98c:	085b      	lsrs	r3, r3, #1
 800e98e:	b29b      	uxth	r3, r3
 800e990:	005b      	lsls	r3, r3, #1
 800e992:	b29a      	uxth	r2, r3
 800e994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e996:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e9a2:	b29b      	uxth	r3, r3
 800e9a4:	461a      	mov	r2, r3
 800e9a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9a8:	4413      	add	r3, r2
 800e9aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	781b      	ldrb	r3, [r3, #0]
 800e9b0:	00da      	lsls	r2, r3, #3
 800e9b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9b4:	4413      	add	r3, r2
 800e9b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e9ba:	627b      	str	r3, [r7, #36]	@ 0x24
 800e9bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9be:	881b      	ldrh	r3, [r3, #0]
 800e9c0:	b29b      	uxth	r3, r3
 800e9c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e9c6:	b29a      	uxth	r2, r3
 800e9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9ca:	801a      	strh	r2, [r3, #0]
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	691b      	ldr	r3, [r3, #16]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d10a      	bne.n	800e9ea <USB_ActivateEndpoint+0x28a>
 800e9d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9d6:	881b      	ldrh	r3, [r3, #0]
 800e9d8:	b29b      	uxth	r3, r3
 800e9da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e9de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e9e2:	b29a      	uxth	r2, r3
 800e9e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9e6:	801a      	strh	r2, [r3, #0]
 800e9e8:	e041      	b.n	800ea6e <USB_ActivateEndpoint+0x30e>
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	691b      	ldr	r3, [r3, #16]
 800e9ee:	2b3e      	cmp	r3, #62	@ 0x3e
 800e9f0:	d81c      	bhi.n	800ea2c <USB_ActivateEndpoint+0x2cc>
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	691b      	ldr	r3, [r3, #16]
 800e9f6:	085b      	lsrs	r3, r3, #1
 800e9f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	691b      	ldr	r3, [r3, #16]
 800ea00:	f003 0301 	and.w	r3, r3, #1
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d004      	beq.n	800ea12 <USB_ActivateEndpoint+0x2b2>
 800ea08:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ea0c:	3301      	adds	r3, #1
 800ea0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ea12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea14:	881b      	ldrh	r3, [r3, #0]
 800ea16:	b29a      	uxth	r2, r3
 800ea18:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ea1c:	b29b      	uxth	r3, r3
 800ea1e:	029b      	lsls	r3, r3, #10
 800ea20:	b29b      	uxth	r3, r3
 800ea22:	4313      	orrs	r3, r2
 800ea24:	b29a      	uxth	r2, r3
 800ea26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea28:	801a      	strh	r2, [r3, #0]
 800ea2a:	e020      	b.n	800ea6e <USB_ActivateEndpoint+0x30e>
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	691b      	ldr	r3, [r3, #16]
 800ea30:	095b      	lsrs	r3, r3, #5
 800ea32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	691b      	ldr	r3, [r3, #16]
 800ea3a:	f003 031f 	and.w	r3, r3, #31
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d104      	bne.n	800ea4c <USB_ActivateEndpoint+0x2ec>
 800ea42:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ea46:	3b01      	subs	r3, #1
 800ea48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ea4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea4e:	881b      	ldrh	r3, [r3, #0]
 800ea50:	b29a      	uxth	r2, r3
 800ea52:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ea56:	b29b      	uxth	r3, r3
 800ea58:	029b      	lsls	r3, r3, #10
 800ea5a:	b29b      	uxth	r3, r3
 800ea5c:	4313      	orrs	r3, r2
 800ea5e:	b29b      	uxth	r3, r3
 800ea60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ea64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ea68:	b29a      	uxth	r2, r3
 800ea6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea6c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ea6e:	687a      	ldr	r2, [r7, #4]
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	781b      	ldrb	r3, [r3, #0]
 800ea74:	009b      	lsls	r3, r3, #2
 800ea76:	4413      	add	r3, r2
 800ea78:	881b      	ldrh	r3, [r3, #0]
 800ea7a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800ea7c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ea7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d01b      	beq.n	800eabe <USB_ActivateEndpoint+0x35e>
 800ea86:	687a      	ldr	r2, [r7, #4]
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	781b      	ldrb	r3, [r3, #0]
 800ea8c:	009b      	lsls	r3, r3, #2
 800ea8e:	4413      	add	r3, r2
 800ea90:	881b      	ldrh	r3, [r3, #0]
 800ea92:	b29b      	uxth	r3, r3
 800ea94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ea98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ea9c:	843b      	strh	r3, [r7, #32]
 800ea9e:	687a      	ldr	r2, [r7, #4]
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	781b      	ldrb	r3, [r3, #0]
 800eaa4:	009b      	lsls	r3, r3, #2
 800eaa6:	441a      	add	r2, r3
 800eaa8:	8c3b      	ldrh	r3, [r7, #32]
 800eaaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800eaae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800eab2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800eab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eaba:	b29b      	uxth	r3, r3
 800eabc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	781b      	ldrb	r3, [r3, #0]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d124      	bne.n	800eb10 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800eac6:	687a      	ldr	r2, [r7, #4]
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	781b      	ldrb	r3, [r3, #0]
 800eacc:	009b      	lsls	r3, r3, #2
 800eace:	4413      	add	r3, r2
 800ead0:	881b      	ldrh	r3, [r3, #0]
 800ead2:	b29b      	uxth	r3, r3
 800ead4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ead8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eadc:	83bb      	strh	r3, [r7, #28]
 800eade:	8bbb      	ldrh	r3, [r7, #28]
 800eae0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800eae4:	83bb      	strh	r3, [r7, #28]
 800eae6:	8bbb      	ldrh	r3, [r7, #28]
 800eae8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800eaec:	83bb      	strh	r3, [r7, #28]
 800eaee:	687a      	ldr	r2, [r7, #4]
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	781b      	ldrb	r3, [r3, #0]
 800eaf4:	009b      	lsls	r3, r3, #2
 800eaf6:	441a      	add	r2, r3
 800eaf8:	8bbb      	ldrh	r3, [r7, #28]
 800eafa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800eafe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800eb02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800eb06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eb0a:	b29b      	uxth	r3, r3
 800eb0c:	8013      	strh	r3, [r2, #0]
 800eb0e:	e306      	b.n	800f11e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800eb10:	687a      	ldr	r2, [r7, #4]
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	781b      	ldrb	r3, [r3, #0]
 800eb16:	009b      	lsls	r3, r3, #2
 800eb18:	4413      	add	r3, r2
 800eb1a:	881b      	ldrh	r3, [r3, #0]
 800eb1c:	b29b      	uxth	r3, r3
 800eb1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800eb22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eb26:	83fb      	strh	r3, [r7, #30]
 800eb28:	8bfb      	ldrh	r3, [r7, #30]
 800eb2a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800eb2e:	83fb      	strh	r3, [r7, #30]
 800eb30:	687a      	ldr	r2, [r7, #4]
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	781b      	ldrb	r3, [r3, #0]
 800eb36:	009b      	lsls	r3, r3, #2
 800eb38:	441a      	add	r2, r3
 800eb3a:	8bfb      	ldrh	r3, [r7, #30]
 800eb3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800eb40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800eb44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800eb48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eb4c:	b29b      	uxth	r3, r3
 800eb4e:	8013      	strh	r3, [r2, #0]
 800eb50:	e2e5      	b.n	800f11e <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	78db      	ldrb	r3, [r3, #3]
 800eb56:	2b02      	cmp	r3, #2
 800eb58:	d11e      	bne.n	800eb98 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800eb5a:	687a      	ldr	r2, [r7, #4]
 800eb5c:	683b      	ldr	r3, [r7, #0]
 800eb5e:	781b      	ldrb	r3, [r3, #0]
 800eb60:	009b      	lsls	r3, r3, #2
 800eb62:	4413      	add	r3, r2
 800eb64:	881b      	ldrh	r3, [r3, #0]
 800eb66:	b29b      	uxth	r3, r3
 800eb68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800eb6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eb70:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800eb74:	687a      	ldr	r2, [r7, #4]
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	781b      	ldrb	r3, [r3, #0]
 800eb7a:	009b      	lsls	r3, r3, #2
 800eb7c:	441a      	add	r2, r3
 800eb7e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800eb82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800eb86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800eb8a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800eb8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eb92:	b29b      	uxth	r3, r3
 800eb94:	8013      	strh	r3, [r2, #0]
 800eb96:	e01d      	b.n	800ebd4 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800eb98:	687a      	ldr	r2, [r7, #4]
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	781b      	ldrb	r3, [r3, #0]
 800eb9e:	009b      	lsls	r3, r3, #2
 800eba0:	4413      	add	r3, r2
 800eba2:	881b      	ldrh	r3, [r3, #0]
 800eba4:	b29b      	uxth	r3, r3
 800eba6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800ebaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ebae:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800ebb2:	687a      	ldr	r2, [r7, #4]
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	781b      	ldrb	r3, [r3, #0]
 800ebb8:	009b      	lsls	r3, r3, #2
 800ebba:	441a      	add	r2, r3
 800ebbc:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800ebc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ebc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ebc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ebcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ebd0:	b29b      	uxth	r3, r3
 800ebd2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ebde:	b29b      	uxth	r3, r3
 800ebe0:	461a      	mov	r2, r3
 800ebe2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ebe4:	4413      	add	r3, r2
 800ebe6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	781b      	ldrb	r3, [r3, #0]
 800ebec:	00da      	lsls	r2, r3, #3
 800ebee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ebf0:	4413      	add	r3, r2
 800ebf2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ebf6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	891b      	ldrh	r3, [r3, #8]
 800ebfc:	085b      	lsrs	r3, r3, #1
 800ebfe:	b29b      	uxth	r3, r3
 800ec00:	005b      	lsls	r3, r3, #1
 800ec02:	b29a      	uxth	r2, r3
 800ec04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ec06:	801a      	strh	r2, [r3, #0]
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	677b      	str	r3, [r7, #116]	@ 0x74
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ec12:	b29b      	uxth	r3, r3
 800ec14:	461a      	mov	r2, r3
 800ec16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ec18:	4413      	add	r3, r2
 800ec1a:	677b      	str	r3, [r7, #116]	@ 0x74
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	781b      	ldrb	r3, [r3, #0]
 800ec20:	00da      	lsls	r2, r3, #3
 800ec22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ec24:	4413      	add	r3, r2
 800ec26:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ec2a:	673b      	str	r3, [r7, #112]	@ 0x70
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	895b      	ldrh	r3, [r3, #10]
 800ec30:	085b      	lsrs	r3, r3, #1
 800ec32:	b29b      	uxth	r3, r3
 800ec34:	005b      	lsls	r3, r3, #1
 800ec36:	b29a      	uxth	r2, r3
 800ec38:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ec3a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	785b      	ldrb	r3, [r3, #1]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	f040 81af 	bne.w	800efa4 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ec46:	687a      	ldr	r2, [r7, #4]
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	781b      	ldrb	r3, [r3, #0]
 800ec4c:	009b      	lsls	r3, r3, #2
 800ec4e:	4413      	add	r3, r2
 800ec50:	881b      	ldrh	r3, [r3, #0]
 800ec52:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800ec56:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800ec5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d01d      	beq.n	800ec9e <USB_ActivateEndpoint+0x53e>
 800ec62:	687a      	ldr	r2, [r7, #4]
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	781b      	ldrb	r3, [r3, #0]
 800ec68:	009b      	lsls	r3, r3, #2
 800ec6a:	4413      	add	r3, r2
 800ec6c:	881b      	ldrh	r3, [r3, #0]
 800ec6e:	b29b      	uxth	r3, r3
 800ec70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ec74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ec78:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800ec7c:	687a      	ldr	r2, [r7, #4]
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	781b      	ldrb	r3, [r3, #0]
 800ec82:	009b      	lsls	r3, r3, #2
 800ec84:	441a      	add	r2, r3
 800ec86:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800ec8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ec8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ec92:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ec96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ec9a:	b29b      	uxth	r3, r3
 800ec9c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ec9e:	687a      	ldr	r2, [r7, #4]
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	781b      	ldrb	r3, [r3, #0]
 800eca4:	009b      	lsls	r3, r3, #2
 800eca6:	4413      	add	r3, r2
 800eca8:	881b      	ldrh	r3, [r3, #0]
 800ecaa:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800ecae:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800ecb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d01d      	beq.n	800ecf6 <USB_ActivateEndpoint+0x596>
 800ecba:	687a      	ldr	r2, [r7, #4]
 800ecbc:	683b      	ldr	r3, [r7, #0]
 800ecbe:	781b      	ldrb	r3, [r3, #0]
 800ecc0:	009b      	lsls	r3, r3, #2
 800ecc2:	4413      	add	r3, r2
 800ecc4:	881b      	ldrh	r3, [r3, #0]
 800ecc6:	b29b      	uxth	r3, r3
 800ecc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800eccc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ecd0:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800ecd4:	687a      	ldr	r2, [r7, #4]
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	781b      	ldrb	r3, [r3, #0]
 800ecda:	009b      	lsls	r3, r3, #2
 800ecdc:	441a      	add	r2, r3
 800ecde:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800ece2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ece6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ecea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ecee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ecf2:	b29b      	uxth	r3, r3
 800ecf4:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ecf6:	683b      	ldr	r3, [r7, #0]
 800ecf8:	785b      	ldrb	r3, [r3, #1]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d16b      	bne.n	800edd6 <USB_ActivateEndpoint+0x676>
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ed08:	b29b      	uxth	r3, r3
 800ed0a:	461a      	mov	r2, r3
 800ed0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed0e:	4413      	add	r3, r2
 800ed10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	781b      	ldrb	r3, [r3, #0]
 800ed16:	00da      	lsls	r2, r3, #3
 800ed18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed1a:	4413      	add	r3, r2
 800ed1c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ed20:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ed22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ed24:	881b      	ldrh	r3, [r3, #0]
 800ed26:	b29b      	uxth	r3, r3
 800ed28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ed2c:	b29a      	uxth	r2, r3
 800ed2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ed30:	801a      	strh	r2, [r3, #0]
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	691b      	ldr	r3, [r3, #16]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d10a      	bne.n	800ed50 <USB_ActivateEndpoint+0x5f0>
 800ed3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ed3c:	881b      	ldrh	r3, [r3, #0]
 800ed3e:	b29b      	uxth	r3, r3
 800ed40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ed44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ed48:	b29a      	uxth	r2, r3
 800ed4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ed4c:	801a      	strh	r2, [r3, #0]
 800ed4e:	e05d      	b.n	800ee0c <USB_ActivateEndpoint+0x6ac>
 800ed50:	683b      	ldr	r3, [r7, #0]
 800ed52:	691b      	ldr	r3, [r3, #16]
 800ed54:	2b3e      	cmp	r3, #62	@ 0x3e
 800ed56:	d81c      	bhi.n	800ed92 <USB_ActivateEndpoint+0x632>
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	691b      	ldr	r3, [r3, #16]
 800ed5c:	085b      	lsrs	r3, r3, #1
 800ed5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	691b      	ldr	r3, [r3, #16]
 800ed66:	f003 0301 	and.w	r3, r3, #1
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d004      	beq.n	800ed78 <USB_ActivateEndpoint+0x618>
 800ed6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ed72:	3301      	adds	r3, #1
 800ed74:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ed78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ed7a:	881b      	ldrh	r3, [r3, #0]
 800ed7c:	b29a      	uxth	r2, r3
 800ed7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ed82:	b29b      	uxth	r3, r3
 800ed84:	029b      	lsls	r3, r3, #10
 800ed86:	b29b      	uxth	r3, r3
 800ed88:	4313      	orrs	r3, r2
 800ed8a:	b29a      	uxth	r2, r3
 800ed8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ed8e:	801a      	strh	r2, [r3, #0]
 800ed90:	e03c      	b.n	800ee0c <USB_ActivateEndpoint+0x6ac>
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	691b      	ldr	r3, [r3, #16]
 800ed96:	095b      	lsrs	r3, r3, #5
 800ed98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	691b      	ldr	r3, [r3, #16]
 800eda0:	f003 031f 	and.w	r3, r3, #31
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d104      	bne.n	800edb2 <USB_ActivateEndpoint+0x652>
 800eda8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800edac:	3b01      	subs	r3, #1
 800edae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800edb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800edb4:	881b      	ldrh	r3, [r3, #0]
 800edb6:	b29a      	uxth	r2, r3
 800edb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800edbc:	b29b      	uxth	r3, r3
 800edbe:	029b      	lsls	r3, r3, #10
 800edc0:	b29b      	uxth	r3, r3
 800edc2:	4313      	orrs	r3, r2
 800edc4:	b29b      	uxth	r3, r3
 800edc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800edca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800edce:	b29a      	uxth	r2, r3
 800edd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800edd2:	801a      	strh	r2, [r3, #0]
 800edd4:	e01a      	b.n	800ee0c <USB_ActivateEndpoint+0x6ac>
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	785b      	ldrb	r3, [r3, #1]
 800edda:	2b01      	cmp	r3, #1
 800eddc:	d116      	bne.n	800ee0c <USB_ActivateEndpoint+0x6ac>
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	657b      	str	r3, [r7, #84]	@ 0x54
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ede8:	b29b      	uxth	r3, r3
 800edea:	461a      	mov	r2, r3
 800edec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edee:	4413      	add	r3, r2
 800edf0:	657b      	str	r3, [r7, #84]	@ 0x54
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	781b      	ldrb	r3, [r3, #0]
 800edf6:	00da      	lsls	r2, r3, #3
 800edf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edfa:	4413      	add	r3, r2
 800edfc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ee00:	653b      	str	r3, [r7, #80]	@ 0x50
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	691b      	ldr	r3, [r3, #16]
 800ee06:	b29a      	uxth	r2, r3
 800ee08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee0a:	801a      	strh	r2, [r3, #0]
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ee10:	683b      	ldr	r3, [r7, #0]
 800ee12:	785b      	ldrb	r3, [r3, #1]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d16b      	bne.n	800eef0 <USB_ActivateEndpoint+0x790>
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ee22:	b29b      	uxth	r3, r3
 800ee24:	461a      	mov	r2, r3
 800ee26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee28:	4413      	add	r3, r2
 800ee2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	781b      	ldrb	r3, [r3, #0]
 800ee30:	00da      	lsls	r2, r3, #3
 800ee32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee34:	4413      	add	r3, r2
 800ee36:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ee3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ee3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee3e:	881b      	ldrh	r3, [r3, #0]
 800ee40:	b29b      	uxth	r3, r3
 800ee42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ee46:	b29a      	uxth	r2, r3
 800ee48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee4a:	801a      	strh	r2, [r3, #0]
 800ee4c:	683b      	ldr	r3, [r7, #0]
 800ee4e:	691b      	ldr	r3, [r3, #16]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d10a      	bne.n	800ee6a <USB_ActivateEndpoint+0x70a>
 800ee54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee56:	881b      	ldrh	r3, [r3, #0]
 800ee58:	b29b      	uxth	r3, r3
 800ee5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ee5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ee62:	b29a      	uxth	r2, r3
 800ee64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee66:	801a      	strh	r2, [r3, #0]
 800ee68:	e05b      	b.n	800ef22 <USB_ActivateEndpoint+0x7c2>
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	691b      	ldr	r3, [r3, #16]
 800ee6e:	2b3e      	cmp	r3, #62	@ 0x3e
 800ee70:	d81c      	bhi.n	800eeac <USB_ActivateEndpoint+0x74c>
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	691b      	ldr	r3, [r3, #16]
 800ee76:	085b      	lsrs	r3, r3, #1
 800ee78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ee7c:	683b      	ldr	r3, [r7, #0]
 800ee7e:	691b      	ldr	r3, [r3, #16]
 800ee80:	f003 0301 	and.w	r3, r3, #1
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d004      	beq.n	800ee92 <USB_ActivateEndpoint+0x732>
 800ee88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ee8c:	3301      	adds	r3, #1
 800ee8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ee92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee94:	881b      	ldrh	r3, [r3, #0]
 800ee96:	b29a      	uxth	r2, r3
 800ee98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ee9c:	b29b      	uxth	r3, r3
 800ee9e:	029b      	lsls	r3, r3, #10
 800eea0:	b29b      	uxth	r3, r3
 800eea2:	4313      	orrs	r3, r2
 800eea4:	b29a      	uxth	r2, r3
 800eea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eea8:	801a      	strh	r2, [r3, #0]
 800eeaa:	e03a      	b.n	800ef22 <USB_ActivateEndpoint+0x7c2>
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	691b      	ldr	r3, [r3, #16]
 800eeb0:	095b      	lsrs	r3, r3, #5
 800eeb2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800eeb6:	683b      	ldr	r3, [r7, #0]
 800eeb8:	691b      	ldr	r3, [r3, #16]
 800eeba:	f003 031f 	and.w	r3, r3, #31
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d104      	bne.n	800eecc <USB_ActivateEndpoint+0x76c>
 800eec2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800eec6:	3b01      	subs	r3, #1
 800eec8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800eecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eece:	881b      	ldrh	r3, [r3, #0]
 800eed0:	b29a      	uxth	r2, r3
 800eed2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800eed6:	b29b      	uxth	r3, r3
 800eed8:	029b      	lsls	r3, r3, #10
 800eeda:	b29b      	uxth	r3, r3
 800eedc:	4313      	orrs	r3, r2
 800eede:	b29b      	uxth	r3, r3
 800eee0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eee4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eee8:	b29a      	uxth	r2, r3
 800eeea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeec:	801a      	strh	r2, [r3, #0]
 800eeee:	e018      	b.n	800ef22 <USB_ActivateEndpoint+0x7c2>
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	785b      	ldrb	r3, [r3, #1]
 800eef4:	2b01      	cmp	r3, #1
 800eef6:	d114      	bne.n	800ef22 <USB_ActivateEndpoint+0x7c2>
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800eefe:	b29b      	uxth	r3, r3
 800ef00:	461a      	mov	r2, r3
 800ef02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef04:	4413      	add	r3, r2
 800ef06:	647b      	str	r3, [r7, #68]	@ 0x44
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	781b      	ldrb	r3, [r3, #0]
 800ef0c:	00da      	lsls	r2, r3, #3
 800ef0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef10:	4413      	add	r3, r2
 800ef12:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ef16:	643b      	str	r3, [r7, #64]	@ 0x40
 800ef18:	683b      	ldr	r3, [r7, #0]
 800ef1a:	691b      	ldr	r3, [r3, #16]
 800ef1c:	b29a      	uxth	r2, r3
 800ef1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef20:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ef22:	687a      	ldr	r2, [r7, #4]
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	781b      	ldrb	r3, [r3, #0]
 800ef28:	009b      	lsls	r3, r3, #2
 800ef2a:	4413      	add	r3, r2
 800ef2c:	881b      	ldrh	r3, [r3, #0]
 800ef2e:	b29b      	uxth	r3, r3
 800ef30:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ef34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ef38:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800ef3a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ef3c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ef40:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800ef42:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ef44:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ef48:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800ef4a:	687a      	ldr	r2, [r7, #4]
 800ef4c:	683b      	ldr	r3, [r7, #0]
 800ef4e:	781b      	ldrb	r3, [r3, #0]
 800ef50:	009b      	lsls	r3, r3, #2
 800ef52:	441a      	add	r2, r3
 800ef54:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ef56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ef5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ef5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ef62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ef66:	b29b      	uxth	r3, r3
 800ef68:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ef6a:	687a      	ldr	r2, [r7, #4]
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	781b      	ldrb	r3, [r3, #0]
 800ef70:	009b      	lsls	r3, r3, #2
 800ef72:	4413      	add	r3, r2
 800ef74:	881b      	ldrh	r3, [r3, #0]
 800ef76:	b29b      	uxth	r3, r3
 800ef78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ef7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ef80:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800ef82:	687a      	ldr	r2, [r7, #4]
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	781b      	ldrb	r3, [r3, #0]
 800ef88:	009b      	lsls	r3, r3, #2
 800ef8a:	441a      	add	r2, r3
 800ef8c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800ef8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ef92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ef96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ef9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ef9e:	b29b      	uxth	r3, r3
 800efa0:	8013      	strh	r3, [r2, #0]
 800efa2:	e0bc      	b.n	800f11e <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800efa4:	687a      	ldr	r2, [r7, #4]
 800efa6:	683b      	ldr	r3, [r7, #0]
 800efa8:	781b      	ldrb	r3, [r3, #0]
 800efaa:	009b      	lsls	r3, r3, #2
 800efac:	4413      	add	r3, r2
 800efae:	881b      	ldrh	r3, [r3, #0]
 800efb0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800efb4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800efb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d01d      	beq.n	800effc <USB_ActivateEndpoint+0x89c>
 800efc0:	687a      	ldr	r2, [r7, #4]
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	781b      	ldrb	r3, [r3, #0]
 800efc6:	009b      	lsls	r3, r3, #2
 800efc8:	4413      	add	r3, r2
 800efca:	881b      	ldrh	r3, [r3, #0]
 800efcc:	b29b      	uxth	r3, r3
 800efce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800efd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800efd6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800efda:	687a      	ldr	r2, [r7, #4]
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	781b      	ldrb	r3, [r3, #0]
 800efe0:	009b      	lsls	r3, r3, #2
 800efe2:	441a      	add	r2, r3
 800efe4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800efe8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800efec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800eff0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800eff4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eff8:	b29b      	uxth	r3, r3
 800effa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800effc:	687a      	ldr	r2, [r7, #4]
 800effe:	683b      	ldr	r3, [r7, #0]
 800f000:	781b      	ldrb	r3, [r3, #0]
 800f002:	009b      	lsls	r3, r3, #2
 800f004:	4413      	add	r3, r2
 800f006:	881b      	ldrh	r3, [r3, #0]
 800f008:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800f00c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800f010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f014:	2b00      	cmp	r3, #0
 800f016:	d01d      	beq.n	800f054 <USB_ActivateEndpoint+0x8f4>
 800f018:	687a      	ldr	r2, [r7, #4]
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	781b      	ldrb	r3, [r3, #0]
 800f01e:	009b      	lsls	r3, r3, #2
 800f020:	4413      	add	r3, r2
 800f022:	881b      	ldrh	r3, [r3, #0]
 800f024:	b29b      	uxth	r3, r3
 800f026:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f02a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f02e:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800f032:	687a      	ldr	r2, [r7, #4]
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	781b      	ldrb	r3, [r3, #0]
 800f038:	009b      	lsls	r3, r3, #2
 800f03a:	441a      	add	r2, r3
 800f03c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800f040:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f044:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f048:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f04c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f050:	b29b      	uxth	r3, r3
 800f052:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	78db      	ldrb	r3, [r3, #3]
 800f058:	2b01      	cmp	r3, #1
 800f05a:	d024      	beq.n	800f0a6 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f05c:	687a      	ldr	r2, [r7, #4]
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	781b      	ldrb	r3, [r3, #0]
 800f062:	009b      	lsls	r3, r3, #2
 800f064:	4413      	add	r3, r2
 800f066:	881b      	ldrh	r3, [r3, #0]
 800f068:	b29b      	uxth	r3, r3
 800f06a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f06e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f072:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800f076:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800f07a:	f083 0320 	eor.w	r3, r3, #32
 800f07e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800f082:	687a      	ldr	r2, [r7, #4]
 800f084:	683b      	ldr	r3, [r7, #0]
 800f086:	781b      	ldrb	r3, [r3, #0]
 800f088:	009b      	lsls	r3, r3, #2
 800f08a:	441a      	add	r2, r3
 800f08c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800f090:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f094:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f098:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f09c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f0a0:	b29b      	uxth	r3, r3
 800f0a2:	8013      	strh	r3, [r2, #0]
 800f0a4:	e01d      	b.n	800f0e2 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f0a6:	687a      	ldr	r2, [r7, #4]
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	781b      	ldrb	r3, [r3, #0]
 800f0ac:	009b      	lsls	r3, r3, #2
 800f0ae:	4413      	add	r3, r2
 800f0b0:	881b      	ldrh	r3, [r3, #0]
 800f0b2:	b29b      	uxth	r3, r3
 800f0b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f0b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f0bc:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800f0c0:	687a      	ldr	r2, [r7, #4]
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	781b      	ldrb	r3, [r3, #0]
 800f0c6:	009b      	lsls	r3, r3, #2
 800f0c8:	441a      	add	r2, r3
 800f0ca:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800f0ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f0d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f0d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f0da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f0de:	b29b      	uxth	r3, r3
 800f0e0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f0e2:	687a      	ldr	r2, [r7, #4]
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	781b      	ldrb	r3, [r3, #0]
 800f0e8:	009b      	lsls	r3, r3, #2
 800f0ea:	4413      	add	r3, r2
 800f0ec:	881b      	ldrh	r3, [r3, #0]
 800f0ee:	b29b      	uxth	r3, r3
 800f0f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f0f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f0f8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800f0fc:	687a      	ldr	r2, [r7, #4]
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	781b      	ldrb	r3, [r3, #0]
 800f102:	009b      	lsls	r3, r3, #2
 800f104:	441a      	add	r2, r3
 800f106:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800f10a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f10e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f112:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f11a:	b29b      	uxth	r3, r3
 800f11c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800f11e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800f122:	4618      	mov	r0, r3
 800f124:	379c      	adds	r7, #156	@ 0x9c
 800f126:	46bd      	mov	sp, r7
 800f128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12c:	4770      	bx	lr
 800f12e:	bf00      	nop

0800f130 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f130:	b480      	push	{r7}
 800f132:	b08d      	sub	sp, #52	@ 0x34
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
 800f138:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	7b1b      	ldrb	r3, [r3, #12]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	f040 808e 	bne.w	800f260 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	785b      	ldrb	r3, [r3, #1]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d044      	beq.n	800f1d6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f14c:	687a      	ldr	r2, [r7, #4]
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	781b      	ldrb	r3, [r3, #0]
 800f152:	009b      	lsls	r3, r3, #2
 800f154:	4413      	add	r3, r2
 800f156:	881b      	ldrh	r3, [r3, #0]
 800f158:	81bb      	strh	r3, [r7, #12]
 800f15a:	89bb      	ldrh	r3, [r7, #12]
 800f15c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f160:	2b00      	cmp	r3, #0
 800f162:	d01b      	beq.n	800f19c <USB_DeactivateEndpoint+0x6c>
 800f164:	687a      	ldr	r2, [r7, #4]
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	781b      	ldrb	r3, [r3, #0]
 800f16a:	009b      	lsls	r3, r3, #2
 800f16c:	4413      	add	r3, r2
 800f16e:	881b      	ldrh	r3, [r3, #0]
 800f170:	b29b      	uxth	r3, r3
 800f172:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f17a:	817b      	strh	r3, [r7, #10]
 800f17c:	687a      	ldr	r2, [r7, #4]
 800f17e:	683b      	ldr	r3, [r7, #0]
 800f180:	781b      	ldrb	r3, [r3, #0]
 800f182:	009b      	lsls	r3, r3, #2
 800f184:	441a      	add	r2, r3
 800f186:	897b      	ldrh	r3, [r7, #10]
 800f188:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f18c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f190:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f194:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f198:	b29b      	uxth	r3, r3
 800f19a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f19c:	687a      	ldr	r2, [r7, #4]
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	781b      	ldrb	r3, [r3, #0]
 800f1a2:	009b      	lsls	r3, r3, #2
 800f1a4:	4413      	add	r3, r2
 800f1a6:	881b      	ldrh	r3, [r3, #0]
 800f1a8:	b29b      	uxth	r3, r3
 800f1aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f1ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f1b2:	813b      	strh	r3, [r7, #8]
 800f1b4:	687a      	ldr	r2, [r7, #4]
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	781b      	ldrb	r3, [r3, #0]
 800f1ba:	009b      	lsls	r3, r3, #2
 800f1bc:	441a      	add	r2, r3
 800f1be:	893b      	ldrh	r3, [r7, #8]
 800f1c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f1c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f1c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f1cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f1d0:	b29b      	uxth	r3, r3
 800f1d2:	8013      	strh	r3, [r2, #0]
 800f1d4:	e192      	b.n	800f4fc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f1d6:	687a      	ldr	r2, [r7, #4]
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	781b      	ldrb	r3, [r3, #0]
 800f1dc:	009b      	lsls	r3, r3, #2
 800f1de:	4413      	add	r3, r2
 800f1e0:	881b      	ldrh	r3, [r3, #0]
 800f1e2:	827b      	strh	r3, [r7, #18]
 800f1e4:	8a7b      	ldrh	r3, [r7, #18]
 800f1e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d01b      	beq.n	800f226 <USB_DeactivateEndpoint+0xf6>
 800f1ee:	687a      	ldr	r2, [r7, #4]
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	781b      	ldrb	r3, [r3, #0]
 800f1f4:	009b      	lsls	r3, r3, #2
 800f1f6:	4413      	add	r3, r2
 800f1f8:	881b      	ldrh	r3, [r3, #0]
 800f1fa:	b29b      	uxth	r3, r3
 800f1fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f200:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f204:	823b      	strh	r3, [r7, #16]
 800f206:	687a      	ldr	r2, [r7, #4]
 800f208:	683b      	ldr	r3, [r7, #0]
 800f20a:	781b      	ldrb	r3, [r3, #0]
 800f20c:	009b      	lsls	r3, r3, #2
 800f20e:	441a      	add	r2, r3
 800f210:	8a3b      	ldrh	r3, [r7, #16]
 800f212:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f216:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f21a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f21e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f222:	b29b      	uxth	r3, r3
 800f224:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f226:	687a      	ldr	r2, [r7, #4]
 800f228:	683b      	ldr	r3, [r7, #0]
 800f22a:	781b      	ldrb	r3, [r3, #0]
 800f22c:	009b      	lsls	r3, r3, #2
 800f22e:	4413      	add	r3, r2
 800f230:	881b      	ldrh	r3, [r3, #0]
 800f232:	b29b      	uxth	r3, r3
 800f234:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f238:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f23c:	81fb      	strh	r3, [r7, #14]
 800f23e:	687a      	ldr	r2, [r7, #4]
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	781b      	ldrb	r3, [r3, #0]
 800f244:	009b      	lsls	r3, r3, #2
 800f246:	441a      	add	r2, r3
 800f248:	89fb      	ldrh	r3, [r7, #14]
 800f24a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f24e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f252:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f256:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f25a:	b29b      	uxth	r3, r3
 800f25c:	8013      	strh	r3, [r2, #0]
 800f25e:	e14d      	b.n	800f4fc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	785b      	ldrb	r3, [r3, #1]
 800f264:	2b00      	cmp	r3, #0
 800f266:	f040 80a5 	bne.w	800f3b4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f26a:	687a      	ldr	r2, [r7, #4]
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	781b      	ldrb	r3, [r3, #0]
 800f270:	009b      	lsls	r3, r3, #2
 800f272:	4413      	add	r3, r2
 800f274:	881b      	ldrh	r3, [r3, #0]
 800f276:	843b      	strh	r3, [r7, #32]
 800f278:	8c3b      	ldrh	r3, [r7, #32]
 800f27a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d01b      	beq.n	800f2ba <USB_DeactivateEndpoint+0x18a>
 800f282:	687a      	ldr	r2, [r7, #4]
 800f284:	683b      	ldr	r3, [r7, #0]
 800f286:	781b      	ldrb	r3, [r3, #0]
 800f288:	009b      	lsls	r3, r3, #2
 800f28a:	4413      	add	r3, r2
 800f28c:	881b      	ldrh	r3, [r3, #0]
 800f28e:	b29b      	uxth	r3, r3
 800f290:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f294:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f298:	83fb      	strh	r3, [r7, #30]
 800f29a:	687a      	ldr	r2, [r7, #4]
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	781b      	ldrb	r3, [r3, #0]
 800f2a0:	009b      	lsls	r3, r3, #2
 800f2a2:	441a      	add	r2, r3
 800f2a4:	8bfb      	ldrh	r3, [r7, #30]
 800f2a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f2aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f2ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f2b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f2b6:	b29b      	uxth	r3, r3
 800f2b8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f2ba:	687a      	ldr	r2, [r7, #4]
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	781b      	ldrb	r3, [r3, #0]
 800f2c0:	009b      	lsls	r3, r3, #2
 800f2c2:	4413      	add	r3, r2
 800f2c4:	881b      	ldrh	r3, [r3, #0]
 800f2c6:	83bb      	strh	r3, [r7, #28]
 800f2c8:	8bbb      	ldrh	r3, [r7, #28]
 800f2ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d01b      	beq.n	800f30a <USB_DeactivateEndpoint+0x1da>
 800f2d2:	687a      	ldr	r2, [r7, #4]
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	781b      	ldrb	r3, [r3, #0]
 800f2d8:	009b      	lsls	r3, r3, #2
 800f2da:	4413      	add	r3, r2
 800f2dc:	881b      	ldrh	r3, [r3, #0]
 800f2de:	b29b      	uxth	r3, r3
 800f2e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f2e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f2e8:	837b      	strh	r3, [r7, #26]
 800f2ea:	687a      	ldr	r2, [r7, #4]
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	781b      	ldrb	r3, [r3, #0]
 800f2f0:	009b      	lsls	r3, r3, #2
 800f2f2:	441a      	add	r2, r3
 800f2f4:	8b7b      	ldrh	r3, [r7, #26]
 800f2f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f2fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f2fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f302:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f306:	b29b      	uxth	r3, r3
 800f308:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800f30a:	687a      	ldr	r2, [r7, #4]
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	781b      	ldrb	r3, [r3, #0]
 800f310:	009b      	lsls	r3, r3, #2
 800f312:	4413      	add	r3, r2
 800f314:	881b      	ldrh	r3, [r3, #0]
 800f316:	b29b      	uxth	r3, r3
 800f318:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f31c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f320:	833b      	strh	r3, [r7, #24]
 800f322:	687a      	ldr	r2, [r7, #4]
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	781b      	ldrb	r3, [r3, #0]
 800f328:	009b      	lsls	r3, r3, #2
 800f32a:	441a      	add	r2, r3
 800f32c:	8b3b      	ldrh	r3, [r7, #24]
 800f32e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f332:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f336:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f33a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f33e:	b29b      	uxth	r3, r3
 800f340:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f342:	687a      	ldr	r2, [r7, #4]
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	781b      	ldrb	r3, [r3, #0]
 800f348:	009b      	lsls	r3, r3, #2
 800f34a:	4413      	add	r3, r2
 800f34c:	881b      	ldrh	r3, [r3, #0]
 800f34e:	b29b      	uxth	r3, r3
 800f350:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f354:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f358:	82fb      	strh	r3, [r7, #22]
 800f35a:	687a      	ldr	r2, [r7, #4]
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	781b      	ldrb	r3, [r3, #0]
 800f360:	009b      	lsls	r3, r3, #2
 800f362:	441a      	add	r2, r3
 800f364:	8afb      	ldrh	r3, [r7, #22]
 800f366:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f36a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f36e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f372:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f376:	b29b      	uxth	r3, r3
 800f378:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f37a:	687a      	ldr	r2, [r7, #4]
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	781b      	ldrb	r3, [r3, #0]
 800f380:	009b      	lsls	r3, r3, #2
 800f382:	4413      	add	r3, r2
 800f384:	881b      	ldrh	r3, [r3, #0]
 800f386:	b29b      	uxth	r3, r3
 800f388:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f38c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f390:	82bb      	strh	r3, [r7, #20]
 800f392:	687a      	ldr	r2, [r7, #4]
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	781b      	ldrb	r3, [r3, #0]
 800f398:	009b      	lsls	r3, r3, #2
 800f39a:	441a      	add	r2, r3
 800f39c:	8abb      	ldrh	r3, [r7, #20]
 800f39e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f3a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f3a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f3aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f3ae:	b29b      	uxth	r3, r3
 800f3b0:	8013      	strh	r3, [r2, #0]
 800f3b2:	e0a3      	b.n	800f4fc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f3b4:	687a      	ldr	r2, [r7, #4]
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	781b      	ldrb	r3, [r3, #0]
 800f3ba:	009b      	lsls	r3, r3, #2
 800f3bc:	4413      	add	r3, r2
 800f3be:	881b      	ldrh	r3, [r3, #0]
 800f3c0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800f3c2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f3c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d01b      	beq.n	800f404 <USB_DeactivateEndpoint+0x2d4>
 800f3cc:	687a      	ldr	r2, [r7, #4]
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	781b      	ldrb	r3, [r3, #0]
 800f3d2:	009b      	lsls	r3, r3, #2
 800f3d4:	4413      	add	r3, r2
 800f3d6:	881b      	ldrh	r3, [r3, #0]
 800f3d8:	b29b      	uxth	r3, r3
 800f3da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f3de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f3e2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800f3e4:	687a      	ldr	r2, [r7, #4]
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	781b      	ldrb	r3, [r3, #0]
 800f3ea:	009b      	lsls	r3, r3, #2
 800f3ec:	441a      	add	r2, r3
 800f3ee:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800f3f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f3f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f3f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f3fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f400:	b29b      	uxth	r3, r3
 800f402:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f404:	687a      	ldr	r2, [r7, #4]
 800f406:	683b      	ldr	r3, [r7, #0]
 800f408:	781b      	ldrb	r3, [r3, #0]
 800f40a:	009b      	lsls	r3, r3, #2
 800f40c:	4413      	add	r3, r2
 800f40e:	881b      	ldrh	r3, [r3, #0]
 800f410:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800f412:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d01b      	beq.n	800f454 <USB_DeactivateEndpoint+0x324>
 800f41c:	687a      	ldr	r2, [r7, #4]
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	781b      	ldrb	r3, [r3, #0]
 800f422:	009b      	lsls	r3, r3, #2
 800f424:	4413      	add	r3, r2
 800f426:	881b      	ldrh	r3, [r3, #0]
 800f428:	b29b      	uxth	r3, r3
 800f42a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f42e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f432:	853b      	strh	r3, [r7, #40]	@ 0x28
 800f434:	687a      	ldr	r2, [r7, #4]
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	781b      	ldrb	r3, [r3, #0]
 800f43a:	009b      	lsls	r3, r3, #2
 800f43c:	441a      	add	r2, r3
 800f43e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f440:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f444:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f448:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f44c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f450:	b29b      	uxth	r3, r3
 800f452:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800f454:	687a      	ldr	r2, [r7, #4]
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	781b      	ldrb	r3, [r3, #0]
 800f45a:	009b      	lsls	r3, r3, #2
 800f45c:	4413      	add	r3, r2
 800f45e:	881b      	ldrh	r3, [r3, #0]
 800f460:	b29b      	uxth	r3, r3
 800f462:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f466:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f46a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f46c:	687a      	ldr	r2, [r7, #4]
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	781b      	ldrb	r3, [r3, #0]
 800f472:	009b      	lsls	r3, r3, #2
 800f474:	441a      	add	r2, r3
 800f476:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f478:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f47c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f480:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f484:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f488:	b29b      	uxth	r3, r3
 800f48a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f48c:	687a      	ldr	r2, [r7, #4]
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	781b      	ldrb	r3, [r3, #0]
 800f492:	009b      	lsls	r3, r3, #2
 800f494:	4413      	add	r3, r2
 800f496:	881b      	ldrh	r3, [r3, #0]
 800f498:	b29b      	uxth	r3, r3
 800f49a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f49e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f4a2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800f4a4:	687a      	ldr	r2, [r7, #4]
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	781b      	ldrb	r3, [r3, #0]
 800f4aa:	009b      	lsls	r3, r3, #2
 800f4ac:	441a      	add	r2, r3
 800f4ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f4b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f4b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f4b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f4bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f4c0:	b29b      	uxth	r3, r3
 800f4c2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f4c4:	687a      	ldr	r2, [r7, #4]
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	781b      	ldrb	r3, [r3, #0]
 800f4ca:	009b      	lsls	r3, r3, #2
 800f4cc:	4413      	add	r3, r2
 800f4ce:	881b      	ldrh	r3, [r3, #0]
 800f4d0:	b29b      	uxth	r3, r3
 800f4d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f4d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f4da:	847b      	strh	r3, [r7, #34]	@ 0x22
 800f4dc:	687a      	ldr	r2, [r7, #4]
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	781b      	ldrb	r3, [r3, #0]
 800f4e2:	009b      	lsls	r3, r3, #2
 800f4e4:	441a      	add	r2, r3
 800f4e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f4e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f4ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f4f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f4f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f4f8:	b29b      	uxth	r3, r3
 800f4fa:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800f4fc:	2300      	movs	r3, #0
}
 800f4fe:	4618      	mov	r0, r3
 800f500:	3734      	adds	r7, #52	@ 0x34
 800f502:	46bd      	mov	sp, r7
 800f504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f508:	4770      	bx	lr

0800f50a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f50a:	b580      	push	{r7, lr}
 800f50c:	b0ac      	sub	sp, #176	@ 0xb0
 800f50e:	af00      	add	r7, sp, #0
 800f510:	6078      	str	r0, [r7, #4]
 800f512:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f514:	683b      	ldr	r3, [r7, #0]
 800f516:	785b      	ldrb	r3, [r3, #1]
 800f518:	2b01      	cmp	r3, #1
 800f51a:	f040 84ca 	bne.w	800feb2 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	699a      	ldr	r2, [r3, #24]
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	691b      	ldr	r3, [r3, #16]
 800f526:	429a      	cmp	r2, r3
 800f528:	d904      	bls.n	800f534 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800f52a:	683b      	ldr	r3, [r7, #0]
 800f52c:	691b      	ldr	r3, [r3, #16]
 800f52e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f532:	e003      	b.n	800f53c <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800f534:	683b      	ldr	r3, [r7, #0]
 800f536:	699b      	ldr	r3, [r3, #24]
 800f538:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800f53c:	683b      	ldr	r3, [r7, #0]
 800f53e:	7b1b      	ldrb	r3, [r3, #12]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d122      	bne.n	800f58a <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	6959      	ldr	r1, [r3, #20]
 800f548:	683b      	ldr	r3, [r7, #0]
 800f54a:	88da      	ldrh	r2, [r3, #6]
 800f54c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f550:	b29b      	uxth	r3, r3
 800f552:	6878      	ldr	r0, [r7, #4]
 800f554:	f000 febd 	bl	80102d2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	613b      	str	r3, [r7, #16]
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f562:	b29b      	uxth	r3, r3
 800f564:	461a      	mov	r2, r3
 800f566:	693b      	ldr	r3, [r7, #16]
 800f568:	4413      	add	r3, r2
 800f56a:	613b      	str	r3, [r7, #16]
 800f56c:	683b      	ldr	r3, [r7, #0]
 800f56e:	781b      	ldrb	r3, [r3, #0]
 800f570:	00da      	lsls	r2, r3, #3
 800f572:	693b      	ldr	r3, [r7, #16]
 800f574:	4413      	add	r3, r2
 800f576:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f57a:	60fb      	str	r3, [r7, #12]
 800f57c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f580:	b29a      	uxth	r2, r3
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	801a      	strh	r2, [r3, #0]
 800f586:	f000 bc6f 	b.w	800fe68 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	78db      	ldrb	r3, [r3, #3]
 800f58e:	2b02      	cmp	r3, #2
 800f590:	f040 831e 	bne.w	800fbd0 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	6a1a      	ldr	r2, [r3, #32]
 800f598:	683b      	ldr	r3, [r7, #0]
 800f59a:	691b      	ldr	r3, [r3, #16]
 800f59c:	429a      	cmp	r2, r3
 800f59e:	f240 82cf 	bls.w	800fb40 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800f5a2:	687a      	ldr	r2, [r7, #4]
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	781b      	ldrb	r3, [r3, #0]
 800f5a8:	009b      	lsls	r3, r3, #2
 800f5aa:	4413      	add	r3, r2
 800f5ac:	881b      	ldrh	r3, [r3, #0]
 800f5ae:	b29b      	uxth	r3, r3
 800f5b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f5b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f5b8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800f5bc:	687a      	ldr	r2, [r7, #4]
 800f5be:	683b      	ldr	r3, [r7, #0]
 800f5c0:	781b      	ldrb	r3, [r3, #0]
 800f5c2:	009b      	lsls	r3, r3, #2
 800f5c4:	441a      	add	r2, r3
 800f5c6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800f5ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f5ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f5d2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800f5d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f5da:	b29b      	uxth	r3, r3
 800f5dc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	6a1a      	ldr	r2, [r3, #32]
 800f5e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f5e6:	1ad2      	subs	r2, r2, r3
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f5ec:	687a      	ldr	r2, [r7, #4]
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	781b      	ldrb	r3, [r3, #0]
 800f5f2:	009b      	lsls	r3, r3, #2
 800f5f4:	4413      	add	r3, r2
 800f5f6:	881b      	ldrh	r3, [r3, #0]
 800f5f8:	b29b      	uxth	r3, r3
 800f5fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	f000 814f 	beq.w	800f8a2 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	633b      	str	r3, [r7, #48]	@ 0x30
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	785b      	ldrb	r3, [r3, #1]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d16b      	bne.n	800f6e8 <USB_EPStartXfer+0x1de>
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f61a:	b29b      	uxth	r3, r3
 800f61c:	461a      	mov	r2, r3
 800f61e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f620:	4413      	add	r3, r2
 800f622:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	781b      	ldrb	r3, [r3, #0]
 800f628:	00da      	lsls	r2, r3, #3
 800f62a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f62c:	4413      	add	r3, r2
 800f62e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f632:	627b      	str	r3, [r7, #36]	@ 0x24
 800f634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f636:	881b      	ldrh	r3, [r3, #0]
 800f638:	b29b      	uxth	r3, r3
 800f63a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f63e:	b29a      	uxth	r2, r3
 800f640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f642:	801a      	strh	r2, [r3, #0]
 800f644:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d10a      	bne.n	800f662 <USB_EPStartXfer+0x158>
 800f64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f64e:	881b      	ldrh	r3, [r3, #0]
 800f650:	b29b      	uxth	r3, r3
 800f652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f65a:	b29a      	uxth	r2, r3
 800f65c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f65e:	801a      	strh	r2, [r3, #0]
 800f660:	e05b      	b.n	800f71a <USB_EPStartXfer+0x210>
 800f662:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f666:	2b3e      	cmp	r3, #62	@ 0x3e
 800f668:	d81c      	bhi.n	800f6a4 <USB_EPStartXfer+0x19a>
 800f66a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f66e:	085b      	lsrs	r3, r3, #1
 800f670:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800f674:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f678:	f003 0301 	and.w	r3, r3, #1
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d004      	beq.n	800f68a <USB_EPStartXfer+0x180>
 800f680:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f684:	3301      	adds	r3, #1
 800f686:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800f68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f68c:	881b      	ldrh	r3, [r3, #0]
 800f68e:	b29a      	uxth	r2, r3
 800f690:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f694:	b29b      	uxth	r3, r3
 800f696:	029b      	lsls	r3, r3, #10
 800f698:	b29b      	uxth	r3, r3
 800f69a:	4313      	orrs	r3, r2
 800f69c:	b29a      	uxth	r2, r3
 800f69e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6a0:	801a      	strh	r2, [r3, #0]
 800f6a2:	e03a      	b.n	800f71a <USB_EPStartXfer+0x210>
 800f6a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f6a8:	095b      	lsrs	r3, r3, #5
 800f6aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800f6ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f6b2:	f003 031f 	and.w	r3, r3, #31
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d104      	bne.n	800f6c4 <USB_EPStartXfer+0x1ba>
 800f6ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f6be:	3b01      	subs	r3, #1
 800f6c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800f6c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6c6:	881b      	ldrh	r3, [r3, #0]
 800f6c8:	b29a      	uxth	r2, r3
 800f6ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f6ce:	b29b      	uxth	r3, r3
 800f6d0:	029b      	lsls	r3, r3, #10
 800f6d2:	b29b      	uxth	r3, r3
 800f6d4:	4313      	orrs	r3, r2
 800f6d6:	b29b      	uxth	r3, r3
 800f6d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f6dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f6e0:	b29a      	uxth	r2, r3
 800f6e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6e4:	801a      	strh	r2, [r3, #0]
 800f6e6:	e018      	b.n	800f71a <USB_EPStartXfer+0x210>
 800f6e8:	683b      	ldr	r3, [r7, #0]
 800f6ea:	785b      	ldrb	r3, [r3, #1]
 800f6ec:	2b01      	cmp	r3, #1
 800f6ee:	d114      	bne.n	800f71a <USB_EPStartXfer+0x210>
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f6f6:	b29b      	uxth	r3, r3
 800f6f8:	461a      	mov	r2, r3
 800f6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6fc:	4413      	add	r3, r2
 800f6fe:	633b      	str	r3, [r7, #48]	@ 0x30
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	781b      	ldrb	r3, [r3, #0]
 800f704:	00da      	lsls	r2, r3, #3
 800f706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f708:	4413      	add	r3, r2
 800f70a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f70e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f710:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f714:	b29a      	uxth	r2, r3
 800f716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f718:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800f71a:	683b      	ldr	r3, [r7, #0]
 800f71c:	895b      	ldrh	r3, [r3, #10]
 800f71e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f722:	683b      	ldr	r3, [r7, #0]
 800f724:	6959      	ldr	r1, [r3, #20]
 800f726:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f72a:	b29b      	uxth	r3, r3
 800f72c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800f730:	6878      	ldr	r0, [r7, #4]
 800f732:	f000 fdce 	bl	80102d2 <USB_WritePMA>
            ep->xfer_buff += len;
 800f736:	683b      	ldr	r3, [r7, #0]
 800f738:	695a      	ldr	r2, [r3, #20]
 800f73a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f73e:	441a      	add	r2, r3
 800f740:	683b      	ldr	r3, [r7, #0]
 800f742:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	6a1a      	ldr	r2, [r3, #32]
 800f748:	683b      	ldr	r3, [r7, #0]
 800f74a:	691b      	ldr	r3, [r3, #16]
 800f74c:	429a      	cmp	r2, r3
 800f74e:	d907      	bls.n	800f760 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	6a1a      	ldr	r2, [r3, #32]
 800f754:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f758:	1ad2      	subs	r2, r2, r3
 800f75a:	683b      	ldr	r3, [r7, #0]
 800f75c:	621a      	str	r2, [r3, #32]
 800f75e:	e006      	b.n	800f76e <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800f760:	683b      	ldr	r3, [r7, #0]
 800f762:	6a1b      	ldr	r3, [r3, #32]
 800f764:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	2200      	movs	r2, #0
 800f76c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	785b      	ldrb	r3, [r3, #1]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d16b      	bne.n	800f84e <USB_EPStartXfer+0x344>
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	61bb      	str	r3, [r7, #24]
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f780:	b29b      	uxth	r3, r3
 800f782:	461a      	mov	r2, r3
 800f784:	69bb      	ldr	r3, [r7, #24]
 800f786:	4413      	add	r3, r2
 800f788:	61bb      	str	r3, [r7, #24]
 800f78a:	683b      	ldr	r3, [r7, #0]
 800f78c:	781b      	ldrb	r3, [r3, #0]
 800f78e:	00da      	lsls	r2, r3, #3
 800f790:	69bb      	ldr	r3, [r7, #24]
 800f792:	4413      	add	r3, r2
 800f794:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f798:	617b      	str	r3, [r7, #20]
 800f79a:	697b      	ldr	r3, [r7, #20]
 800f79c:	881b      	ldrh	r3, [r3, #0]
 800f79e:	b29b      	uxth	r3, r3
 800f7a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f7a4:	b29a      	uxth	r2, r3
 800f7a6:	697b      	ldr	r3, [r7, #20]
 800f7a8:	801a      	strh	r2, [r3, #0]
 800f7aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d10a      	bne.n	800f7c8 <USB_EPStartXfer+0x2be>
 800f7b2:	697b      	ldr	r3, [r7, #20]
 800f7b4:	881b      	ldrh	r3, [r3, #0]
 800f7b6:	b29b      	uxth	r3, r3
 800f7b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f7bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f7c0:	b29a      	uxth	r2, r3
 800f7c2:	697b      	ldr	r3, [r7, #20]
 800f7c4:	801a      	strh	r2, [r3, #0]
 800f7c6:	e05d      	b.n	800f884 <USB_EPStartXfer+0x37a>
 800f7c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f7cc:	2b3e      	cmp	r3, #62	@ 0x3e
 800f7ce:	d81c      	bhi.n	800f80a <USB_EPStartXfer+0x300>
 800f7d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f7d4:	085b      	lsrs	r3, r3, #1
 800f7d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800f7da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f7de:	f003 0301 	and.w	r3, r3, #1
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d004      	beq.n	800f7f0 <USB_EPStartXfer+0x2e6>
 800f7e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f7ea:	3301      	adds	r3, #1
 800f7ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800f7f0:	697b      	ldr	r3, [r7, #20]
 800f7f2:	881b      	ldrh	r3, [r3, #0]
 800f7f4:	b29a      	uxth	r2, r3
 800f7f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f7fa:	b29b      	uxth	r3, r3
 800f7fc:	029b      	lsls	r3, r3, #10
 800f7fe:	b29b      	uxth	r3, r3
 800f800:	4313      	orrs	r3, r2
 800f802:	b29a      	uxth	r2, r3
 800f804:	697b      	ldr	r3, [r7, #20]
 800f806:	801a      	strh	r2, [r3, #0]
 800f808:	e03c      	b.n	800f884 <USB_EPStartXfer+0x37a>
 800f80a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f80e:	095b      	lsrs	r3, r3, #5
 800f810:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800f814:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f818:	f003 031f 	and.w	r3, r3, #31
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d104      	bne.n	800f82a <USB_EPStartXfer+0x320>
 800f820:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f824:	3b01      	subs	r3, #1
 800f826:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800f82a:	697b      	ldr	r3, [r7, #20]
 800f82c:	881b      	ldrh	r3, [r3, #0]
 800f82e:	b29a      	uxth	r2, r3
 800f830:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f834:	b29b      	uxth	r3, r3
 800f836:	029b      	lsls	r3, r3, #10
 800f838:	b29b      	uxth	r3, r3
 800f83a:	4313      	orrs	r3, r2
 800f83c:	b29b      	uxth	r3, r3
 800f83e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f842:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f846:	b29a      	uxth	r2, r3
 800f848:	697b      	ldr	r3, [r7, #20]
 800f84a:	801a      	strh	r2, [r3, #0]
 800f84c:	e01a      	b.n	800f884 <USB_EPStartXfer+0x37a>
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	785b      	ldrb	r3, [r3, #1]
 800f852:	2b01      	cmp	r3, #1
 800f854:	d116      	bne.n	800f884 <USB_EPStartXfer+0x37a>
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	623b      	str	r3, [r7, #32]
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f860:	b29b      	uxth	r3, r3
 800f862:	461a      	mov	r2, r3
 800f864:	6a3b      	ldr	r3, [r7, #32]
 800f866:	4413      	add	r3, r2
 800f868:	623b      	str	r3, [r7, #32]
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	781b      	ldrb	r3, [r3, #0]
 800f86e:	00da      	lsls	r2, r3, #3
 800f870:	6a3b      	ldr	r3, [r7, #32]
 800f872:	4413      	add	r3, r2
 800f874:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f878:	61fb      	str	r3, [r7, #28]
 800f87a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f87e:	b29a      	uxth	r2, r3
 800f880:	69fb      	ldr	r3, [r7, #28]
 800f882:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800f884:	683b      	ldr	r3, [r7, #0]
 800f886:	891b      	ldrh	r3, [r3, #8]
 800f888:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	6959      	ldr	r1, [r3, #20]
 800f890:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f894:	b29b      	uxth	r3, r3
 800f896:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800f89a:	6878      	ldr	r0, [r7, #4]
 800f89c:	f000 fd19 	bl	80102d2 <USB_WritePMA>
 800f8a0:	e2e2      	b.n	800fe68 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	785b      	ldrb	r3, [r3, #1]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d16b      	bne.n	800f982 <USB_EPStartXfer+0x478>
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f8b4:	b29b      	uxth	r3, r3
 800f8b6:	461a      	mov	r2, r3
 800f8b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f8ba:	4413      	add	r3, r2
 800f8bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	781b      	ldrb	r3, [r3, #0]
 800f8c2:	00da      	lsls	r2, r3, #3
 800f8c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f8c6:	4413      	add	r3, r2
 800f8c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f8cc:	647b      	str	r3, [r7, #68]	@ 0x44
 800f8ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f8d0:	881b      	ldrh	r3, [r3, #0]
 800f8d2:	b29b      	uxth	r3, r3
 800f8d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f8d8:	b29a      	uxth	r2, r3
 800f8da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f8dc:	801a      	strh	r2, [r3, #0]
 800f8de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d10a      	bne.n	800f8fc <USB_EPStartXfer+0x3f2>
 800f8e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f8e8:	881b      	ldrh	r3, [r3, #0]
 800f8ea:	b29b      	uxth	r3, r3
 800f8ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f8f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f8f4:	b29a      	uxth	r2, r3
 800f8f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f8f8:	801a      	strh	r2, [r3, #0]
 800f8fa:	e05d      	b.n	800f9b8 <USB_EPStartXfer+0x4ae>
 800f8fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f900:	2b3e      	cmp	r3, #62	@ 0x3e
 800f902:	d81c      	bhi.n	800f93e <USB_EPStartXfer+0x434>
 800f904:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f908:	085b      	lsrs	r3, r3, #1
 800f90a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800f90e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f912:	f003 0301 	and.w	r3, r3, #1
 800f916:	2b00      	cmp	r3, #0
 800f918:	d004      	beq.n	800f924 <USB_EPStartXfer+0x41a>
 800f91a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f91e:	3301      	adds	r3, #1
 800f920:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800f924:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f926:	881b      	ldrh	r3, [r3, #0]
 800f928:	b29a      	uxth	r2, r3
 800f92a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f92e:	b29b      	uxth	r3, r3
 800f930:	029b      	lsls	r3, r3, #10
 800f932:	b29b      	uxth	r3, r3
 800f934:	4313      	orrs	r3, r2
 800f936:	b29a      	uxth	r2, r3
 800f938:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f93a:	801a      	strh	r2, [r3, #0]
 800f93c:	e03c      	b.n	800f9b8 <USB_EPStartXfer+0x4ae>
 800f93e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f942:	095b      	lsrs	r3, r3, #5
 800f944:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800f948:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f94c:	f003 031f 	and.w	r3, r3, #31
 800f950:	2b00      	cmp	r3, #0
 800f952:	d104      	bne.n	800f95e <USB_EPStartXfer+0x454>
 800f954:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f958:	3b01      	subs	r3, #1
 800f95a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800f95e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f960:	881b      	ldrh	r3, [r3, #0]
 800f962:	b29a      	uxth	r2, r3
 800f964:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f968:	b29b      	uxth	r3, r3
 800f96a:	029b      	lsls	r3, r3, #10
 800f96c:	b29b      	uxth	r3, r3
 800f96e:	4313      	orrs	r3, r2
 800f970:	b29b      	uxth	r3, r3
 800f972:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f976:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f97a:	b29a      	uxth	r2, r3
 800f97c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f97e:	801a      	strh	r2, [r3, #0]
 800f980:	e01a      	b.n	800f9b8 <USB_EPStartXfer+0x4ae>
 800f982:	683b      	ldr	r3, [r7, #0]
 800f984:	785b      	ldrb	r3, [r3, #1]
 800f986:	2b01      	cmp	r3, #1
 800f988:	d116      	bne.n	800f9b8 <USB_EPStartXfer+0x4ae>
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	653b      	str	r3, [r7, #80]	@ 0x50
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f994:	b29b      	uxth	r3, r3
 800f996:	461a      	mov	r2, r3
 800f998:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f99a:	4413      	add	r3, r2
 800f99c:	653b      	str	r3, [r7, #80]	@ 0x50
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	781b      	ldrb	r3, [r3, #0]
 800f9a2:	00da      	lsls	r2, r3, #3
 800f9a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f9a6:	4413      	add	r3, r2
 800f9a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f9ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f9ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f9b2:	b29a      	uxth	r2, r3
 800f9b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800f9b8:	683b      	ldr	r3, [r7, #0]
 800f9ba:	891b      	ldrh	r3, [r3, #8]
 800f9bc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f9c0:	683b      	ldr	r3, [r7, #0]
 800f9c2:	6959      	ldr	r1, [r3, #20]
 800f9c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f9c8:	b29b      	uxth	r3, r3
 800f9ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800f9ce:	6878      	ldr	r0, [r7, #4]
 800f9d0:	f000 fc7f 	bl	80102d2 <USB_WritePMA>
            ep->xfer_buff += len;
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	695a      	ldr	r2, [r3, #20]
 800f9d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f9dc:	441a      	add	r2, r3
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800f9e2:	683b      	ldr	r3, [r7, #0]
 800f9e4:	6a1a      	ldr	r2, [r3, #32]
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	691b      	ldr	r3, [r3, #16]
 800f9ea:	429a      	cmp	r2, r3
 800f9ec:	d907      	bls.n	800f9fe <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	6a1a      	ldr	r2, [r3, #32]
 800f9f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f9f6:	1ad2      	subs	r2, r2, r3
 800f9f8:	683b      	ldr	r3, [r7, #0]
 800f9fa:	621a      	str	r2, [r3, #32]
 800f9fc:	e006      	b.n	800fa0c <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	6a1b      	ldr	r3, [r3, #32]
 800fa02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800fa06:	683b      	ldr	r3, [r7, #0]
 800fa08:	2200      	movs	r2, #0
 800fa0a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	643b      	str	r3, [r7, #64]	@ 0x40
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	785b      	ldrb	r3, [r3, #1]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d16b      	bne.n	800faf0 <USB_EPStartXfer+0x5e6>
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fa22:	b29b      	uxth	r3, r3
 800fa24:	461a      	mov	r2, r3
 800fa26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa28:	4413      	add	r3, r2
 800fa2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fa2c:	683b      	ldr	r3, [r7, #0]
 800fa2e:	781b      	ldrb	r3, [r3, #0]
 800fa30:	00da      	lsls	r2, r3, #3
 800fa32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa34:	4413      	add	r3, r2
 800fa36:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800fa3a:	637b      	str	r3, [r7, #52]	@ 0x34
 800fa3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa3e:	881b      	ldrh	r3, [r3, #0]
 800fa40:	b29b      	uxth	r3, r3
 800fa42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fa46:	b29a      	uxth	r2, r3
 800fa48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa4a:	801a      	strh	r2, [r3, #0]
 800fa4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d10a      	bne.n	800fa6a <USB_EPStartXfer+0x560>
 800fa54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa56:	881b      	ldrh	r3, [r3, #0]
 800fa58:	b29b      	uxth	r3, r3
 800fa5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fa5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fa62:	b29a      	uxth	r2, r3
 800fa64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa66:	801a      	strh	r2, [r3, #0]
 800fa68:	e05b      	b.n	800fb22 <USB_EPStartXfer+0x618>
 800fa6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fa6e:	2b3e      	cmp	r3, #62	@ 0x3e
 800fa70:	d81c      	bhi.n	800faac <USB_EPStartXfer+0x5a2>
 800fa72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fa76:	085b      	lsrs	r3, r3, #1
 800fa78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800fa7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fa80:	f003 0301 	and.w	r3, r3, #1
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d004      	beq.n	800fa92 <USB_EPStartXfer+0x588>
 800fa88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fa8c:	3301      	adds	r3, #1
 800fa8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800fa92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa94:	881b      	ldrh	r3, [r3, #0]
 800fa96:	b29a      	uxth	r2, r3
 800fa98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fa9c:	b29b      	uxth	r3, r3
 800fa9e:	029b      	lsls	r3, r3, #10
 800faa0:	b29b      	uxth	r3, r3
 800faa2:	4313      	orrs	r3, r2
 800faa4:	b29a      	uxth	r2, r3
 800faa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800faa8:	801a      	strh	r2, [r3, #0]
 800faaa:	e03a      	b.n	800fb22 <USB_EPStartXfer+0x618>
 800faac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fab0:	095b      	lsrs	r3, r3, #5
 800fab2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800fab6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800faba:	f003 031f 	and.w	r3, r3, #31
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d104      	bne.n	800facc <USB_EPStartXfer+0x5c2>
 800fac2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fac6:	3b01      	subs	r3, #1
 800fac8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800facc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800face:	881b      	ldrh	r3, [r3, #0]
 800fad0:	b29a      	uxth	r2, r3
 800fad2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fad6:	b29b      	uxth	r3, r3
 800fad8:	029b      	lsls	r3, r3, #10
 800fada:	b29b      	uxth	r3, r3
 800fadc:	4313      	orrs	r3, r2
 800fade:	b29b      	uxth	r3, r3
 800fae0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fae4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fae8:	b29a      	uxth	r2, r3
 800faea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800faec:	801a      	strh	r2, [r3, #0]
 800faee:	e018      	b.n	800fb22 <USB_EPStartXfer+0x618>
 800faf0:	683b      	ldr	r3, [r7, #0]
 800faf2:	785b      	ldrb	r3, [r3, #1]
 800faf4:	2b01      	cmp	r3, #1
 800faf6:	d114      	bne.n	800fb22 <USB_EPStartXfer+0x618>
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fafe:	b29b      	uxth	r3, r3
 800fb00:	461a      	mov	r2, r3
 800fb02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fb04:	4413      	add	r3, r2
 800fb06:	643b      	str	r3, [r7, #64]	@ 0x40
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	781b      	ldrb	r3, [r3, #0]
 800fb0c:	00da      	lsls	r2, r3, #3
 800fb0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fb10:	4413      	add	r3, r2
 800fb12:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800fb16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fb18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fb1c:	b29a      	uxth	r2, r3
 800fb1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb20:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	895b      	ldrh	r3, [r3, #10]
 800fb26:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fb2a:	683b      	ldr	r3, [r7, #0]
 800fb2c:	6959      	ldr	r1, [r3, #20]
 800fb2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fb32:	b29b      	uxth	r3, r3
 800fb34:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800fb38:	6878      	ldr	r0, [r7, #4]
 800fb3a:	f000 fbca 	bl	80102d2 <USB_WritePMA>
 800fb3e:	e193      	b.n	800fe68 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800fb40:	683b      	ldr	r3, [r7, #0]
 800fb42:	6a1b      	ldr	r3, [r3, #32]
 800fb44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800fb48:	687a      	ldr	r2, [r7, #4]
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	781b      	ldrb	r3, [r3, #0]
 800fb4e:	009b      	lsls	r3, r3, #2
 800fb50:	4413      	add	r3, r2
 800fb52:	881b      	ldrh	r3, [r3, #0]
 800fb54:	b29b      	uxth	r3, r3
 800fb56:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800fb5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fb5e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800fb62:	687a      	ldr	r2, [r7, #4]
 800fb64:	683b      	ldr	r3, [r7, #0]
 800fb66:	781b      	ldrb	r3, [r3, #0]
 800fb68:	009b      	lsls	r3, r3, #2
 800fb6a:	441a      	add	r2, r3
 800fb6c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800fb70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fb74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fb78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fb7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fb80:	b29b      	uxth	r3, r3
 800fb82:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fb8e:	b29b      	uxth	r3, r3
 800fb90:	461a      	mov	r2, r3
 800fb92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fb94:	4413      	add	r3, r2
 800fb96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	781b      	ldrb	r3, [r3, #0]
 800fb9c:	00da      	lsls	r2, r3, #3
 800fb9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fba0:	4413      	add	r3, r2
 800fba2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800fba6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fba8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fbac:	b29a      	uxth	r2, r3
 800fbae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fbb0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800fbb2:	683b      	ldr	r3, [r7, #0]
 800fbb4:	891b      	ldrh	r3, [r3, #8]
 800fbb6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fbba:	683b      	ldr	r3, [r7, #0]
 800fbbc:	6959      	ldr	r1, [r3, #20]
 800fbbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fbc2:	b29b      	uxth	r3, r3
 800fbc4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800fbc8:	6878      	ldr	r0, [r7, #4]
 800fbca:	f000 fb82 	bl	80102d2 <USB_WritePMA>
 800fbce:	e14b      	b.n	800fe68 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800fbd0:	683b      	ldr	r3, [r7, #0]
 800fbd2:	6a1a      	ldr	r2, [r3, #32]
 800fbd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fbd8:	1ad2      	subs	r2, r2, r3
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800fbde:	687a      	ldr	r2, [r7, #4]
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	781b      	ldrb	r3, [r3, #0]
 800fbe4:	009b      	lsls	r3, r3, #2
 800fbe6:	4413      	add	r3, r2
 800fbe8:	881b      	ldrh	r3, [r3, #0]
 800fbea:	b29b      	uxth	r3, r3
 800fbec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	f000 809a 	beq.w	800fd2a <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	673b      	str	r3, [r7, #112]	@ 0x70
 800fbfa:	683b      	ldr	r3, [r7, #0]
 800fbfc:	785b      	ldrb	r3, [r3, #1]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d16b      	bne.n	800fcda <USB_EPStartXfer+0x7d0>
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fc0c:	b29b      	uxth	r3, r3
 800fc0e:	461a      	mov	r2, r3
 800fc10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fc12:	4413      	add	r3, r2
 800fc14:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fc16:	683b      	ldr	r3, [r7, #0]
 800fc18:	781b      	ldrb	r3, [r3, #0]
 800fc1a:	00da      	lsls	r2, r3, #3
 800fc1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fc1e:	4413      	add	r3, r2
 800fc20:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800fc24:	667b      	str	r3, [r7, #100]	@ 0x64
 800fc26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fc28:	881b      	ldrh	r3, [r3, #0]
 800fc2a:	b29b      	uxth	r3, r3
 800fc2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fc30:	b29a      	uxth	r2, r3
 800fc32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fc34:	801a      	strh	r2, [r3, #0]
 800fc36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d10a      	bne.n	800fc54 <USB_EPStartXfer+0x74a>
 800fc3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fc40:	881b      	ldrh	r3, [r3, #0]
 800fc42:	b29b      	uxth	r3, r3
 800fc44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fc48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fc4c:	b29a      	uxth	r2, r3
 800fc4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fc50:	801a      	strh	r2, [r3, #0]
 800fc52:	e05b      	b.n	800fd0c <USB_EPStartXfer+0x802>
 800fc54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fc58:	2b3e      	cmp	r3, #62	@ 0x3e
 800fc5a:	d81c      	bhi.n	800fc96 <USB_EPStartXfer+0x78c>
 800fc5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fc60:	085b      	lsrs	r3, r3, #1
 800fc62:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800fc66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fc6a:	f003 0301 	and.w	r3, r3, #1
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d004      	beq.n	800fc7c <USB_EPStartXfer+0x772>
 800fc72:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fc76:	3301      	adds	r3, #1
 800fc78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800fc7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fc7e:	881b      	ldrh	r3, [r3, #0]
 800fc80:	b29a      	uxth	r2, r3
 800fc82:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fc86:	b29b      	uxth	r3, r3
 800fc88:	029b      	lsls	r3, r3, #10
 800fc8a:	b29b      	uxth	r3, r3
 800fc8c:	4313      	orrs	r3, r2
 800fc8e:	b29a      	uxth	r2, r3
 800fc90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fc92:	801a      	strh	r2, [r3, #0]
 800fc94:	e03a      	b.n	800fd0c <USB_EPStartXfer+0x802>
 800fc96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fc9a:	095b      	lsrs	r3, r3, #5
 800fc9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800fca0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fca4:	f003 031f 	and.w	r3, r3, #31
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d104      	bne.n	800fcb6 <USB_EPStartXfer+0x7ac>
 800fcac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fcb0:	3b01      	subs	r3, #1
 800fcb2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800fcb6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fcb8:	881b      	ldrh	r3, [r3, #0]
 800fcba:	b29a      	uxth	r2, r3
 800fcbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fcc0:	b29b      	uxth	r3, r3
 800fcc2:	029b      	lsls	r3, r3, #10
 800fcc4:	b29b      	uxth	r3, r3
 800fcc6:	4313      	orrs	r3, r2
 800fcc8:	b29b      	uxth	r3, r3
 800fcca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fcce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fcd2:	b29a      	uxth	r2, r3
 800fcd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fcd6:	801a      	strh	r2, [r3, #0]
 800fcd8:	e018      	b.n	800fd0c <USB_EPStartXfer+0x802>
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	785b      	ldrb	r3, [r3, #1]
 800fcde:	2b01      	cmp	r3, #1
 800fce0:	d114      	bne.n	800fd0c <USB_EPStartXfer+0x802>
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fce8:	b29b      	uxth	r3, r3
 800fcea:	461a      	mov	r2, r3
 800fcec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fcee:	4413      	add	r3, r2
 800fcf0:	673b      	str	r3, [r7, #112]	@ 0x70
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	781b      	ldrb	r3, [r3, #0]
 800fcf6:	00da      	lsls	r2, r3, #3
 800fcf8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fcfa:	4413      	add	r3, r2
 800fcfc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800fd00:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800fd02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fd06:	b29a      	uxth	r2, r3
 800fd08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fd0a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	895b      	ldrh	r3, [r3, #10]
 800fd10:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fd14:	683b      	ldr	r3, [r7, #0]
 800fd16:	6959      	ldr	r1, [r3, #20]
 800fd18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fd1c:	b29b      	uxth	r3, r3
 800fd1e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	f000 fad5 	bl	80102d2 <USB_WritePMA>
 800fd28:	e09e      	b.n	800fe68 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800fd2a:	683b      	ldr	r3, [r7, #0]
 800fd2c:	785b      	ldrb	r3, [r3, #1]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d16b      	bne.n	800fe0a <USB_EPStartXfer+0x900>
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fd3c:	b29b      	uxth	r3, r3
 800fd3e:	461a      	mov	r2, r3
 800fd40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fd42:	4413      	add	r3, r2
 800fd44:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800fd46:	683b      	ldr	r3, [r7, #0]
 800fd48:	781b      	ldrb	r3, [r3, #0]
 800fd4a:	00da      	lsls	r2, r3, #3
 800fd4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fd4e:	4413      	add	r3, r2
 800fd50:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800fd54:	67bb      	str	r3, [r7, #120]	@ 0x78
 800fd56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fd58:	881b      	ldrh	r3, [r3, #0]
 800fd5a:	b29b      	uxth	r3, r3
 800fd5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fd60:	b29a      	uxth	r2, r3
 800fd62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fd64:	801a      	strh	r2, [r3, #0]
 800fd66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d10a      	bne.n	800fd84 <USB_EPStartXfer+0x87a>
 800fd6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fd70:	881b      	ldrh	r3, [r3, #0]
 800fd72:	b29b      	uxth	r3, r3
 800fd74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fd78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fd7c:	b29a      	uxth	r2, r3
 800fd7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fd80:	801a      	strh	r2, [r3, #0]
 800fd82:	e063      	b.n	800fe4c <USB_EPStartXfer+0x942>
 800fd84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fd88:	2b3e      	cmp	r3, #62	@ 0x3e
 800fd8a:	d81c      	bhi.n	800fdc6 <USB_EPStartXfer+0x8bc>
 800fd8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fd90:	085b      	lsrs	r3, r3, #1
 800fd92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fd96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fd9a:	f003 0301 	and.w	r3, r3, #1
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d004      	beq.n	800fdac <USB_EPStartXfer+0x8a2>
 800fda2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fda6:	3301      	adds	r3, #1
 800fda8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fdac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fdae:	881b      	ldrh	r3, [r3, #0]
 800fdb0:	b29a      	uxth	r2, r3
 800fdb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fdb6:	b29b      	uxth	r3, r3
 800fdb8:	029b      	lsls	r3, r3, #10
 800fdba:	b29b      	uxth	r3, r3
 800fdbc:	4313      	orrs	r3, r2
 800fdbe:	b29a      	uxth	r2, r3
 800fdc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fdc2:	801a      	strh	r2, [r3, #0]
 800fdc4:	e042      	b.n	800fe4c <USB_EPStartXfer+0x942>
 800fdc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fdca:	095b      	lsrs	r3, r3, #5
 800fdcc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fdd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fdd4:	f003 031f 	and.w	r3, r3, #31
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d104      	bne.n	800fde6 <USB_EPStartXfer+0x8dc>
 800fddc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fde0:	3b01      	subs	r3, #1
 800fde2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fde6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fde8:	881b      	ldrh	r3, [r3, #0]
 800fdea:	b29a      	uxth	r2, r3
 800fdec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fdf0:	b29b      	uxth	r3, r3
 800fdf2:	029b      	lsls	r3, r3, #10
 800fdf4:	b29b      	uxth	r3, r3
 800fdf6:	4313      	orrs	r3, r2
 800fdf8:	b29b      	uxth	r3, r3
 800fdfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fdfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fe02:	b29a      	uxth	r2, r3
 800fe04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fe06:	801a      	strh	r2, [r3, #0]
 800fe08:	e020      	b.n	800fe4c <USB_EPStartXfer+0x942>
 800fe0a:	683b      	ldr	r3, [r7, #0]
 800fe0c:	785b      	ldrb	r3, [r3, #1]
 800fe0e:	2b01      	cmp	r3, #1
 800fe10:	d11c      	bne.n	800fe4c <USB_EPStartXfer+0x942>
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fe1e:	b29b      	uxth	r3, r3
 800fe20:	461a      	mov	r2, r3
 800fe22:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fe26:	4413      	add	r3, r2
 800fe28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	781b      	ldrb	r3, [r3, #0]
 800fe30:	00da      	lsls	r2, r3, #3
 800fe32:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fe36:	4413      	add	r3, r2
 800fe38:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800fe3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800fe40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fe44:	b29a      	uxth	r2, r3
 800fe46:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800fe4a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	891b      	ldrh	r3, [r3, #8]
 800fe50:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	6959      	ldr	r1, [r3, #20]
 800fe58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fe5c:	b29b      	uxth	r3, r3
 800fe5e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800fe62:	6878      	ldr	r0, [r7, #4]
 800fe64:	f000 fa35 	bl	80102d2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800fe68:	687a      	ldr	r2, [r7, #4]
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	781b      	ldrb	r3, [r3, #0]
 800fe6e:	009b      	lsls	r3, r3, #2
 800fe70:	4413      	add	r3, r2
 800fe72:	881b      	ldrh	r3, [r3, #0]
 800fe74:	b29b      	uxth	r3, r3
 800fe76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fe7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fe7e:	817b      	strh	r3, [r7, #10]
 800fe80:	897b      	ldrh	r3, [r7, #10]
 800fe82:	f083 0310 	eor.w	r3, r3, #16
 800fe86:	817b      	strh	r3, [r7, #10]
 800fe88:	897b      	ldrh	r3, [r7, #10]
 800fe8a:	f083 0320 	eor.w	r3, r3, #32
 800fe8e:	817b      	strh	r3, [r7, #10]
 800fe90:	687a      	ldr	r2, [r7, #4]
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	781b      	ldrb	r3, [r3, #0]
 800fe96:	009b      	lsls	r3, r3, #2
 800fe98:	441a      	add	r2, r3
 800fe9a:	897b      	ldrh	r3, [r7, #10]
 800fe9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fea0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fea4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fea8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800feac:	b29b      	uxth	r3, r3
 800feae:	8013      	strh	r3, [r2, #0]
 800feb0:	e0d5      	b.n	801005e <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800feb2:	683b      	ldr	r3, [r7, #0]
 800feb4:	7b1b      	ldrb	r3, [r3, #12]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d156      	bne.n	800ff68 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	699b      	ldr	r3, [r3, #24]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d122      	bne.n	800ff08 <USB_EPStartXfer+0x9fe>
 800fec2:	683b      	ldr	r3, [r7, #0]
 800fec4:	78db      	ldrb	r3, [r3, #3]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d11e      	bne.n	800ff08 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800feca:	687a      	ldr	r2, [r7, #4]
 800fecc:	683b      	ldr	r3, [r7, #0]
 800fece:	781b      	ldrb	r3, [r3, #0]
 800fed0:	009b      	lsls	r3, r3, #2
 800fed2:	4413      	add	r3, r2
 800fed4:	881b      	ldrh	r3, [r3, #0]
 800fed6:	b29b      	uxth	r3, r3
 800fed8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fedc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fee0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800fee4:	687a      	ldr	r2, [r7, #4]
 800fee6:	683b      	ldr	r3, [r7, #0]
 800fee8:	781b      	ldrb	r3, [r3, #0]
 800feea:	009b      	lsls	r3, r3, #2
 800feec:	441a      	add	r2, r3
 800feee:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800fef2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fef6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fefa:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800fefe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ff02:	b29b      	uxth	r3, r3
 800ff04:	8013      	strh	r3, [r2, #0]
 800ff06:	e01d      	b.n	800ff44 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800ff08:	687a      	ldr	r2, [r7, #4]
 800ff0a:	683b      	ldr	r3, [r7, #0]
 800ff0c:	781b      	ldrb	r3, [r3, #0]
 800ff0e:	009b      	lsls	r3, r3, #2
 800ff10:	4413      	add	r3, r2
 800ff12:	881b      	ldrh	r3, [r3, #0]
 800ff14:	b29b      	uxth	r3, r3
 800ff16:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800ff1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ff1e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800ff22:	687a      	ldr	r2, [r7, #4]
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	781b      	ldrb	r3, [r3, #0]
 800ff28:	009b      	lsls	r3, r3, #2
 800ff2a:	441a      	add	r2, r3
 800ff2c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800ff30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ff34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ff38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ff3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ff40:	b29b      	uxth	r3, r3
 800ff42:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	699a      	ldr	r2, [r3, #24]
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	691b      	ldr	r3, [r3, #16]
 800ff4c:	429a      	cmp	r2, r3
 800ff4e:	d907      	bls.n	800ff60 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800ff50:	683b      	ldr	r3, [r7, #0]
 800ff52:	699a      	ldr	r2, [r3, #24]
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	691b      	ldr	r3, [r3, #16]
 800ff58:	1ad2      	subs	r2, r2, r3
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	619a      	str	r2, [r3, #24]
 800ff5e:	e054      	b.n	801000a <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	2200      	movs	r2, #0
 800ff64:	619a      	str	r2, [r3, #24]
 800ff66:	e050      	b.n	801000a <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	78db      	ldrb	r3, [r3, #3]
 800ff6c:	2b02      	cmp	r3, #2
 800ff6e:	d142      	bne.n	800fff6 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	69db      	ldr	r3, [r3, #28]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d048      	beq.n	801000a <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ff78:	687a      	ldr	r2, [r7, #4]
 800ff7a:	683b      	ldr	r3, [r7, #0]
 800ff7c:	781b      	ldrb	r3, [r3, #0]
 800ff7e:	009b      	lsls	r3, r3, #2
 800ff80:	4413      	add	r3, r2
 800ff82:	881b      	ldrh	r3, [r3, #0]
 800ff84:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ff88:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800ff8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d005      	beq.n	800ffa0 <USB_EPStartXfer+0xa96>
 800ff94:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800ff98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d10b      	bne.n	800ffb8 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ffa0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800ffa4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d12e      	bne.n	801000a <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ffac:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800ffb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d128      	bne.n	801000a <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800ffb8:	687a      	ldr	r2, [r7, #4]
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	781b      	ldrb	r3, [r3, #0]
 800ffbe:	009b      	lsls	r3, r3, #2
 800ffc0:	4413      	add	r3, r2
 800ffc2:	881b      	ldrh	r3, [r3, #0]
 800ffc4:	b29b      	uxth	r3, r3
 800ffc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ffca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ffce:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800ffd2:	687a      	ldr	r2, [r7, #4]
 800ffd4:	683b      	ldr	r3, [r7, #0]
 800ffd6:	781b      	ldrb	r3, [r3, #0]
 800ffd8:	009b      	lsls	r3, r3, #2
 800ffda:	441a      	add	r2, r3
 800ffdc:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800ffe0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ffe4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ffe8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ffec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800fff0:	b29b      	uxth	r3, r3
 800fff2:	8013      	strh	r3, [r2, #0]
 800fff4:	e009      	b.n	801000a <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800fff6:	683b      	ldr	r3, [r7, #0]
 800fff8:	78db      	ldrb	r3, [r3, #3]
 800fffa:	2b01      	cmp	r3, #1
 800fffc:	d103      	bne.n	8010006 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800fffe:	683b      	ldr	r3, [r7, #0]
 8010000:	2200      	movs	r2, #0
 8010002:	619a      	str	r2, [r3, #24]
 8010004:	e001      	b.n	801000a <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8010006:	2301      	movs	r3, #1
 8010008:	e02a      	b.n	8010060 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801000a:	687a      	ldr	r2, [r7, #4]
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	781b      	ldrb	r3, [r3, #0]
 8010010:	009b      	lsls	r3, r3, #2
 8010012:	4413      	add	r3, r2
 8010014:	881b      	ldrh	r3, [r3, #0]
 8010016:	b29b      	uxth	r3, r3
 8010018:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801001c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010020:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8010024:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8010028:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 801002c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8010030:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8010034:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8010038:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 801003c:	687a      	ldr	r2, [r7, #4]
 801003e:	683b      	ldr	r3, [r7, #0]
 8010040:	781b      	ldrb	r3, [r3, #0]
 8010042:	009b      	lsls	r3, r3, #2
 8010044:	441a      	add	r2, r3
 8010046:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801004a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801004e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010052:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801005a:	b29b      	uxth	r3, r3
 801005c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 801005e:	2300      	movs	r3, #0
}
 8010060:	4618      	mov	r0, r3
 8010062:	37b0      	adds	r7, #176	@ 0xb0
 8010064:	46bd      	mov	sp, r7
 8010066:	bd80      	pop	{r7, pc}

08010068 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010068:	b480      	push	{r7}
 801006a:	b085      	sub	sp, #20
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
 8010070:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	785b      	ldrb	r3, [r3, #1]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d020      	beq.n	80100bc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801007a:	687a      	ldr	r2, [r7, #4]
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	781b      	ldrb	r3, [r3, #0]
 8010080:	009b      	lsls	r3, r3, #2
 8010082:	4413      	add	r3, r2
 8010084:	881b      	ldrh	r3, [r3, #0]
 8010086:	b29b      	uxth	r3, r3
 8010088:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801008c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010090:	81bb      	strh	r3, [r7, #12]
 8010092:	89bb      	ldrh	r3, [r7, #12]
 8010094:	f083 0310 	eor.w	r3, r3, #16
 8010098:	81bb      	strh	r3, [r7, #12]
 801009a:	687a      	ldr	r2, [r7, #4]
 801009c:	683b      	ldr	r3, [r7, #0]
 801009e:	781b      	ldrb	r3, [r3, #0]
 80100a0:	009b      	lsls	r3, r3, #2
 80100a2:	441a      	add	r2, r3
 80100a4:	89bb      	ldrh	r3, [r7, #12]
 80100a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80100aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80100ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80100b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80100b6:	b29b      	uxth	r3, r3
 80100b8:	8013      	strh	r3, [r2, #0]
 80100ba:	e01f      	b.n	80100fc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80100bc:	687a      	ldr	r2, [r7, #4]
 80100be:	683b      	ldr	r3, [r7, #0]
 80100c0:	781b      	ldrb	r3, [r3, #0]
 80100c2:	009b      	lsls	r3, r3, #2
 80100c4:	4413      	add	r3, r2
 80100c6:	881b      	ldrh	r3, [r3, #0]
 80100c8:	b29b      	uxth	r3, r3
 80100ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80100ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80100d2:	81fb      	strh	r3, [r7, #14]
 80100d4:	89fb      	ldrh	r3, [r7, #14]
 80100d6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80100da:	81fb      	strh	r3, [r7, #14]
 80100dc:	687a      	ldr	r2, [r7, #4]
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	781b      	ldrb	r3, [r3, #0]
 80100e2:	009b      	lsls	r3, r3, #2
 80100e4:	441a      	add	r2, r3
 80100e6:	89fb      	ldrh	r3, [r7, #14]
 80100e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80100ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80100f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80100f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80100f8:	b29b      	uxth	r3, r3
 80100fa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80100fc:	2300      	movs	r3, #0
}
 80100fe:	4618      	mov	r0, r3
 8010100:	3714      	adds	r7, #20
 8010102:	46bd      	mov	sp, r7
 8010104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010108:	4770      	bx	lr

0801010a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801010a:	b480      	push	{r7}
 801010c:	b087      	sub	sp, #28
 801010e:	af00      	add	r7, sp, #0
 8010110:	6078      	str	r0, [r7, #4]
 8010112:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8010114:	683b      	ldr	r3, [r7, #0]
 8010116:	785b      	ldrb	r3, [r3, #1]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d04c      	beq.n	80101b6 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801011c:	687a      	ldr	r2, [r7, #4]
 801011e:	683b      	ldr	r3, [r7, #0]
 8010120:	781b      	ldrb	r3, [r3, #0]
 8010122:	009b      	lsls	r3, r3, #2
 8010124:	4413      	add	r3, r2
 8010126:	881b      	ldrh	r3, [r3, #0]
 8010128:	823b      	strh	r3, [r7, #16]
 801012a:	8a3b      	ldrh	r3, [r7, #16]
 801012c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010130:	2b00      	cmp	r3, #0
 8010132:	d01b      	beq.n	801016c <USB_EPClearStall+0x62>
 8010134:	687a      	ldr	r2, [r7, #4]
 8010136:	683b      	ldr	r3, [r7, #0]
 8010138:	781b      	ldrb	r3, [r3, #0]
 801013a:	009b      	lsls	r3, r3, #2
 801013c:	4413      	add	r3, r2
 801013e:	881b      	ldrh	r3, [r3, #0]
 8010140:	b29b      	uxth	r3, r3
 8010142:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010146:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801014a:	81fb      	strh	r3, [r7, #14]
 801014c:	687a      	ldr	r2, [r7, #4]
 801014e:	683b      	ldr	r3, [r7, #0]
 8010150:	781b      	ldrb	r3, [r3, #0]
 8010152:	009b      	lsls	r3, r3, #2
 8010154:	441a      	add	r2, r3
 8010156:	89fb      	ldrh	r3, [r7, #14]
 8010158:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801015c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010160:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010164:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8010168:	b29b      	uxth	r3, r3
 801016a:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 801016c:	683b      	ldr	r3, [r7, #0]
 801016e:	78db      	ldrb	r3, [r3, #3]
 8010170:	2b01      	cmp	r3, #1
 8010172:	d06c      	beq.n	801024e <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010174:	687a      	ldr	r2, [r7, #4]
 8010176:	683b      	ldr	r3, [r7, #0]
 8010178:	781b      	ldrb	r3, [r3, #0]
 801017a:	009b      	lsls	r3, r3, #2
 801017c:	4413      	add	r3, r2
 801017e:	881b      	ldrh	r3, [r3, #0]
 8010180:	b29b      	uxth	r3, r3
 8010182:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010186:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801018a:	81bb      	strh	r3, [r7, #12]
 801018c:	89bb      	ldrh	r3, [r7, #12]
 801018e:	f083 0320 	eor.w	r3, r3, #32
 8010192:	81bb      	strh	r3, [r7, #12]
 8010194:	687a      	ldr	r2, [r7, #4]
 8010196:	683b      	ldr	r3, [r7, #0]
 8010198:	781b      	ldrb	r3, [r3, #0]
 801019a:	009b      	lsls	r3, r3, #2
 801019c:	441a      	add	r2, r3
 801019e:	89bb      	ldrh	r3, [r7, #12]
 80101a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80101a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80101a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80101ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80101b0:	b29b      	uxth	r3, r3
 80101b2:	8013      	strh	r3, [r2, #0]
 80101b4:	e04b      	b.n	801024e <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80101b6:	687a      	ldr	r2, [r7, #4]
 80101b8:	683b      	ldr	r3, [r7, #0]
 80101ba:	781b      	ldrb	r3, [r3, #0]
 80101bc:	009b      	lsls	r3, r3, #2
 80101be:	4413      	add	r3, r2
 80101c0:	881b      	ldrh	r3, [r3, #0]
 80101c2:	82fb      	strh	r3, [r7, #22]
 80101c4:	8afb      	ldrh	r3, [r7, #22]
 80101c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d01b      	beq.n	8010206 <USB_EPClearStall+0xfc>
 80101ce:	687a      	ldr	r2, [r7, #4]
 80101d0:	683b      	ldr	r3, [r7, #0]
 80101d2:	781b      	ldrb	r3, [r3, #0]
 80101d4:	009b      	lsls	r3, r3, #2
 80101d6:	4413      	add	r3, r2
 80101d8:	881b      	ldrh	r3, [r3, #0]
 80101da:	b29b      	uxth	r3, r3
 80101dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80101e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80101e4:	82bb      	strh	r3, [r7, #20]
 80101e6:	687a      	ldr	r2, [r7, #4]
 80101e8:	683b      	ldr	r3, [r7, #0]
 80101ea:	781b      	ldrb	r3, [r3, #0]
 80101ec:	009b      	lsls	r3, r3, #2
 80101ee:	441a      	add	r2, r3
 80101f0:	8abb      	ldrh	r3, [r7, #20]
 80101f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80101f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80101fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80101fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010202:	b29b      	uxth	r3, r3
 8010204:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010206:	687a      	ldr	r2, [r7, #4]
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	781b      	ldrb	r3, [r3, #0]
 801020c:	009b      	lsls	r3, r3, #2
 801020e:	4413      	add	r3, r2
 8010210:	881b      	ldrh	r3, [r3, #0]
 8010212:	b29b      	uxth	r3, r3
 8010214:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010218:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801021c:	827b      	strh	r3, [r7, #18]
 801021e:	8a7b      	ldrh	r3, [r7, #18]
 8010220:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8010224:	827b      	strh	r3, [r7, #18]
 8010226:	8a7b      	ldrh	r3, [r7, #18]
 8010228:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 801022c:	827b      	strh	r3, [r7, #18]
 801022e:	687a      	ldr	r2, [r7, #4]
 8010230:	683b      	ldr	r3, [r7, #0]
 8010232:	781b      	ldrb	r3, [r3, #0]
 8010234:	009b      	lsls	r3, r3, #2
 8010236:	441a      	add	r2, r3
 8010238:	8a7b      	ldrh	r3, [r7, #18]
 801023a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801023e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010242:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010246:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801024a:	b29b      	uxth	r3, r3
 801024c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 801024e:	2300      	movs	r3, #0
}
 8010250:	4618      	mov	r0, r3
 8010252:	371c      	adds	r7, #28
 8010254:	46bd      	mov	sp, r7
 8010256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025a:	4770      	bx	lr

0801025c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801025c:	b480      	push	{r7}
 801025e:	b083      	sub	sp, #12
 8010260:	af00      	add	r7, sp, #0
 8010262:	6078      	str	r0, [r7, #4]
 8010264:	460b      	mov	r3, r1
 8010266:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8010268:	78fb      	ldrb	r3, [r7, #3]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d103      	bne.n	8010276 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	2280      	movs	r2, #128	@ 0x80
 8010272:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8010276:	2300      	movs	r3, #0
}
 8010278:	4618      	mov	r0, r3
 801027a:	370c      	adds	r7, #12
 801027c:	46bd      	mov	sp, r7
 801027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010282:	4770      	bx	lr

08010284 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8010284:	b480      	push	{r7}
 8010286:	b083      	sub	sp, #12
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8010292:	b29b      	uxth	r3, r3
 8010294:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010298:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801029c:	b29a      	uxth	r2, r3
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80102a4:	2300      	movs	r3, #0
}
 80102a6:	4618      	mov	r0, r3
 80102a8:	370c      	adds	r7, #12
 80102aa:	46bd      	mov	sp, r7
 80102ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b0:	4770      	bx	lr

080102b2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80102b2:	b480      	push	{r7}
 80102b4:	b085      	sub	sp, #20
 80102b6:	af00      	add	r7, sp, #0
 80102b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80102c0:	b29b      	uxth	r3, r3
 80102c2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80102c4:	68fb      	ldr	r3, [r7, #12]
}
 80102c6:	4618      	mov	r0, r3
 80102c8:	3714      	adds	r7, #20
 80102ca:	46bd      	mov	sp, r7
 80102cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d0:	4770      	bx	lr

080102d2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80102d2:	b480      	push	{r7}
 80102d4:	b08b      	sub	sp, #44	@ 0x2c
 80102d6:	af00      	add	r7, sp, #0
 80102d8:	60f8      	str	r0, [r7, #12]
 80102da:	60b9      	str	r1, [r7, #8]
 80102dc:	4611      	mov	r1, r2
 80102de:	461a      	mov	r2, r3
 80102e0:	460b      	mov	r3, r1
 80102e2:	80fb      	strh	r3, [r7, #6]
 80102e4:	4613      	mov	r3, r2
 80102e6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80102e8:	88bb      	ldrh	r3, [r7, #4]
 80102ea:	3301      	adds	r3, #1
 80102ec:	085b      	lsrs	r3, r3, #1
 80102ee:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80102f4:	68bb      	ldr	r3, [r7, #8]
 80102f6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80102f8:	88fa      	ldrh	r2, [r7, #6]
 80102fa:	697b      	ldr	r3, [r7, #20]
 80102fc:	4413      	add	r3, r2
 80102fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010302:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8010304:	69bb      	ldr	r3, [r7, #24]
 8010306:	627b      	str	r3, [r7, #36]	@ 0x24
 8010308:	e01b      	b.n	8010342 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 801030a:	69fb      	ldr	r3, [r7, #28]
 801030c:	781b      	ldrb	r3, [r3, #0]
 801030e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8010310:	69fb      	ldr	r3, [r7, #28]
 8010312:	3301      	adds	r3, #1
 8010314:	781b      	ldrb	r3, [r3, #0]
 8010316:	021b      	lsls	r3, r3, #8
 8010318:	b21a      	sxth	r2, r3
 801031a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801031e:	4313      	orrs	r3, r2
 8010320:	b21b      	sxth	r3, r3
 8010322:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8010324:	6a3b      	ldr	r3, [r7, #32]
 8010326:	8a7a      	ldrh	r2, [r7, #18]
 8010328:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801032a:	6a3b      	ldr	r3, [r7, #32]
 801032c:	3302      	adds	r3, #2
 801032e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8010330:	69fb      	ldr	r3, [r7, #28]
 8010332:	3301      	adds	r3, #1
 8010334:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8010336:	69fb      	ldr	r3, [r7, #28]
 8010338:	3301      	adds	r3, #1
 801033a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801033c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801033e:	3b01      	subs	r3, #1
 8010340:	627b      	str	r3, [r7, #36]	@ 0x24
 8010342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010344:	2b00      	cmp	r3, #0
 8010346:	d1e0      	bne.n	801030a <USB_WritePMA+0x38>
  }
}
 8010348:	bf00      	nop
 801034a:	bf00      	nop
 801034c:	372c      	adds	r7, #44	@ 0x2c
 801034e:	46bd      	mov	sp, r7
 8010350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010354:	4770      	bx	lr

08010356 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8010356:	b480      	push	{r7}
 8010358:	b08b      	sub	sp, #44	@ 0x2c
 801035a:	af00      	add	r7, sp, #0
 801035c:	60f8      	str	r0, [r7, #12]
 801035e:	60b9      	str	r1, [r7, #8]
 8010360:	4611      	mov	r1, r2
 8010362:	461a      	mov	r2, r3
 8010364:	460b      	mov	r3, r1
 8010366:	80fb      	strh	r3, [r7, #6]
 8010368:	4613      	mov	r3, r2
 801036a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801036c:	88bb      	ldrh	r3, [r7, #4]
 801036e:	085b      	lsrs	r3, r3, #1
 8010370:	b29b      	uxth	r3, r3
 8010372:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8010378:	68bb      	ldr	r3, [r7, #8]
 801037a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801037c:	88fa      	ldrh	r2, [r7, #6]
 801037e:	697b      	ldr	r3, [r7, #20]
 8010380:	4413      	add	r3, r2
 8010382:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010386:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8010388:	69bb      	ldr	r3, [r7, #24]
 801038a:	627b      	str	r3, [r7, #36]	@ 0x24
 801038c:	e018      	b.n	80103c0 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801038e:	6a3b      	ldr	r3, [r7, #32]
 8010390:	881b      	ldrh	r3, [r3, #0]
 8010392:	b29b      	uxth	r3, r3
 8010394:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8010396:	6a3b      	ldr	r3, [r7, #32]
 8010398:	3302      	adds	r3, #2
 801039a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801039c:	693b      	ldr	r3, [r7, #16]
 801039e:	b2da      	uxtb	r2, r3
 80103a0:	69fb      	ldr	r3, [r7, #28]
 80103a2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80103a4:	69fb      	ldr	r3, [r7, #28]
 80103a6:	3301      	adds	r3, #1
 80103a8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80103aa:	693b      	ldr	r3, [r7, #16]
 80103ac:	0a1b      	lsrs	r3, r3, #8
 80103ae:	b2da      	uxtb	r2, r3
 80103b0:	69fb      	ldr	r3, [r7, #28]
 80103b2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80103b4:	69fb      	ldr	r3, [r7, #28]
 80103b6:	3301      	adds	r3, #1
 80103b8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80103ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103bc:	3b01      	subs	r3, #1
 80103be:	627b      	str	r3, [r7, #36]	@ 0x24
 80103c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d1e3      	bne.n	801038e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80103c6:	88bb      	ldrh	r3, [r7, #4]
 80103c8:	f003 0301 	and.w	r3, r3, #1
 80103cc:	b29b      	uxth	r3, r3
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d007      	beq.n	80103e2 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80103d2:	6a3b      	ldr	r3, [r7, #32]
 80103d4:	881b      	ldrh	r3, [r3, #0]
 80103d6:	b29b      	uxth	r3, r3
 80103d8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80103da:	693b      	ldr	r3, [r7, #16]
 80103dc:	b2da      	uxtb	r2, r3
 80103de:	69fb      	ldr	r3, [r7, #28]
 80103e0:	701a      	strb	r2, [r3, #0]
  }
}
 80103e2:	bf00      	nop
 80103e4:	372c      	adds	r7, #44	@ 0x2c
 80103e6:	46bd      	mov	sp, r7
 80103e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ec:	4770      	bx	lr

080103ee <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80103ee:	b580      	push	{r7, lr}
 80103f0:	b084      	sub	sp, #16
 80103f2:	af00      	add	r7, sp, #0
 80103f4:	6078      	str	r0, [r7, #4]
 80103f6:	460b      	mov	r3, r1
 80103f8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80103fa:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80103fe:	f002 f8a3 	bl	8012548 <USBD_static_malloc>
 8010402:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d105      	bne.n	8010416 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	2200      	movs	r2, #0
 801040e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8010412:	2302      	movs	r3, #2
 8010414:	e066      	b.n	80104e4 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	68fa      	ldr	r2, [r7, #12]
 801041a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	7c1b      	ldrb	r3, [r3, #16]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d119      	bne.n	801045a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010426:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801042a:	2202      	movs	r2, #2
 801042c:	2181      	movs	r1, #129	@ 0x81
 801042e:	6878      	ldr	r0, [r7, #4]
 8010430:	f001 ff31 	bl	8012296 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	2201      	movs	r2, #1
 8010438:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801043a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801043e:	2202      	movs	r2, #2
 8010440:	2101      	movs	r1, #1
 8010442:	6878      	ldr	r0, [r7, #4]
 8010444:	f001 ff27 	bl	8012296 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	2201      	movs	r2, #1
 801044c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	2210      	movs	r2, #16
 8010454:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8010458:	e016      	b.n	8010488 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801045a:	2340      	movs	r3, #64	@ 0x40
 801045c:	2202      	movs	r2, #2
 801045e:	2181      	movs	r1, #129	@ 0x81
 8010460:	6878      	ldr	r0, [r7, #4]
 8010462:	f001 ff18 	bl	8012296 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	2201      	movs	r2, #1
 801046a:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801046c:	2340      	movs	r3, #64	@ 0x40
 801046e:	2202      	movs	r2, #2
 8010470:	2101      	movs	r1, #1
 8010472:	6878      	ldr	r0, [r7, #4]
 8010474:	f001 ff0f 	bl	8012296 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	2201      	movs	r2, #1
 801047c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	2210      	movs	r2, #16
 8010484:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010488:	2308      	movs	r3, #8
 801048a:	2203      	movs	r2, #3
 801048c:	2182      	movs	r1, #130	@ 0x82
 801048e:	6878      	ldr	r0, [r7, #4]
 8010490:	f001 ff01 	bl	8012296 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	2201      	movs	r2, #1
 8010498:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	2200      	movs	r2, #0
 80104aa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	2200      	movs	r2, #0
 80104b2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	7c1b      	ldrb	r3, [r3, #16]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d109      	bne.n	80104d2 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80104c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80104c8:	2101      	movs	r1, #1
 80104ca:	6878      	ldr	r0, [r7, #4]
 80104cc:	f001 ffd2 	bl	8012474 <USBD_LL_PrepareReceive>
 80104d0:	e007      	b.n	80104e2 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80104d8:	2340      	movs	r3, #64	@ 0x40
 80104da:	2101      	movs	r1, #1
 80104dc:	6878      	ldr	r0, [r7, #4]
 80104de:	f001 ffc9 	bl	8012474 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80104e2:	2300      	movs	r3, #0
}
 80104e4:	4618      	mov	r0, r3
 80104e6:	3710      	adds	r7, #16
 80104e8:	46bd      	mov	sp, r7
 80104ea:	bd80      	pop	{r7, pc}

080104ec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b082      	sub	sp, #8
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
 80104f4:	460b      	mov	r3, r1
 80104f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80104f8:	2181      	movs	r1, #129	@ 0x81
 80104fa:	6878      	ldr	r0, [r7, #4]
 80104fc:	f001 fef1 	bl	80122e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	2200      	movs	r2, #0
 8010504:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8010506:	2101      	movs	r1, #1
 8010508:	6878      	ldr	r0, [r7, #4]
 801050a:	f001 feea 	bl	80122e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	2200      	movs	r2, #0
 8010512:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8010516:	2182      	movs	r1, #130	@ 0x82
 8010518:	6878      	ldr	r0, [r7, #4]
 801051a:	f001 fee2 	bl	80122e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	2200      	movs	r2, #0
 8010522:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	2200      	movs	r2, #0
 801052a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010534:	2b00      	cmp	r3, #0
 8010536:	d00e      	beq.n	8010556 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 801053e:	685b      	ldr	r3, [r3, #4]
 8010540:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010548:	4618      	mov	r0, r3
 801054a:	f002 f80b 	bl	8012564 <USBD_static_free>
    pdev->pClassData = NULL;
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	2200      	movs	r2, #0
 8010552:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8010556:	2300      	movs	r3, #0
}
 8010558:	4618      	mov	r0, r3
 801055a:	3708      	adds	r7, #8
 801055c:	46bd      	mov	sp, r7
 801055e:	bd80      	pop	{r7, pc}

08010560 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010560:	b580      	push	{r7, lr}
 8010562:	b086      	sub	sp, #24
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
 8010568:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010570:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8010572:	2300      	movs	r3, #0
 8010574:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8010576:	2300      	movs	r3, #0
 8010578:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801057a:	2300      	movs	r3, #0
 801057c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801057e:	693b      	ldr	r3, [r7, #16]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d101      	bne.n	8010588 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8010584:	2303      	movs	r3, #3
 8010586:	e0af      	b.n	80106e8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	781b      	ldrb	r3, [r3, #0]
 801058c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010590:	2b00      	cmp	r3, #0
 8010592:	d03f      	beq.n	8010614 <USBD_CDC_Setup+0xb4>
 8010594:	2b20      	cmp	r3, #32
 8010596:	f040 809f 	bne.w	80106d8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	88db      	ldrh	r3, [r3, #6]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d02e      	beq.n	8010600 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80105a2:	683b      	ldr	r3, [r7, #0]
 80105a4:	781b      	ldrb	r3, [r3, #0]
 80105a6:	b25b      	sxtb	r3, r3
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	da16      	bge.n	80105da <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80105b2:	689b      	ldr	r3, [r3, #8]
 80105b4:	683a      	ldr	r2, [r7, #0]
 80105b6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80105b8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80105ba:	683a      	ldr	r2, [r7, #0]
 80105bc:	88d2      	ldrh	r2, [r2, #6]
 80105be:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80105c0:	683b      	ldr	r3, [r7, #0]
 80105c2:	88db      	ldrh	r3, [r3, #6]
 80105c4:	2b07      	cmp	r3, #7
 80105c6:	bf28      	it	cs
 80105c8:	2307      	movcs	r3, #7
 80105ca:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80105cc:	693b      	ldr	r3, [r7, #16]
 80105ce:	89fa      	ldrh	r2, [r7, #14]
 80105d0:	4619      	mov	r1, r3
 80105d2:	6878      	ldr	r0, [r7, #4]
 80105d4:	f001 fa9d 	bl	8011b12 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80105d8:	e085      	b.n	80106e6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80105da:	683b      	ldr	r3, [r7, #0]
 80105dc:	785a      	ldrb	r2, [r3, #1]
 80105de:	693b      	ldr	r3, [r7, #16]
 80105e0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80105e4:	683b      	ldr	r3, [r7, #0]
 80105e6:	88db      	ldrh	r3, [r3, #6]
 80105e8:	b2da      	uxtb	r2, r3
 80105ea:	693b      	ldr	r3, [r7, #16]
 80105ec:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80105f0:	6939      	ldr	r1, [r7, #16]
 80105f2:	683b      	ldr	r3, [r7, #0]
 80105f4:	88db      	ldrh	r3, [r3, #6]
 80105f6:	461a      	mov	r2, r3
 80105f8:	6878      	ldr	r0, [r7, #4]
 80105fa:	f001 fab6 	bl	8011b6a <USBD_CtlPrepareRx>
      break;
 80105fe:	e072      	b.n	80106e6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8010606:	689b      	ldr	r3, [r3, #8]
 8010608:	683a      	ldr	r2, [r7, #0]
 801060a:	7850      	ldrb	r0, [r2, #1]
 801060c:	2200      	movs	r2, #0
 801060e:	6839      	ldr	r1, [r7, #0]
 8010610:	4798      	blx	r3
      break;
 8010612:	e068      	b.n	80106e6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010614:	683b      	ldr	r3, [r7, #0]
 8010616:	785b      	ldrb	r3, [r3, #1]
 8010618:	2b0b      	cmp	r3, #11
 801061a:	d852      	bhi.n	80106c2 <USBD_CDC_Setup+0x162>
 801061c:	a201      	add	r2, pc, #4	@ (adr r2, 8010624 <USBD_CDC_Setup+0xc4>)
 801061e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010622:	bf00      	nop
 8010624:	08010655 	.word	0x08010655
 8010628:	080106d1 	.word	0x080106d1
 801062c:	080106c3 	.word	0x080106c3
 8010630:	080106c3 	.word	0x080106c3
 8010634:	080106c3 	.word	0x080106c3
 8010638:	080106c3 	.word	0x080106c3
 801063c:	080106c3 	.word	0x080106c3
 8010640:	080106c3 	.word	0x080106c3
 8010644:	080106c3 	.word	0x080106c3
 8010648:	080106c3 	.word	0x080106c3
 801064c:	0801067f 	.word	0x0801067f
 8010650:	080106a9 	.word	0x080106a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801065a:	b2db      	uxtb	r3, r3
 801065c:	2b03      	cmp	r3, #3
 801065e:	d107      	bne.n	8010670 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010660:	f107 030a 	add.w	r3, r7, #10
 8010664:	2202      	movs	r2, #2
 8010666:	4619      	mov	r1, r3
 8010668:	6878      	ldr	r0, [r7, #4]
 801066a:	f001 fa52 	bl	8011b12 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801066e:	e032      	b.n	80106d6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8010670:	6839      	ldr	r1, [r7, #0]
 8010672:	6878      	ldr	r0, [r7, #4]
 8010674:	f001 f9dc 	bl	8011a30 <USBD_CtlError>
            ret = USBD_FAIL;
 8010678:	2303      	movs	r3, #3
 801067a:	75fb      	strb	r3, [r7, #23]
          break;
 801067c:	e02b      	b.n	80106d6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010684:	b2db      	uxtb	r3, r3
 8010686:	2b03      	cmp	r3, #3
 8010688:	d107      	bne.n	801069a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801068a:	f107 030d 	add.w	r3, r7, #13
 801068e:	2201      	movs	r2, #1
 8010690:	4619      	mov	r1, r3
 8010692:	6878      	ldr	r0, [r7, #4]
 8010694:	f001 fa3d 	bl	8011b12 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010698:	e01d      	b.n	80106d6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801069a:	6839      	ldr	r1, [r7, #0]
 801069c:	6878      	ldr	r0, [r7, #4]
 801069e:	f001 f9c7 	bl	8011a30 <USBD_CtlError>
            ret = USBD_FAIL;
 80106a2:	2303      	movs	r3, #3
 80106a4:	75fb      	strb	r3, [r7, #23]
          break;
 80106a6:	e016      	b.n	80106d6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80106ae:	b2db      	uxtb	r3, r3
 80106b0:	2b03      	cmp	r3, #3
 80106b2:	d00f      	beq.n	80106d4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80106b4:	6839      	ldr	r1, [r7, #0]
 80106b6:	6878      	ldr	r0, [r7, #4]
 80106b8:	f001 f9ba 	bl	8011a30 <USBD_CtlError>
            ret = USBD_FAIL;
 80106bc:	2303      	movs	r3, #3
 80106be:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80106c0:	e008      	b.n	80106d4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80106c2:	6839      	ldr	r1, [r7, #0]
 80106c4:	6878      	ldr	r0, [r7, #4]
 80106c6:	f001 f9b3 	bl	8011a30 <USBD_CtlError>
          ret = USBD_FAIL;
 80106ca:	2303      	movs	r3, #3
 80106cc:	75fb      	strb	r3, [r7, #23]
          break;
 80106ce:	e002      	b.n	80106d6 <USBD_CDC_Setup+0x176>
          break;
 80106d0:	bf00      	nop
 80106d2:	e008      	b.n	80106e6 <USBD_CDC_Setup+0x186>
          break;
 80106d4:	bf00      	nop
      }
      break;
 80106d6:	e006      	b.n	80106e6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80106d8:	6839      	ldr	r1, [r7, #0]
 80106da:	6878      	ldr	r0, [r7, #4]
 80106dc:	f001 f9a8 	bl	8011a30 <USBD_CtlError>
      ret = USBD_FAIL;
 80106e0:	2303      	movs	r3, #3
 80106e2:	75fb      	strb	r3, [r7, #23]
      break;
 80106e4:	bf00      	nop
  }

  return (uint8_t)ret;
 80106e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80106e8:	4618      	mov	r0, r3
 80106ea:	3718      	adds	r7, #24
 80106ec:	46bd      	mov	sp, r7
 80106ee:	bd80      	pop	{r7, pc}

080106f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b084      	sub	sp, #16
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
 80106f8:	460b      	mov	r3, r1
 80106fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010702:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801070a:	2b00      	cmp	r3, #0
 801070c:	d101      	bne.n	8010712 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801070e:	2303      	movs	r3, #3
 8010710:	e04f      	b.n	80107b2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010718:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801071a:	78fa      	ldrb	r2, [r7, #3]
 801071c:	6879      	ldr	r1, [r7, #4]
 801071e:	4613      	mov	r3, r2
 8010720:	009b      	lsls	r3, r3, #2
 8010722:	4413      	add	r3, r2
 8010724:	009b      	lsls	r3, r3, #2
 8010726:	440b      	add	r3, r1
 8010728:	3318      	adds	r3, #24
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d029      	beq.n	8010784 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8010730:	78fa      	ldrb	r2, [r7, #3]
 8010732:	6879      	ldr	r1, [r7, #4]
 8010734:	4613      	mov	r3, r2
 8010736:	009b      	lsls	r3, r3, #2
 8010738:	4413      	add	r3, r2
 801073a:	009b      	lsls	r3, r3, #2
 801073c:	440b      	add	r3, r1
 801073e:	3318      	adds	r3, #24
 8010740:	681a      	ldr	r2, [r3, #0]
 8010742:	78f9      	ldrb	r1, [r7, #3]
 8010744:	68f8      	ldr	r0, [r7, #12]
 8010746:	460b      	mov	r3, r1
 8010748:	009b      	lsls	r3, r3, #2
 801074a:	440b      	add	r3, r1
 801074c:	00db      	lsls	r3, r3, #3
 801074e:	4403      	add	r3, r0
 8010750:	3320      	adds	r3, #32
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	fbb2 f1f3 	udiv	r1, r2, r3
 8010758:	fb01 f303 	mul.w	r3, r1, r3
 801075c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801075e:	2b00      	cmp	r3, #0
 8010760:	d110      	bne.n	8010784 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8010762:	78fa      	ldrb	r2, [r7, #3]
 8010764:	6879      	ldr	r1, [r7, #4]
 8010766:	4613      	mov	r3, r2
 8010768:	009b      	lsls	r3, r3, #2
 801076a:	4413      	add	r3, r2
 801076c:	009b      	lsls	r3, r3, #2
 801076e:	440b      	add	r3, r1
 8010770:	3318      	adds	r3, #24
 8010772:	2200      	movs	r2, #0
 8010774:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010776:	78f9      	ldrb	r1, [r7, #3]
 8010778:	2300      	movs	r3, #0
 801077a:	2200      	movs	r2, #0
 801077c:	6878      	ldr	r0, [r7, #4]
 801077e:	f001 fe58 	bl	8012432 <USBD_LL_Transmit>
 8010782:	e015      	b.n	80107b0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8010784:	68bb      	ldr	r3, [r7, #8]
 8010786:	2200      	movs	r2, #0
 8010788:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8010792:	691b      	ldr	r3, [r3, #16]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d00b      	beq.n	80107b0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 801079e:	691b      	ldr	r3, [r3, #16]
 80107a0:	68ba      	ldr	r2, [r7, #8]
 80107a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80107a6:	68ba      	ldr	r2, [r7, #8]
 80107a8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80107ac:	78fa      	ldrb	r2, [r7, #3]
 80107ae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80107b0:	2300      	movs	r3, #0
}
 80107b2:	4618      	mov	r0, r3
 80107b4:	3710      	adds	r7, #16
 80107b6:	46bd      	mov	sp, r7
 80107b8:	bd80      	pop	{r7, pc}

080107ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80107ba:	b580      	push	{r7, lr}
 80107bc:	b084      	sub	sp, #16
 80107be:	af00      	add	r7, sp, #0
 80107c0:	6078      	str	r0, [r7, #4]
 80107c2:	460b      	mov	r3, r1
 80107c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80107cc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d101      	bne.n	80107dc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80107d8:	2303      	movs	r3, #3
 80107da:	e015      	b.n	8010808 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80107dc:	78fb      	ldrb	r3, [r7, #3]
 80107de:	4619      	mov	r1, r3
 80107e0:	6878      	ldr	r0, [r7, #4]
 80107e2:	f001 fe68 	bl	80124b6 <USBD_LL_GetRxDataSize>
 80107e6:	4602      	mov	r2, r0
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80107f4:	68db      	ldr	r3, [r3, #12]
 80107f6:	68fa      	ldr	r2, [r7, #12]
 80107f8:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80107fc:	68fa      	ldr	r2, [r7, #12]
 80107fe:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8010802:	4611      	mov	r1, r2
 8010804:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010806:	2300      	movs	r3, #0
}
 8010808:	4618      	mov	r0, r3
 801080a:	3710      	adds	r7, #16
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}

08010810 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b084      	sub	sp, #16
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801081e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d101      	bne.n	801082a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8010826:	2303      	movs	r3, #3
 8010828:	e01a      	b.n	8010860 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8010830:	2b00      	cmp	r3, #0
 8010832:	d014      	beq.n	801085e <USBD_CDC_EP0_RxReady+0x4e>
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801083a:	2bff      	cmp	r3, #255	@ 0xff
 801083c:	d00f      	beq.n	801085e <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8010844:	689b      	ldr	r3, [r3, #8]
 8010846:	68fa      	ldr	r2, [r7, #12]
 8010848:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 801084c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801084e:	68fa      	ldr	r2, [r7, #12]
 8010850:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010854:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	22ff      	movs	r2, #255	@ 0xff
 801085a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 801085e:	2300      	movs	r3, #0
}
 8010860:	4618      	mov	r0, r3
 8010862:	3710      	adds	r7, #16
 8010864:	46bd      	mov	sp, r7
 8010866:	bd80      	pop	{r7, pc}

08010868 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010868:	b480      	push	{r7}
 801086a:	b083      	sub	sp, #12
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	2243      	movs	r2, #67	@ 0x43
 8010874:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8010876:	4b03      	ldr	r3, [pc, #12]	@ (8010884 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8010878:	4618      	mov	r0, r3
 801087a:	370c      	adds	r7, #12
 801087c:	46bd      	mov	sp, r7
 801087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010882:	4770      	bx	lr
 8010884:	200000dc 	.word	0x200000dc

08010888 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010888:	b480      	push	{r7}
 801088a:	b083      	sub	sp, #12
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2243      	movs	r2, #67	@ 0x43
 8010894:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8010896:	4b03      	ldr	r3, [pc, #12]	@ (80108a4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8010898:	4618      	mov	r0, r3
 801089a:	370c      	adds	r7, #12
 801089c:	46bd      	mov	sp, r7
 801089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a2:	4770      	bx	lr
 80108a4:	20000098 	.word	0x20000098

080108a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80108a8:	b480      	push	{r7}
 80108aa:	b083      	sub	sp, #12
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	2243      	movs	r2, #67	@ 0x43
 80108b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80108b6:	4b03      	ldr	r3, [pc, #12]	@ (80108c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80108b8:	4618      	mov	r0, r3
 80108ba:	370c      	adds	r7, #12
 80108bc:	46bd      	mov	sp, r7
 80108be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c2:	4770      	bx	lr
 80108c4:	20000120 	.word	0x20000120

080108c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80108c8:	b480      	push	{r7}
 80108ca:	b083      	sub	sp, #12
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	220a      	movs	r2, #10
 80108d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80108d6:	4b03      	ldr	r3, [pc, #12]	@ (80108e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80108d8:	4618      	mov	r0, r3
 80108da:	370c      	adds	r7, #12
 80108dc:	46bd      	mov	sp, r7
 80108de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e2:	4770      	bx	lr
 80108e4:	20000054 	.word	0x20000054

080108e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80108e8:	b480      	push	{r7}
 80108ea:	b083      	sub	sp, #12
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
 80108f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80108f2:	683b      	ldr	r3, [r7, #0]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d101      	bne.n	80108fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80108f8:	2303      	movs	r3, #3
 80108fa:	e004      	b.n	8010906 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	683a      	ldr	r2, [r7, #0]
 8010900:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8010904:	2300      	movs	r3, #0
}
 8010906:	4618      	mov	r0, r3
 8010908:	370c      	adds	r7, #12
 801090a:	46bd      	mov	sp, r7
 801090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010910:	4770      	bx	lr

08010912 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010912:	b480      	push	{r7}
 8010914:	b087      	sub	sp, #28
 8010916:	af00      	add	r7, sp, #0
 8010918:	60f8      	str	r0, [r7, #12]
 801091a:	60b9      	str	r1, [r7, #8]
 801091c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010924:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8010926:	697b      	ldr	r3, [r7, #20]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d101      	bne.n	8010930 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801092c:	2303      	movs	r3, #3
 801092e:	e008      	b.n	8010942 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8010930:	697b      	ldr	r3, [r7, #20]
 8010932:	68ba      	ldr	r2, [r7, #8]
 8010934:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8010938:	697b      	ldr	r3, [r7, #20]
 801093a:	687a      	ldr	r2, [r7, #4]
 801093c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8010940:	2300      	movs	r3, #0
}
 8010942:	4618      	mov	r0, r3
 8010944:	371c      	adds	r7, #28
 8010946:	46bd      	mov	sp, r7
 8010948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094c:	4770      	bx	lr

0801094e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801094e:	b480      	push	{r7}
 8010950:	b085      	sub	sp, #20
 8010952:	af00      	add	r7, sp, #0
 8010954:	6078      	str	r0, [r7, #4]
 8010956:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801095e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d101      	bne.n	801096a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8010966:	2303      	movs	r3, #3
 8010968:	e004      	b.n	8010974 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	683a      	ldr	r2, [r7, #0]
 801096e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8010972:	2300      	movs	r3, #0
}
 8010974:	4618      	mov	r0, r3
 8010976:	3714      	adds	r7, #20
 8010978:	46bd      	mov	sp, r7
 801097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801097e:	4770      	bx	lr

08010980 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b084      	sub	sp, #16
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801098e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010996:	2b00      	cmp	r3, #0
 8010998:	d101      	bne.n	801099e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801099a:	2303      	movs	r3, #3
 801099c:	e016      	b.n	80109cc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	7c1b      	ldrb	r3, [r3, #16]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d109      	bne.n	80109ba <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80109ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80109b0:	2101      	movs	r1, #1
 80109b2:	6878      	ldr	r0, [r7, #4]
 80109b4:	f001 fd5e 	bl	8012474 <USBD_LL_PrepareReceive>
 80109b8:	e007      	b.n	80109ca <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80109c0:	2340      	movs	r3, #64	@ 0x40
 80109c2:	2101      	movs	r1, #1
 80109c4:	6878      	ldr	r0, [r7, #4]
 80109c6:	f001 fd55 	bl	8012474 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80109ca:	2300      	movs	r3, #0
}
 80109cc:	4618      	mov	r0, r3
 80109ce:	3710      	adds	r7, #16
 80109d0:	46bd      	mov	sp, r7
 80109d2:	bd80      	pop	{r7, pc}

080109d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80109d4:	b580      	push	{r7, lr}
 80109d6:	b086      	sub	sp, #24
 80109d8:	af00      	add	r7, sp, #0
 80109da:	60f8      	str	r0, [r7, #12]
 80109dc:	60b9      	str	r1, [r7, #8]
 80109de:	4613      	mov	r3, r2
 80109e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d101      	bne.n	80109ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80109e8:	2303      	movs	r3, #3
 80109ea:	e01f      	b.n	8010a2c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	2200      	movs	r2, #0
 80109f0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	2200      	movs	r2, #0
 80109f8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	2200      	movs	r2, #0
 8010a00:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010a04:	68bb      	ldr	r3, [r7, #8]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d003      	beq.n	8010a12 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	68ba      	ldr	r2, [r7, #8]
 8010a0e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	2201      	movs	r2, #1
 8010a16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	79fa      	ldrb	r2, [r7, #7]
 8010a1e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010a20:	68f8      	ldr	r0, [r7, #12]
 8010a22:	f001 fbbd 	bl	80121a0 <USBD_LL_Init>
 8010a26:	4603      	mov	r3, r0
 8010a28:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	3718      	adds	r7, #24
 8010a30:	46bd      	mov	sp, r7
 8010a32:	bd80      	pop	{r7, pc}

08010a34 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b084      	sub	sp, #16
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
 8010a3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010a3e:	2300      	movs	r3, #0
 8010a40:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010a42:	683b      	ldr	r3, [r7, #0]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d101      	bne.n	8010a4c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8010a48:	2303      	movs	r3, #3
 8010a4a:	e016      	b.n	8010a7a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	683a      	ldr	r2, [r7, #0]
 8010a50:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d00b      	beq.n	8010a78 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a68:	f107 020e 	add.w	r2, r7, #14
 8010a6c:	4610      	mov	r0, r2
 8010a6e:	4798      	blx	r3
 8010a70:	4602      	mov	r2, r0
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8010a78:	2300      	movs	r3, #0
}
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	3710      	adds	r7, #16
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	bd80      	pop	{r7, pc}

08010a82 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010a82:	b580      	push	{r7, lr}
 8010a84:	b082      	sub	sp, #8
 8010a86:	af00      	add	r7, sp, #0
 8010a88:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010a8a:	6878      	ldr	r0, [r7, #4]
 8010a8c:	f001 fbe8 	bl	8012260 <USBD_LL_Start>
 8010a90:	4603      	mov	r3, r0
}
 8010a92:	4618      	mov	r0, r3
 8010a94:	3708      	adds	r7, #8
 8010a96:	46bd      	mov	sp, r7
 8010a98:	bd80      	pop	{r7, pc}

08010a9a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8010a9a:	b480      	push	{r7}
 8010a9c:	b083      	sub	sp, #12
 8010a9e:	af00      	add	r7, sp, #0
 8010aa0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010aa2:	2300      	movs	r3, #0
}
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	370c      	adds	r7, #12
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aae:	4770      	bx	lr

08010ab0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b084      	sub	sp, #16
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
 8010ab8:	460b      	mov	r3, r1
 8010aba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8010abc:	2303      	movs	r3, #3
 8010abe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d009      	beq.n	8010ade <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	78fa      	ldrb	r2, [r7, #3]
 8010ad4:	4611      	mov	r1, r2
 8010ad6:	6878      	ldr	r0, [r7, #4]
 8010ad8:	4798      	blx	r3
 8010ada:	4603      	mov	r3, r0
 8010adc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8010ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	3710      	adds	r7, #16
 8010ae4:	46bd      	mov	sp, r7
 8010ae6:	bd80      	pop	{r7, pc}

08010ae8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b082      	sub	sp, #8
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
 8010af0:	460b      	mov	r3, r1
 8010af2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d007      	beq.n	8010b0e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010b04:	685b      	ldr	r3, [r3, #4]
 8010b06:	78fa      	ldrb	r2, [r7, #3]
 8010b08:	4611      	mov	r1, r2
 8010b0a:	6878      	ldr	r0, [r7, #4]
 8010b0c:	4798      	blx	r3
  }

  return USBD_OK;
 8010b0e:	2300      	movs	r3, #0
}
 8010b10:	4618      	mov	r0, r3
 8010b12:	3708      	adds	r7, #8
 8010b14:	46bd      	mov	sp, r7
 8010b16:	bd80      	pop	{r7, pc}

08010b18 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b084      	sub	sp, #16
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
 8010b20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010b28:	6839      	ldr	r1, [r7, #0]
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	f000 ff46 	bl	80119bc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2201      	movs	r2, #1
 8010b34:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8010b3e:	461a      	mov	r2, r3
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010b4c:	f003 031f 	and.w	r3, r3, #31
 8010b50:	2b02      	cmp	r3, #2
 8010b52:	d01a      	beq.n	8010b8a <USBD_LL_SetupStage+0x72>
 8010b54:	2b02      	cmp	r3, #2
 8010b56:	d822      	bhi.n	8010b9e <USBD_LL_SetupStage+0x86>
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d002      	beq.n	8010b62 <USBD_LL_SetupStage+0x4a>
 8010b5c:	2b01      	cmp	r3, #1
 8010b5e:	d00a      	beq.n	8010b76 <USBD_LL_SetupStage+0x5e>
 8010b60:	e01d      	b.n	8010b9e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010b68:	4619      	mov	r1, r3
 8010b6a:	6878      	ldr	r0, [r7, #4]
 8010b6c:	f000 f9ee 	bl	8010f4c <USBD_StdDevReq>
 8010b70:	4603      	mov	r3, r0
 8010b72:	73fb      	strb	r3, [r7, #15]
      break;
 8010b74:	e020      	b.n	8010bb8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010b7c:	4619      	mov	r1, r3
 8010b7e:	6878      	ldr	r0, [r7, #4]
 8010b80:	f000 fa52 	bl	8011028 <USBD_StdItfReq>
 8010b84:	4603      	mov	r3, r0
 8010b86:	73fb      	strb	r3, [r7, #15]
      break;
 8010b88:	e016      	b.n	8010bb8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010b90:	4619      	mov	r1, r3
 8010b92:	6878      	ldr	r0, [r7, #4]
 8010b94:	f000 fa91 	bl	80110ba <USBD_StdEPReq>
 8010b98:	4603      	mov	r3, r0
 8010b9a:	73fb      	strb	r3, [r7, #15]
      break;
 8010b9c:	e00c      	b.n	8010bb8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010ba4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010ba8:	b2db      	uxtb	r3, r3
 8010baa:	4619      	mov	r1, r3
 8010bac:	6878      	ldr	r0, [r7, #4]
 8010bae:	f001 fbb7 	bl	8012320 <USBD_LL_StallEP>
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	73fb      	strb	r3, [r7, #15]
      break;
 8010bb6:	bf00      	nop
  }

  return ret;
 8010bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bba:	4618      	mov	r0, r3
 8010bbc:	3710      	adds	r7, #16
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bd80      	pop	{r7, pc}

08010bc2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010bc2:	b580      	push	{r7, lr}
 8010bc4:	b086      	sub	sp, #24
 8010bc6:	af00      	add	r7, sp, #0
 8010bc8:	60f8      	str	r0, [r7, #12]
 8010bca:	460b      	mov	r3, r1
 8010bcc:	607a      	str	r2, [r7, #4]
 8010bce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010bd0:	7afb      	ldrb	r3, [r7, #11]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d138      	bne.n	8010c48 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8010bdc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8010be4:	2b03      	cmp	r3, #3
 8010be6:	d14a      	bne.n	8010c7e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8010be8:	693b      	ldr	r3, [r7, #16]
 8010bea:	689a      	ldr	r2, [r3, #8]
 8010bec:	693b      	ldr	r3, [r7, #16]
 8010bee:	68db      	ldr	r3, [r3, #12]
 8010bf0:	429a      	cmp	r2, r3
 8010bf2:	d913      	bls.n	8010c1c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010bf4:	693b      	ldr	r3, [r7, #16]
 8010bf6:	689a      	ldr	r2, [r3, #8]
 8010bf8:	693b      	ldr	r3, [r7, #16]
 8010bfa:	68db      	ldr	r3, [r3, #12]
 8010bfc:	1ad2      	subs	r2, r2, r3
 8010bfe:	693b      	ldr	r3, [r7, #16]
 8010c00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010c02:	693b      	ldr	r3, [r7, #16]
 8010c04:	68da      	ldr	r2, [r3, #12]
 8010c06:	693b      	ldr	r3, [r7, #16]
 8010c08:	689b      	ldr	r3, [r3, #8]
 8010c0a:	4293      	cmp	r3, r2
 8010c0c:	bf28      	it	cs
 8010c0e:	4613      	movcs	r3, r2
 8010c10:	461a      	mov	r2, r3
 8010c12:	6879      	ldr	r1, [r7, #4]
 8010c14:	68f8      	ldr	r0, [r7, #12]
 8010c16:	f000 ffc5 	bl	8011ba4 <USBD_CtlContinueRx>
 8010c1a:	e030      	b.n	8010c7e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010c22:	b2db      	uxtb	r3, r3
 8010c24:	2b03      	cmp	r3, #3
 8010c26:	d10b      	bne.n	8010c40 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010c2e:	691b      	ldr	r3, [r3, #16]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d005      	beq.n	8010c40 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010c3a:	691b      	ldr	r3, [r3, #16]
 8010c3c:	68f8      	ldr	r0, [r7, #12]
 8010c3e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010c40:	68f8      	ldr	r0, [r7, #12]
 8010c42:	f000 ffc0 	bl	8011bc6 <USBD_CtlSendStatus>
 8010c46:	e01a      	b.n	8010c7e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010c4e:	b2db      	uxtb	r3, r3
 8010c50:	2b03      	cmp	r3, #3
 8010c52:	d114      	bne.n	8010c7e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010c5a:	699b      	ldr	r3, [r3, #24]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d00e      	beq.n	8010c7e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010c66:	699b      	ldr	r3, [r3, #24]
 8010c68:	7afa      	ldrb	r2, [r7, #11]
 8010c6a:	4611      	mov	r1, r2
 8010c6c:	68f8      	ldr	r0, [r7, #12]
 8010c6e:	4798      	blx	r3
 8010c70:	4603      	mov	r3, r0
 8010c72:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010c74:	7dfb      	ldrb	r3, [r7, #23]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d001      	beq.n	8010c7e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8010c7a:	7dfb      	ldrb	r3, [r7, #23]
 8010c7c:	e000      	b.n	8010c80 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8010c7e:	2300      	movs	r3, #0
}
 8010c80:	4618      	mov	r0, r3
 8010c82:	3718      	adds	r7, #24
 8010c84:	46bd      	mov	sp, r7
 8010c86:	bd80      	pop	{r7, pc}

08010c88 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b086      	sub	sp, #24
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	60f8      	str	r0, [r7, #12]
 8010c90:	460b      	mov	r3, r1
 8010c92:	607a      	str	r2, [r7, #4]
 8010c94:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010c96:	7afb      	ldrb	r3, [r7, #11]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d16b      	bne.n	8010d74 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	3314      	adds	r3, #20
 8010ca0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8010ca8:	2b02      	cmp	r3, #2
 8010caa:	d156      	bne.n	8010d5a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8010cac:	693b      	ldr	r3, [r7, #16]
 8010cae:	689a      	ldr	r2, [r3, #8]
 8010cb0:	693b      	ldr	r3, [r7, #16]
 8010cb2:	68db      	ldr	r3, [r3, #12]
 8010cb4:	429a      	cmp	r2, r3
 8010cb6:	d914      	bls.n	8010ce2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010cb8:	693b      	ldr	r3, [r7, #16]
 8010cba:	689a      	ldr	r2, [r3, #8]
 8010cbc:	693b      	ldr	r3, [r7, #16]
 8010cbe:	68db      	ldr	r3, [r3, #12]
 8010cc0:	1ad2      	subs	r2, r2, r3
 8010cc2:	693b      	ldr	r3, [r7, #16]
 8010cc4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010cc6:	693b      	ldr	r3, [r7, #16]
 8010cc8:	689b      	ldr	r3, [r3, #8]
 8010cca:	461a      	mov	r2, r3
 8010ccc:	6879      	ldr	r1, [r7, #4]
 8010cce:	68f8      	ldr	r0, [r7, #12]
 8010cd0:	f000 ff3a 	bl	8011b48 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	2200      	movs	r2, #0
 8010cd8:	2100      	movs	r1, #0
 8010cda:	68f8      	ldr	r0, [r7, #12]
 8010cdc:	f001 fbca 	bl	8012474 <USBD_LL_PrepareReceive>
 8010ce0:	e03b      	b.n	8010d5a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010ce2:	693b      	ldr	r3, [r7, #16]
 8010ce4:	68da      	ldr	r2, [r3, #12]
 8010ce6:	693b      	ldr	r3, [r7, #16]
 8010ce8:	689b      	ldr	r3, [r3, #8]
 8010cea:	429a      	cmp	r2, r3
 8010cec:	d11c      	bne.n	8010d28 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010cee:	693b      	ldr	r3, [r7, #16]
 8010cf0:	685a      	ldr	r2, [r3, #4]
 8010cf2:	693b      	ldr	r3, [r7, #16]
 8010cf4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010cf6:	429a      	cmp	r2, r3
 8010cf8:	d316      	bcc.n	8010d28 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010cfa:	693b      	ldr	r3, [r7, #16]
 8010cfc:	685a      	ldr	r2, [r3, #4]
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010d04:	429a      	cmp	r2, r3
 8010d06:	d20f      	bcs.n	8010d28 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010d08:	2200      	movs	r2, #0
 8010d0a:	2100      	movs	r1, #0
 8010d0c:	68f8      	ldr	r0, [r7, #12]
 8010d0e:	f000 ff1b 	bl	8011b48 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	2200      	movs	r2, #0
 8010d16:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	2200      	movs	r2, #0
 8010d1e:	2100      	movs	r1, #0
 8010d20:	68f8      	ldr	r0, [r7, #12]
 8010d22:	f001 fba7 	bl	8012474 <USBD_LL_PrepareReceive>
 8010d26:	e018      	b.n	8010d5a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010d2e:	b2db      	uxtb	r3, r3
 8010d30:	2b03      	cmp	r3, #3
 8010d32:	d10b      	bne.n	8010d4c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010d3a:	68db      	ldr	r3, [r3, #12]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d005      	beq.n	8010d4c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010d46:	68db      	ldr	r3, [r3, #12]
 8010d48:	68f8      	ldr	r0, [r7, #12]
 8010d4a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010d4c:	2180      	movs	r1, #128	@ 0x80
 8010d4e:	68f8      	ldr	r0, [r7, #12]
 8010d50:	f001 fae6 	bl	8012320 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010d54:	68f8      	ldr	r0, [r7, #12]
 8010d56:	f000 ff49 	bl	8011bec <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8010d60:	2b01      	cmp	r3, #1
 8010d62:	d122      	bne.n	8010daa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8010d64:	68f8      	ldr	r0, [r7, #12]
 8010d66:	f7ff fe98 	bl	8010a9a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	2200      	movs	r2, #0
 8010d6e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8010d72:	e01a      	b.n	8010daa <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010d7a:	b2db      	uxtb	r3, r3
 8010d7c:	2b03      	cmp	r3, #3
 8010d7e:	d114      	bne.n	8010daa <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010d86:	695b      	ldr	r3, [r3, #20]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d00e      	beq.n	8010daa <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010d92:	695b      	ldr	r3, [r3, #20]
 8010d94:	7afa      	ldrb	r2, [r7, #11]
 8010d96:	4611      	mov	r1, r2
 8010d98:	68f8      	ldr	r0, [r7, #12]
 8010d9a:	4798      	blx	r3
 8010d9c:	4603      	mov	r3, r0
 8010d9e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010da0:	7dfb      	ldrb	r3, [r7, #23]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d001      	beq.n	8010daa <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8010da6:	7dfb      	ldrb	r3, [r7, #23]
 8010da8:	e000      	b.n	8010dac <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8010daa:	2300      	movs	r3, #0
}
 8010dac:	4618      	mov	r0, r3
 8010dae:	3718      	adds	r7, #24
 8010db0:	46bd      	mov	sp, r7
 8010db2:	bd80      	pop	{r7, pc}

08010db4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b082      	sub	sp, #8
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	2201      	movs	r2, #1
 8010dc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	2200      	movs	r2, #0
 8010dc8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	2200      	movs	r2, #0
 8010dd0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	2200      	movs	r2, #0
 8010dd6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d101      	bne.n	8010de8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8010de4:	2303      	movs	r3, #3
 8010de6:	e02f      	b.n	8010e48 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d00f      	beq.n	8010e12 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010df8:	685b      	ldr	r3, [r3, #4]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d009      	beq.n	8010e12 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010e04:	685b      	ldr	r3, [r3, #4]
 8010e06:	687a      	ldr	r2, [r7, #4]
 8010e08:	6852      	ldr	r2, [r2, #4]
 8010e0a:	b2d2      	uxtb	r2, r2
 8010e0c:	4611      	mov	r1, r2
 8010e0e:	6878      	ldr	r0, [r7, #4]
 8010e10:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010e12:	2340      	movs	r3, #64	@ 0x40
 8010e14:	2200      	movs	r2, #0
 8010e16:	2100      	movs	r1, #0
 8010e18:	6878      	ldr	r0, [r7, #4]
 8010e1a:	f001 fa3c 	bl	8012296 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	2201      	movs	r2, #1
 8010e22:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	2240      	movs	r2, #64	@ 0x40
 8010e2a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010e2e:	2340      	movs	r3, #64	@ 0x40
 8010e30:	2200      	movs	r2, #0
 8010e32:	2180      	movs	r1, #128	@ 0x80
 8010e34:	6878      	ldr	r0, [r7, #4]
 8010e36:	f001 fa2e 	bl	8012296 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	2201      	movs	r2, #1
 8010e3e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	2240      	movs	r2, #64	@ 0x40
 8010e44:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8010e46:	2300      	movs	r3, #0
}
 8010e48:	4618      	mov	r0, r3
 8010e4a:	3708      	adds	r7, #8
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	bd80      	pop	{r7, pc}

08010e50 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010e50:	b480      	push	{r7}
 8010e52:	b083      	sub	sp, #12
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
 8010e58:	460b      	mov	r3, r1
 8010e5a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	78fa      	ldrb	r2, [r7, #3]
 8010e60:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010e62:	2300      	movs	r3, #0
}
 8010e64:	4618      	mov	r0, r3
 8010e66:	370c      	adds	r7, #12
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6e:	4770      	bx	lr

08010e70 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010e70:	b480      	push	{r7}
 8010e72:	b083      	sub	sp, #12
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010e7e:	b2da      	uxtb	r2, r3
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	2204      	movs	r2, #4
 8010e8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8010e8e:	2300      	movs	r3, #0
}
 8010e90:	4618      	mov	r0, r3
 8010e92:	370c      	adds	r7, #12
 8010e94:	46bd      	mov	sp, r7
 8010e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9a:	4770      	bx	lr

08010e9c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010e9c:	b480      	push	{r7}
 8010e9e:	b083      	sub	sp, #12
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010eaa:	b2db      	uxtb	r3, r3
 8010eac:	2b04      	cmp	r3, #4
 8010eae:	d106      	bne.n	8010ebe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8010eb6:	b2da      	uxtb	r2, r3
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8010ebe:	2300      	movs	r3, #0
}
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	370c      	adds	r7, #12
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eca:	4770      	bx	lr

08010ecc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b082      	sub	sp, #8
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d101      	bne.n	8010ee2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8010ede:	2303      	movs	r3, #3
 8010ee0:	e012      	b.n	8010f08 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010ee8:	b2db      	uxtb	r3, r3
 8010eea:	2b03      	cmp	r3, #3
 8010eec:	d10b      	bne.n	8010f06 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010ef4:	69db      	ldr	r3, [r3, #28]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d005      	beq.n	8010f06 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f00:	69db      	ldr	r3, [r3, #28]
 8010f02:	6878      	ldr	r0, [r7, #4]
 8010f04:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010f06:	2300      	movs	r3, #0
}
 8010f08:	4618      	mov	r0, r3
 8010f0a:	3708      	adds	r7, #8
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	bd80      	pop	{r7, pc}

08010f10 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010f10:	b480      	push	{r7}
 8010f12:	b087      	sub	sp, #28
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010f1c:	697b      	ldr	r3, [r7, #20]
 8010f1e:	781b      	ldrb	r3, [r3, #0]
 8010f20:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010f22:	697b      	ldr	r3, [r7, #20]
 8010f24:	3301      	adds	r3, #1
 8010f26:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010f28:	697b      	ldr	r3, [r7, #20]
 8010f2a:	781b      	ldrb	r3, [r3, #0]
 8010f2c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010f2e:	8a3b      	ldrh	r3, [r7, #16]
 8010f30:	021b      	lsls	r3, r3, #8
 8010f32:	b21a      	sxth	r2, r3
 8010f34:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010f38:	4313      	orrs	r3, r2
 8010f3a:	b21b      	sxth	r3, r3
 8010f3c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010f3e:	89fb      	ldrh	r3, [r7, #14]
}
 8010f40:	4618      	mov	r0, r3
 8010f42:	371c      	adds	r7, #28
 8010f44:	46bd      	mov	sp, r7
 8010f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4a:	4770      	bx	lr

08010f4c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b084      	sub	sp, #16
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
 8010f54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010f56:	2300      	movs	r3, #0
 8010f58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010f5a:	683b      	ldr	r3, [r7, #0]
 8010f5c:	781b      	ldrb	r3, [r3, #0]
 8010f5e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010f62:	2b40      	cmp	r3, #64	@ 0x40
 8010f64:	d005      	beq.n	8010f72 <USBD_StdDevReq+0x26>
 8010f66:	2b40      	cmp	r3, #64	@ 0x40
 8010f68:	d853      	bhi.n	8011012 <USBD_StdDevReq+0xc6>
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d00b      	beq.n	8010f86 <USBD_StdDevReq+0x3a>
 8010f6e:	2b20      	cmp	r3, #32
 8010f70:	d14f      	bne.n	8011012 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f78:	689b      	ldr	r3, [r3, #8]
 8010f7a:	6839      	ldr	r1, [r7, #0]
 8010f7c:	6878      	ldr	r0, [r7, #4]
 8010f7e:	4798      	blx	r3
 8010f80:	4603      	mov	r3, r0
 8010f82:	73fb      	strb	r3, [r7, #15]
      break;
 8010f84:	e04a      	b.n	801101c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010f86:	683b      	ldr	r3, [r7, #0]
 8010f88:	785b      	ldrb	r3, [r3, #1]
 8010f8a:	2b09      	cmp	r3, #9
 8010f8c:	d83b      	bhi.n	8011006 <USBD_StdDevReq+0xba>
 8010f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8010f94 <USBD_StdDevReq+0x48>)
 8010f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f94:	08010fe9 	.word	0x08010fe9
 8010f98:	08010ffd 	.word	0x08010ffd
 8010f9c:	08011007 	.word	0x08011007
 8010fa0:	08010ff3 	.word	0x08010ff3
 8010fa4:	08011007 	.word	0x08011007
 8010fa8:	08010fc7 	.word	0x08010fc7
 8010fac:	08010fbd 	.word	0x08010fbd
 8010fb0:	08011007 	.word	0x08011007
 8010fb4:	08010fdf 	.word	0x08010fdf
 8010fb8:	08010fd1 	.word	0x08010fd1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010fbc:	6839      	ldr	r1, [r7, #0]
 8010fbe:	6878      	ldr	r0, [r7, #4]
 8010fc0:	f000 f9de 	bl	8011380 <USBD_GetDescriptor>
          break;
 8010fc4:	e024      	b.n	8011010 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010fc6:	6839      	ldr	r1, [r7, #0]
 8010fc8:	6878      	ldr	r0, [r7, #4]
 8010fca:	f000 fb6d 	bl	80116a8 <USBD_SetAddress>
          break;
 8010fce:	e01f      	b.n	8011010 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010fd0:	6839      	ldr	r1, [r7, #0]
 8010fd2:	6878      	ldr	r0, [r7, #4]
 8010fd4:	f000 fbac 	bl	8011730 <USBD_SetConfig>
 8010fd8:	4603      	mov	r3, r0
 8010fda:	73fb      	strb	r3, [r7, #15]
          break;
 8010fdc:	e018      	b.n	8011010 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010fde:	6839      	ldr	r1, [r7, #0]
 8010fe0:	6878      	ldr	r0, [r7, #4]
 8010fe2:	f000 fc4b 	bl	801187c <USBD_GetConfig>
          break;
 8010fe6:	e013      	b.n	8011010 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010fe8:	6839      	ldr	r1, [r7, #0]
 8010fea:	6878      	ldr	r0, [r7, #4]
 8010fec:	f000 fc7c 	bl	80118e8 <USBD_GetStatus>
          break;
 8010ff0:	e00e      	b.n	8011010 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010ff2:	6839      	ldr	r1, [r7, #0]
 8010ff4:	6878      	ldr	r0, [r7, #4]
 8010ff6:	f000 fcab 	bl	8011950 <USBD_SetFeature>
          break;
 8010ffa:	e009      	b.n	8011010 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010ffc:	6839      	ldr	r1, [r7, #0]
 8010ffe:	6878      	ldr	r0, [r7, #4]
 8011000:	f000 fcba 	bl	8011978 <USBD_ClrFeature>
          break;
 8011004:	e004      	b.n	8011010 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8011006:	6839      	ldr	r1, [r7, #0]
 8011008:	6878      	ldr	r0, [r7, #4]
 801100a:	f000 fd11 	bl	8011a30 <USBD_CtlError>
          break;
 801100e:	bf00      	nop
      }
      break;
 8011010:	e004      	b.n	801101c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8011012:	6839      	ldr	r1, [r7, #0]
 8011014:	6878      	ldr	r0, [r7, #4]
 8011016:	f000 fd0b 	bl	8011a30 <USBD_CtlError>
      break;
 801101a:	bf00      	nop
  }

  return ret;
 801101c:	7bfb      	ldrb	r3, [r7, #15]
}
 801101e:	4618      	mov	r0, r3
 8011020:	3710      	adds	r7, #16
 8011022:	46bd      	mov	sp, r7
 8011024:	bd80      	pop	{r7, pc}
 8011026:	bf00      	nop

08011028 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011028:	b580      	push	{r7, lr}
 801102a:	b084      	sub	sp, #16
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
 8011030:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011032:	2300      	movs	r3, #0
 8011034:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011036:	683b      	ldr	r3, [r7, #0]
 8011038:	781b      	ldrb	r3, [r3, #0]
 801103a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801103e:	2b40      	cmp	r3, #64	@ 0x40
 8011040:	d005      	beq.n	801104e <USBD_StdItfReq+0x26>
 8011042:	2b40      	cmp	r3, #64	@ 0x40
 8011044:	d82f      	bhi.n	80110a6 <USBD_StdItfReq+0x7e>
 8011046:	2b00      	cmp	r3, #0
 8011048:	d001      	beq.n	801104e <USBD_StdItfReq+0x26>
 801104a:	2b20      	cmp	r3, #32
 801104c:	d12b      	bne.n	80110a6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011054:	b2db      	uxtb	r3, r3
 8011056:	3b01      	subs	r3, #1
 8011058:	2b02      	cmp	r3, #2
 801105a:	d81d      	bhi.n	8011098 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801105c:	683b      	ldr	r3, [r7, #0]
 801105e:	889b      	ldrh	r3, [r3, #4]
 8011060:	b2db      	uxtb	r3, r3
 8011062:	2b01      	cmp	r3, #1
 8011064:	d813      	bhi.n	801108e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801106c:	689b      	ldr	r3, [r3, #8]
 801106e:	6839      	ldr	r1, [r7, #0]
 8011070:	6878      	ldr	r0, [r7, #4]
 8011072:	4798      	blx	r3
 8011074:	4603      	mov	r3, r0
 8011076:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011078:	683b      	ldr	r3, [r7, #0]
 801107a:	88db      	ldrh	r3, [r3, #6]
 801107c:	2b00      	cmp	r3, #0
 801107e:	d110      	bne.n	80110a2 <USBD_StdItfReq+0x7a>
 8011080:	7bfb      	ldrb	r3, [r7, #15]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d10d      	bne.n	80110a2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011086:	6878      	ldr	r0, [r7, #4]
 8011088:	f000 fd9d 	bl	8011bc6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801108c:	e009      	b.n	80110a2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 801108e:	6839      	ldr	r1, [r7, #0]
 8011090:	6878      	ldr	r0, [r7, #4]
 8011092:	f000 fccd 	bl	8011a30 <USBD_CtlError>
          break;
 8011096:	e004      	b.n	80110a2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8011098:	6839      	ldr	r1, [r7, #0]
 801109a:	6878      	ldr	r0, [r7, #4]
 801109c:	f000 fcc8 	bl	8011a30 <USBD_CtlError>
          break;
 80110a0:	e000      	b.n	80110a4 <USBD_StdItfReq+0x7c>
          break;
 80110a2:	bf00      	nop
      }
      break;
 80110a4:	e004      	b.n	80110b0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80110a6:	6839      	ldr	r1, [r7, #0]
 80110a8:	6878      	ldr	r0, [r7, #4]
 80110aa:	f000 fcc1 	bl	8011a30 <USBD_CtlError>
      break;
 80110ae:	bf00      	nop
  }

  return ret;
 80110b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80110b2:	4618      	mov	r0, r3
 80110b4:	3710      	adds	r7, #16
 80110b6:	46bd      	mov	sp, r7
 80110b8:	bd80      	pop	{r7, pc}

080110ba <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80110ba:	b580      	push	{r7, lr}
 80110bc:	b084      	sub	sp, #16
 80110be:	af00      	add	r7, sp, #0
 80110c0:	6078      	str	r0, [r7, #4]
 80110c2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80110c4:	2300      	movs	r3, #0
 80110c6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80110c8:	683b      	ldr	r3, [r7, #0]
 80110ca:	889b      	ldrh	r3, [r3, #4]
 80110cc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80110ce:	683b      	ldr	r3, [r7, #0]
 80110d0:	781b      	ldrb	r3, [r3, #0]
 80110d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80110d6:	2b40      	cmp	r3, #64	@ 0x40
 80110d8:	d007      	beq.n	80110ea <USBD_StdEPReq+0x30>
 80110da:	2b40      	cmp	r3, #64	@ 0x40
 80110dc:	f200 8145 	bhi.w	801136a <USBD_StdEPReq+0x2b0>
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d00c      	beq.n	80110fe <USBD_StdEPReq+0x44>
 80110e4:	2b20      	cmp	r3, #32
 80110e6:	f040 8140 	bne.w	801136a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80110f0:	689b      	ldr	r3, [r3, #8]
 80110f2:	6839      	ldr	r1, [r7, #0]
 80110f4:	6878      	ldr	r0, [r7, #4]
 80110f6:	4798      	blx	r3
 80110f8:	4603      	mov	r3, r0
 80110fa:	73fb      	strb	r3, [r7, #15]
      break;
 80110fc:	e13a      	b.n	8011374 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80110fe:	683b      	ldr	r3, [r7, #0]
 8011100:	785b      	ldrb	r3, [r3, #1]
 8011102:	2b03      	cmp	r3, #3
 8011104:	d007      	beq.n	8011116 <USBD_StdEPReq+0x5c>
 8011106:	2b03      	cmp	r3, #3
 8011108:	f300 8129 	bgt.w	801135e <USBD_StdEPReq+0x2a4>
 801110c:	2b00      	cmp	r3, #0
 801110e:	d07f      	beq.n	8011210 <USBD_StdEPReq+0x156>
 8011110:	2b01      	cmp	r3, #1
 8011112:	d03c      	beq.n	801118e <USBD_StdEPReq+0xd4>
 8011114:	e123      	b.n	801135e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801111c:	b2db      	uxtb	r3, r3
 801111e:	2b02      	cmp	r3, #2
 8011120:	d002      	beq.n	8011128 <USBD_StdEPReq+0x6e>
 8011122:	2b03      	cmp	r3, #3
 8011124:	d016      	beq.n	8011154 <USBD_StdEPReq+0x9a>
 8011126:	e02c      	b.n	8011182 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011128:	7bbb      	ldrb	r3, [r7, #14]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d00d      	beq.n	801114a <USBD_StdEPReq+0x90>
 801112e:	7bbb      	ldrb	r3, [r7, #14]
 8011130:	2b80      	cmp	r3, #128	@ 0x80
 8011132:	d00a      	beq.n	801114a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011134:	7bbb      	ldrb	r3, [r7, #14]
 8011136:	4619      	mov	r1, r3
 8011138:	6878      	ldr	r0, [r7, #4]
 801113a:	f001 f8f1 	bl	8012320 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801113e:	2180      	movs	r1, #128	@ 0x80
 8011140:	6878      	ldr	r0, [r7, #4]
 8011142:	f001 f8ed 	bl	8012320 <USBD_LL_StallEP>
 8011146:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011148:	e020      	b.n	801118c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801114a:	6839      	ldr	r1, [r7, #0]
 801114c:	6878      	ldr	r0, [r7, #4]
 801114e:	f000 fc6f 	bl	8011a30 <USBD_CtlError>
              break;
 8011152:	e01b      	b.n	801118c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011154:	683b      	ldr	r3, [r7, #0]
 8011156:	885b      	ldrh	r3, [r3, #2]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d10e      	bne.n	801117a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801115c:	7bbb      	ldrb	r3, [r7, #14]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d00b      	beq.n	801117a <USBD_StdEPReq+0xc0>
 8011162:	7bbb      	ldrb	r3, [r7, #14]
 8011164:	2b80      	cmp	r3, #128	@ 0x80
 8011166:	d008      	beq.n	801117a <USBD_StdEPReq+0xc0>
 8011168:	683b      	ldr	r3, [r7, #0]
 801116a:	88db      	ldrh	r3, [r3, #6]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d104      	bne.n	801117a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011170:	7bbb      	ldrb	r3, [r7, #14]
 8011172:	4619      	mov	r1, r3
 8011174:	6878      	ldr	r0, [r7, #4]
 8011176:	f001 f8d3 	bl	8012320 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801117a:	6878      	ldr	r0, [r7, #4]
 801117c:	f000 fd23 	bl	8011bc6 <USBD_CtlSendStatus>

              break;
 8011180:	e004      	b.n	801118c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8011182:	6839      	ldr	r1, [r7, #0]
 8011184:	6878      	ldr	r0, [r7, #4]
 8011186:	f000 fc53 	bl	8011a30 <USBD_CtlError>
              break;
 801118a:	bf00      	nop
          }
          break;
 801118c:	e0ec      	b.n	8011368 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011194:	b2db      	uxtb	r3, r3
 8011196:	2b02      	cmp	r3, #2
 8011198:	d002      	beq.n	80111a0 <USBD_StdEPReq+0xe6>
 801119a:	2b03      	cmp	r3, #3
 801119c:	d016      	beq.n	80111cc <USBD_StdEPReq+0x112>
 801119e:	e030      	b.n	8011202 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80111a0:	7bbb      	ldrb	r3, [r7, #14]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d00d      	beq.n	80111c2 <USBD_StdEPReq+0x108>
 80111a6:	7bbb      	ldrb	r3, [r7, #14]
 80111a8:	2b80      	cmp	r3, #128	@ 0x80
 80111aa:	d00a      	beq.n	80111c2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80111ac:	7bbb      	ldrb	r3, [r7, #14]
 80111ae:	4619      	mov	r1, r3
 80111b0:	6878      	ldr	r0, [r7, #4]
 80111b2:	f001 f8b5 	bl	8012320 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80111b6:	2180      	movs	r1, #128	@ 0x80
 80111b8:	6878      	ldr	r0, [r7, #4]
 80111ba:	f001 f8b1 	bl	8012320 <USBD_LL_StallEP>
 80111be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80111c0:	e025      	b.n	801120e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80111c2:	6839      	ldr	r1, [r7, #0]
 80111c4:	6878      	ldr	r0, [r7, #4]
 80111c6:	f000 fc33 	bl	8011a30 <USBD_CtlError>
              break;
 80111ca:	e020      	b.n	801120e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80111cc:	683b      	ldr	r3, [r7, #0]
 80111ce:	885b      	ldrh	r3, [r3, #2]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d11b      	bne.n	801120c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80111d4:	7bbb      	ldrb	r3, [r7, #14]
 80111d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d004      	beq.n	80111e8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80111de:	7bbb      	ldrb	r3, [r7, #14]
 80111e0:	4619      	mov	r1, r3
 80111e2:	6878      	ldr	r0, [r7, #4]
 80111e4:	f001 f8bb 	bl	801235e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80111e8:	6878      	ldr	r0, [r7, #4]
 80111ea:	f000 fcec 	bl	8011bc6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80111f4:	689b      	ldr	r3, [r3, #8]
 80111f6:	6839      	ldr	r1, [r7, #0]
 80111f8:	6878      	ldr	r0, [r7, #4]
 80111fa:	4798      	blx	r3
 80111fc:	4603      	mov	r3, r0
 80111fe:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8011200:	e004      	b.n	801120c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8011202:	6839      	ldr	r1, [r7, #0]
 8011204:	6878      	ldr	r0, [r7, #4]
 8011206:	f000 fc13 	bl	8011a30 <USBD_CtlError>
              break;
 801120a:	e000      	b.n	801120e <USBD_StdEPReq+0x154>
              break;
 801120c:	bf00      	nop
          }
          break;
 801120e:	e0ab      	b.n	8011368 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011216:	b2db      	uxtb	r3, r3
 8011218:	2b02      	cmp	r3, #2
 801121a:	d002      	beq.n	8011222 <USBD_StdEPReq+0x168>
 801121c:	2b03      	cmp	r3, #3
 801121e:	d032      	beq.n	8011286 <USBD_StdEPReq+0x1cc>
 8011220:	e097      	b.n	8011352 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011222:	7bbb      	ldrb	r3, [r7, #14]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d007      	beq.n	8011238 <USBD_StdEPReq+0x17e>
 8011228:	7bbb      	ldrb	r3, [r7, #14]
 801122a:	2b80      	cmp	r3, #128	@ 0x80
 801122c:	d004      	beq.n	8011238 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 801122e:	6839      	ldr	r1, [r7, #0]
 8011230:	6878      	ldr	r0, [r7, #4]
 8011232:	f000 fbfd 	bl	8011a30 <USBD_CtlError>
                break;
 8011236:	e091      	b.n	801135c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011238:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801123c:	2b00      	cmp	r3, #0
 801123e:	da0b      	bge.n	8011258 <USBD_StdEPReq+0x19e>
 8011240:	7bbb      	ldrb	r3, [r7, #14]
 8011242:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011246:	4613      	mov	r3, r2
 8011248:	009b      	lsls	r3, r3, #2
 801124a:	4413      	add	r3, r2
 801124c:	009b      	lsls	r3, r3, #2
 801124e:	3310      	adds	r3, #16
 8011250:	687a      	ldr	r2, [r7, #4]
 8011252:	4413      	add	r3, r2
 8011254:	3304      	adds	r3, #4
 8011256:	e00b      	b.n	8011270 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011258:	7bbb      	ldrb	r3, [r7, #14]
 801125a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801125e:	4613      	mov	r3, r2
 8011260:	009b      	lsls	r3, r3, #2
 8011262:	4413      	add	r3, r2
 8011264:	009b      	lsls	r3, r3, #2
 8011266:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801126a:	687a      	ldr	r2, [r7, #4]
 801126c:	4413      	add	r3, r2
 801126e:	3304      	adds	r3, #4
 8011270:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011272:	68bb      	ldr	r3, [r7, #8]
 8011274:	2200      	movs	r2, #0
 8011276:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011278:	68bb      	ldr	r3, [r7, #8]
 801127a:	2202      	movs	r2, #2
 801127c:	4619      	mov	r1, r3
 801127e:	6878      	ldr	r0, [r7, #4]
 8011280:	f000 fc47 	bl	8011b12 <USBD_CtlSendData>
              break;
 8011284:	e06a      	b.n	801135c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011286:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801128a:	2b00      	cmp	r3, #0
 801128c:	da11      	bge.n	80112b2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801128e:	7bbb      	ldrb	r3, [r7, #14]
 8011290:	f003 020f 	and.w	r2, r3, #15
 8011294:	6879      	ldr	r1, [r7, #4]
 8011296:	4613      	mov	r3, r2
 8011298:	009b      	lsls	r3, r3, #2
 801129a:	4413      	add	r3, r2
 801129c:	009b      	lsls	r3, r3, #2
 801129e:	440b      	add	r3, r1
 80112a0:	3324      	adds	r3, #36	@ 0x24
 80112a2:	881b      	ldrh	r3, [r3, #0]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d117      	bne.n	80112d8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80112a8:	6839      	ldr	r1, [r7, #0]
 80112aa:	6878      	ldr	r0, [r7, #4]
 80112ac:	f000 fbc0 	bl	8011a30 <USBD_CtlError>
                  break;
 80112b0:	e054      	b.n	801135c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80112b2:	7bbb      	ldrb	r3, [r7, #14]
 80112b4:	f003 020f 	and.w	r2, r3, #15
 80112b8:	6879      	ldr	r1, [r7, #4]
 80112ba:	4613      	mov	r3, r2
 80112bc:	009b      	lsls	r3, r3, #2
 80112be:	4413      	add	r3, r2
 80112c0:	009b      	lsls	r3, r3, #2
 80112c2:	440b      	add	r3, r1
 80112c4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80112c8:	881b      	ldrh	r3, [r3, #0]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d104      	bne.n	80112d8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80112ce:	6839      	ldr	r1, [r7, #0]
 80112d0:	6878      	ldr	r0, [r7, #4]
 80112d2:	f000 fbad 	bl	8011a30 <USBD_CtlError>
                  break;
 80112d6:	e041      	b.n	801135c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80112d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	da0b      	bge.n	80112f8 <USBD_StdEPReq+0x23e>
 80112e0:	7bbb      	ldrb	r3, [r7, #14]
 80112e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80112e6:	4613      	mov	r3, r2
 80112e8:	009b      	lsls	r3, r3, #2
 80112ea:	4413      	add	r3, r2
 80112ec:	009b      	lsls	r3, r3, #2
 80112ee:	3310      	adds	r3, #16
 80112f0:	687a      	ldr	r2, [r7, #4]
 80112f2:	4413      	add	r3, r2
 80112f4:	3304      	adds	r3, #4
 80112f6:	e00b      	b.n	8011310 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80112f8:	7bbb      	ldrb	r3, [r7, #14]
 80112fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80112fe:	4613      	mov	r3, r2
 8011300:	009b      	lsls	r3, r3, #2
 8011302:	4413      	add	r3, r2
 8011304:	009b      	lsls	r3, r3, #2
 8011306:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801130a:	687a      	ldr	r2, [r7, #4]
 801130c:	4413      	add	r3, r2
 801130e:	3304      	adds	r3, #4
 8011310:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011312:	7bbb      	ldrb	r3, [r7, #14]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d002      	beq.n	801131e <USBD_StdEPReq+0x264>
 8011318:	7bbb      	ldrb	r3, [r7, #14]
 801131a:	2b80      	cmp	r3, #128	@ 0x80
 801131c:	d103      	bne.n	8011326 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 801131e:	68bb      	ldr	r3, [r7, #8]
 8011320:	2200      	movs	r2, #0
 8011322:	601a      	str	r2, [r3, #0]
 8011324:	e00e      	b.n	8011344 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011326:	7bbb      	ldrb	r3, [r7, #14]
 8011328:	4619      	mov	r1, r3
 801132a:	6878      	ldr	r0, [r7, #4]
 801132c:	f001 f836 	bl	801239c <USBD_LL_IsStallEP>
 8011330:	4603      	mov	r3, r0
 8011332:	2b00      	cmp	r3, #0
 8011334:	d003      	beq.n	801133e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8011336:	68bb      	ldr	r3, [r7, #8]
 8011338:	2201      	movs	r2, #1
 801133a:	601a      	str	r2, [r3, #0]
 801133c:	e002      	b.n	8011344 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 801133e:	68bb      	ldr	r3, [r7, #8]
 8011340:	2200      	movs	r2, #0
 8011342:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011344:	68bb      	ldr	r3, [r7, #8]
 8011346:	2202      	movs	r2, #2
 8011348:	4619      	mov	r1, r3
 801134a:	6878      	ldr	r0, [r7, #4]
 801134c:	f000 fbe1 	bl	8011b12 <USBD_CtlSendData>
              break;
 8011350:	e004      	b.n	801135c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8011352:	6839      	ldr	r1, [r7, #0]
 8011354:	6878      	ldr	r0, [r7, #4]
 8011356:	f000 fb6b 	bl	8011a30 <USBD_CtlError>
              break;
 801135a:	bf00      	nop
          }
          break;
 801135c:	e004      	b.n	8011368 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 801135e:	6839      	ldr	r1, [r7, #0]
 8011360:	6878      	ldr	r0, [r7, #4]
 8011362:	f000 fb65 	bl	8011a30 <USBD_CtlError>
          break;
 8011366:	bf00      	nop
      }
      break;
 8011368:	e004      	b.n	8011374 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801136a:	6839      	ldr	r1, [r7, #0]
 801136c:	6878      	ldr	r0, [r7, #4]
 801136e:	f000 fb5f 	bl	8011a30 <USBD_CtlError>
      break;
 8011372:	bf00      	nop
  }

  return ret;
 8011374:	7bfb      	ldrb	r3, [r7, #15]
}
 8011376:	4618      	mov	r0, r3
 8011378:	3710      	adds	r7, #16
 801137a:	46bd      	mov	sp, r7
 801137c:	bd80      	pop	{r7, pc}
	...

08011380 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b084      	sub	sp, #16
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
 8011388:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801138a:	2300      	movs	r3, #0
 801138c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801138e:	2300      	movs	r3, #0
 8011390:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011392:	2300      	movs	r3, #0
 8011394:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011396:	683b      	ldr	r3, [r7, #0]
 8011398:	885b      	ldrh	r3, [r3, #2]
 801139a:	0a1b      	lsrs	r3, r3, #8
 801139c:	b29b      	uxth	r3, r3
 801139e:	3b01      	subs	r3, #1
 80113a0:	2b0e      	cmp	r3, #14
 80113a2:	f200 8152 	bhi.w	801164a <USBD_GetDescriptor+0x2ca>
 80113a6:	a201      	add	r2, pc, #4	@ (adr r2, 80113ac <USBD_GetDescriptor+0x2c>)
 80113a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113ac:	0801141d 	.word	0x0801141d
 80113b0:	08011435 	.word	0x08011435
 80113b4:	08011475 	.word	0x08011475
 80113b8:	0801164b 	.word	0x0801164b
 80113bc:	0801164b 	.word	0x0801164b
 80113c0:	080115eb 	.word	0x080115eb
 80113c4:	08011617 	.word	0x08011617
 80113c8:	0801164b 	.word	0x0801164b
 80113cc:	0801164b 	.word	0x0801164b
 80113d0:	0801164b 	.word	0x0801164b
 80113d4:	0801164b 	.word	0x0801164b
 80113d8:	0801164b 	.word	0x0801164b
 80113dc:	0801164b 	.word	0x0801164b
 80113e0:	0801164b 	.word	0x0801164b
 80113e4:	080113e9 	.word	0x080113e9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80113ee:	69db      	ldr	r3, [r3, #28]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d00b      	beq.n	801140c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80113fa:	69db      	ldr	r3, [r3, #28]
 80113fc:	687a      	ldr	r2, [r7, #4]
 80113fe:	7c12      	ldrb	r2, [r2, #16]
 8011400:	f107 0108 	add.w	r1, r7, #8
 8011404:	4610      	mov	r0, r2
 8011406:	4798      	blx	r3
 8011408:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801140a:	e126      	b.n	801165a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801140c:	6839      	ldr	r1, [r7, #0]
 801140e:	6878      	ldr	r0, [r7, #4]
 8011410:	f000 fb0e 	bl	8011a30 <USBD_CtlError>
        err++;
 8011414:	7afb      	ldrb	r3, [r7, #11]
 8011416:	3301      	adds	r3, #1
 8011418:	72fb      	strb	r3, [r7, #11]
      break;
 801141a:	e11e      	b.n	801165a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	687a      	ldr	r2, [r7, #4]
 8011426:	7c12      	ldrb	r2, [r2, #16]
 8011428:	f107 0108 	add.w	r1, r7, #8
 801142c:	4610      	mov	r0, r2
 801142e:	4798      	blx	r3
 8011430:	60f8      	str	r0, [r7, #12]
      break;
 8011432:	e112      	b.n	801165a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	7c1b      	ldrb	r3, [r3, #16]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d10d      	bne.n	8011458 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011444:	f107 0208 	add.w	r2, r7, #8
 8011448:	4610      	mov	r0, r2
 801144a:	4798      	blx	r3
 801144c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	3301      	adds	r3, #1
 8011452:	2202      	movs	r2, #2
 8011454:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011456:	e100      	b.n	801165a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801145e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011460:	f107 0208 	add.w	r2, r7, #8
 8011464:	4610      	mov	r0, r2
 8011466:	4798      	blx	r3
 8011468:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	3301      	adds	r3, #1
 801146e:	2202      	movs	r2, #2
 8011470:	701a      	strb	r2, [r3, #0]
      break;
 8011472:	e0f2      	b.n	801165a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011474:	683b      	ldr	r3, [r7, #0]
 8011476:	885b      	ldrh	r3, [r3, #2]
 8011478:	b2db      	uxtb	r3, r3
 801147a:	2b05      	cmp	r3, #5
 801147c:	f200 80ac 	bhi.w	80115d8 <USBD_GetDescriptor+0x258>
 8011480:	a201      	add	r2, pc, #4	@ (adr r2, 8011488 <USBD_GetDescriptor+0x108>)
 8011482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011486:	bf00      	nop
 8011488:	080114a1 	.word	0x080114a1
 801148c:	080114d5 	.word	0x080114d5
 8011490:	08011509 	.word	0x08011509
 8011494:	0801153d 	.word	0x0801153d
 8011498:	08011571 	.word	0x08011571
 801149c:	080115a5 	.word	0x080115a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80114a6:	685b      	ldr	r3, [r3, #4]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d00b      	beq.n	80114c4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80114b2:	685b      	ldr	r3, [r3, #4]
 80114b4:	687a      	ldr	r2, [r7, #4]
 80114b6:	7c12      	ldrb	r2, [r2, #16]
 80114b8:	f107 0108 	add.w	r1, r7, #8
 80114bc:	4610      	mov	r0, r2
 80114be:	4798      	blx	r3
 80114c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80114c2:	e091      	b.n	80115e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80114c4:	6839      	ldr	r1, [r7, #0]
 80114c6:	6878      	ldr	r0, [r7, #4]
 80114c8:	f000 fab2 	bl	8011a30 <USBD_CtlError>
            err++;
 80114cc:	7afb      	ldrb	r3, [r7, #11]
 80114ce:	3301      	adds	r3, #1
 80114d0:	72fb      	strb	r3, [r7, #11]
          break;
 80114d2:	e089      	b.n	80115e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80114da:	689b      	ldr	r3, [r3, #8]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d00b      	beq.n	80114f8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80114e6:	689b      	ldr	r3, [r3, #8]
 80114e8:	687a      	ldr	r2, [r7, #4]
 80114ea:	7c12      	ldrb	r2, [r2, #16]
 80114ec:	f107 0108 	add.w	r1, r7, #8
 80114f0:	4610      	mov	r0, r2
 80114f2:	4798      	blx	r3
 80114f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80114f6:	e077      	b.n	80115e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80114f8:	6839      	ldr	r1, [r7, #0]
 80114fa:	6878      	ldr	r0, [r7, #4]
 80114fc:	f000 fa98 	bl	8011a30 <USBD_CtlError>
            err++;
 8011500:	7afb      	ldrb	r3, [r7, #11]
 8011502:	3301      	adds	r3, #1
 8011504:	72fb      	strb	r3, [r7, #11]
          break;
 8011506:	e06f      	b.n	80115e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801150e:	68db      	ldr	r3, [r3, #12]
 8011510:	2b00      	cmp	r3, #0
 8011512:	d00b      	beq.n	801152c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801151a:	68db      	ldr	r3, [r3, #12]
 801151c:	687a      	ldr	r2, [r7, #4]
 801151e:	7c12      	ldrb	r2, [r2, #16]
 8011520:	f107 0108 	add.w	r1, r7, #8
 8011524:	4610      	mov	r0, r2
 8011526:	4798      	blx	r3
 8011528:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801152a:	e05d      	b.n	80115e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801152c:	6839      	ldr	r1, [r7, #0]
 801152e:	6878      	ldr	r0, [r7, #4]
 8011530:	f000 fa7e 	bl	8011a30 <USBD_CtlError>
            err++;
 8011534:	7afb      	ldrb	r3, [r7, #11]
 8011536:	3301      	adds	r3, #1
 8011538:	72fb      	strb	r3, [r7, #11]
          break;
 801153a:	e055      	b.n	80115e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011542:	691b      	ldr	r3, [r3, #16]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d00b      	beq.n	8011560 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801154e:	691b      	ldr	r3, [r3, #16]
 8011550:	687a      	ldr	r2, [r7, #4]
 8011552:	7c12      	ldrb	r2, [r2, #16]
 8011554:	f107 0108 	add.w	r1, r7, #8
 8011558:	4610      	mov	r0, r2
 801155a:	4798      	blx	r3
 801155c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801155e:	e043      	b.n	80115e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011560:	6839      	ldr	r1, [r7, #0]
 8011562:	6878      	ldr	r0, [r7, #4]
 8011564:	f000 fa64 	bl	8011a30 <USBD_CtlError>
            err++;
 8011568:	7afb      	ldrb	r3, [r7, #11]
 801156a:	3301      	adds	r3, #1
 801156c:	72fb      	strb	r3, [r7, #11]
          break;
 801156e:	e03b      	b.n	80115e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011576:	695b      	ldr	r3, [r3, #20]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d00b      	beq.n	8011594 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011582:	695b      	ldr	r3, [r3, #20]
 8011584:	687a      	ldr	r2, [r7, #4]
 8011586:	7c12      	ldrb	r2, [r2, #16]
 8011588:	f107 0108 	add.w	r1, r7, #8
 801158c:	4610      	mov	r0, r2
 801158e:	4798      	blx	r3
 8011590:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011592:	e029      	b.n	80115e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011594:	6839      	ldr	r1, [r7, #0]
 8011596:	6878      	ldr	r0, [r7, #4]
 8011598:	f000 fa4a 	bl	8011a30 <USBD_CtlError>
            err++;
 801159c:	7afb      	ldrb	r3, [r7, #11]
 801159e:	3301      	adds	r3, #1
 80115a0:	72fb      	strb	r3, [r7, #11]
          break;
 80115a2:	e021      	b.n	80115e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80115aa:	699b      	ldr	r3, [r3, #24]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d00b      	beq.n	80115c8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80115b6:	699b      	ldr	r3, [r3, #24]
 80115b8:	687a      	ldr	r2, [r7, #4]
 80115ba:	7c12      	ldrb	r2, [r2, #16]
 80115bc:	f107 0108 	add.w	r1, r7, #8
 80115c0:	4610      	mov	r0, r2
 80115c2:	4798      	blx	r3
 80115c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80115c6:	e00f      	b.n	80115e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80115c8:	6839      	ldr	r1, [r7, #0]
 80115ca:	6878      	ldr	r0, [r7, #4]
 80115cc:	f000 fa30 	bl	8011a30 <USBD_CtlError>
            err++;
 80115d0:	7afb      	ldrb	r3, [r7, #11]
 80115d2:	3301      	adds	r3, #1
 80115d4:	72fb      	strb	r3, [r7, #11]
          break;
 80115d6:	e007      	b.n	80115e8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80115d8:	6839      	ldr	r1, [r7, #0]
 80115da:	6878      	ldr	r0, [r7, #4]
 80115dc:	f000 fa28 	bl	8011a30 <USBD_CtlError>
          err++;
 80115e0:	7afb      	ldrb	r3, [r7, #11]
 80115e2:	3301      	adds	r3, #1
 80115e4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80115e6:	bf00      	nop
      }
      break;
 80115e8:	e037      	b.n	801165a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	7c1b      	ldrb	r3, [r3, #16]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d109      	bne.n	8011606 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80115f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80115fa:	f107 0208 	add.w	r2, r7, #8
 80115fe:	4610      	mov	r0, r2
 8011600:	4798      	blx	r3
 8011602:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011604:	e029      	b.n	801165a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011606:	6839      	ldr	r1, [r7, #0]
 8011608:	6878      	ldr	r0, [r7, #4]
 801160a:	f000 fa11 	bl	8011a30 <USBD_CtlError>
        err++;
 801160e:	7afb      	ldrb	r3, [r7, #11]
 8011610:	3301      	adds	r3, #1
 8011612:	72fb      	strb	r3, [r7, #11]
      break;
 8011614:	e021      	b.n	801165a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	7c1b      	ldrb	r3, [r3, #16]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d10d      	bne.n	801163a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011626:	f107 0208 	add.w	r2, r7, #8
 801162a:	4610      	mov	r0, r2
 801162c:	4798      	blx	r3
 801162e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	3301      	adds	r3, #1
 8011634:	2207      	movs	r2, #7
 8011636:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011638:	e00f      	b.n	801165a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801163a:	6839      	ldr	r1, [r7, #0]
 801163c:	6878      	ldr	r0, [r7, #4]
 801163e:	f000 f9f7 	bl	8011a30 <USBD_CtlError>
        err++;
 8011642:	7afb      	ldrb	r3, [r7, #11]
 8011644:	3301      	adds	r3, #1
 8011646:	72fb      	strb	r3, [r7, #11]
      break;
 8011648:	e007      	b.n	801165a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801164a:	6839      	ldr	r1, [r7, #0]
 801164c:	6878      	ldr	r0, [r7, #4]
 801164e:	f000 f9ef 	bl	8011a30 <USBD_CtlError>
      err++;
 8011652:	7afb      	ldrb	r3, [r7, #11]
 8011654:	3301      	adds	r3, #1
 8011656:	72fb      	strb	r3, [r7, #11]
      break;
 8011658:	bf00      	nop
  }

  if (err != 0U)
 801165a:	7afb      	ldrb	r3, [r7, #11]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d11e      	bne.n	801169e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8011660:	683b      	ldr	r3, [r7, #0]
 8011662:	88db      	ldrh	r3, [r3, #6]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d016      	beq.n	8011696 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8011668:	893b      	ldrh	r3, [r7, #8]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d00e      	beq.n	801168c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801166e:	683b      	ldr	r3, [r7, #0]
 8011670:	88da      	ldrh	r2, [r3, #6]
 8011672:	893b      	ldrh	r3, [r7, #8]
 8011674:	4293      	cmp	r3, r2
 8011676:	bf28      	it	cs
 8011678:	4613      	movcs	r3, r2
 801167a:	b29b      	uxth	r3, r3
 801167c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801167e:	893b      	ldrh	r3, [r7, #8]
 8011680:	461a      	mov	r2, r3
 8011682:	68f9      	ldr	r1, [r7, #12]
 8011684:	6878      	ldr	r0, [r7, #4]
 8011686:	f000 fa44 	bl	8011b12 <USBD_CtlSendData>
 801168a:	e009      	b.n	80116a0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801168c:	6839      	ldr	r1, [r7, #0]
 801168e:	6878      	ldr	r0, [r7, #4]
 8011690:	f000 f9ce 	bl	8011a30 <USBD_CtlError>
 8011694:	e004      	b.n	80116a0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8011696:	6878      	ldr	r0, [r7, #4]
 8011698:	f000 fa95 	bl	8011bc6 <USBD_CtlSendStatus>
 801169c:	e000      	b.n	80116a0 <USBD_GetDescriptor+0x320>
    return;
 801169e:	bf00      	nop
  }
}
 80116a0:	3710      	adds	r7, #16
 80116a2:	46bd      	mov	sp, r7
 80116a4:	bd80      	pop	{r7, pc}
 80116a6:	bf00      	nop

080116a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b084      	sub	sp, #16
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
 80116b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80116b2:	683b      	ldr	r3, [r7, #0]
 80116b4:	889b      	ldrh	r3, [r3, #4]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d131      	bne.n	801171e <USBD_SetAddress+0x76>
 80116ba:	683b      	ldr	r3, [r7, #0]
 80116bc:	88db      	ldrh	r3, [r3, #6]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d12d      	bne.n	801171e <USBD_SetAddress+0x76>
 80116c2:	683b      	ldr	r3, [r7, #0]
 80116c4:	885b      	ldrh	r3, [r3, #2]
 80116c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80116c8:	d829      	bhi.n	801171e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80116ca:	683b      	ldr	r3, [r7, #0]
 80116cc:	885b      	ldrh	r3, [r3, #2]
 80116ce:	b2db      	uxtb	r3, r3
 80116d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80116d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80116dc:	b2db      	uxtb	r3, r3
 80116de:	2b03      	cmp	r3, #3
 80116e0:	d104      	bne.n	80116ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80116e2:	6839      	ldr	r1, [r7, #0]
 80116e4:	6878      	ldr	r0, [r7, #4]
 80116e6:	f000 f9a3 	bl	8011a30 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80116ea:	e01d      	b.n	8011728 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	7bfa      	ldrb	r2, [r7, #15]
 80116f0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80116f4:	7bfb      	ldrb	r3, [r7, #15]
 80116f6:	4619      	mov	r1, r3
 80116f8:	6878      	ldr	r0, [r7, #4]
 80116fa:	f000 fe7b 	bl	80123f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80116fe:	6878      	ldr	r0, [r7, #4]
 8011700:	f000 fa61 	bl	8011bc6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011704:	7bfb      	ldrb	r3, [r7, #15]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d004      	beq.n	8011714 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	2202      	movs	r2, #2
 801170e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011712:	e009      	b.n	8011728 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	2201      	movs	r2, #1
 8011718:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801171c:	e004      	b.n	8011728 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801171e:	6839      	ldr	r1, [r7, #0]
 8011720:	6878      	ldr	r0, [r7, #4]
 8011722:	f000 f985 	bl	8011a30 <USBD_CtlError>
  }
}
 8011726:	bf00      	nop
 8011728:	bf00      	nop
 801172a:	3710      	adds	r7, #16
 801172c:	46bd      	mov	sp, r7
 801172e:	bd80      	pop	{r7, pc}

08011730 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011730:	b580      	push	{r7, lr}
 8011732:	b084      	sub	sp, #16
 8011734:	af00      	add	r7, sp, #0
 8011736:	6078      	str	r0, [r7, #4]
 8011738:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801173a:	2300      	movs	r3, #0
 801173c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801173e:	683b      	ldr	r3, [r7, #0]
 8011740:	885b      	ldrh	r3, [r3, #2]
 8011742:	b2da      	uxtb	r2, r3
 8011744:	4b4c      	ldr	r3, [pc, #304]	@ (8011878 <USBD_SetConfig+0x148>)
 8011746:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011748:	4b4b      	ldr	r3, [pc, #300]	@ (8011878 <USBD_SetConfig+0x148>)
 801174a:	781b      	ldrb	r3, [r3, #0]
 801174c:	2b01      	cmp	r3, #1
 801174e:	d905      	bls.n	801175c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011750:	6839      	ldr	r1, [r7, #0]
 8011752:	6878      	ldr	r0, [r7, #4]
 8011754:	f000 f96c 	bl	8011a30 <USBD_CtlError>
    return USBD_FAIL;
 8011758:	2303      	movs	r3, #3
 801175a:	e088      	b.n	801186e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011762:	b2db      	uxtb	r3, r3
 8011764:	2b02      	cmp	r3, #2
 8011766:	d002      	beq.n	801176e <USBD_SetConfig+0x3e>
 8011768:	2b03      	cmp	r3, #3
 801176a:	d025      	beq.n	80117b8 <USBD_SetConfig+0x88>
 801176c:	e071      	b.n	8011852 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801176e:	4b42      	ldr	r3, [pc, #264]	@ (8011878 <USBD_SetConfig+0x148>)
 8011770:	781b      	ldrb	r3, [r3, #0]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d01c      	beq.n	80117b0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8011776:	4b40      	ldr	r3, [pc, #256]	@ (8011878 <USBD_SetConfig+0x148>)
 8011778:	781b      	ldrb	r3, [r3, #0]
 801177a:	461a      	mov	r2, r3
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011780:	4b3d      	ldr	r3, [pc, #244]	@ (8011878 <USBD_SetConfig+0x148>)
 8011782:	781b      	ldrb	r3, [r3, #0]
 8011784:	4619      	mov	r1, r3
 8011786:	6878      	ldr	r0, [r7, #4]
 8011788:	f7ff f992 	bl	8010ab0 <USBD_SetClassConfig>
 801178c:	4603      	mov	r3, r0
 801178e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011790:	7bfb      	ldrb	r3, [r7, #15]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d004      	beq.n	80117a0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8011796:	6839      	ldr	r1, [r7, #0]
 8011798:	6878      	ldr	r0, [r7, #4]
 801179a:	f000 f949 	bl	8011a30 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801179e:	e065      	b.n	801186c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80117a0:	6878      	ldr	r0, [r7, #4]
 80117a2:	f000 fa10 	bl	8011bc6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	2203      	movs	r2, #3
 80117aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80117ae:	e05d      	b.n	801186c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80117b0:	6878      	ldr	r0, [r7, #4]
 80117b2:	f000 fa08 	bl	8011bc6 <USBD_CtlSendStatus>
      break;
 80117b6:	e059      	b.n	801186c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80117b8:	4b2f      	ldr	r3, [pc, #188]	@ (8011878 <USBD_SetConfig+0x148>)
 80117ba:	781b      	ldrb	r3, [r3, #0]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d112      	bne.n	80117e6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	2202      	movs	r2, #2
 80117c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80117c8:	4b2b      	ldr	r3, [pc, #172]	@ (8011878 <USBD_SetConfig+0x148>)
 80117ca:	781b      	ldrb	r3, [r3, #0]
 80117cc:	461a      	mov	r2, r3
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80117d2:	4b29      	ldr	r3, [pc, #164]	@ (8011878 <USBD_SetConfig+0x148>)
 80117d4:	781b      	ldrb	r3, [r3, #0]
 80117d6:	4619      	mov	r1, r3
 80117d8:	6878      	ldr	r0, [r7, #4]
 80117da:	f7ff f985 	bl	8010ae8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80117de:	6878      	ldr	r0, [r7, #4]
 80117e0:	f000 f9f1 	bl	8011bc6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80117e4:	e042      	b.n	801186c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80117e6:	4b24      	ldr	r3, [pc, #144]	@ (8011878 <USBD_SetConfig+0x148>)
 80117e8:	781b      	ldrb	r3, [r3, #0]
 80117ea:	461a      	mov	r2, r3
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	685b      	ldr	r3, [r3, #4]
 80117f0:	429a      	cmp	r2, r3
 80117f2:	d02a      	beq.n	801184a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	685b      	ldr	r3, [r3, #4]
 80117f8:	b2db      	uxtb	r3, r3
 80117fa:	4619      	mov	r1, r3
 80117fc:	6878      	ldr	r0, [r7, #4]
 80117fe:	f7ff f973 	bl	8010ae8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011802:	4b1d      	ldr	r3, [pc, #116]	@ (8011878 <USBD_SetConfig+0x148>)
 8011804:	781b      	ldrb	r3, [r3, #0]
 8011806:	461a      	mov	r2, r3
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801180c:	4b1a      	ldr	r3, [pc, #104]	@ (8011878 <USBD_SetConfig+0x148>)
 801180e:	781b      	ldrb	r3, [r3, #0]
 8011810:	4619      	mov	r1, r3
 8011812:	6878      	ldr	r0, [r7, #4]
 8011814:	f7ff f94c 	bl	8010ab0 <USBD_SetClassConfig>
 8011818:	4603      	mov	r3, r0
 801181a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801181c:	7bfb      	ldrb	r3, [r7, #15]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d00f      	beq.n	8011842 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8011822:	6839      	ldr	r1, [r7, #0]
 8011824:	6878      	ldr	r0, [r7, #4]
 8011826:	f000 f903 	bl	8011a30 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	685b      	ldr	r3, [r3, #4]
 801182e:	b2db      	uxtb	r3, r3
 8011830:	4619      	mov	r1, r3
 8011832:	6878      	ldr	r0, [r7, #4]
 8011834:	f7ff f958 	bl	8010ae8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	2202      	movs	r2, #2
 801183c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011840:	e014      	b.n	801186c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8011842:	6878      	ldr	r0, [r7, #4]
 8011844:	f000 f9bf 	bl	8011bc6 <USBD_CtlSendStatus>
      break;
 8011848:	e010      	b.n	801186c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801184a:	6878      	ldr	r0, [r7, #4]
 801184c:	f000 f9bb 	bl	8011bc6 <USBD_CtlSendStatus>
      break;
 8011850:	e00c      	b.n	801186c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8011852:	6839      	ldr	r1, [r7, #0]
 8011854:	6878      	ldr	r0, [r7, #4]
 8011856:	f000 f8eb 	bl	8011a30 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801185a:	4b07      	ldr	r3, [pc, #28]	@ (8011878 <USBD_SetConfig+0x148>)
 801185c:	781b      	ldrb	r3, [r3, #0]
 801185e:	4619      	mov	r1, r3
 8011860:	6878      	ldr	r0, [r7, #4]
 8011862:	f7ff f941 	bl	8010ae8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8011866:	2303      	movs	r3, #3
 8011868:	73fb      	strb	r3, [r7, #15]
      break;
 801186a:	bf00      	nop
  }

  return ret;
 801186c:	7bfb      	ldrb	r3, [r7, #15]
}
 801186e:	4618      	mov	r0, r3
 8011870:	3710      	adds	r7, #16
 8011872:	46bd      	mov	sp, r7
 8011874:	bd80      	pop	{r7, pc}
 8011876:	bf00      	nop
 8011878:	20002b90 	.word	0x20002b90

0801187c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801187c:	b580      	push	{r7, lr}
 801187e:	b082      	sub	sp, #8
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
 8011884:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011886:	683b      	ldr	r3, [r7, #0]
 8011888:	88db      	ldrh	r3, [r3, #6]
 801188a:	2b01      	cmp	r3, #1
 801188c:	d004      	beq.n	8011898 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801188e:	6839      	ldr	r1, [r7, #0]
 8011890:	6878      	ldr	r0, [r7, #4]
 8011892:	f000 f8cd 	bl	8011a30 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8011896:	e023      	b.n	80118e0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801189e:	b2db      	uxtb	r3, r3
 80118a0:	2b02      	cmp	r3, #2
 80118a2:	dc02      	bgt.n	80118aa <USBD_GetConfig+0x2e>
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	dc03      	bgt.n	80118b0 <USBD_GetConfig+0x34>
 80118a8:	e015      	b.n	80118d6 <USBD_GetConfig+0x5a>
 80118aa:	2b03      	cmp	r3, #3
 80118ac:	d00b      	beq.n	80118c6 <USBD_GetConfig+0x4a>
 80118ae:	e012      	b.n	80118d6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	2200      	movs	r2, #0
 80118b4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	3308      	adds	r3, #8
 80118ba:	2201      	movs	r2, #1
 80118bc:	4619      	mov	r1, r3
 80118be:	6878      	ldr	r0, [r7, #4]
 80118c0:	f000 f927 	bl	8011b12 <USBD_CtlSendData>
        break;
 80118c4:	e00c      	b.n	80118e0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	3304      	adds	r3, #4
 80118ca:	2201      	movs	r2, #1
 80118cc:	4619      	mov	r1, r3
 80118ce:	6878      	ldr	r0, [r7, #4]
 80118d0:	f000 f91f 	bl	8011b12 <USBD_CtlSendData>
        break;
 80118d4:	e004      	b.n	80118e0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80118d6:	6839      	ldr	r1, [r7, #0]
 80118d8:	6878      	ldr	r0, [r7, #4]
 80118da:	f000 f8a9 	bl	8011a30 <USBD_CtlError>
        break;
 80118de:	bf00      	nop
}
 80118e0:	bf00      	nop
 80118e2:	3708      	adds	r7, #8
 80118e4:	46bd      	mov	sp, r7
 80118e6:	bd80      	pop	{r7, pc}

080118e8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b082      	sub	sp, #8
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	6078      	str	r0, [r7, #4]
 80118f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80118f8:	b2db      	uxtb	r3, r3
 80118fa:	3b01      	subs	r3, #1
 80118fc:	2b02      	cmp	r3, #2
 80118fe:	d81e      	bhi.n	801193e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011900:	683b      	ldr	r3, [r7, #0]
 8011902:	88db      	ldrh	r3, [r3, #6]
 8011904:	2b02      	cmp	r3, #2
 8011906:	d004      	beq.n	8011912 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011908:	6839      	ldr	r1, [r7, #0]
 801190a:	6878      	ldr	r0, [r7, #4]
 801190c:	f000 f890 	bl	8011a30 <USBD_CtlError>
        break;
 8011910:	e01a      	b.n	8011948 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	2201      	movs	r2, #1
 8011916:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801191e:	2b00      	cmp	r3, #0
 8011920:	d005      	beq.n	801192e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	68db      	ldr	r3, [r3, #12]
 8011926:	f043 0202 	orr.w	r2, r3, #2
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	330c      	adds	r3, #12
 8011932:	2202      	movs	r2, #2
 8011934:	4619      	mov	r1, r3
 8011936:	6878      	ldr	r0, [r7, #4]
 8011938:	f000 f8eb 	bl	8011b12 <USBD_CtlSendData>
      break;
 801193c:	e004      	b.n	8011948 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801193e:	6839      	ldr	r1, [r7, #0]
 8011940:	6878      	ldr	r0, [r7, #4]
 8011942:	f000 f875 	bl	8011a30 <USBD_CtlError>
      break;
 8011946:	bf00      	nop
  }
}
 8011948:	bf00      	nop
 801194a:	3708      	adds	r7, #8
 801194c:	46bd      	mov	sp, r7
 801194e:	bd80      	pop	{r7, pc}

08011950 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011950:	b580      	push	{r7, lr}
 8011952:	b082      	sub	sp, #8
 8011954:	af00      	add	r7, sp, #0
 8011956:	6078      	str	r0, [r7, #4]
 8011958:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801195a:	683b      	ldr	r3, [r7, #0]
 801195c:	885b      	ldrh	r3, [r3, #2]
 801195e:	2b01      	cmp	r3, #1
 8011960:	d106      	bne.n	8011970 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	2201      	movs	r2, #1
 8011966:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801196a:	6878      	ldr	r0, [r7, #4]
 801196c:	f000 f92b 	bl	8011bc6 <USBD_CtlSendStatus>
  }
}
 8011970:	bf00      	nop
 8011972:	3708      	adds	r7, #8
 8011974:	46bd      	mov	sp, r7
 8011976:	bd80      	pop	{r7, pc}

08011978 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011978:	b580      	push	{r7, lr}
 801197a:	b082      	sub	sp, #8
 801197c:	af00      	add	r7, sp, #0
 801197e:	6078      	str	r0, [r7, #4]
 8011980:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011988:	b2db      	uxtb	r3, r3
 801198a:	3b01      	subs	r3, #1
 801198c:	2b02      	cmp	r3, #2
 801198e:	d80b      	bhi.n	80119a8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011990:	683b      	ldr	r3, [r7, #0]
 8011992:	885b      	ldrh	r3, [r3, #2]
 8011994:	2b01      	cmp	r3, #1
 8011996:	d10c      	bne.n	80119b2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	2200      	movs	r2, #0
 801199c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80119a0:	6878      	ldr	r0, [r7, #4]
 80119a2:	f000 f910 	bl	8011bc6 <USBD_CtlSendStatus>
      }
      break;
 80119a6:	e004      	b.n	80119b2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80119a8:	6839      	ldr	r1, [r7, #0]
 80119aa:	6878      	ldr	r0, [r7, #4]
 80119ac:	f000 f840 	bl	8011a30 <USBD_CtlError>
      break;
 80119b0:	e000      	b.n	80119b4 <USBD_ClrFeature+0x3c>
      break;
 80119b2:	bf00      	nop
  }
}
 80119b4:	bf00      	nop
 80119b6:	3708      	adds	r7, #8
 80119b8:	46bd      	mov	sp, r7
 80119ba:	bd80      	pop	{r7, pc}

080119bc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80119bc:	b580      	push	{r7, lr}
 80119be:	b084      	sub	sp, #16
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	6078      	str	r0, [r7, #4]
 80119c4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80119c6:	683b      	ldr	r3, [r7, #0]
 80119c8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	781a      	ldrb	r2, [r3, #0]
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	3301      	adds	r3, #1
 80119d6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	781a      	ldrb	r2, [r3, #0]
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	3301      	adds	r3, #1
 80119e4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80119e6:	68f8      	ldr	r0, [r7, #12]
 80119e8:	f7ff fa92 	bl	8010f10 <SWAPBYTE>
 80119ec:	4603      	mov	r3, r0
 80119ee:	461a      	mov	r2, r3
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	3301      	adds	r3, #1
 80119f8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	3301      	adds	r3, #1
 80119fe:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011a00:	68f8      	ldr	r0, [r7, #12]
 8011a02:	f7ff fa85 	bl	8010f10 <SWAPBYTE>
 8011a06:	4603      	mov	r3, r0
 8011a08:	461a      	mov	r2, r3
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	3301      	adds	r3, #1
 8011a12:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	3301      	adds	r3, #1
 8011a18:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011a1a:	68f8      	ldr	r0, [r7, #12]
 8011a1c:	f7ff fa78 	bl	8010f10 <SWAPBYTE>
 8011a20:	4603      	mov	r3, r0
 8011a22:	461a      	mov	r2, r3
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	80da      	strh	r2, [r3, #6]
}
 8011a28:	bf00      	nop
 8011a2a:	3710      	adds	r7, #16
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	bd80      	pop	{r7, pc}

08011a30 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b082      	sub	sp, #8
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
 8011a38:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011a3a:	2180      	movs	r1, #128	@ 0x80
 8011a3c:	6878      	ldr	r0, [r7, #4]
 8011a3e:	f000 fc6f 	bl	8012320 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011a42:	2100      	movs	r1, #0
 8011a44:	6878      	ldr	r0, [r7, #4]
 8011a46:	f000 fc6b 	bl	8012320 <USBD_LL_StallEP>
}
 8011a4a:	bf00      	nop
 8011a4c:	3708      	adds	r7, #8
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	bd80      	pop	{r7, pc}

08011a52 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011a52:	b580      	push	{r7, lr}
 8011a54:	b086      	sub	sp, #24
 8011a56:	af00      	add	r7, sp, #0
 8011a58:	60f8      	str	r0, [r7, #12]
 8011a5a:	60b9      	str	r1, [r7, #8]
 8011a5c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011a5e:	2300      	movs	r3, #0
 8011a60:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d036      	beq.n	8011ad6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011a6c:	6938      	ldr	r0, [r7, #16]
 8011a6e:	f000 f836 	bl	8011ade <USBD_GetLen>
 8011a72:	4603      	mov	r3, r0
 8011a74:	3301      	adds	r3, #1
 8011a76:	b29b      	uxth	r3, r3
 8011a78:	005b      	lsls	r3, r3, #1
 8011a7a:	b29a      	uxth	r2, r3
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011a80:	7dfb      	ldrb	r3, [r7, #23]
 8011a82:	68ba      	ldr	r2, [r7, #8]
 8011a84:	4413      	add	r3, r2
 8011a86:	687a      	ldr	r2, [r7, #4]
 8011a88:	7812      	ldrb	r2, [r2, #0]
 8011a8a:	701a      	strb	r2, [r3, #0]
  idx++;
 8011a8c:	7dfb      	ldrb	r3, [r7, #23]
 8011a8e:	3301      	adds	r3, #1
 8011a90:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011a92:	7dfb      	ldrb	r3, [r7, #23]
 8011a94:	68ba      	ldr	r2, [r7, #8]
 8011a96:	4413      	add	r3, r2
 8011a98:	2203      	movs	r2, #3
 8011a9a:	701a      	strb	r2, [r3, #0]
  idx++;
 8011a9c:	7dfb      	ldrb	r3, [r7, #23]
 8011a9e:	3301      	adds	r3, #1
 8011aa0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011aa2:	e013      	b.n	8011acc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8011aa4:	7dfb      	ldrb	r3, [r7, #23]
 8011aa6:	68ba      	ldr	r2, [r7, #8]
 8011aa8:	4413      	add	r3, r2
 8011aaa:	693a      	ldr	r2, [r7, #16]
 8011aac:	7812      	ldrb	r2, [r2, #0]
 8011aae:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011ab0:	693b      	ldr	r3, [r7, #16]
 8011ab2:	3301      	adds	r3, #1
 8011ab4:	613b      	str	r3, [r7, #16]
    idx++;
 8011ab6:	7dfb      	ldrb	r3, [r7, #23]
 8011ab8:	3301      	adds	r3, #1
 8011aba:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011abc:	7dfb      	ldrb	r3, [r7, #23]
 8011abe:	68ba      	ldr	r2, [r7, #8]
 8011ac0:	4413      	add	r3, r2
 8011ac2:	2200      	movs	r2, #0
 8011ac4:	701a      	strb	r2, [r3, #0]
    idx++;
 8011ac6:	7dfb      	ldrb	r3, [r7, #23]
 8011ac8:	3301      	adds	r3, #1
 8011aca:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011acc:	693b      	ldr	r3, [r7, #16]
 8011ace:	781b      	ldrb	r3, [r3, #0]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d1e7      	bne.n	8011aa4 <USBD_GetString+0x52>
 8011ad4:	e000      	b.n	8011ad8 <USBD_GetString+0x86>
    return;
 8011ad6:	bf00      	nop
  }
}
 8011ad8:	3718      	adds	r7, #24
 8011ada:	46bd      	mov	sp, r7
 8011adc:	bd80      	pop	{r7, pc}

08011ade <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011ade:	b480      	push	{r7}
 8011ae0:	b085      	sub	sp, #20
 8011ae2:	af00      	add	r7, sp, #0
 8011ae4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011aee:	e005      	b.n	8011afc <USBD_GetLen+0x1e>
  {
    len++;
 8011af0:	7bfb      	ldrb	r3, [r7, #15]
 8011af2:	3301      	adds	r3, #1
 8011af4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011af6:	68bb      	ldr	r3, [r7, #8]
 8011af8:	3301      	adds	r3, #1
 8011afa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011afc:	68bb      	ldr	r3, [r7, #8]
 8011afe:	781b      	ldrb	r3, [r3, #0]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d1f5      	bne.n	8011af0 <USBD_GetLen+0x12>
  }

  return len;
 8011b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b06:	4618      	mov	r0, r3
 8011b08:	3714      	adds	r7, #20
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b10:	4770      	bx	lr

08011b12 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011b12:	b580      	push	{r7, lr}
 8011b14:	b084      	sub	sp, #16
 8011b16:	af00      	add	r7, sp, #0
 8011b18:	60f8      	str	r0, [r7, #12]
 8011b1a:	60b9      	str	r1, [r7, #8]
 8011b1c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	2202      	movs	r2, #2
 8011b22:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	687a      	ldr	r2, [r7, #4]
 8011b2a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	687a      	ldr	r2, [r7, #4]
 8011b30:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	68ba      	ldr	r2, [r7, #8]
 8011b36:	2100      	movs	r1, #0
 8011b38:	68f8      	ldr	r0, [r7, #12]
 8011b3a:	f000 fc7a 	bl	8012432 <USBD_LL_Transmit>

  return USBD_OK;
 8011b3e:	2300      	movs	r3, #0
}
 8011b40:	4618      	mov	r0, r3
 8011b42:	3710      	adds	r7, #16
 8011b44:	46bd      	mov	sp, r7
 8011b46:	bd80      	pop	{r7, pc}

08011b48 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b084      	sub	sp, #16
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	60f8      	str	r0, [r7, #12]
 8011b50:	60b9      	str	r1, [r7, #8]
 8011b52:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	68ba      	ldr	r2, [r7, #8]
 8011b58:	2100      	movs	r1, #0
 8011b5a:	68f8      	ldr	r0, [r7, #12]
 8011b5c:	f000 fc69 	bl	8012432 <USBD_LL_Transmit>

  return USBD_OK;
 8011b60:	2300      	movs	r3, #0
}
 8011b62:	4618      	mov	r0, r3
 8011b64:	3710      	adds	r7, #16
 8011b66:	46bd      	mov	sp, r7
 8011b68:	bd80      	pop	{r7, pc}

08011b6a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011b6a:	b580      	push	{r7, lr}
 8011b6c:	b084      	sub	sp, #16
 8011b6e:	af00      	add	r7, sp, #0
 8011b70:	60f8      	str	r0, [r7, #12]
 8011b72:	60b9      	str	r1, [r7, #8]
 8011b74:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	2203      	movs	r2, #3
 8011b7a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	687a      	ldr	r2, [r7, #4]
 8011b82:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	687a      	ldr	r2, [r7, #4]
 8011b8a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	68ba      	ldr	r2, [r7, #8]
 8011b92:	2100      	movs	r1, #0
 8011b94:	68f8      	ldr	r0, [r7, #12]
 8011b96:	f000 fc6d 	bl	8012474 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011b9a:	2300      	movs	r3, #0
}
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	3710      	adds	r7, #16
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	bd80      	pop	{r7, pc}

08011ba4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b084      	sub	sp, #16
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	60f8      	str	r0, [r7, #12]
 8011bac:	60b9      	str	r1, [r7, #8]
 8011bae:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	68ba      	ldr	r2, [r7, #8]
 8011bb4:	2100      	movs	r1, #0
 8011bb6:	68f8      	ldr	r0, [r7, #12]
 8011bb8:	f000 fc5c 	bl	8012474 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011bbc:	2300      	movs	r3, #0
}
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	3710      	adds	r7, #16
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	bd80      	pop	{r7, pc}

08011bc6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011bc6:	b580      	push	{r7, lr}
 8011bc8:	b082      	sub	sp, #8
 8011bca:	af00      	add	r7, sp, #0
 8011bcc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	2204      	movs	r2, #4
 8011bd2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	2200      	movs	r2, #0
 8011bda:	2100      	movs	r1, #0
 8011bdc:	6878      	ldr	r0, [r7, #4]
 8011bde:	f000 fc28 	bl	8012432 <USBD_LL_Transmit>

  return USBD_OK;
 8011be2:	2300      	movs	r3, #0
}
 8011be4:	4618      	mov	r0, r3
 8011be6:	3708      	adds	r7, #8
 8011be8:	46bd      	mov	sp, r7
 8011bea:	bd80      	pop	{r7, pc}

08011bec <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b082      	sub	sp, #8
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	2205      	movs	r2, #5
 8011bf8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	2200      	movs	r2, #0
 8011c00:	2100      	movs	r1, #0
 8011c02:	6878      	ldr	r0, [r7, #4]
 8011c04:	f000 fc36 	bl	8012474 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011c08:	2300      	movs	r3, #0
}
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	3708      	adds	r7, #8
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	bd80      	pop	{r7, pc}
	...

08011c14 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8011c18:	2200      	movs	r2, #0
 8011c1a:	4912      	ldr	r1, [pc, #72]	@ (8011c64 <MX_USB_Device_Init+0x50>)
 8011c1c:	4812      	ldr	r0, [pc, #72]	@ (8011c68 <MX_USB_Device_Init+0x54>)
 8011c1e:	f7fe fed9 	bl	80109d4 <USBD_Init>
 8011c22:	4603      	mov	r3, r0
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d001      	beq.n	8011c2c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8011c28:	f7f0 fe66 	bl	80028f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8011c2c:	490f      	ldr	r1, [pc, #60]	@ (8011c6c <MX_USB_Device_Init+0x58>)
 8011c2e:	480e      	ldr	r0, [pc, #56]	@ (8011c68 <MX_USB_Device_Init+0x54>)
 8011c30:	f7fe ff00 	bl	8010a34 <USBD_RegisterClass>
 8011c34:	4603      	mov	r3, r0
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d001      	beq.n	8011c3e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8011c3a:	f7f0 fe5d 	bl	80028f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8011c3e:	490c      	ldr	r1, [pc, #48]	@ (8011c70 <MX_USB_Device_Init+0x5c>)
 8011c40:	4809      	ldr	r0, [pc, #36]	@ (8011c68 <MX_USB_Device_Init+0x54>)
 8011c42:	f7fe fe51 	bl	80108e8 <USBD_CDC_RegisterInterface>
 8011c46:	4603      	mov	r3, r0
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d001      	beq.n	8011c50 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8011c4c:	f7f0 fe54 	bl	80028f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8011c50:	4805      	ldr	r0, [pc, #20]	@ (8011c68 <MX_USB_Device_Init+0x54>)
 8011c52:	f7fe ff16 	bl	8010a82 <USBD_Start>
 8011c56:	4603      	mov	r3, r0
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d001      	beq.n	8011c60 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8011c5c:	f7f0 fe4c 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8011c60:	bf00      	nop
 8011c62:	bd80      	pop	{r7, pc}
 8011c64:	20000178 	.word	0x20000178
 8011c68:	20002b94 	.word	0x20002b94
 8011c6c:	20000060 	.word	0x20000060
 8011c70:	20000164 	.word	0x20000164

08011c74 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011c74:	b580      	push	{r7, lr}
 8011c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011c78:	2200      	movs	r2, #0
 8011c7a:	4905      	ldr	r1, [pc, #20]	@ (8011c90 <CDC_Init_FS+0x1c>)
 8011c7c:	4805      	ldr	r0, [pc, #20]	@ (8011c94 <CDC_Init_FS+0x20>)
 8011c7e:	f7fe fe48 	bl	8010912 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011c82:	4905      	ldr	r1, [pc, #20]	@ (8011c98 <CDC_Init_FS+0x24>)
 8011c84:	4803      	ldr	r0, [pc, #12]	@ (8011c94 <CDC_Init_FS+0x20>)
 8011c86:	f7fe fe62 	bl	801094e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011c8a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	bd80      	pop	{r7, pc}
 8011c90:	20003264 	.word	0x20003264
 8011c94:	20002b94 	.word	0x20002b94
 8011c98:	20002e64 	.word	0x20002e64

08011c9c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011c9c:	b480      	push	{r7}
 8011c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011ca0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011caa:	4770      	bx	lr

08011cac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011cac:	b480      	push	{r7}
 8011cae:	b083      	sub	sp, #12
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	6039      	str	r1, [r7, #0]
 8011cb6:	71fb      	strb	r3, [r7, #7]
 8011cb8:	4613      	mov	r3, r2
 8011cba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011cbc:	79fb      	ldrb	r3, [r7, #7]
 8011cbe:	2b23      	cmp	r3, #35	@ 0x23
 8011cc0:	d84a      	bhi.n	8011d58 <CDC_Control_FS+0xac>
 8011cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8011cc8 <CDC_Control_FS+0x1c>)
 8011cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cc8:	08011d59 	.word	0x08011d59
 8011ccc:	08011d59 	.word	0x08011d59
 8011cd0:	08011d59 	.word	0x08011d59
 8011cd4:	08011d59 	.word	0x08011d59
 8011cd8:	08011d59 	.word	0x08011d59
 8011cdc:	08011d59 	.word	0x08011d59
 8011ce0:	08011d59 	.word	0x08011d59
 8011ce4:	08011d59 	.word	0x08011d59
 8011ce8:	08011d59 	.word	0x08011d59
 8011cec:	08011d59 	.word	0x08011d59
 8011cf0:	08011d59 	.word	0x08011d59
 8011cf4:	08011d59 	.word	0x08011d59
 8011cf8:	08011d59 	.word	0x08011d59
 8011cfc:	08011d59 	.word	0x08011d59
 8011d00:	08011d59 	.word	0x08011d59
 8011d04:	08011d59 	.word	0x08011d59
 8011d08:	08011d59 	.word	0x08011d59
 8011d0c:	08011d59 	.word	0x08011d59
 8011d10:	08011d59 	.word	0x08011d59
 8011d14:	08011d59 	.word	0x08011d59
 8011d18:	08011d59 	.word	0x08011d59
 8011d1c:	08011d59 	.word	0x08011d59
 8011d20:	08011d59 	.word	0x08011d59
 8011d24:	08011d59 	.word	0x08011d59
 8011d28:	08011d59 	.word	0x08011d59
 8011d2c:	08011d59 	.word	0x08011d59
 8011d30:	08011d59 	.word	0x08011d59
 8011d34:	08011d59 	.word	0x08011d59
 8011d38:	08011d59 	.word	0x08011d59
 8011d3c:	08011d59 	.word	0x08011d59
 8011d40:	08011d59 	.word	0x08011d59
 8011d44:	08011d59 	.word	0x08011d59
 8011d48:	08011d59 	.word	0x08011d59
 8011d4c:	08011d59 	.word	0x08011d59
 8011d50:	08011d59 	.word	0x08011d59
 8011d54:	08011d59 	.word	0x08011d59
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011d58:	bf00      	nop
  }

  return (USBD_OK);
 8011d5a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	370c      	adds	r7, #12
 8011d60:	46bd      	mov	sp, r7
 8011d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d66:	4770      	bx	lr

08011d68 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b082      	sub	sp, #8
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]
 8011d70:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011d72:	6879      	ldr	r1, [r7, #4]
 8011d74:	4805      	ldr	r0, [pc, #20]	@ (8011d8c <CDC_Receive_FS+0x24>)
 8011d76:	f7fe fdea 	bl	801094e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011d7a:	4804      	ldr	r0, [pc, #16]	@ (8011d8c <CDC_Receive_FS+0x24>)
 8011d7c:	f7fe fe00 	bl	8010980 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011d80:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011d82:	4618      	mov	r0, r3
 8011d84:	3708      	adds	r7, #8
 8011d86:	46bd      	mov	sp, r7
 8011d88:	bd80      	pop	{r7, pc}
 8011d8a:	bf00      	nop
 8011d8c:	20002b94 	.word	0x20002b94

08011d90 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011d90:	b480      	push	{r7}
 8011d92:	b087      	sub	sp, #28
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	60f8      	str	r0, [r7, #12]
 8011d98:	60b9      	str	r1, [r7, #8]
 8011d9a:	4613      	mov	r3, r2
 8011d9c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011d9e:	2300      	movs	r3, #0
 8011da0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011da2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011da6:	4618      	mov	r0, r3
 8011da8:	371c      	adds	r7, #28
 8011daa:	46bd      	mov	sp, r7
 8011dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db0:	4770      	bx	lr
	...

08011db4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011db4:	b480      	push	{r7}
 8011db6:	b083      	sub	sp, #12
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	4603      	mov	r3, r0
 8011dbc:	6039      	str	r1, [r7, #0]
 8011dbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8011dc0:	683b      	ldr	r3, [r7, #0]
 8011dc2:	2212      	movs	r2, #18
 8011dc4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8011dc6:	4b03      	ldr	r3, [pc, #12]	@ (8011dd4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8011dc8:	4618      	mov	r0, r3
 8011dca:	370c      	adds	r7, #12
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd2:	4770      	bx	lr
 8011dd4:	20000198 	.word	0x20000198

08011dd8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011dd8:	b480      	push	{r7}
 8011dda:	b083      	sub	sp, #12
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	4603      	mov	r3, r0
 8011de0:	6039      	str	r1, [r7, #0]
 8011de2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011de4:	683b      	ldr	r3, [r7, #0]
 8011de6:	2204      	movs	r2, #4
 8011de8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011dea:	4b03      	ldr	r3, [pc, #12]	@ (8011df8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8011dec:	4618      	mov	r0, r3
 8011dee:	370c      	adds	r7, #12
 8011df0:	46bd      	mov	sp, r7
 8011df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df6:	4770      	bx	lr
 8011df8:	200001ac 	.word	0x200001ac

08011dfc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b082      	sub	sp, #8
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	4603      	mov	r3, r0
 8011e04:	6039      	str	r1, [r7, #0]
 8011e06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011e08:	79fb      	ldrb	r3, [r7, #7]
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d105      	bne.n	8011e1a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011e0e:	683a      	ldr	r2, [r7, #0]
 8011e10:	4907      	ldr	r1, [pc, #28]	@ (8011e30 <USBD_CDC_ProductStrDescriptor+0x34>)
 8011e12:	4808      	ldr	r0, [pc, #32]	@ (8011e34 <USBD_CDC_ProductStrDescriptor+0x38>)
 8011e14:	f7ff fe1d 	bl	8011a52 <USBD_GetString>
 8011e18:	e004      	b.n	8011e24 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011e1a:	683a      	ldr	r2, [r7, #0]
 8011e1c:	4904      	ldr	r1, [pc, #16]	@ (8011e30 <USBD_CDC_ProductStrDescriptor+0x34>)
 8011e1e:	4805      	ldr	r0, [pc, #20]	@ (8011e34 <USBD_CDC_ProductStrDescriptor+0x38>)
 8011e20:	f7ff fe17 	bl	8011a52 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011e24:	4b02      	ldr	r3, [pc, #8]	@ (8011e30 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8011e26:	4618      	mov	r0, r3
 8011e28:	3708      	adds	r7, #8
 8011e2a:	46bd      	mov	sp, r7
 8011e2c:	bd80      	pop	{r7, pc}
 8011e2e:	bf00      	nop
 8011e30:	20003664 	.word	0x20003664
 8011e34:	08016ee0 	.word	0x08016ee0

08011e38 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b082      	sub	sp, #8
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	4603      	mov	r3, r0
 8011e40:	6039      	str	r1, [r7, #0]
 8011e42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011e44:	683a      	ldr	r2, [r7, #0]
 8011e46:	4904      	ldr	r1, [pc, #16]	@ (8011e58 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8011e48:	4804      	ldr	r0, [pc, #16]	@ (8011e5c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8011e4a:	f7ff fe02 	bl	8011a52 <USBD_GetString>
  return USBD_StrDesc;
 8011e4e:	4b02      	ldr	r3, [pc, #8]	@ (8011e58 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8011e50:	4618      	mov	r0, r3
 8011e52:	3708      	adds	r7, #8
 8011e54:	46bd      	mov	sp, r7
 8011e56:	bd80      	pop	{r7, pc}
 8011e58:	20003664 	.word	0x20003664
 8011e5c:	08016ef8 	.word	0x08016ef8

08011e60 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b082      	sub	sp, #8
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	4603      	mov	r3, r0
 8011e68:	6039      	str	r1, [r7, #0]
 8011e6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011e6c:	683b      	ldr	r3, [r7, #0]
 8011e6e:	221a      	movs	r2, #26
 8011e70:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011e72:	f000 f843 	bl	8011efc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8011e76:	4b02      	ldr	r3, [pc, #8]	@ (8011e80 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8011e78:	4618      	mov	r0, r3
 8011e7a:	3708      	adds	r7, #8
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	bd80      	pop	{r7, pc}
 8011e80:	200001b0 	.word	0x200001b0

08011e84 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011e84:	b580      	push	{r7, lr}
 8011e86:	b082      	sub	sp, #8
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	4603      	mov	r3, r0
 8011e8c:	6039      	str	r1, [r7, #0]
 8011e8e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011e90:	79fb      	ldrb	r3, [r7, #7]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d105      	bne.n	8011ea2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8011e96:	683a      	ldr	r2, [r7, #0]
 8011e98:	4907      	ldr	r1, [pc, #28]	@ (8011eb8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8011e9a:	4808      	ldr	r0, [pc, #32]	@ (8011ebc <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011e9c:	f7ff fdd9 	bl	8011a52 <USBD_GetString>
 8011ea0:	e004      	b.n	8011eac <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8011ea2:	683a      	ldr	r2, [r7, #0]
 8011ea4:	4904      	ldr	r1, [pc, #16]	@ (8011eb8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8011ea6:	4805      	ldr	r0, [pc, #20]	@ (8011ebc <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011ea8:	f7ff fdd3 	bl	8011a52 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011eac:	4b02      	ldr	r3, [pc, #8]	@ (8011eb8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8011eae:	4618      	mov	r0, r3
 8011eb0:	3708      	adds	r7, #8
 8011eb2:	46bd      	mov	sp, r7
 8011eb4:	bd80      	pop	{r7, pc}
 8011eb6:	bf00      	nop
 8011eb8:	20003664 	.word	0x20003664
 8011ebc:	08016f0c 	.word	0x08016f0c

08011ec0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b082      	sub	sp, #8
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	6039      	str	r1, [r7, #0]
 8011eca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011ecc:	79fb      	ldrb	r3, [r7, #7]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d105      	bne.n	8011ede <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8011ed2:	683a      	ldr	r2, [r7, #0]
 8011ed4:	4907      	ldr	r1, [pc, #28]	@ (8011ef4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8011ed6:	4808      	ldr	r0, [pc, #32]	@ (8011ef8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8011ed8:	f7ff fdbb 	bl	8011a52 <USBD_GetString>
 8011edc:	e004      	b.n	8011ee8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8011ede:	683a      	ldr	r2, [r7, #0]
 8011ee0:	4904      	ldr	r1, [pc, #16]	@ (8011ef4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8011ee2:	4805      	ldr	r0, [pc, #20]	@ (8011ef8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8011ee4:	f7ff fdb5 	bl	8011a52 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011ee8:	4b02      	ldr	r3, [pc, #8]	@ (8011ef4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8011eea:	4618      	mov	r0, r3
 8011eec:	3708      	adds	r7, #8
 8011eee:	46bd      	mov	sp, r7
 8011ef0:	bd80      	pop	{r7, pc}
 8011ef2:	bf00      	nop
 8011ef4:	20003664 	.word	0x20003664
 8011ef8:	08016f18 	.word	0x08016f18

08011efc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b084      	sub	sp, #16
 8011f00:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011f02:	4b0f      	ldr	r3, [pc, #60]	@ (8011f40 <Get_SerialNum+0x44>)
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011f08:	4b0e      	ldr	r3, [pc, #56]	@ (8011f44 <Get_SerialNum+0x48>)
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8011f48 <Get_SerialNum+0x4c>)
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011f14:	68fa      	ldr	r2, [r7, #12]
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	4413      	add	r3, r2
 8011f1a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d009      	beq.n	8011f36 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011f22:	2208      	movs	r2, #8
 8011f24:	4909      	ldr	r1, [pc, #36]	@ (8011f4c <Get_SerialNum+0x50>)
 8011f26:	68f8      	ldr	r0, [r7, #12]
 8011f28:	f000 f814 	bl	8011f54 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011f2c:	2204      	movs	r2, #4
 8011f2e:	4908      	ldr	r1, [pc, #32]	@ (8011f50 <Get_SerialNum+0x54>)
 8011f30:	68b8      	ldr	r0, [r7, #8]
 8011f32:	f000 f80f 	bl	8011f54 <IntToUnicode>
  }
}
 8011f36:	bf00      	nop
 8011f38:	3710      	adds	r7, #16
 8011f3a:	46bd      	mov	sp, r7
 8011f3c:	bd80      	pop	{r7, pc}
 8011f3e:	bf00      	nop
 8011f40:	1fff7590 	.word	0x1fff7590
 8011f44:	1fff7594 	.word	0x1fff7594
 8011f48:	1fff7598 	.word	0x1fff7598
 8011f4c:	200001b2 	.word	0x200001b2
 8011f50:	200001c2 	.word	0x200001c2

08011f54 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011f54:	b480      	push	{r7}
 8011f56:	b087      	sub	sp, #28
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	60f8      	str	r0, [r7, #12]
 8011f5c:	60b9      	str	r1, [r7, #8]
 8011f5e:	4613      	mov	r3, r2
 8011f60:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011f62:	2300      	movs	r3, #0
 8011f64:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011f66:	2300      	movs	r3, #0
 8011f68:	75fb      	strb	r3, [r7, #23]
 8011f6a:	e027      	b.n	8011fbc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	0f1b      	lsrs	r3, r3, #28
 8011f70:	2b09      	cmp	r3, #9
 8011f72:	d80b      	bhi.n	8011f8c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	0f1b      	lsrs	r3, r3, #28
 8011f78:	b2da      	uxtb	r2, r3
 8011f7a:	7dfb      	ldrb	r3, [r7, #23]
 8011f7c:	005b      	lsls	r3, r3, #1
 8011f7e:	4619      	mov	r1, r3
 8011f80:	68bb      	ldr	r3, [r7, #8]
 8011f82:	440b      	add	r3, r1
 8011f84:	3230      	adds	r2, #48	@ 0x30
 8011f86:	b2d2      	uxtb	r2, r2
 8011f88:	701a      	strb	r2, [r3, #0]
 8011f8a:	e00a      	b.n	8011fa2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	0f1b      	lsrs	r3, r3, #28
 8011f90:	b2da      	uxtb	r2, r3
 8011f92:	7dfb      	ldrb	r3, [r7, #23]
 8011f94:	005b      	lsls	r3, r3, #1
 8011f96:	4619      	mov	r1, r3
 8011f98:	68bb      	ldr	r3, [r7, #8]
 8011f9a:	440b      	add	r3, r1
 8011f9c:	3237      	adds	r2, #55	@ 0x37
 8011f9e:	b2d2      	uxtb	r2, r2
 8011fa0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	011b      	lsls	r3, r3, #4
 8011fa6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011fa8:	7dfb      	ldrb	r3, [r7, #23]
 8011faa:	005b      	lsls	r3, r3, #1
 8011fac:	3301      	adds	r3, #1
 8011fae:	68ba      	ldr	r2, [r7, #8]
 8011fb0:	4413      	add	r3, r2
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011fb6:	7dfb      	ldrb	r3, [r7, #23]
 8011fb8:	3301      	adds	r3, #1
 8011fba:	75fb      	strb	r3, [r7, #23]
 8011fbc:	7dfa      	ldrb	r2, [r7, #23]
 8011fbe:	79fb      	ldrb	r3, [r7, #7]
 8011fc0:	429a      	cmp	r2, r3
 8011fc2:	d3d3      	bcc.n	8011f6c <IntToUnicode+0x18>
  }
}
 8011fc4:	bf00      	nop
 8011fc6:	bf00      	nop
 8011fc8:	371c      	adds	r7, #28
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd0:	4770      	bx	lr
	...

08011fd4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011fd4:	b580      	push	{r7, lr}
 8011fd6:	b098      	sub	sp, #96	@ 0x60
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8011fdc:	f107 030c 	add.w	r3, r7, #12
 8011fe0:	2254      	movs	r2, #84	@ 0x54
 8011fe2:	2100      	movs	r1, #0
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	f001 fb8f 	bl	8013708 <memset>
  if(pcdHandle->Instance==USB)
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	4a15      	ldr	r2, [pc, #84]	@ (8012044 <HAL_PCD_MspInit+0x70>)
 8011ff0:	4293      	cmp	r3, r2
 8011ff2:	d122      	bne.n	801203a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011ff4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011ff8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8011ffe:	f107 030c 	add.w	r3, r7, #12
 8012002:	4618      	mov	r0, r3
 8012004:	f7f8 fe7e 	bl	800ad04 <HAL_RCCEx_PeriphCLKConfig>
 8012008:	4603      	mov	r3, r0
 801200a:	2b00      	cmp	r3, #0
 801200c:	d001      	beq.n	8012012 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 801200e:	f7f0 fc73 	bl	80028f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8012012:	4b0d      	ldr	r3, [pc, #52]	@ (8012048 <HAL_PCD_MspInit+0x74>)
 8012014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012016:	4a0c      	ldr	r2, [pc, #48]	@ (8012048 <HAL_PCD_MspInit+0x74>)
 8012018:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801201c:	6593      	str	r3, [r2, #88]	@ 0x58
 801201e:	4b0a      	ldr	r3, [pc, #40]	@ (8012048 <HAL_PCD_MspInit+0x74>)
 8012020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012022:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012026:	60bb      	str	r3, [r7, #8]
 8012028:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 801202a:	2200      	movs	r2, #0
 801202c:	2100      	movs	r1, #0
 801202e:	2014      	movs	r0, #20
 8012030:	f7f4 fef3 	bl	8006e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8012034:	2014      	movs	r0, #20
 8012036:	f7f4 ff0a 	bl	8006e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801203a:	bf00      	nop
 801203c:	3760      	adds	r7, #96	@ 0x60
 801203e:	46bd      	mov	sp, r7
 8012040:	bd80      	pop	{r7, pc}
 8012042:	bf00      	nop
 8012044:	40005c00 	.word	0x40005c00
 8012048:	40021000 	.word	0x40021000

0801204c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b082      	sub	sp, #8
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8012060:	4619      	mov	r1, r3
 8012062:	4610      	mov	r0, r2
 8012064:	f7fe fd58 	bl	8010b18 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8012068:	bf00      	nop
 801206a:	3708      	adds	r7, #8
 801206c:	46bd      	mov	sp, r7
 801206e:	bd80      	pop	{r7, pc}

08012070 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012070:	b580      	push	{r7, lr}
 8012072:	b082      	sub	sp, #8
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
 8012078:	460b      	mov	r3, r1
 801207a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8012082:	78fa      	ldrb	r2, [r7, #3]
 8012084:	6879      	ldr	r1, [r7, #4]
 8012086:	4613      	mov	r3, r2
 8012088:	009b      	lsls	r3, r3, #2
 801208a:	4413      	add	r3, r2
 801208c:	00db      	lsls	r3, r3, #3
 801208e:	440b      	add	r3, r1
 8012090:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012094:	681a      	ldr	r2, [r3, #0]
 8012096:	78fb      	ldrb	r3, [r7, #3]
 8012098:	4619      	mov	r1, r3
 801209a:	f7fe fd92 	bl	8010bc2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801209e:	bf00      	nop
 80120a0:	3708      	adds	r7, #8
 80120a2:	46bd      	mov	sp, r7
 80120a4:	bd80      	pop	{r7, pc}

080120a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120a6:	b580      	push	{r7, lr}
 80120a8:	b082      	sub	sp, #8
 80120aa:	af00      	add	r7, sp, #0
 80120ac:	6078      	str	r0, [r7, #4]
 80120ae:	460b      	mov	r3, r1
 80120b0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80120b8:	78fa      	ldrb	r2, [r7, #3]
 80120ba:	6879      	ldr	r1, [r7, #4]
 80120bc:	4613      	mov	r3, r2
 80120be:	009b      	lsls	r3, r3, #2
 80120c0:	4413      	add	r3, r2
 80120c2:	00db      	lsls	r3, r3, #3
 80120c4:	440b      	add	r3, r1
 80120c6:	3324      	adds	r3, #36	@ 0x24
 80120c8:	681a      	ldr	r2, [r3, #0]
 80120ca:	78fb      	ldrb	r3, [r7, #3]
 80120cc:	4619      	mov	r1, r3
 80120ce:	f7fe fddb 	bl	8010c88 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80120d2:	bf00      	nop
 80120d4:	3708      	adds	r7, #8
 80120d6:	46bd      	mov	sp, r7
 80120d8:	bd80      	pop	{r7, pc}

080120da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120da:	b580      	push	{r7, lr}
 80120dc:	b082      	sub	sp, #8
 80120de:	af00      	add	r7, sp, #0
 80120e0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80120e8:	4618      	mov	r0, r3
 80120ea:	f7fe feef 	bl	8010ecc <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80120ee:	bf00      	nop
 80120f0:	3708      	adds	r7, #8
 80120f2:	46bd      	mov	sp, r7
 80120f4:	bd80      	pop	{r7, pc}

080120f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120f6:	b580      	push	{r7, lr}
 80120f8:	b084      	sub	sp, #16
 80120fa:	af00      	add	r7, sp, #0
 80120fc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80120fe:	2301      	movs	r3, #1
 8012100:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	795b      	ldrb	r3, [r3, #5]
 8012106:	2b02      	cmp	r3, #2
 8012108:	d001      	beq.n	801210e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801210a:	f7f0 fbf5 	bl	80028f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012114:	7bfa      	ldrb	r2, [r7, #15]
 8012116:	4611      	mov	r1, r2
 8012118:	4618      	mov	r0, r3
 801211a:	f7fe fe99 	bl	8010e50 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012124:	4618      	mov	r0, r3
 8012126:	f7fe fe45 	bl	8010db4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801212a:	bf00      	nop
 801212c:	3710      	adds	r7, #16
 801212e:	46bd      	mov	sp, r7
 8012130:	bd80      	pop	{r7, pc}
	...

08012134 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012134:	b580      	push	{r7, lr}
 8012136:	b082      	sub	sp, #8
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012142:	4618      	mov	r0, r3
 8012144:	f7fe fe94 	bl	8010e70 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	7a5b      	ldrb	r3, [r3, #9]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d005      	beq.n	801215c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012150:	4b04      	ldr	r3, [pc, #16]	@ (8012164 <HAL_PCD_SuspendCallback+0x30>)
 8012152:	691b      	ldr	r3, [r3, #16]
 8012154:	4a03      	ldr	r2, [pc, #12]	@ (8012164 <HAL_PCD_SuspendCallback+0x30>)
 8012156:	f043 0306 	orr.w	r3, r3, #6
 801215a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 801215c:	bf00      	nop
 801215e:	3708      	adds	r7, #8
 8012160:	46bd      	mov	sp, r7
 8012162:	bd80      	pop	{r7, pc}
 8012164:	e000ed00 	.word	0xe000ed00

08012168 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012168:	b580      	push	{r7, lr}
 801216a:	b082      	sub	sp, #8
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	7a5b      	ldrb	r3, [r3, #9]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d007      	beq.n	8012188 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012178:	4b08      	ldr	r3, [pc, #32]	@ (801219c <HAL_PCD_ResumeCallback+0x34>)
 801217a:	691b      	ldr	r3, [r3, #16]
 801217c:	4a07      	ldr	r2, [pc, #28]	@ (801219c <HAL_PCD_ResumeCallback+0x34>)
 801217e:	f023 0306 	bic.w	r3, r3, #6
 8012182:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8012184:	f000 f9f8 	bl	8012578 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801218e:	4618      	mov	r0, r3
 8012190:	f7fe fe84 	bl	8010e9c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8012194:	bf00      	nop
 8012196:	3708      	adds	r7, #8
 8012198:	46bd      	mov	sp, r7
 801219a:	bd80      	pop	{r7, pc}
 801219c:	e000ed00 	.word	0xe000ed00

080121a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b082      	sub	sp, #8
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80121a8:	4a2b      	ldr	r2, [pc, #172]	@ (8012258 <USBD_LL_Init+0xb8>)
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	4a29      	ldr	r2, [pc, #164]	@ (8012258 <USBD_LL_Init+0xb8>)
 80121b4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 80121b8:	4b27      	ldr	r3, [pc, #156]	@ (8012258 <USBD_LL_Init+0xb8>)
 80121ba:	4a28      	ldr	r2, [pc, #160]	@ (801225c <USBD_LL_Init+0xbc>)
 80121bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80121be:	4b26      	ldr	r3, [pc, #152]	@ (8012258 <USBD_LL_Init+0xb8>)
 80121c0:	2208      	movs	r2, #8
 80121c2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80121c4:	4b24      	ldr	r3, [pc, #144]	@ (8012258 <USBD_LL_Init+0xb8>)
 80121c6:	2202      	movs	r2, #2
 80121c8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80121ca:	4b23      	ldr	r3, [pc, #140]	@ (8012258 <USBD_LL_Init+0xb8>)
 80121cc:	2202      	movs	r2, #2
 80121ce:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80121d0:	4b21      	ldr	r3, [pc, #132]	@ (8012258 <USBD_LL_Init+0xb8>)
 80121d2:	2200      	movs	r2, #0
 80121d4:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80121d6:	4b20      	ldr	r3, [pc, #128]	@ (8012258 <USBD_LL_Init+0xb8>)
 80121d8:	2200      	movs	r2, #0
 80121da:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80121dc:	4b1e      	ldr	r3, [pc, #120]	@ (8012258 <USBD_LL_Init+0xb8>)
 80121de:	2200      	movs	r2, #0
 80121e0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80121e2:	4b1d      	ldr	r3, [pc, #116]	@ (8012258 <USBD_LL_Init+0xb8>)
 80121e4:	2200      	movs	r2, #0
 80121e6:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80121e8:	481b      	ldr	r0, [pc, #108]	@ (8012258 <USBD_LL_Init+0xb8>)
 80121ea:	f7f6 fa7b 	bl	80086e4 <HAL_PCD_Init>
 80121ee:	4603      	mov	r3, r0
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d001      	beq.n	80121f8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80121f4:	f7f0 fb80 	bl	80028f8 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80121fe:	2318      	movs	r3, #24
 8012200:	2200      	movs	r2, #0
 8012202:	2100      	movs	r1, #0
 8012204:	f7f7 ff02 	bl	800a00c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801220e:	2358      	movs	r3, #88	@ 0x58
 8012210:	2200      	movs	r2, #0
 8012212:	2180      	movs	r1, #128	@ 0x80
 8012214:	f7f7 fefa 	bl	800a00c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801221e:	23c0      	movs	r3, #192	@ 0xc0
 8012220:	2200      	movs	r2, #0
 8012222:	2181      	movs	r1, #129	@ 0x81
 8012224:	f7f7 fef2 	bl	800a00c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801222e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8012232:	2200      	movs	r2, #0
 8012234:	2101      	movs	r1, #1
 8012236:	f7f7 fee9 	bl	800a00c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8012240:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012244:	2200      	movs	r2, #0
 8012246:	2182      	movs	r1, #130	@ 0x82
 8012248:	f7f7 fee0 	bl	800a00c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801224c:	2300      	movs	r3, #0
}
 801224e:	4618      	mov	r0, r3
 8012250:	3708      	adds	r7, #8
 8012252:	46bd      	mov	sp, r7
 8012254:	bd80      	pop	{r7, pc}
 8012256:	bf00      	nop
 8012258:	20003864 	.word	0x20003864
 801225c:	40005c00 	.word	0x40005c00

08012260 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012260:	b580      	push	{r7, lr}
 8012262:	b084      	sub	sp, #16
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012268:	2300      	movs	r3, #0
 801226a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801226c:	2300      	movs	r3, #0
 801226e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8012276:	4618      	mov	r0, r3
 8012278:	f7f6 fb02 	bl	8008880 <HAL_PCD_Start>
 801227c:	4603      	mov	r3, r0
 801227e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012280:	7bfb      	ldrb	r3, [r7, #15]
 8012282:	4618      	mov	r0, r3
 8012284:	f000 f97e 	bl	8012584 <USBD_Get_USB_Status>
 8012288:	4603      	mov	r3, r0
 801228a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801228c:	7bbb      	ldrb	r3, [r7, #14]
}
 801228e:	4618      	mov	r0, r3
 8012290:	3710      	adds	r7, #16
 8012292:	46bd      	mov	sp, r7
 8012294:	bd80      	pop	{r7, pc}

08012296 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012296:	b580      	push	{r7, lr}
 8012298:	b084      	sub	sp, #16
 801229a:	af00      	add	r7, sp, #0
 801229c:	6078      	str	r0, [r7, #4]
 801229e:	4608      	mov	r0, r1
 80122a0:	4611      	mov	r1, r2
 80122a2:	461a      	mov	r2, r3
 80122a4:	4603      	mov	r3, r0
 80122a6:	70fb      	strb	r3, [r7, #3]
 80122a8:	460b      	mov	r3, r1
 80122aa:	70bb      	strb	r3, [r7, #2]
 80122ac:	4613      	mov	r3, r2
 80122ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80122b0:	2300      	movs	r3, #0
 80122b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80122b4:	2300      	movs	r3, #0
 80122b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80122be:	78bb      	ldrb	r3, [r7, #2]
 80122c0:	883a      	ldrh	r2, [r7, #0]
 80122c2:	78f9      	ldrb	r1, [r7, #3]
 80122c4:	f7f6 fc49 	bl	8008b5a <HAL_PCD_EP_Open>
 80122c8:	4603      	mov	r3, r0
 80122ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80122cc:	7bfb      	ldrb	r3, [r7, #15]
 80122ce:	4618      	mov	r0, r3
 80122d0:	f000 f958 	bl	8012584 <USBD_Get_USB_Status>
 80122d4:	4603      	mov	r3, r0
 80122d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80122d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80122da:	4618      	mov	r0, r3
 80122dc:	3710      	adds	r7, #16
 80122de:	46bd      	mov	sp, r7
 80122e0:	bd80      	pop	{r7, pc}

080122e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80122e2:	b580      	push	{r7, lr}
 80122e4:	b084      	sub	sp, #16
 80122e6:	af00      	add	r7, sp, #0
 80122e8:	6078      	str	r0, [r7, #4]
 80122ea:	460b      	mov	r3, r1
 80122ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80122ee:	2300      	movs	r3, #0
 80122f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80122f2:	2300      	movs	r3, #0
 80122f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80122fc:	78fa      	ldrb	r2, [r7, #3]
 80122fe:	4611      	mov	r1, r2
 8012300:	4618      	mov	r0, r3
 8012302:	f7f6 fc89 	bl	8008c18 <HAL_PCD_EP_Close>
 8012306:	4603      	mov	r3, r0
 8012308:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801230a:	7bfb      	ldrb	r3, [r7, #15]
 801230c:	4618      	mov	r0, r3
 801230e:	f000 f939 	bl	8012584 <USBD_Get_USB_Status>
 8012312:	4603      	mov	r3, r0
 8012314:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012316:	7bbb      	ldrb	r3, [r7, #14]
}
 8012318:	4618      	mov	r0, r3
 801231a:	3710      	adds	r7, #16
 801231c:	46bd      	mov	sp, r7
 801231e:	bd80      	pop	{r7, pc}

08012320 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012320:	b580      	push	{r7, lr}
 8012322:	b084      	sub	sp, #16
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
 8012328:	460b      	mov	r3, r1
 801232a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801232c:	2300      	movs	r3, #0
 801232e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012330:	2300      	movs	r3, #0
 8012332:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801233a:	78fa      	ldrb	r2, [r7, #3]
 801233c:	4611      	mov	r1, r2
 801233e:	4618      	mov	r0, r3
 8012340:	f7f6 fd32 	bl	8008da8 <HAL_PCD_EP_SetStall>
 8012344:	4603      	mov	r3, r0
 8012346:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012348:	7bfb      	ldrb	r3, [r7, #15]
 801234a:	4618      	mov	r0, r3
 801234c:	f000 f91a 	bl	8012584 <USBD_Get_USB_Status>
 8012350:	4603      	mov	r3, r0
 8012352:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012354:	7bbb      	ldrb	r3, [r7, #14]
}
 8012356:	4618      	mov	r0, r3
 8012358:	3710      	adds	r7, #16
 801235a:	46bd      	mov	sp, r7
 801235c:	bd80      	pop	{r7, pc}

0801235e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801235e:	b580      	push	{r7, lr}
 8012360:	b084      	sub	sp, #16
 8012362:	af00      	add	r7, sp, #0
 8012364:	6078      	str	r0, [r7, #4]
 8012366:	460b      	mov	r3, r1
 8012368:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801236a:	2300      	movs	r3, #0
 801236c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801236e:	2300      	movs	r3, #0
 8012370:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8012378:	78fa      	ldrb	r2, [r7, #3]
 801237a:	4611      	mov	r1, r2
 801237c:	4618      	mov	r0, r3
 801237e:	f7f6 fd65 	bl	8008e4c <HAL_PCD_EP_ClrStall>
 8012382:	4603      	mov	r3, r0
 8012384:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012386:	7bfb      	ldrb	r3, [r7, #15]
 8012388:	4618      	mov	r0, r3
 801238a:	f000 f8fb 	bl	8012584 <USBD_Get_USB_Status>
 801238e:	4603      	mov	r3, r0
 8012390:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012392:	7bbb      	ldrb	r3, [r7, #14]
}
 8012394:	4618      	mov	r0, r3
 8012396:	3710      	adds	r7, #16
 8012398:	46bd      	mov	sp, r7
 801239a:	bd80      	pop	{r7, pc}

0801239c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801239c:	b480      	push	{r7}
 801239e:	b085      	sub	sp, #20
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
 80123a4:	460b      	mov	r3, r1
 80123a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80123ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80123b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	da0b      	bge.n	80123d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80123b8:	78fb      	ldrb	r3, [r7, #3]
 80123ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80123be:	68f9      	ldr	r1, [r7, #12]
 80123c0:	4613      	mov	r3, r2
 80123c2:	009b      	lsls	r3, r3, #2
 80123c4:	4413      	add	r3, r2
 80123c6:	00db      	lsls	r3, r3, #3
 80123c8:	440b      	add	r3, r1
 80123ca:	3312      	adds	r3, #18
 80123cc:	781b      	ldrb	r3, [r3, #0]
 80123ce:	e00b      	b.n	80123e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80123d0:	78fb      	ldrb	r3, [r7, #3]
 80123d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80123d6:	68f9      	ldr	r1, [r7, #12]
 80123d8:	4613      	mov	r3, r2
 80123da:	009b      	lsls	r3, r3, #2
 80123dc:	4413      	add	r3, r2
 80123de:	00db      	lsls	r3, r3, #3
 80123e0:	440b      	add	r3, r1
 80123e2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80123e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80123e8:	4618      	mov	r0, r3
 80123ea:	3714      	adds	r7, #20
 80123ec:	46bd      	mov	sp, r7
 80123ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f2:	4770      	bx	lr

080123f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80123f4:	b580      	push	{r7, lr}
 80123f6:	b084      	sub	sp, #16
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	6078      	str	r0, [r7, #4]
 80123fc:	460b      	mov	r3, r1
 80123fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012400:	2300      	movs	r3, #0
 8012402:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012404:	2300      	movs	r3, #0
 8012406:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801240e:	78fa      	ldrb	r2, [r7, #3]
 8012410:	4611      	mov	r1, r2
 8012412:	4618      	mov	r0, r3
 8012414:	f7f6 fb7d 	bl	8008b12 <HAL_PCD_SetAddress>
 8012418:	4603      	mov	r3, r0
 801241a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801241c:	7bfb      	ldrb	r3, [r7, #15]
 801241e:	4618      	mov	r0, r3
 8012420:	f000 f8b0 	bl	8012584 <USBD_Get_USB_Status>
 8012424:	4603      	mov	r3, r0
 8012426:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012428:	7bbb      	ldrb	r3, [r7, #14]
}
 801242a:	4618      	mov	r0, r3
 801242c:	3710      	adds	r7, #16
 801242e:	46bd      	mov	sp, r7
 8012430:	bd80      	pop	{r7, pc}

08012432 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012432:	b580      	push	{r7, lr}
 8012434:	b086      	sub	sp, #24
 8012436:	af00      	add	r7, sp, #0
 8012438:	60f8      	str	r0, [r7, #12]
 801243a:	607a      	str	r2, [r7, #4]
 801243c:	603b      	str	r3, [r7, #0]
 801243e:	460b      	mov	r3, r1
 8012440:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012442:	2300      	movs	r3, #0
 8012444:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012446:	2300      	movs	r3, #0
 8012448:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8012450:	7af9      	ldrb	r1, [r7, #11]
 8012452:	683b      	ldr	r3, [r7, #0]
 8012454:	687a      	ldr	r2, [r7, #4]
 8012456:	f7f6 fc70 	bl	8008d3a <HAL_PCD_EP_Transmit>
 801245a:	4603      	mov	r3, r0
 801245c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801245e:	7dfb      	ldrb	r3, [r7, #23]
 8012460:	4618      	mov	r0, r3
 8012462:	f000 f88f 	bl	8012584 <USBD_Get_USB_Status>
 8012466:	4603      	mov	r3, r0
 8012468:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801246a:	7dbb      	ldrb	r3, [r7, #22]
}
 801246c:	4618      	mov	r0, r3
 801246e:	3718      	adds	r7, #24
 8012470:	46bd      	mov	sp, r7
 8012472:	bd80      	pop	{r7, pc}

08012474 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b086      	sub	sp, #24
 8012478:	af00      	add	r7, sp, #0
 801247a:	60f8      	str	r0, [r7, #12]
 801247c:	607a      	str	r2, [r7, #4]
 801247e:	603b      	str	r3, [r7, #0]
 8012480:	460b      	mov	r3, r1
 8012482:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012484:	2300      	movs	r3, #0
 8012486:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012488:	2300      	movs	r3, #0
 801248a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8012492:	7af9      	ldrb	r1, [r7, #11]
 8012494:	683b      	ldr	r3, [r7, #0]
 8012496:	687a      	ldr	r2, [r7, #4]
 8012498:	f7f6 fc06 	bl	8008ca8 <HAL_PCD_EP_Receive>
 801249c:	4603      	mov	r3, r0
 801249e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80124a0:	7dfb      	ldrb	r3, [r7, #23]
 80124a2:	4618      	mov	r0, r3
 80124a4:	f000 f86e 	bl	8012584 <USBD_Get_USB_Status>
 80124a8:	4603      	mov	r3, r0
 80124aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80124ac:	7dbb      	ldrb	r3, [r7, #22]
}
 80124ae:	4618      	mov	r0, r3
 80124b0:	3718      	adds	r7, #24
 80124b2:	46bd      	mov	sp, r7
 80124b4:	bd80      	pop	{r7, pc}

080124b6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80124b6:	b580      	push	{r7, lr}
 80124b8:	b082      	sub	sp, #8
 80124ba:	af00      	add	r7, sp, #0
 80124bc:	6078      	str	r0, [r7, #4]
 80124be:	460b      	mov	r3, r1
 80124c0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80124c8:	78fa      	ldrb	r2, [r7, #3]
 80124ca:	4611      	mov	r1, r2
 80124cc:	4618      	mov	r0, r3
 80124ce:	f7f6 fc1c 	bl	8008d0a <HAL_PCD_EP_GetRxCount>
 80124d2:	4603      	mov	r3, r0
}
 80124d4:	4618      	mov	r0, r3
 80124d6:	3708      	adds	r7, #8
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd80      	pop	{r7, pc}

080124dc <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80124dc:	b580      	push	{r7, lr}
 80124de:	b082      	sub	sp, #8
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
 80124e4:	460b      	mov	r3, r1
 80124e6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80124e8:	78fb      	ldrb	r3, [r7, #3]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d002      	beq.n	80124f4 <HAL_PCDEx_LPM_Callback+0x18>
 80124ee:	2b01      	cmp	r3, #1
 80124f0:	d013      	beq.n	801251a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80124f2:	e023      	b.n	801253c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	7a5b      	ldrb	r3, [r3, #9]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d007      	beq.n	801250c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80124fc:	f000 f83c 	bl	8012578 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012500:	4b10      	ldr	r3, [pc, #64]	@ (8012544 <HAL_PCDEx_LPM_Callback+0x68>)
 8012502:	691b      	ldr	r3, [r3, #16]
 8012504:	4a0f      	ldr	r2, [pc, #60]	@ (8012544 <HAL_PCDEx_LPM_Callback+0x68>)
 8012506:	f023 0306 	bic.w	r3, r3, #6
 801250a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012512:	4618      	mov	r0, r3
 8012514:	f7fe fcc2 	bl	8010e9c <USBD_LL_Resume>
    break;
 8012518:	e010      	b.n	801253c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012520:	4618      	mov	r0, r3
 8012522:	f7fe fca5 	bl	8010e70 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	7a5b      	ldrb	r3, [r3, #9]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d005      	beq.n	801253a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801252e:	4b05      	ldr	r3, [pc, #20]	@ (8012544 <HAL_PCDEx_LPM_Callback+0x68>)
 8012530:	691b      	ldr	r3, [r3, #16]
 8012532:	4a04      	ldr	r2, [pc, #16]	@ (8012544 <HAL_PCDEx_LPM_Callback+0x68>)
 8012534:	f043 0306 	orr.w	r3, r3, #6
 8012538:	6113      	str	r3, [r2, #16]
    break;
 801253a:	bf00      	nop
}
 801253c:	bf00      	nop
 801253e:	3708      	adds	r7, #8
 8012540:	46bd      	mov	sp, r7
 8012542:	bd80      	pop	{r7, pc}
 8012544:	e000ed00 	.word	0xe000ed00

08012548 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012548:	b480      	push	{r7}
 801254a:	b083      	sub	sp, #12
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012550:	4b03      	ldr	r3, [pc, #12]	@ (8012560 <USBD_static_malloc+0x18>)
}
 8012552:	4618      	mov	r0, r3
 8012554:	370c      	adds	r7, #12
 8012556:	46bd      	mov	sp, r7
 8012558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801255c:	4770      	bx	lr
 801255e:	bf00      	nop
 8012560:	20003b40 	.word	0x20003b40

08012564 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012564:	b480      	push	{r7}
 8012566:	b083      	sub	sp, #12
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]

}
 801256c:	bf00      	nop
 801256e:	370c      	adds	r7, #12
 8012570:	46bd      	mov	sp, r7
 8012572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012576:	4770      	bx	lr

08012578 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8012578:	b580      	push	{r7, lr}
 801257a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801257c:	f7ef f862 	bl	8001644 <SystemClock_Config>
}
 8012580:	bf00      	nop
 8012582:	bd80      	pop	{r7, pc}

08012584 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012584:	b480      	push	{r7}
 8012586:	b085      	sub	sp, #20
 8012588:	af00      	add	r7, sp, #0
 801258a:	4603      	mov	r3, r0
 801258c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801258e:	2300      	movs	r3, #0
 8012590:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012592:	79fb      	ldrb	r3, [r7, #7]
 8012594:	2b03      	cmp	r3, #3
 8012596:	d817      	bhi.n	80125c8 <USBD_Get_USB_Status+0x44>
 8012598:	a201      	add	r2, pc, #4	@ (adr r2, 80125a0 <USBD_Get_USB_Status+0x1c>)
 801259a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801259e:	bf00      	nop
 80125a0:	080125b1 	.word	0x080125b1
 80125a4:	080125b7 	.word	0x080125b7
 80125a8:	080125bd 	.word	0x080125bd
 80125ac:	080125c3 	.word	0x080125c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80125b0:	2300      	movs	r3, #0
 80125b2:	73fb      	strb	r3, [r7, #15]
    break;
 80125b4:	e00b      	b.n	80125ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80125b6:	2303      	movs	r3, #3
 80125b8:	73fb      	strb	r3, [r7, #15]
    break;
 80125ba:	e008      	b.n	80125ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80125bc:	2301      	movs	r3, #1
 80125be:	73fb      	strb	r3, [r7, #15]
    break;
 80125c0:	e005      	b.n	80125ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80125c2:	2303      	movs	r3, #3
 80125c4:	73fb      	strb	r3, [r7, #15]
    break;
 80125c6:	e002      	b.n	80125ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80125c8:	2303      	movs	r3, #3
 80125ca:	73fb      	strb	r3, [r7, #15]
    break;
 80125cc:	bf00      	nop
  }
  return usb_status;
 80125ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80125d0:	4618      	mov	r0, r3
 80125d2:	3714      	adds	r7, #20
 80125d4:	46bd      	mov	sp, r7
 80125d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125da:	4770      	bx	lr

080125dc <__cvt>:
 80125dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80125e0:	ec57 6b10 	vmov	r6, r7, d0
 80125e4:	2f00      	cmp	r7, #0
 80125e6:	460c      	mov	r4, r1
 80125e8:	4619      	mov	r1, r3
 80125ea:	463b      	mov	r3, r7
 80125ec:	bfbb      	ittet	lt
 80125ee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80125f2:	461f      	movlt	r7, r3
 80125f4:	2300      	movge	r3, #0
 80125f6:	232d      	movlt	r3, #45	@ 0x2d
 80125f8:	700b      	strb	r3, [r1, #0]
 80125fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80125fc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8012600:	4691      	mov	r9, r2
 8012602:	f023 0820 	bic.w	r8, r3, #32
 8012606:	bfbc      	itt	lt
 8012608:	4632      	movlt	r2, r6
 801260a:	4616      	movlt	r6, r2
 801260c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012610:	d005      	beq.n	801261e <__cvt+0x42>
 8012612:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8012616:	d100      	bne.n	801261a <__cvt+0x3e>
 8012618:	3401      	adds	r4, #1
 801261a:	2102      	movs	r1, #2
 801261c:	e000      	b.n	8012620 <__cvt+0x44>
 801261e:	2103      	movs	r1, #3
 8012620:	ab03      	add	r3, sp, #12
 8012622:	9301      	str	r3, [sp, #4]
 8012624:	ab02      	add	r3, sp, #8
 8012626:	9300      	str	r3, [sp, #0]
 8012628:	ec47 6b10 	vmov	d0, r6, r7
 801262c:	4653      	mov	r3, sl
 801262e:	4622      	mov	r2, r4
 8012630:	f001 f97a 	bl	8013928 <_dtoa_r>
 8012634:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8012638:	4605      	mov	r5, r0
 801263a:	d119      	bne.n	8012670 <__cvt+0x94>
 801263c:	f019 0f01 	tst.w	r9, #1
 8012640:	d00e      	beq.n	8012660 <__cvt+0x84>
 8012642:	eb00 0904 	add.w	r9, r0, r4
 8012646:	2200      	movs	r2, #0
 8012648:	2300      	movs	r3, #0
 801264a:	4630      	mov	r0, r6
 801264c:	4639      	mov	r1, r7
 801264e:	f7ee fa63 	bl	8000b18 <__aeabi_dcmpeq>
 8012652:	b108      	cbz	r0, 8012658 <__cvt+0x7c>
 8012654:	f8cd 900c 	str.w	r9, [sp, #12]
 8012658:	2230      	movs	r2, #48	@ 0x30
 801265a:	9b03      	ldr	r3, [sp, #12]
 801265c:	454b      	cmp	r3, r9
 801265e:	d31e      	bcc.n	801269e <__cvt+0xc2>
 8012660:	9b03      	ldr	r3, [sp, #12]
 8012662:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012664:	1b5b      	subs	r3, r3, r5
 8012666:	4628      	mov	r0, r5
 8012668:	6013      	str	r3, [r2, #0]
 801266a:	b004      	add	sp, #16
 801266c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012670:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012674:	eb00 0904 	add.w	r9, r0, r4
 8012678:	d1e5      	bne.n	8012646 <__cvt+0x6a>
 801267a:	7803      	ldrb	r3, [r0, #0]
 801267c:	2b30      	cmp	r3, #48	@ 0x30
 801267e:	d10a      	bne.n	8012696 <__cvt+0xba>
 8012680:	2200      	movs	r2, #0
 8012682:	2300      	movs	r3, #0
 8012684:	4630      	mov	r0, r6
 8012686:	4639      	mov	r1, r7
 8012688:	f7ee fa46 	bl	8000b18 <__aeabi_dcmpeq>
 801268c:	b918      	cbnz	r0, 8012696 <__cvt+0xba>
 801268e:	f1c4 0401 	rsb	r4, r4, #1
 8012692:	f8ca 4000 	str.w	r4, [sl]
 8012696:	f8da 3000 	ldr.w	r3, [sl]
 801269a:	4499      	add	r9, r3
 801269c:	e7d3      	b.n	8012646 <__cvt+0x6a>
 801269e:	1c59      	adds	r1, r3, #1
 80126a0:	9103      	str	r1, [sp, #12]
 80126a2:	701a      	strb	r2, [r3, #0]
 80126a4:	e7d9      	b.n	801265a <__cvt+0x7e>

080126a6 <__exponent>:
 80126a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80126a8:	2900      	cmp	r1, #0
 80126aa:	bfba      	itte	lt
 80126ac:	4249      	neglt	r1, r1
 80126ae:	232d      	movlt	r3, #45	@ 0x2d
 80126b0:	232b      	movge	r3, #43	@ 0x2b
 80126b2:	2909      	cmp	r1, #9
 80126b4:	7002      	strb	r2, [r0, #0]
 80126b6:	7043      	strb	r3, [r0, #1]
 80126b8:	dd29      	ble.n	801270e <__exponent+0x68>
 80126ba:	f10d 0307 	add.w	r3, sp, #7
 80126be:	461d      	mov	r5, r3
 80126c0:	270a      	movs	r7, #10
 80126c2:	461a      	mov	r2, r3
 80126c4:	fbb1 f6f7 	udiv	r6, r1, r7
 80126c8:	fb07 1416 	mls	r4, r7, r6, r1
 80126cc:	3430      	adds	r4, #48	@ 0x30
 80126ce:	f802 4c01 	strb.w	r4, [r2, #-1]
 80126d2:	460c      	mov	r4, r1
 80126d4:	2c63      	cmp	r4, #99	@ 0x63
 80126d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80126da:	4631      	mov	r1, r6
 80126dc:	dcf1      	bgt.n	80126c2 <__exponent+0x1c>
 80126de:	3130      	adds	r1, #48	@ 0x30
 80126e0:	1e94      	subs	r4, r2, #2
 80126e2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80126e6:	1c41      	adds	r1, r0, #1
 80126e8:	4623      	mov	r3, r4
 80126ea:	42ab      	cmp	r3, r5
 80126ec:	d30a      	bcc.n	8012704 <__exponent+0x5e>
 80126ee:	f10d 0309 	add.w	r3, sp, #9
 80126f2:	1a9b      	subs	r3, r3, r2
 80126f4:	42ac      	cmp	r4, r5
 80126f6:	bf88      	it	hi
 80126f8:	2300      	movhi	r3, #0
 80126fa:	3302      	adds	r3, #2
 80126fc:	4403      	add	r3, r0
 80126fe:	1a18      	subs	r0, r3, r0
 8012700:	b003      	add	sp, #12
 8012702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012704:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012708:	f801 6f01 	strb.w	r6, [r1, #1]!
 801270c:	e7ed      	b.n	80126ea <__exponent+0x44>
 801270e:	2330      	movs	r3, #48	@ 0x30
 8012710:	3130      	adds	r1, #48	@ 0x30
 8012712:	7083      	strb	r3, [r0, #2]
 8012714:	70c1      	strb	r1, [r0, #3]
 8012716:	1d03      	adds	r3, r0, #4
 8012718:	e7f1      	b.n	80126fe <__exponent+0x58>
	...

0801271c <_printf_float>:
 801271c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012720:	b08d      	sub	sp, #52	@ 0x34
 8012722:	460c      	mov	r4, r1
 8012724:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8012728:	4616      	mov	r6, r2
 801272a:	461f      	mov	r7, r3
 801272c:	4605      	mov	r5, r0
 801272e:	f000 fff3 	bl	8013718 <_localeconv_r>
 8012732:	6803      	ldr	r3, [r0, #0]
 8012734:	9304      	str	r3, [sp, #16]
 8012736:	4618      	mov	r0, r3
 8012738:	f7ed fdc2 	bl	80002c0 <strlen>
 801273c:	2300      	movs	r3, #0
 801273e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012740:	f8d8 3000 	ldr.w	r3, [r8]
 8012744:	9005      	str	r0, [sp, #20]
 8012746:	3307      	adds	r3, #7
 8012748:	f023 0307 	bic.w	r3, r3, #7
 801274c:	f103 0208 	add.w	r2, r3, #8
 8012750:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012754:	f8d4 b000 	ldr.w	fp, [r4]
 8012758:	f8c8 2000 	str.w	r2, [r8]
 801275c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012760:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8012764:	9307      	str	r3, [sp, #28]
 8012766:	f8cd 8018 	str.w	r8, [sp, #24]
 801276a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801276e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012772:	4b9c      	ldr	r3, [pc, #624]	@ (80129e4 <_printf_float+0x2c8>)
 8012774:	f04f 32ff 	mov.w	r2, #4294967295
 8012778:	f7ee fa00 	bl	8000b7c <__aeabi_dcmpun>
 801277c:	bb70      	cbnz	r0, 80127dc <_printf_float+0xc0>
 801277e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012782:	4b98      	ldr	r3, [pc, #608]	@ (80129e4 <_printf_float+0x2c8>)
 8012784:	f04f 32ff 	mov.w	r2, #4294967295
 8012788:	f7ee f9da 	bl	8000b40 <__aeabi_dcmple>
 801278c:	bb30      	cbnz	r0, 80127dc <_printf_float+0xc0>
 801278e:	2200      	movs	r2, #0
 8012790:	2300      	movs	r3, #0
 8012792:	4640      	mov	r0, r8
 8012794:	4649      	mov	r1, r9
 8012796:	f7ee f9c9 	bl	8000b2c <__aeabi_dcmplt>
 801279a:	b110      	cbz	r0, 80127a2 <_printf_float+0x86>
 801279c:	232d      	movs	r3, #45	@ 0x2d
 801279e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80127a2:	4a91      	ldr	r2, [pc, #580]	@ (80129e8 <_printf_float+0x2cc>)
 80127a4:	4b91      	ldr	r3, [pc, #580]	@ (80129ec <_printf_float+0x2d0>)
 80127a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80127aa:	bf94      	ite	ls
 80127ac:	4690      	movls	r8, r2
 80127ae:	4698      	movhi	r8, r3
 80127b0:	2303      	movs	r3, #3
 80127b2:	6123      	str	r3, [r4, #16]
 80127b4:	f02b 0304 	bic.w	r3, fp, #4
 80127b8:	6023      	str	r3, [r4, #0]
 80127ba:	f04f 0900 	mov.w	r9, #0
 80127be:	9700      	str	r7, [sp, #0]
 80127c0:	4633      	mov	r3, r6
 80127c2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80127c4:	4621      	mov	r1, r4
 80127c6:	4628      	mov	r0, r5
 80127c8:	f000 f9d2 	bl	8012b70 <_printf_common>
 80127cc:	3001      	adds	r0, #1
 80127ce:	f040 808d 	bne.w	80128ec <_printf_float+0x1d0>
 80127d2:	f04f 30ff 	mov.w	r0, #4294967295
 80127d6:	b00d      	add	sp, #52	@ 0x34
 80127d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127dc:	4642      	mov	r2, r8
 80127de:	464b      	mov	r3, r9
 80127e0:	4640      	mov	r0, r8
 80127e2:	4649      	mov	r1, r9
 80127e4:	f7ee f9ca 	bl	8000b7c <__aeabi_dcmpun>
 80127e8:	b140      	cbz	r0, 80127fc <_printf_float+0xe0>
 80127ea:	464b      	mov	r3, r9
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	bfbc      	itt	lt
 80127f0:	232d      	movlt	r3, #45	@ 0x2d
 80127f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80127f6:	4a7e      	ldr	r2, [pc, #504]	@ (80129f0 <_printf_float+0x2d4>)
 80127f8:	4b7e      	ldr	r3, [pc, #504]	@ (80129f4 <_printf_float+0x2d8>)
 80127fa:	e7d4      	b.n	80127a6 <_printf_float+0x8a>
 80127fc:	6863      	ldr	r3, [r4, #4]
 80127fe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8012802:	9206      	str	r2, [sp, #24]
 8012804:	1c5a      	adds	r2, r3, #1
 8012806:	d13b      	bne.n	8012880 <_printf_float+0x164>
 8012808:	2306      	movs	r3, #6
 801280a:	6063      	str	r3, [r4, #4]
 801280c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8012810:	2300      	movs	r3, #0
 8012812:	6022      	str	r2, [r4, #0]
 8012814:	9303      	str	r3, [sp, #12]
 8012816:	ab0a      	add	r3, sp, #40	@ 0x28
 8012818:	e9cd a301 	strd	sl, r3, [sp, #4]
 801281c:	ab09      	add	r3, sp, #36	@ 0x24
 801281e:	9300      	str	r3, [sp, #0]
 8012820:	6861      	ldr	r1, [r4, #4]
 8012822:	ec49 8b10 	vmov	d0, r8, r9
 8012826:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801282a:	4628      	mov	r0, r5
 801282c:	f7ff fed6 	bl	80125dc <__cvt>
 8012830:	9b06      	ldr	r3, [sp, #24]
 8012832:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012834:	2b47      	cmp	r3, #71	@ 0x47
 8012836:	4680      	mov	r8, r0
 8012838:	d129      	bne.n	801288e <_printf_float+0x172>
 801283a:	1cc8      	adds	r0, r1, #3
 801283c:	db02      	blt.n	8012844 <_printf_float+0x128>
 801283e:	6863      	ldr	r3, [r4, #4]
 8012840:	4299      	cmp	r1, r3
 8012842:	dd41      	ble.n	80128c8 <_printf_float+0x1ac>
 8012844:	f1aa 0a02 	sub.w	sl, sl, #2
 8012848:	fa5f fa8a 	uxtb.w	sl, sl
 801284c:	3901      	subs	r1, #1
 801284e:	4652      	mov	r2, sl
 8012850:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012854:	9109      	str	r1, [sp, #36]	@ 0x24
 8012856:	f7ff ff26 	bl	80126a6 <__exponent>
 801285a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801285c:	1813      	adds	r3, r2, r0
 801285e:	2a01      	cmp	r2, #1
 8012860:	4681      	mov	r9, r0
 8012862:	6123      	str	r3, [r4, #16]
 8012864:	dc02      	bgt.n	801286c <_printf_float+0x150>
 8012866:	6822      	ldr	r2, [r4, #0]
 8012868:	07d2      	lsls	r2, r2, #31
 801286a:	d501      	bpl.n	8012870 <_printf_float+0x154>
 801286c:	3301      	adds	r3, #1
 801286e:	6123      	str	r3, [r4, #16]
 8012870:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012874:	2b00      	cmp	r3, #0
 8012876:	d0a2      	beq.n	80127be <_printf_float+0xa2>
 8012878:	232d      	movs	r3, #45	@ 0x2d
 801287a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801287e:	e79e      	b.n	80127be <_printf_float+0xa2>
 8012880:	9a06      	ldr	r2, [sp, #24]
 8012882:	2a47      	cmp	r2, #71	@ 0x47
 8012884:	d1c2      	bne.n	801280c <_printf_float+0xf0>
 8012886:	2b00      	cmp	r3, #0
 8012888:	d1c0      	bne.n	801280c <_printf_float+0xf0>
 801288a:	2301      	movs	r3, #1
 801288c:	e7bd      	b.n	801280a <_printf_float+0xee>
 801288e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012892:	d9db      	bls.n	801284c <_printf_float+0x130>
 8012894:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8012898:	d118      	bne.n	80128cc <_printf_float+0x1b0>
 801289a:	2900      	cmp	r1, #0
 801289c:	6863      	ldr	r3, [r4, #4]
 801289e:	dd0b      	ble.n	80128b8 <_printf_float+0x19c>
 80128a0:	6121      	str	r1, [r4, #16]
 80128a2:	b913      	cbnz	r3, 80128aa <_printf_float+0x18e>
 80128a4:	6822      	ldr	r2, [r4, #0]
 80128a6:	07d0      	lsls	r0, r2, #31
 80128a8:	d502      	bpl.n	80128b0 <_printf_float+0x194>
 80128aa:	3301      	adds	r3, #1
 80128ac:	440b      	add	r3, r1
 80128ae:	6123      	str	r3, [r4, #16]
 80128b0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80128b2:	f04f 0900 	mov.w	r9, #0
 80128b6:	e7db      	b.n	8012870 <_printf_float+0x154>
 80128b8:	b913      	cbnz	r3, 80128c0 <_printf_float+0x1a4>
 80128ba:	6822      	ldr	r2, [r4, #0]
 80128bc:	07d2      	lsls	r2, r2, #31
 80128be:	d501      	bpl.n	80128c4 <_printf_float+0x1a8>
 80128c0:	3302      	adds	r3, #2
 80128c2:	e7f4      	b.n	80128ae <_printf_float+0x192>
 80128c4:	2301      	movs	r3, #1
 80128c6:	e7f2      	b.n	80128ae <_printf_float+0x192>
 80128c8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80128cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80128ce:	4299      	cmp	r1, r3
 80128d0:	db05      	blt.n	80128de <_printf_float+0x1c2>
 80128d2:	6823      	ldr	r3, [r4, #0]
 80128d4:	6121      	str	r1, [r4, #16]
 80128d6:	07d8      	lsls	r0, r3, #31
 80128d8:	d5ea      	bpl.n	80128b0 <_printf_float+0x194>
 80128da:	1c4b      	adds	r3, r1, #1
 80128dc:	e7e7      	b.n	80128ae <_printf_float+0x192>
 80128de:	2900      	cmp	r1, #0
 80128e0:	bfd4      	ite	le
 80128e2:	f1c1 0202 	rsble	r2, r1, #2
 80128e6:	2201      	movgt	r2, #1
 80128e8:	4413      	add	r3, r2
 80128ea:	e7e0      	b.n	80128ae <_printf_float+0x192>
 80128ec:	6823      	ldr	r3, [r4, #0]
 80128ee:	055a      	lsls	r2, r3, #21
 80128f0:	d407      	bmi.n	8012902 <_printf_float+0x1e6>
 80128f2:	6923      	ldr	r3, [r4, #16]
 80128f4:	4642      	mov	r2, r8
 80128f6:	4631      	mov	r1, r6
 80128f8:	4628      	mov	r0, r5
 80128fa:	47b8      	blx	r7
 80128fc:	3001      	adds	r0, #1
 80128fe:	d12b      	bne.n	8012958 <_printf_float+0x23c>
 8012900:	e767      	b.n	80127d2 <_printf_float+0xb6>
 8012902:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012906:	f240 80dd 	bls.w	8012ac4 <_printf_float+0x3a8>
 801290a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801290e:	2200      	movs	r2, #0
 8012910:	2300      	movs	r3, #0
 8012912:	f7ee f901 	bl	8000b18 <__aeabi_dcmpeq>
 8012916:	2800      	cmp	r0, #0
 8012918:	d033      	beq.n	8012982 <_printf_float+0x266>
 801291a:	4a37      	ldr	r2, [pc, #220]	@ (80129f8 <_printf_float+0x2dc>)
 801291c:	2301      	movs	r3, #1
 801291e:	4631      	mov	r1, r6
 8012920:	4628      	mov	r0, r5
 8012922:	47b8      	blx	r7
 8012924:	3001      	adds	r0, #1
 8012926:	f43f af54 	beq.w	80127d2 <_printf_float+0xb6>
 801292a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801292e:	4543      	cmp	r3, r8
 8012930:	db02      	blt.n	8012938 <_printf_float+0x21c>
 8012932:	6823      	ldr	r3, [r4, #0]
 8012934:	07d8      	lsls	r0, r3, #31
 8012936:	d50f      	bpl.n	8012958 <_printf_float+0x23c>
 8012938:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801293c:	4631      	mov	r1, r6
 801293e:	4628      	mov	r0, r5
 8012940:	47b8      	blx	r7
 8012942:	3001      	adds	r0, #1
 8012944:	f43f af45 	beq.w	80127d2 <_printf_float+0xb6>
 8012948:	f04f 0900 	mov.w	r9, #0
 801294c:	f108 38ff 	add.w	r8, r8, #4294967295
 8012950:	f104 0a1a 	add.w	sl, r4, #26
 8012954:	45c8      	cmp	r8, r9
 8012956:	dc09      	bgt.n	801296c <_printf_float+0x250>
 8012958:	6823      	ldr	r3, [r4, #0]
 801295a:	079b      	lsls	r3, r3, #30
 801295c:	f100 8103 	bmi.w	8012b66 <_printf_float+0x44a>
 8012960:	68e0      	ldr	r0, [r4, #12]
 8012962:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012964:	4298      	cmp	r0, r3
 8012966:	bfb8      	it	lt
 8012968:	4618      	movlt	r0, r3
 801296a:	e734      	b.n	80127d6 <_printf_float+0xba>
 801296c:	2301      	movs	r3, #1
 801296e:	4652      	mov	r2, sl
 8012970:	4631      	mov	r1, r6
 8012972:	4628      	mov	r0, r5
 8012974:	47b8      	blx	r7
 8012976:	3001      	adds	r0, #1
 8012978:	f43f af2b 	beq.w	80127d2 <_printf_float+0xb6>
 801297c:	f109 0901 	add.w	r9, r9, #1
 8012980:	e7e8      	b.n	8012954 <_printf_float+0x238>
 8012982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012984:	2b00      	cmp	r3, #0
 8012986:	dc39      	bgt.n	80129fc <_printf_float+0x2e0>
 8012988:	4a1b      	ldr	r2, [pc, #108]	@ (80129f8 <_printf_float+0x2dc>)
 801298a:	2301      	movs	r3, #1
 801298c:	4631      	mov	r1, r6
 801298e:	4628      	mov	r0, r5
 8012990:	47b8      	blx	r7
 8012992:	3001      	adds	r0, #1
 8012994:	f43f af1d 	beq.w	80127d2 <_printf_float+0xb6>
 8012998:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801299c:	ea59 0303 	orrs.w	r3, r9, r3
 80129a0:	d102      	bne.n	80129a8 <_printf_float+0x28c>
 80129a2:	6823      	ldr	r3, [r4, #0]
 80129a4:	07d9      	lsls	r1, r3, #31
 80129a6:	d5d7      	bpl.n	8012958 <_printf_float+0x23c>
 80129a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80129ac:	4631      	mov	r1, r6
 80129ae:	4628      	mov	r0, r5
 80129b0:	47b8      	blx	r7
 80129b2:	3001      	adds	r0, #1
 80129b4:	f43f af0d 	beq.w	80127d2 <_printf_float+0xb6>
 80129b8:	f04f 0a00 	mov.w	sl, #0
 80129bc:	f104 0b1a 	add.w	fp, r4, #26
 80129c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80129c2:	425b      	negs	r3, r3
 80129c4:	4553      	cmp	r3, sl
 80129c6:	dc01      	bgt.n	80129cc <_printf_float+0x2b0>
 80129c8:	464b      	mov	r3, r9
 80129ca:	e793      	b.n	80128f4 <_printf_float+0x1d8>
 80129cc:	2301      	movs	r3, #1
 80129ce:	465a      	mov	r2, fp
 80129d0:	4631      	mov	r1, r6
 80129d2:	4628      	mov	r0, r5
 80129d4:	47b8      	blx	r7
 80129d6:	3001      	adds	r0, #1
 80129d8:	f43f aefb 	beq.w	80127d2 <_printf_float+0xb6>
 80129dc:	f10a 0a01 	add.w	sl, sl, #1
 80129e0:	e7ee      	b.n	80129c0 <_printf_float+0x2a4>
 80129e2:	bf00      	nop
 80129e4:	7fefffff 	.word	0x7fefffff
 80129e8:	08024a64 	.word	0x08024a64
 80129ec:	08024a68 	.word	0x08024a68
 80129f0:	08024a6c 	.word	0x08024a6c
 80129f4:	08024a70 	.word	0x08024a70
 80129f8:	08024a74 	.word	0x08024a74
 80129fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80129fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012a02:	4553      	cmp	r3, sl
 8012a04:	bfa8      	it	ge
 8012a06:	4653      	movge	r3, sl
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	4699      	mov	r9, r3
 8012a0c:	dc36      	bgt.n	8012a7c <_printf_float+0x360>
 8012a0e:	f04f 0b00 	mov.w	fp, #0
 8012a12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012a16:	f104 021a 	add.w	r2, r4, #26
 8012a1a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012a1c:	9306      	str	r3, [sp, #24]
 8012a1e:	eba3 0309 	sub.w	r3, r3, r9
 8012a22:	455b      	cmp	r3, fp
 8012a24:	dc31      	bgt.n	8012a8a <_printf_float+0x36e>
 8012a26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a28:	459a      	cmp	sl, r3
 8012a2a:	dc3a      	bgt.n	8012aa2 <_printf_float+0x386>
 8012a2c:	6823      	ldr	r3, [r4, #0]
 8012a2e:	07da      	lsls	r2, r3, #31
 8012a30:	d437      	bmi.n	8012aa2 <_printf_float+0x386>
 8012a32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a34:	ebaa 0903 	sub.w	r9, sl, r3
 8012a38:	9b06      	ldr	r3, [sp, #24]
 8012a3a:	ebaa 0303 	sub.w	r3, sl, r3
 8012a3e:	4599      	cmp	r9, r3
 8012a40:	bfa8      	it	ge
 8012a42:	4699      	movge	r9, r3
 8012a44:	f1b9 0f00 	cmp.w	r9, #0
 8012a48:	dc33      	bgt.n	8012ab2 <_printf_float+0x396>
 8012a4a:	f04f 0800 	mov.w	r8, #0
 8012a4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012a52:	f104 0b1a 	add.w	fp, r4, #26
 8012a56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a58:	ebaa 0303 	sub.w	r3, sl, r3
 8012a5c:	eba3 0309 	sub.w	r3, r3, r9
 8012a60:	4543      	cmp	r3, r8
 8012a62:	f77f af79 	ble.w	8012958 <_printf_float+0x23c>
 8012a66:	2301      	movs	r3, #1
 8012a68:	465a      	mov	r2, fp
 8012a6a:	4631      	mov	r1, r6
 8012a6c:	4628      	mov	r0, r5
 8012a6e:	47b8      	blx	r7
 8012a70:	3001      	adds	r0, #1
 8012a72:	f43f aeae 	beq.w	80127d2 <_printf_float+0xb6>
 8012a76:	f108 0801 	add.w	r8, r8, #1
 8012a7a:	e7ec      	b.n	8012a56 <_printf_float+0x33a>
 8012a7c:	4642      	mov	r2, r8
 8012a7e:	4631      	mov	r1, r6
 8012a80:	4628      	mov	r0, r5
 8012a82:	47b8      	blx	r7
 8012a84:	3001      	adds	r0, #1
 8012a86:	d1c2      	bne.n	8012a0e <_printf_float+0x2f2>
 8012a88:	e6a3      	b.n	80127d2 <_printf_float+0xb6>
 8012a8a:	2301      	movs	r3, #1
 8012a8c:	4631      	mov	r1, r6
 8012a8e:	4628      	mov	r0, r5
 8012a90:	9206      	str	r2, [sp, #24]
 8012a92:	47b8      	blx	r7
 8012a94:	3001      	adds	r0, #1
 8012a96:	f43f ae9c 	beq.w	80127d2 <_printf_float+0xb6>
 8012a9a:	9a06      	ldr	r2, [sp, #24]
 8012a9c:	f10b 0b01 	add.w	fp, fp, #1
 8012aa0:	e7bb      	b.n	8012a1a <_printf_float+0x2fe>
 8012aa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012aa6:	4631      	mov	r1, r6
 8012aa8:	4628      	mov	r0, r5
 8012aaa:	47b8      	blx	r7
 8012aac:	3001      	adds	r0, #1
 8012aae:	d1c0      	bne.n	8012a32 <_printf_float+0x316>
 8012ab0:	e68f      	b.n	80127d2 <_printf_float+0xb6>
 8012ab2:	9a06      	ldr	r2, [sp, #24]
 8012ab4:	464b      	mov	r3, r9
 8012ab6:	4442      	add	r2, r8
 8012ab8:	4631      	mov	r1, r6
 8012aba:	4628      	mov	r0, r5
 8012abc:	47b8      	blx	r7
 8012abe:	3001      	adds	r0, #1
 8012ac0:	d1c3      	bne.n	8012a4a <_printf_float+0x32e>
 8012ac2:	e686      	b.n	80127d2 <_printf_float+0xb6>
 8012ac4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012ac8:	f1ba 0f01 	cmp.w	sl, #1
 8012acc:	dc01      	bgt.n	8012ad2 <_printf_float+0x3b6>
 8012ace:	07db      	lsls	r3, r3, #31
 8012ad0:	d536      	bpl.n	8012b40 <_printf_float+0x424>
 8012ad2:	2301      	movs	r3, #1
 8012ad4:	4642      	mov	r2, r8
 8012ad6:	4631      	mov	r1, r6
 8012ad8:	4628      	mov	r0, r5
 8012ada:	47b8      	blx	r7
 8012adc:	3001      	adds	r0, #1
 8012ade:	f43f ae78 	beq.w	80127d2 <_printf_float+0xb6>
 8012ae2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012ae6:	4631      	mov	r1, r6
 8012ae8:	4628      	mov	r0, r5
 8012aea:	47b8      	blx	r7
 8012aec:	3001      	adds	r0, #1
 8012aee:	f43f ae70 	beq.w	80127d2 <_printf_float+0xb6>
 8012af2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012af6:	2200      	movs	r2, #0
 8012af8:	2300      	movs	r3, #0
 8012afa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012afe:	f7ee f80b 	bl	8000b18 <__aeabi_dcmpeq>
 8012b02:	b9c0      	cbnz	r0, 8012b36 <_printf_float+0x41a>
 8012b04:	4653      	mov	r3, sl
 8012b06:	f108 0201 	add.w	r2, r8, #1
 8012b0a:	4631      	mov	r1, r6
 8012b0c:	4628      	mov	r0, r5
 8012b0e:	47b8      	blx	r7
 8012b10:	3001      	adds	r0, #1
 8012b12:	d10c      	bne.n	8012b2e <_printf_float+0x412>
 8012b14:	e65d      	b.n	80127d2 <_printf_float+0xb6>
 8012b16:	2301      	movs	r3, #1
 8012b18:	465a      	mov	r2, fp
 8012b1a:	4631      	mov	r1, r6
 8012b1c:	4628      	mov	r0, r5
 8012b1e:	47b8      	blx	r7
 8012b20:	3001      	adds	r0, #1
 8012b22:	f43f ae56 	beq.w	80127d2 <_printf_float+0xb6>
 8012b26:	f108 0801 	add.w	r8, r8, #1
 8012b2a:	45d0      	cmp	r8, sl
 8012b2c:	dbf3      	blt.n	8012b16 <_printf_float+0x3fa>
 8012b2e:	464b      	mov	r3, r9
 8012b30:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012b34:	e6df      	b.n	80128f6 <_printf_float+0x1da>
 8012b36:	f04f 0800 	mov.w	r8, #0
 8012b3a:	f104 0b1a 	add.w	fp, r4, #26
 8012b3e:	e7f4      	b.n	8012b2a <_printf_float+0x40e>
 8012b40:	2301      	movs	r3, #1
 8012b42:	4642      	mov	r2, r8
 8012b44:	e7e1      	b.n	8012b0a <_printf_float+0x3ee>
 8012b46:	2301      	movs	r3, #1
 8012b48:	464a      	mov	r2, r9
 8012b4a:	4631      	mov	r1, r6
 8012b4c:	4628      	mov	r0, r5
 8012b4e:	47b8      	blx	r7
 8012b50:	3001      	adds	r0, #1
 8012b52:	f43f ae3e 	beq.w	80127d2 <_printf_float+0xb6>
 8012b56:	f108 0801 	add.w	r8, r8, #1
 8012b5a:	68e3      	ldr	r3, [r4, #12]
 8012b5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012b5e:	1a5b      	subs	r3, r3, r1
 8012b60:	4543      	cmp	r3, r8
 8012b62:	dcf0      	bgt.n	8012b46 <_printf_float+0x42a>
 8012b64:	e6fc      	b.n	8012960 <_printf_float+0x244>
 8012b66:	f04f 0800 	mov.w	r8, #0
 8012b6a:	f104 0919 	add.w	r9, r4, #25
 8012b6e:	e7f4      	b.n	8012b5a <_printf_float+0x43e>

08012b70 <_printf_common>:
 8012b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b74:	4616      	mov	r6, r2
 8012b76:	4698      	mov	r8, r3
 8012b78:	688a      	ldr	r2, [r1, #8]
 8012b7a:	690b      	ldr	r3, [r1, #16]
 8012b7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012b80:	4293      	cmp	r3, r2
 8012b82:	bfb8      	it	lt
 8012b84:	4613      	movlt	r3, r2
 8012b86:	6033      	str	r3, [r6, #0]
 8012b88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012b8c:	4607      	mov	r7, r0
 8012b8e:	460c      	mov	r4, r1
 8012b90:	b10a      	cbz	r2, 8012b96 <_printf_common+0x26>
 8012b92:	3301      	adds	r3, #1
 8012b94:	6033      	str	r3, [r6, #0]
 8012b96:	6823      	ldr	r3, [r4, #0]
 8012b98:	0699      	lsls	r1, r3, #26
 8012b9a:	bf42      	ittt	mi
 8012b9c:	6833      	ldrmi	r3, [r6, #0]
 8012b9e:	3302      	addmi	r3, #2
 8012ba0:	6033      	strmi	r3, [r6, #0]
 8012ba2:	6825      	ldr	r5, [r4, #0]
 8012ba4:	f015 0506 	ands.w	r5, r5, #6
 8012ba8:	d106      	bne.n	8012bb8 <_printf_common+0x48>
 8012baa:	f104 0a19 	add.w	sl, r4, #25
 8012bae:	68e3      	ldr	r3, [r4, #12]
 8012bb0:	6832      	ldr	r2, [r6, #0]
 8012bb2:	1a9b      	subs	r3, r3, r2
 8012bb4:	42ab      	cmp	r3, r5
 8012bb6:	dc26      	bgt.n	8012c06 <_printf_common+0x96>
 8012bb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012bbc:	6822      	ldr	r2, [r4, #0]
 8012bbe:	3b00      	subs	r3, #0
 8012bc0:	bf18      	it	ne
 8012bc2:	2301      	movne	r3, #1
 8012bc4:	0692      	lsls	r2, r2, #26
 8012bc6:	d42b      	bmi.n	8012c20 <_printf_common+0xb0>
 8012bc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012bcc:	4641      	mov	r1, r8
 8012bce:	4638      	mov	r0, r7
 8012bd0:	47c8      	blx	r9
 8012bd2:	3001      	adds	r0, #1
 8012bd4:	d01e      	beq.n	8012c14 <_printf_common+0xa4>
 8012bd6:	6823      	ldr	r3, [r4, #0]
 8012bd8:	6922      	ldr	r2, [r4, #16]
 8012bda:	f003 0306 	and.w	r3, r3, #6
 8012bde:	2b04      	cmp	r3, #4
 8012be0:	bf02      	ittt	eq
 8012be2:	68e5      	ldreq	r5, [r4, #12]
 8012be4:	6833      	ldreq	r3, [r6, #0]
 8012be6:	1aed      	subeq	r5, r5, r3
 8012be8:	68a3      	ldr	r3, [r4, #8]
 8012bea:	bf0c      	ite	eq
 8012bec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012bf0:	2500      	movne	r5, #0
 8012bf2:	4293      	cmp	r3, r2
 8012bf4:	bfc4      	itt	gt
 8012bf6:	1a9b      	subgt	r3, r3, r2
 8012bf8:	18ed      	addgt	r5, r5, r3
 8012bfa:	2600      	movs	r6, #0
 8012bfc:	341a      	adds	r4, #26
 8012bfe:	42b5      	cmp	r5, r6
 8012c00:	d11a      	bne.n	8012c38 <_printf_common+0xc8>
 8012c02:	2000      	movs	r0, #0
 8012c04:	e008      	b.n	8012c18 <_printf_common+0xa8>
 8012c06:	2301      	movs	r3, #1
 8012c08:	4652      	mov	r2, sl
 8012c0a:	4641      	mov	r1, r8
 8012c0c:	4638      	mov	r0, r7
 8012c0e:	47c8      	blx	r9
 8012c10:	3001      	adds	r0, #1
 8012c12:	d103      	bne.n	8012c1c <_printf_common+0xac>
 8012c14:	f04f 30ff 	mov.w	r0, #4294967295
 8012c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c1c:	3501      	adds	r5, #1
 8012c1e:	e7c6      	b.n	8012bae <_printf_common+0x3e>
 8012c20:	18e1      	adds	r1, r4, r3
 8012c22:	1c5a      	adds	r2, r3, #1
 8012c24:	2030      	movs	r0, #48	@ 0x30
 8012c26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012c2a:	4422      	add	r2, r4
 8012c2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012c30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012c34:	3302      	adds	r3, #2
 8012c36:	e7c7      	b.n	8012bc8 <_printf_common+0x58>
 8012c38:	2301      	movs	r3, #1
 8012c3a:	4622      	mov	r2, r4
 8012c3c:	4641      	mov	r1, r8
 8012c3e:	4638      	mov	r0, r7
 8012c40:	47c8      	blx	r9
 8012c42:	3001      	adds	r0, #1
 8012c44:	d0e6      	beq.n	8012c14 <_printf_common+0xa4>
 8012c46:	3601      	adds	r6, #1
 8012c48:	e7d9      	b.n	8012bfe <_printf_common+0x8e>
	...

08012c4c <_printf_i>:
 8012c4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012c50:	7e0f      	ldrb	r7, [r1, #24]
 8012c52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012c54:	2f78      	cmp	r7, #120	@ 0x78
 8012c56:	4691      	mov	r9, r2
 8012c58:	4680      	mov	r8, r0
 8012c5a:	460c      	mov	r4, r1
 8012c5c:	469a      	mov	sl, r3
 8012c5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012c62:	d807      	bhi.n	8012c74 <_printf_i+0x28>
 8012c64:	2f62      	cmp	r7, #98	@ 0x62
 8012c66:	d80a      	bhi.n	8012c7e <_printf_i+0x32>
 8012c68:	2f00      	cmp	r7, #0
 8012c6a:	f000 80d2 	beq.w	8012e12 <_printf_i+0x1c6>
 8012c6e:	2f58      	cmp	r7, #88	@ 0x58
 8012c70:	f000 80b9 	beq.w	8012de6 <_printf_i+0x19a>
 8012c74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012c78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012c7c:	e03a      	b.n	8012cf4 <_printf_i+0xa8>
 8012c7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012c82:	2b15      	cmp	r3, #21
 8012c84:	d8f6      	bhi.n	8012c74 <_printf_i+0x28>
 8012c86:	a101      	add	r1, pc, #4	@ (adr r1, 8012c8c <_printf_i+0x40>)
 8012c88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012c8c:	08012ce5 	.word	0x08012ce5
 8012c90:	08012cf9 	.word	0x08012cf9
 8012c94:	08012c75 	.word	0x08012c75
 8012c98:	08012c75 	.word	0x08012c75
 8012c9c:	08012c75 	.word	0x08012c75
 8012ca0:	08012c75 	.word	0x08012c75
 8012ca4:	08012cf9 	.word	0x08012cf9
 8012ca8:	08012c75 	.word	0x08012c75
 8012cac:	08012c75 	.word	0x08012c75
 8012cb0:	08012c75 	.word	0x08012c75
 8012cb4:	08012c75 	.word	0x08012c75
 8012cb8:	08012df9 	.word	0x08012df9
 8012cbc:	08012d23 	.word	0x08012d23
 8012cc0:	08012db3 	.word	0x08012db3
 8012cc4:	08012c75 	.word	0x08012c75
 8012cc8:	08012c75 	.word	0x08012c75
 8012ccc:	08012e1b 	.word	0x08012e1b
 8012cd0:	08012c75 	.word	0x08012c75
 8012cd4:	08012d23 	.word	0x08012d23
 8012cd8:	08012c75 	.word	0x08012c75
 8012cdc:	08012c75 	.word	0x08012c75
 8012ce0:	08012dbb 	.word	0x08012dbb
 8012ce4:	6833      	ldr	r3, [r6, #0]
 8012ce6:	1d1a      	adds	r2, r3, #4
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	6032      	str	r2, [r6, #0]
 8012cec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012cf0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012cf4:	2301      	movs	r3, #1
 8012cf6:	e09d      	b.n	8012e34 <_printf_i+0x1e8>
 8012cf8:	6833      	ldr	r3, [r6, #0]
 8012cfa:	6820      	ldr	r0, [r4, #0]
 8012cfc:	1d19      	adds	r1, r3, #4
 8012cfe:	6031      	str	r1, [r6, #0]
 8012d00:	0606      	lsls	r6, r0, #24
 8012d02:	d501      	bpl.n	8012d08 <_printf_i+0xbc>
 8012d04:	681d      	ldr	r5, [r3, #0]
 8012d06:	e003      	b.n	8012d10 <_printf_i+0xc4>
 8012d08:	0645      	lsls	r5, r0, #25
 8012d0a:	d5fb      	bpl.n	8012d04 <_printf_i+0xb8>
 8012d0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012d10:	2d00      	cmp	r5, #0
 8012d12:	da03      	bge.n	8012d1c <_printf_i+0xd0>
 8012d14:	232d      	movs	r3, #45	@ 0x2d
 8012d16:	426d      	negs	r5, r5
 8012d18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012d1c:	4859      	ldr	r0, [pc, #356]	@ (8012e84 <_printf_i+0x238>)
 8012d1e:	230a      	movs	r3, #10
 8012d20:	e011      	b.n	8012d46 <_printf_i+0xfa>
 8012d22:	6821      	ldr	r1, [r4, #0]
 8012d24:	6833      	ldr	r3, [r6, #0]
 8012d26:	0608      	lsls	r0, r1, #24
 8012d28:	f853 5b04 	ldr.w	r5, [r3], #4
 8012d2c:	d402      	bmi.n	8012d34 <_printf_i+0xe8>
 8012d2e:	0649      	lsls	r1, r1, #25
 8012d30:	bf48      	it	mi
 8012d32:	b2ad      	uxthmi	r5, r5
 8012d34:	2f6f      	cmp	r7, #111	@ 0x6f
 8012d36:	4853      	ldr	r0, [pc, #332]	@ (8012e84 <_printf_i+0x238>)
 8012d38:	6033      	str	r3, [r6, #0]
 8012d3a:	bf14      	ite	ne
 8012d3c:	230a      	movne	r3, #10
 8012d3e:	2308      	moveq	r3, #8
 8012d40:	2100      	movs	r1, #0
 8012d42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012d46:	6866      	ldr	r6, [r4, #4]
 8012d48:	60a6      	str	r6, [r4, #8]
 8012d4a:	2e00      	cmp	r6, #0
 8012d4c:	bfa2      	ittt	ge
 8012d4e:	6821      	ldrge	r1, [r4, #0]
 8012d50:	f021 0104 	bicge.w	r1, r1, #4
 8012d54:	6021      	strge	r1, [r4, #0]
 8012d56:	b90d      	cbnz	r5, 8012d5c <_printf_i+0x110>
 8012d58:	2e00      	cmp	r6, #0
 8012d5a:	d04b      	beq.n	8012df4 <_printf_i+0x1a8>
 8012d5c:	4616      	mov	r6, r2
 8012d5e:	fbb5 f1f3 	udiv	r1, r5, r3
 8012d62:	fb03 5711 	mls	r7, r3, r1, r5
 8012d66:	5dc7      	ldrb	r7, [r0, r7]
 8012d68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012d6c:	462f      	mov	r7, r5
 8012d6e:	42bb      	cmp	r3, r7
 8012d70:	460d      	mov	r5, r1
 8012d72:	d9f4      	bls.n	8012d5e <_printf_i+0x112>
 8012d74:	2b08      	cmp	r3, #8
 8012d76:	d10b      	bne.n	8012d90 <_printf_i+0x144>
 8012d78:	6823      	ldr	r3, [r4, #0]
 8012d7a:	07df      	lsls	r7, r3, #31
 8012d7c:	d508      	bpl.n	8012d90 <_printf_i+0x144>
 8012d7e:	6923      	ldr	r3, [r4, #16]
 8012d80:	6861      	ldr	r1, [r4, #4]
 8012d82:	4299      	cmp	r1, r3
 8012d84:	bfde      	ittt	le
 8012d86:	2330      	movle	r3, #48	@ 0x30
 8012d88:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012d8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012d90:	1b92      	subs	r2, r2, r6
 8012d92:	6122      	str	r2, [r4, #16]
 8012d94:	f8cd a000 	str.w	sl, [sp]
 8012d98:	464b      	mov	r3, r9
 8012d9a:	aa03      	add	r2, sp, #12
 8012d9c:	4621      	mov	r1, r4
 8012d9e:	4640      	mov	r0, r8
 8012da0:	f7ff fee6 	bl	8012b70 <_printf_common>
 8012da4:	3001      	adds	r0, #1
 8012da6:	d14a      	bne.n	8012e3e <_printf_i+0x1f2>
 8012da8:	f04f 30ff 	mov.w	r0, #4294967295
 8012dac:	b004      	add	sp, #16
 8012dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012db2:	6823      	ldr	r3, [r4, #0]
 8012db4:	f043 0320 	orr.w	r3, r3, #32
 8012db8:	6023      	str	r3, [r4, #0]
 8012dba:	4833      	ldr	r0, [pc, #204]	@ (8012e88 <_printf_i+0x23c>)
 8012dbc:	2778      	movs	r7, #120	@ 0x78
 8012dbe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012dc2:	6823      	ldr	r3, [r4, #0]
 8012dc4:	6831      	ldr	r1, [r6, #0]
 8012dc6:	061f      	lsls	r7, r3, #24
 8012dc8:	f851 5b04 	ldr.w	r5, [r1], #4
 8012dcc:	d402      	bmi.n	8012dd4 <_printf_i+0x188>
 8012dce:	065f      	lsls	r7, r3, #25
 8012dd0:	bf48      	it	mi
 8012dd2:	b2ad      	uxthmi	r5, r5
 8012dd4:	6031      	str	r1, [r6, #0]
 8012dd6:	07d9      	lsls	r1, r3, #31
 8012dd8:	bf44      	itt	mi
 8012dda:	f043 0320 	orrmi.w	r3, r3, #32
 8012dde:	6023      	strmi	r3, [r4, #0]
 8012de0:	b11d      	cbz	r5, 8012dea <_printf_i+0x19e>
 8012de2:	2310      	movs	r3, #16
 8012de4:	e7ac      	b.n	8012d40 <_printf_i+0xf4>
 8012de6:	4827      	ldr	r0, [pc, #156]	@ (8012e84 <_printf_i+0x238>)
 8012de8:	e7e9      	b.n	8012dbe <_printf_i+0x172>
 8012dea:	6823      	ldr	r3, [r4, #0]
 8012dec:	f023 0320 	bic.w	r3, r3, #32
 8012df0:	6023      	str	r3, [r4, #0]
 8012df2:	e7f6      	b.n	8012de2 <_printf_i+0x196>
 8012df4:	4616      	mov	r6, r2
 8012df6:	e7bd      	b.n	8012d74 <_printf_i+0x128>
 8012df8:	6833      	ldr	r3, [r6, #0]
 8012dfa:	6825      	ldr	r5, [r4, #0]
 8012dfc:	6961      	ldr	r1, [r4, #20]
 8012dfe:	1d18      	adds	r0, r3, #4
 8012e00:	6030      	str	r0, [r6, #0]
 8012e02:	062e      	lsls	r6, r5, #24
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	d501      	bpl.n	8012e0c <_printf_i+0x1c0>
 8012e08:	6019      	str	r1, [r3, #0]
 8012e0a:	e002      	b.n	8012e12 <_printf_i+0x1c6>
 8012e0c:	0668      	lsls	r0, r5, #25
 8012e0e:	d5fb      	bpl.n	8012e08 <_printf_i+0x1bc>
 8012e10:	8019      	strh	r1, [r3, #0]
 8012e12:	2300      	movs	r3, #0
 8012e14:	6123      	str	r3, [r4, #16]
 8012e16:	4616      	mov	r6, r2
 8012e18:	e7bc      	b.n	8012d94 <_printf_i+0x148>
 8012e1a:	6833      	ldr	r3, [r6, #0]
 8012e1c:	1d1a      	adds	r2, r3, #4
 8012e1e:	6032      	str	r2, [r6, #0]
 8012e20:	681e      	ldr	r6, [r3, #0]
 8012e22:	6862      	ldr	r2, [r4, #4]
 8012e24:	2100      	movs	r1, #0
 8012e26:	4630      	mov	r0, r6
 8012e28:	f7ed f9fa 	bl	8000220 <memchr>
 8012e2c:	b108      	cbz	r0, 8012e32 <_printf_i+0x1e6>
 8012e2e:	1b80      	subs	r0, r0, r6
 8012e30:	6060      	str	r0, [r4, #4]
 8012e32:	6863      	ldr	r3, [r4, #4]
 8012e34:	6123      	str	r3, [r4, #16]
 8012e36:	2300      	movs	r3, #0
 8012e38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012e3c:	e7aa      	b.n	8012d94 <_printf_i+0x148>
 8012e3e:	6923      	ldr	r3, [r4, #16]
 8012e40:	4632      	mov	r2, r6
 8012e42:	4649      	mov	r1, r9
 8012e44:	4640      	mov	r0, r8
 8012e46:	47d0      	blx	sl
 8012e48:	3001      	adds	r0, #1
 8012e4a:	d0ad      	beq.n	8012da8 <_printf_i+0x15c>
 8012e4c:	6823      	ldr	r3, [r4, #0]
 8012e4e:	079b      	lsls	r3, r3, #30
 8012e50:	d413      	bmi.n	8012e7a <_printf_i+0x22e>
 8012e52:	68e0      	ldr	r0, [r4, #12]
 8012e54:	9b03      	ldr	r3, [sp, #12]
 8012e56:	4298      	cmp	r0, r3
 8012e58:	bfb8      	it	lt
 8012e5a:	4618      	movlt	r0, r3
 8012e5c:	e7a6      	b.n	8012dac <_printf_i+0x160>
 8012e5e:	2301      	movs	r3, #1
 8012e60:	4632      	mov	r2, r6
 8012e62:	4649      	mov	r1, r9
 8012e64:	4640      	mov	r0, r8
 8012e66:	47d0      	blx	sl
 8012e68:	3001      	adds	r0, #1
 8012e6a:	d09d      	beq.n	8012da8 <_printf_i+0x15c>
 8012e6c:	3501      	adds	r5, #1
 8012e6e:	68e3      	ldr	r3, [r4, #12]
 8012e70:	9903      	ldr	r1, [sp, #12]
 8012e72:	1a5b      	subs	r3, r3, r1
 8012e74:	42ab      	cmp	r3, r5
 8012e76:	dcf2      	bgt.n	8012e5e <_printf_i+0x212>
 8012e78:	e7eb      	b.n	8012e52 <_printf_i+0x206>
 8012e7a:	2500      	movs	r5, #0
 8012e7c:	f104 0619 	add.w	r6, r4, #25
 8012e80:	e7f5      	b.n	8012e6e <_printf_i+0x222>
 8012e82:	bf00      	nop
 8012e84:	08024a76 	.word	0x08024a76
 8012e88:	08024a87 	.word	0x08024a87

08012e8c <_scanf_float>:
 8012e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e90:	b087      	sub	sp, #28
 8012e92:	4617      	mov	r7, r2
 8012e94:	9303      	str	r3, [sp, #12]
 8012e96:	688b      	ldr	r3, [r1, #8]
 8012e98:	1e5a      	subs	r2, r3, #1
 8012e9a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8012e9e:	bf81      	itttt	hi
 8012ea0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8012ea4:	eb03 0b05 	addhi.w	fp, r3, r5
 8012ea8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8012eac:	608b      	strhi	r3, [r1, #8]
 8012eae:	680b      	ldr	r3, [r1, #0]
 8012eb0:	460a      	mov	r2, r1
 8012eb2:	f04f 0500 	mov.w	r5, #0
 8012eb6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8012eba:	f842 3b1c 	str.w	r3, [r2], #28
 8012ebe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8012ec2:	4680      	mov	r8, r0
 8012ec4:	460c      	mov	r4, r1
 8012ec6:	bf98      	it	ls
 8012ec8:	f04f 0b00 	movls.w	fp, #0
 8012ecc:	9201      	str	r2, [sp, #4]
 8012ece:	4616      	mov	r6, r2
 8012ed0:	46aa      	mov	sl, r5
 8012ed2:	46a9      	mov	r9, r5
 8012ed4:	9502      	str	r5, [sp, #8]
 8012ed6:	68a2      	ldr	r2, [r4, #8]
 8012ed8:	b152      	cbz	r2, 8012ef0 <_scanf_float+0x64>
 8012eda:	683b      	ldr	r3, [r7, #0]
 8012edc:	781b      	ldrb	r3, [r3, #0]
 8012ede:	2b4e      	cmp	r3, #78	@ 0x4e
 8012ee0:	d864      	bhi.n	8012fac <_scanf_float+0x120>
 8012ee2:	2b40      	cmp	r3, #64	@ 0x40
 8012ee4:	d83c      	bhi.n	8012f60 <_scanf_float+0xd4>
 8012ee6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8012eea:	b2c8      	uxtb	r0, r1
 8012eec:	280e      	cmp	r0, #14
 8012eee:	d93a      	bls.n	8012f66 <_scanf_float+0xda>
 8012ef0:	f1b9 0f00 	cmp.w	r9, #0
 8012ef4:	d003      	beq.n	8012efe <_scanf_float+0x72>
 8012ef6:	6823      	ldr	r3, [r4, #0]
 8012ef8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012efc:	6023      	str	r3, [r4, #0]
 8012efe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012f02:	f1ba 0f01 	cmp.w	sl, #1
 8012f06:	f200 8117 	bhi.w	8013138 <_scanf_float+0x2ac>
 8012f0a:	9b01      	ldr	r3, [sp, #4]
 8012f0c:	429e      	cmp	r6, r3
 8012f0e:	f200 8108 	bhi.w	8013122 <_scanf_float+0x296>
 8012f12:	2001      	movs	r0, #1
 8012f14:	b007      	add	sp, #28
 8012f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f1a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8012f1e:	2a0d      	cmp	r2, #13
 8012f20:	d8e6      	bhi.n	8012ef0 <_scanf_float+0x64>
 8012f22:	a101      	add	r1, pc, #4	@ (adr r1, 8012f28 <_scanf_float+0x9c>)
 8012f24:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012f28:	0801306f 	.word	0x0801306f
 8012f2c:	08012ef1 	.word	0x08012ef1
 8012f30:	08012ef1 	.word	0x08012ef1
 8012f34:	08012ef1 	.word	0x08012ef1
 8012f38:	080130cf 	.word	0x080130cf
 8012f3c:	080130a7 	.word	0x080130a7
 8012f40:	08012ef1 	.word	0x08012ef1
 8012f44:	08012ef1 	.word	0x08012ef1
 8012f48:	0801307d 	.word	0x0801307d
 8012f4c:	08012ef1 	.word	0x08012ef1
 8012f50:	08012ef1 	.word	0x08012ef1
 8012f54:	08012ef1 	.word	0x08012ef1
 8012f58:	08012ef1 	.word	0x08012ef1
 8012f5c:	08013035 	.word	0x08013035
 8012f60:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8012f64:	e7db      	b.n	8012f1e <_scanf_float+0x92>
 8012f66:	290e      	cmp	r1, #14
 8012f68:	d8c2      	bhi.n	8012ef0 <_scanf_float+0x64>
 8012f6a:	a001      	add	r0, pc, #4	@ (adr r0, 8012f70 <_scanf_float+0xe4>)
 8012f6c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8012f70:	08013025 	.word	0x08013025
 8012f74:	08012ef1 	.word	0x08012ef1
 8012f78:	08013025 	.word	0x08013025
 8012f7c:	080130bb 	.word	0x080130bb
 8012f80:	08012ef1 	.word	0x08012ef1
 8012f84:	08012fcd 	.word	0x08012fcd
 8012f88:	0801300b 	.word	0x0801300b
 8012f8c:	0801300b 	.word	0x0801300b
 8012f90:	0801300b 	.word	0x0801300b
 8012f94:	0801300b 	.word	0x0801300b
 8012f98:	0801300b 	.word	0x0801300b
 8012f9c:	0801300b 	.word	0x0801300b
 8012fa0:	0801300b 	.word	0x0801300b
 8012fa4:	0801300b 	.word	0x0801300b
 8012fa8:	0801300b 	.word	0x0801300b
 8012fac:	2b6e      	cmp	r3, #110	@ 0x6e
 8012fae:	d809      	bhi.n	8012fc4 <_scanf_float+0x138>
 8012fb0:	2b60      	cmp	r3, #96	@ 0x60
 8012fb2:	d8b2      	bhi.n	8012f1a <_scanf_float+0x8e>
 8012fb4:	2b54      	cmp	r3, #84	@ 0x54
 8012fb6:	d07b      	beq.n	80130b0 <_scanf_float+0x224>
 8012fb8:	2b59      	cmp	r3, #89	@ 0x59
 8012fba:	d199      	bne.n	8012ef0 <_scanf_float+0x64>
 8012fbc:	2d07      	cmp	r5, #7
 8012fbe:	d197      	bne.n	8012ef0 <_scanf_float+0x64>
 8012fc0:	2508      	movs	r5, #8
 8012fc2:	e02c      	b.n	801301e <_scanf_float+0x192>
 8012fc4:	2b74      	cmp	r3, #116	@ 0x74
 8012fc6:	d073      	beq.n	80130b0 <_scanf_float+0x224>
 8012fc8:	2b79      	cmp	r3, #121	@ 0x79
 8012fca:	e7f6      	b.n	8012fba <_scanf_float+0x12e>
 8012fcc:	6821      	ldr	r1, [r4, #0]
 8012fce:	05c8      	lsls	r0, r1, #23
 8012fd0:	d51b      	bpl.n	801300a <_scanf_float+0x17e>
 8012fd2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8012fd6:	6021      	str	r1, [r4, #0]
 8012fd8:	f109 0901 	add.w	r9, r9, #1
 8012fdc:	f1bb 0f00 	cmp.w	fp, #0
 8012fe0:	d003      	beq.n	8012fea <_scanf_float+0x15e>
 8012fe2:	3201      	adds	r2, #1
 8012fe4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012fe8:	60a2      	str	r2, [r4, #8]
 8012fea:	68a3      	ldr	r3, [r4, #8]
 8012fec:	3b01      	subs	r3, #1
 8012fee:	60a3      	str	r3, [r4, #8]
 8012ff0:	6923      	ldr	r3, [r4, #16]
 8012ff2:	3301      	adds	r3, #1
 8012ff4:	6123      	str	r3, [r4, #16]
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	3b01      	subs	r3, #1
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	607b      	str	r3, [r7, #4]
 8012ffe:	f340 8087 	ble.w	8013110 <_scanf_float+0x284>
 8013002:	683b      	ldr	r3, [r7, #0]
 8013004:	3301      	adds	r3, #1
 8013006:	603b      	str	r3, [r7, #0]
 8013008:	e765      	b.n	8012ed6 <_scanf_float+0x4a>
 801300a:	eb1a 0105 	adds.w	r1, sl, r5
 801300e:	f47f af6f 	bne.w	8012ef0 <_scanf_float+0x64>
 8013012:	6822      	ldr	r2, [r4, #0]
 8013014:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8013018:	6022      	str	r2, [r4, #0]
 801301a:	460d      	mov	r5, r1
 801301c:	468a      	mov	sl, r1
 801301e:	f806 3b01 	strb.w	r3, [r6], #1
 8013022:	e7e2      	b.n	8012fea <_scanf_float+0x15e>
 8013024:	6822      	ldr	r2, [r4, #0]
 8013026:	0610      	lsls	r0, r2, #24
 8013028:	f57f af62 	bpl.w	8012ef0 <_scanf_float+0x64>
 801302c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8013030:	6022      	str	r2, [r4, #0]
 8013032:	e7f4      	b.n	801301e <_scanf_float+0x192>
 8013034:	f1ba 0f00 	cmp.w	sl, #0
 8013038:	d10e      	bne.n	8013058 <_scanf_float+0x1cc>
 801303a:	f1b9 0f00 	cmp.w	r9, #0
 801303e:	d10e      	bne.n	801305e <_scanf_float+0x1d2>
 8013040:	6822      	ldr	r2, [r4, #0]
 8013042:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8013046:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801304a:	d108      	bne.n	801305e <_scanf_float+0x1d2>
 801304c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8013050:	6022      	str	r2, [r4, #0]
 8013052:	f04f 0a01 	mov.w	sl, #1
 8013056:	e7e2      	b.n	801301e <_scanf_float+0x192>
 8013058:	f1ba 0f02 	cmp.w	sl, #2
 801305c:	d055      	beq.n	801310a <_scanf_float+0x27e>
 801305e:	2d01      	cmp	r5, #1
 8013060:	d002      	beq.n	8013068 <_scanf_float+0x1dc>
 8013062:	2d04      	cmp	r5, #4
 8013064:	f47f af44 	bne.w	8012ef0 <_scanf_float+0x64>
 8013068:	3501      	adds	r5, #1
 801306a:	b2ed      	uxtb	r5, r5
 801306c:	e7d7      	b.n	801301e <_scanf_float+0x192>
 801306e:	f1ba 0f01 	cmp.w	sl, #1
 8013072:	f47f af3d 	bne.w	8012ef0 <_scanf_float+0x64>
 8013076:	f04f 0a02 	mov.w	sl, #2
 801307a:	e7d0      	b.n	801301e <_scanf_float+0x192>
 801307c:	b97d      	cbnz	r5, 801309e <_scanf_float+0x212>
 801307e:	f1b9 0f00 	cmp.w	r9, #0
 8013082:	f47f af38 	bne.w	8012ef6 <_scanf_float+0x6a>
 8013086:	6822      	ldr	r2, [r4, #0]
 8013088:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801308c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8013090:	f040 8108 	bne.w	80132a4 <_scanf_float+0x418>
 8013094:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8013098:	6022      	str	r2, [r4, #0]
 801309a:	2501      	movs	r5, #1
 801309c:	e7bf      	b.n	801301e <_scanf_float+0x192>
 801309e:	2d03      	cmp	r5, #3
 80130a0:	d0e2      	beq.n	8013068 <_scanf_float+0x1dc>
 80130a2:	2d05      	cmp	r5, #5
 80130a4:	e7de      	b.n	8013064 <_scanf_float+0x1d8>
 80130a6:	2d02      	cmp	r5, #2
 80130a8:	f47f af22 	bne.w	8012ef0 <_scanf_float+0x64>
 80130ac:	2503      	movs	r5, #3
 80130ae:	e7b6      	b.n	801301e <_scanf_float+0x192>
 80130b0:	2d06      	cmp	r5, #6
 80130b2:	f47f af1d 	bne.w	8012ef0 <_scanf_float+0x64>
 80130b6:	2507      	movs	r5, #7
 80130b8:	e7b1      	b.n	801301e <_scanf_float+0x192>
 80130ba:	6822      	ldr	r2, [r4, #0]
 80130bc:	0591      	lsls	r1, r2, #22
 80130be:	f57f af17 	bpl.w	8012ef0 <_scanf_float+0x64>
 80130c2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80130c6:	6022      	str	r2, [r4, #0]
 80130c8:	f8cd 9008 	str.w	r9, [sp, #8]
 80130cc:	e7a7      	b.n	801301e <_scanf_float+0x192>
 80130ce:	6822      	ldr	r2, [r4, #0]
 80130d0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80130d4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80130d8:	d006      	beq.n	80130e8 <_scanf_float+0x25c>
 80130da:	0550      	lsls	r0, r2, #21
 80130dc:	f57f af08 	bpl.w	8012ef0 <_scanf_float+0x64>
 80130e0:	f1b9 0f00 	cmp.w	r9, #0
 80130e4:	f000 80de 	beq.w	80132a4 <_scanf_float+0x418>
 80130e8:	0591      	lsls	r1, r2, #22
 80130ea:	bf58      	it	pl
 80130ec:	9902      	ldrpl	r1, [sp, #8]
 80130ee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80130f2:	bf58      	it	pl
 80130f4:	eba9 0101 	subpl.w	r1, r9, r1
 80130f8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80130fc:	bf58      	it	pl
 80130fe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8013102:	6022      	str	r2, [r4, #0]
 8013104:	f04f 0900 	mov.w	r9, #0
 8013108:	e789      	b.n	801301e <_scanf_float+0x192>
 801310a:	f04f 0a03 	mov.w	sl, #3
 801310e:	e786      	b.n	801301e <_scanf_float+0x192>
 8013110:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8013114:	4639      	mov	r1, r7
 8013116:	4640      	mov	r0, r8
 8013118:	4798      	blx	r3
 801311a:	2800      	cmp	r0, #0
 801311c:	f43f aedb 	beq.w	8012ed6 <_scanf_float+0x4a>
 8013120:	e6e6      	b.n	8012ef0 <_scanf_float+0x64>
 8013122:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013126:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801312a:	463a      	mov	r2, r7
 801312c:	4640      	mov	r0, r8
 801312e:	4798      	blx	r3
 8013130:	6923      	ldr	r3, [r4, #16]
 8013132:	3b01      	subs	r3, #1
 8013134:	6123      	str	r3, [r4, #16]
 8013136:	e6e8      	b.n	8012f0a <_scanf_float+0x7e>
 8013138:	1e6b      	subs	r3, r5, #1
 801313a:	2b06      	cmp	r3, #6
 801313c:	d824      	bhi.n	8013188 <_scanf_float+0x2fc>
 801313e:	2d02      	cmp	r5, #2
 8013140:	d836      	bhi.n	80131b0 <_scanf_float+0x324>
 8013142:	9b01      	ldr	r3, [sp, #4]
 8013144:	429e      	cmp	r6, r3
 8013146:	f67f aee4 	bls.w	8012f12 <_scanf_float+0x86>
 801314a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801314e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013152:	463a      	mov	r2, r7
 8013154:	4640      	mov	r0, r8
 8013156:	4798      	blx	r3
 8013158:	6923      	ldr	r3, [r4, #16]
 801315a:	3b01      	subs	r3, #1
 801315c:	6123      	str	r3, [r4, #16]
 801315e:	e7f0      	b.n	8013142 <_scanf_float+0x2b6>
 8013160:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013164:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8013168:	463a      	mov	r2, r7
 801316a:	4640      	mov	r0, r8
 801316c:	4798      	blx	r3
 801316e:	6923      	ldr	r3, [r4, #16]
 8013170:	3b01      	subs	r3, #1
 8013172:	6123      	str	r3, [r4, #16]
 8013174:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013178:	fa5f fa8a 	uxtb.w	sl, sl
 801317c:	f1ba 0f02 	cmp.w	sl, #2
 8013180:	d1ee      	bne.n	8013160 <_scanf_float+0x2d4>
 8013182:	3d03      	subs	r5, #3
 8013184:	b2ed      	uxtb	r5, r5
 8013186:	1b76      	subs	r6, r6, r5
 8013188:	6823      	ldr	r3, [r4, #0]
 801318a:	05da      	lsls	r2, r3, #23
 801318c:	d530      	bpl.n	80131f0 <_scanf_float+0x364>
 801318e:	055b      	lsls	r3, r3, #21
 8013190:	d511      	bpl.n	80131b6 <_scanf_float+0x32a>
 8013192:	9b01      	ldr	r3, [sp, #4]
 8013194:	429e      	cmp	r6, r3
 8013196:	f67f aebc 	bls.w	8012f12 <_scanf_float+0x86>
 801319a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801319e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80131a2:	463a      	mov	r2, r7
 80131a4:	4640      	mov	r0, r8
 80131a6:	4798      	blx	r3
 80131a8:	6923      	ldr	r3, [r4, #16]
 80131aa:	3b01      	subs	r3, #1
 80131ac:	6123      	str	r3, [r4, #16]
 80131ae:	e7f0      	b.n	8013192 <_scanf_float+0x306>
 80131b0:	46aa      	mov	sl, r5
 80131b2:	46b3      	mov	fp, r6
 80131b4:	e7de      	b.n	8013174 <_scanf_float+0x2e8>
 80131b6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80131ba:	6923      	ldr	r3, [r4, #16]
 80131bc:	2965      	cmp	r1, #101	@ 0x65
 80131be:	f103 33ff 	add.w	r3, r3, #4294967295
 80131c2:	f106 35ff 	add.w	r5, r6, #4294967295
 80131c6:	6123      	str	r3, [r4, #16]
 80131c8:	d00c      	beq.n	80131e4 <_scanf_float+0x358>
 80131ca:	2945      	cmp	r1, #69	@ 0x45
 80131cc:	d00a      	beq.n	80131e4 <_scanf_float+0x358>
 80131ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80131d2:	463a      	mov	r2, r7
 80131d4:	4640      	mov	r0, r8
 80131d6:	4798      	blx	r3
 80131d8:	6923      	ldr	r3, [r4, #16]
 80131da:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80131de:	3b01      	subs	r3, #1
 80131e0:	1eb5      	subs	r5, r6, #2
 80131e2:	6123      	str	r3, [r4, #16]
 80131e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80131e8:	463a      	mov	r2, r7
 80131ea:	4640      	mov	r0, r8
 80131ec:	4798      	blx	r3
 80131ee:	462e      	mov	r6, r5
 80131f0:	6822      	ldr	r2, [r4, #0]
 80131f2:	f012 0210 	ands.w	r2, r2, #16
 80131f6:	d001      	beq.n	80131fc <_scanf_float+0x370>
 80131f8:	2000      	movs	r0, #0
 80131fa:	e68b      	b.n	8012f14 <_scanf_float+0x88>
 80131fc:	7032      	strb	r2, [r6, #0]
 80131fe:	6823      	ldr	r3, [r4, #0]
 8013200:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8013204:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013208:	d11c      	bne.n	8013244 <_scanf_float+0x3b8>
 801320a:	9b02      	ldr	r3, [sp, #8]
 801320c:	454b      	cmp	r3, r9
 801320e:	eba3 0209 	sub.w	r2, r3, r9
 8013212:	d123      	bne.n	801325c <_scanf_float+0x3d0>
 8013214:	9901      	ldr	r1, [sp, #4]
 8013216:	2200      	movs	r2, #0
 8013218:	4640      	mov	r0, r8
 801321a:	f002 fcfd 	bl	8015c18 <_strtod_r>
 801321e:	9b03      	ldr	r3, [sp, #12]
 8013220:	6821      	ldr	r1, [r4, #0]
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	f011 0f02 	tst.w	r1, #2
 8013228:	ec57 6b10 	vmov	r6, r7, d0
 801322c:	f103 0204 	add.w	r2, r3, #4
 8013230:	d01f      	beq.n	8013272 <_scanf_float+0x3e6>
 8013232:	9903      	ldr	r1, [sp, #12]
 8013234:	600a      	str	r2, [r1, #0]
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	e9c3 6700 	strd	r6, r7, [r3]
 801323c:	68e3      	ldr	r3, [r4, #12]
 801323e:	3301      	adds	r3, #1
 8013240:	60e3      	str	r3, [r4, #12]
 8013242:	e7d9      	b.n	80131f8 <_scanf_float+0x36c>
 8013244:	9b04      	ldr	r3, [sp, #16]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d0e4      	beq.n	8013214 <_scanf_float+0x388>
 801324a:	9905      	ldr	r1, [sp, #20]
 801324c:	230a      	movs	r3, #10
 801324e:	3101      	adds	r1, #1
 8013250:	4640      	mov	r0, r8
 8013252:	f002 fd61 	bl	8015d18 <_strtol_r>
 8013256:	9b04      	ldr	r3, [sp, #16]
 8013258:	9e05      	ldr	r6, [sp, #20]
 801325a:	1ac2      	subs	r2, r0, r3
 801325c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8013260:	429e      	cmp	r6, r3
 8013262:	bf28      	it	cs
 8013264:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8013268:	4910      	ldr	r1, [pc, #64]	@ (80132ac <_scanf_float+0x420>)
 801326a:	4630      	mov	r0, r6
 801326c:	f000 f954 	bl	8013518 <siprintf>
 8013270:	e7d0      	b.n	8013214 <_scanf_float+0x388>
 8013272:	f011 0f04 	tst.w	r1, #4
 8013276:	9903      	ldr	r1, [sp, #12]
 8013278:	600a      	str	r2, [r1, #0]
 801327a:	d1dc      	bne.n	8013236 <_scanf_float+0x3aa>
 801327c:	681d      	ldr	r5, [r3, #0]
 801327e:	4632      	mov	r2, r6
 8013280:	463b      	mov	r3, r7
 8013282:	4630      	mov	r0, r6
 8013284:	4639      	mov	r1, r7
 8013286:	f7ed fc79 	bl	8000b7c <__aeabi_dcmpun>
 801328a:	b128      	cbz	r0, 8013298 <_scanf_float+0x40c>
 801328c:	4808      	ldr	r0, [pc, #32]	@ (80132b0 <_scanf_float+0x424>)
 801328e:	f000 fabb 	bl	8013808 <nanf>
 8013292:	ed85 0a00 	vstr	s0, [r5]
 8013296:	e7d1      	b.n	801323c <_scanf_float+0x3b0>
 8013298:	4630      	mov	r0, r6
 801329a:	4639      	mov	r1, r7
 801329c:	f7ed fccc 	bl	8000c38 <__aeabi_d2f>
 80132a0:	6028      	str	r0, [r5, #0]
 80132a2:	e7cb      	b.n	801323c <_scanf_float+0x3b0>
 80132a4:	f04f 0900 	mov.w	r9, #0
 80132a8:	e629      	b.n	8012efe <_scanf_float+0x72>
 80132aa:	bf00      	nop
 80132ac:	08024a98 	.word	0x08024a98
 80132b0:	08024e2d 	.word	0x08024e2d

080132b4 <std>:
 80132b4:	2300      	movs	r3, #0
 80132b6:	b510      	push	{r4, lr}
 80132b8:	4604      	mov	r4, r0
 80132ba:	e9c0 3300 	strd	r3, r3, [r0]
 80132be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80132c2:	6083      	str	r3, [r0, #8]
 80132c4:	8181      	strh	r1, [r0, #12]
 80132c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80132c8:	81c2      	strh	r2, [r0, #14]
 80132ca:	6183      	str	r3, [r0, #24]
 80132cc:	4619      	mov	r1, r3
 80132ce:	2208      	movs	r2, #8
 80132d0:	305c      	adds	r0, #92	@ 0x5c
 80132d2:	f000 fa19 	bl	8013708 <memset>
 80132d6:	4b0d      	ldr	r3, [pc, #52]	@ (801330c <std+0x58>)
 80132d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80132da:	4b0d      	ldr	r3, [pc, #52]	@ (8013310 <std+0x5c>)
 80132dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80132de:	4b0d      	ldr	r3, [pc, #52]	@ (8013314 <std+0x60>)
 80132e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80132e2:	4b0d      	ldr	r3, [pc, #52]	@ (8013318 <std+0x64>)
 80132e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80132e6:	4b0d      	ldr	r3, [pc, #52]	@ (801331c <std+0x68>)
 80132e8:	6224      	str	r4, [r4, #32]
 80132ea:	429c      	cmp	r4, r3
 80132ec:	d006      	beq.n	80132fc <std+0x48>
 80132ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80132f2:	4294      	cmp	r4, r2
 80132f4:	d002      	beq.n	80132fc <std+0x48>
 80132f6:	33d0      	adds	r3, #208	@ 0xd0
 80132f8:	429c      	cmp	r4, r3
 80132fa:	d105      	bne.n	8013308 <std+0x54>
 80132fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013304:	f000 ba7c 	b.w	8013800 <__retarget_lock_init_recursive>
 8013308:	bd10      	pop	{r4, pc}
 801330a:	bf00      	nop
 801330c:	08013559 	.word	0x08013559
 8013310:	0801357b 	.word	0x0801357b
 8013314:	080135b3 	.word	0x080135b3
 8013318:	080135d7 	.word	0x080135d7
 801331c:	20003d60 	.word	0x20003d60

08013320 <stdio_exit_handler>:
 8013320:	4a02      	ldr	r2, [pc, #8]	@ (801332c <stdio_exit_handler+0xc>)
 8013322:	4903      	ldr	r1, [pc, #12]	@ (8013330 <stdio_exit_handler+0x10>)
 8013324:	4803      	ldr	r0, [pc, #12]	@ (8013334 <stdio_exit_handler+0x14>)
 8013326:	f000 b869 	b.w	80133fc <_fwalk_sglue>
 801332a:	bf00      	nop
 801332c:	200001cc 	.word	0x200001cc
 8013330:	08016359 	.word	0x08016359
 8013334:	200001dc 	.word	0x200001dc

08013338 <cleanup_stdio>:
 8013338:	6841      	ldr	r1, [r0, #4]
 801333a:	4b0c      	ldr	r3, [pc, #48]	@ (801336c <cleanup_stdio+0x34>)
 801333c:	4299      	cmp	r1, r3
 801333e:	b510      	push	{r4, lr}
 8013340:	4604      	mov	r4, r0
 8013342:	d001      	beq.n	8013348 <cleanup_stdio+0x10>
 8013344:	f003 f808 	bl	8016358 <_fflush_r>
 8013348:	68a1      	ldr	r1, [r4, #8]
 801334a:	4b09      	ldr	r3, [pc, #36]	@ (8013370 <cleanup_stdio+0x38>)
 801334c:	4299      	cmp	r1, r3
 801334e:	d002      	beq.n	8013356 <cleanup_stdio+0x1e>
 8013350:	4620      	mov	r0, r4
 8013352:	f003 f801 	bl	8016358 <_fflush_r>
 8013356:	68e1      	ldr	r1, [r4, #12]
 8013358:	4b06      	ldr	r3, [pc, #24]	@ (8013374 <cleanup_stdio+0x3c>)
 801335a:	4299      	cmp	r1, r3
 801335c:	d004      	beq.n	8013368 <cleanup_stdio+0x30>
 801335e:	4620      	mov	r0, r4
 8013360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013364:	f002 bff8 	b.w	8016358 <_fflush_r>
 8013368:	bd10      	pop	{r4, pc}
 801336a:	bf00      	nop
 801336c:	20003d60 	.word	0x20003d60
 8013370:	20003dc8 	.word	0x20003dc8
 8013374:	20003e30 	.word	0x20003e30

08013378 <global_stdio_init.part.0>:
 8013378:	b510      	push	{r4, lr}
 801337a:	4b0b      	ldr	r3, [pc, #44]	@ (80133a8 <global_stdio_init.part.0+0x30>)
 801337c:	4c0b      	ldr	r4, [pc, #44]	@ (80133ac <global_stdio_init.part.0+0x34>)
 801337e:	4a0c      	ldr	r2, [pc, #48]	@ (80133b0 <global_stdio_init.part.0+0x38>)
 8013380:	601a      	str	r2, [r3, #0]
 8013382:	4620      	mov	r0, r4
 8013384:	2200      	movs	r2, #0
 8013386:	2104      	movs	r1, #4
 8013388:	f7ff ff94 	bl	80132b4 <std>
 801338c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013390:	2201      	movs	r2, #1
 8013392:	2109      	movs	r1, #9
 8013394:	f7ff ff8e 	bl	80132b4 <std>
 8013398:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801339c:	2202      	movs	r2, #2
 801339e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133a2:	2112      	movs	r1, #18
 80133a4:	f7ff bf86 	b.w	80132b4 <std>
 80133a8:	20003e98 	.word	0x20003e98
 80133ac:	20003d60 	.word	0x20003d60
 80133b0:	08013321 	.word	0x08013321

080133b4 <__sfp_lock_acquire>:
 80133b4:	4801      	ldr	r0, [pc, #4]	@ (80133bc <__sfp_lock_acquire+0x8>)
 80133b6:	f000 ba24 	b.w	8013802 <__retarget_lock_acquire_recursive>
 80133ba:	bf00      	nop
 80133bc:	20003ea1 	.word	0x20003ea1

080133c0 <__sfp_lock_release>:
 80133c0:	4801      	ldr	r0, [pc, #4]	@ (80133c8 <__sfp_lock_release+0x8>)
 80133c2:	f000 ba1f 	b.w	8013804 <__retarget_lock_release_recursive>
 80133c6:	bf00      	nop
 80133c8:	20003ea1 	.word	0x20003ea1

080133cc <__sinit>:
 80133cc:	b510      	push	{r4, lr}
 80133ce:	4604      	mov	r4, r0
 80133d0:	f7ff fff0 	bl	80133b4 <__sfp_lock_acquire>
 80133d4:	6a23      	ldr	r3, [r4, #32]
 80133d6:	b11b      	cbz	r3, 80133e0 <__sinit+0x14>
 80133d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133dc:	f7ff bff0 	b.w	80133c0 <__sfp_lock_release>
 80133e0:	4b04      	ldr	r3, [pc, #16]	@ (80133f4 <__sinit+0x28>)
 80133e2:	6223      	str	r3, [r4, #32]
 80133e4:	4b04      	ldr	r3, [pc, #16]	@ (80133f8 <__sinit+0x2c>)
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d1f5      	bne.n	80133d8 <__sinit+0xc>
 80133ec:	f7ff ffc4 	bl	8013378 <global_stdio_init.part.0>
 80133f0:	e7f2      	b.n	80133d8 <__sinit+0xc>
 80133f2:	bf00      	nop
 80133f4:	08013339 	.word	0x08013339
 80133f8:	20003e98 	.word	0x20003e98

080133fc <_fwalk_sglue>:
 80133fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013400:	4607      	mov	r7, r0
 8013402:	4688      	mov	r8, r1
 8013404:	4614      	mov	r4, r2
 8013406:	2600      	movs	r6, #0
 8013408:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801340c:	f1b9 0901 	subs.w	r9, r9, #1
 8013410:	d505      	bpl.n	801341e <_fwalk_sglue+0x22>
 8013412:	6824      	ldr	r4, [r4, #0]
 8013414:	2c00      	cmp	r4, #0
 8013416:	d1f7      	bne.n	8013408 <_fwalk_sglue+0xc>
 8013418:	4630      	mov	r0, r6
 801341a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801341e:	89ab      	ldrh	r3, [r5, #12]
 8013420:	2b01      	cmp	r3, #1
 8013422:	d907      	bls.n	8013434 <_fwalk_sglue+0x38>
 8013424:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013428:	3301      	adds	r3, #1
 801342a:	d003      	beq.n	8013434 <_fwalk_sglue+0x38>
 801342c:	4629      	mov	r1, r5
 801342e:	4638      	mov	r0, r7
 8013430:	47c0      	blx	r8
 8013432:	4306      	orrs	r6, r0
 8013434:	3568      	adds	r5, #104	@ 0x68
 8013436:	e7e9      	b.n	801340c <_fwalk_sglue+0x10>

08013438 <iprintf>:
 8013438:	b40f      	push	{r0, r1, r2, r3}
 801343a:	b507      	push	{r0, r1, r2, lr}
 801343c:	4906      	ldr	r1, [pc, #24]	@ (8013458 <iprintf+0x20>)
 801343e:	ab04      	add	r3, sp, #16
 8013440:	6808      	ldr	r0, [r1, #0]
 8013442:	f853 2b04 	ldr.w	r2, [r3], #4
 8013446:	6881      	ldr	r1, [r0, #8]
 8013448:	9301      	str	r3, [sp, #4]
 801344a:	f002 fde9 	bl	8016020 <_vfiprintf_r>
 801344e:	b003      	add	sp, #12
 8013450:	f85d eb04 	ldr.w	lr, [sp], #4
 8013454:	b004      	add	sp, #16
 8013456:	4770      	bx	lr
 8013458:	200001d8 	.word	0x200001d8

0801345c <_puts_r>:
 801345c:	6a03      	ldr	r3, [r0, #32]
 801345e:	b570      	push	{r4, r5, r6, lr}
 8013460:	6884      	ldr	r4, [r0, #8]
 8013462:	4605      	mov	r5, r0
 8013464:	460e      	mov	r6, r1
 8013466:	b90b      	cbnz	r3, 801346c <_puts_r+0x10>
 8013468:	f7ff ffb0 	bl	80133cc <__sinit>
 801346c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801346e:	07db      	lsls	r3, r3, #31
 8013470:	d405      	bmi.n	801347e <_puts_r+0x22>
 8013472:	89a3      	ldrh	r3, [r4, #12]
 8013474:	0598      	lsls	r0, r3, #22
 8013476:	d402      	bmi.n	801347e <_puts_r+0x22>
 8013478:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801347a:	f000 f9c2 	bl	8013802 <__retarget_lock_acquire_recursive>
 801347e:	89a3      	ldrh	r3, [r4, #12]
 8013480:	0719      	lsls	r1, r3, #28
 8013482:	d502      	bpl.n	801348a <_puts_r+0x2e>
 8013484:	6923      	ldr	r3, [r4, #16]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d135      	bne.n	80134f6 <_puts_r+0x9a>
 801348a:	4621      	mov	r1, r4
 801348c:	4628      	mov	r0, r5
 801348e:	f000 f8e5 	bl	801365c <__swsetup_r>
 8013492:	b380      	cbz	r0, 80134f6 <_puts_r+0x9a>
 8013494:	f04f 35ff 	mov.w	r5, #4294967295
 8013498:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801349a:	07da      	lsls	r2, r3, #31
 801349c:	d405      	bmi.n	80134aa <_puts_r+0x4e>
 801349e:	89a3      	ldrh	r3, [r4, #12]
 80134a0:	059b      	lsls	r3, r3, #22
 80134a2:	d402      	bmi.n	80134aa <_puts_r+0x4e>
 80134a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80134a6:	f000 f9ad 	bl	8013804 <__retarget_lock_release_recursive>
 80134aa:	4628      	mov	r0, r5
 80134ac:	bd70      	pop	{r4, r5, r6, pc}
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	da04      	bge.n	80134bc <_puts_r+0x60>
 80134b2:	69a2      	ldr	r2, [r4, #24]
 80134b4:	429a      	cmp	r2, r3
 80134b6:	dc17      	bgt.n	80134e8 <_puts_r+0x8c>
 80134b8:	290a      	cmp	r1, #10
 80134ba:	d015      	beq.n	80134e8 <_puts_r+0x8c>
 80134bc:	6823      	ldr	r3, [r4, #0]
 80134be:	1c5a      	adds	r2, r3, #1
 80134c0:	6022      	str	r2, [r4, #0]
 80134c2:	7019      	strb	r1, [r3, #0]
 80134c4:	68a3      	ldr	r3, [r4, #8]
 80134c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80134ca:	3b01      	subs	r3, #1
 80134cc:	60a3      	str	r3, [r4, #8]
 80134ce:	2900      	cmp	r1, #0
 80134d0:	d1ed      	bne.n	80134ae <_puts_r+0x52>
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	da11      	bge.n	80134fa <_puts_r+0x9e>
 80134d6:	4622      	mov	r2, r4
 80134d8:	210a      	movs	r1, #10
 80134da:	4628      	mov	r0, r5
 80134dc:	f000 f87f 	bl	80135de <__swbuf_r>
 80134e0:	3001      	adds	r0, #1
 80134e2:	d0d7      	beq.n	8013494 <_puts_r+0x38>
 80134e4:	250a      	movs	r5, #10
 80134e6:	e7d7      	b.n	8013498 <_puts_r+0x3c>
 80134e8:	4622      	mov	r2, r4
 80134ea:	4628      	mov	r0, r5
 80134ec:	f000 f877 	bl	80135de <__swbuf_r>
 80134f0:	3001      	adds	r0, #1
 80134f2:	d1e7      	bne.n	80134c4 <_puts_r+0x68>
 80134f4:	e7ce      	b.n	8013494 <_puts_r+0x38>
 80134f6:	3e01      	subs	r6, #1
 80134f8:	e7e4      	b.n	80134c4 <_puts_r+0x68>
 80134fa:	6823      	ldr	r3, [r4, #0]
 80134fc:	1c5a      	adds	r2, r3, #1
 80134fe:	6022      	str	r2, [r4, #0]
 8013500:	220a      	movs	r2, #10
 8013502:	701a      	strb	r2, [r3, #0]
 8013504:	e7ee      	b.n	80134e4 <_puts_r+0x88>
	...

08013508 <puts>:
 8013508:	4b02      	ldr	r3, [pc, #8]	@ (8013514 <puts+0xc>)
 801350a:	4601      	mov	r1, r0
 801350c:	6818      	ldr	r0, [r3, #0]
 801350e:	f7ff bfa5 	b.w	801345c <_puts_r>
 8013512:	bf00      	nop
 8013514:	200001d8 	.word	0x200001d8

08013518 <siprintf>:
 8013518:	b40e      	push	{r1, r2, r3}
 801351a:	b500      	push	{lr}
 801351c:	b09c      	sub	sp, #112	@ 0x70
 801351e:	ab1d      	add	r3, sp, #116	@ 0x74
 8013520:	9002      	str	r0, [sp, #8]
 8013522:	9006      	str	r0, [sp, #24]
 8013524:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013528:	4809      	ldr	r0, [pc, #36]	@ (8013550 <siprintf+0x38>)
 801352a:	9107      	str	r1, [sp, #28]
 801352c:	9104      	str	r1, [sp, #16]
 801352e:	4909      	ldr	r1, [pc, #36]	@ (8013554 <siprintf+0x3c>)
 8013530:	f853 2b04 	ldr.w	r2, [r3], #4
 8013534:	9105      	str	r1, [sp, #20]
 8013536:	6800      	ldr	r0, [r0, #0]
 8013538:	9301      	str	r3, [sp, #4]
 801353a:	a902      	add	r1, sp, #8
 801353c:	f002 fc4a 	bl	8015dd4 <_svfiprintf_r>
 8013540:	9b02      	ldr	r3, [sp, #8]
 8013542:	2200      	movs	r2, #0
 8013544:	701a      	strb	r2, [r3, #0]
 8013546:	b01c      	add	sp, #112	@ 0x70
 8013548:	f85d eb04 	ldr.w	lr, [sp], #4
 801354c:	b003      	add	sp, #12
 801354e:	4770      	bx	lr
 8013550:	200001d8 	.word	0x200001d8
 8013554:	ffff0208 	.word	0xffff0208

08013558 <__sread>:
 8013558:	b510      	push	{r4, lr}
 801355a:	460c      	mov	r4, r1
 801355c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013560:	f000 f900 	bl	8013764 <_read_r>
 8013564:	2800      	cmp	r0, #0
 8013566:	bfab      	itete	ge
 8013568:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801356a:	89a3      	ldrhlt	r3, [r4, #12]
 801356c:	181b      	addge	r3, r3, r0
 801356e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013572:	bfac      	ite	ge
 8013574:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013576:	81a3      	strhlt	r3, [r4, #12]
 8013578:	bd10      	pop	{r4, pc}

0801357a <__swrite>:
 801357a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801357e:	461f      	mov	r7, r3
 8013580:	898b      	ldrh	r3, [r1, #12]
 8013582:	05db      	lsls	r3, r3, #23
 8013584:	4605      	mov	r5, r0
 8013586:	460c      	mov	r4, r1
 8013588:	4616      	mov	r6, r2
 801358a:	d505      	bpl.n	8013598 <__swrite+0x1e>
 801358c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013590:	2302      	movs	r3, #2
 8013592:	2200      	movs	r2, #0
 8013594:	f000 f8d4 	bl	8013740 <_lseek_r>
 8013598:	89a3      	ldrh	r3, [r4, #12]
 801359a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801359e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80135a2:	81a3      	strh	r3, [r4, #12]
 80135a4:	4632      	mov	r2, r6
 80135a6:	463b      	mov	r3, r7
 80135a8:	4628      	mov	r0, r5
 80135aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80135ae:	f000 b8eb 	b.w	8013788 <_write_r>

080135b2 <__sseek>:
 80135b2:	b510      	push	{r4, lr}
 80135b4:	460c      	mov	r4, r1
 80135b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135ba:	f000 f8c1 	bl	8013740 <_lseek_r>
 80135be:	1c43      	adds	r3, r0, #1
 80135c0:	89a3      	ldrh	r3, [r4, #12]
 80135c2:	bf15      	itete	ne
 80135c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80135c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80135ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80135ce:	81a3      	strheq	r3, [r4, #12]
 80135d0:	bf18      	it	ne
 80135d2:	81a3      	strhne	r3, [r4, #12]
 80135d4:	bd10      	pop	{r4, pc}

080135d6 <__sclose>:
 80135d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135da:	f000 b8a1 	b.w	8013720 <_close_r>

080135de <__swbuf_r>:
 80135de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135e0:	460e      	mov	r6, r1
 80135e2:	4614      	mov	r4, r2
 80135e4:	4605      	mov	r5, r0
 80135e6:	b118      	cbz	r0, 80135f0 <__swbuf_r+0x12>
 80135e8:	6a03      	ldr	r3, [r0, #32]
 80135ea:	b90b      	cbnz	r3, 80135f0 <__swbuf_r+0x12>
 80135ec:	f7ff feee 	bl	80133cc <__sinit>
 80135f0:	69a3      	ldr	r3, [r4, #24]
 80135f2:	60a3      	str	r3, [r4, #8]
 80135f4:	89a3      	ldrh	r3, [r4, #12]
 80135f6:	071a      	lsls	r2, r3, #28
 80135f8:	d501      	bpl.n	80135fe <__swbuf_r+0x20>
 80135fa:	6923      	ldr	r3, [r4, #16]
 80135fc:	b943      	cbnz	r3, 8013610 <__swbuf_r+0x32>
 80135fe:	4621      	mov	r1, r4
 8013600:	4628      	mov	r0, r5
 8013602:	f000 f82b 	bl	801365c <__swsetup_r>
 8013606:	b118      	cbz	r0, 8013610 <__swbuf_r+0x32>
 8013608:	f04f 37ff 	mov.w	r7, #4294967295
 801360c:	4638      	mov	r0, r7
 801360e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013610:	6823      	ldr	r3, [r4, #0]
 8013612:	6922      	ldr	r2, [r4, #16]
 8013614:	1a98      	subs	r0, r3, r2
 8013616:	6963      	ldr	r3, [r4, #20]
 8013618:	b2f6      	uxtb	r6, r6
 801361a:	4283      	cmp	r3, r0
 801361c:	4637      	mov	r7, r6
 801361e:	dc05      	bgt.n	801362c <__swbuf_r+0x4e>
 8013620:	4621      	mov	r1, r4
 8013622:	4628      	mov	r0, r5
 8013624:	f002 fe98 	bl	8016358 <_fflush_r>
 8013628:	2800      	cmp	r0, #0
 801362a:	d1ed      	bne.n	8013608 <__swbuf_r+0x2a>
 801362c:	68a3      	ldr	r3, [r4, #8]
 801362e:	3b01      	subs	r3, #1
 8013630:	60a3      	str	r3, [r4, #8]
 8013632:	6823      	ldr	r3, [r4, #0]
 8013634:	1c5a      	adds	r2, r3, #1
 8013636:	6022      	str	r2, [r4, #0]
 8013638:	701e      	strb	r6, [r3, #0]
 801363a:	6962      	ldr	r2, [r4, #20]
 801363c:	1c43      	adds	r3, r0, #1
 801363e:	429a      	cmp	r2, r3
 8013640:	d004      	beq.n	801364c <__swbuf_r+0x6e>
 8013642:	89a3      	ldrh	r3, [r4, #12]
 8013644:	07db      	lsls	r3, r3, #31
 8013646:	d5e1      	bpl.n	801360c <__swbuf_r+0x2e>
 8013648:	2e0a      	cmp	r6, #10
 801364a:	d1df      	bne.n	801360c <__swbuf_r+0x2e>
 801364c:	4621      	mov	r1, r4
 801364e:	4628      	mov	r0, r5
 8013650:	f002 fe82 	bl	8016358 <_fflush_r>
 8013654:	2800      	cmp	r0, #0
 8013656:	d0d9      	beq.n	801360c <__swbuf_r+0x2e>
 8013658:	e7d6      	b.n	8013608 <__swbuf_r+0x2a>
	...

0801365c <__swsetup_r>:
 801365c:	b538      	push	{r3, r4, r5, lr}
 801365e:	4b29      	ldr	r3, [pc, #164]	@ (8013704 <__swsetup_r+0xa8>)
 8013660:	4605      	mov	r5, r0
 8013662:	6818      	ldr	r0, [r3, #0]
 8013664:	460c      	mov	r4, r1
 8013666:	b118      	cbz	r0, 8013670 <__swsetup_r+0x14>
 8013668:	6a03      	ldr	r3, [r0, #32]
 801366a:	b90b      	cbnz	r3, 8013670 <__swsetup_r+0x14>
 801366c:	f7ff feae 	bl	80133cc <__sinit>
 8013670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013674:	0719      	lsls	r1, r3, #28
 8013676:	d422      	bmi.n	80136be <__swsetup_r+0x62>
 8013678:	06da      	lsls	r2, r3, #27
 801367a:	d407      	bmi.n	801368c <__swsetup_r+0x30>
 801367c:	2209      	movs	r2, #9
 801367e:	602a      	str	r2, [r5, #0]
 8013680:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013684:	81a3      	strh	r3, [r4, #12]
 8013686:	f04f 30ff 	mov.w	r0, #4294967295
 801368a:	e033      	b.n	80136f4 <__swsetup_r+0x98>
 801368c:	0758      	lsls	r0, r3, #29
 801368e:	d512      	bpl.n	80136b6 <__swsetup_r+0x5a>
 8013690:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013692:	b141      	cbz	r1, 80136a6 <__swsetup_r+0x4a>
 8013694:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013698:	4299      	cmp	r1, r3
 801369a:	d002      	beq.n	80136a2 <__swsetup_r+0x46>
 801369c:	4628      	mov	r0, r5
 801369e:	f000 ff07 	bl	80144b0 <_free_r>
 80136a2:	2300      	movs	r3, #0
 80136a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80136a6:	89a3      	ldrh	r3, [r4, #12]
 80136a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80136ac:	81a3      	strh	r3, [r4, #12]
 80136ae:	2300      	movs	r3, #0
 80136b0:	6063      	str	r3, [r4, #4]
 80136b2:	6923      	ldr	r3, [r4, #16]
 80136b4:	6023      	str	r3, [r4, #0]
 80136b6:	89a3      	ldrh	r3, [r4, #12]
 80136b8:	f043 0308 	orr.w	r3, r3, #8
 80136bc:	81a3      	strh	r3, [r4, #12]
 80136be:	6923      	ldr	r3, [r4, #16]
 80136c0:	b94b      	cbnz	r3, 80136d6 <__swsetup_r+0x7a>
 80136c2:	89a3      	ldrh	r3, [r4, #12]
 80136c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80136c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80136cc:	d003      	beq.n	80136d6 <__swsetup_r+0x7a>
 80136ce:	4621      	mov	r1, r4
 80136d0:	4628      	mov	r0, r5
 80136d2:	f002 fe8f 	bl	80163f4 <__smakebuf_r>
 80136d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80136da:	f013 0201 	ands.w	r2, r3, #1
 80136de:	d00a      	beq.n	80136f6 <__swsetup_r+0x9a>
 80136e0:	2200      	movs	r2, #0
 80136e2:	60a2      	str	r2, [r4, #8]
 80136e4:	6962      	ldr	r2, [r4, #20]
 80136e6:	4252      	negs	r2, r2
 80136e8:	61a2      	str	r2, [r4, #24]
 80136ea:	6922      	ldr	r2, [r4, #16]
 80136ec:	b942      	cbnz	r2, 8013700 <__swsetup_r+0xa4>
 80136ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80136f2:	d1c5      	bne.n	8013680 <__swsetup_r+0x24>
 80136f4:	bd38      	pop	{r3, r4, r5, pc}
 80136f6:	0799      	lsls	r1, r3, #30
 80136f8:	bf58      	it	pl
 80136fa:	6962      	ldrpl	r2, [r4, #20]
 80136fc:	60a2      	str	r2, [r4, #8]
 80136fe:	e7f4      	b.n	80136ea <__swsetup_r+0x8e>
 8013700:	2000      	movs	r0, #0
 8013702:	e7f7      	b.n	80136f4 <__swsetup_r+0x98>
 8013704:	200001d8 	.word	0x200001d8

08013708 <memset>:
 8013708:	4402      	add	r2, r0
 801370a:	4603      	mov	r3, r0
 801370c:	4293      	cmp	r3, r2
 801370e:	d100      	bne.n	8013712 <memset+0xa>
 8013710:	4770      	bx	lr
 8013712:	f803 1b01 	strb.w	r1, [r3], #1
 8013716:	e7f9      	b.n	801370c <memset+0x4>

08013718 <_localeconv_r>:
 8013718:	4800      	ldr	r0, [pc, #0]	@ (801371c <_localeconv_r+0x4>)
 801371a:	4770      	bx	lr
 801371c:	20000318 	.word	0x20000318

08013720 <_close_r>:
 8013720:	b538      	push	{r3, r4, r5, lr}
 8013722:	4d06      	ldr	r5, [pc, #24]	@ (801373c <_close_r+0x1c>)
 8013724:	2300      	movs	r3, #0
 8013726:	4604      	mov	r4, r0
 8013728:	4608      	mov	r0, r1
 801372a:	602b      	str	r3, [r5, #0]
 801372c:	f7f0 fca0 	bl	8004070 <_close>
 8013730:	1c43      	adds	r3, r0, #1
 8013732:	d102      	bne.n	801373a <_close_r+0x1a>
 8013734:	682b      	ldr	r3, [r5, #0]
 8013736:	b103      	cbz	r3, 801373a <_close_r+0x1a>
 8013738:	6023      	str	r3, [r4, #0]
 801373a:	bd38      	pop	{r3, r4, r5, pc}
 801373c:	20003e9c 	.word	0x20003e9c

08013740 <_lseek_r>:
 8013740:	b538      	push	{r3, r4, r5, lr}
 8013742:	4d07      	ldr	r5, [pc, #28]	@ (8013760 <_lseek_r+0x20>)
 8013744:	4604      	mov	r4, r0
 8013746:	4608      	mov	r0, r1
 8013748:	4611      	mov	r1, r2
 801374a:	2200      	movs	r2, #0
 801374c:	602a      	str	r2, [r5, #0]
 801374e:	461a      	mov	r2, r3
 8013750:	f7f0 fcb5 	bl	80040be <_lseek>
 8013754:	1c43      	adds	r3, r0, #1
 8013756:	d102      	bne.n	801375e <_lseek_r+0x1e>
 8013758:	682b      	ldr	r3, [r5, #0]
 801375a:	b103      	cbz	r3, 801375e <_lseek_r+0x1e>
 801375c:	6023      	str	r3, [r4, #0]
 801375e:	bd38      	pop	{r3, r4, r5, pc}
 8013760:	20003e9c 	.word	0x20003e9c

08013764 <_read_r>:
 8013764:	b538      	push	{r3, r4, r5, lr}
 8013766:	4d07      	ldr	r5, [pc, #28]	@ (8013784 <_read_r+0x20>)
 8013768:	4604      	mov	r4, r0
 801376a:	4608      	mov	r0, r1
 801376c:	4611      	mov	r1, r2
 801376e:	2200      	movs	r2, #0
 8013770:	602a      	str	r2, [r5, #0]
 8013772:	461a      	mov	r2, r3
 8013774:	f7f0 fc43 	bl	8003ffe <_read>
 8013778:	1c43      	adds	r3, r0, #1
 801377a:	d102      	bne.n	8013782 <_read_r+0x1e>
 801377c:	682b      	ldr	r3, [r5, #0]
 801377e:	b103      	cbz	r3, 8013782 <_read_r+0x1e>
 8013780:	6023      	str	r3, [r4, #0]
 8013782:	bd38      	pop	{r3, r4, r5, pc}
 8013784:	20003e9c 	.word	0x20003e9c

08013788 <_write_r>:
 8013788:	b538      	push	{r3, r4, r5, lr}
 801378a:	4d07      	ldr	r5, [pc, #28]	@ (80137a8 <_write_r+0x20>)
 801378c:	4604      	mov	r4, r0
 801378e:	4608      	mov	r0, r1
 8013790:	4611      	mov	r1, r2
 8013792:	2200      	movs	r2, #0
 8013794:	602a      	str	r2, [r5, #0]
 8013796:	461a      	mov	r2, r3
 8013798:	f7f0 fc4e 	bl	8004038 <_write>
 801379c:	1c43      	adds	r3, r0, #1
 801379e:	d102      	bne.n	80137a6 <_write_r+0x1e>
 80137a0:	682b      	ldr	r3, [r5, #0]
 80137a2:	b103      	cbz	r3, 80137a6 <_write_r+0x1e>
 80137a4:	6023      	str	r3, [r4, #0]
 80137a6:	bd38      	pop	{r3, r4, r5, pc}
 80137a8:	20003e9c 	.word	0x20003e9c

080137ac <__errno>:
 80137ac:	4b01      	ldr	r3, [pc, #4]	@ (80137b4 <__errno+0x8>)
 80137ae:	6818      	ldr	r0, [r3, #0]
 80137b0:	4770      	bx	lr
 80137b2:	bf00      	nop
 80137b4:	200001d8 	.word	0x200001d8

080137b8 <__libc_init_array>:
 80137b8:	b570      	push	{r4, r5, r6, lr}
 80137ba:	4d0d      	ldr	r5, [pc, #52]	@ (80137f0 <__libc_init_array+0x38>)
 80137bc:	4c0d      	ldr	r4, [pc, #52]	@ (80137f4 <__libc_init_array+0x3c>)
 80137be:	1b64      	subs	r4, r4, r5
 80137c0:	10a4      	asrs	r4, r4, #2
 80137c2:	2600      	movs	r6, #0
 80137c4:	42a6      	cmp	r6, r4
 80137c6:	d109      	bne.n	80137dc <__libc_init_array+0x24>
 80137c8:	4d0b      	ldr	r5, [pc, #44]	@ (80137f8 <__libc_init_array+0x40>)
 80137ca:	4c0c      	ldr	r4, [pc, #48]	@ (80137fc <__libc_init_array+0x44>)
 80137cc:	f003 fae2 	bl	8016d94 <_init>
 80137d0:	1b64      	subs	r4, r4, r5
 80137d2:	10a4      	asrs	r4, r4, #2
 80137d4:	2600      	movs	r6, #0
 80137d6:	42a6      	cmp	r6, r4
 80137d8:	d105      	bne.n	80137e6 <__libc_init_array+0x2e>
 80137da:	bd70      	pop	{r4, r5, r6, pc}
 80137dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80137e0:	4798      	blx	r3
 80137e2:	3601      	adds	r6, #1
 80137e4:	e7ee      	b.n	80137c4 <__libc_init_array+0xc>
 80137e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80137ea:	4798      	blx	r3
 80137ec:	3601      	adds	r6, #1
 80137ee:	e7f2      	b.n	80137d6 <__libc_init_array+0x1e>
 80137f0:	08024e98 	.word	0x08024e98
 80137f4:	08024e98 	.word	0x08024e98
 80137f8:	08024e98 	.word	0x08024e98
 80137fc:	08024e9c 	.word	0x08024e9c

08013800 <__retarget_lock_init_recursive>:
 8013800:	4770      	bx	lr

08013802 <__retarget_lock_acquire_recursive>:
 8013802:	4770      	bx	lr

08013804 <__retarget_lock_release_recursive>:
 8013804:	4770      	bx	lr
	...

08013808 <nanf>:
 8013808:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8013810 <nanf+0x8>
 801380c:	4770      	bx	lr
 801380e:	bf00      	nop
 8013810:	7fc00000 	.word	0x7fc00000

08013814 <quorem>:
 8013814:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013818:	6903      	ldr	r3, [r0, #16]
 801381a:	690c      	ldr	r4, [r1, #16]
 801381c:	42a3      	cmp	r3, r4
 801381e:	4607      	mov	r7, r0
 8013820:	db7e      	blt.n	8013920 <quorem+0x10c>
 8013822:	3c01      	subs	r4, #1
 8013824:	f101 0814 	add.w	r8, r1, #20
 8013828:	00a3      	lsls	r3, r4, #2
 801382a:	f100 0514 	add.w	r5, r0, #20
 801382e:	9300      	str	r3, [sp, #0]
 8013830:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013834:	9301      	str	r3, [sp, #4]
 8013836:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801383a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801383e:	3301      	adds	r3, #1
 8013840:	429a      	cmp	r2, r3
 8013842:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013846:	fbb2 f6f3 	udiv	r6, r2, r3
 801384a:	d32e      	bcc.n	80138aa <quorem+0x96>
 801384c:	f04f 0a00 	mov.w	sl, #0
 8013850:	46c4      	mov	ip, r8
 8013852:	46ae      	mov	lr, r5
 8013854:	46d3      	mov	fp, sl
 8013856:	f85c 3b04 	ldr.w	r3, [ip], #4
 801385a:	b298      	uxth	r0, r3
 801385c:	fb06 a000 	mla	r0, r6, r0, sl
 8013860:	0c02      	lsrs	r2, r0, #16
 8013862:	0c1b      	lsrs	r3, r3, #16
 8013864:	fb06 2303 	mla	r3, r6, r3, r2
 8013868:	f8de 2000 	ldr.w	r2, [lr]
 801386c:	b280      	uxth	r0, r0
 801386e:	b292      	uxth	r2, r2
 8013870:	1a12      	subs	r2, r2, r0
 8013872:	445a      	add	r2, fp
 8013874:	f8de 0000 	ldr.w	r0, [lr]
 8013878:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801387c:	b29b      	uxth	r3, r3
 801387e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8013882:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8013886:	b292      	uxth	r2, r2
 8013888:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801388c:	45e1      	cmp	r9, ip
 801388e:	f84e 2b04 	str.w	r2, [lr], #4
 8013892:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8013896:	d2de      	bcs.n	8013856 <quorem+0x42>
 8013898:	9b00      	ldr	r3, [sp, #0]
 801389a:	58eb      	ldr	r3, [r5, r3]
 801389c:	b92b      	cbnz	r3, 80138aa <quorem+0x96>
 801389e:	9b01      	ldr	r3, [sp, #4]
 80138a0:	3b04      	subs	r3, #4
 80138a2:	429d      	cmp	r5, r3
 80138a4:	461a      	mov	r2, r3
 80138a6:	d32f      	bcc.n	8013908 <quorem+0xf4>
 80138a8:	613c      	str	r4, [r7, #16]
 80138aa:	4638      	mov	r0, r7
 80138ac:	f001 f9c4 	bl	8014c38 <__mcmp>
 80138b0:	2800      	cmp	r0, #0
 80138b2:	db25      	blt.n	8013900 <quorem+0xec>
 80138b4:	4629      	mov	r1, r5
 80138b6:	2000      	movs	r0, #0
 80138b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80138bc:	f8d1 c000 	ldr.w	ip, [r1]
 80138c0:	fa1f fe82 	uxth.w	lr, r2
 80138c4:	fa1f f38c 	uxth.w	r3, ip
 80138c8:	eba3 030e 	sub.w	r3, r3, lr
 80138cc:	4403      	add	r3, r0
 80138ce:	0c12      	lsrs	r2, r2, #16
 80138d0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80138d4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80138d8:	b29b      	uxth	r3, r3
 80138da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80138de:	45c1      	cmp	r9, r8
 80138e0:	f841 3b04 	str.w	r3, [r1], #4
 80138e4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80138e8:	d2e6      	bcs.n	80138b8 <quorem+0xa4>
 80138ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80138ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80138f2:	b922      	cbnz	r2, 80138fe <quorem+0xea>
 80138f4:	3b04      	subs	r3, #4
 80138f6:	429d      	cmp	r5, r3
 80138f8:	461a      	mov	r2, r3
 80138fa:	d30b      	bcc.n	8013914 <quorem+0x100>
 80138fc:	613c      	str	r4, [r7, #16]
 80138fe:	3601      	adds	r6, #1
 8013900:	4630      	mov	r0, r6
 8013902:	b003      	add	sp, #12
 8013904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013908:	6812      	ldr	r2, [r2, #0]
 801390a:	3b04      	subs	r3, #4
 801390c:	2a00      	cmp	r2, #0
 801390e:	d1cb      	bne.n	80138a8 <quorem+0x94>
 8013910:	3c01      	subs	r4, #1
 8013912:	e7c6      	b.n	80138a2 <quorem+0x8e>
 8013914:	6812      	ldr	r2, [r2, #0]
 8013916:	3b04      	subs	r3, #4
 8013918:	2a00      	cmp	r2, #0
 801391a:	d1ef      	bne.n	80138fc <quorem+0xe8>
 801391c:	3c01      	subs	r4, #1
 801391e:	e7ea      	b.n	80138f6 <quorem+0xe2>
 8013920:	2000      	movs	r0, #0
 8013922:	e7ee      	b.n	8013902 <quorem+0xee>
 8013924:	0000      	movs	r0, r0
	...

08013928 <_dtoa_r>:
 8013928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801392c:	69c7      	ldr	r7, [r0, #28]
 801392e:	b099      	sub	sp, #100	@ 0x64
 8013930:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013934:	ec55 4b10 	vmov	r4, r5, d0
 8013938:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801393a:	9109      	str	r1, [sp, #36]	@ 0x24
 801393c:	4683      	mov	fp, r0
 801393e:	920e      	str	r2, [sp, #56]	@ 0x38
 8013940:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013942:	b97f      	cbnz	r7, 8013964 <_dtoa_r+0x3c>
 8013944:	2010      	movs	r0, #16
 8013946:	f000 fdfd 	bl	8014544 <malloc>
 801394a:	4602      	mov	r2, r0
 801394c:	f8cb 001c 	str.w	r0, [fp, #28]
 8013950:	b920      	cbnz	r0, 801395c <_dtoa_r+0x34>
 8013952:	4ba7      	ldr	r3, [pc, #668]	@ (8013bf0 <_dtoa_r+0x2c8>)
 8013954:	21ef      	movs	r1, #239	@ 0xef
 8013956:	48a7      	ldr	r0, [pc, #668]	@ (8013bf4 <_dtoa_r+0x2cc>)
 8013958:	f002 fdfe 	bl	8016558 <__assert_func>
 801395c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013960:	6007      	str	r7, [r0, #0]
 8013962:	60c7      	str	r7, [r0, #12]
 8013964:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013968:	6819      	ldr	r1, [r3, #0]
 801396a:	b159      	cbz	r1, 8013984 <_dtoa_r+0x5c>
 801396c:	685a      	ldr	r2, [r3, #4]
 801396e:	604a      	str	r2, [r1, #4]
 8013970:	2301      	movs	r3, #1
 8013972:	4093      	lsls	r3, r2
 8013974:	608b      	str	r3, [r1, #8]
 8013976:	4658      	mov	r0, fp
 8013978:	f000 feda 	bl	8014730 <_Bfree>
 801397c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013980:	2200      	movs	r2, #0
 8013982:	601a      	str	r2, [r3, #0]
 8013984:	1e2b      	subs	r3, r5, #0
 8013986:	bfb9      	ittee	lt
 8013988:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801398c:	9303      	strlt	r3, [sp, #12]
 801398e:	2300      	movge	r3, #0
 8013990:	6033      	strge	r3, [r6, #0]
 8013992:	9f03      	ldr	r7, [sp, #12]
 8013994:	4b98      	ldr	r3, [pc, #608]	@ (8013bf8 <_dtoa_r+0x2d0>)
 8013996:	bfbc      	itt	lt
 8013998:	2201      	movlt	r2, #1
 801399a:	6032      	strlt	r2, [r6, #0]
 801399c:	43bb      	bics	r3, r7
 801399e:	d112      	bne.n	80139c6 <_dtoa_r+0x9e>
 80139a0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80139a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80139a6:	6013      	str	r3, [r2, #0]
 80139a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80139ac:	4323      	orrs	r3, r4
 80139ae:	f000 854d 	beq.w	801444c <_dtoa_r+0xb24>
 80139b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80139b4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8013c0c <_dtoa_r+0x2e4>
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	f000 854f 	beq.w	801445c <_dtoa_r+0xb34>
 80139be:	f10a 0303 	add.w	r3, sl, #3
 80139c2:	f000 bd49 	b.w	8014458 <_dtoa_r+0xb30>
 80139c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80139ca:	2200      	movs	r2, #0
 80139cc:	ec51 0b17 	vmov	r0, r1, d7
 80139d0:	2300      	movs	r3, #0
 80139d2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80139d6:	f7ed f89f 	bl	8000b18 <__aeabi_dcmpeq>
 80139da:	4680      	mov	r8, r0
 80139dc:	b158      	cbz	r0, 80139f6 <_dtoa_r+0xce>
 80139de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80139e0:	2301      	movs	r3, #1
 80139e2:	6013      	str	r3, [r2, #0]
 80139e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80139e6:	b113      	cbz	r3, 80139ee <_dtoa_r+0xc6>
 80139e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80139ea:	4b84      	ldr	r3, [pc, #528]	@ (8013bfc <_dtoa_r+0x2d4>)
 80139ec:	6013      	str	r3, [r2, #0]
 80139ee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8013c10 <_dtoa_r+0x2e8>
 80139f2:	f000 bd33 	b.w	801445c <_dtoa_r+0xb34>
 80139f6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80139fa:	aa16      	add	r2, sp, #88	@ 0x58
 80139fc:	a917      	add	r1, sp, #92	@ 0x5c
 80139fe:	4658      	mov	r0, fp
 8013a00:	f001 fa3a 	bl	8014e78 <__d2b>
 8013a04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8013a08:	4681      	mov	r9, r0
 8013a0a:	2e00      	cmp	r6, #0
 8013a0c:	d077      	beq.n	8013afe <_dtoa_r+0x1d6>
 8013a0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013a10:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8013a14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013a18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013a1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8013a20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8013a24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8013a28:	4619      	mov	r1, r3
 8013a2a:	2200      	movs	r2, #0
 8013a2c:	4b74      	ldr	r3, [pc, #464]	@ (8013c00 <_dtoa_r+0x2d8>)
 8013a2e:	f7ec fc53 	bl	80002d8 <__aeabi_dsub>
 8013a32:	a369      	add	r3, pc, #420	@ (adr r3, 8013bd8 <_dtoa_r+0x2b0>)
 8013a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a38:	f7ec fe06 	bl	8000648 <__aeabi_dmul>
 8013a3c:	a368      	add	r3, pc, #416	@ (adr r3, 8013be0 <_dtoa_r+0x2b8>)
 8013a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a42:	f7ec fc4b 	bl	80002dc <__adddf3>
 8013a46:	4604      	mov	r4, r0
 8013a48:	4630      	mov	r0, r6
 8013a4a:	460d      	mov	r5, r1
 8013a4c:	f7ec fd92 	bl	8000574 <__aeabi_i2d>
 8013a50:	a365      	add	r3, pc, #404	@ (adr r3, 8013be8 <_dtoa_r+0x2c0>)
 8013a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a56:	f7ec fdf7 	bl	8000648 <__aeabi_dmul>
 8013a5a:	4602      	mov	r2, r0
 8013a5c:	460b      	mov	r3, r1
 8013a5e:	4620      	mov	r0, r4
 8013a60:	4629      	mov	r1, r5
 8013a62:	f7ec fc3b 	bl	80002dc <__adddf3>
 8013a66:	4604      	mov	r4, r0
 8013a68:	460d      	mov	r5, r1
 8013a6a:	f7ed f89d 	bl	8000ba8 <__aeabi_d2iz>
 8013a6e:	2200      	movs	r2, #0
 8013a70:	4607      	mov	r7, r0
 8013a72:	2300      	movs	r3, #0
 8013a74:	4620      	mov	r0, r4
 8013a76:	4629      	mov	r1, r5
 8013a78:	f7ed f858 	bl	8000b2c <__aeabi_dcmplt>
 8013a7c:	b140      	cbz	r0, 8013a90 <_dtoa_r+0x168>
 8013a7e:	4638      	mov	r0, r7
 8013a80:	f7ec fd78 	bl	8000574 <__aeabi_i2d>
 8013a84:	4622      	mov	r2, r4
 8013a86:	462b      	mov	r3, r5
 8013a88:	f7ed f846 	bl	8000b18 <__aeabi_dcmpeq>
 8013a8c:	b900      	cbnz	r0, 8013a90 <_dtoa_r+0x168>
 8013a8e:	3f01      	subs	r7, #1
 8013a90:	2f16      	cmp	r7, #22
 8013a92:	d851      	bhi.n	8013b38 <_dtoa_r+0x210>
 8013a94:	4b5b      	ldr	r3, [pc, #364]	@ (8013c04 <_dtoa_r+0x2dc>)
 8013a96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013aa2:	f7ed f843 	bl	8000b2c <__aeabi_dcmplt>
 8013aa6:	2800      	cmp	r0, #0
 8013aa8:	d048      	beq.n	8013b3c <_dtoa_r+0x214>
 8013aaa:	3f01      	subs	r7, #1
 8013aac:	2300      	movs	r3, #0
 8013aae:	9312      	str	r3, [sp, #72]	@ 0x48
 8013ab0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013ab2:	1b9b      	subs	r3, r3, r6
 8013ab4:	1e5a      	subs	r2, r3, #1
 8013ab6:	bf44      	itt	mi
 8013ab8:	f1c3 0801 	rsbmi	r8, r3, #1
 8013abc:	2300      	movmi	r3, #0
 8013abe:	9208      	str	r2, [sp, #32]
 8013ac0:	bf54      	ite	pl
 8013ac2:	f04f 0800 	movpl.w	r8, #0
 8013ac6:	9308      	strmi	r3, [sp, #32]
 8013ac8:	2f00      	cmp	r7, #0
 8013aca:	db39      	blt.n	8013b40 <_dtoa_r+0x218>
 8013acc:	9b08      	ldr	r3, [sp, #32]
 8013ace:	970f      	str	r7, [sp, #60]	@ 0x3c
 8013ad0:	443b      	add	r3, r7
 8013ad2:	9308      	str	r3, [sp, #32]
 8013ad4:	2300      	movs	r3, #0
 8013ad6:	930a      	str	r3, [sp, #40]	@ 0x28
 8013ad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ada:	2b09      	cmp	r3, #9
 8013adc:	d864      	bhi.n	8013ba8 <_dtoa_r+0x280>
 8013ade:	2b05      	cmp	r3, #5
 8013ae0:	bfc4      	itt	gt
 8013ae2:	3b04      	subgt	r3, #4
 8013ae4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8013ae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ae8:	f1a3 0302 	sub.w	r3, r3, #2
 8013aec:	bfcc      	ite	gt
 8013aee:	2400      	movgt	r4, #0
 8013af0:	2401      	movle	r4, #1
 8013af2:	2b03      	cmp	r3, #3
 8013af4:	d863      	bhi.n	8013bbe <_dtoa_r+0x296>
 8013af6:	e8df f003 	tbb	[pc, r3]
 8013afa:	372a      	.short	0x372a
 8013afc:	5535      	.short	0x5535
 8013afe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8013b02:	441e      	add	r6, r3
 8013b04:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8013b08:	2b20      	cmp	r3, #32
 8013b0a:	bfc1      	itttt	gt
 8013b0c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8013b10:	409f      	lslgt	r7, r3
 8013b12:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8013b16:	fa24 f303 	lsrgt.w	r3, r4, r3
 8013b1a:	bfd6      	itet	le
 8013b1c:	f1c3 0320 	rsble	r3, r3, #32
 8013b20:	ea47 0003 	orrgt.w	r0, r7, r3
 8013b24:	fa04 f003 	lslle.w	r0, r4, r3
 8013b28:	f7ec fd14 	bl	8000554 <__aeabi_ui2d>
 8013b2c:	2201      	movs	r2, #1
 8013b2e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8013b32:	3e01      	subs	r6, #1
 8013b34:	9214      	str	r2, [sp, #80]	@ 0x50
 8013b36:	e777      	b.n	8013a28 <_dtoa_r+0x100>
 8013b38:	2301      	movs	r3, #1
 8013b3a:	e7b8      	b.n	8013aae <_dtoa_r+0x186>
 8013b3c:	9012      	str	r0, [sp, #72]	@ 0x48
 8013b3e:	e7b7      	b.n	8013ab0 <_dtoa_r+0x188>
 8013b40:	427b      	negs	r3, r7
 8013b42:	930a      	str	r3, [sp, #40]	@ 0x28
 8013b44:	2300      	movs	r3, #0
 8013b46:	eba8 0807 	sub.w	r8, r8, r7
 8013b4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013b4c:	e7c4      	b.n	8013ad8 <_dtoa_r+0x1b0>
 8013b4e:	2300      	movs	r3, #0
 8013b50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013b52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	dc35      	bgt.n	8013bc4 <_dtoa_r+0x29c>
 8013b58:	2301      	movs	r3, #1
 8013b5a:	9300      	str	r3, [sp, #0]
 8013b5c:	9307      	str	r3, [sp, #28]
 8013b5e:	461a      	mov	r2, r3
 8013b60:	920e      	str	r2, [sp, #56]	@ 0x38
 8013b62:	e00b      	b.n	8013b7c <_dtoa_r+0x254>
 8013b64:	2301      	movs	r3, #1
 8013b66:	e7f3      	b.n	8013b50 <_dtoa_r+0x228>
 8013b68:	2300      	movs	r3, #0
 8013b6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013b6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013b6e:	18fb      	adds	r3, r7, r3
 8013b70:	9300      	str	r3, [sp, #0]
 8013b72:	3301      	adds	r3, #1
 8013b74:	2b01      	cmp	r3, #1
 8013b76:	9307      	str	r3, [sp, #28]
 8013b78:	bfb8      	it	lt
 8013b7a:	2301      	movlt	r3, #1
 8013b7c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8013b80:	2100      	movs	r1, #0
 8013b82:	2204      	movs	r2, #4
 8013b84:	f102 0514 	add.w	r5, r2, #20
 8013b88:	429d      	cmp	r5, r3
 8013b8a:	d91f      	bls.n	8013bcc <_dtoa_r+0x2a4>
 8013b8c:	6041      	str	r1, [r0, #4]
 8013b8e:	4658      	mov	r0, fp
 8013b90:	f000 fd8e 	bl	80146b0 <_Balloc>
 8013b94:	4682      	mov	sl, r0
 8013b96:	2800      	cmp	r0, #0
 8013b98:	d13c      	bne.n	8013c14 <_dtoa_r+0x2ec>
 8013b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8013c08 <_dtoa_r+0x2e0>)
 8013b9c:	4602      	mov	r2, r0
 8013b9e:	f240 11af 	movw	r1, #431	@ 0x1af
 8013ba2:	e6d8      	b.n	8013956 <_dtoa_r+0x2e>
 8013ba4:	2301      	movs	r3, #1
 8013ba6:	e7e0      	b.n	8013b6a <_dtoa_r+0x242>
 8013ba8:	2401      	movs	r4, #1
 8013baa:	2300      	movs	r3, #0
 8013bac:	9309      	str	r3, [sp, #36]	@ 0x24
 8013bae:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8013bb4:	9300      	str	r3, [sp, #0]
 8013bb6:	9307      	str	r3, [sp, #28]
 8013bb8:	2200      	movs	r2, #0
 8013bba:	2312      	movs	r3, #18
 8013bbc:	e7d0      	b.n	8013b60 <_dtoa_r+0x238>
 8013bbe:	2301      	movs	r3, #1
 8013bc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013bc2:	e7f5      	b.n	8013bb0 <_dtoa_r+0x288>
 8013bc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013bc6:	9300      	str	r3, [sp, #0]
 8013bc8:	9307      	str	r3, [sp, #28]
 8013bca:	e7d7      	b.n	8013b7c <_dtoa_r+0x254>
 8013bcc:	3101      	adds	r1, #1
 8013bce:	0052      	lsls	r2, r2, #1
 8013bd0:	e7d8      	b.n	8013b84 <_dtoa_r+0x25c>
 8013bd2:	bf00      	nop
 8013bd4:	f3af 8000 	nop.w
 8013bd8:	636f4361 	.word	0x636f4361
 8013bdc:	3fd287a7 	.word	0x3fd287a7
 8013be0:	8b60c8b3 	.word	0x8b60c8b3
 8013be4:	3fc68a28 	.word	0x3fc68a28
 8013be8:	509f79fb 	.word	0x509f79fb
 8013bec:	3fd34413 	.word	0x3fd34413
 8013bf0:	08024aaa 	.word	0x08024aaa
 8013bf4:	08024ac1 	.word	0x08024ac1
 8013bf8:	7ff00000 	.word	0x7ff00000
 8013bfc:	08024a75 	.word	0x08024a75
 8013c00:	3ff80000 	.word	0x3ff80000
 8013c04:	08024bb8 	.word	0x08024bb8
 8013c08:	08024b19 	.word	0x08024b19
 8013c0c:	08024aa6 	.word	0x08024aa6
 8013c10:	08024a74 	.word	0x08024a74
 8013c14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013c18:	6018      	str	r0, [r3, #0]
 8013c1a:	9b07      	ldr	r3, [sp, #28]
 8013c1c:	2b0e      	cmp	r3, #14
 8013c1e:	f200 80a4 	bhi.w	8013d6a <_dtoa_r+0x442>
 8013c22:	2c00      	cmp	r4, #0
 8013c24:	f000 80a1 	beq.w	8013d6a <_dtoa_r+0x442>
 8013c28:	2f00      	cmp	r7, #0
 8013c2a:	dd33      	ble.n	8013c94 <_dtoa_r+0x36c>
 8013c2c:	4bad      	ldr	r3, [pc, #692]	@ (8013ee4 <_dtoa_r+0x5bc>)
 8013c2e:	f007 020f 	and.w	r2, r7, #15
 8013c32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013c36:	ed93 7b00 	vldr	d7, [r3]
 8013c3a:	05f8      	lsls	r0, r7, #23
 8013c3c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013c40:	ea4f 1427 	mov.w	r4, r7, asr #4
 8013c44:	d516      	bpl.n	8013c74 <_dtoa_r+0x34c>
 8013c46:	4ba8      	ldr	r3, [pc, #672]	@ (8013ee8 <_dtoa_r+0x5c0>)
 8013c48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013c4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013c50:	f7ec fe24 	bl	800089c <__aeabi_ddiv>
 8013c54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013c58:	f004 040f 	and.w	r4, r4, #15
 8013c5c:	2603      	movs	r6, #3
 8013c5e:	4da2      	ldr	r5, [pc, #648]	@ (8013ee8 <_dtoa_r+0x5c0>)
 8013c60:	b954      	cbnz	r4, 8013c78 <_dtoa_r+0x350>
 8013c62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013c66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013c6a:	f7ec fe17 	bl	800089c <__aeabi_ddiv>
 8013c6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013c72:	e028      	b.n	8013cc6 <_dtoa_r+0x39e>
 8013c74:	2602      	movs	r6, #2
 8013c76:	e7f2      	b.n	8013c5e <_dtoa_r+0x336>
 8013c78:	07e1      	lsls	r1, r4, #31
 8013c7a:	d508      	bpl.n	8013c8e <_dtoa_r+0x366>
 8013c7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013c80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013c84:	f7ec fce0 	bl	8000648 <__aeabi_dmul>
 8013c88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013c8c:	3601      	adds	r6, #1
 8013c8e:	1064      	asrs	r4, r4, #1
 8013c90:	3508      	adds	r5, #8
 8013c92:	e7e5      	b.n	8013c60 <_dtoa_r+0x338>
 8013c94:	f000 80d2 	beq.w	8013e3c <_dtoa_r+0x514>
 8013c98:	427c      	negs	r4, r7
 8013c9a:	4b92      	ldr	r3, [pc, #584]	@ (8013ee4 <_dtoa_r+0x5bc>)
 8013c9c:	4d92      	ldr	r5, [pc, #584]	@ (8013ee8 <_dtoa_r+0x5c0>)
 8013c9e:	f004 020f 	and.w	r2, r4, #15
 8013ca2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013caa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013cae:	f7ec fccb 	bl	8000648 <__aeabi_dmul>
 8013cb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013cb6:	1124      	asrs	r4, r4, #4
 8013cb8:	2300      	movs	r3, #0
 8013cba:	2602      	movs	r6, #2
 8013cbc:	2c00      	cmp	r4, #0
 8013cbe:	f040 80b2 	bne.w	8013e26 <_dtoa_r+0x4fe>
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d1d3      	bne.n	8013c6e <_dtoa_r+0x346>
 8013cc6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013cc8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	f000 80b7 	beq.w	8013e40 <_dtoa_r+0x518>
 8013cd2:	4b86      	ldr	r3, [pc, #536]	@ (8013eec <_dtoa_r+0x5c4>)
 8013cd4:	2200      	movs	r2, #0
 8013cd6:	4620      	mov	r0, r4
 8013cd8:	4629      	mov	r1, r5
 8013cda:	f7ec ff27 	bl	8000b2c <__aeabi_dcmplt>
 8013cde:	2800      	cmp	r0, #0
 8013ce0:	f000 80ae 	beq.w	8013e40 <_dtoa_r+0x518>
 8013ce4:	9b07      	ldr	r3, [sp, #28]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	f000 80aa 	beq.w	8013e40 <_dtoa_r+0x518>
 8013cec:	9b00      	ldr	r3, [sp, #0]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	dd37      	ble.n	8013d62 <_dtoa_r+0x43a>
 8013cf2:	1e7b      	subs	r3, r7, #1
 8013cf4:	9304      	str	r3, [sp, #16]
 8013cf6:	4620      	mov	r0, r4
 8013cf8:	4b7d      	ldr	r3, [pc, #500]	@ (8013ef0 <_dtoa_r+0x5c8>)
 8013cfa:	2200      	movs	r2, #0
 8013cfc:	4629      	mov	r1, r5
 8013cfe:	f7ec fca3 	bl	8000648 <__aeabi_dmul>
 8013d02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013d06:	9c00      	ldr	r4, [sp, #0]
 8013d08:	3601      	adds	r6, #1
 8013d0a:	4630      	mov	r0, r6
 8013d0c:	f7ec fc32 	bl	8000574 <__aeabi_i2d>
 8013d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013d14:	f7ec fc98 	bl	8000648 <__aeabi_dmul>
 8013d18:	4b76      	ldr	r3, [pc, #472]	@ (8013ef4 <_dtoa_r+0x5cc>)
 8013d1a:	2200      	movs	r2, #0
 8013d1c:	f7ec fade 	bl	80002dc <__adddf3>
 8013d20:	4605      	mov	r5, r0
 8013d22:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8013d26:	2c00      	cmp	r4, #0
 8013d28:	f040 808d 	bne.w	8013e46 <_dtoa_r+0x51e>
 8013d2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013d30:	4b71      	ldr	r3, [pc, #452]	@ (8013ef8 <_dtoa_r+0x5d0>)
 8013d32:	2200      	movs	r2, #0
 8013d34:	f7ec fad0 	bl	80002d8 <__aeabi_dsub>
 8013d38:	4602      	mov	r2, r0
 8013d3a:	460b      	mov	r3, r1
 8013d3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013d40:	462a      	mov	r2, r5
 8013d42:	4633      	mov	r3, r6
 8013d44:	f7ec ff10 	bl	8000b68 <__aeabi_dcmpgt>
 8013d48:	2800      	cmp	r0, #0
 8013d4a:	f040 828b 	bne.w	8014264 <_dtoa_r+0x93c>
 8013d4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013d52:	462a      	mov	r2, r5
 8013d54:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8013d58:	f7ec fee8 	bl	8000b2c <__aeabi_dcmplt>
 8013d5c:	2800      	cmp	r0, #0
 8013d5e:	f040 8128 	bne.w	8013fb2 <_dtoa_r+0x68a>
 8013d62:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8013d66:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8013d6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	f2c0 815a 	blt.w	8014026 <_dtoa_r+0x6fe>
 8013d72:	2f0e      	cmp	r7, #14
 8013d74:	f300 8157 	bgt.w	8014026 <_dtoa_r+0x6fe>
 8013d78:	4b5a      	ldr	r3, [pc, #360]	@ (8013ee4 <_dtoa_r+0x5bc>)
 8013d7a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013d7e:	ed93 7b00 	vldr	d7, [r3]
 8013d82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	ed8d 7b00 	vstr	d7, [sp]
 8013d8a:	da03      	bge.n	8013d94 <_dtoa_r+0x46c>
 8013d8c:	9b07      	ldr	r3, [sp, #28]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	f340 8101 	ble.w	8013f96 <_dtoa_r+0x66e>
 8013d94:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8013d98:	4656      	mov	r6, sl
 8013d9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013d9e:	4620      	mov	r0, r4
 8013da0:	4629      	mov	r1, r5
 8013da2:	f7ec fd7b 	bl	800089c <__aeabi_ddiv>
 8013da6:	f7ec feff 	bl	8000ba8 <__aeabi_d2iz>
 8013daa:	4680      	mov	r8, r0
 8013dac:	f7ec fbe2 	bl	8000574 <__aeabi_i2d>
 8013db0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013db4:	f7ec fc48 	bl	8000648 <__aeabi_dmul>
 8013db8:	4602      	mov	r2, r0
 8013dba:	460b      	mov	r3, r1
 8013dbc:	4620      	mov	r0, r4
 8013dbe:	4629      	mov	r1, r5
 8013dc0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8013dc4:	f7ec fa88 	bl	80002d8 <__aeabi_dsub>
 8013dc8:	f806 4b01 	strb.w	r4, [r6], #1
 8013dcc:	9d07      	ldr	r5, [sp, #28]
 8013dce:	eba6 040a 	sub.w	r4, r6, sl
 8013dd2:	42a5      	cmp	r5, r4
 8013dd4:	4602      	mov	r2, r0
 8013dd6:	460b      	mov	r3, r1
 8013dd8:	f040 8117 	bne.w	801400a <_dtoa_r+0x6e2>
 8013ddc:	f7ec fa7e 	bl	80002dc <__adddf3>
 8013de0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013de4:	4604      	mov	r4, r0
 8013de6:	460d      	mov	r5, r1
 8013de8:	f7ec febe 	bl	8000b68 <__aeabi_dcmpgt>
 8013dec:	2800      	cmp	r0, #0
 8013dee:	f040 80f9 	bne.w	8013fe4 <_dtoa_r+0x6bc>
 8013df2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013df6:	4620      	mov	r0, r4
 8013df8:	4629      	mov	r1, r5
 8013dfa:	f7ec fe8d 	bl	8000b18 <__aeabi_dcmpeq>
 8013dfe:	b118      	cbz	r0, 8013e08 <_dtoa_r+0x4e0>
 8013e00:	f018 0f01 	tst.w	r8, #1
 8013e04:	f040 80ee 	bne.w	8013fe4 <_dtoa_r+0x6bc>
 8013e08:	4649      	mov	r1, r9
 8013e0a:	4658      	mov	r0, fp
 8013e0c:	f000 fc90 	bl	8014730 <_Bfree>
 8013e10:	2300      	movs	r3, #0
 8013e12:	7033      	strb	r3, [r6, #0]
 8013e14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013e16:	3701      	adds	r7, #1
 8013e18:	601f      	str	r7, [r3, #0]
 8013e1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	f000 831d 	beq.w	801445c <_dtoa_r+0xb34>
 8013e22:	601e      	str	r6, [r3, #0]
 8013e24:	e31a      	b.n	801445c <_dtoa_r+0xb34>
 8013e26:	07e2      	lsls	r2, r4, #31
 8013e28:	d505      	bpl.n	8013e36 <_dtoa_r+0x50e>
 8013e2a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013e2e:	f7ec fc0b 	bl	8000648 <__aeabi_dmul>
 8013e32:	3601      	adds	r6, #1
 8013e34:	2301      	movs	r3, #1
 8013e36:	1064      	asrs	r4, r4, #1
 8013e38:	3508      	adds	r5, #8
 8013e3a:	e73f      	b.n	8013cbc <_dtoa_r+0x394>
 8013e3c:	2602      	movs	r6, #2
 8013e3e:	e742      	b.n	8013cc6 <_dtoa_r+0x39e>
 8013e40:	9c07      	ldr	r4, [sp, #28]
 8013e42:	9704      	str	r7, [sp, #16]
 8013e44:	e761      	b.n	8013d0a <_dtoa_r+0x3e2>
 8013e46:	4b27      	ldr	r3, [pc, #156]	@ (8013ee4 <_dtoa_r+0x5bc>)
 8013e48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013e4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013e4e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013e52:	4454      	add	r4, sl
 8013e54:	2900      	cmp	r1, #0
 8013e56:	d053      	beq.n	8013f00 <_dtoa_r+0x5d8>
 8013e58:	4928      	ldr	r1, [pc, #160]	@ (8013efc <_dtoa_r+0x5d4>)
 8013e5a:	2000      	movs	r0, #0
 8013e5c:	f7ec fd1e 	bl	800089c <__aeabi_ddiv>
 8013e60:	4633      	mov	r3, r6
 8013e62:	462a      	mov	r2, r5
 8013e64:	f7ec fa38 	bl	80002d8 <__aeabi_dsub>
 8013e68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013e6c:	4656      	mov	r6, sl
 8013e6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013e72:	f7ec fe99 	bl	8000ba8 <__aeabi_d2iz>
 8013e76:	4605      	mov	r5, r0
 8013e78:	f7ec fb7c 	bl	8000574 <__aeabi_i2d>
 8013e7c:	4602      	mov	r2, r0
 8013e7e:	460b      	mov	r3, r1
 8013e80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013e84:	f7ec fa28 	bl	80002d8 <__aeabi_dsub>
 8013e88:	3530      	adds	r5, #48	@ 0x30
 8013e8a:	4602      	mov	r2, r0
 8013e8c:	460b      	mov	r3, r1
 8013e8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013e92:	f806 5b01 	strb.w	r5, [r6], #1
 8013e96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013e9a:	f7ec fe47 	bl	8000b2c <__aeabi_dcmplt>
 8013e9e:	2800      	cmp	r0, #0
 8013ea0:	d171      	bne.n	8013f86 <_dtoa_r+0x65e>
 8013ea2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013ea6:	4911      	ldr	r1, [pc, #68]	@ (8013eec <_dtoa_r+0x5c4>)
 8013ea8:	2000      	movs	r0, #0
 8013eaa:	f7ec fa15 	bl	80002d8 <__aeabi_dsub>
 8013eae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013eb2:	f7ec fe3b 	bl	8000b2c <__aeabi_dcmplt>
 8013eb6:	2800      	cmp	r0, #0
 8013eb8:	f040 8095 	bne.w	8013fe6 <_dtoa_r+0x6be>
 8013ebc:	42a6      	cmp	r6, r4
 8013ebe:	f43f af50 	beq.w	8013d62 <_dtoa_r+0x43a>
 8013ec2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8013ef0 <_dtoa_r+0x5c8>)
 8013ec8:	2200      	movs	r2, #0
 8013eca:	f7ec fbbd 	bl	8000648 <__aeabi_dmul>
 8013ece:	4b08      	ldr	r3, [pc, #32]	@ (8013ef0 <_dtoa_r+0x5c8>)
 8013ed0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013ed4:	2200      	movs	r2, #0
 8013ed6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013eda:	f7ec fbb5 	bl	8000648 <__aeabi_dmul>
 8013ede:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013ee2:	e7c4      	b.n	8013e6e <_dtoa_r+0x546>
 8013ee4:	08024bb8 	.word	0x08024bb8
 8013ee8:	08024b90 	.word	0x08024b90
 8013eec:	3ff00000 	.word	0x3ff00000
 8013ef0:	40240000 	.word	0x40240000
 8013ef4:	401c0000 	.word	0x401c0000
 8013ef8:	40140000 	.word	0x40140000
 8013efc:	3fe00000 	.word	0x3fe00000
 8013f00:	4631      	mov	r1, r6
 8013f02:	4628      	mov	r0, r5
 8013f04:	f7ec fba0 	bl	8000648 <__aeabi_dmul>
 8013f08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013f0c:	9415      	str	r4, [sp, #84]	@ 0x54
 8013f0e:	4656      	mov	r6, sl
 8013f10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013f14:	f7ec fe48 	bl	8000ba8 <__aeabi_d2iz>
 8013f18:	4605      	mov	r5, r0
 8013f1a:	f7ec fb2b 	bl	8000574 <__aeabi_i2d>
 8013f1e:	4602      	mov	r2, r0
 8013f20:	460b      	mov	r3, r1
 8013f22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013f26:	f7ec f9d7 	bl	80002d8 <__aeabi_dsub>
 8013f2a:	3530      	adds	r5, #48	@ 0x30
 8013f2c:	f806 5b01 	strb.w	r5, [r6], #1
 8013f30:	4602      	mov	r2, r0
 8013f32:	460b      	mov	r3, r1
 8013f34:	42a6      	cmp	r6, r4
 8013f36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013f3a:	f04f 0200 	mov.w	r2, #0
 8013f3e:	d124      	bne.n	8013f8a <_dtoa_r+0x662>
 8013f40:	4bac      	ldr	r3, [pc, #688]	@ (80141f4 <_dtoa_r+0x8cc>)
 8013f42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013f46:	f7ec f9c9 	bl	80002dc <__adddf3>
 8013f4a:	4602      	mov	r2, r0
 8013f4c:	460b      	mov	r3, r1
 8013f4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013f52:	f7ec fe09 	bl	8000b68 <__aeabi_dcmpgt>
 8013f56:	2800      	cmp	r0, #0
 8013f58:	d145      	bne.n	8013fe6 <_dtoa_r+0x6be>
 8013f5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013f5e:	49a5      	ldr	r1, [pc, #660]	@ (80141f4 <_dtoa_r+0x8cc>)
 8013f60:	2000      	movs	r0, #0
 8013f62:	f7ec f9b9 	bl	80002d8 <__aeabi_dsub>
 8013f66:	4602      	mov	r2, r0
 8013f68:	460b      	mov	r3, r1
 8013f6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013f6e:	f7ec fddd 	bl	8000b2c <__aeabi_dcmplt>
 8013f72:	2800      	cmp	r0, #0
 8013f74:	f43f aef5 	beq.w	8013d62 <_dtoa_r+0x43a>
 8013f78:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8013f7a:	1e73      	subs	r3, r6, #1
 8013f7c:	9315      	str	r3, [sp, #84]	@ 0x54
 8013f7e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013f82:	2b30      	cmp	r3, #48	@ 0x30
 8013f84:	d0f8      	beq.n	8013f78 <_dtoa_r+0x650>
 8013f86:	9f04      	ldr	r7, [sp, #16]
 8013f88:	e73e      	b.n	8013e08 <_dtoa_r+0x4e0>
 8013f8a:	4b9b      	ldr	r3, [pc, #620]	@ (80141f8 <_dtoa_r+0x8d0>)
 8013f8c:	f7ec fb5c 	bl	8000648 <__aeabi_dmul>
 8013f90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013f94:	e7bc      	b.n	8013f10 <_dtoa_r+0x5e8>
 8013f96:	d10c      	bne.n	8013fb2 <_dtoa_r+0x68a>
 8013f98:	4b98      	ldr	r3, [pc, #608]	@ (80141fc <_dtoa_r+0x8d4>)
 8013f9a:	2200      	movs	r2, #0
 8013f9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013fa0:	f7ec fb52 	bl	8000648 <__aeabi_dmul>
 8013fa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013fa8:	f7ec fdd4 	bl	8000b54 <__aeabi_dcmpge>
 8013fac:	2800      	cmp	r0, #0
 8013fae:	f000 8157 	beq.w	8014260 <_dtoa_r+0x938>
 8013fb2:	2400      	movs	r4, #0
 8013fb4:	4625      	mov	r5, r4
 8013fb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013fb8:	43db      	mvns	r3, r3
 8013fba:	9304      	str	r3, [sp, #16]
 8013fbc:	4656      	mov	r6, sl
 8013fbe:	2700      	movs	r7, #0
 8013fc0:	4621      	mov	r1, r4
 8013fc2:	4658      	mov	r0, fp
 8013fc4:	f000 fbb4 	bl	8014730 <_Bfree>
 8013fc8:	2d00      	cmp	r5, #0
 8013fca:	d0dc      	beq.n	8013f86 <_dtoa_r+0x65e>
 8013fcc:	b12f      	cbz	r7, 8013fda <_dtoa_r+0x6b2>
 8013fce:	42af      	cmp	r7, r5
 8013fd0:	d003      	beq.n	8013fda <_dtoa_r+0x6b2>
 8013fd2:	4639      	mov	r1, r7
 8013fd4:	4658      	mov	r0, fp
 8013fd6:	f000 fbab 	bl	8014730 <_Bfree>
 8013fda:	4629      	mov	r1, r5
 8013fdc:	4658      	mov	r0, fp
 8013fde:	f000 fba7 	bl	8014730 <_Bfree>
 8013fe2:	e7d0      	b.n	8013f86 <_dtoa_r+0x65e>
 8013fe4:	9704      	str	r7, [sp, #16]
 8013fe6:	4633      	mov	r3, r6
 8013fe8:	461e      	mov	r6, r3
 8013fea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013fee:	2a39      	cmp	r2, #57	@ 0x39
 8013ff0:	d107      	bne.n	8014002 <_dtoa_r+0x6da>
 8013ff2:	459a      	cmp	sl, r3
 8013ff4:	d1f8      	bne.n	8013fe8 <_dtoa_r+0x6c0>
 8013ff6:	9a04      	ldr	r2, [sp, #16]
 8013ff8:	3201      	adds	r2, #1
 8013ffa:	9204      	str	r2, [sp, #16]
 8013ffc:	2230      	movs	r2, #48	@ 0x30
 8013ffe:	f88a 2000 	strb.w	r2, [sl]
 8014002:	781a      	ldrb	r2, [r3, #0]
 8014004:	3201      	adds	r2, #1
 8014006:	701a      	strb	r2, [r3, #0]
 8014008:	e7bd      	b.n	8013f86 <_dtoa_r+0x65e>
 801400a:	4b7b      	ldr	r3, [pc, #492]	@ (80141f8 <_dtoa_r+0x8d0>)
 801400c:	2200      	movs	r2, #0
 801400e:	f7ec fb1b 	bl	8000648 <__aeabi_dmul>
 8014012:	2200      	movs	r2, #0
 8014014:	2300      	movs	r3, #0
 8014016:	4604      	mov	r4, r0
 8014018:	460d      	mov	r5, r1
 801401a:	f7ec fd7d 	bl	8000b18 <__aeabi_dcmpeq>
 801401e:	2800      	cmp	r0, #0
 8014020:	f43f aebb 	beq.w	8013d9a <_dtoa_r+0x472>
 8014024:	e6f0      	b.n	8013e08 <_dtoa_r+0x4e0>
 8014026:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014028:	2a00      	cmp	r2, #0
 801402a:	f000 80db 	beq.w	80141e4 <_dtoa_r+0x8bc>
 801402e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014030:	2a01      	cmp	r2, #1
 8014032:	f300 80bf 	bgt.w	80141b4 <_dtoa_r+0x88c>
 8014036:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8014038:	2a00      	cmp	r2, #0
 801403a:	f000 80b7 	beq.w	80141ac <_dtoa_r+0x884>
 801403e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8014042:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8014044:	4646      	mov	r6, r8
 8014046:	9a08      	ldr	r2, [sp, #32]
 8014048:	2101      	movs	r1, #1
 801404a:	441a      	add	r2, r3
 801404c:	4658      	mov	r0, fp
 801404e:	4498      	add	r8, r3
 8014050:	9208      	str	r2, [sp, #32]
 8014052:	f000 fc6b 	bl	801492c <__i2b>
 8014056:	4605      	mov	r5, r0
 8014058:	b15e      	cbz	r6, 8014072 <_dtoa_r+0x74a>
 801405a:	9b08      	ldr	r3, [sp, #32]
 801405c:	2b00      	cmp	r3, #0
 801405e:	dd08      	ble.n	8014072 <_dtoa_r+0x74a>
 8014060:	42b3      	cmp	r3, r6
 8014062:	9a08      	ldr	r2, [sp, #32]
 8014064:	bfa8      	it	ge
 8014066:	4633      	movge	r3, r6
 8014068:	eba8 0803 	sub.w	r8, r8, r3
 801406c:	1af6      	subs	r6, r6, r3
 801406e:	1ad3      	subs	r3, r2, r3
 8014070:	9308      	str	r3, [sp, #32]
 8014072:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014074:	b1f3      	cbz	r3, 80140b4 <_dtoa_r+0x78c>
 8014076:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014078:	2b00      	cmp	r3, #0
 801407a:	f000 80b7 	beq.w	80141ec <_dtoa_r+0x8c4>
 801407e:	b18c      	cbz	r4, 80140a4 <_dtoa_r+0x77c>
 8014080:	4629      	mov	r1, r5
 8014082:	4622      	mov	r2, r4
 8014084:	4658      	mov	r0, fp
 8014086:	f000 fd11 	bl	8014aac <__pow5mult>
 801408a:	464a      	mov	r2, r9
 801408c:	4601      	mov	r1, r0
 801408e:	4605      	mov	r5, r0
 8014090:	4658      	mov	r0, fp
 8014092:	f000 fc61 	bl	8014958 <__multiply>
 8014096:	4649      	mov	r1, r9
 8014098:	9004      	str	r0, [sp, #16]
 801409a:	4658      	mov	r0, fp
 801409c:	f000 fb48 	bl	8014730 <_Bfree>
 80140a0:	9b04      	ldr	r3, [sp, #16]
 80140a2:	4699      	mov	r9, r3
 80140a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80140a6:	1b1a      	subs	r2, r3, r4
 80140a8:	d004      	beq.n	80140b4 <_dtoa_r+0x78c>
 80140aa:	4649      	mov	r1, r9
 80140ac:	4658      	mov	r0, fp
 80140ae:	f000 fcfd 	bl	8014aac <__pow5mult>
 80140b2:	4681      	mov	r9, r0
 80140b4:	2101      	movs	r1, #1
 80140b6:	4658      	mov	r0, fp
 80140b8:	f000 fc38 	bl	801492c <__i2b>
 80140bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80140be:	4604      	mov	r4, r0
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	f000 81cf 	beq.w	8014464 <_dtoa_r+0xb3c>
 80140c6:	461a      	mov	r2, r3
 80140c8:	4601      	mov	r1, r0
 80140ca:	4658      	mov	r0, fp
 80140cc:	f000 fcee 	bl	8014aac <__pow5mult>
 80140d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80140d2:	2b01      	cmp	r3, #1
 80140d4:	4604      	mov	r4, r0
 80140d6:	f300 8095 	bgt.w	8014204 <_dtoa_r+0x8dc>
 80140da:	9b02      	ldr	r3, [sp, #8]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	f040 8087 	bne.w	80141f0 <_dtoa_r+0x8c8>
 80140e2:	9b03      	ldr	r3, [sp, #12]
 80140e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	f040 8089 	bne.w	8014200 <_dtoa_r+0x8d8>
 80140ee:	9b03      	ldr	r3, [sp, #12]
 80140f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80140f4:	0d1b      	lsrs	r3, r3, #20
 80140f6:	051b      	lsls	r3, r3, #20
 80140f8:	b12b      	cbz	r3, 8014106 <_dtoa_r+0x7de>
 80140fa:	9b08      	ldr	r3, [sp, #32]
 80140fc:	3301      	adds	r3, #1
 80140fe:	9308      	str	r3, [sp, #32]
 8014100:	f108 0801 	add.w	r8, r8, #1
 8014104:	2301      	movs	r3, #1
 8014106:	930a      	str	r3, [sp, #40]	@ 0x28
 8014108:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801410a:	2b00      	cmp	r3, #0
 801410c:	f000 81b0 	beq.w	8014470 <_dtoa_r+0xb48>
 8014110:	6923      	ldr	r3, [r4, #16]
 8014112:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014116:	6918      	ldr	r0, [r3, #16]
 8014118:	f000 fbbc 	bl	8014894 <__hi0bits>
 801411c:	f1c0 0020 	rsb	r0, r0, #32
 8014120:	9b08      	ldr	r3, [sp, #32]
 8014122:	4418      	add	r0, r3
 8014124:	f010 001f 	ands.w	r0, r0, #31
 8014128:	d077      	beq.n	801421a <_dtoa_r+0x8f2>
 801412a:	f1c0 0320 	rsb	r3, r0, #32
 801412e:	2b04      	cmp	r3, #4
 8014130:	dd6b      	ble.n	801420a <_dtoa_r+0x8e2>
 8014132:	9b08      	ldr	r3, [sp, #32]
 8014134:	f1c0 001c 	rsb	r0, r0, #28
 8014138:	4403      	add	r3, r0
 801413a:	4480      	add	r8, r0
 801413c:	4406      	add	r6, r0
 801413e:	9308      	str	r3, [sp, #32]
 8014140:	f1b8 0f00 	cmp.w	r8, #0
 8014144:	dd05      	ble.n	8014152 <_dtoa_r+0x82a>
 8014146:	4649      	mov	r1, r9
 8014148:	4642      	mov	r2, r8
 801414a:	4658      	mov	r0, fp
 801414c:	f000 fd08 	bl	8014b60 <__lshift>
 8014150:	4681      	mov	r9, r0
 8014152:	9b08      	ldr	r3, [sp, #32]
 8014154:	2b00      	cmp	r3, #0
 8014156:	dd05      	ble.n	8014164 <_dtoa_r+0x83c>
 8014158:	4621      	mov	r1, r4
 801415a:	461a      	mov	r2, r3
 801415c:	4658      	mov	r0, fp
 801415e:	f000 fcff 	bl	8014b60 <__lshift>
 8014162:	4604      	mov	r4, r0
 8014164:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014166:	2b00      	cmp	r3, #0
 8014168:	d059      	beq.n	801421e <_dtoa_r+0x8f6>
 801416a:	4621      	mov	r1, r4
 801416c:	4648      	mov	r0, r9
 801416e:	f000 fd63 	bl	8014c38 <__mcmp>
 8014172:	2800      	cmp	r0, #0
 8014174:	da53      	bge.n	801421e <_dtoa_r+0x8f6>
 8014176:	1e7b      	subs	r3, r7, #1
 8014178:	9304      	str	r3, [sp, #16]
 801417a:	4649      	mov	r1, r9
 801417c:	2300      	movs	r3, #0
 801417e:	220a      	movs	r2, #10
 8014180:	4658      	mov	r0, fp
 8014182:	f000 faf7 	bl	8014774 <__multadd>
 8014186:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014188:	4681      	mov	r9, r0
 801418a:	2b00      	cmp	r3, #0
 801418c:	f000 8172 	beq.w	8014474 <_dtoa_r+0xb4c>
 8014190:	2300      	movs	r3, #0
 8014192:	4629      	mov	r1, r5
 8014194:	220a      	movs	r2, #10
 8014196:	4658      	mov	r0, fp
 8014198:	f000 faec 	bl	8014774 <__multadd>
 801419c:	9b00      	ldr	r3, [sp, #0]
 801419e:	2b00      	cmp	r3, #0
 80141a0:	4605      	mov	r5, r0
 80141a2:	dc67      	bgt.n	8014274 <_dtoa_r+0x94c>
 80141a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80141a6:	2b02      	cmp	r3, #2
 80141a8:	dc41      	bgt.n	801422e <_dtoa_r+0x906>
 80141aa:	e063      	b.n	8014274 <_dtoa_r+0x94c>
 80141ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80141ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80141b2:	e746      	b.n	8014042 <_dtoa_r+0x71a>
 80141b4:	9b07      	ldr	r3, [sp, #28]
 80141b6:	1e5c      	subs	r4, r3, #1
 80141b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80141ba:	42a3      	cmp	r3, r4
 80141bc:	bfbf      	itttt	lt
 80141be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80141c0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80141c2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80141c4:	1ae3      	sublt	r3, r4, r3
 80141c6:	bfb4      	ite	lt
 80141c8:	18d2      	addlt	r2, r2, r3
 80141ca:	1b1c      	subge	r4, r3, r4
 80141cc:	9b07      	ldr	r3, [sp, #28]
 80141ce:	bfbc      	itt	lt
 80141d0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80141d2:	2400      	movlt	r4, #0
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	bfb5      	itete	lt
 80141d8:	eba8 0603 	sublt.w	r6, r8, r3
 80141dc:	9b07      	ldrge	r3, [sp, #28]
 80141de:	2300      	movlt	r3, #0
 80141e0:	4646      	movge	r6, r8
 80141e2:	e730      	b.n	8014046 <_dtoa_r+0x71e>
 80141e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80141e6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80141e8:	4646      	mov	r6, r8
 80141ea:	e735      	b.n	8014058 <_dtoa_r+0x730>
 80141ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80141ee:	e75c      	b.n	80140aa <_dtoa_r+0x782>
 80141f0:	2300      	movs	r3, #0
 80141f2:	e788      	b.n	8014106 <_dtoa_r+0x7de>
 80141f4:	3fe00000 	.word	0x3fe00000
 80141f8:	40240000 	.word	0x40240000
 80141fc:	40140000 	.word	0x40140000
 8014200:	9b02      	ldr	r3, [sp, #8]
 8014202:	e780      	b.n	8014106 <_dtoa_r+0x7de>
 8014204:	2300      	movs	r3, #0
 8014206:	930a      	str	r3, [sp, #40]	@ 0x28
 8014208:	e782      	b.n	8014110 <_dtoa_r+0x7e8>
 801420a:	d099      	beq.n	8014140 <_dtoa_r+0x818>
 801420c:	9a08      	ldr	r2, [sp, #32]
 801420e:	331c      	adds	r3, #28
 8014210:	441a      	add	r2, r3
 8014212:	4498      	add	r8, r3
 8014214:	441e      	add	r6, r3
 8014216:	9208      	str	r2, [sp, #32]
 8014218:	e792      	b.n	8014140 <_dtoa_r+0x818>
 801421a:	4603      	mov	r3, r0
 801421c:	e7f6      	b.n	801420c <_dtoa_r+0x8e4>
 801421e:	9b07      	ldr	r3, [sp, #28]
 8014220:	9704      	str	r7, [sp, #16]
 8014222:	2b00      	cmp	r3, #0
 8014224:	dc20      	bgt.n	8014268 <_dtoa_r+0x940>
 8014226:	9300      	str	r3, [sp, #0]
 8014228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801422a:	2b02      	cmp	r3, #2
 801422c:	dd1e      	ble.n	801426c <_dtoa_r+0x944>
 801422e:	9b00      	ldr	r3, [sp, #0]
 8014230:	2b00      	cmp	r3, #0
 8014232:	f47f aec0 	bne.w	8013fb6 <_dtoa_r+0x68e>
 8014236:	4621      	mov	r1, r4
 8014238:	2205      	movs	r2, #5
 801423a:	4658      	mov	r0, fp
 801423c:	f000 fa9a 	bl	8014774 <__multadd>
 8014240:	4601      	mov	r1, r0
 8014242:	4604      	mov	r4, r0
 8014244:	4648      	mov	r0, r9
 8014246:	f000 fcf7 	bl	8014c38 <__mcmp>
 801424a:	2800      	cmp	r0, #0
 801424c:	f77f aeb3 	ble.w	8013fb6 <_dtoa_r+0x68e>
 8014250:	4656      	mov	r6, sl
 8014252:	2331      	movs	r3, #49	@ 0x31
 8014254:	f806 3b01 	strb.w	r3, [r6], #1
 8014258:	9b04      	ldr	r3, [sp, #16]
 801425a:	3301      	adds	r3, #1
 801425c:	9304      	str	r3, [sp, #16]
 801425e:	e6ae      	b.n	8013fbe <_dtoa_r+0x696>
 8014260:	9c07      	ldr	r4, [sp, #28]
 8014262:	9704      	str	r7, [sp, #16]
 8014264:	4625      	mov	r5, r4
 8014266:	e7f3      	b.n	8014250 <_dtoa_r+0x928>
 8014268:	9b07      	ldr	r3, [sp, #28]
 801426a:	9300      	str	r3, [sp, #0]
 801426c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801426e:	2b00      	cmp	r3, #0
 8014270:	f000 8104 	beq.w	801447c <_dtoa_r+0xb54>
 8014274:	2e00      	cmp	r6, #0
 8014276:	dd05      	ble.n	8014284 <_dtoa_r+0x95c>
 8014278:	4629      	mov	r1, r5
 801427a:	4632      	mov	r2, r6
 801427c:	4658      	mov	r0, fp
 801427e:	f000 fc6f 	bl	8014b60 <__lshift>
 8014282:	4605      	mov	r5, r0
 8014284:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014286:	2b00      	cmp	r3, #0
 8014288:	d05a      	beq.n	8014340 <_dtoa_r+0xa18>
 801428a:	6869      	ldr	r1, [r5, #4]
 801428c:	4658      	mov	r0, fp
 801428e:	f000 fa0f 	bl	80146b0 <_Balloc>
 8014292:	4606      	mov	r6, r0
 8014294:	b928      	cbnz	r0, 80142a2 <_dtoa_r+0x97a>
 8014296:	4b84      	ldr	r3, [pc, #528]	@ (80144a8 <_dtoa_r+0xb80>)
 8014298:	4602      	mov	r2, r0
 801429a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801429e:	f7ff bb5a 	b.w	8013956 <_dtoa_r+0x2e>
 80142a2:	692a      	ldr	r2, [r5, #16]
 80142a4:	3202      	adds	r2, #2
 80142a6:	0092      	lsls	r2, r2, #2
 80142a8:	f105 010c 	add.w	r1, r5, #12
 80142ac:	300c      	adds	r0, #12
 80142ae:	f002 f93b 	bl	8016528 <memcpy>
 80142b2:	2201      	movs	r2, #1
 80142b4:	4631      	mov	r1, r6
 80142b6:	4658      	mov	r0, fp
 80142b8:	f000 fc52 	bl	8014b60 <__lshift>
 80142bc:	f10a 0301 	add.w	r3, sl, #1
 80142c0:	9307      	str	r3, [sp, #28]
 80142c2:	9b00      	ldr	r3, [sp, #0]
 80142c4:	4453      	add	r3, sl
 80142c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80142c8:	9b02      	ldr	r3, [sp, #8]
 80142ca:	f003 0301 	and.w	r3, r3, #1
 80142ce:	462f      	mov	r7, r5
 80142d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80142d2:	4605      	mov	r5, r0
 80142d4:	9b07      	ldr	r3, [sp, #28]
 80142d6:	4621      	mov	r1, r4
 80142d8:	3b01      	subs	r3, #1
 80142da:	4648      	mov	r0, r9
 80142dc:	9300      	str	r3, [sp, #0]
 80142de:	f7ff fa99 	bl	8013814 <quorem>
 80142e2:	4639      	mov	r1, r7
 80142e4:	9002      	str	r0, [sp, #8]
 80142e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80142ea:	4648      	mov	r0, r9
 80142ec:	f000 fca4 	bl	8014c38 <__mcmp>
 80142f0:	462a      	mov	r2, r5
 80142f2:	9008      	str	r0, [sp, #32]
 80142f4:	4621      	mov	r1, r4
 80142f6:	4658      	mov	r0, fp
 80142f8:	f000 fcba 	bl	8014c70 <__mdiff>
 80142fc:	68c2      	ldr	r2, [r0, #12]
 80142fe:	4606      	mov	r6, r0
 8014300:	bb02      	cbnz	r2, 8014344 <_dtoa_r+0xa1c>
 8014302:	4601      	mov	r1, r0
 8014304:	4648      	mov	r0, r9
 8014306:	f000 fc97 	bl	8014c38 <__mcmp>
 801430a:	4602      	mov	r2, r0
 801430c:	4631      	mov	r1, r6
 801430e:	4658      	mov	r0, fp
 8014310:	920e      	str	r2, [sp, #56]	@ 0x38
 8014312:	f000 fa0d 	bl	8014730 <_Bfree>
 8014316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014318:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801431a:	9e07      	ldr	r6, [sp, #28]
 801431c:	ea43 0102 	orr.w	r1, r3, r2
 8014320:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014322:	4319      	orrs	r1, r3
 8014324:	d110      	bne.n	8014348 <_dtoa_r+0xa20>
 8014326:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801432a:	d029      	beq.n	8014380 <_dtoa_r+0xa58>
 801432c:	9b08      	ldr	r3, [sp, #32]
 801432e:	2b00      	cmp	r3, #0
 8014330:	dd02      	ble.n	8014338 <_dtoa_r+0xa10>
 8014332:	9b02      	ldr	r3, [sp, #8]
 8014334:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8014338:	9b00      	ldr	r3, [sp, #0]
 801433a:	f883 8000 	strb.w	r8, [r3]
 801433e:	e63f      	b.n	8013fc0 <_dtoa_r+0x698>
 8014340:	4628      	mov	r0, r5
 8014342:	e7bb      	b.n	80142bc <_dtoa_r+0x994>
 8014344:	2201      	movs	r2, #1
 8014346:	e7e1      	b.n	801430c <_dtoa_r+0x9e4>
 8014348:	9b08      	ldr	r3, [sp, #32]
 801434a:	2b00      	cmp	r3, #0
 801434c:	db04      	blt.n	8014358 <_dtoa_r+0xa30>
 801434e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014350:	430b      	orrs	r3, r1
 8014352:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8014354:	430b      	orrs	r3, r1
 8014356:	d120      	bne.n	801439a <_dtoa_r+0xa72>
 8014358:	2a00      	cmp	r2, #0
 801435a:	dded      	ble.n	8014338 <_dtoa_r+0xa10>
 801435c:	4649      	mov	r1, r9
 801435e:	2201      	movs	r2, #1
 8014360:	4658      	mov	r0, fp
 8014362:	f000 fbfd 	bl	8014b60 <__lshift>
 8014366:	4621      	mov	r1, r4
 8014368:	4681      	mov	r9, r0
 801436a:	f000 fc65 	bl	8014c38 <__mcmp>
 801436e:	2800      	cmp	r0, #0
 8014370:	dc03      	bgt.n	801437a <_dtoa_r+0xa52>
 8014372:	d1e1      	bne.n	8014338 <_dtoa_r+0xa10>
 8014374:	f018 0f01 	tst.w	r8, #1
 8014378:	d0de      	beq.n	8014338 <_dtoa_r+0xa10>
 801437a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801437e:	d1d8      	bne.n	8014332 <_dtoa_r+0xa0a>
 8014380:	9a00      	ldr	r2, [sp, #0]
 8014382:	2339      	movs	r3, #57	@ 0x39
 8014384:	7013      	strb	r3, [r2, #0]
 8014386:	4633      	mov	r3, r6
 8014388:	461e      	mov	r6, r3
 801438a:	3b01      	subs	r3, #1
 801438c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8014390:	2a39      	cmp	r2, #57	@ 0x39
 8014392:	d052      	beq.n	801443a <_dtoa_r+0xb12>
 8014394:	3201      	adds	r2, #1
 8014396:	701a      	strb	r2, [r3, #0]
 8014398:	e612      	b.n	8013fc0 <_dtoa_r+0x698>
 801439a:	2a00      	cmp	r2, #0
 801439c:	dd07      	ble.n	80143ae <_dtoa_r+0xa86>
 801439e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80143a2:	d0ed      	beq.n	8014380 <_dtoa_r+0xa58>
 80143a4:	9a00      	ldr	r2, [sp, #0]
 80143a6:	f108 0301 	add.w	r3, r8, #1
 80143aa:	7013      	strb	r3, [r2, #0]
 80143ac:	e608      	b.n	8013fc0 <_dtoa_r+0x698>
 80143ae:	9b07      	ldr	r3, [sp, #28]
 80143b0:	9a07      	ldr	r2, [sp, #28]
 80143b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80143b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80143b8:	4293      	cmp	r3, r2
 80143ba:	d028      	beq.n	801440e <_dtoa_r+0xae6>
 80143bc:	4649      	mov	r1, r9
 80143be:	2300      	movs	r3, #0
 80143c0:	220a      	movs	r2, #10
 80143c2:	4658      	mov	r0, fp
 80143c4:	f000 f9d6 	bl	8014774 <__multadd>
 80143c8:	42af      	cmp	r7, r5
 80143ca:	4681      	mov	r9, r0
 80143cc:	f04f 0300 	mov.w	r3, #0
 80143d0:	f04f 020a 	mov.w	r2, #10
 80143d4:	4639      	mov	r1, r7
 80143d6:	4658      	mov	r0, fp
 80143d8:	d107      	bne.n	80143ea <_dtoa_r+0xac2>
 80143da:	f000 f9cb 	bl	8014774 <__multadd>
 80143de:	4607      	mov	r7, r0
 80143e0:	4605      	mov	r5, r0
 80143e2:	9b07      	ldr	r3, [sp, #28]
 80143e4:	3301      	adds	r3, #1
 80143e6:	9307      	str	r3, [sp, #28]
 80143e8:	e774      	b.n	80142d4 <_dtoa_r+0x9ac>
 80143ea:	f000 f9c3 	bl	8014774 <__multadd>
 80143ee:	4629      	mov	r1, r5
 80143f0:	4607      	mov	r7, r0
 80143f2:	2300      	movs	r3, #0
 80143f4:	220a      	movs	r2, #10
 80143f6:	4658      	mov	r0, fp
 80143f8:	f000 f9bc 	bl	8014774 <__multadd>
 80143fc:	4605      	mov	r5, r0
 80143fe:	e7f0      	b.n	80143e2 <_dtoa_r+0xaba>
 8014400:	9b00      	ldr	r3, [sp, #0]
 8014402:	2b00      	cmp	r3, #0
 8014404:	bfcc      	ite	gt
 8014406:	461e      	movgt	r6, r3
 8014408:	2601      	movle	r6, #1
 801440a:	4456      	add	r6, sl
 801440c:	2700      	movs	r7, #0
 801440e:	4649      	mov	r1, r9
 8014410:	2201      	movs	r2, #1
 8014412:	4658      	mov	r0, fp
 8014414:	f000 fba4 	bl	8014b60 <__lshift>
 8014418:	4621      	mov	r1, r4
 801441a:	4681      	mov	r9, r0
 801441c:	f000 fc0c 	bl	8014c38 <__mcmp>
 8014420:	2800      	cmp	r0, #0
 8014422:	dcb0      	bgt.n	8014386 <_dtoa_r+0xa5e>
 8014424:	d102      	bne.n	801442c <_dtoa_r+0xb04>
 8014426:	f018 0f01 	tst.w	r8, #1
 801442a:	d1ac      	bne.n	8014386 <_dtoa_r+0xa5e>
 801442c:	4633      	mov	r3, r6
 801442e:	461e      	mov	r6, r3
 8014430:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014434:	2a30      	cmp	r2, #48	@ 0x30
 8014436:	d0fa      	beq.n	801442e <_dtoa_r+0xb06>
 8014438:	e5c2      	b.n	8013fc0 <_dtoa_r+0x698>
 801443a:	459a      	cmp	sl, r3
 801443c:	d1a4      	bne.n	8014388 <_dtoa_r+0xa60>
 801443e:	9b04      	ldr	r3, [sp, #16]
 8014440:	3301      	adds	r3, #1
 8014442:	9304      	str	r3, [sp, #16]
 8014444:	2331      	movs	r3, #49	@ 0x31
 8014446:	f88a 3000 	strb.w	r3, [sl]
 801444a:	e5b9      	b.n	8013fc0 <_dtoa_r+0x698>
 801444c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801444e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80144ac <_dtoa_r+0xb84>
 8014452:	b11b      	cbz	r3, 801445c <_dtoa_r+0xb34>
 8014454:	f10a 0308 	add.w	r3, sl, #8
 8014458:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801445a:	6013      	str	r3, [r2, #0]
 801445c:	4650      	mov	r0, sl
 801445e:	b019      	add	sp, #100	@ 0x64
 8014460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014466:	2b01      	cmp	r3, #1
 8014468:	f77f ae37 	ble.w	80140da <_dtoa_r+0x7b2>
 801446c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801446e:	930a      	str	r3, [sp, #40]	@ 0x28
 8014470:	2001      	movs	r0, #1
 8014472:	e655      	b.n	8014120 <_dtoa_r+0x7f8>
 8014474:	9b00      	ldr	r3, [sp, #0]
 8014476:	2b00      	cmp	r3, #0
 8014478:	f77f aed6 	ble.w	8014228 <_dtoa_r+0x900>
 801447c:	4656      	mov	r6, sl
 801447e:	4621      	mov	r1, r4
 8014480:	4648      	mov	r0, r9
 8014482:	f7ff f9c7 	bl	8013814 <quorem>
 8014486:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801448a:	f806 8b01 	strb.w	r8, [r6], #1
 801448e:	9b00      	ldr	r3, [sp, #0]
 8014490:	eba6 020a 	sub.w	r2, r6, sl
 8014494:	4293      	cmp	r3, r2
 8014496:	ddb3      	ble.n	8014400 <_dtoa_r+0xad8>
 8014498:	4649      	mov	r1, r9
 801449a:	2300      	movs	r3, #0
 801449c:	220a      	movs	r2, #10
 801449e:	4658      	mov	r0, fp
 80144a0:	f000 f968 	bl	8014774 <__multadd>
 80144a4:	4681      	mov	r9, r0
 80144a6:	e7ea      	b.n	801447e <_dtoa_r+0xb56>
 80144a8:	08024b19 	.word	0x08024b19
 80144ac:	08024a9d 	.word	0x08024a9d

080144b0 <_free_r>:
 80144b0:	b538      	push	{r3, r4, r5, lr}
 80144b2:	4605      	mov	r5, r0
 80144b4:	2900      	cmp	r1, #0
 80144b6:	d041      	beq.n	801453c <_free_r+0x8c>
 80144b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80144bc:	1f0c      	subs	r4, r1, #4
 80144be:	2b00      	cmp	r3, #0
 80144c0:	bfb8      	it	lt
 80144c2:	18e4      	addlt	r4, r4, r3
 80144c4:	f000 f8e8 	bl	8014698 <__malloc_lock>
 80144c8:	4a1d      	ldr	r2, [pc, #116]	@ (8014540 <_free_r+0x90>)
 80144ca:	6813      	ldr	r3, [r2, #0]
 80144cc:	b933      	cbnz	r3, 80144dc <_free_r+0x2c>
 80144ce:	6063      	str	r3, [r4, #4]
 80144d0:	6014      	str	r4, [r2, #0]
 80144d2:	4628      	mov	r0, r5
 80144d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80144d8:	f000 b8e4 	b.w	80146a4 <__malloc_unlock>
 80144dc:	42a3      	cmp	r3, r4
 80144de:	d908      	bls.n	80144f2 <_free_r+0x42>
 80144e0:	6820      	ldr	r0, [r4, #0]
 80144e2:	1821      	adds	r1, r4, r0
 80144e4:	428b      	cmp	r3, r1
 80144e6:	bf01      	itttt	eq
 80144e8:	6819      	ldreq	r1, [r3, #0]
 80144ea:	685b      	ldreq	r3, [r3, #4]
 80144ec:	1809      	addeq	r1, r1, r0
 80144ee:	6021      	streq	r1, [r4, #0]
 80144f0:	e7ed      	b.n	80144ce <_free_r+0x1e>
 80144f2:	461a      	mov	r2, r3
 80144f4:	685b      	ldr	r3, [r3, #4]
 80144f6:	b10b      	cbz	r3, 80144fc <_free_r+0x4c>
 80144f8:	42a3      	cmp	r3, r4
 80144fa:	d9fa      	bls.n	80144f2 <_free_r+0x42>
 80144fc:	6811      	ldr	r1, [r2, #0]
 80144fe:	1850      	adds	r0, r2, r1
 8014500:	42a0      	cmp	r0, r4
 8014502:	d10b      	bne.n	801451c <_free_r+0x6c>
 8014504:	6820      	ldr	r0, [r4, #0]
 8014506:	4401      	add	r1, r0
 8014508:	1850      	adds	r0, r2, r1
 801450a:	4283      	cmp	r3, r0
 801450c:	6011      	str	r1, [r2, #0]
 801450e:	d1e0      	bne.n	80144d2 <_free_r+0x22>
 8014510:	6818      	ldr	r0, [r3, #0]
 8014512:	685b      	ldr	r3, [r3, #4]
 8014514:	6053      	str	r3, [r2, #4]
 8014516:	4408      	add	r0, r1
 8014518:	6010      	str	r0, [r2, #0]
 801451a:	e7da      	b.n	80144d2 <_free_r+0x22>
 801451c:	d902      	bls.n	8014524 <_free_r+0x74>
 801451e:	230c      	movs	r3, #12
 8014520:	602b      	str	r3, [r5, #0]
 8014522:	e7d6      	b.n	80144d2 <_free_r+0x22>
 8014524:	6820      	ldr	r0, [r4, #0]
 8014526:	1821      	adds	r1, r4, r0
 8014528:	428b      	cmp	r3, r1
 801452a:	bf04      	itt	eq
 801452c:	6819      	ldreq	r1, [r3, #0]
 801452e:	685b      	ldreq	r3, [r3, #4]
 8014530:	6063      	str	r3, [r4, #4]
 8014532:	bf04      	itt	eq
 8014534:	1809      	addeq	r1, r1, r0
 8014536:	6021      	streq	r1, [r4, #0]
 8014538:	6054      	str	r4, [r2, #4]
 801453a:	e7ca      	b.n	80144d2 <_free_r+0x22>
 801453c:	bd38      	pop	{r3, r4, r5, pc}
 801453e:	bf00      	nop
 8014540:	20003ea8 	.word	0x20003ea8

08014544 <malloc>:
 8014544:	4b02      	ldr	r3, [pc, #8]	@ (8014550 <malloc+0xc>)
 8014546:	4601      	mov	r1, r0
 8014548:	6818      	ldr	r0, [r3, #0]
 801454a:	f000 b825 	b.w	8014598 <_malloc_r>
 801454e:	bf00      	nop
 8014550:	200001d8 	.word	0x200001d8

08014554 <sbrk_aligned>:
 8014554:	b570      	push	{r4, r5, r6, lr}
 8014556:	4e0f      	ldr	r6, [pc, #60]	@ (8014594 <sbrk_aligned+0x40>)
 8014558:	460c      	mov	r4, r1
 801455a:	6831      	ldr	r1, [r6, #0]
 801455c:	4605      	mov	r5, r0
 801455e:	b911      	cbnz	r1, 8014566 <sbrk_aligned+0x12>
 8014560:	f001 ffd2 	bl	8016508 <_sbrk_r>
 8014564:	6030      	str	r0, [r6, #0]
 8014566:	4621      	mov	r1, r4
 8014568:	4628      	mov	r0, r5
 801456a:	f001 ffcd 	bl	8016508 <_sbrk_r>
 801456e:	1c43      	adds	r3, r0, #1
 8014570:	d103      	bne.n	801457a <sbrk_aligned+0x26>
 8014572:	f04f 34ff 	mov.w	r4, #4294967295
 8014576:	4620      	mov	r0, r4
 8014578:	bd70      	pop	{r4, r5, r6, pc}
 801457a:	1cc4      	adds	r4, r0, #3
 801457c:	f024 0403 	bic.w	r4, r4, #3
 8014580:	42a0      	cmp	r0, r4
 8014582:	d0f8      	beq.n	8014576 <sbrk_aligned+0x22>
 8014584:	1a21      	subs	r1, r4, r0
 8014586:	4628      	mov	r0, r5
 8014588:	f001 ffbe 	bl	8016508 <_sbrk_r>
 801458c:	3001      	adds	r0, #1
 801458e:	d1f2      	bne.n	8014576 <sbrk_aligned+0x22>
 8014590:	e7ef      	b.n	8014572 <sbrk_aligned+0x1e>
 8014592:	bf00      	nop
 8014594:	20003ea4 	.word	0x20003ea4

08014598 <_malloc_r>:
 8014598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801459c:	1ccd      	adds	r5, r1, #3
 801459e:	f025 0503 	bic.w	r5, r5, #3
 80145a2:	3508      	adds	r5, #8
 80145a4:	2d0c      	cmp	r5, #12
 80145a6:	bf38      	it	cc
 80145a8:	250c      	movcc	r5, #12
 80145aa:	2d00      	cmp	r5, #0
 80145ac:	4606      	mov	r6, r0
 80145ae:	db01      	blt.n	80145b4 <_malloc_r+0x1c>
 80145b0:	42a9      	cmp	r1, r5
 80145b2:	d904      	bls.n	80145be <_malloc_r+0x26>
 80145b4:	230c      	movs	r3, #12
 80145b6:	6033      	str	r3, [r6, #0]
 80145b8:	2000      	movs	r0, #0
 80145ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80145be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014694 <_malloc_r+0xfc>
 80145c2:	f000 f869 	bl	8014698 <__malloc_lock>
 80145c6:	f8d8 3000 	ldr.w	r3, [r8]
 80145ca:	461c      	mov	r4, r3
 80145cc:	bb44      	cbnz	r4, 8014620 <_malloc_r+0x88>
 80145ce:	4629      	mov	r1, r5
 80145d0:	4630      	mov	r0, r6
 80145d2:	f7ff ffbf 	bl	8014554 <sbrk_aligned>
 80145d6:	1c43      	adds	r3, r0, #1
 80145d8:	4604      	mov	r4, r0
 80145da:	d158      	bne.n	801468e <_malloc_r+0xf6>
 80145dc:	f8d8 4000 	ldr.w	r4, [r8]
 80145e0:	4627      	mov	r7, r4
 80145e2:	2f00      	cmp	r7, #0
 80145e4:	d143      	bne.n	801466e <_malloc_r+0xd6>
 80145e6:	2c00      	cmp	r4, #0
 80145e8:	d04b      	beq.n	8014682 <_malloc_r+0xea>
 80145ea:	6823      	ldr	r3, [r4, #0]
 80145ec:	4639      	mov	r1, r7
 80145ee:	4630      	mov	r0, r6
 80145f0:	eb04 0903 	add.w	r9, r4, r3
 80145f4:	f001 ff88 	bl	8016508 <_sbrk_r>
 80145f8:	4581      	cmp	r9, r0
 80145fa:	d142      	bne.n	8014682 <_malloc_r+0xea>
 80145fc:	6821      	ldr	r1, [r4, #0]
 80145fe:	1a6d      	subs	r5, r5, r1
 8014600:	4629      	mov	r1, r5
 8014602:	4630      	mov	r0, r6
 8014604:	f7ff ffa6 	bl	8014554 <sbrk_aligned>
 8014608:	3001      	adds	r0, #1
 801460a:	d03a      	beq.n	8014682 <_malloc_r+0xea>
 801460c:	6823      	ldr	r3, [r4, #0]
 801460e:	442b      	add	r3, r5
 8014610:	6023      	str	r3, [r4, #0]
 8014612:	f8d8 3000 	ldr.w	r3, [r8]
 8014616:	685a      	ldr	r2, [r3, #4]
 8014618:	bb62      	cbnz	r2, 8014674 <_malloc_r+0xdc>
 801461a:	f8c8 7000 	str.w	r7, [r8]
 801461e:	e00f      	b.n	8014640 <_malloc_r+0xa8>
 8014620:	6822      	ldr	r2, [r4, #0]
 8014622:	1b52      	subs	r2, r2, r5
 8014624:	d420      	bmi.n	8014668 <_malloc_r+0xd0>
 8014626:	2a0b      	cmp	r2, #11
 8014628:	d917      	bls.n	801465a <_malloc_r+0xc2>
 801462a:	1961      	adds	r1, r4, r5
 801462c:	42a3      	cmp	r3, r4
 801462e:	6025      	str	r5, [r4, #0]
 8014630:	bf18      	it	ne
 8014632:	6059      	strne	r1, [r3, #4]
 8014634:	6863      	ldr	r3, [r4, #4]
 8014636:	bf08      	it	eq
 8014638:	f8c8 1000 	streq.w	r1, [r8]
 801463c:	5162      	str	r2, [r4, r5]
 801463e:	604b      	str	r3, [r1, #4]
 8014640:	4630      	mov	r0, r6
 8014642:	f000 f82f 	bl	80146a4 <__malloc_unlock>
 8014646:	f104 000b 	add.w	r0, r4, #11
 801464a:	1d23      	adds	r3, r4, #4
 801464c:	f020 0007 	bic.w	r0, r0, #7
 8014650:	1ac2      	subs	r2, r0, r3
 8014652:	bf1c      	itt	ne
 8014654:	1a1b      	subne	r3, r3, r0
 8014656:	50a3      	strne	r3, [r4, r2]
 8014658:	e7af      	b.n	80145ba <_malloc_r+0x22>
 801465a:	6862      	ldr	r2, [r4, #4]
 801465c:	42a3      	cmp	r3, r4
 801465e:	bf0c      	ite	eq
 8014660:	f8c8 2000 	streq.w	r2, [r8]
 8014664:	605a      	strne	r2, [r3, #4]
 8014666:	e7eb      	b.n	8014640 <_malloc_r+0xa8>
 8014668:	4623      	mov	r3, r4
 801466a:	6864      	ldr	r4, [r4, #4]
 801466c:	e7ae      	b.n	80145cc <_malloc_r+0x34>
 801466e:	463c      	mov	r4, r7
 8014670:	687f      	ldr	r7, [r7, #4]
 8014672:	e7b6      	b.n	80145e2 <_malloc_r+0x4a>
 8014674:	461a      	mov	r2, r3
 8014676:	685b      	ldr	r3, [r3, #4]
 8014678:	42a3      	cmp	r3, r4
 801467a:	d1fb      	bne.n	8014674 <_malloc_r+0xdc>
 801467c:	2300      	movs	r3, #0
 801467e:	6053      	str	r3, [r2, #4]
 8014680:	e7de      	b.n	8014640 <_malloc_r+0xa8>
 8014682:	230c      	movs	r3, #12
 8014684:	6033      	str	r3, [r6, #0]
 8014686:	4630      	mov	r0, r6
 8014688:	f000 f80c 	bl	80146a4 <__malloc_unlock>
 801468c:	e794      	b.n	80145b8 <_malloc_r+0x20>
 801468e:	6005      	str	r5, [r0, #0]
 8014690:	e7d6      	b.n	8014640 <_malloc_r+0xa8>
 8014692:	bf00      	nop
 8014694:	20003ea8 	.word	0x20003ea8

08014698 <__malloc_lock>:
 8014698:	4801      	ldr	r0, [pc, #4]	@ (80146a0 <__malloc_lock+0x8>)
 801469a:	f7ff b8b2 	b.w	8013802 <__retarget_lock_acquire_recursive>
 801469e:	bf00      	nop
 80146a0:	20003ea0 	.word	0x20003ea0

080146a4 <__malloc_unlock>:
 80146a4:	4801      	ldr	r0, [pc, #4]	@ (80146ac <__malloc_unlock+0x8>)
 80146a6:	f7ff b8ad 	b.w	8013804 <__retarget_lock_release_recursive>
 80146aa:	bf00      	nop
 80146ac:	20003ea0 	.word	0x20003ea0

080146b0 <_Balloc>:
 80146b0:	b570      	push	{r4, r5, r6, lr}
 80146b2:	69c6      	ldr	r6, [r0, #28]
 80146b4:	4604      	mov	r4, r0
 80146b6:	460d      	mov	r5, r1
 80146b8:	b976      	cbnz	r6, 80146d8 <_Balloc+0x28>
 80146ba:	2010      	movs	r0, #16
 80146bc:	f7ff ff42 	bl	8014544 <malloc>
 80146c0:	4602      	mov	r2, r0
 80146c2:	61e0      	str	r0, [r4, #28]
 80146c4:	b920      	cbnz	r0, 80146d0 <_Balloc+0x20>
 80146c6:	4b18      	ldr	r3, [pc, #96]	@ (8014728 <_Balloc+0x78>)
 80146c8:	4818      	ldr	r0, [pc, #96]	@ (801472c <_Balloc+0x7c>)
 80146ca:	216b      	movs	r1, #107	@ 0x6b
 80146cc:	f001 ff44 	bl	8016558 <__assert_func>
 80146d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80146d4:	6006      	str	r6, [r0, #0]
 80146d6:	60c6      	str	r6, [r0, #12]
 80146d8:	69e6      	ldr	r6, [r4, #28]
 80146da:	68f3      	ldr	r3, [r6, #12]
 80146dc:	b183      	cbz	r3, 8014700 <_Balloc+0x50>
 80146de:	69e3      	ldr	r3, [r4, #28]
 80146e0:	68db      	ldr	r3, [r3, #12]
 80146e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80146e6:	b9b8      	cbnz	r0, 8014718 <_Balloc+0x68>
 80146e8:	2101      	movs	r1, #1
 80146ea:	fa01 f605 	lsl.w	r6, r1, r5
 80146ee:	1d72      	adds	r2, r6, #5
 80146f0:	0092      	lsls	r2, r2, #2
 80146f2:	4620      	mov	r0, r4
 80146f4:	f001 ff4e 	bl	8016594 <_calloc_r>
 80146f8:	b160      	cbz	r0, 8014714 <_Balloc+0x64>
 80146fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80146fe:	e00e      	b.n	801471e <_Balloc+0x6e>
 8014700:	2221      	movs	r2, #33	@ 0x21
 8014702:	2104      	movs	r1, #4
 8014704:	4620      	mov	r0, r4
 8014706:	f001 ff45 	bl	8016594 <_calloc_r>
 801470a:	69e3      	ldr	r3, [r4, #28]
 801470c:	60f0      	str	r0, [r6, #12]
 801470e:	68db      	ldr	r3, [r3, #12]
 8014710:	2b00      	cmp	r3, #0
 8014712:	d1e4      	bne.n	80146de <_Balloc+0x2e>
 8014714:	2000      	movs	r0, #0
 8014716:	bd70      	pop	{r4, r5, r6, pc}
 8014718:	6802      	ldr	r2, [r0, #0]
 801471a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801471e:	2300      	movs	r3, #0
 8014720:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014724:	e7f7      	b.n	8014716 <_Balloc+0x66>
 8014726:	bf00      	nop
 8014728:	08024aaa 	.word	0x08024aaa
 801472c:	08024b2a 	.word	0x08024b2a

08014730 <_Bfree>:
 8014730:	b570      	push	{r4, r5, r6, lr}
 8014732:	69c6      	ldr	r6, [r0, #28]
 8014734:	4605      	mov	r5, r0
 8014736:	460c      	mov	r4, r1
 8014738:	b976      	cbnz	r6, 8014758 <_Bfree+0x28>
 801473a:	2010      	movs	r0, #16
 801473c:	f7ff ff02 	bl	8014544 <malloc>
 8014740:	4602      	mov	r2, r0
 8014742:	61e8      	str	r0, [r5, #28]
 8014744:	b920      	cbnz	r0, 8014750 <_Bfree+0x20>
 8014746:	4b09      	ldr	r3, [pc, #36]	@ (801476c <_Bfree+0x3c>)
 8014748:	4809      	ldr	r0, [pc, #36]	@ (8014770 <_Bfree+0x40>)
 801474a:	218f      	movs	r1, #143	@ 0x8f
 801474c:	f001 ff04 	bl	8016558 <__assert_func>
 8014750:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014754:	6006      	str	r6, [r0, #0]
 8014756:	60c6      	str	r6, [r0, #12]
 8014758:	b13c      	cbz	r4, 801476a <_Bfree+0x3a>
 801475a:	69eb      	ldr	r3, [r5, #28]
 801475c:	6862      	ldr	r2, [r4, #4]
 801475e:	68db      	ldr	r3, [r3, #12]
 8014760:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014764:	6021      	str	r1, [r4, #0]
 8014766:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801476a:	bd70      	pop	{r4, r5, r6, pc}
 801476c:	08024aaa 	.word	0x08024aaa
 8014770:	08024b2a 	.word	0x08024b2a

08014774 <__multadd>:
 8014774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014778:	690d      	ldr	r5, [r1, #16]
 801477a:	4607      	mov	r7, r0
 801477c:	460c      	mov	r4, r1
 801477e:	461e      	mov	r6, r3
 8014780:	f101 0c14 	add.w	ip, r1, #20
 8014784:	2000      	movs	r0, #0
 8014786:	f8dc 3000 	ldr.w	r3, [ip]
 801478a:	b299      	uxth	r1, r3
 801478c:	fb02 6101 	mla	r1, r2, r1, r6
 8014790:	0c1e      	lsrs	r6, r3, #16
 8014792:	0c0b      	lsrs	r3, r1, #16
 8014794:	fb02 3306 	mla	r3, r2, r6, r3
 8014798:	b289      	uxth	r1, r1
 801479a:	3001      	adds	r0, #1
 801479c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80147a0:	4285      	cmp	r5, r0
 80147a2:	f84c 1b04 	str.w	r1, [ip], #4
 80147a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80147aa:	dcec      	bgt.n	8014786 <__multadd+0x12>
 80147ac:	b30e      	cbz	r6, 80147f2 <__multadd+0x7e>
 80147ae:	68a3      	ldr	r3, [r4, #8]
 80147b0:	42ab      	cmp	r3, r5
 80147b2:	dc19      	bgt.n	80147e8 <__multadd+0x74>
 80147b4:	6861      	ldr	r1, [r4, #4]
 80147b6:	4638      	mov	r0, r7
 80147b8:	3101      	adds	r1, #1
 80147ba:	f7ff ff79 	bl	80146b0 <_Balloc>
 80147be:	4680      	mov	r8, r0
 80147c0:	b928      	cbnz	r0, 80147ce <__multadd+0x5a>
 80147c2:	4602      	mov	r2, r0
 80147c4:	4b0c      	ldr	r3, [pc, #48]	@ (80147f8 <__multadd+0x84>)
 80147c6:	480d      	ldr	r0, [pc, #52]	@ (80147fc <__multadd+0x88>)
 80147c8:	21ba      	movs	r1, #186	@ 0xba
 80147ca:	f001 fec5 	bl	8016558 <__assert_func>
 80147ce:	6922      	ldr	r2, [r4, #16]
 80147d0:	3202      	adds	r2, #2
 80147d2:	f104 010c 	add.w	r1, r4, #12
 80147d6:	0092      	lsls	r2, r2, #2
 80147d8:	300c      	adds	r0, #12
 80147da:	f001 fea5 	bl	8016528 <memcpy>
 80147de:	4621      	mov	r1, r4
 80147e0:	4638      	mov	r0, r7
 80147e2:	f7ff ffa5 	bl	8014730 <_Bfree>
 80147e6:	4644      	mov	r4, r8
 80147e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80147ec:	3501      	adds	r5, #1
 80147ee:	615e      	str	r6, [r3, #20]
 80147f0:	6125      	str	r5, [r4, #16]
 80147f2:	4620      	mov	r0, r4
 80147f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147f8:	08024b19 	.word	0x08024b19
 80147fc:	08024b2a 	.word	0x08024b2a

08014800 <__s2b>:
 8014800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014804:	460c      	mov	r4, r1
 8014806:	4615      	mov	r5, r2
 8014808:	461f      	mov	r7, r3
 801480a:	2209      	movs	r2, #9
 801480c:	3308      	adds	r3, #8
 801480e:	4606      	mov	r6, r0
 8014810:	fb93 f3f2 	sdiv	r3, r3, r2
 8014814:	2100      	movs	r1, #0
 8014816:	2201      	movs	r2, #1
 8014818:	429a      	cmp	r2, r3
 801481a:	db09      	blt.n	8014830 <__s2b+0x30>
 801481c:	4630      	mov	r0, r6
 801481e:	f7ff ff47 	bl	80146b0 <_Balloc>
 8014822:	b940      	cbnz	r0, 8014836 <__s2b+0x36>
 8014824:	4602      	mov	r2, r0
 8014826:	4b19      	ldr	r3, [pc, #100]	@ (801488c <__s2b+0x8c>)
 8014828:	4819      	ldr	r0, [pc, #100]	@ (8014890 <__s2b+0x90>)
 801482a:	21d3      	movs	r1, #211	@ 0xd3
 801482c:	f001 fe94 	bl	8016558 <__assert_func>
 8014830:	0052      	lsls	r2, r2, #1
 8014832:	3101      	adds	r1, #1
 8014834:	e7f0      	b.n	8014818 <__s2b+0x18>
 8014836:	9b08      	ldr	r3, [sp, #32]
 8014838:	6143      	str	r3, [r0, #20]
 801483a:	2d09      	cmp	r5, #9
 801483c:	f04f 0301 	mov.w	r3, #1
 8014840:	6103      	str	r3, [r0, #16]
 8014842:	dd16      	ble.n	8014872 <__s2b+0x72>
 8014844:	f104 0909 	add.w	r9, r4, #9
 8014848:	46c8      	mov	r8, r9
 801484a:	442c      	add	r4, r5
 801484c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8014850:	4601      	mov	r1, r0
 8014852:	3b30      	subs	r3, #48	@ 0x30
 8014854:	220a      	movs	r2, #10
 8014856:	4630      	mov	r0, r6
 8014858:	f7ff ff8c 	bl	8014774 <__multadd>
 801485c:	45a0      	cmp	r8, r4
 801485e:	d1f5      	bne.n	801484c <__s2b+0x4c>
 8014860:	f1a5 0408 	sub.w	r4, r5, #8
 8014864:	444c      	add	r4, r9
 8014866:	1b2d      	subs	r5, r5, r4
 8014868:	1963      	adds	r3, r4, r5
 801486a:	42bb      	cmp	r3, r7
 801486c:	db04      	blt.n	8014878 <__s2b+0x78>
 801486e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014872:	340a      	adds	r4, #10
 8014874:	2509      	movs	r5, #9
 8014876:	e7f6      	b.n	8014866 <__s2b+0x66>
 8014878:	f814 3b01 	ldrb.w	r3, [r4], #1
 801487c:	4601      	mov	r1, r0
 801487e:	3b30      	subs	r3, #48	@ 0x30
 8014880:	220a      	movs	r2, #10
 8014882:	4630      	mov	r0, r6
 8014884:	f7ff ff76 	bl	8014774 <__multadd>
 8014888:	e7ee      	b.n	8014868 <__s2b+0x68>
 801488a:	bf00      	nop
 801488c:	08024b19 	.word	0x08024b19
 8014890:	08024b2a 	.word	0x08024b2a

08014894 <__hi0bits>:
 8014894:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8014898:	4603      	mov	r3, r0
 801489a:	bf36      	itet	cc
 801489c:	0403      	lslcc	r3, r0, #16
 801489e:	2000      	movcs	r0, #0
 80148a0:	2010      	movcc	r0, #16
 80148a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80148a6:	bf3c      	itt	cc
 80148a8:	021b      	lslcc	r3, r3, #8
 80148aa:	3008      	addcc	r0, #8
 80148ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80148b0:	bf3c      	itt	cc
 80148b2:	011b      	lslcc	r3, r3, #4
 80148b4:	3004      	addcc	r0, #4
 80148b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80148ba:	bf3c      	itt	cc
 80148bc:	009b      	lslcc	r3, r3, #2
 80148be:	3002      	addcc	r0, #2
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	db05      	blt.n	80148d0 <__hi0bits+0x3c>
 80148c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80148c8:	f100 0001 	add.w	r0, r0, #1
 80148cc:	bf08      	it	eq
 80148ce:	2020      	moveq	r0, #32
 80148d0:	4770      	bx	lr

080148d2 <__lo0bits>:
 80148d2:	6803      	ldr	r3, [r0, #0]
 80148d4:	4602      	mov	r2, r0
 80148d6:	f013 0007 	ands.w	r0, r3, #7
 80148da:	d00b      	beq.n	80148f4 <__lo0bits+0x22>
 80148dc:	07d9      	lsls	r1, r3, #31
 80148de:	d421      	bmi.n	8014924 <__lo0bits+0x52>
 80148e0:	0798      	lsls	r0, r3, #30
 80148e2:	bf49      	itett	mi
 80148e4:	085b      	lsrmi	r3, r3, #1
 80148e6:	089b      	lsrpl	r3, r3, #2
 80148e8:	2001      	movmi	r0, #1
 80148ea:	6013      	strmi	r3, [r2, #0]
 80148ec:	bf5c      	itt	pl
 80148ee:	6013      	strpl	r3, [r2, #0]
 80148f0:	2002      	movpl	r0, #2
 80148f2:	4770      	bx	lr
 80148f4:	b299      	uxth	r1, r3
 80148f6:	b909      	cbnz	r1, 80148fc <__lo0bits+0x2a>
 80148f8:	0c1b      	lsrs	r3, r3, #16
 80148fa:	2010      	movs	r0, #16
 80148fc:	b2d9      	uxtb	r1, r3
 80148fe:	b909      	cbnz	r1, 8014904 <__lo0bits+0x32>
 8014900:	3008      	adds	r0, #8
 8014902:	0a1b      	lsrs	r3, r3, #8
 8014904:	0719      	lsls	r1, r3, #28
 8014906:	bf04      	itt	eq
 8014908:	091b      	lsreq	r3, r3, #4
 801490a:	3004      	addeq	r0, #4
 801490c:	0799      	lsls	r1, r3, #30
 801490e:	bf04      	itt	eq
 8014910:	089b      	lsreq	r3, r3, #2
 8014912:	3002      	addeq	r0, #2
 8014914:	07d9      	lsls	r1, r3, #31
 8014916:	d403      	bmi.n	8014920 <__lo0bits+0x4e>
 8014918:	085b      	lsrs	r3, r3, #1
 801491a:	f100 0001 	add.w	r0, r0, #1
 801491e:	d003      	beq.n	8014928 <__lo0bits+0x56>
 8014920:	6013      	str	r3, [r2, #0]
 8014922:	4770      	bx	lr
 8014924:	2000      	movs	r0, #0
 8014926:	4770      	bx	lr
 8014928:	2020      	movs	r0, #32
 801492a:	4770      	bx	lr

0801492c <__i2b>:
 801492c:	b510      	push	{r4, lr}
 801492e:	460c      	mov	r4, r1
 8014930:	2101      	movs	r1, #1
 8014932:	f7ff febd 	bl	80146b0 <_Balloc>
 8014936:	4602      	mov	r2, r0
 8014938:	b928      	cbnz	r0, 8014946 <__i2b+0x1a>
 801493a:	4b05      	ldr	r3, [pc, #20]	@ (8014950 <__i2b+0x24>)
 801493c:	4805      	ldr	r0, [pc, #20]	@ (8014954 <__i2b+0x28>)
 801493e:	f240 1145 	movw	r1, #325	@ 0x145
 8014942:	f001 fe09 	bl	8016558 <__assert_func>
 8014946:	2301      	movs	r3, #1
 8014948:	6144      	str	r4, [r0, #20]
 801494a:	6103      	str	r3, [r0, #16]
 801494c:	bd10      	pop	{r4, pc}
 801494e:	bf00      	nop
 8014950:	08024b19 	.word	0x08024b19
 8014954:	08024b2a 	.word	0x08024b2a

08014958 <__multiply>:
 8014958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801495c:	4614      	mov	r4, r2
 801495e:	690a      	ldr	r2, [r1, #16]
 8014960:	6923      	ldr	r3, [r4, #16]
 8014962:	429a      	cmp	r2, r3
 8014964:	bfa8      	it	ge
 8014966:	4623      	movge	r3, r4
 8014968:	460f      	mov	r7, r1
 801496a:	bfa4      	itt	ge
 801496c:	460c      	movge	r4, r1
 801496e:	461f      	movge	r7, r3
 8014970:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8014974:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8014978:	68a3      	ldr	r3, [r4, #8]
 801497a:	6861      	ldr	r1, [r4, #4]
 801497c:	eb0a 0609 	add.w	r6, sl, r9
 8014980:	42b3      	cmp	r3, r6
 8014982:	b085      	sub	sp, #20
 8014984:	bfb8      	it	lt
 8014986:	3101      	addlt	r1, #1
 8014988:	f7ff fe92 	bl	80146b0 <_Balloc>
 801498c:	b930      	cbnz	r0, 801499c <__multiply+0x44>
 801498e:	4602      	mov	r2, r0
 8014990:	4b44      	ldr	r3, [pc, #272]	@ (8014aa4 <__multiply+0x14c>)
 8014992:	4845      	ldr	r0, [pc, #276]	@ (8014aa8 <__multiply+0x150>)
 8014994:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8014998:	f001 fdde 	bl	8016558 <__assert_func>
 801499c:	f100 0514 	add.w	r5, r0, #20
 80149a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80149a4:	462b      	mov	r3, r5
 80149a6:	2200      	movs	r2, #0
 80149a8:	4543      	cmp	r3, r8
 80149aa:	d321      	bcc.n	80149f0 <__multiply+0x98>
 80149ac:	f107 0114 	add.w	r1, r7, #20
 80149b0:	f104 0214 	add.w	r2, r4, #20
 80149b4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80149b8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80149bc:	9302      	str	r3, [sp, #8]
 80149be:	1b13      	subs	r3, r2, r4
 80149c0:	3b15      	subs	r3, #21
 80149c2:	f023 0303 	bic.w	r3, r3, #3
 80149c6:	3304      	adds	r3, #4
 80149c8:	f104 0715 	add.w	r7, r4, #21
 80149cc:	42ba      	cmp	r2, r7
 80149ce:	bf38      	it	cc
 80149d0:	2304      	movcc	r3, #4
 80149d2:	9301      	str	r3, [sp, #4]
 80149d4:	9b02      	ldr	r3, [sp, #8]
 80149d6:	9103      	str	r1, [sp, #12]
 80149d8:	428b      	cmp	r3, r1
 80149da:	d80c      	bhi.n	80149f6 <__multiply+0x9e>
 80149dc:	2e00      	cmp	r6, #0
 80149de:	dd03      	ble.n	80149e8 <__multiply+0x90>
 80149e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d05b      	beq.n	8014aa0 <__multiply+0x148>
 80149e8:	6106      	str	r6, [r0, #16]
 80149ea:	b005      	add	sp, #20
 80149ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149f0:	f843 2b04 	str.w	r2, [r3], #4
 80149f4:	e7d8      	b.n	80149a8 <__multiply+0x50>
 80149f6:	f8b1 a000 	ldrh.w	sl, [r1]
 80149fa:	f1ba 0f00 	cmp.w	sl, #0
 80149fe:	d024      	beq.n	8014a4a <__multiply+0xf2>
 8014a00:	f104 0e14 	add.w	lr, r4, #20
 8014a04:	46a9      	mov	r9, r5
 8014a06:	f04f 0c00 	mov.w	ip, #0
 8014a0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014a0e:	f8d9 3000 	ldr.w	r3, [r9]
 8014a12:	fa1f fb87 	uxth.w	fp, r7
 8014a16:	b29b      	uxth	r3, r3
 8014a18:	fb0a 330b 	mla	r3, sl, fp, r3
 8014a1c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8014a20:	f8d9 7000 	ldr.w	r7, [r9]
 8014a24:	4463      	add	r3, ip
 8014a26:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014a2a:	fb0a c70b 	mla	r7, sl, fp, ip
 8014a2e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8014a32:	b29b      	uxth	r3, r3
 8014a34:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014a38:	4572      	cmp	r2, lr
 8014a3a:	f849 3b04 	str.w	r3, [r9], #4
 8014a3e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014a42:	d8e2      	bhi.n	8014a0a <__multiply+0xb2>
 8014a44:	9b01      	ldr	r3, [sp, #4]
 8014a46:	f845 c003 	str.w	ip, [r5, r3]
 8014a4a:	9b03      	ldr	r3, [sp, #12]
 8014a4c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014a50:	3104      	adds	r1, #4
 8014a52:	f1b9 0f00 	cmp.w	r9, #0
 8014a56:	d021      	beq.n	8014a9c <__multiply+0x144>
 8014a58:	682b      	ldr	r3, [r5, #0]
 8014a5a:	f104 0c14 	add.w	ip, r4, #20
 8014a5e:	46ae      	mov	lr, r5
 8014a60:	f04f 0a00 	mov.w	sl, #0
 8014a64:	f8bc b000 	ldrh.w	fp, [ip]
 8014a68:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8014a6c:	fb09 770b 	mla	r7, r9, fp, r7
 8014a70:	4457      	add	r7, sl
 8014a72:	b29b      	uxth	r3, r3
 8014a74:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014a78:	f84e 3b04 	str.w	r3, [lr], #4
 8014a7c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014a80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014a84:	f8be 3000 	ldrh.w	r3, [lr]
 8014a88:	fb09 330a 	mla	r3, r9, sl, r3
 8014a8c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8014a90:	4562      	cmp	r2, ip
 8014a92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014a96:	d8e5      	bhi.n	8014a64 <__multiply+0x10c>
 8014a98:	9f01      	ldr	r7, [sp, #4]
 8014a9a:	51eb      	str	r3, [r5, r7]
 8014a9c:	3504      	adds	r5, #4
 8014a9e:	e799      	b.n	80149d4 <__multiply+0x7c>
 8014aa0:	3e01      	subs	r6, #1
 8014aa2:	e79b      	b.n	80149dc <__multiply+0x84>
 8014aa4:	08024b19 	.word	0x08024b19
 8014aa8:	08024b2a 	.word	0x08024b2a

08014aac <__pow5mult>:
 8014aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ab0:	4615      	mov	r5, r2
 8014ab2:	f012 0203 	ands.w	r2, r2, #3
 8014ab6:	4607      	mov	r7, r0
 8014ab8:	460e      	mov	r6, r1
 8014aba:	d007      	beq.n	8014acc <__pow5mult+0x20>
 8014abc:	4c25      	ldr	r4, [pc, #148]	@ (8014b54 <__pow5mult+0xa8>)
 8014abe:	3a01      	subs	r2, #1
 8014ac0:	2300      	movs	r3, #0
 8014ac2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014ac6:	f7ff fe55 	bl	8014774 <__multadd>
 8014aca:	4606      	mov	r6, r0
 8014acc:	10ad      	asrs	r5, r5, #2
 8014ace:	d03d      	beq.n	8014b4c <__pow5mult+0xa0>
 8014ad0:	69fc      	ldr	r4, [r7, #28]
 8014ad2:	b97c      	cbnz	r4, 8014af4 <__pow5mult+0x48>
 8014ad4:	2010      	movs	r0, #16
 8014ad6:	f7ff fd35 	bl	8014544 <malloc>
 8014ada:	4602      	mov	r2, r0
 8014adc:	61f8      	str	r0, [r7, #28]
 8014ade:	b928      	cbnz	r0, 8014aec <__pow5mult+0x40>
 8014ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8014b58 <__pow5mult+0xac>)
 8014ae2:	481e      	ldr	r0, [pc, #120]	@ (8014b5c <__pow5mult+0xb0>)
 8014ae4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8014ae8:	f001 fd36 	bl	8016558 <__assert_func>
 8014aec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014af0:	6004      	str	r4, [r0, #0]
 8014af2:	60c4      	str	r4, [r0, #12]
 8014af4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8014af8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014afc:	b94c      	cbnz	r4, 8014b12 <__pow5mult+0x66>
 8014afe:	f240 2171 	movw	r1, #625	@ 0x271
 8014b02:	4638      	mov	r0, r7
 8014b04:	f7ff ff12 	bl	801492c <__i2b>
 8014b08:	2300      	movs	r3, #0
 8014b0a:	f8c8 0008 	str.w	r0, [r8, #8]
 8014b0e:	4604      	mov	r4, r0
 8014b10:	6003      	str	r3, [r0, #0]
 8014b12:	f04f 0900 	mov.w	r9, #0
 8014b16:	07eb      	lsls	r3, r5, #31
 8014b18:	d50a      	bpl.n	8014b30 <__pow5mult+0x84>
 8014b1a:	4631      	mov	r1, r6
 8014b1c:	4622      	mov	r2, r4
 8014b1e:	4638      	mov	r0, r7
 8014b20:	f7ff ff1a 	bl	8014958 <__multiply>
 8014b24:	4631      	mov	r1, r6
 8014b26:	4680      	mov	r8, r0
 8014b28:	4638      	mov	r0, r7
 8014b2a:	f7ff fe01 	bl	8014730 <_Bfree>
 8014b2e:	4646      	mov	r6, r8
 8014b30:	106d      	asrs	r5, r5, #1
 8014b32:	d00b      	beq.n	8014b4c <__pow5mult+0xa0>
 8014b34:	6820      	ldr	r0, [r4, #0]
 8014b36:	b938      	cbnz	r0, 8014b48 <__pow5mult+0x9c>
 8014b38:	4622      	mov	r2, r4
 8014b3a:	4621      	mov	r1, r4
 8014b3c:	4638      	mov	r0, r7
 8014b3e:	f7ff ff0b 	bl	8014958 <__multiply>
 8014b42:	6020      	str	r0, [r4, #0]
 8014b44:	f8c0 9000 	str.w	r9, [r0]
 8014b48:	4604      	mov	r4, r0
 8014b4a:	e7e4      	b.n	8014b16 <__pow5mult+0x6a>
 8014b4c:	4630      	mov	r0, r6
 8014b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b52:	bf00      	nop
 8014b54:	08024b84 	.word	0x08024b84
 8014b58:	08024aaa 	.word	0x08024aaa
 8014b5c:	08024b2a 	.word	0x08024b2a

08014b60 <__lshift>:
 8014b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b64:	460c      	mov	r4, r1
 8014b66:	6849      	ldr	r1, [r1, #4]
 8014b68:	6923      	ldr	r3, [r4, #16]
 8014b6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014b6e:	68a3      	ldr	r3, [r4, #8]
 8014b70:	4607      	mov	r7, r0
 8014b72:	4691      	mov	r9, r2
 8014b74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014b78:	f108 0601 	add.w	r6, r8, #1
 8014b7c:	42b3      	cmp	r3, r6
 8014b7e:	db0b      	blt.n	8014b98 <__lshift+0x38>
 8014b80:	4638      	mov	r0, r7
 8014b82:	f7ff fd95 	bl	80146b0 <_Balloc>
 8014b86:	4605      	mov	r5, r0
 8014b88:	b948      	cbnz	r0, 8014b9e <__lshift+0x3e>
 8014b8a:	4602      	mov	r2, r0
 8014b8c:	4b28      	ldr	r3, [pc, #160]	@ (8014c30 <__lshift+0xd0>)
 8014b8e:	4829      	ldr	r0, [pc, #164]	@ (8014c34 <__lshift+0xd4>)
 8014b90:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014b94:	f001 fce0 	bl	8016558 <__assert_func>
 8014b98:	3101      	adds	r1, #1
 8014b9a:	005b      	lsls	r3, r3, #1
 8014b9c:	e7ee      	b.n	8014b7c <__lshift+0x1c>
 8014b9e:	2300      	movs	r3, #0
 8014ba0:	f100 0114 	add.w	r1, r0, #20
 8014ba4:	f100 0210 	add.w	r2, r0, #16
 8014ba8:	4618      	mov	r0, r3
 8014baa:	4553      	cmp	r3, sl
 8014bac:	db33      	blt.n	8014c16 <__lshift+0xb6>
 8014bae:	6920      	ldr	r0, [r4, #16]
 8014bb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014bb4:	f104 0314 	add.w	r3, r4, #20
 8014bb8:	f019 091f 	ands.w	r9, r9, #31
 8014bbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014bc0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014bc4:	d02b      	beq.n	8014c1e <__lshift+0xbe>
 8014bc6:	f1c9 0e20 	rsb	lr, r9, #32
 8014bca:	468a      	mov	sl, r1
 8014bcc:	2200      	movs	r2, #0
 8014bce:	6818      	ldr	r0, [r3, #0]
 8014bd0:	fa00 f009 	lsl.w	r0, r0, r9
 8014bd4:	4310      	orrs	r0, r2
 8014bd6:	f84a 0b04 	str.w	r0, [sl], #4
 8014bda:	f853 2b04 	ldr.w	r2, [r3], #4
 8014bde:	459c      	cmp	ip, r3
 8014be0:	fa22 f20e 	lsr.w	r2, r2, lr
 8014be4:	d8f3      	bhi.n	8014bce <__lshift+0x6e>
 8014be6:	ebac 0304 	sub.w	r3, ip, r4
 8014bea:	3b15      	subs	r3, #21
 8014bec:	f023 0303 	bic.w	r3, r3, #3
 8014bf0:	3304      	adds	r3, #4
 8014bf2:	f104 0015 	add.w	r0, r4, #21
 8014bf6:	4584      	cmp	ip, r0
 8014bf8:	bf38      	it	cc
 8014bfa:	2304      	movcc	r3, #4
 8014bfc:	50ca      	str	r2, [r1, r3]
 8014bfe:	b10a      	cbz	r2, 8014c04 <__lshift+0xa4>
 8014c00:	f108 0602 	add.w	r6, r8, #2
 8014c04:	3e01      	subs	r6, #1
 8014c06:	4638      	mov	r0, r7
 8014c08:	612e      	str	r6, [r5, #16]
 8014c0a:	4621      	mov	r1, r4
 8014c0c:	f7ff fd90 	bl	8014730 <_Bfree>
 8014c10:	4628      	mov	r0, r5
 8014c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c16:	f842 0f04 	str.w	r0, [r2, #4]!
 8014c1a:	3301      	adds	r3, #1
 8014c1c:	e7c5      	b.n	8014baa <__lshift+0x4a>
 8014c1e:	3904      	subs	r1, #4
 8014c20:	f853 2b04 	ldr.w	r2, [r3], #4
 8014c24:	f841 2f04 	str.w	r2, [r1, #4]!
 8014c28:	459c      	cmp	ip, r3
 8014c2a:	d8f9      	bhi.n	8014c20 <__lshift+0xc0>
 8014c2c:	e7ea      	b.n	8014c04 <__lshift+0xa4>
 8014c2e:	bf00      	nop
 8014c30:	08024b19 	.word	0x08024b19
 8014c34:	08024b2a 	.word	0x08024b2a

08014c38 <__mcmp>:
 8014c38:	690a      	ldr	r2, [r1, #16]
 8014c3a:	4603      	mov	r3, r0
 8014c3c:	6900      	ldr	r0, [r0, #16]
 8014c3e:	1a80      	subs	r0, r0, r2
 8014c40:	b530      	push	{r4, r5, lr}
 8014c42:	d10e      	bne.n	8014c62 <__mcmp+0x2a>
 8014c44:	3314      	adds	r3, #20
 8014c46:	3114      	adds	r1, #20
 8014c48:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014c4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014c50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014c54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014c58:	4295      	cmp	r5, r2
 8014c5a:	d003      	beq.n	8014c64 <__mcmp+0x2c>
 8014c5c:	d205      	bcs.n	8014c6a <__mcmp+0x32>
 8014c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8014c62:	bd30      	pop	{r4, r5, pc}
 8014c64:	42a3      	cmp	r3, r4
 8014c66:	d3f3      	bcc.n	8014c50 <__mcmp+0x18>
 8014c68:	e7fb      	b.n	8014c62 <__mcmp+0x2a>
 8014c6a:	2001      	movs	r0, #1
 8014c6c:	e7f9      	b.n	8014c62 <__mcmp+0x2a>
	...

08014c70 <__mdiff>:
 8014c70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c74:	4689      	mov	r9, r1
 8014c76:	4606      	mov	r6, r0
 8014c78:	4611      	mov	r1, r2
 8014c7a:	4648      	mov	r0, r9
 8014c7c:	4614      	mov	r4, r2
 8014c7e:	f7ff ffdb 	bl	8014c38 <__mcmp>
 8014c82:	1e05      	subs	r5, r0, #0
 8014c84:	d112      	bne.n	8014cac <__mdiff+0x3c>
 8014c86:	4629      	mov	r1, r5
 8014c88:	4630      	mov	r0, r6
 8014c8a:	f7ff fd11 	bl	80146b0 <_Balloc>
 8014c8e:	4602      	mov	r2, r0
 8014c90:	b928      	cbnz	r0, 8014c9e <__mdiff+0x2e>
 8014c92:	4b3f      	ldr	r3, [pc, #252]	@ (8014d90 <__mdiff+0x120>)
 8014c94:	f240 2137 	movw	r1, #567	@ 0x237
 8014c98:	483e      	ldr	r0, [pc, #248]	@ (8014d94 <__mdiff+0x124>)
 8014c9a:	f001 fc5d 	bl	8016558 <__assert_func>
 8014c9e:	2301      	movs	r3, #1
 8014ca0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014ca4:	4610      	mov	r0, r2
 8014ca6:	b003      	add	sp, #12
 8014ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cac:	bfbc      	itt	lt
 8014cae:	464b      	movlt	r3, r9
 8014cb0:	46a1      	movlt	r9, r4
 8014cb2:	4630      	mov	r0, r6
 8014cb4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014cb8:	bfba      	itte	lt
 8014cba:	461c      	movlt	r4, r3
 8014cbc:	2501      	movlt	r5, #1
 8014cbe:	2500      	movge	r5, #0
 8014cc0:	f7ff fcf6 	bl	80146b0 <_Balloc>
 8014cc4:	4602      	mov	r2, r0
 8014cc6:	b918      	cbnz	r0, 8014cd0 <__mdiff+0x60>
 8014cc8:	4b31      	ldr	r3, [pc, #196]	@ (8014d90 <__mdiff+0x120>)
 8014cca:	f240 2145 	movw	r1, #581	@ 0x245
 8014cce:	e7e3      	b.n	8014c98 <__mdiff+0x28>
 8014cd0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014cd4:	6926      	ldr	r6, [r4, #16]
 8014cd6:	60c5      	str	r5, [r0, #12]
 8014cd8:	f109 0310 	add.w	r3, r9, #16
 8014cdc:	f109 0514 	add.w	r5, r9, #20
 8014ce0:	f104 0e14 	add.w	lr, r4, #20
 8014ce4:	f100 0b14 	add.w	fp, r0, #20
 8014ce8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014cec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014cf0:	9301      	str	r3, [sp, #4]
 8014cf2:	46d9      	mov	r9, fp
 8014cf4:	f04f 0c00 	mov.w	ip, #0
 8014cf8:	9b01      	ldr	r3, [sp, #4]
 8014cfa:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014cfe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014d02:	9301      	str	r3, [sp, #4]
 8014d04:	fa1f f38a 	uxth.w	r3, sl
 8014d08:	4619      	mov	r1, r3
 8014d0a:	b283      	uxth	r3, r0
 8014d0c:	1acb      	subs	r3, r1, r3
 8014d0e:	0c00      	lsrs	r0, r0, #16
 8014d10:	4463      	add	r3, ip
 8014d12:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8014d16:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014d1a:	b29b      	uxth	r3, r3
 8014d1c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014d20:	4576      	cmp	r6, lr
 8014d22:	f849 3b04 	str.w	r3, [r9], #4
 8014d26:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014d2a:	d8e5      	bhi.n	8014cf8 <__mdiff+0x88>
 8014d2c:	1b33      	subs	r3, r6, r4
 8014d2e:	3b15      	subs	r3, #21
 8014d30:	f023 0303 	bic.w	r3, r3, #3
 8014d34:	3415      	adds	r4, #21
 8014d36:	3304      	adds	r3, #4
 8014d38:	42a6      	cmp	r6, r4
 8014d3a:	bf38      	it	cc
 8014d3c:	2304      	movcc	r3, #4
 8014d3e:	441d      	add	r5, r3
 8014d40:	445b      	add	r3, fp
 8014d42:	461e      	mov	r6, r3
 8014d44:	462c      	mov	r4, r5
 8014d46:	4544      	cmp	r4, r8
 8014d48:	d30e      	bcc.n	8014d68 <__mdiff+0xf8>
 8014d4a:	f108 0103 	add.w	r1, r8, #3
 8014d4e:	1b49      	subs	r1, r1, r5
 8014d50:	f021 0103 	bic.w	r1, r1, #3
 8014d54:	3d03      	subs	r5, #3
 8014d56:	45a8      	cmp	r8, r5
 8014d58:	bf38      	it	cc
 8014d5a:	2100      	movcc	r1, #0
 8014d5c:	440b      	add	r3, r1
 8014d5e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014d62:	b191      	cbz	r1, 8014d8a <__mdiff+0x11a>
 8014d64:	6117      	str	r7, [r2, #16]
 8014d66:	e79d      	b.n	8014ca4 <__mdiff+0x34>
 8014d68:	f854 1b04 	ldr.w	r1, [r4], #4
 8014d6c:	46e6      	mov	lr, ip
 8014d6e:	0c08      	lsrs	r0, r1, #16
 8014d70:	fa1c fc81 	uxtah	ip, ip, r1
 8014d74:	4471      	add	r1, lr
 8014d76:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8014d7a:	b289      	uxth	r1, r1
 8014d7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014d80:	f846 1b04 	str.w	r1, [r6], #4
 8014d84:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014d88:	e7dd      	b.n	8014d46 <__mdiff+0xd6>
 8014d8a:	3f01      	subs	r7, #1
 8014d8c:	e7e7      	b.n	8014d5e <__mdiff+0xee>
 8014d8e:	bf00      	nop
 8014d90:	08024b19 	.word	0x08024b19
 8014d94:	08024b2a 	.word	0x08024b2a

08014d98 <__ulp>:
 8014d98:	b082      	sub	sp, #8
 8014d9a:	ed8d 0b00 	vstr	d0, [sp]
 8014d9e:	9a01      	ldr	r2, [sp, #4]
 8014da0:	4b0f      	ldr	r3, [pc, #60]	@ (8014de0 <__ulp+0x48>)
 8014da2:	4013      	ands	r3, r2
 8014da4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	dc08      	bgt.n	8014dbe <__ulp+0x26>
 8014dac:	425b      	negs	r3, r3
 8014dae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8014db2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8014db6:	da04      	bge.n	8014dc2 <__ulp+0x2a>
 8014db8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8014dbc:	4113      	asrs	r3, r2
 8014dbe:	2200      	movs	r2, #0
 8014dc0:	e008      	b.n	8014dd4 <__ulp+0x3c>
 8014dc2:	f1a2 0314 	sub.w	r3, r2, #20
 8014dc6:	2b1e      	cmp	r3, #30
 8014dc8:	bfda      	itte	le
 8014dca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8014dce:	40da      	lsrle	r2, r3
 8014dd0:	2201      	movgt	r2, #1
 8014dd2:	2300      	movs	r3, #0
 8014dd4:	4619      	mov	r1, r3
 8014dd6:	4610      	mov	r0, r2
 8014dd8:	ec41 0b10 	vmov	d0, r0, r1
 8014ddc:	b002      	add	sp, #8
 8014dde:	4770      	bx	lr
 8014de0:	7ff00000 	.word	0x7ff00000

08014de4 <__b2d>:
 8014de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014de8:	6906      	ldr	r6, [r0, #16]
 8014dea:	f100 0814 	add.w	r8, r0, #20
 8014dee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8014df2:	1f37      	subs	r7, r6, #4
 8014df4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014df8:	4610      	mov	r0, r2
 8014dfa:	f7ff fd4b 	bl	8014894 <__hi0bits>
 8014dfe:	f1c0 0320 	rsb	r3, r0, #32
 8014e02:	280a      	cmp	r0, #10
 8014e04:	600b      	str	r3, [r1, #0]
 8014e06:	491b      	ldr	r1, [pc, #108]	@ (8014e74 <__b2d+0x90>)
 8014e08:	dc15      	bgt.n	8014e36 <__b2d+0x52>
 8014e0a:	f1c0 0c0b 	rsb	ip, r0, #11
 8014e0e:	fa22 f30c 	lsr.w	r3, r2, ip
 8014e12:	45b8      	cmp	r8, r7
 8014e14:	ea43 0501 	orr.w	r5, r3, r1
 8014e18:	bf34      	ite	cc
 8014e1a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014e1e:	2300      	movcs	r3, #0
 8014e20:	3015      	adds	r0, #21
 8014e22:	fa02 f000 	lsl.w	r0, r2, r0
 8014e26:	fa23 f30c 	lsr.w	r3, r3, ip
 8014e2a:	4303      	orrs	r3, r0
 8014e2c:	461c      	mov	r4, r3
 8014e2e:	ec45 4b10 	vmov	d0, r4, r5
 8014e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e36:	45b8      	cmp	r8, r7
 8014e38:	bf3a      	itte	cc
 8014e3a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014e3e:	f1a6 0708 	subcc.w	r7, r6, #8
 8014e42:	2300      	movcs	r3, #0
 8014e44:	380b      	subs	r0, #11
 8014e46:	d012      	beq.n	8014e6e <__b2d+0x8a>
 8014e48:	f1c0 0120 	rsb	r1, r0, #32
 8014e4c:	fa23 f401 	lsr.w	r4, r3, r1
 8014e50:	4082      	lsls	r2, r0
 8014e52:	4322      	orrs	r2, r4
 8014e54:	4547      	cmp	r7, r8
 8014e56:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8014e5a:	bf8c      	ite	hi
 8014e5c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8014e60:	2200      	movls	r2, #0
 8014e62:	4083      	lsls	r3, r0
 8014e64:	40ca      	lsrs	r2, r1
 8014e66:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8014e6a:	4313      	orrs	r3, r2
 8014e6c:	e7de      	b.n	8014e2c <__b2d+0x48>
 8014e6e:	ea42 0501 	orr.w	r5, r2, r1
 8014e72:	e7db      	b.n	8014e2c <__b2d+0x48>
 8014e74:	3ff00000 	.word	0x3ff00000

08014e78 <__d2b>:
 8014e78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014e7c:	460f      	mov	r7, r1
 8014e7e:	2101      	movs	r1, #1
 8014e80:	ec59 8b10 	vmov	r8, r9, d0
 8014e84:	4616      	mov	r6, r2
 8014e86:	f7ff fc13 	bl	80146b0 <_Balloc>
 8014e8a:	4604      	mov	r4, r0
 8014e8c:	b930      	cbnz	r0, 8014e9c <__d2b+0x24>
 8014e8e:	4602      	mov	r2, r0
 8014e90:	4b23      	ldr	r3, [pc, #140]	@ (8014f20 <__d2b+0xa8>)
 8014e92:	4824      	ldr	r0, [pc, #144]	@ (8014f24 <__d2b+0xac>)
 8014e94:	f240 310f 	movw	r1, #783	@ 0x30f
 8014e98:	f001 fb5e 	bl	8016558 <__assert_func>
 8014e9c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014ea0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014ea4:	b10d      	cbz	r5, 8014eaa <__d2b+0x32>
 8014ea6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014eaa:	9301      	str	r3, [sp, #4]
 8014eac:	f1b8 0300 	subs.w	r3, r8, #0
 8014eb0:	d023      	beq.n	8014efa <__d2b+0x82>
 8014eb2:	4668      	mov	r0, sp
 8014eb4:	9300      	str	r3, [sp, #0]
 8014eb6:	f7ff fd0c 	bl	80148d2 <__lo0bits>
 8014eba:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014ebe:	b1d0      	cbz	r0, 8014ef6 <__d2b+0x7e>
 8014ec0:	f1c0 0320 	rsb	r3, r0, #32
 8014ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8014ec8:	430b      	orrs	r3, r1
 8014eca:	40c2      	lsrs	r2, r0
 8014ecc:	6163      	str	r3, [r4, #20]
 8014ece:	9201      	str	r2, [sp, #4]
 8014ed0:	9b01      	ldr	r3, [sp, #4]
 8014ed2:	61a3      	str	r3, [r4, #24]
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	bf0c      	ite	eq
 8014ed8:	2201      	moveq	r2, #1
 8014eda:	2202      	movne	r2, #2
 8014edc:	6122      	str	r2, [r4, #16]
 8014ede:	b1a5      	cbz	r5, 8014f0a <__d2b+0x92>
 8014ee0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014ee4:	4405      	add	r5, r0
 8014ee6:	603d      	str	r5, [r7, #0]
 8014ee8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014eec:	6030      	str	r0, [r6, #0]
 8014eee:	4620      	mov	r0, r4
 8014ef0:	b003      	add	sp, #12
 8014ef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ef6:	6161      	str	r1, [r4, #20]
 8014ef8:	e7ea      	b.n	8014ed0 <__d2b+0x58>
 8014efa:	a801      	add	r0, sp, #4
 8014efc:	f7ff fce9 	bl	80148d2 <__lo0bits>
 8014f00:	9b01      	ldr	r3, [sp, #4]
 8014f02:	6163      	str	r3, [r4, #20]
 8014f04:	3020      	adds	r0, #32
 8014f06:	2201      	movs	r2, #1
 8014f08:	e7e8      	b.n	8014edc <__d2b+0x64>
 8014f0a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014f0e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8014f12:	6038      	str	r0, [r7, #0]
 8014f14:	6918      	ldr	r0, [r3, #16]
 8014f16:	f7ff fcbd 	bl	8014894 <__hi0bits>
 8014f1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014f1e:	e7e5      	b.n	8014eec <__d2b+0x74>
 8014f20:	08024b19 	.word	0x08024b19
 8014f24:	08024b2a 	.word	0x08024b2a

08014f28 <__ratio>:
 8014f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f2c:	b085      	sub	sp, #20
 8014f2e:	e9cd 1000 	strd	r1, r0, [sp]
 8014f32:	a902      	add	r1, sp, #8
 8014f34:	f7ff ff56 	bl	8014de4 <__b2d>
 8014f38:	9800      	ldr	r0, [sp, #0]
 8014f3a:	a903      	add	r1, sp, #12
 8014f3c:	ec55 4b10 	vmov	r4, r5, d0
 8014f40:	f7ff ff50 	bl	8014de4 <__b2d>
 8014f44:	9b01      	ldr	r3, [sp, #4]
 8014f46:	6919      	ldr	r1, [r3, #16]
 8014f48:	9b00      	ldr	r3, [sp, #0]
 8014f4a:	691b      	ldr	r3, [r3, #16]
 8014f4c:	1ac9      	subs	r1, r1, r3
 8014f4e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8014f52:	1a9b      	subs	r3, r3, r2
 8014f54:	ec5b ab10 	vmov	sl, fp, d0
 8014f58:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	bfce      	itee	gt
 8014f60:	462a      	movgt	r2, r5
 8014f62:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014f66:	465a      	movle	r2, fp
 8014f68:	462f      	mov	r7, r5
 8014f6a:	46d9      	mov	r9, fp
 8014f6c:	bfcc      	ite	gt
 8014f6e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8014f72:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8014f76:	464b      	mov	r3, r9
 8014f78:	4652      	mov	r2, sl
 8014f7a:	4620      	mov	r0, r4
 8014f7c:	4639      	mov	r1, r7
 8014f7e:	f7eb fc8d 	bl	800089c <__aeabi_ddiv>
 8014f82:	ec41 0b10 	vmov	d0, r0, r1
 8014f86:	b005      	add	sp, #20
 8014f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014f8c <__copybits>:
 8014f8c:	3901      	subs	r1, #1
 8014f8e:	b570      	push	{r4, r5, r6, lr}
 8014f90:	1149      	asrs	r1, r1, #5
 8014f92:	6914      	ldr	r4, [r2, #16]
 8014f94:	3101      	adds	r1, #1
 8014f96:	f102 0314 	add.w	r3, r2, #20
 8014f9a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014f9e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014fa2:	1f05      	subs	r5, r0, #4
 8014fa4:	42a3      	cmp	r3, r4
 8014fa6:	d30c      	bcc.n	8014fc2 <__copybits+0x36>
 8014fa8:	1aa3      	subs	r3, r4, r2
 8014faa:	3b11      	subs	r3, #17
 8014fac:	f023 0303 	bic.w	r3, r3, #3
 8014fb0:	3211      	adds	r2, #17
 8014fb2:	42a2      	cmp	r2, r4
 8014fb4:	bf88      	it	hi
 8014fb6:	2300      	movhi	r3, #0
 8014fb8:	4418      	add	r0, r3
 8014fba:	2300      	movs	r3, #0
 8014fbc:	4288      	cmp	r0, r1
 8014fbe:	d305      	bcc.n	8014fcc <__copybits+0x40>
 8014fc0:	bd70      	pop	{r4, r5, r6, pc}
 8014fc2:	f853 6b04 	ldr.w	r6, [r3], #4
 8014fc6:	f845 6f04 	str.w	r6, [r5, #4]!
 8014fca:	e7eb      	b.n	8014fa4 <__copybits+0x18>
 8014fcc:	f840 3b04 	str.w	r3, [r0], #4
 8014fd0:	e7f4      	b.n	8014fbc <__copybits+0x30>

08014fd2 <__any_on>:
 8014fd2:	f100 0214 	add.w	r2, r0, #20
 8014fd6:	6900      	ldr	r0, [r0, #16]
 8014fd8:	114b      	asrs	r3, r1, #5
 8014fda:	4298      	cmp	r0, r3
 8014fdc:	b510      	push	{r4, lr}
 8014fde:	db11      	blt.n	8015004 <__any_on+0x32>
 8014fe0:	dd0a      	ble.n	8014ff8 <__any_on+0x26>
 8014fe2:	f011 011f 	ands.w	r1, r1, #31
 8014fe6:	d007      	beq.n	8014ff8 <__any_on+0x26>
 8014fe8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014fec:	fa24 f001 	lsr.w	r0, r4, r1
 8014ff0:	fa00 f101 	lsl.w	r1, r0, r1
 8014ff4:	428c      	cmp	r4, r1
 8014ff6:	d10b      	bne.n	8015010 <__any_on+0x3e>
 8014ff8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014ffc:	4293      	cmp	r3, r2
 8014ffe:	d803      	bhi.n	8015008 <__any_on+0x36>
 8015000:	2000      	movs	r0, #0
 8015002:	bd10      	pop	{r4, pc}
 8015004:	4603      	mov	r3, r0
 8015006:	e7f7      	b.n	8014ff8 <__any_on+0x26>
 8015008:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801500c:	2900      	cmp	r1, #0
 801500e:	d0f5      	beq.n	8014ffc <__any_on+0x2a>
 8015010:	2001      	movs	r0, #1
 8015012:	e7f6      	b.n	8015002 <__any_on+0x30>

08015014 <sulp>:
 8015014:	b570      	push	{r4, r5, r6, lr}
 8015016:	4604      	mov	r4, r0
 8015018:	460d      	mov	r5, r1
 801501a:	ec45 4b10 	vmov	d0, r4, r5
 801501e:	4616      	mov	r6, r2
 8015020:	f7ff feba 	bl	8014d98 <__ulp>
 8015024:	ec51 0b10 	vmov	r0, r1, d0
 8015028:	b17e      	cbz	r6, 801504a <sulp+0x36>
 801502a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801502e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8015032:	2b00      	cmp	r3, #0
 8015034:	dd09      	ble.n	801504a <sulp+0x36>
 8015036:	051b      	lsls	r3, r3, #20
 8015038:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801503c:	2400      	movs	r4, #0
 801503e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8015042:	4622      	mov	r2, r4
 8015044:	462b      	mov	r3, r5
 8015046:	f7eb faff 	bl	8000648 <__aeabi_dmul>
 801504a:	ec41 0b10 	vmov	d0, r0, r1
 801504e:	bd70      	pop	{r4, r5, r6, pc}

08015050 <_strtod_l>:
 8015050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015054:	b09f      	sub	sp, #124	@ 0x7c
 8015056:	460c      	mov	r4, r1
 8015058:	9217      	str	r2, [sp, #92]	@ 0x5c
 801505a:	2200      	movs	r2, #0
 801505c:	921a      	str	r2, [sp, #104]	@ 0x68
 801505e:	9005      	str	r0, [sp, #20]
 8015060:	f04f 0a00 	mov.w	sl, #0
 8015064:	f04f 0b00 	mov.w	fp, #0
 8015068:	460a      	mov	r2, r1
 801506a:	9219      	str	r2, [sp, #100]	@ 0x64
 801506c:	7811      	ldrb	r1, [r2, #0]
 801506e:	292b      	cmp	r1, #43	@ 0x2b
 8015070:	d04a      	beq.n	8015108 <_strtod_l+0xb8>
 8015072:	d838      	bhi.n	80150e6 <_strtod_l+0x96>
 8015074:	290d      	cmp	r1, #13
 8015076:	d832      	bhi.n	80150de <_strtod_l+0x8e>
 8015078:	2908      	cmp	r1, #8
 801507a:	d832      	bhi.n	80150e2 <_strtod_l+0x92>
 801507c:	2900      	cmp	r1, #0
 801507e:	d03b      	beq.n	80150f8 <_strtod_l+0xa8>
 8015080:	2200      	movs	r2, #0
 8015082:	920b      	str	r2, [sp, #44]	@ 0x2c
 8015084:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8015086:	782a      	ldrb	r2, [r5, #0]
 8015088:	2a30      	cmp	r2, #48	@ 0x30
 801508a:	f040 80b3 	bne.w	80151f4 <_strtod_l+0x1a4>
 801508e:	786a      	ldrb	r2, [r5, #1]
 8015090:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8015094:	2a58      	cmp	r2, #88	@ 0x58
 8015096:	d16e      	bne.n	8015176 <_strtod_l+0x126>
 8015098:	9302      	str	r3, [sp, #8]
 801509a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801509c:	9301      	str	r3, [sp, #4]
 801509e:	ab1a      	add	r3, sp, #104	@ 0x68
 80150a0:	9300      	str	r3, [sp, #0]
 80150a2:	4a8e      	ldr	r2, [pc, #568]	@ (80152dc <_strtod_l+0x28c>)
 80150a4:	9805      	ldr	r0, [sp, #20]
 80150a6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80150a8:	a919      	add	r1, sp, #100	@ 0x64
 80150aa:	f001 faef 	bl	801668c <__gethex>
 80150ae:	f010 060f 	ands.w	r6, r0, #15
 80150b2:	4604      	mov	r4, r0
 80150b4:	d005      	beq.n	80150c2 <_strtod_l+0x72>
 80150b6:	2e06      	cmp	r6, #6
 80150b8:	d128      	bne.n	801510c <_strtod_l+0xbc>
 80150ba:	3501      	adds	r5, #1
 80150bc:	2300      	movs	r3, #0
 80150be:	9519      	str	r5, [sp, #100]	@ 0x64
 80150c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80150c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	f040 858e 	bne.w	8015be6 <_strtod_l+0xb96>
 80150ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80150cc:	b1cb      	cbz	r3, 8015102 <_strtod_l+0xb2>
 80150ce:	4652      	mov	r2, sl
 80150d0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80150d4:	ec43 2b10 	vmov	d0, r2, r3
 80150d8:	b01f      	add	sp, #124	@ 0x7c
 80150da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150de:	2920      	cmp	r1, #32
 80150e0:	d1ce      	bne.n	8015080 <_strtod_l+0x30>
 80150e2:	3201      	adds	r2, #1
 80150e4:	e7c1      	b.n	801506a <_strtod_l+0x1a>
 80150e6:	292d      	cmp	r1, #45	@ 0x2d
 80150e8:	d1ca      	bne.n	8015080 <_strtod_l+0x30>
 80150ea:	2101      	movs	r1, #1
 80150ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 80150ee:	1c51      	adds	r1, r2, #1
 80150f0:	9119      	str	r1, [sp, #100]	@ 0x64
 80150f2:	7852      	ldrb	r2, [r2, #1]
 80150f4:	2a00      	cmp	r2, #0
 80150f6:	d1c5      	bne.n	8015084 <_strtod_l+0x34>
 80150f8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80150fa:	9419      	str	r4, [sp, #100]	@ 0x64
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	f040 8570 	bne.w	8015be2 <_strtod_l+0xb92>
 8015102:	4652      	mov	r2, sl
 8015104:	465b      	mov	r3, fp
 8015106:	e7e5      	b.n	80150d4 <_strtod_l+0x84>
 8015108:	2100      	movs	r1, #0
 801510a:	e7ef      	b.n	80150ec <_strtod_l+0x9c>
 801510c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801510e:	b13a      	cbz	r2, 8015120 <_strtod_l+0xd0>
 8015110:	2135      	movs	r1, #53	@ 0x35
 8015112:	a81c      	add	r0, sp, #112	@ 0x70
 8015114:	f7ff ff3a 	bl	8014f8c <__copybits>
 8015118:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801511a:	9805      	ldr	r0, [sp, #20]
 801511c:	f7ff fb08 	bl	8014730 <_Bfree>
 8015120:	3e01      	subs	r6, #1
 8015122:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8015124:	2e04      	cmp	r6, #4
 8015126:	d806      	bhi.n	8015136 <_strtod_l+0xe6>
 8015128:	e8df f006 	tbb	[pc, r6]
 801512c:	201d0314 	.word	0x201d0314
 8015130:	14          	.byte	0x14
 8015131:	00          	.byte	0x00
 8015132:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8015136:	05e1      	lsls	r1, r4, #23
 8015138:	bf48      	it	mi
 801513a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801513e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015142:	0d1b      	lsrs	r3, r3, #20
 8015144:	051b      	lsls	r3, r3, #20
 8015146:	2b00      	cmp	r3, #0
 8015148:	d1bb      	bne.n	80150c2 <_strtod_l+0x72>
 801514a:	f7fe fb2f 	bl	80137ac <__errno>
 801514e:	2322      	movs	r3, #34	@ 0x22
 8015150:	6003      	str	r3, [r0, #0]
 8015152:	e7b6      	b.n	80150c2 <_strtod_l+0x72>
 8015154:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8015158:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801515c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8015160:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015164:	e7e7      	b.n	8015136 <_strtod_l+0xe6>
 8015166:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80152e4 <_strtod_l+0x294>
 801516a:	e7e4      	b.n	8015136 <_strtod_l+0xe6>
 801516c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8015170:	f04f 3aff 	mov.w	sl, #4294967295
 8015174:	e7df      	b.n	8015136 <_strtod_l+0xe6>
 8015176:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015178:	1c5a      	adds	r2, r3, #1
 801517a:	9219      	str	r2, [sp, #100]	@ 0x64
 801517c:	785b      	ldrb	r3, [r3, #1]
 801517e:	2b30      	cmp	r3, #48	@ 0x30
 8015180:	d0f9      	beq.n	8015176 <_strtod_l+0x126>
 8015182:	2b00      	cmp	r3, #0
 8015184:	d09d      	beq.n	80150c2 <_strtod_l+0x72>
 8015186:	2301      	movs	r3, #1
 8015188:	9309      	str	r3, [sp, #36]	@ 0x24
 801518a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801518c:	930c      	str	r3, [sp, #48]	@ 0x30
 801518e:	2300      	movs	r3, #0
 8015190:	9308      	str	r3, [sp, #32]
 8015192:	930a      	str	r3, [sp, #40]	@ 0x28
 8015194:	461f      	mov	r7, r3
 8015196:	220a      	movs	r2, #10
 8015198:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801519a:	7805      	ldrb	r5, [r0, #0]
 801519c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80151a0:	b2d9      	uxtb	r1, r3
 80151a2:	2909      	cmp	r1, #9
 80151a4:	d928      	bls.n	80151f8 <_strtod_l+0x1a8>
 80151a6:	494e      	ldr	r1, [pc, #312]	@ (80152e0 <_strtod_l+0x290>)
 80151a8:	2201      	movs	r2, #1
 80151aa:	f001 f979 	bl	80164a0 <strncmp>
 80151ae:	2800      	cmp	r0, #0
 80151b0:	d032      	beq.n	8015218 <_strtod_l+0x1c8>
 80151b2:	2000      	movs	r0, #0
 80151b4:	462a      	mov	r2, r5
 80151b6:	4681      	mov	r9, r0
 80151b8:	463d      	mov	r5, r7
 80151ba:	4603      	mov	r3, r0
 80151bc:	2a65      	cmp	r2, #101	@ 0x65
 80151be:	d001      	beq.n	80151c4 <_strtod_l+0x174>
 80151c0:	2a45      	cmp	r2, #69	@ 0x45
 80151c2:	d114      	bne.n	80151ee <_strtod_l+0x19e>
 80151c4:	b91d      	cbnz	r5, 80151ce <_strtod_l+0x17e>
 80151c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80151c8:	4302      	orrs	r2, r0
 80151ca:	d095      	beq.n	80150f8 <_strtod_l+0xa8>
 80151cc:	2500      	movs	r5, #0
 80151ce:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80151d0:	1c62      	adds	r2, r4, #1
 80151d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80151d4:	7862      	ldrb	r2, [r4, #1]
 80151d6:	2a2b      	cmp	r2, #43	@ 0x2b
 80151d8:	d077      	beq.n	80152ca <_strtod_l+0x27a>
 80151da:	2a2d      	cmp	r2, #45	@ 0x2d
 80151dc:	d07b      	beq.n	80152d6 <_strtod_l+0x286>
 80151de:	f04f 0c00 	mov.w	ip, #0
 80151e2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80151e6:	2909      	cmp	r1, #9
 80151e8:	f240 8082 	bls.w	80152f0 <_strtod_l+0x2a0>
 80151ec:	9419      	str	r4, [sp, #100]	@ 0x64
 80151ee:	f04f 0800 	mov.w	r8, #0
 80151f2:	e0a2      	b.n	801533a <_strtod_l+0x2ea>
 80151f4:	2300      	movs	r3, #0
 80151f6:	e7c7      	b.n	8015188 <_strtod_l+0x138>
 80151f8:	2f08      	cmp	r7, #8
 80151fa:	bfd5      	itete	le
 80151fc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80151fe:	9908      	ldrgt	r1, [sp, #32]
 8015200:	fb02 3301 	mlale	r3, r2, r1, r3
 8015204:	fb02 3301 	mlagt	r3, r2, r1, r3
 8015208:	f100 0001 	add.w	r0, r0, #1
 801520c:	bfd4      	ite	le
 801520e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8015210:	9308      	strgt	r3, [sp, #32]
 8015212:	3701      	adds	r7, #1
 8015214:	9019      	str	r0, [sp, #100]	@ 0x64
 8015216:	e7bf      	b.n	8015198 <_strtod_l+0x148>
 8015218:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801521a:	1c5a      	adds	r2, r3, #1
 801521c:	9219      	str	r2, [sp, #100]	@ 0x64
 801521e:	785a      	ldrb	r2, [r3, #1]
 8015220:	b37f      	cbz	r7, 8015282 <_strtod_l+0x232>
 8015222:	4681      	mov	r9, r0
 8015224:	463d      	mov	r5, r7
 8015226:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801522a:	2b09      	cmp	r3, #9
 801522c:	d912      	bls.n	8015254 <_strtod_l+0x204>
 801522e:	2301      	movs	r3, #1
 8015230:	e7c4      	b.n	80151bc <_strtod_l+0x16c>
 8015232:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015234:	1c5a      	adds	r2, r3, #1
 8015236:	9219      	str	r2, [sp, #100]	@ 0x64
 8015238:	785a      	ldrb	r2, [r3, #1]
 801523a:	3001      	adds	r0, #1
 801523c:	2a30      	cmp	r2, #48	@ 0x30
 801523e:	d0f8      	beq.n	8015232 <_strtod_l+0x1e2>
 8015240:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8015244:	2b08      	cmp	r3, #8
 8015246:	f200 84d3 	bhi.w	8015bf0 <_strtod_l+0xba0>
 801524a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801524c:	930c      	str	r3, [sp, #48]	@ 0x30
 801524e:	4681      	mov	r9, r0
 8015250:	2000      	movs	r0, #0
 8015252:	4605      	mov	r5, r0
 8015254:	3a30      	subs	r2, #48	@ 0x30
 8015256:	f100 0301 	add.w	r3, r0, #1
 801525a:	d02a      	beq.n	80152b2 <_strtod_l+0x262>
 801525c:	4499      	add	r9, r3
 801525e:	eb00 0c05 	add.w	ip, r0, r5
 8015262:	462b      	mov	r3, r5
 8015264:	210a      	movs	r1, #10
 8015266:	4563      	cmp	r3, ip
 8015268:	d10d      	bne.n	8015286 <_strtod_l+0x236>
 801526a:	1c69      	adds	r1, r5, #1
 801526c:	4401      	add	r1, r0
 801526e:	4428      	add	r0, r5
 8015270:	2808      	cmp	r0, #8
 8015272:	dc16      	bgt.n	80152a2 <_strtod_l+0x252>
 8015274:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8015276:	230a      	movs	r3, #10
 8015278:	fb03 2300 	mla	r3, r3, r0, r2
 801527c:	930a      	str	r3, [sp, #40]	@ 0x28
 801527e:	2300      	movs	r3, #0
 8015280:	e018      	b.n	80152b4 <_strtod_l+0x264>
 8015282:	4638      	mov	r0, r7
 8015284:	e7da      	b.n	801523c <_strtod_l+0x1ec>
 8015286:	2b08      	cmp	r3, #8
 8015288:	f103 0301 	add.w	r3, r3, #1
 801528c:	dc03      	bgt.n	8015296 <_strtod_l+0x246>
 801528e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8015290:	434e      	muls	r6, r1
 8015292:	960a      	str	r6, [sp, #40]	@ 0x28
 8015294:	e7e7      	b.n	8015266 <_strtod_l+0x216>
 8015296:	2b10      	cmp	r3, #16
 8015298:	bfde      	ittt	le
 801529a:	9e08      	ldrle	r6, [sp, #32]
 801529c:	434e      	mulle	r6, r1
 801529e:	9608      	strle	r6, [sp, #32]
 80152a0:	e7e1      	b.n	8015266 <_strtod_l+0x216>
 80152a2:	280f      	cmp	r0, #15
 80152a4:	dceb      	bgt.n	801527e <_strtod_l+0x22e>
 80152a6:	9808      	ldr	r0, [sp, #32]
 80152a8:	230a      	movs	r3, #10
 80152aa:	fb03 2300 	mla	r3, r3, r0, r2
 80152ae:	9308      	str	r3, [sp, #32]
 80152b0:	e7e5      	b.n	801527e <_strtod_l+0x22e>
 80152b2:	4629      	mov	r1, r5
 80152b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80152b6:	1c50      	adds	r0, r2, #1
 80152b8:	9019      	str	r0, [sp, #100]	@ 0x64
 80152ba:	7852      	ldrb	r2, [r2, #1]
 80152bc:	4618      	mov	r0, r3
 80152be:	460d      	mov	r5, r1
 80152c0:	e7b1      	b.n	8015226 <_strtod_l+0x1d6>
 80152c2:	f04f 0900 	mov.w	r9, #0
 80152c6:	2301      	movs	r3, #1
 80152c8:	e77d      	b.n	80151c6 <_strtod_l+0x176>
 80152ca:	f04f 0c00 	mov.w	ip, #0
 80152ce:	1ca2      	adds	r2, r4, #2
 80152d0:	9219      	str	r2, [sp, #100]	@ 0x64
 80152d2:	78a2      	ldrb	r2, [r4, #2]
 80152d4:	e785      	b.n	80151e2 <_strtod_l+0x192>
 80152d6:	f04f 0c01 	mov.w	ip, #1
 80152da:	e7f8      	b.n	80152ce <_strtod_l+0x27e>
 80152dc:	08024c98 	.word	0x08024c98
 80152e0:	08024c80 	.word	0x08024c80
 80152e4:	7ff00000 	.word	0x7ff00000
 80152e8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80152ea:	1c51      	adds	r1, r2, #1
 80152ec:	9119      	str	r1, [sp, #100]	@ 0x64
 80152ee:	7852      	ldrb	r2, [r2, #1]
 80152f0:	2a30      	cmp	r2, #48	@ 0x30
 80152f2:	d0f9      	beq.n	80152e8 <_strtod_l+0x298>
 80152f4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80152f8:	2908      	cmp	r1, #8
 80152fa:	f63f af78 	bhi.w	80151ee <_strtod_l+0x19e>
 80152fe:	3a30      	subs	r2, #48	@ 0x30
 8015300:	920e      	str	r2, [sp, #56]	@ 0x38
 8015302:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8015304:	920f      	str	r2, [sp, #60]	@ 0x3c
 8015306:	f04f 080a 	mov.w	r8, #10
 801530a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801530c:	1c56      	adds	r6, r2, #1
 801530e:	9619      	str	r6, [sp, #100]	@ 0x64
 8015310:	7852      	ldrb	r2, [r2, #1]
 8015312:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8015316:	f1be 0f09 	cmp.w	lr, #9
 801531a:	d939      	bls.n	8015390 <_strtod_l+0x340>
 801531c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801531e:	1a76      	subs	r6, r6, r1
 8015320:	2e08      	cmp	r6, #8
 8015322:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8015326:	dc03      	bgt.n	8015330 <_strtod_l+0x2e0>
 8015328:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801532a:	4588      	cmp	r8, r1
 801532c:	bfa8      	it	ge
 801532e:	4688      	movge	r8, r1
 8015330:	f1bc 0f00 	cmp.w	ip, #0
 8015334:	d001      	beq.n	801533a <_strtod_l+0x2ea>
 8015336:	f1c8 0800 	rsb	r8, r8, #0
 801533a:	2d00      	cmp	r5, #0
 801533c:	d14e      	bne.n	80153dc <_strtod_l+0x38c>
 801533e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015340:	4308      	orrs	r0, r1
 8015342:	f47f aebe 	bne.w	80150c2 <_strtod_l+0x72>
 8015346:	2b00      	cmp	r3, #0
 8015348:	f47f aed6 	bne.w	80150f8 <_strtod_l+0xa8>
 801534c:	2a69      	cmp	r2, #105	@ 0x69
 801534e:	d028      	beq.n	80153a2 <_strtod_l+0x352>
 8015350:	dc25      	bgt.n	801539e <_strtod_l+0x34e>
 8015352:	2a49      	cmp	r2, #73	@ 0x49
 8015354:	d025      	beq.n	80153a2 <_strtod_l+0x352>
 8015356:	2a4e      	cmp	r2, #78	@ 0x4e
 8015358:	f47f aece 	bne.w	80150f8 <_strtod_l+0xa8>
 801535c:	499b      	ldr	r1, [pc, #620]	@ (80155cc <_strtod_l+0x57c>)
 801535e:	a819      	add	r0, sp, #100	@ 0x64
 8015360:	f001 fbb6 	bl	8016ad0 <__match>
 8015364:	2800      	cmp	r0, #0
 8015366:	f43f aec7 	beq.w	80150f8 <_strtod_l+0xa8>
 801536a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801536c:	781b      	ldrb	r3, [r3, #0]
 801536e:	2b28      	cmp	r3, #40	@ 0x28
 8015370:	d12e      	bne.n	80153d0 <_strtod_l+0x380>
 8015372:	4997      	ldr	r1, [pc, #604]	@ (80155d0 <_strtod_l+0x580>)
 8015374:	aa1c      	add	r2, sp, #112	@ 0x70
 8015376:	a819      	add	r0, sp, #100	@ 0x64
 8015378:	f001 fbbe 	bl	8016af8 <__hexnan>
 801537c:	2805      	cmp	r0, #5
 801537e:	d127      	bne.n	80153d0 <_strtod_l+0x380>
 8015380:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015382:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8015386:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801538a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801538e:	e698      	b.n	80150c2 <_strtod_l+0x72>
 8015390:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8015392:	fb08 2101 	mla	r1, r8, r1, r2
 8015396:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801539a:	920e      	str	r2, [sp, #56]	@ 0x38
 801539c:	e7b5      	b.n	801530a <_strtod_l+0x2ba>
 801539e:	2a6e      	cmp	r2, #110	@ 0x6e
 80153a0:	e7da      	b.n	8015358 <_strtod_l+0x308>
 80153a2:	498c      	ldr	r1, [pc, #560]	@ (80155d4 <_strtod_l+0x584>)
 80153a4:	a819      	add	r0, sp, #100	@ 0x64
 80153a6:	f001 fb93 	bl	8016ad0 <__match>
 80153aa:	2800      	cmp	r0, #0
 80153ac:	f43f aea4 	beq.w	80150f8 <_strtod_l+0xa8>
 80153b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80153b2:	4989      	ldr	r1, [pc, #548]	@ (80155d8 <_strtod_l+0x588>)
 80153b4:	3b01      	subs	r3, #1
 80153b6:	a819      	add	r0, sp, #100	@ 0x64
 80153b8:	9319      	str	r3, [sp, #100]	@ 0x64
 80153ba:	f001 fb89 	bl	8016ad0 <__match>
 80153be:	b910      	cbnz	r0, 80153c6 <_strtod_l+0x376>
 80153c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80153c2:	3301      	adds	r3, #1
 80153c4:	9319      	str	r3, [sp, #100]	@ 0x64
 80153c6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80155e8 <_strtod_l+0x598>
 80153ca:	f04f 0a00 	mov.w	sl, #0
 80153ce:	e678      	b.n	80150c2 <_strtod_l+0x72>
 80153d0:	4882      	ldr	r0, [pc, #520]	@ (80155dc <_strtod_l+0x58c>)
 80153d2:	f001 f8b9 	bl	8016548 <nan>
 80153d6:	ec5b ab10 	vmov	sl, fp, d0
 80153da:	e672      	b.n	80150c2 <_strtod_l+0x72>
 80153dc:	eba8 0309 	sub.w	r3, r8, r9
 80153e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80153e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80153e4:	2f00      	cmp	r7, #0
 80153e6:	bf08      	it	eq
 80153e8:	462f      	moveq	r7, r5
 80153ea:	2d10      	cmp	r5, #16
 80153ec:	462c      	mov	r4, r5
 80153ee:	bfa8      	it	ge
 80153f0:	2410      	movge	r4, #16
 80153f2:	f7eb f8af 	bl	8000554 <__aeabi_ui2d>
 80153f6:	2d09      	cmp	r5, #9
 80153f8:	4682      	mov	sl, r0
 80153fa:	468b      	mov	fp, r1
 80153fc:	dc13      	bgt.n	8015426 <_strtod_l+0x3d6>
 80153fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015400:	2b00      	cmp	r3, #0
 8015402:	f43f ae5e 	beq.w	80150c2 <_strtod_l+0x72>
 8015406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015408:	dd78      	ble.n	80154fc <_strtod_l+0x4ac>
 801540a:	2b16      	cmp	r3, #22
 801540c:	dc5f      	bgt.n	80154ce <_strtod_l+0x47e>
 801540e:	4974      	ldr	r1, [pc, #464]	@ (80155e0 <_strtod_l+0x590>)
 8015410:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015414:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015418:	4652      	mov	r2, sl
 801541a:	465b      	mov	r3, fp
 801541c:	f7eb f914 	bl	8000648 <__aeabi_dmul>
 8015420:	4682      	mov	sl, r0
 8015422:	468b      	mov	fp, r1
 8015424:	e64d      	b.n	80150c2 <_strtod_l+0x72>
 8015426:	4b6e      	ldr	r3, [pc, #440]	@ (80155e0 <_strtod_l+0x590>)
 8015428:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801542c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8015430:	f7eb f90a 	bl	8000648 <__aeabi_dmul>
 8015434:	4682      	mov	sl, r0
 8015436:	9808      	ldr	r0, [sp, #32]
 8015438:	468b      	mov	fp, r1
 801543a:	f7eb f88b 	bl	8000554 <__aeabi_ui2d>
 801543e:	4602      	mov	r2, r0
 8015440:	460b      	mov	r3, r1
 8015442:	4650      	mov	r0, sl
 8015444:	4659      	mov	r1, fp
 8015446:	f7ea ff49 	bl	80002dc <__adddf3>
 801544a:	2d0f      	cmp	r5, #15
 801544c:	4682      	mov	sl, r0
 801544e:	468b      	mov	fp, r1
 8015450:	ddd5      	ble.n	80153fe <_strtod_l+0x3ae>
 8015452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015454:	1b2c      	subs	r4, r5, r4
 8015456:	441c      	add	r4, r3
 8015458:	2c00      	cmp	r4, #0
 801545a:	f340 8096 	ble.w	801558a <_strtod_l+0x53a>
 801545e:	f014 030f 	ands.w	r3, r4, #15
 8015462:	d00a      	beq.n	801547a <_strtod_l+0x42a>
 8015464:	495e      	ldr	r1, [pc, #376]	@ (80155e0 <_strtod_l+0x590>)
 8015466:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801546a:	4652      	mov	r2, sl
 801546c:	465b      	mov	r3, fp
 801546e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015472:	f7eb f8e9 	bl	8000648 <__aeabi_dmul>
 8015476:	4682      	mov	sl, r0
 8015478:	468b      	mov	fp, r1
 801547a:	f034 040f 	bics.w	r4, r4, #15
 801547e:	d073      	beq.n	8015568 <_strtod_l+0x518>
 8015480:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8015484:	dd48      	ble.n	8015518 <_strtod_l+0x4c8>
 8015486:	2400      	movs	r4, #0
 8015488:	46a0      	mov	r8, r4
 801548a:	940a      	str	r4, [sp, #40]	@ 0x28
 801548c:	46a1      	mov	r9, r4
 801548e:	9a05      	ldr	r2, [sp, #20]
 8015490:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80155e8 <_strtod_l+0x598>
 8015494:	2322      	movs	r3, #34	@ 0x22
 8015496:	6013      	str	r3, [r2, #0]
 8015498:	f04f 0a00 	mov.w	sl, #0
 801549c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801549e:	2b00      	cmp	r3, #0
 80154a0:	f43f ae0f 	beq.w	80150c2 <_strtod_l+0x72>
 80154a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80154a6:	9805      	ldr	r0, [sp, #20]
 80154a8:	f7ff f942 	bl	8014730 <_Bfree>
 80154ac:	9805      	ldr	r0, [sp, #20]
 80154ae:	4649      	mov	r1, r9
 80154b0:	f7ff f93e 	bl	8014730 <_Bfree>
 80154b4:	9805      	ldr	r0, [sp, #20]
 80154b6:	4641      	mov	r1, r8
 80154b8:	f7ff f93a 	bl	8014730 <_Bfree>
 80154bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80154be:	9805      	ldr	r0, [sp, #20]
 80154c0:	f7ff f936 	bl	8014730 <_Bfree>
 80154c4:	9805      	ldr	r0, [sp, #20]
 80154c6:	4621      	mov	r1, r4
 80154c8:	f7ff f932 	bl	8014730 <_Bfree>
 80154cc:	e5f9      	b.n	80150c2 <_strtod_l+0x72>
 80154ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80154d0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80154d4:	4293      	cmp	r3, r2
 80154d6:	dbbc      	blt.n	8015452 <_strtod_l+0x402>
 80154d8:	4c41      	ldr	r4, [pc, #260]	@ (80155e0 <_strtod_l+0x590>)
 80154da:	f1c5 050f 	rsb	r5, r5, #15
 80154de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80154e2:	4652      	mov	r2, sl
 80154e4:	465b      	mov	r3, fp
 80154e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80154ea:	f7eb f8ad 	bl	8000648 <__aeabi_dmul>
 80154ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80154f0:	1b5d      	subs	r5, r3, r5
 80154f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80154f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80154fa:	e78f      	b.n	801541c <_strtod_l+0x3cc>
 80154fc:	3316      	adds	r3, #22
 80154fe:	dba8      	blt.n	8015452 <_strtod_l+0x402>
 8015500:	4b37      	ldr	r3, [pc, #220]	@ (80155e0 <_strtod_l+0x590>)
 8015502:	eba9 0808 	sub.w	r8, r9, r8
 8015506:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801550a:	e9d8 2300 	ldrd	r2, r3, [r8]
 801550e:	4650      	mov	r0, sl
 8015510:	4659      	mov	r1, fp
 8015512:	f7eb f9c3 	bl	800089c <__aeabi_ddiv>
 8015516:	e783      	b.n	8015420 <_strtod_l+0x3d0>
 8015518:	4b32      	ldr	r3, [pc, #200]	@ (80155e4 <_strtod_l+0x594>)
 801551a:	9308      	str	r3, [sp, #32]
 801551c:	2300      	movs	r3, #0
 801551e:	1124      	asrs	r4, r4, #4
 8015520:	4650      	mov	r0, sl
 8015522:	4659      	mov	r1, fp
 8015524:	461e      	mov	r6, r3
 8015526:	2c01      	cmp	r4, #1
 8015528:	dc21      	bgt.n	801556e <_strtod_l+0x51e>
 801552a:	b10b      	cbz	r3, 8015530 <_strtod_l+0x4e0>
 801552c:	4682      	mov	sl, r0
 801552e:	468b      	mov	fp, r1
 8015530:	492c      	ldr	r1, [pc, #176]	@ (80155e4 <_strtod_l+0x594>)
 8015532:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8015536:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801553a:	4652      	mov	r2, sl
 801553c:	465b      	mov	r3, fp
 801553e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015542:	f7eb f881 	bl	8000648 <__aeabi_dmul>
 8015546:	4b28      	ldr	r3, [pc, #160]	@ (80155e8 <_strtod_l+0x598>)
 8015548:	460a      	mov	r2, r1
 801554a:	400b      	ands	r3, r1
 801554c:	4927      	ldr	r1, [pc, #156]	@ (80155ec <_strtod_l+0x59c>)
 801554e:	428b      	cmp	r3, r1
 8015550:	4682      	mov	sl, r0
 8015552:	d898      	bhi.n	8015486 <_strtod_l+0x436>
 8015554:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8015558:	428b      	cmp	r3, r1
 801555a:	bf86      	itte	hi
 801555c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80155f0 <_strtod_l+0x5a0>
 8015560:	f04f 3aff 	movhi.w	sl, #4294967295
 8015564:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8015568:	2300      	movs	r3, #0
 801556a:	9308      	str	r3, [sp, #32]
 801556c:	e07a      	b.n	8015664 <_strtod_l+0x614>
 801556e:	07e2      	lsls	r2, r4, #31
 8015570:	d505      	bpl.n	801557e <_strtod_l+0x52e>
 8015572:	9b08      	ldr	r3, [sp, #32]
 8015574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015578:	f7eb f866 	bl	8000648 <__aeabi_dmul>
 801557c:	2301      	movs	r3, #1
 801557e:	9a08      	ldr	r2, [sp, #32]
 8015580:	3208      	adds	r2, #8
 8015582:	3601      	adds	r6, #1
 8015584:	1064      	asrs	r4, r4, #1
 8015586:	9208      	str	r2, [sp, #32]
 8015588:	e7cd      	b.n	8015526 <_strtod_l+0x4d6>
 801558a:	d0ed      	beq.n	8015568 <_strtod_l+0x518>
 801558c:	4264      	negs	r4, r4
 801558e:	f014 020f 	ands.w	r2, r4, #15
 8015592:	d00a      	beq.n	80155aa <_strtod_l+0x55a>
 8015594:	4b12      	ldr	r3, [pc, #72]	@ (80155e0 <_strtod_l+0x590>)
 8015596:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801559a:	4650      	mov	r0, sl
 801559c:	4659      	mov	r1, fp
 801559e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155a2:	f7eb f97b 	bl	800089c <__aeabi_ddiv>
 80155a6:	4682      	mov	sl, r0
 80155a8:	468b      	mov	fp, r1
 80155aa:	1124      	asrs	r4, r4, #4
 80155ac:	d0dc      	beq.n	8015568 <_strtod_l+0x518>
 80155ae:	2c1f      	cmp	r4, #31
 80155b0:	dd20      	ble.n	80155f4 <_strtod_l+0x5a4>
 80155b2:	2400      	movs	r4, #0
 80155b4:	46a0      	mov	r8, r4
 80155b6:	940a      	str	r4, [sp, #40]	@ 0x28
 80155b8:	46a1      	mov	r9, r4
 80155ba:	9a05      	ldr	r2, [sp, #20]
 80155bc:	2322      	movs	r3, #34	@ 0x22
 80155be:	f04f 0a00 	mov.w	sl, #0
 80155c2:	f04f 0b00 	mov.w	fp, #0
 80155c6:	6013      	str	r3, [r2, #0]
 80155c8:	e768      	b.n	801549c <_strtod_l+0x44c>
 80155ca:	bf00      	nop
 80155cc:	08024a71 	.word	0x08024a71
 80155d0:	08024c84 	.word	0x08024c84
 80155d4:	08024a69 	.word	0x08024a69
 80155d8:	08024aa0 	.word	0x08024aa0
 80155dc:	08024e2d 	.word	0x08024e2d
 80155e0:	08024bb8 	.word	0x08024bb8
 80155e4:	08024b90 	.word	0x08024b90
 80155e8:	7ff00000 	.word	0x7ff00000
 80155ec:	7ca00000 	.word	0x7ca00000
 80155f0:	7fefffff 	.word	0x7fefffff
 80155f4:	f014 0310 	ands.w	r3, r4, #16
 80155f8:	bf18      	it	ne
 80155fa:	236a      	movne	r3, #106	@ 0x6a
 80155fc:	4ea9      	ldr	r6, [pc, #676]	@ (80158a4 <_strtod_l+0x854>)
 80155fe:	9308      	str	r3, [sp, #32]
 8015600:	4650      	mov	r0, sl
 8015602:	4659      	mov	r1, fp
 8015604:	2300      	movs	r3, #0
 8015606:	07e2      	lsls	r2, r4, #31
 8015608:	d504      	bpl.n	8015614 <_strtod_l+0x5c4>
 801560a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801560e:	f7eb f81b 	bl	8000648 <__aeabi_dmul>
 8015612:	2301      	movs	r3, #1
 8015614:	1064      	asrs	r4, r4, #1
 8015616:	f106 0608 	add.w	r6, r6, #8
 801561a:	d1f4      	bne.n	8015606 <_strtod_l+0x5b6>
 801561c:	b10b      	cbz	r3, 8015622 <_strtod_l+0x5d2>
 801561e:	4682      	mov	sl, r0
 8015620:	468b      	mov	fp, r1
 8015622:	9b08      	ldr	r3, [sp, #32]
 8015624:	b1b3      	cbz	r3, 8015654 <_strtod_l+0x604>
 8015626:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801562a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801562e:	2b00      	cmp	r3, #0
 8015630:	4659      	mov	r1, fp
 8015632:	dd0f      	ble.n	8015654 <_strtod_l+0x604>
 8015634:	2b1f      	cmp	r3, #31
 8015636:	dd55      	ble.n	80156e4 <_strtod_l+0x694>
 8015638:	2b34      	cmp	r3, #52	@ 0x34
 801563a:	bfde      	ittt	le
 801563c:	f04f 33ff 	movle.w	r3, #4294967295
 8015640:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8015644:	4093      	lslle	r3, r2
 8015646:	f04f 0a00 	mov.w	sl, #0
 801564a:	bfcc      	ite	gt
 801564c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8015650:	ea03 0b01 	andle.w	fp, r3, r1
 8015654:	2200      	movs	r2, #0
 8015656:	2300      	movs	r3, #0
 8015658:	4650      	mov	r0, sl
 801565a:	4659      	mov	r1, fp
 801565c:	f7eb fa5c 	bl	8000b18 <__aeabi_dcmpeq>
 8015660:	2800      	cmp	r0, #0
 8015662:	d1a6      	bne.n	80155b2 <_strtod_l+0x562>
 8015664:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015666:	9300      	str	r3, [sp, #0]
 8015668:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801566a:	9805      	ldr	r0, [sp, #20]
 801566c:	462b      	mov	r3, r5
 801566e:	463a      	mov	r2, r7
 8015670:	f7ff f8c6 	bl	8014800 <__s2b>
 8015674:	900a      	str	r0, [sp, #40]	@ 0x28
 8015676:	2800      	cmp	r0, #0
 8015678:	f43f af05 	beq.w	8015486 <_strtod_l+0x436>
 801567c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801567e:	2a00      	cmp	r2, #0
 8015680:	eba9 0308 	sub.w	r3, r9, r8
 8015684:	bfa8      	it	ge
 8015686:	2300      	movge	r3, #0
 8015688:	9312      	str	r3, [sp, #72]	@ 0x48
 801568a:	2400      	movs	r4, #0
 801568c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8015690:	9316      	str	r3, [sp, #88]	@ 0x58
 8015692:	46a0      	mov	r8, r4
 8015694:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015696:	9805      	ldr	r0, [sp, #20]
 8015698:	6859      	ldr	r1, [r3, #4]
 801569a:	f7ff f809 	bl	80146b0 <_Balloc>
 801569e:	4681      	mov	r9, r0
 80156a0:	2800      	cmp	r0, #0
 80156a2:	f43f aef4 	beq.w	801548e <_strtod_l+0x43e>
 80156a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80156a8:	691a      	ldr	r2, [r3, #16]
 80156aa:	3202      	adds	r2, #2
 80156ac:	f103 010c 	add.w	r1, r3, #12
 80156b0:	0092      	lsls	r2, r2, #2
 80156b2:	300c      	adds	r0, #12
 80156b4:	f000 ff38 	bl	8016528 <memcpy>
 80156b8:	ec4b ab10 	vmov	d0, sl, fp
 80156bc:	9805      	ldr	r0, [sp, #20]
 80156be:	aa1c      	add	r2, sp, #112	@ 0x70
 80156c0:	a91b      	add	r1, sp, #108	@ 0x6c
 80156c2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80156c6:	f7ff fbd7 	bl	8014e78 <__d2b>
 80156ca:	901a      	str	r0, [sp, #104]	@ 0x68
 80156cc:	2800      	cmp	r0, #0
 80156ce:	f43f aede 	beq.w	801548e <_strtod_l+0x43e>
 80156d2:	9805      	ldr	r0, [sp, #20]
 80156d4:	2101      	movs	r1, #1
 80156d6:	f7ff f929 	bl	801492c <__i2b>
 80156da:	4680      	mov	r8, r0
 80156dc:	b948      	cbnz	r0, 80156f2 <_strtod_l+0x6a2>
 80156de:	f04f 0800 	mov.w	r8, #0
 80156e2:	e6d4      	b.n	801548e <_strtod_l+0x43e>
 80156e4:	f04f 32ff 	mov.w	r2, #4294967295
 80156e8:	fa02 f303 	lsl.w	r3, r2, r3
 80156ec:	ea03 0a0a 	and.w	sl, r3, sl
 80156f0:	e7b0      	b.n	8015654 <_strtod_l+0x604>
 80156f2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80156f4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80156f6:	2d00      	cmp	r5, #0
 80156f8:	bfab      	itete	ge
 80156fa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80156fc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80156fe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8015700:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8015702:	bfac      	ite	ge
 8015704:	18ef      	addge	r7, r5, r3
 8015706:	1b5e      	sublt	r6, r3, r5
 8015708:	9b08      	ldr	r3, [sp, #32]
 801570a:	1aed      	subs	r5, r5, r3
 801570c:	4415      	add	r5, r2
 801570e:	4b66      	ldr	r3, [pc, #408]	@ (80158a8 <_strtod_l+0x858>)
 8015710:	3d01      	subs	r5, #1
 8015712:	429d      	cmp	r5, r3
 8015714:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8015718:	da50      	bge.n	80157bc <_strtod_l+0x76c>
 801571a:	1b5b      	subs	r3, r3, r5
 801571c:	2b1f      	cmp	r3, #31
 801571e:	eba2 0203 	sub.w	r2, r2, r3
 8015722:	f04f 0101 	mov.w	r1, #1
 8015726:	dc3d      	bgt.n	80157a4 <_strtod_l+0x754>
 8015728:	fa01 f303 	lsl.w	r3, r1, r3
 801572c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801572e:	2300      	movs	r3, #0
 8015730:	9310      	str	r3, [sp, #64]	@ 0x40
 8015732:	18bd      	adds	r5, r7, r2
 8015734:	9b08      	ldr	r3, [sp, #32]
 8015736:	42af      	cmp	r7, r5
 8015738:	4416      	add	r6, r2
 801573a:	441e      	add	r6, r3
 801573c:	463b      	mov	r3, r7
 801573e:	bfa8      	it	ge
 8015740:	462b      	movge	r3, r5
 8015742:	42b3      	cmp	r3, r6
 8015744:	bfa8      	it	ge
 8015746:	4633      	movge	r3, r6
 8015748:	2b00      	cmp	r3, #0
 801574a:	bfc2      	ittt	gt
 801574c:	1aed      	subgt	r5, r5, r3
 801574e:	1af6      	subgt	r6, r6, r3
 8015750:	1aff      	subgt	r7, r7, r3
 8015752:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015754:	2b00      	cmp	r3, #0
 8015756:	dd16      	ble.n	8015786 <_strtod_l+0x736>
 8015758:	4641      	mov	r1, r8
 801575a:	9805      	ldr	r0, [sp, #20]
 801575c:	461a      	mov	r2, r3
 801575e:	f7ff f9a5 	bl	8014aac <__pow5mult>
 8015762:	4680      	mov	r8, r0
 8015764:	2800      	cmp	r0, #0
 8015766:	d0ba      	beq.n	80156de <_strtod_l+0x68e>
 8015768:	4601      	mov	r1, r0
 801576a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801576c:	9805      	ldr	r0, [sp, #20]
 801576e:	f7ff f8f3 	bl	8014958 <__multiply>
 8015772:	900e      	str	r0, [sp, #56]	@ 0x38
 8015774:	2800      	cmp	r0, #0
 8015776:	f43f ae8a 	beq.w	801548e <_strtod_l+0x43e>
 801577a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801577c:	9805      	ldr	r0, [sp, #20]
 801577e:	f7fe ffd7 	bl	8014730 <_Bfree>
 8015782:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015784:	931a      	str	r3, [sp, #104]	@ 0x68
 8015786:	2d00      	cmp	r5, #0
 8015788:	dc1d      	bgt.n	80157c6 <_strtod_l+0x776>
 801578a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801578c:	2b00      	cmp	r3, #0
 801578e:	dd23      	ble.n	80157d8 <_strtod_l+0x788>
 8015790:	4649      	mov	r1, r9
 8015792:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8015794:	9805      	ldr	r0, [sp, #20]
 8015796:	f7ff f989 	bl	8014aac <__pow5mult>
 801579a:	4681      	mov	r9, r0
 801579c:	b9e0      	cbnz	r0, 80157d8 <_strtod_l+0x788>
 801579e:	f04f 0900 	mov.w	r9, #0
 80157a2:	e674      	b.n	801548e <_strtod_l+0x43e>
 80157a4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80157a8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80157ac:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80157b0:	35e2      	adds	r5, #226	@ 0xe2
 80157b2:	fa01 f305 	lsl.w	r3, r1, r5
 80157b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80157b8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80157ba:	e7ba      	b.n	8015732 <_strtod_l+0x6e2>
 80157bc:	2300      	movs	r3, #0
 80157be:	9310      	str	r3, [sp, #64]	@ 0x40
 80157c0:	2301      	movs	r3, #1
 80157c2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80157c4:	e7b5      	b.n	8015732 <_strtod_l+0x6e2>
 80157c6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80157c8:	9805      	ldr	r0, [sp, #20]
 80157ca:	462a      	mov	r2, r5
 80157cc:	f7ff f9c8 	bl	8014b60 <__lshift>
 80157d0:	901a      	str	r0, [sp, #104]	@ 0x68
 80157d2:	2800      	cmp	r0, #0
 80157d4:	d1d9      	bne.n	801578a <_strtod_l+0x73a>
 80157d6:	e65a      	b.n	801548e <_strtod_l+0x43e>
 80157d8:	2e00      	cmp	r6, #0
 80157da:	dd07      	ble.n	80157ec <_strtod_l+0x79c>
 80157dc:	4649      	mov	r1, r9
 80157de:	9805      	ldr	r0, [sp, #20]
 80157e0:	4632      	mov	r2, r6
 80157e2:	f7ff f9bd 	bl	8014b60 <__lshift>
 80157e6:	4681      	mov	r9, r0
 80157e8:	2800      	cmp	r0, #0
 80157ea:	d0d8      	beq.n	801579e <_strtod_l+0x74e>
 80157ec:	2f00      	cmp	r7, #0
 80157ee:	dd08      	ble.n	8015802 <_strtod_l+0x7b2>
 80157f0:	4641      	mov	r1, r8
 80157f2:	9805      	ldr	r0, [sp, #20]
 80157f4:	463a      	mov	r2, r7
 80157f6:	f7ff f9b3 	bl	8014b60 <__lshift>
 80157fa:	4680      	mov	r8, r0
 80157fc:	2800      	cmp	r0, #0
 80157fe:	f43f ae46 	beq.w	801548e <_strtod_l+0x43e>
 8015802:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015804:	9805      	ldr	r0, [sp, #20]
 8015806:	464a      	mov	r2, r9
 8015808:	f7ff fa32 	bl	8014c70 <__mdiff>
 801580c:	4604      	mov	r4, r0
 801580e:	2800      	cmp	r0, #0
 8015810:	f43f ae3d 	beq.w	801548e <_strtod_l+0x43e>
 8015814:	68c3      	ldr	r3, [r0, #12]
 8015816:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015818:	2300      	movs	r3, #0
 801581a:	60c3      	str	r3, [r0, #12]
 801581c:	4641      	mov	r1, r8
 801581e:	f7ff fa0b 	bl	8014c38 <__mcmp>
 8015822:	2800      	cmp	r0, #0
 8015824:	da46      	bge.n	80158b4 <_strtod_l+0x864>
 8015826:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015828:	ea53 030a 	orrs.w	r3, r3, sl
 801582c:	d16c      	bne.n	8015908 <_strtod_l+0x8b8>
 801582e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015832:	2b00      	cmp	r3, #0
 8015834:	d168      	bne.n	8015908 <_strtod_l+0x8b8>
 8015836:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801583a:	0d1b      	lsrs	r3, r3, #20
 801583c:	051b      	lsls	r3, r3, #20
 801583e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8015842:	d961      	bls.n	8015908 <_strtod_l+0x8b8>
 8015844:	6963      	ldr	r3, [r4, #20]
 8015846:	b913      	cbnz	r3, 801584e <_strtod_l+0x7fe>
 8015848:	6923      	ldr	r3, [r4, #16]
 801584a:	2b01      	cmp	r3, #1
 801584c:	dd5c      	ble.n	8015908 <_strtod_l+0x8b8>
 801584e:	4621      	mov	r1, r4
 8015850:	2201      	movs	r2, #1
 8015852:	9805      	ldr	r0, [sp, #20]
 8015854:	f7ff f984 	bl	8014b60 <__lshift>
 8015858:	4641      	mov	r1, r8
 801585a:	4604      	mov	r4, r0
 801585c:	f7ff f9ec 	bl	8014c38 <__mcmp>
 8015860:	2800      	cmp	r0, #0
 8015862:	dd51      	ble.n	8015908 <_strtod_l+0x8b8>
 8015864:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015868:	9a08      	ldr	r2, [sp, #32]
 801586a:	0d1b      	lsrs	r3, r3, #20
 801586c:	051b      	lsls	r3, r3, #20
 801586e:	2a00      	cmp	r2, #0
 8015870:	d06b      	beq.n	801594a <_strtod_l+0x8fa>
 8015872:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8015876:	d868      	bhi.n	801594a <_strtod_l+0x8fa>
 8015878:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801587c:	f67f ae9d 	bls.w	80155ba <_strtod_l+0x56a>
 8015880:	4b0a      	ldr	r3, [pc, #40]	@ (80158ac <_strtod_l+0x85c>)
 8015882:	4650      	mov	r0, sl
 8015884:	4659      	mov	r1, fp
 8015886:	2200      	movs	r2, #0
 8015888:	f7ea fede 	bl	8000648 <__aeabi_dmul>
 801588c:	4b08      	ldr	r3, [pc, #32]	@ (80158b0 <_strtod_l+0x860>)
 801588e:	400b      	ands	r3, r1
 8015890:	4682      	mov	sl, r0
 8015892:	468b      	mov	fp, r1
 8015894:	2b00      	cmp	r3, #0
 8015896:	f47f ae05 	bne.w	80154a4 <_strtod_l+0x454>
 801589a:	9a05      	ldr	r2, [sp, #20]
 801589c:	2322      	movs	r3, #34	@ 0x22
 801589e:	6013      	str	r3, [r2, #0]
 80158a0:	e600      	b.n	80154a4 <_strtod_l+0x454>
 80158a2:	bf00      	nop
 80158a4:	08024cb0 	.word	0x08024cb0
 80158a8:	fffffc02 	.word	0xfffffc02
 80158ac:	39500000 	.word	0x39500000
 80158b0:	7ff00000 	.word	0x7ff00000
 80158b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80158b8:	d165      	bne.n	8015986 <_strtod_l+0x936>
 80158ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80158bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80158c0:	b35a      	cbz	r2, 801591a <_strtod_l+0x8ca>
 80158c2:	4a9f      	ldr	r2, [pc, #636]	@ (8015b40 <_strtod_l+0xaf0>)
 80158c4:	4293      	cmp	r3, r2
 80158c6:	d12b      	bne.n	8015920 <_strtod_l+0x8d0>
 80158c8:	9b08      	ldr	r3, [sp, #32]
 80158ca:	4651      	mov	r1, sl
 80158cc:	b303      	cbz	r3, 8015910 <_strtod_l+0x8c0>
 80158ce:	4b9d      	ldr	r3, [pc, #628]	@ (8015b44 <_strtod_l+0xaf4>)
 80158d0:	465a      	mov	r2, fp
 80158d2:	4013      	ands	r3, r2
 80158d4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80158d8:	f04f 32ff 	mov.w	r2, #4294967295
 80158dc:	d81b      	bhi.n	8015916 <_strtod_l+0x8c6>
 80158de:	0d1b      	lsrs	r3, r3, #20
 80158e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80158e4:	fa02 f303 	lsl.w	r3, r2, r3
 80158e8:	4299      	cmp	r1, r3
 80158ea:	d119      	bne.n	8015920 <_strtod_l+0x8d0>
 80158ec:	4b96      	ldr	r3, [pc, #600]	@ (8015b48 <_strtod_l+0xaf8>)
 80158ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80158f0:	429a      	cmp	r2, r3
 80158f2:	d102      	bne.n	80158fa <_strtod_l+0x8aa>
 80158f4:	3101      	adds	r1, #1
 80158f6:	f43f adca 	beq.w	801548e <_strtod_l+0x43e>
 80158fa:	4b92      	ldr	r3, [pc, #584]	@ (8015b44 <_strtod_l+0xaf4>)
 80158fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80158fe:	401a      	ands	r2, r3
 8015900:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8015904:	f04f 0a00 	mov.w	sl, #0
 8015908:	9b08      	ldr	r3, [sp, #32]
 801590a:	2b00      	cmp	r3, #0
 801590c:	d1b8      	bne.n	8015880 <_strtod_l+0x830>
 801590e:	e5c9      	b.n	80154a4 <_strtod_l+0x454>
 8015910:	f04f 33ff 	mov.w	r3, #4294967295
 8015914:	e7e8      	b.n	80158e8 <_strtod_l+0x898>
 8015916:	4613      	mov	r3, r2
 8015918:	e7e6      	b.n	80158e8 <_strtod_l+0x898>
 801591a:	ea53 030a 	orrs.w	r3, r3, sl
 801591e:	d0a1      	beq.n	8015864 <_strtod_l+0x814>
 8015920:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015922:	b1db      	cbz	r3, 801595c <_strtod_l+0x90c>
 8015924:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015926:	4213      	tst	r3, r2
 8015928:	d0ee      	beq.n	8015908 <_strtod_l+0x8b8>
 801592a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801592c:	9a08      	ldr	r2, [sp, #32]
 801592e:	4650      	mov	r0, sl
 8015930:	4659      	mov	r1, fp
 8015932:	b1bb      	cbz	r3, 8015964 <_strtod_l+0x914>
 8015934:	f7ff fb6e 	bl	8015014 <sulp>
 8015938:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801593c:	ec53 2b10 	vmov	r2, r3, d0
 8015940:	f7ea fccc 	bl	80002dc <__adddf3>
 8015944:	4682      	mov	sl, r0
 8015946:	468b      	mov	fp, r1
 8015948:	e7de      	b.n	8015908 <_strtod_l+0x8b8>
 801594a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801594e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8015952:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8015956:	f04f 3aff 	mov.w	sl, #4294967295
 801595a:	e7d5      	b.n	8015908 <_strtod_l+0x8b8>
 801595c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801595e:	ea13 0f0a 	tst.w	r3, sl
 8015962:	e7e1      	b.n	8015928 <_strtod_l+0x8d8>
 8015964:	f7ff fb56 	bl	8015014 <sulp>
 8015968:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801596c:	ec53 2b10 	vmov	r2, r3, d0
 8015970:	f7ea fcb2 	bl	80002d8 <__aeabi_dsub>
 8015974:	2200      	movs	r2, #0
 8015976:	2300      	movs	r3, #0
 8015978:	4682      	mov	sl, r0
 801597a:	468b      	mov	fp, r1
 801597c:	f7eb f8cc 	bl	8000b18 <__aeabi_dcmpeq>
 8015980:	2800      	cmp	r0, #0
 8015982:	d0c1      	beq.n	8015908 <_strtod_l+0x8b8>
 8015984:	e619      	b.n	80155ba <_strtod_l+0x56a>
 8015986:	4641      	mov	r1, r8
 8015988:	4620      	mov	r0, r4
 801598a:	f7ff facd 	bl	8014f28 <__ratio>
 801598e:	ec57 6b10 	vmov	r6, r7, d0
 8015992:	2200      	movs	r2, #0
 8015994:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8015998:	4630      	mov	r0, r6
 801599a:	4639      	mov	r1, r7
 801599c:	f7eb f8d0 	bl	8000b40 <__aeabi_dcmple>
 80159a0:	2800      	cmp	r0, #0
 80159a2:	d06f      	beq.n	8015a84 <_strtod_l+0xa34>
 80159a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d17a      	bne.n	8015aa0 <_strtod_l+0xa50>
 80159aa:	f1ba 0f00 	cmp.w	sl, #0
 80159ae:	d158      	bne.n	8015a62 <_strtod_l+0xa12>
 80159b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80159b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d15a      	bne.n	8015a70 <_strtod_l+0xa20>
 80159ba:	4b64      	ldr	r3, [pc, #400]	@ (8015b4c <_strtod_l+0xafc>)
 80159bc:	2200      	movs	r2, #0
 80159be:	4630      	mov	r0, r6
 80159c0:	4639      	mov	r1, r7
 80159c2:	f7eb f8b3 	bl	8000b2c <__aeabi_dcmplt>
 80159c6:	2800      	cmp	r0, #0
 80159c8:	d159      	bne.n	8015a7e <_strtod_l+0xa2e>
 80159ca:	4630      	mov	r0, r6
 80159cc:	4639      	mov	r1, r7
 80159ce:	4b60      	ldr	r3, [pc, #384]	@ (8015b50 <_strtod_l+0xb00>)
 80159d0:	2200      	movs	r2, #0
 80159d2:	f7ea fe39 	bl	8000648 <__aeabi_dmul>
 80159d6:	4606      	mov	r6, r0
 80159d8:	460f      	mov	r7, r1
 80159da:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80159de:	9606      	str	r6, [sp, #24]
 80159e0:	9307      	str	r3, [sp, #28]
 80159e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80159e6:	4d57      	ldr	r5, [pc, #348]	@ (8015b44 <_strtod_l+0xaf4>)
 80159e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80159ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80159ee:	401d      	ands	r5, r3
 80159f0:	4b58      	ldr	r3, [pc, #352]	@ (8015b54 <_strtod_l+0xb04>)
 80159f2:	429d      	cmp	r5, r3
 80159f4:	f040 80b2 	bne.w	8015b5c <_strtod_l+0xb0c>
 80159f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80159fa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80159fe:	ec4b ab10 	vmov	d0, sl, fp
 8015a02:	f7ff f9c9 	bl	8014d98 <__ulp>
 8015a06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015a0a:	ec51 0b10 	vmov	r0, r1, d0
 8015a0e:	f7ea fe1b 	bl	8000648 <__aeabi_dmul>
 8015a12:	4652      	mov	r2, sl
 8015a14:	465b      	mov	r3, fp
 8015a16:	f7ea fc61 	bl	80002dc <__adddf3>
 8015a1a:	460b      	mov	r3, r1
 8015a1c:	4949      	ldr	r1, [pc, #292]	@ (8015b44 <_strtod_l+0xaf4>)
 8015a1e:	4a4e      	ldr	r2, [pc, #312]	@ (8015b58 <_strtod_l+0xb08>)
 8015a20:	4019      	ands	r1, r3
 8015a22:	4291      	cmp	r1, r2
 8015a24:	4682      	mov	sl, r0
 8015a26:	d942      	bls.n	8015aae <_strtod_l+0xa5e>
 8015a28:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015a2a:	4b47      	ldr	r3, [pc, #284]	@ (8015b48 <_strtod_l+0xaf8>)
 8015a2c:	429a      	cmp	r2, r3
 8015a2e:	d103      	bne.n	8015a38 <_strtod_l+0x9e8>
 8015a30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015a32:	3301      	adds	r3, #1
 8015a34:	f43f ad2b 	beq.w	801548e <_strtod_l+0x43e>
 8015a38:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8015b48 <_strtod_l+0xaf8>
 8015a3c:	f04f 3aff 	mov.w	sl, #4294967295
 8015a40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015a42:	9805      	ldr	r0, [sp, #20]
 8015a44:	f7fe fe74 	bl	8014730 <_Bfree>
 8015a48:	9805      	ldr	r0, [sp, #20]
 8015a4a:	4649      	mov	r1, r9
 8015a4c:	f7fe fe70 	bl	8014730 <_Bfree>
 8015a50:	9805      	ldr	r0, [sp, #20]
 8015a52:	4641      	mov	r1, r8
 8015a54:	f7fe fe6c 	bl	8014730 <_Bfree>
 8015a58:	9805      	ldr	r0, [sp, #20]
 8015a5a:	4621      	mov	r1, r4
 8015a5c:	f7fe fe68 	bl	8014730 <_Bfree>
 8015a60:	e618      	b.n	8015694 <_strtod_l+0x644>
 8015a62:	f1ba 0f01 	cmp.w	sl, #1
 8015a66:	d103      	bne.n	8015a70 <_strtod_l+0xa20>
 8015a68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	f43f ada5 	beq.w	80155ba <_strtod_l+0x56a>
 8015a70:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8015b20 <_strtod_l+0xad0>
 8015a74:	4f35      	ldr	r7, [pc, #212]	@ (8015b4c <_strtod_l+0xafc>)
 8015a76:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015a7a:	2600      	movs	r6, #0
 8015a7c:	e7b1      	b.n	80159e2 <_strtod_l+0x992>
 8015a7e:	4f34      	ldr	r7, [pc, #208]	@ (8015b50 <_strtod_l+0xb00>)
 8015a80:	2600      	movs	r6, #0
 8015a82:	e7aa      	b.n	80159da <_strtod_l+0x98a>
 8015a84:	4b32      	ldr	r3, [pc, #200]	@ (8015b50 <_strtod_l+0xb00>)
 8015a86:	4630      	mov	r0, r6
 8015a88:	4639      	mov	r1, r7
 8015a8a:	2200      	movs	r2, #0
 8015a8c:	f7ea fddc 	bl	8000648 <__aeabi_dmul>
 8015a90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015a92:	4606      	mov	r6, r0
 8015a94:	460f      	mov	r7, r1
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d09f      	beq.n	80159da <_strtod_l+0x98a>
 8015a9a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8015a9e:	e7a0      	b.n	80159e2 <_strtod_l+0x992>
 8015aa0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8015b28 <_strtod_l+0xad8>
 8015aa4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015aa8:	ec57 6b17 	vmov	r6, r7, d7
 8015aac:	e799      	b.n	80159e2 <_strtod_l+0x992>
 8015aae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8015ab2:	9b08      	ldr	r3, [sp, #32]
 8015ab4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d1c1      	bne.n	8015a40 <_strtod_l+0x9f0>
 8015abc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015ac0:	0d1b      	lsrs	r3, r3, #20
 8015ac2:	051b      	lsls	r3, r3, #20
 8015ac4:	429d      	cmp	r5, r3
 8015ac6:	d1bb      	bne.n	8015a40 <_strtod_l+0x9f0>
 8015ac8:	4630      	mov	r0, r6
 8015aca:	4639      	mov	r1, r7
 8015acc:	f7eb f91c 	bl	8000d08 <__aeabi_d2lz>
 8015ad0:	f7ea fd8c 	bl	80005ec <__aeabi_l2d>
 8015ad4:	4602      	mov	r2, r0
 8015ad6:	460b      	mov	r3, r1
 8015ad8:	4630      	mov	r0, r6
 8015ada:	4639      	mov	r1, r7
 8015adc:	f7ea fbfc 	bl	80002d8 <__aeabi_dsub>
 8015ae0:	460b      	mov	r3, r1
 8015ae2:	4602      	mov	r2, r0
 8015ae4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8015ae8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8015aec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015aee:	ea46 060a 	orr.w	r6, r6, sl
 8015af2:	431e      	orrs	r6, r3
 8015af4:	d06f      	beq.n	8015bd6 <_strtod_l+0xb86>
 8015af6:	a30e      	add	r3, pc, #56	@ (adr r3, 8015b30 <_strtod_l+0xae0>)
 8015af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015afc:	f7eb f816 	bl	8000b2c <__aeabi_dcmplt>
 8015b00:	2800      	cmp	r0, #0
 8015b02:	f47f accf 	bne.w	80154a4 <_strtod_l+0x454>
 8015b06:	a30c      	add	r3, pc, #48	@ (adr r3, 8015b38 <_strtod_l+0xae8>)
 8015b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015b10:	f7eb f82a 	bl	8000b68 <__aeabi_dcmpgt>
 8015b14:	2800      	cmp	r0, #0
 8015b16:	d093      	beq.n	8015a40 <_strtod_l+0x9f0>
 8015b18:	e4c4      	b.n	80154a4 <_strtod_l+0x454>
 8015b1a:	bf00      	nop
 8015b1c:	f3af 8000 	nop.w
 8015b20:	00000000 	.word	0x00000000
 8015b24:	bff00000 	.word	0xbff00000
 8015b28:	00000000 	.word	0x00000000
 8015b2c:	3ff00000 	.word	0x3ff00000
 8015b30:	94a03595 	.word	0x94a03595
 8015b34:	3fdfffff 	.word	0x3fdfffff
 8015b38:	35afe535 	.word	0x35afe535
 8015b3c:	3fe00000 	.word	0x3fe00000
 8015b40:	000fffff 	.word	0x000fffff
 8015b44:	7ff00000 	.word	0x7ff00000
 8015b48:	7fefffff 	.word	0x7fefffff
 8015b4c:	3ff00000 	.word	0x3ff00000
 8015b50:	3fe00000 	.word	0x3fe00000
 8015b54:	7fe00000 	.word	0x7fe00000
 8015b58:	7c9fffff 	.word	0x7c9fffff
 8015b5c:	9b08      	ldr	r3, [sp, #32]
 8015b5e:	b323      	cbz	r3, 8015baa <_strtod_l+0xb5a>
 8015b60:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8015b64:	d821      	bhi.n	8015baa <_strtod_l+0xb5a>
 8015b66:	a328      	add	r3, pc, #160	@ (adr r3, 8015c08 <_strtod_l+0xbb8>)
 8015b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b6c:	4630      	mov	r0, r6
 8015b6e:	4639      	mov	r1, r7
 8015b70:	f7ea ffe6 	bl	8000b40 <__aeabi_dcmple>
 8015b74:	b1a0      	cbz	r0, 8015ba0 <_strtod_l+0xb50>
 8015b76:	4639      	mov	r1, r7
 8015b78:	4630      	mov	r0, r6
 8015b7a:	f7eb f83d 	bl	8000bf8 <__aeabi_d2uiz>
 8015b7e:	2801      	cmp	r0, #1
 8015b80:	bf38      	it	cc
 8015b82:	2001      	movcc	r0, #1
 8015b84:	f7ea fce6 	bl	8000554 <__aeabi_ui2d>
 8015b88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015b8a:	4606      	mov	r6, r0
 8015b8c:	460f      	mov	r7, r1
 8015b8e:	b9fb      	cbnz	r3, 8015bd0 <_strtod_l+0xb80>
 8015b90:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015b94:	9014      	str	r0, [sp, #80]	@ 0x50
 8015b96:	9315      	str	r3, [sp, #84]	@ 0x54
 8015b98:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8015b9c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8015ba0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015ba2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8015ba6:	1b5b      	subs	r3, r3, r5
 8015ba8:	9311      	str	r3, [sp, #68]	@ 0x44
 8015baa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8015bae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8015bb2:	f7ff f8f1 	bl	8014d98 <__ulp>
 8015bb6:	4650      	mov	r0, sl
 8015bb8:	ec53 2b10 	vmov	r2, r3, d0
 8015bbc:	4659      	mov	r1, fp
 8015bbe:	f7ea fd43 	bl	8000648 <__aeabi_dmul>
 8015bc2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8015bc6:	f7ea fb89 	bl	80002dc <__adddf3>
 8015bca:	4682      	mov	sl, r0
 8015bcc:	468b      	mov	fp, r1
 8015bce:	e770      	b.n	8015ab2 <_strtod_l+0xa62>
 8015bd0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8015bd4:	e7e0      	b.n	8015b98 <_strtod_l+0xb48>
 8015bd6:	a30e      	add	r3, pc, #56	@ (adr r3, 8015c10 <_strtod_l+0xbc0>)
 8015bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bdc:	f7ea ffa6 	bl	8000b2c <__aeabi_dcmplt>
 8015be0:	e798      	b.n	8015b14 <_strtod_l+0xac4>
 8015be2:	2300      	movs	r3, #0
 8015be4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015be6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8015be8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015bea:	6013      	str	r3, [r2, #0]
 8015bec:	f7ff ba6d 	b.w	80150ca <_strtod_l+0x7a>
 8015bf0:	2a65      	cmp	r2, #101	@ 0x65
 8015bf2:	f43f ab66 	beq.w	80152c2 <_strtod_l+0x272>
 8015bf6:	2a45      	cmp	r2, #69	@ 0x45
 8015bf8:	f43f ab63 	beq.w	80152c2 <_strtod_l+0x272>
 8015bfc:	2301      	movs	r3, #1
 8015bfe:	f7ff bb9e 	b.w	801533e <_strtod_l+0x2ee>
 8015c02:	bf00      	nop
 8015c04:	f3af 8000 	nop.w
 8015c08:	ffc00000 	.word	0xffc00000
 8015c0c:	41dfffff 	.word	0x41dfffff
 8015c10:	94a03595 	.word	0x94a03595
 8015c14:	3fcfffff 	.word	0x3fcfffff

08015c18 <_strtod_r>:
 8015c18:	4b01      	ldr	r3, [pc, #4]	@ (8015c20 <_strtod_r+0x8>)
 8015c1a:	f7ff ba19 	b.w	8015050 <_strtod_l>
 8015c1e:	bf00      	nop
 8015c20:	20000228 	.word	0x20000228

08015c24 <_strtol_l.constprop.0>:
 8015c24:	2b24      	cmp	r3, #36	@ 0x24
 8015c26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c2a:	4686      	mov	lr, r0
 8015c2c:	4690      	mov	r8, r2
 8015c2e:	d801      	bhi.n	8015c34 <_strtol_l.constprop.0+0x10>
 8015c30:	2b01      	cmp	r3, #1
 8015c32:	d106      	bne.n	8015c42 <_strtol_l.constprop.0+0x1e>
 8015c34:	f7fd fdba 	bl	80137ac <__errno>
 8015c38:	2316      	movs	r3, #22
 8015c3a:	6003      	str	r3, [r0, #0]
 8015c3c:	2000      	movs	r0, #0
 8015c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c42:	4834      	ldr	r0, [pc, #208]	@ (8015d14 <_strtol_l.constprop.0+0xf0>)
 8015c44:	460d      	mov	r5, r1
 8015c46:	462a      	mov	r2, r5
 8015c48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015c4c:	5d06      	ldrb	r6, [r0, r4]
 8015c4e:	f016 0608 	ands.w	r6, r6, #8
 8015c52:	d1f8      	bne.n	8015c46 <_strtol_l.constprop.0+0x22>
 8015c54:	2c2d      	cmp	r4, #45	@ 0x2d
 8015c56:	d12d      	bne.n	8015cb4 <_strtol_l.constprop.0+0x90>
 8015c58:	782c      	ldrb	r4, [r5, #0]
 8015c5a:	2601      	movs	r6, #1
 8015c5c:	1c95      	adds	r5, r2, #2
 8015c5e:	f033 0210 	bics.w	r2, r3, #16
 8015c62:	d109      	bne.n	8015c78 <_strtol_l.constprop.0+0x54>
 8015c64:	2c30      	cmp	r4, #48	@ 0x30
 8015c66:	d12a      	bne.n	8015cbe <_strtol_l.constprop.0+0x9a>
 8015c68:	782a      	ldrb	r2, [r5, #0]
 8015c6a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8015c6e:	2a58      	cmp	r2, #88	@ 0x58
 8015c70:	d125      	bne.n	8015cbe <_strtol_l.constprop.0+0x9a>
 8015c72:	786c      	ldrb	r4, [r5, #1]
 8015c74:	2310      	movs	r3, #16
 8015c76:	3502      	adds	r5, #2
 8015c78:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8015c7c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015c80:	2200      	movs	r2, #0
 8015c82:	fbbc f9f3 	udiv	r9, ip, r3
 8015c86:	4610      	mov	r0, r2
 8015c88:	fb03 ca19 	mls	sl, r3, r9, ip
 8015c8c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8015c90:	2f09      	cmp	r7, #9
 8015c92:	d81b      	bhi.n	8015ccc <_strtol_l.constprop.0+0xa8>
 8015c94:	463c      	mov	r4, r7
 8015c96:	42a3      	cmp	r3, r4
 8015c98:	dd27      	ble.n	8015cea <_strtol_l.constprop.0+0xc6>
 8015c9a:	1c57      	adds	r7, r2, #1
 8015c9c:	d007      	beq.n	8015cae <_strtol_l.constprop.0+0x8a>
 8015c9e:	4581      	cmp	r9, r0
 8015ca0:	d320      	bcc.n	8015ce4 <_strtol_l.constprop.0+0xc0>
 8015ca2:	d101      	bne.n	8015ca8 <_strtol_l.constprop.0+0x84>
 8015ca4:	45a2      	cmp	sl, r4
 8015ca6:	db1d      	blt.n	8015ce4 <_strtol_l.constprop.0+0xc0>
 8015ca8:	fb00 4003 	mla	r0, r0, r3, r4
 8015cac:	2201      	movs	r2, #1
 8015cae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015cb2:	e7eb      	b.n	8015c8c <_strtol_l.constprop.0+0x68>
 8015cb4:	2c2b      	cmp	r4, #43	@ 0x2b
 8015cb6:	bf04      	itt	eq
 8015cb8:	782c      	ldrbeq	r4, [r5, #0]
 8015cba:	1c95      	addeq	r5, r2, #2
 8015cbc:	e7cf      	b.n	8015c5e <_strtol_l.constprop.0+0x3a>
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d1da      	bne.n	8015c78 <_strtol_l.constprop.0+0x54>
 8015cc2:	2c30      	cmp	r4, #48	@ 0x30
 8015cc4:	bf0c      	ite	eq
 8015cc6:	2308      	moveq	r3, #8
 8015cc8:	230a      	movne	r3, #10
 8015cca:	e7d5      	b.n	8015c78 <_strtol_l.constprop.0+0x54>
 8015ccc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8015cd0:	2f19      	cmp	r7, #25
 8015cd2:	d801      	bhi.n	8015cd8 <_strtol_l.constprop.0+0xb4>
 8015cd4:	3c37      	subs	r4, #55	@ 0x37
 8015cd6:	e7de      	b.n	8015c96 <_strtol_l.constprop.0+0x72>
 8015cd8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8015cdc:	2f19      	cmp	r7, #25
 8015cde:	d804      	bhi.n	8015cea <_strtol_l.constprop.0+0xc6>
 8015ce0:	3c57      	subs	r4, #87	@ 0x57
 8015ce2:	e7d8      	b.n	8015c96 <_strtol_l.constprop.0+0x72>
 8015ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8015ce8:	e7e1      	b.n	8015cae <_strtol_l.constprop.0+0x8a>
 8015cea:	1c53      	adds	r3, r2, #1
 8015cec:	d108      	bne.n	8015d00 <_strtol_l.constprop.0+0xdc>
 8015cee:	2322      	movs	r3, #34	@ 0x22
 8015cf0:	f8ce 3000 	str.w	r3, [lr]
 8015cf4:	4660      	mov	r0, ip
 8015cf6:	f1b8 0f00 	cmp.w	r8, #0
 8015cfa:	d0a0      	beq.n	8015c3e <_strtol_l.constprop.0+0x1a>
 8015cfc:	1e69      	subs	r1, r5, #1
 8015cfe:	e006      	b.n	8015d0e <_strtol_l.constprop.0+0xea>
 8015d00:	b106      	cbz	r6, 8015d04 <_strtol_l.constprop.0+0xe0>
 8015d02:	4240      	negs	r0, r0
 8015d04:	f1b8 0f00 	cmp.w	r8, #0
 8015d08:	d099      	beq.n	8015c3e <_strtol_l.constprop.0+0x1a>
 8015d0a:	2a00      	cmp	r2, #0
 8015d0c:	d1f6      	bne.n	8015cfc <_strtol_l.constprop.0+0xd8>
 8015d0e:	f8c8 1000 	str.w	r1, [r8]
 8015d12:	e794      	b.n	8015c3e <_strtol_l.constprop.0+0x1a>
 8015d14:	08024cd9 	.word	0x08024cd9

08015d18 <_strtol_r>:
 8015d18:	f7ff bf84 	b.w	8015c24 <_strtol_l.constprop.0>

08015d1c <__ssputs_r>:
 8015d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d20:	688e      	ldr	r6, [r1, #8]
 8015d22:	461f      	mov	r7, r3
 8015d24:	42be      	cmp	r6, r7
 8015d26:	680b      	ldr	r3, [r1, #0]
 8015d28:	4682      	mov	sl, r0
 8015d2a:	460c      	mov	r4, r1
 8015d2c:	4690      	mov	r8, r2
 8015d2e:	d82d      	bhi.n	8015d8c <__ssputs_r+0x70>
 8015d30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015d34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015d38:	d026      	beq.n	8015d88 <__ssputs_r+0x6c>
 8015d3a:	6965      	ldr	r5, [r4, #20]
 8015d3c:	6909      	ldr	r1, [r1, #16]
 8015d3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015d42:	eba3 0901 	sub.w	r9, r3, r1
 8015d46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015d4a:	1c7b      	adds	r3, r7, #1
 8015d4c:	444b      	add	r3, r9
 8015d4e:	106d      	asrs	r5, r5, #1
 8015d50:	429d      	cmp	r5, r3
 8015d52:	bf38      	it	cc
 8015d54:	461d      	movcc	r5, r3
 8015d56:	0553      	lsls	r3, r2, #21
 8015d58:	d527      	bpl.n	8015daa <__ssputs_r+0x8e>
 8015d5a:	4629      	mov	r1, r5
 8015d5c:	f7fe fc1c 	bl	8014598 <_malloc_r>
 8015d60:	4606      	mov	r6, r0
 8015d62:	b360      	cbz	r0, 8015dbe <__ssputs_r+0xa2>
 8015d64:	6921      	ldr	r1, [r4, #16]
 8015d66:	464a      	mov	r2, r9
 8015d68:	f000 fbde 	bl	8016528 <memcpy>
 8015d6c:	89a3      	ldrh	r3, [r4, #12]
 8015d6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015d72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015d76:	81a3      	strh	r3, [r4, #12]
 8015d78:	6126      	str	r6, [r4, #16]
 8015d7a:	6165      	str	r5, [r4, #20]
 8015d7c:	444e      	add	r6, r9
 8015d7e:	eba5 0509 	sub.w	r5, r5, r9
 8015d82:	6026      	str	r6, [r4, #0]
 8015d84:	60a5      	str	r5, [r4, #8]
 8015d86:	463e      	mov	r6, r7
 8015d88:	42be      	cmp	r6, r7
 8015d8a:	d900      	bls.n	8015d8e <__ssputs_r+0x72>
 8015d8c:	463e      	mov	r6, r7
 8015d8e:	6820      	ldr	r0, [r4, #0]
 8015d90:	4632      	mov	r2, r6
 8015d92:	4641      	mov	r1, r8
 8015d94:	f000 fb6a 	bl	801646c <memmove>
 8015d98:	68a3      	ldr	r3, [r4, #8]
 8015d9a:	1b9b      	subs	r3, r3, r6
 8015d9c:	60a3      	str	r3, [r4, #8]
 8015d9e:	6823      	ldr	r3, [r4, #0]
 8015da0:	4433      	add	r3, r6
 8015da2:	6023      	str	r3, [r4, #0]
 8015da4:	2000      	movs	r0, #0
 8015da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015daa:	462a      	mov	r2, r5
 8015dac:	f000 ff51 	bl	8016c52 <_realloc_r>
 8015db0:	4606      	mov	r6, r0
 8015db2:	2800      	cmp	r0, #0
 8015db4:	d1e0      	bne.n	8015d78 <__ssputs_r+0x5c>
 8015db6:	6921      	ldr	r1, [r4, #16]
 8015db8:	4650      	mov	r0, sl
 8015dba:	f7fe fb79 	bl	80144b0 <_free_r>
 8015dbe:	230c      	movs	r3, #12
 8015dc0:	f8ca 3000 	str.w	r3, [sl]
 8015dc4:	89a3      	ldrh	r3, [r4, #12]
 8015dc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015dca:	81a3      	strh	r3, [r4, #12]
 8015dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8015dd0:	e7e9      	b.n	8015da6 <__ssputs_r+0x8a>
	...

08015dd4 <_svfiprintf_r>:
 8015dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dd8:	4698      	mov	r8, r3
 8015dda:	898b      	ldrh	r3, [r1, #12]
 8015ddc:	061b      	lsls	r3, r3, #24
 8015dde:	b09d      	sub	sp, #116	@ 0x74
 8015de0:	4607      	mov	r7, r0
 8015de2:	460d      	mov	r5, r1
 8015de4:	4614      	mov	r4, r2
 8015de6:	d510      	bpl.n	8015e0a <_svfiprintf_r+0x36>
 8015de8:	690b      	ldr	r3, [r1, #16]
 8015dea:	b973      	cbnz	r3, 8015e0a <_svfiprintf_r+0x36>
 8015dec:	2140      	movs	r1, #64	@ 0x40
 8015dee:	f7fe fbd3 	bl	8014598 <_malloc_r>
 8015df2:	6028      	str	r0, [r5, #0]
 8015df4:	6128      	str	r0, [r5, #16]
 8015df6:	b930      	cbnz	r0, 8015e06 <_svfiprintf_r+0x32>
 8015df8:	230c      	movs	r3, #12
 8015dfa:	603b      	str	r3, [r7, #0]
 8015dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8015e00:	b01d      	add	sp, #116	@ 0x74
 8015e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e06:	2340      	movs	r3, #64	@ 0x40
 8015e08:	616b      	str	r3, [r5, #20]
 8015e0a:	2300      	movs	r3, #0
 8015e0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8015e0e:	2320      	movs	r3, #32
 8015e10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015e14:	f8cd 800c 	str.w	r8, [sp, #12]
 8015e18:	2330      	movs	r3, #48	@ 0x30
 8015e1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015fb8 <_svfiprintf_r+0x1e4>
 8015e1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015e22:	f04f 0901 	mov.w	r9, #1
 8015e26:	4623      	mov	r3, r4
 8015e28:	469a      	mov	sl, r3
 8015e2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015e2e:	b10a      	cbz	r2, 8015e34 <_svfiprintf_r+0x60>
 8015e30:	2a25      	cmp	r2, #37	@ 0x25
 8015e32:	d1f9      	bne.n	8015e28 <_svfiprintf_r+0x54>
 8015e34:	ebba 0b04 	subs.w	fp, sl, r4
 8015e38:	d00b      	beq.n	8015e52 <_svfiprintf_r+0x7e>
 8015e3a:	465b      	mov	r3, fp
 8015e3c:	4622      	mov	r2, r4
 8015e3e:	4629      	mov	r1, r5
 8015e40:	4638      	mov	r0, r7
 8015e42:	f7ff ff6b 	bl	8015d1c <__ssputs_r>
 8015e46:	3001      	adds	r0, #1
 8015e48:	f000 80a7 	beq.w	8015f9a <_svfiprintf_r+0x1c6>
 8015e4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015e4e:	445a      	add	r2, fp
 8015e50:	9209      	str	r2, [sp, #36]	@ 0x24
 8015e52:	f89a 3000 	ldrb.w	r3, [sl]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	f000 809f 	beq.w	8015f9a <_svfiprintf_r+0x1c6>
 8015e5c:	2300      	movs	r3, #0
 8015e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8015e62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015e66:	f10a 0a01 	add.w	sl, sl, #1
 8015e6a:	9304      	str	r3, [sp, #16]
 8015e6c:	9307      	str	r3, [sp, #28]
 8015e6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015e72:	931a      	str	r3, [sp, #104]	@ 0x68
 8015e74:	4654      	mov	r4, sl
 8015e76:	2205      	movs	r2, #5
 8015e78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e7c:	484e      	ldr	r0, [pc, #312]	@ (8015fb8 <_svfiprintf_r+0x1e4>)
 8015e7e:	f7ea f9cf 	bl	8000220 <memchr>
 8015e82:	9a04      	ldr	r2, [sp, #16]
 8015e84:	b9d8      	cbnz	r0, 8015ebe <_svfiprintf_r+0xea>
 8015e86:	06d0      	lsls	r0, r2, #27
 8015e88:	bf44      	itt	mi
 8015e8a:	2320      	movmi	r3, #32
 8015e8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015e90:	0711      	lsls	r1, r2, #28
 8015e92:	bf44      	itt	mi
 8015e94:	232b      	movmi	r3, #43	@ 0x2b
 8015e96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8015e9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8015ea0:	d015      	beq.n	8015ece <_svfiprintf_r+0xfa>
 8015ea2:	9a07      	ldr	r2, [sp, #28]
 8015ea4:	4654      	mov	r4, sl
 8015ea6:	2000      	movs	r0, #0
 8015ea8:	f04f 0c0a 	mov.w	ip, #10
 8015eac:	4621      	mov	r1, r4
 8015eae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015eb2:	3b30      	subs	r3, #48	@ 0x30
 8015eb4:	2b09      	cmp	r3, #9
 8015eb6:	d94b      	bls.n	8015f50 <_svfiprintf_r+0x17c>
 8015eb8:	b1b0      	cbz	r0, 8015ee8 <_svfiprintf_r+0x114>
 8015eba:	9207      	str	r2, [sp, #28]
 8015ebc:	e014      	b.n	8015ee8 <_svfiprintf_r+0x114>
 8015ebe:	eba0 0308 	sub.w	r3, r0, r8
 8015ec2:	fa09 f303 	lsl.w	r3, r9, r3
 8015ec6:	4313      	orrs	r3, r2
 8015ec8:	9304      	str	r3, [sp, #16]
 8015eca:	46a2      	mov	sl, r4
 8015ecc:	e7d2      	b.n	8015e74 <_svfiprintf_r+0xa0>
 8015ece:	9b03      	ldr	r3, [sp, #12]
 8015ed0:	1d19      	adds	r1, r3, #4
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	9103      	str	r1, [sp, #12]
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	bfbb      	ittet	lt
 8015eda:	425b      	neglt	r3, r3
 8015edc:	f042 0202 	orrlt.w	r2, r2, #2
 8015ee0:	9307      	strge	r3, [sp, #28]
 8015ee2:	9307      	strlt	r3, [sp, #28]
 8015ee4:	bfb8      	it	lt
 8015ee6:	9204      	strlt	r2, [sp, #16]
 8015ee8:	7823      	ldrb	r3, [r4, #0]
 8015eea:	2b2e      	cmp	r3, #46	@ 0x2e
 8015eec:	d10a      	bne.n	8015f04 <_svfiprintf_r+0x130>
 8015eee:	7863      	ldrb	r3, [r4, #1]
 8015ef0:	2b2a      	cmp	r3, #42	@ 0x2a
 8015ef2:	d132      	bne.n	8015f5a <_svfiprintf_r+0x186>
 8015ef4:	9b03      	ldr	r3, [sp, #12]
 8015ef6:	1d1a      	adds	r2, r3, #4
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	9203      	str	r2, [sp, #12]
 8015efc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015f00:	3402      	adds	r4, #2
 8015f02:	9305      	str	r3, [sp, #20]
 8015f04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015fc8 <_svfiprintf_r+0x1f4>
 8015f08:	7821      	ldrb	r1, [r4, #0]
 8015f0a:	2203      	movs	r2, #3
 8015f0c:	4650      	mov	r0, sl
 8015f0e:	f7ea f987 	bl	8000220 <memchr>
 8015f12:	b138      	cbz	r0, 8015f24 <_svfiprintf_r+0x150>
 8015f14:	9b04      	ldr	r3, [sp, #16]
 8015f16:	eba0 000a 	sub.w	r0, r0, sl
 8015f1a:	2240      	movs	r2, #64	@ 0x40
 8015f1c:	4082      	lsls	r2, r0
 8015f1e:	4313      	orrs	r3, r2
 8015f20:	3401      	adds	r4, #1
 8015f22:	9304      	str	r3, [sp, #16]
 8015f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f28:	4824      	ldr	r0, [pc, #144]	@ (8015fbc <_svfiprintf_r+0x1e8>)
 8015f2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015f2e:	2206      	movs	r2, #6
 8015f30:	f7ea f976 	bl	8000220 <memchr>
 8015f34:	2800      	cmp	r0, #0
 8015f36:	d036      	beq.n	8015fa6 <_svfiprintf_r+0x1d2>
 8015f38:	4b21      	ldr	r3, [pc, #132]	@ (8015fc0 <_svfiprintf_r+0x1ec>)
 8015f3a:	bb1b      	cbnz	r3, 8015f84 <_svfiprintf_r+0x1b0>
 8015f3c:	9b03      	ldr	r3, [sp, #12]
 8015f3e:	3307      	adds	r3, #7
 8015f40:	f023 0307 	bic.w	r3, r3, #7
 8015f44:	3308      	adds	r3, #8
 8015f46:	9303      	str	r3, [sp, #12]
 8015f48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015f4a:	4433      	add	r3, r6
 8015f4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8015f4e:	e76a      	b.n	8015e26 <_svfiprintf_r+0x52>
 8015f50:	fb0c 3202 	mla	r2, ip, r2, r3
 8015f54:	460c      	mov	r4, r1
 8015f56:	2001      	movs	r0, #1
 8015f58:	e7a8      	b.n	8015eac <_svfiprintf_r+0xd8>
 8015f5a:	2300      	movs	r3, #0
 8015f5c:	3401      	adds	r4, #1
 8015f5e:	9305      	str	r3, [sp, #20]
 8015f60:	4619      	mov	r1, r3
 8015f62:	f04f 0c0a 	mov.w	ip, #10
 8015f66:	4620      	mov	r0, r4
 8015f68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015f6c:	3a30      	subs	r2, #48	@ 0x30
 8015f6e:	2a09      	cmp	r2, #9
 8015f70:	d903      	bls.n	8015f7a <_svfiprintf_r+0x1a6>
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d0c6      	beq.n	8015f04 <_svfiprintf_r+0x130>
 8015f76:	9105      	str	r1, [sp, #20]
 8015f78:	e7c4      	b.n	8015f04 <_svfiprintf_r+0x130>
 8015f7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8015f7e:	4604      	mov	r4, r0
 8015f80:	2301      	movs	r3, #1
 8015f82:	e7f0      	b.n	8015f66 <_svfiprintf_r+0x192>
 8015f84:	ab03      	add	r3, sp, #12
 8015f86:	9300      	str	r3, [sp, #0]
 8015f88:	462a      	mov	r2, r5
 8015f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8015fc4 <_svfiprintf_r+0x1f0>)
 8015f8c:	a904      	add	r1, sp, #16
 8015f8e:	4638      	mov	r0, r7
 8015f90:	f7fc fbc4 	bl	801271c <_printf_float>
 8015f94:	1c42      	adds	r2, r0, #1
 8015f96:	4606      	mov	r6, r0
 8015f98:	d1d6      	bne.n	8015f48 <_svfiprintf_r+0x174>
 8015f9a:	89ab      	ldrh	r3, [r5, #12]
 8015f9c:	065b      	lsls	r3, r3, #25
 8015f9e:	f53f af2d 	bmi.w	8015dfc <_svfiprintf_r+0x28>
 8015fa2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015fa4:	e72c      	b.n	8015e00 <_svfiprintf_r+0x2c>
 8015fa6:	ab03      	add	r3, sp, #12
 8015fa8:	9300      	str	r3, [sp, #0]
 8015faa:	462a      	mov	r2, r5
 8015fac:	4b05      	ldr	r3, [pc, #20]	@ (8015fc4 <_svfiprintf_r+0x1f0>)
 8015fae:	a904      	add	r1, sp, #16
 8015fb0:	4638      	mov	r0, r7
 8015fb2:	f7fc fe4b 	bl	8012c4c <_printf_i>
 8015fb6:	e7ed      	b.n	8015f94 <_svfiprintf_r+0x1c0>
 8015fb8:	08024dd9 	.word	0x08024dd9
 8015fbc:	08024de3 	.word	0x08024de3
 8015fc0:	0801271d 	.word	0x0801271d
 8015fc4:	08015d1d 	.word	0x08015d1d
 8015fc8:	08024ddf 	.word	0x08024ddf

08015fcc <__sfputc_r>:
 8015fcc:	6893      	ldr	r3, [r2, #8]
 8015fce:	3b01      	subs	r3, #1
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	b410      	push	{r4}
 8015fd4:	6093      	str	r3, [r2, #8]
 8015fd6:	da08      	bge.n	8015fea <__sfputc_r+0x1e>
 8015fd8:	6994      	ldr	r4, [r2, #24]
 8015fda:	42a3      	cmp	r3, r4
 8015fdc:	db01      	blt.n	8015fe2 <__sfputc_r+0x16>
 8015fde:	290a      	cmp	r1, #10
 8015fe0:	d103      	bne.n	8015fea <__sfputc_r+0x1e>
 8015fe2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015fe6:	f7fd bafa 	b.w	80135de <__swbuf_r>
 8015fea:	6813      	ldr	r3, [r2, #0]
 8015fec:	1c58      	adds	r0, r3, #1
 8015fee:	6010      	str	r0, [r2, #0]
 8015ff0:	7019      	strb	r1, [r3, #0]
 8015ff2:	4608      	mov	r0, r1
 8015ff4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015ff8:	4770      	bx	lr

08015ffa <__sfputs_r>:
 8015ffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ffc:	4606      	mov	r6, r0
 8015ffe:	460f      	mov	r7, r1
 8016000:	4614      	mov	r4, r2
 8016002:	18d5      	adds	r5, r2, r3
 8016004:	42ac      	cmp	r4, r5
 8016006:	d101      	bne.n	801600c <__sfputs_r+0x12>
 8016008:	2000      	movs	r0, #0
 801600a:	e007      	b.n	801601c <__sfputs_r+0x22>
 801600c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016010:	463a      	mov	r2, r7
 8016012:	4630      	mov	r0, r6
 8016014:	f7ff ffda 	bl	8015fcc <__sfputc_r>
 8016018:	1c43      	adds	r3, r0, #1
 801601a:	d1f3      	bne.n	8016004 <__sfputs_r+0xa>
 801601c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016020 <_vfiprintf_r>:
 8016020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016024:	460d      	mov	r5, r1
 8016026:	b09d      	sub	sp, #116	@ 0x74
 8016028:	4614      	mov	r4, r2
 801602a:	4698      	mov	r8, r3
 801602c:	4606      	mov	r6, r0
 801602e:	b118      	cbz	r0, 8016038 <_vfiprintf_r+0x18>
 8016030:	6a03      	ldr	r3, [r0, #32]
 8016032:	b90b      	cbnz	r3, 8016038 <_vfiprintf_r+0x18>
 8016034:	f7fd f9ca 	bl	80133cc <__sinit>
 8016038:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801603a:	07d9      	lsls	r1, r3, #31
 801603c:	d405      	bmi.n	801604a <_vfiprintf_r+0x2a>
 801603e:	89ab      	ldrh	r3, [r5, #12]
 8016040:	059a      	lsls	r2, r3, #22
 8016042:	d402      	bmi.n	801604a <_vfiprintf_r+0x2a>
 8016044:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016046:	f7fd fbdc 	bl	8013802 <__retarget_lock_acquire_recursive>
 801604a:	89ab      	ldrh	r3, [r5, #12]
 801604c:	071b      	lsls	r3, r3, #28
 801604e:	d501      	bpl.n	8016054 <_vfiprintf_r+0x34>
 8016050:	692b      	ldr	r3, [r5, #16]
 8016052:	b99b      	cbnz	r3, 801607c <_vfiprintf_r+0x5c>
 8016054:	4629      	mov	r1, r5
 8016056:	4630      	mov	r0, r6
 8016058:	f7fd fb00 	bl	801365c <__swsetup_r>
 801605c:	b170      	cbz	r0, 801607c <_vfiprintf_r+0x5c>
 801605e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016060:	07dc      	lsls	r4, r3, #31
 8016062:	d504      	bpl.n	801606e <_vfiprintf_r+0x4e>
 8016064:	f04f 30ff 	mov.w	r0, #4294967295
 8016068:	b01d      	add	sp, #116	@ 0x74
 801606a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801606e:	89ab      	ldrh	r3, [r5, #12]
 8016070:	0598      	lsls	r0, r3, #22
 8016072:	d4f7      	bmi.n	8016064 <_vfiprintf_r+0x44>
 8016074:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016076:	f7fd fbc5 	bl	8013804 <__retarget_lock_release_recursive>
 801607a:	e7f3      	b.n	8016064 <_vfiprintf_r+0x44>
 801607c:	2300      	movs	r3, #0
 801607e:	9309      	str	r3, [sp, #36]	@ 0x24
 8016080:	2320      	movs	r3, #32
 8016082:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016086:	f8cd 800c 	str.w	r8, [sp, #12]
 801608a:	2330      	movs	r3, #48	@ 0x30
 801608c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801623c <_vfiprintf_r+0x21c>
 8016090:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016094:	f04f 0901 	mov.w	r9, #1
 8016098:	4623      	mov	r3, r4
 801609a:	469a      	mov	sl, r3
 801609c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80160a0:	b10a      	cbz	r2, 80160a6 <_vfiprintf_r+0x86>
 80160a2:	2a25      	cmp	r2, #37	@ 0x25
 80160a4:	d1f9      	bne.n	801609a <_vfiprintf_r+0x7a>
 80160a6:	ebba 0b04 	subs.w	fp, sl, r4
 80160aa:	d00b      	beq.n	80160c4 <_vfiprintf_r+0xa4>
 80160ac:	465b      	mov	r3, fp
 80160ae:	4622      	mov	r2, r4
 80160b0:	4629      	mov	r1, r5
 80160b2:	4630      	mov	r0, r6
 80160b4:	f7ff ffa1 	bl	8015ffa <__sfputs_r>
 80160b8:	3001      	adds	r0, #1
 80160ba:	f000 80a7 	beq.w	801620c <_vfiprintf_r+0x1ec>
 80160be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80160c0:	445a      	add	r2, fp
 80160c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80160c4:	f89a 3000 	ldrb.w	r3, [sl]
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	f000 809f 	beq.w	801620c <_vfiprintf_r+0x1ec>
 80160ce:	2300      	movs	r3, #0
 80160d0:	f04f 32ff 	mov.w	r2, #4294967295
 80160d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80160d8:	f10a 0a01 	add.w	sl, sl, #1
 80160dc:	9304      	str	r3, [sp, #16]
 80160de:	9307      	str	r3, [sp, #28]
 80160e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80160e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80160e6:	4654      	mov	r4, sl
 80160e8:	2205      	movs	r2, #5
 80160ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80160ee:	4853      	ldr	r0, [pc, #332]	@ (801623c <_vfiprintf_r+0x21c>)
 80160f0:	f7ea f896 	bl	8000220 <memchr>
 80160f4:	9a04      	ldr	r2, [sp, #16]
 80160f6:	b9d8      	cbnz	r0, 8016130 <_vfiprintf_r+0x110>
 80160f8:	06d1      	lsls	r1, r2, #27
 80160fa:	bf44      	itt	mi
 80160fc:	2320      	movmi	r3, #32
 80160fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016102:	0713      	lsls	r3, r2, #28
 8016104:	bf44      	itt	mi
 8016106:	232b      	movmi	r3, #43	@ 0x2b
 8016108:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801610c:	f89a 3000 	ldrb.w	r3, [sl]
 8016110:	2b2a      	cmp	r3, #42	@ 0x2a
 8016112:	d015      	beq.n	8016140 <_vfiprintf_r+0x120>
 8016114:	9a07      	ldr	r2, [sp, #28]
 8016116:	4654      	mov	r4, sl
 8016118:	2000      	movs	r0, #0
 801611a:	f04f 0c0a 	mov.w	ip, #10
 801611e:	4621      	mov	r1, r4
 8016120:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016124:	3b30      	subs	r3, #48	@ 0x30
 8016126:	2b09      	cmp	r3, #9
 8016128:	d94b      	bls.n	80161c2 <_vfiprintf_r+0x1a2>
 801612a:	b1b0      	cbz	r0, 801615a <_vfiprintf_r+0x13a>
 801612c:	9207      	str	r2, [sp, #28]
 801612e:	e014      	b.n	801615a <_vfiprintf_r+0x13a>
 8016130:	eba0 0308 	sub.w	r3, r0, r8
 8016134:	fa09 f303 	lsl.w	r3, r9, r3
 8016138:	4313      	orrs	r3, r2
 801613a:	9304      	str	r3, [sp, #16]
 801613c:	46a2      	mov	sl, r4
 801613e:	e7d2      	b.n	80160e6 <_vfiprintf_r+0xc6>
 8016140:	9b03      	ldr	r3, [sp, #12]
 8016142:	1d19      	adds	r1, r3, #4
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	9103      	str	r1, [sp, #12]
 8016148:	2b00      	cmp	r3, #0
 801614a:	bfbb      	ittet	lt
 801614c:	425b      	neglt	r3, r3
 801614e:	f042 0202 	orrlt.w	r2, r2, #2
 8016152:	9307      	strge	r3, [sp, #28]
 8016154:	9307      	strlt	r3, [sp, #28]
 8016156:	bfb8      	it	lt
 8016158:	9204      	strlt	r2, [sp, #16]
 801615a:	7823      	ldrb	r3, [r4, #0]
 801615c:	2b2e      	cmp	r3, #46	@ 0x2e
 801615e:	d10a      	bne.n	8016176 <_vfiprintf_r+0x156>
 8016160:	7863      	ldrb	r3, [r4, #1]
 8016162:	2b2a      	cmp	r3, #42	@ 0x2a
 8016164:	d132      	bne.n	80161cc <_vfiprintf_r+0x1ac>
 8016166:	9b03      	ldr	r3, [sp, #12]
 8016168:	1d1a      	adds	r2, r3, #4
 801616a:	681b      	ldr	r3, [r3, #0]
 801616c:	9203      	str	r2, [sp, #12]
 801616e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016172:	3402      	adds	r4, #2
 8016174:	9305      	str	r3, [sp, #20]
 8016176:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801624c <_vfiprintf_r+0x22c>
 801617a:	7821      	ldrb	r1, [r4, #0]
 801617c:	2203      	movs	r2, #3
 801617e:	4650      	mov	r0, sl
 8016180:	f7ea f84e 	bl	8000220 <memchr>
 8016184:	b138      	cbz	r0, 8016196 <_vfiprintf_r+0x176>
 8016186:	9b04      	ldr	r3, [sp, #16]
 8016188:	eba0 000a 	sub.w	r0, r0, sl
 801618c:	2240      	movs	r2, #64	@ 0x40
 801618e:	4082      	lsls	r2, r0
 8016190:	4313      	orrs	r3, r2
 8016192:	3401      	adds	r4, #1
 8016194:	9304      	str	r3, [sp, #16]
 8016196:	f814 1b01 	ldrb.w	r1, [r4], #1
 801619a:	4829      	ldr	r0, [pc, #164]	@ (8016240 <_vfiprintf_r+0x220>)
 801619c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80161a0:	2206      	movs	r2, #6
 80161a2:	f7ea f83d 	bl	8000220 <memchr>
 80161a6:	2800      	cmp	r0, #0
 80161a8:	d03f      	beq.n	801622a <_vfiprintf_r+0x20a>
 80161aa:	4b26      	ldr	r3, [pc, #152]	@ (8016244 <_vfiprintf_r+0x224>)
 80161ac:	bb1b      	cbnz	r3, 80161f6 <_vfiprintf_r+0x1d6>
 80161ae:	9b03      	ldr	r3, [sp, #12]
 80161b0:	3307      	adds	r3, #7
 80161b2:	f023 0307 	bic.w	r3, r3, #7
 80161b6:	3308      	adds	r3, #8
 80161b8:	9303      	str	r3, [sp, #12]
 80161ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80161bc:	443b      	add	r3, r7
 80161be:	9309      	str	r3, [sp, #36]	@ 0x24
 80161c0:	e76a      	b.n	8016098 <_vfiprintf_r+0x78>
 80161c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80161c6:	460c      	mov	r4, r1
 80161c8:	2001      	movs	r0, #1
 80161ca:	e7a8      	b.n	801611e <_vfiprintf_r+0xfe>
 80161cc:	2300      	movs	r3, #0
 80161ce:	3401      	adds	r4, #1
 80161d0:	9305      	str	r3, [sp, #20]
 80161d2:	4619      	mov	r1, r3
 80161d4:	f04f 0c0a 	mov.w	ip, #10
 80161d8:	4620      	mov	r0, r4
 80161da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80161de:	3a30      	subs	r2, #48	@ 0x30
 80161e0:	2a09      	cmp	r2, #9
 80161e2:	d903      	bls.n	80161ec <_vfiprintf_r+0x1cc>
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d0c6      	beq.n	8016176 <_vfiprintf_r+0x156>
 80161e8:	9105      	str	r1, [sp, #20]
 80161ea:	e7c4      	b.n	8016176 <_vfiprintf_r+0x156>
 80161ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80161f0:	4604      	mov	r4, r0
 80161f2:	2301      	movs	r3, #1
 80161f4:	e7f0      	b.n	80161d8 <_vfiprintf_r+0x1b8>
 80161f6:	ab03      	add	r3, sp, #12
 80161f8:	9300      	str	r3, [sp, #0]
 80161fa:	462a      	mov	r2, r5
 80161fc:	4b12      	ldr	r3, [pc, #72]	@ (8016248 <_vfiprintf_r+0x228>)
 80161fe:	a904      	add	r1, sp, #16
 8016200:	4630      	mov	r0, r6
 8016202:	f7fc fa8b 	bl	801271c <_printf_float>
 8016206:	4607      	mov	r7, r0
 8016208:	1c78      	adds	r0, r7, #1
 801620a:	d1d6      	bne.n	80161ba <_vfiprintf_r+0x19a>
 801620c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801620e:	07d9      	lsls	r1, r3, #31
 8016210:	d405      	bmi.n	801621e <_vfiprintf_r+0x1fe>
 8016212:	89ab      	ldrh	r3, [r5, #12]
 8016214:	059a      	lsls	r2, r3, #22
 8016216:	d402      	bmi.n	801621e <_vfiprintf_r+0x1fe>
 8016218:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801621a:	f7fd faf3 	bl	8013804 <__retarget_lock_release_recursive>
 801621e:	89ab      	ldrh	r3, [r5, #12]
 8016220:	065b      	lsls	r3, r3, #25
 8016222:	f53f af1f 	bmi.w	8016064 <_vfiprintf_r+0x44>
 8016226:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016228:	e71e      	b.n	8016068 <_vfiprintf_r+0x48>
 801622a:	ab03      	add	r3, sp, #12
 801622c:	9300      	str	r3, [sp, #0]
 801622e:	462a      	mov	r2, r5
 8016230:	4b05      	ldr	r3, [pc, #20]	@ (8016248 <_vfiprintf_r+0x228>)
 8016232:	a904      	add	r1, sp, #16
 8016234:	4630      	mov	r0, r6
 8016236:	f7fc fd09 	bl	8012c4c <_printf_i>
 801623a:	e7e4      	b.n	8016206 <_vfiprintf_r+0x1e6>
 801623c:	08024dd9 	.word	0x08024dd9
 8016240:	08024de3 	.word	0x08024de3
 8016244:	0801271d 	.word	0x0801271d
 8016248:	08015ffb 	.word	0x08015ffb
 801624c:	08024ddf 	.word	0x08024ddf

08016250 <__sflush_r>:
 8016250:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016258:	0716      	lsls	r6, r2, #28
 801625a:	4605      	mov	r5, r0
 801625c:	460c      	mov	r4, r1
 801625e:	d454      	bmi.n	801630a <__sflush_r+0xba>
 8016260:	684b      	ldr	r3, [r1, #4]
 8016262:	2b00      	cmp	r3, #0
 8016264:	dc02      	bgt.n	801626c <__sflush_r+0x1c>
 8016266:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016268:	2b00      	cmp	r3, #0
 801626a:	dd48      	ble.n	80162fe <__sflush_r+0xae>
 801626c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801626e:	2e00      	cmp	r6, #0
 8016270:	d045      	beq.n	80162fe <__sflush_r+0xae>
 8016272:	2300      	movs	r3, #0
 8016274:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016278:	682f      	ldr	r7, [r5, #0]
 801627a:	6a21      	ldr	r1, [r4, #32]
 801627c:	602b      	str	r3, [r5, #0]
 801627e:	d030      	beq.n	80162e2 <__sflush_r+0x92>
 8016280:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016282:	89a3      	ldrh	r3, [r4, #12]
 8016284:	0759      	lsls	r1, r3, #29
 8016286:	d505      	bpl.n	8016294 <__sflush_r+0x44>
 8016288:	6863      	ldr	r3, [r4, #4]
 801628a:	1ad2      	subs	r2, r2, r3
 801628c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801628e:	b10b      	cbz	r3, 8016294 <__sflush_r+0x44>
 8016290:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016292:	1ad2      	subs	r2, r2, r3
 8016294:	2300      	movs	r3, #0
 8016296:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016298:	6a21      	ldr	r1, [r4, #32]
 801629a:	4628      	mov	r0, r5
 801629c:	47b0      	blx	r6
 801629e:	1c43      	adds	r3, r0, #1
 80162a0:	89a3      	ldrh	r3, [r4, #12]
 80162a2:	d106      	bne.n	80162b2 <__sflush_r+0x62>
 80162a4:	6829      	ldr	r1, [r5, #0]
 80162a6:	291d      	cmp	r1, #29
 80162a8:	d82b      	bhi.n	8016302 <__sflush_r+0xb2>
 80162aa:	4a2a      	ldr	r2, [pc, #168]	@ (8016354 <__sflush_r+0x104>)
 80162ac:	410a      	asrs	r2, r1
 80162ae:	07d6      	lsls	r6, r2, #31
 80162b0:	d427      	bmi.n	8016302 <__sflush_r+0xb2>
 80162b2:	2200      	movs	r2, #0
 80162b4:	6062      	str	r2, [r4, #4]
 80162b6:	04d9      	lsls	r1, r3, #19
 80162b8:	6922      	ldr	r2, [r4, #16]
 80162ba:	6022      	str	r2, [r4, #0]
 80162bc:	d504      	bpl.n	80162c8 <__sflush_r+0x78>
 80162be:	1c42      	adds	r2, r0, #1
 80162c0:	d101      	bne.n	80162c6 <__sflush_r+0x76>
 80162c2:	682b      	ldr	r3, [r5, #0]
 80162c4:	b903      	cbnz	r3, 80162c8 <__sflush_r+0x78>
 80162c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80162c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80162ca:	602f      	str	r7, [r5, #0]
 80162cc:	b1b9      	cbz	r1, 80162fe <__sflush_r+0xae>
 80162ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80162d2:	4299      	cmp	r1, r3
 80162d4:	d002      	beq.n	80162dc <__sflush_r+0x8c>
 80162d6:	4628      	mov	r0, r5
 80162d8:	f7fe f8ea 	bl	80144b0 <_free_r>
 80162dc:	2300      	movs	r3, #0
 80162de:	6363      	str	r3, [r4, #52]	@ 0x34
 80162e0:	e00d      	b.n	80162fe <__sflush_r+0xae>
 80162e2:	2301      	movs	r3, #1
 80162e4:	4628      	mov	r0, r5
 80162e6:	47b0      	blx	r6
 80162e8:	4602      	mov	r2, r0
 80162ea:	1c50      	adds	r0, r2, #1
 80162ec:	d1c9      	bne.n	8016282 <__sflush_r+0x32>
 80162ee:	682b      	ldr	r3, [r5, #0]
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d0c6      	beq.n	8016282 <__sflush_r+0x32>
 80162f4:	2b1d      	cmp	r3, #29
 80162f6:	d001      	beq.n	80162fc <__sflush_r+0xac>
 80162f8:	2b16      	cmp	r3, #22
 80162fa:	d11e      	bne.n	801633a <__sflush_r+0xea>
 80162fc:	602f      	str	r7, [r5, #0]
 80162fe:	2000      	movs	r0, #0
 8016300:	e022      	b.n	8016348 <__sflush_r+0xf8>
 8016302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016306:	b21b      	sxth	r3, r3
 8016308:	e01b      	b.n	8016342 <__sflush_r+0xf2>
 801630a:	690f      	ldr	r7, [r1, #16]
 801630c:	2f00      	cmp	r7, #0
 801630e:	d0f6      	beq.n	80162fe <__sflush_r+0xae>
 8016310:	0793      	lsls	r3, r2, #30
 8016312:	680e      	ldr	r6, [r1, #0]
 8016314:	bf08      	it	eq
 8016316:	694b      	ldreq	r3, [r1, #20]
 8016318:	600f      	str	r7, [r1, #0]
 801631a:	bf18      	it	ne
 801631c:	2300      	movne	r3, #0
 801631e:	eba6 0807 	sub.w	r8, r6, r7
 8016322:	608b      	str	r3, [r1, #8]
 8016324:	f1b8 0f00 	cmp.w	r8, #0
 8016328:	dde9      	ble.n	80162fe <__sflush_r+0xae>
 801632a:	6a21      	ldr	r1, [r4, #32]
 801632c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801632e:	4643      	mov	r3, r8
 8016330:	463a      	mov	r2, r7
 8016332:	4628      	mov	r0, r5
 8016334:	47b0      	blx	r6
 8016336:	2800      	cmp	r0, #0
 8016338:	dc08      	bgt.n	801634c <__sflush_r+0xfc>
 801633a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801633e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016342:	81a3      	strh	r3, [r4, #12]
 8016344:	f04f 30ff 	mov.w	r0, #4294967295
 8016348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801634c:	4407      	add	r7, r0
 801634e:	eba8 0800 	sub.w	r8, r8, r0
 8016352:	e7e7      	b.n	8016324 <__sflush_r+0xd4>
 8016354:	dfbffffe 	.word	0xdfbffffe

08016358 <_fflush_r>:
 8016358:	b538      	push	{r3, r4, r5, lr}
 801635a:	690b      	ldr	r3, [r1, #16]
 801635c:	4605      	mov	r5, r0
 801635e:	460c      	mov	r4, r1
 8016360:	b913      	cbnz	r3, 8016368 <_fflush_r+0x10>
 8016362:	2500      	movs	r5, #0
 8016364:	4628      	mov	r0, r5
 8016366:	bd38      	pop	{r3, r4, r5, pc}
 8016368:	b118      	cbz	r0, 8016372 <_fflush_r+0x1a>
 801636a:	6a03      	ldr	r3, [r0, #32]
 801636c:	b90b      	cbnz	r3, 8016372 <_fflush_r+0x1a>
 801636e:	f7fd f82d 	bl	80133cc <__sinit>
 8016372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016376:	2b00      	cmp	r3, #0
 8016378:	d0f3      	beq.n	8016362 <_fflush_r+0xa>
 801637a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801637c:	07d0      	lsls	r0, r2, #31
 801637e:	d404      	bmi.n	801638a <_fflush_r+0x32>
 8016380:	0599      	lsls	r1, r3, #22
 8016382:	d402      	bmi.n	801638a <_fflush_r+0x32>
 8016384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016386:	f7fd fa3c 	bl	8013802 <__retarget_lock_acquire_recursive>
 801638a:	4628      	mov	r0, r5
 801638c:	4621      	mov	r1, r4
 801638e:	f7ff ff5f 	bl	8016250 <__sflush_r>
 8016392:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016394:	07da      	lsls	r2, r3, #31
 8016396:	4605      	mov	r5, r0
 8016398:	d4e4      	bmi.n	8016364 <_fflush_r+0xc>
 801639a:	89a3      	ldrh	r3, [r4, #12]
 801639c:	059b      	lsls	r3, r3, #22
 801639e:	d4e1      	bmi.n	8016364 <_fflush_r+0xc>
 80163a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80163a2:	f7fd fa2f 	bl	8013804 <__retarget_lock_release_recursive>
 80163a6:	e7dd      	b.n	8016364 <_fflush_r+0xc>

080163a8 <__swhatbuf_r>:
 80163a8:	b570      	push	{r4, r5, r6, lr}
 80163aa:	460c      	mov	r4, r1
 80163ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80163b0:	2900      	cmp	r1, #0
 80163b2:	b096      	sub	sp, #88	@ 0x58
 80163b4:	4615      	mov	r5, r2
 80163b6:	461e      	mov	r6, r3
 80163b8:	da0d      	bge.n	80163d6 <__swhatbuf_r+0x2e>
 80163ba:	89a3      	ldrh	r3, [r4, #12]
 80163bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80163c0:	f04f 0100 	mov.w	r1, #0
 80163c4:	bf14      	ite	ne
 80163c6:	2340      	movne	r3, #64	@ 0x40
 80163c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80163cc:	2000      	movs	r0, #0
 80163ce:	6031      	str	r1, [r6, #0]
 80163d0:	602b      	str	r3, [r5, #0]
 80163d2:	b016      	add	sp, #88	@ 0x58
 80163d4:	bd70      	pop	{r4, r5, r6, pc}
 80163d6:	466a      	mov	r2, sp
 80163d8:	f000 f874 	bl	80164c4 <_fstat_r>
 80163dc:	2800      	cmp	r0, #0
 80163de:	dbec      	blt.n	80163ba <__swhatbuf_r+0x12>
 80163e0:	9901      	ldr	r1, [sp, #4]
 80163e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80163e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80163ea:	4259      	negs	r1, r3
 80163ec:	4159      	adcs	r1, r3
 80163ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80163f2:	e7eb      	b.n	80163cc <__swhatbuf_r+0x24>

080163f4 <__smakebuf_r>:
 80163f4:	898b      	ldrh	r3, [r1, #12]
 80163f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80163f8:	079d      	lsls	r5, r3, #30
 80163fa:	4606      	mov	r6, r0
 80163fc:	460c      	mov	r4, r1
 80163fe:	d507      	bpl.n	8016410 <__smakebuf_r+0x1c>
 8016400:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016404:	6023      	str	r3, [r4, #0]
 8016406:	6123      	str	r3, [r4, #16]
 8016408:	2301      	movs	r3, #1
 801640a:	6163      	str	r3, [r4, #20]
 801640c:	b003      	add	sp, #12
 801640e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016410:	ab01      	add	r3, sp, #4
 8016412:	466a      	mov	r2, sp
 8016414:	f7ff ffc8 	bl	80163a8 <__swhatbuf_r>
 8016418:	9f00      	ldr	r7, [sp, #0]
 801641a:	4605      	mov	r5, r0
 801641c:	4639      	mov	r1, r7
 801641e:	4630      	mov	r0, r6
 8016420:	f7fe f8ba 	bl	8014598 <_malloc_r>
 8016424:	b948      	cbnz	r0, 801643a <__smakebuf_r+0x46>
 8016426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801642a:	059a      	lsls	r2, r3, #22
 801642c:	d4ee      	bmi.n	801640c <__smakebuf_r+0x18>
 801642e:	f023 0303 	bic.w	r3, r3, #3
 8016432:	f043 0302 	orr.w	r3, r3, #2
 8016436:	81a3      	strh	r3, [r4, #12]
 8016438:	e7e2      	b.n	8016400 <__smakebuf_r+0xc>
 801643a:	89a3      	ldrh	r3, [r4, #12]
 801643c:	6020      	str	r0, [r4, #0]
 801643e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016442:	81a3      	strh	r3, [r4, #12]
 8016444:	9b01      	ldr	r3, [sp, #4]
 8016446:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801644a:	b15b      	cbz	r3, 8016464 <__smakebuf_r+0x70>
 801644c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016450:	4630      	mov	r0, r6
 8016452:	f000 f849 	bl	80164e8 <_isatty_r>
 8016456:	b128      	cbz	r0, 8016464 <__smakebuf_r+0x70>
 8016458:	89a3      	ldrh	r3, [r4, #12]
 801645a:	f023 0303 	bic.w	r3, r3, #3
 801645e:	f043 0301 	orr.w	r3, r3, #1
 8016462:	81a3      	strh	r3, [r4, #12]
 8016464:	89a3      	ldrh	r3, [r4, #12]
 8016466:	431d      	orrs	r5, r3
 8016468:	81a5      	strh	r5, [r4, #12]
 801646a:	e7cf      	b.n	801640c <__smakebuf_r+0x18>

0801646c <memmove>:
 801646c:	4288      	cmp	r0, r1
 801646e:	b510      	push	{r4, lr}
 8016470:	eb01 0402 	add.w	r4, r1, r2
 8016474:	d902      	bls.n	801647c <memmove+0x10>
 8016476:	4284      	cmp	r4, r0
 8016478:	4623      	mov	r3, r4
 801647a:	d807      	bhi.n	801648c <memmove+0x20>
 801647c:	1e43      	subs	r3, r0, #1
 801647e:	42a1      	cmp	r1, r4
 8016480:	d008      	beq.n	8016494 <memmove+0x28>
 8016482:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016486:	f803 2f01 	strb.w	r2, [r3, #1]!
 801648a:	e7f8      	b.n	801647e <memmove+0x12>
 801648c:	4402      	add	r2, r0
 801648e:	4601      	mov	r1, r0
 8016490:	428a      	cmp	r2, r1
 8016492:	d100      	bne.n	8016496 <memmove+0x2a>
 8016494:	bd10      	pop	{r4, pc}
 8016496:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801649a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801649e:	e7f7      	b.n	8016490 <memmove+0x24>

080164a0 <strncmp>:
 80164a0:	b510      	push	{r4, lr}
 80164a2:	b16a      	cbz	r2, 80164c0 <strncmp+0x20>
 80164a4:	3901      	subs	r1, #1
 80164a6:	1884      	adds	r4, r0, r2
 80164a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80164ac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80164b0:	429a      	cmp	r2, r3
 80164b2:	d103      	bne.n	80164bc <strncmp+0x1c>
 80164b4:	42a0      	cmp	r0, r4
 80164b6:	d001      	beq.n	80164bc <strncmp+0x1c>
 80164b8:	2a00      	cmp	r2, #0
 80164ba:	d1f5      	bne.n	80164a8 <strncmp+0x8>
 80164bc:	1ad0      	subs	r0, r2, r3
 80164be:	bd10      	pop	{r4, pc}
 80164c0:	4610      	mov	r0, r2
 80164c2:	e7fc      	b.n	80164be <strncmp+0x1e>

080164c4 <_fstat_r>:
 80164c4:	b538      	push	{r3, r4, r5, lr}
 80164c6:	4d07      	ldr	r5, [pc, #28]	@ (80164e4 <_fstat_r+0x20>)
 80164c8:	2300      	movs	r3, #0
 80164ca:	4604      	mov	r4, r0
 80164cc:	4608      	mov	r0, r1
 80164ce:	4611      	mov	r1, r2
 80164d0:	602b      	str	r3, [r5, #0]
 80164d2:	f7ed fdd9 	bl	8004088 <_fstat>
 80164d6:	1c43      	adds	r3, r0, #1
 80164d8:	d102      	bne.n	80164e0 <_fstat_r+0x1c>
 80164da:	682b      	ldr	r3, [r5, #0]
 80164dc:	b103      	cbz	r3, 80164e0 <_fstat_r+0x1c>
 80164de:	6023      	str	r3, [r4, #0]
 80164e0:	bd38      	pop	{r3, r4, r5, pc}
 80164e2:	bf00      	nop
 80164e4:	20003e9c 	.word	0x20003e9c

080164e8 <_isatty_r>:
 80164e8:	b538      	push	{r3, r4, r5, lr}
 80164ea:	4d06      	ldr	r5, [pc, #24]	@ (8016504 <_isatty_r+0x1c>)
 80164ec:	2300      	movs	r3, #0
 80164ee:	4604      	mov	r4, r0
 80164f0:	4608      	mov	r0, r1
 80164f2:	602b      	str	r3, [r5, #0]
 80164f4:	f7ed fdd8 	bl	80040a8 <_isatty>
 80164f8:	1c43      	adds	r3, r0, #1
 80164fa:	d102      	bne.n	8016502 <_isatty_r+0x1a>
 80164fc:	682b      	ldr	r3, [r5, #0]
 80164fe:	b103      	cbz	r3, 8016502 <_isatty_r+0x1a>
 8016500:	6023      	str	r3, [r4, #0]
 8016502:	bd38      	pop	{r3, r4, r5, pc}
 8016504:	20003e9c 	.word	0x20003e9c

08016508 <_sbrk_r>:
 8016508:	b538      	push	{r3, r4, r5, lr}
 801650a:	4d06      	ldr	r5, [pc, #24]	@ (8016524 <_sbrk_r+0x1c>)
 801650c:	2300      	movs	r3, #0
 801650e:	4604      	mov	r4, r0
 8016510:	4608      	mov	r0, r1
 8016512:	602b      	str	r3, [r5, #0]
 8016514:	f7ed fde0 	bl	80040d8 <_sbrk>
 8016518:	1c43      	adds	r3, r0, #1
 801651a:	d102      	bne.n	8016522 <_sbrk_r+0x1a>
 801651c:	682b      	ldr	r3, [r5, #0]
 801651e:	b103      	cbz	r3, 8016522 <_sbrk_r+0x1a>
 8016520:	6023      	str	r3, [r4, #0]
 8016522:	bd38      	pop	{r3, r4, r5, pc}
 8016524:	20003e9c 	.word	0x20003e9c

08016528 <memcpy>:
 8016528:	440a      	add	r2, r1
 801652a:	4291      	cmp	r1, r2
 801652c:	f100 33ff 	add.w	r3, r0, #4294967295
 8016530:	d100      	bne.n	8016534 <memcpy+0xc>
 8016532:	4770      	bx	lr
 8016534:	b510      	push	{r4, lr}
 8016536:	f811 4b01 	ldrb.w	r4, [r1], #1
 801653a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801653e:	4291      	cmp	r1, r2
 8016540:	d1f9      	bne.n	8016536 <memcpy+0xe>
 8016542:	bd10      	pop	{r4, pc}
 8016544:	0000      	movs	r0, r0
	...

08016548 <nan>:
 8016548:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016550 <nan+0x8>
 801654c:	4770      	bx	lr
 801654e:	bf00      	nop
 8016550:	00000000 	.word	0x00000000
 8016554:	7ff80000 	.word	0x7ff80000

08016558 <__assert_func>:
 8016558:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801655a:	4614      	mov	r4, r2
 801655c:	461a      	mov	r2, r3
 801655e:	4b09      	ldr	r3, [pc, #36]	@ (8016584 <__assert_func+0x2c>)
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	4605      	mov	r5, r0
 8016564:	68d8      	ldr	r0, [r3, #12]
 8016566:	b954      	cbnz	r4, 801657e <__assert_func+0x26>
 8016568:	4b07      	ldr	r3, [pc, #28]	@ (8016588 <__assert_func+0x30>)
 801656a:	461c      	mov	r4, r3
 801656c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016570:	9100      	str	r1, [sp, #0]
 8016572:	462b      	mov	r3, r5
 8016574:	4905      	ldr	r1, [pc, #20]	@ (801658c <__assert_func+0x34>)
 8016576:	f000 fba7 	bl	8016cc8 <fiprintf>
 801657a:	f000 fbb7 	bl	8016cec <abort>
 801657e:	4b04      	ldr	r3, [pc, #16]	@ (8016590 <__assert_func+0x38>)
 8016580:	e7f4      	b.n	801656c <__assert_func+0x14>
 8016582:	bf00      	nop
 8016584:	200001d8 	.word	0x200001d8
 8016588:	08024e2d 	.word	0x08024e2d
 801658c:	08024dff 	.word	0x08024dff
 8016590:	08024df2 	.word	0x08024df2

08016594 <_calloc_r>:
 8016594:	b570      	push	{r4, r5, r6, lr}
 8016596:	fba1 5402 	umull	r5, r4, r1, r2
 801659a:	b93c      	cbnz	r4, 80165ac <_calloc_r+0x18>
 801659c:	4629      	mov	r1, r5
 801659e:	f7fd fffb 	bl	8014598 <_malloc_r>
 80165a2:	4606      	mov	r6, r0
 80165a4:	b928      	cbnz	r0, 80165b2 <_calloc_r+0x1e>
 80165a6:	2600      	movs	r6, #0
 80165a8:	4630      	mov	r0, r6
 80165aa:	bd70      	pop	{r4, r5, r6, pc}
 80165ac:	220c      	movs	r2, #12
 80165ae:	6002      	str	r2, [r0, #0]
 80165b0:	e7f9      	b.n	80165a6 <_calloc_r+0x12>
 80165b2:	462a      	mov	r2, r5
 80165b4:	4621      	mov	r1, r4
 80165b6:	f7fd f8a7 	bl	8013708 <memset>
 80165ba:	e7f5      	b.n	80165a8 <_calloc_r+0x14>

080165bc <rshift>:
 80165bc:	6903      	ldr	r3, [r0, #16]
 80165be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80165c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80165c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80165ca:	f100 0414 	add.w	r4, r0, #20
 80165ce:	dd45      	ble.n	801665c <rshift+0xa0>
 80165d0:	f011 011f 	ands.w	r1, r1, #31
 80165d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80165d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80165dc:	d10c      	bne.n	80165f8 <rshift+0x3c>
 80165de:	f100 0710 	add.w	r7, r0, #16
 80165e2:	4629      	mov	r1, r5
 80165e4:	42b1      	cmp	r1, r6
 80165e6:	d334      	bcc.n	8016652 <rshift+0x96>
 80165e8:	1a9b      	subs	r3, r3, r2
 80165ea:	009b      	lsls	r3, r3, #2
 80165ec:	1eea      	subs	r2, r5, #3
 80165ee:	4296      	cmp	r6, r2
 80165f0:	bf38      	it	cc
 80165f2:	2300      	movcc	r3, #0
 80165f4:	4423      	add	r3, r4
 80165f6:	e015      	b.n	8016624 <rshift+0x68>
 80165f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80165fc:	f1c1 0820 	rsb	r8, r1, #32
 8016600:	40cf      	lsrs	r7, r1
 8016602:	f105 0e04 	add.w	lr, r5, #4
 8016606:	46a1      	mov	r9, r4
 8016608:	4576      	cmp	r6, lr
 801660a:	46f4      	mov	ip, lr
 801660c:	d815      	bhi.n	801663a <rshift+0x7e>
 801660e:	1a9a      	subs	r2, r3, r2
 8016610:	0092      	lsls	r2, r2, #2
 8016612:	3a04      	subs	r2, #4
 8016614:	3501      	adds	r5, #1
 8016616:	42ae      	cmp	r6, r5
 8016618:	bf38      	it	cc
 801661a:	2200      	movcc	r2, #0
 801661c:	18a3      	adds	r3, r4, r2
 801661e:	50a7      	str	r7, [r4, r2]
 8016620:	b107      	cbz	r7, 8016624 <rshift+0x68>
 8016622:	3304      	adds	r3, #4
 8016624:	1b1a      	subs	r2, r3, r4
 8016626:	42a3      	cmp	r3, r4
 8016628:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801662c:	bf08      	it	eq
 801662e:	2300      	moveq	r3, #0
 8016630:	6102      	str	r2, [r0, #16]
 8016632:	bf08      	it	eq
 8016634:	6143      	streq	r3, [r0, #20]
 8016636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801663a:	f8dc c000 	ldr.w	ip, [ip]
 801663e:	fa0c fc08 	lsl.w	ip, ip, r8
 8016642:	ea4c 0707 	orr.w	r7, ip, r7
 8016646:	f849 7b04 	str.w	r7, [r9], #4
 801664a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801664e:	40cf      	lsrs	r7, r1
 8016650:	e7da      	b.n	8016608 <rshift+0x4c>
 8016652:	f851 cb04 	ldr.w	ip, [r1], #4
 8016656:	f847 cf04 	str.w	ip, [r7, #4]!
 801665a:	e7c3      	b.n	80165e4 <rshift+0x28>
 801665c:	4623      	mov	r3, r4
 801665e:	e7e1      	b.n	8016624 <rshift+0x68>

08016660 <__hexdig_fun>:
 8016660:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8016664:	2b09      	cmp	r3, #9
 8016666:	d802      	bhi.n	801666e <__hexdig_fun+0xe>
 8016668:	3820      	subs	r0, #32
 801666a:	b2c0      	uxtb	r0, r0
 801666c:	4770      	bx	lr
 801666e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8016672:	2b05      	cmp	r3, #5
 8016674:	d801      	bhi.n	801667a <__hexdig_fun+0x1a>
 8016676:	3847      	subs	r0, #71	@ 0x47
 8016678:	e7f7      	b.n	801666a <__hexdig_fun+0xa>
 801667a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801667e:	2b05      	cmp	r3, #5
 8016680:	d801      	bhi.n	8016686 <__hexdig_fun+0x26>
 8016682:	3827      	subs	r0, #39	@ 0x27
 8016684:	e7f1      	b.n	801666a <__hexdig_fun+0xa>
 8016686:	2000      	movs	r0, #0
 8016688:	4770      	bx	lr
	...

0801668c <__gethex>:
 801668c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016690:	b085      	sub	sp, #20
 8016692:	468a      	mov	sl, r1
 8016694:	9302      	str	r3, [sp, #8]
 8016696:	680b      	ldr	r3, [r1, #0]
 8016698:	9001      	str	r0, [sp, #4]
 801669a:	4690      	mov	r8, r2
 801669c:	1c9c      	adds	r4, r3, #2
 801669e:	46a1      	mov	r9, r4
 80166a0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80166a4:	2830      	cmp	r0, #48	@ 0x30
 80166a6:	d0fa      	beq.n	801669e <__gethex+0x12>
 80166a8:	eba9 0303 	sub.w	r3, r9, r3
 80166ac:	f1a3 0b02 	sub.w	fp, r3, #2
 80166b0:	f7ff ffd6 	bl	8016660 <__hexdig_fun>
 80166b4:	4605      	mov	r5, r0
 80166b6:	2800      	cmp	r0, #0
 80166b8:	d168      	bne.n	801678c <__gethex+0x100>
 80166ba:	49a0      	ldr	r1, [pc, #640]	@ (801693c <__gethex+0x2b0>)
 80166bc:	2201      	movs	r2, #1
 80166be:	4648      	mov	r0, r9
 80166c0:	f7ff feee 	bl	80164a0 <strncmp>
 80166c4:	4607      	mov	r7, r0
 80166c6:	2800      	cmp	r0, #0
 80166c8:	d167      	bne.n	801679a <__gethex+0x10e>
 80166ca:	f899 0001 	ldrb.w	r0, [r9, #1]
 80166ce:	4626      	mov	r6, r4
 80166d0:	f7ff ffc6 	bl	8016660 <__hexdig_fun>
 80166d4:	2800      	cmp	r0, #0
 80166d6:	d062      	beq.n	801679e <__gethex+0x112>
 80166d8:	4623      	mov	r3, r4
 80166da:	7818      	ldrb	r0, [r3, #0]
 80166dc:	2830      	cmp	r0, #48	@ 0x30
 80166de:	4699      	mov	r9, r3
 80166e0:	f103 0301 	add.w	r3, r3, #1
 80166e4:	d0f9      	beq.n	80166da <__gethex+0x4e>
 80166e6:	f7ff ffbb 	bl	8016660 <__hexdig_fun>
 80166ea:	fab0 f580 	clz	r5, r0
 80166ee:	096d      	lsrs	r5, r5, #5
 80166f0:	f04f 0b01 	mov.w	fp, #1
 80166f4:	464a      	mov	r2, r9
 80166f6:	4616      	mov	r6, r2
 80166f8:	3201      	adds	r2, #1
 80166fa:	7830      	ldrb	r0, [r6, #0]
 80166fc:	f7ff ffb0 	bl	8016660 <__hexdig_fun>
 8016700:	2800      	cmp	r0, #0
 8016702:	d1f8      	bne.n	80166f6 <__gethex+0x6a>
 8016704:	498d      	ldr	r1, [pc, #564]	@ (801693c <__gethex+0x2b0>)
 8016706:	2201      	movs	r2, #1
 8016708:	4630      	mov	r0, r6
 801670a:	f7ff fec9 	bl	80164a0 <strncmp>
 801670e:	2800      	cmp	r0, #0
 8016710:	d13f      	bne.n	8016792 <__gethex+0x106>
 8016712:	b944      	cbnz	r4, 8016726 <__gethex+0x9a>
 8016714:	1c74      	adds	r4, r6, #1
 8016716:	4622      	mov	r2, r4
 8016718:	4616      	mov	r6, r2
 801671a:	3201      	adds	r2, #1
 801671c:	7830      	ldrb	r0, [r6, #0]
 801671e:	f7ff ff9f 	bl	8016660 <__hexdig_fun>
 8016722:	2800      	cmp	r0, #0
 8016724:	d1f8      	bne.n	8016718 <__gethex+0x8c>
 8016726:	1ba4      	subs	r4, r4, r6
 8016728:	00a7      	lsls	r7, r4, #2
 801672a:	7833      	ldrb	r3, [r6, #0]
 801672c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8016730:	2b50      	cmp	r3, #80	@ 0x50
 8016732:	d13e      	bne.n	80167b2 <__gethex+0x126>
 8016734:	7873      	ldrb	r3, [r6, #1]
 8016736:	2b2b      	cmp	r3, #43	@ 0x2b
 8016738:	d033      	beq.n	80167a2 <__gethex+0x116>
 801673a:	2b2d      	cmp	r3, #45	@ 0x2d
 801673c:	d034      	beq.n	80167a8 <__gethex+0x11c>
 801673e:	1c71      	adds	r1, r6, #1
 8016740:	2400      	movs	r4, #0
 8016742:	7808      	ldrb	r0, [r1, #0]
 8016744:	f7ff ff8c 	bl	8016660 <__hexdig_fun>
 8016748:	1e43      	subs	r3, r0, #1
 801674a:	b2db      	uxtb	r3, r3
 801674c:	2b18      	cmp	r3, #24
 801674e:	d830      	bhi.n	80167b2 <__gethex+0x126>
 8016750:	f1a0 0210 	sub.w	r2, r0, #16
 8016754:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016758:	f7ff ff82 	bl	8016660 <__hexdig_fun>
 801675c:	f100 3cff 	add.w	ip, r0, #4294967295
 8016760:	fa5f fc8c 	uxtb.w	ip, ip
 8016764:	f1bc 0f18 	cmp.w	ip, #24
 8016768:	f04f 030a 	mov.w	r3, #10
 801676c:	d91e      	bls.n	80167ac <__gethex+0x120>
 801676e:	b104      	cbz	r4, 8016772 <__gethex+0xe6>
 8016770:	4252      	negs	r2, r2
 8016772:	4417      	add	r7, r2
 8016774:	f8ca 1000 	str.w	r1, [sl]
 8016778:	b1ed      	cbz	r5, 80167b6 <__gethex+0x12a>
 801677a:	f1bb 0f00 	cmp.w	fp, #0
 801677e:	bf0c      	ite	eq
 8016780:	2506      	moveq	r5, #6
 8016782:	2500      	movne	r5, #0
 8016784:	4628      	mov	r0, r5
 8016786:	b005      	add	sp, #20
 8016788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801678c:	2500      	movs	r5, #0
 801678e:	462c      	mov	r4, r5
 8016790:	e7b0      	b.n	80166f4 <__gethex+0x68>
 8016792:	2c00      	cmp	r4, #0
 8016794:	d1c7      	bne.n	8016726 <__gethex+0x9a>
 8016796:	4627      	mov	r7, r4
 8016798:	e7c7      	b.n	801672a <__gethex+0x9e>
 801679a:	464e      	mov	r6, r9
 801679c:	462f      	mov	r7, r5
 801679e:	2501      	movs	r5, #1
 80167a0:	e7c3      	b.n	801672a <__gethex+0x9e>
 80167a2:	2400      	movs	r4, #0
 80167a4:	1cb1      	adds	r1, r6, #2
 80167a6:	e7cc      	b.n	8016742 <__gethex+0xb6>
 80167a8:	2401      	movs	r4, #1
 80167aa:	e7fb      	b.n	80167a4 <__gethex+0x118>
 80167ac:	fb03 0002 	mla	r0, r3, r2, r0
 80167b0:	e7ce      	b.n	8016750 <__gethex+0xc4>
 80167b2:	4631      	mov	r1, r6
 80167b4:	e7de      	b.n	8016774 <__gethex+0xe8>
 80167b6:	eba6 0309 	sub.w	r3, r6, r9
 80167ba:	3b01      	subs	r3, #1
 80167bc:	4629      	mov	r1, r5
 80167be:	2b07      	cmp	r3, #7
 80167c0:	dc0a      	bgt.n	80167d8 <__gethex+0x14c>
 80167c2:	9801      	ldr	r0, [sp, #4]
 80167c4:	f7fd ff74 	bl	80146b0 <_Balloc>
 80167c8:	4604      	mov	r4, r0
 80167ca:	b940      	cbnz	r0, 80167de <__gethex+0x152>
 80167cc:	4b5c      	ldr	r3, [pc, #368]	@ (8016940 <__gethex+0x2b4>)
 80167ce:	4602      	mov	r2, r0
 80167d0:	21e4      	movs	r1, #228	@ 0xe4
 80167d2:	485c      	ldr	r0, [pc, #368]	@ (8016944 <__gethex+0x2b8>)
 80167d4:	f7ff fec0 	bl	8016558 <__assert_func>
 80167d8:	3101      	adds	r1, #1
 80167da:	105b      	asrs	r3, r3, #1
 80167dc:	e7ef      	b.n	80167be <__gethex+0x132>
 80167de:	f100 0a14 	add.w	sl, r0, #20
 80167e2:	2300      	movs	r3, #0
 80167e4:	4655      	mov	r5, sl
 80167e6:	469b      	mov	fp, r3
 80167e8:	45b1      	cmp	r9, r6
 80167ea:	d337      	bcc.n	801685c <__gethex+0x1d0>
 80167ec:	f845 bb04 	str.w	fp, [r5], #4
 80167f0:	eba5 050a 	sub.w	r5, r5, sl
 80167f4:	10ad      	asrs	r5, r5, #2
 80167f6:	6125      	str	r5, [r4, #16]
 80167f8:	4658      	mov	r0, fp
 80167fa:	f7fe f84b 	bl	8014894 <__hi0bits>
 80167fe:	016d      	lsls	r5, r5, #5
 8016800:	f8d8 6000 	ldr.w	r6, [r8]
 8016804:	1a2d      	subs	r5, r5, r0
 8016806:	42b5      	cmp	r5, r6
 8016808:	dd54      	ble.n	80168b4 <__gethex+0x228>
 801680a:	1bad      	subs	r5, r5, r6
 801680c:	4629      	mov	r1, r5
 801680e:	4620      	mov	r0, r4
 8016810:	f7fe fbdf 	bl	8014fd2 <__any_on>
 8016814:	4681      	mov	r9, r0
 8016816:	b178      	cbz	r0, 8016838 <__gethex+0x1ac>
 8016818:	1e6b      	subs	r3, r5, #1
 801681a:	1159      	asrs	r1, r3, #5
 801681c:	f003 021f 	and.w	r2, r3, #31
 8016820:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8016824:	f04f 0901 	mov.w	r9, #1
 8016828:	fa09 f202 	lsl.w	r2, r9, r2
 801682c:	420a      	tst	r2, r1
 801682e:	d003      	beq.n	8016838 <__gethex+0x1ac>
 8016830:	454b      	cmp	r3, r9
 8016832:	dc36      	bgt.n	80168a2 <__gethex+0x216>
 8016834:	f04f 0902 	mov.w	r9, #2
 8016838:	4629      	mov	r1, r5
 801683a:	4620      	mov	r0, r4
 801683c:	f7ff febe 	bl	80165bc <rshift>
 8016840:	442f      	add	r7, r5
 8016842:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016846:	42bb      	cmp	r3, r7
 8016848:	da42      	bge.n	80168d0 <__gethex+0x244>
 801684a:	9801      	ldr	r0, [sp, #4]
 801684c:	4621      	mov	r1, r4
 801684e:	f7fd ff6f 	bl	8014730 <_Bfree>
 8016852:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016854:	2300      	movs	r3, #0
 8016856:	6013      	str	r3, [r2, #0]
 8016858:	25a3      	movs	r5, #163	@ 0xa3
 801685a:	e793      	b.n	8016784 <__gethex+0xf8>
 801685c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8016860:	2a2e      	cmp	r2, #46	@ 0x2e
 8016862:	d012      	beq.n	801688a <__gethex+0x1fe>
 8016864:	2b20      	cmp	r3, #32
 8016866:	d104      	bne.n	8016872 <__gethex+0x1e6>
 8016868:	f845 bb04 	str.w	fp, [r5], #4
 801686c:	f04f 0b00 	mov.w	fp, #0
 8016870:	465b      	mov	r3, fp
 8016872:	7830      	ldrb	r0, [r6, #0]
 8016874:	9303      	str	r3, [sp, #12]
 8016876:	f7ff fef3 	bl	8016660 <__hexdig_fun>
 801687a:	9b03      	ldr	r3, [sp, #12]
 801687c:	f000 000f 	and.w	r0, r0, #15
 8016880:	4098      	lsls	r0, r3
 8016882:	ea4b 0b00 	orr.w	fp, fp, r0
 8016886:	3304      	adds	r3, #4
 8016888:	e7ae      	b.n	80167e8 <__gethex+0x15c>
 801688a:	45b1      	cmp	r9, r6
 801688c:	d8ea      	bhi.n	8016864 <__gethex+0x1d8>
 801688e:	492b      	ldr	r1, [pc, #172]	@ (801693c <__gethex+0x2b0>)
 8016890:	9303      	str	r3, [sp, #12]
 8016892:	2201      	movs	r2, #1
 8016894:	4630      	mov	r0, r6
 8016896:	f7ff fe03 	bl	80164a0 <strncmp>
 801689a:	9b03      	ldr	r3, [sp, #12]
 801689c:	2800      	cmp	r0, #0
 801689e:	d1e1      	bne.n	8016864 <__gethex+0x1d8>
 80168a0:	e7a2      	b.n	80167e8 <__gethex+0x15c>
 80168a2:	1ea9      	subs	r1, r5, #2
 80168a4:	4620      	mov	r0, r4
 80168a6:	f7fe fb94 	bl	8014fd2 <__any_on>
 80168aa:	2800      	cmp	r0, #0
 80168ac:	d0c2      	beq.n	8016834 <__gethex+0x1a8>
 80168ae:	f04f 0903 	mov.w	r9, #3
 80168b2:	e7c1      	b.n	8016838 <__gethex+0x1ac>
 80168b4:	da09      	bge.n	80168ca <__gethex+0x23e>
 80168b6:	1b75      	subs	r5, r6, r5
 80168b8:	4621      	mov	r1, r4
 80168ba:	9801      	ldr	r0, [sp, #4]
 80168bc:	462a      	mov	r2, r5
 80168be:	f7fe f94f 	bl	8014b60 <__lshift>
 80168c2:	1b7f      	subs	r7, r7, r5
 80168c4:	4604      	mov	r4, r0
 80168c6:	f100 0a14 	add.w	sl, r0, #20
 80168ca:	f04f 0900 	mov.w	r9, #0
 80168ce:	e7b8      	b.n	8016842 <__gethex+0x1b6>
 80168d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80168d4:	42bd      	cmp	r5, r7
 80168d6:	dd6f      	ble.n	80169b8 <__gethex+0x32c>
 80168d8:	1bed      	subs	r5, r5, r7
 80168da:	42ae      	cmp	r6, r5
 80168dc:	dc34      	bgt.n	8016948 <__gethex+0x2bc>
 80168de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80168e2:	2b02      	cmp	r3, #2
 80168e4:	d022      	beq.n	801692c <__gethex+0x2a0>
 80168e6:	2b03      	cmp	r3, #3
 80168e8:	d024      	beq.n	8016934 <__gethex+0x2a8>
 80168ea:	2b01      	cmp	r3, #1
 80168ec:	d115      	bne.n	801691a <__gethex+0x28e>
 80168ee:	42ae      	cmp	r6, r5
 80168f0:	d113      	bne.n	801691a <__gethex+0x28e>
 80168f2:	2e01      	cmp	r6, #1
 80168f4:	d10b      	bne.n	801690e <__gethex+0x282>
 80168f6:	9a02      	ldr	r2, [sp, #8]
 80168f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80168fc:	6013      	str	r3, [r2, #0]
 80168fe:	2301      	movs	r3, #1
 8016900:	6123      	str	r3, [r4, #16]
 8016902:	f8ca 3000 	str.w	r3, [sl]
 8016906:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016908:	2562      	movs	r5, #98	@ 0x62
 801690a:	601c      	str	r4, [r3, #0]
 801690c:	e73a      	b.n	8016784 <__gethex+0xf8>
 801690e:	1e71      	subs	r1, r6, #1
 8016910:	4620      	mov	r0, r4
 8016912:	f7fe fb5e 	bl	8014fd2 <__any_on>
 8016916:	2800      	cmp	r0, #0
 8016918:	d1ed      	bne.n	80168f6 <__gethex+0x26a>
 801691a:	9801      	ldr	r0, [sp, #4]
 801691c:	4621      	mov	r1, r4
 801691e:	f7fd ff07 	bl	8014730 <_Bfree>
 8016922:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016924:	2300      	movs	r3, #0
 8016926:	6013      	str	r3, [r2, #0]
 8016928:	2550      	movs	r5, #80	@ 0x50
 801692a:	e72b      	b.n	8016784 <__gethex+0xf8>
 801692c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801692e:	2b00      	cmp	r3, #0
 8016930:	d1f3      	bne.n	801691a <__gethex+0x28e>
 8016932:	e7e0      	b.n	80168f6 <__gethex+0x26a>
 8016934:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016936:	2b00      	cmp	r3, #0
 8016938:	d1dd      	bne.n	80168f6 <__gethex+0x26a>
 801693a:	e7ee      	b.n	801691a <__gethex+0x28e>
 801693c:	08024c80 	.word	0x08024c80
 8016940:	08024b19 	.word	0x08024b19
 8016944:	08024e2e 	.word	0x08024e2e
 8016948:	1e6f      	subs	r7, r5, #1
 801694a:	f1b9 0f00 	cmp.w	r9, #0
 801694e:	d130      	bne.n	80169b2 <__gethex+0x326>
 8016950:	b127      	cbz	r7, 801695c <__gethex+0x2d0>
 8016952:	4639      	mov	r1, r7
 8016954:	4620      	mov	r0, r4
 8016956:	f7fe fb3c 	bl	8014fd2 <__any_on>
 801695a:	4681      	mov	r9, r0
 801695c:	117a      	asrs	r2, r7, #5
 801695e:	2301      	movs	r3, #1
 8016960:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8016964:	f007 071f 	and.w	r7, r7, #31
 8016968:	40bb      	lsls	r3, r7
 801696a:	4213      	tst	r3, r2
 801696c:	4629      	mov	r1, r5
 801696e:	4620      	mov	r0, r4
 8016970:	bf18      	it	ne
 8016972:	f049 0902 	orrne.w	r9, r9, #2
 8016976:	f7ff fe21 	bl	80165bc <rshift>
 801697a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801697e:	1b76      	subs	r6, r6, r5
 8016980:	2502      	movs	r5, #2
 8016982:	f1b9 0f00 	cmp.w	r9, #0
 8016986:	d047      	beq.n	8016a18 <__gethex+0x38c>
 8016988:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801698c:	2b02      	cmp	r3, #2
 801698e:	d015      	beq.n	80169bc <__gethex+0x330>
 8016990:	2b03      	cmp	r3, #3
 8016992:	d017      	beq.n	80169c4 <__gethex+0x338>
 8016994:	2b01      	cmp	r3, #1
 8016996:	d109      	bne.n	80169ac <__gethex+0x320>
 8016998:	f019 0f02 	tst.w	r9, #2
 801699c:	d006      	beq.n	80169ac <__gethex+0x320>
 801699e:	f8da 3000 	ldr.w	r3, [sl]
 80169a2:	ea49 0903 	orr.w	r9, r9, r3
 80169a6:	f019 0f01 	tst.w	r9, #1
 80169aa:	d10e      	bne.n	80169ca <__gethex+0x33e>
 80169ac:	f045 0510 	orr.w	r5, r5, #16
 80169b0:	e032      	b.n	8016a18 <__gethex+0x38c>
 80169b2:	f04f 0901 	mov.w	r9, #1
 80169b6:	e7d1      	b.n	801695c <__gethex+0x2d0>
 80169b8:	2501      	movs	r5, #1
 80169ba:	e7e2      	b.n	8016982 <__gethex+0x2f6>
 80169bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80169be:	f1c3 0301 	rsb	r3, r3, #1
 80169c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80169c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d0f0      	beq.n	80169ac <__gethex+0x320>
 80169ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80169ce:	f104 0314 	add.w	r3, r4, #20
 80169d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80169d6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80169da:	f04f 0c00 	mov.w	ip, #0
 80169de:	4618      	mov	r0, r3
 80169e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80169e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80169e8:	d01b      	beq.n	8016a22 <__gethex+0x396>
 80169ea:	3201      	adds	r2, #1
 80169ec:	6002      	str	r2, [r0, #0]
 80169ee:	2d02      	cmp	r5, #2
 80169f0:	f104 0314 	add.w	r3, r4, #20
 80169f4:	d13c      	bne.n	8016a70 <__gethex+0x3e4>
 80169f6:	f8d8 2000 	ldr.w	r2, [r8]
 80169fa:	3a01      	subs	r2, #1
 80169fc:	42b2      	cmp	r2, r6
 80169fe:	d109      	bne.n	8016a14 <__gethex+0x388>
 8016a00:	1171      	asrs	r1, r6, #5
 8016a02:	2201      	movs	r2, #1
 8016a04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016a08:	f006 061f 	and.w	r6, r6, #31
 8016a0c:	fa02 f606 	lsl.w	r6, r2, r6
 8016a10:	421e      	tst	r6, r3
 8016a12:	d13a      	bne.n	8016a8a <__gethex+0x3fe>
 8016a14:	f045 0520 	orr.w	r5, r5, #32
 8016a18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016a1a:	601c      	str	r4, [r3, #0]
 8016a1c:	9b02      	ldr	r3, [sp, #8]
 8016a1e:	601f      	str	r7, [r3, #0]
 8016a20:	e6b0      	b.n	8016784 <__gethex+0xf8>
 8016a22:	4299      	cmp	r1, r3
 8016a24:	f843 cc04 	str.w	ip, [r3, #-4]
 8016a28:	d8d9      	bhi.n	80169de <__gethex+0x352>
 8016a2a:	68a3      	ldr	r3, [r4, #8]
 8016a2c:	459b      	cmp	fp, r3
 8016a2e:	db17      	blt.n	8016a60 <__gethex+0x3d4>
 8016a30:	6861      	ldr	r1, [r4, #4]
 8016a32:	9801      	ldr	r0, [sp, #4]
 8016a34:	3101      	adds	r1, #1
 8016a36:	f7fd fe3b 	bl	80146b0 <_Balloc>
 8016a3a:	4681      	mov	r9, r0
 8016a3c:	b918      	cbnz	r0, 8016a46 <__gethex+0x3ba>
 8016a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8016aa8 <__gethex+0x41c>)
 8016a40:	4602      	mov	r2, r0
 8016a42:	2184      	movs	r1, #132	@ 0x84
 8016a44:	e6c5      	b.n	80167d2 <__gethex+0x146>
 8016a46:	6922      	ldr	r2, [r4, #16]
 8016a48:	3202      	adds	r2, #2
 8016a4a:	f104 010c 	add.w	r1, r4, #12
 8016a4e:	0092      	lsls	r2, r2, #2
 8016a50:	300c      	adds	r0, #12
 8016a52:	f7ff fd69 	bl	8016528 <memcpy>
 8016a56:	4621      	mov	r1, r4
 8016a58:	9801      	ldr	r0, [sp, #4]
 8016a5a:	f7fd fe69 	bl	8014730 <_Bfree>
 8016a5e:	464c      	mov	r4, r9
 8016a60:	6923      	ldr	r3, [r4, #16]
 8016a62:	1c5a      	adds	r2, r3, #1
 8016a64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016a68:	6122      	str	r2, [r4, #16]
 8016a6a:	2201      	movs	r2, #1
 8016a6c:	615a      	str	r2, [r3, #20]
 8016a6e:	e7be      	b.n	80169ee <__gethex+0x362>
 8016a70:	6922      	ldr	r2, [r4, #16]
 8016a72:	455a      	cmp	r2, fp
 8016a74:	dd0b      	ble.n	8016a8e <__gethex+0x402>
 8016a76:	2101      	movs	r1, #1
 8016a78:	4620      	mov	r0, r4
 8016a7a:	f7ff fd9f 	bl	80165bc <rshift>
 8016a7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016a82:	3701      	adds	r7, #1
 8016a84:	42bb      	cmp	r3, r7
 8016a86:	f6ff aee0 	blt.w	801684a <__gethex+0x1be>
 8016a8a:	2501      	movs	r5, #1
 8016a8c:	e7c2      	b.n	8016a14 <__gethex+0x388>
 8016a8e:	f016 061f 	ands.w	r6, r6, #31
 8016a92:	d0fa      	beq.n	8016a8a <__gethex+0x3fe>
 8016a94:	4453      	add	r3, sl
 8016a96:	f1c6 0620 	rsb	r6, r6, #32
 8016a9a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8016a9e:	f7fd fef9 	bl	8014894 <__hi0bits>
 8016aa2:	42b0      	cmp	r0, r6
 8016aa4:	dbe7      	blt.n	8016a76 <__gethex+0x3ea>
 8016aa6:	e7f0      	b.n	8016a8a <__gethex+0x3fe>
 8016aa8:	08024b19 	.word	0x08024b19

08016aac <L_shift>:
 8016aac:	f1c2 0208 	rsb	r2, r2, #8
 8016ab0:	0092      	lsls	r2, r2, #2
 8016ab2:	b570      	push	{r4, r5, r6, lr}
 8016ab4:	f1c2 0620 	rsb	r6, r2, #32
 8016ab8:	6843      	ldr	r3, [r0, #4]
 8016aba:	6804      	ldr	r4, [r0, #0]
 8016abc:	fa03 f506 	lsl.w	r5, r3, r6
 8016ac0:	432c      	orrs	r4, r5
 8016ac2:	40d3      	lsrs	r3, r2
 8016ac4:	6004      	str	r4, [r0, #0]
 8016ac6:	f840 3f04 	str.w	r3, [r0, #4]!
 8016aca:	4288      	cmp	r0, r1
 8016acc:	d3f4      	bcc.n	8016ab8 <L_shift+0xc>
 8016ace:	bd70      	pop	{r4, r5, r6, pc}

08016ad0 <__match>:
 8016ad0:	b530      	push	{r4, r5, lr}
 8016ad2:	6803      	ldr	r3, [r0, #0]
 8016ad4:	3301      	adds	r3, #1
 8016ad6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016ada:	b914      	cbnz	r4, 8016ae2 <__match+0x12>
 8016adc:	6003      	str	r3, [r0, #0]
 8016ade:	2001      	movs	r0, #1
 8016ae0:	bd30      	pop	{r4, r5, pc}
 8016ae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016ae6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8016aea:	2d19      	cmp	r5, #25
 8016aec:	bf98      	it	ls
 8016aee:	3220      	addls	r2, #32
 8016af0:	42a2      	cmp	r2, r4
 8016af2:	d0f0      	beq.n	8016ad6 <__match+0x6>
 8016af4:	2000      	movs	r0, #0
 8016af6:	e7f3      	b.n	8016ae0 <__match+0x10>

08016af8 <__hexnan>:
 8016af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016afc:	680b      	ldr	r3, [r1, #0]
 8016afe:	6801      	ldr	r1, [r0, #0]
 8016b00:	115e      	asrs	r6, r3, #5
 8016b02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016b06:	f013 031f 	ands.w	r3, r3, #31
 8016b0a:	b087      	sub	sp, #28
 8016b0c:	bf18      	it	ne
 8016b0e:	3604      	addne	r6, #4
 8016b10:	2500      	movs	r5, #0
 8016b12:	1f37      	subs	r7, r6, #4
 8016b14:	4682      	mov	sl, r0
 8016b16:	4690      	mov	r8, r2
 8016b18:	9301      	str	r3, [sp, #4]
 8016b1a:	f846 5c04 	str.w	r5, [r6, #-4]
 8016b1e:	46b9      	mov	r9, r7
 8016b20:	463c      	mov	r4, r7
 8016b22:	9502      	str	r5, [sp, #8]
 8016b24:	46ab      	mov	fp, r5
 8016b26:	784a      	ldrb	r2, [r1, #1]
 8016b28:	1c4b      	adds	r3, r1, #1
 8016b2a:	9303      	str	r3, [sp, #12]
 8016b2c:	b342      	cbz	r2, 8016b80 <__hexnan+0x88>
 8016b2e:	4610      	mov	r0, r2
 8016b30:	9105      	str	r1, [sp, #20]
 8016b32:	9204      	str	r2, [sp, #16]
 8016b34:	f7ff fd94 	bl	8016660 <__hexdig_fun>
 8016b38:	2800      	cmp	r0, #0
 8016b3a:	d151      	bne.n	8016be0 <__hexnan+0xe8>
 8016b3c:	9a04      	ldr	r2, [sp, #16]
 8016b3e:	9905      	ldr	r1, [sp, #20]
 8016b40:	2a20      	cmp	r2, #32
 8016b42:	d818      	bhi.n	8016b76 <__hexnan+0x7e>
 8016b44:	9b02      	ldr	r3, [sp, #8]
 8016b46:	459b      	cmp	fp, r3
 8016b48:	dd13      	ble.n	8016b72 <__hexnan+0x7a>
 8016b4a:	454c      	cmp	r4, r9
 8016b4c:	d206      	bcs.n	8016b5c <__hexnan+0x64>
 8016b4e:	2d07      	cmp	r5, #7
 8016b50:	dc04      	bgt.n	8016b5c <__hexnan+0x64>
 8016b52:	462a      	mov	r2, r5
 8016b54:	4649      	mov	r1, r9
 8016b56:	4620      	mov	r0, r4
 8016b58:	f7ff ffa8 	bl	8016aac <L_shift>
 8016b5c:	4544      	cmp	r4, r8
 8016b5e:	d952      	bls.n	8016c06 <__hexnan+0x10e>
 8016b60:	2300      	movs	r3, #0
 8016b62:	f1a4 0904 	sub.w	r9, r4, #4
 8016b66:	f844 3c04 	str.w	r3, [r4, #-4]
 8016b6a:	f8cd b008 	str.w	fp, [sp, #8]
 8016b6e:	464c      	mov	r4, r9
 8016b70:	461d      	mov	r5, r3
 8016b72:	9903      	ldr	r1, [sp, #12]
 8016b74:	e7d7      	b.n	8016b26 <__hexnan+0x2e>
 8016b76:	2a29      	cmp	r2, #41	@ 0x29
 8016b78:	d157      	bne.n	8016c2a <__hexnan+0x132>
 8016b7a:	3102      	adds	r1, #2
 8016b7c:	f8ca 1000 	str.w	r1, [sl]
 8016b80:	f1bb 0f00 	cmp.w	fp, #0
 8016b84:	d051      	beq.n	8016c2a <__hexnan+0x132>
 8016b86:	454c      	cmp	r4, r9
 8016b88:	d206      	bcs.n	8016b98 <__hexnan+0xa0>
 8016b8a:	2d07      	cmp	r5, #7
 8016b8c:	dc04      	bgt.n	8016b98 <__hexnan+0xa0>
 8016b8e:	462a      	mov	r2, r5
 8016b90:	4649      	mov	r1, r9
 8016b92:	4620      	mov	r0, r4
 8016b94:	f7ff ff8a 	bl	8016aac <L_shift>
 8016b98:	4544      	cmp	r4, r8
 8016b9a:	d936      	bls.n	8016c0a <__hexnan+0x112>
 8016b9c:	f1a8 0204 	sub.w	r2, r8, #4
 8016ba0:	4623      	mov	r3, r4
 8016ba2:	f853 1b04 	ldr.w	r1, [r3], #4
 8016ba6:	f842 1f04 	str.w	r1, [r2, #4]!
 8016baa:	429f      	cmp	r7, r3
 8016bac:	d2f9      	bcs.n	8016ba2 <__hexnan+0xaa>
 8016bae:	1b3b      	subs	r3, r7, r4
 8016bb0:	f023 0303 	bic.w	r3, r3, #3
 8016bb4:	3304      	adds	r3, #4
 8016bb6:	3401      	adds	r4, #1
 8016bb8:	3e03      	subs	r6, #3
 8016bba:	42b4      	cmp	r4, r6
 8016bbc:	bf88      	it	hi
 8016bbe:	2304      	movhi	r3, #4
 8016bc0:	4443      	add	r3, r8
 8016bc2:	2200      	movs	r2, #0
 8016bc4:	f843 2b04 	str.w	r2, [r3], #4
 8016bc8:	429f      	cmp	r7, r3
 8016bca:	d2fb      	bcs.n	8016bc4 <__hexnan+0xcc>
 8016bcc:	683b      	ldr	r3, [r7, #0]
 8016bce:	b91b      	cbnz	r3, 8016bd8 <__hexnan+0xe0>
 8016bd0:	4547      	cmp	r7, r8
 8016bd2:	d128      	bne.n	8016c26 <__hexnan+0x12e>
 8016bd4:	2301      	movs	r3, #1
 8016bd6:	603b      	str	r3, [r7, #0]
 8016bd8:	2005      	movs	r0, #5
 8016bda:	b007      	add	sp, #28
 8016bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016be0:	3501      	adds	r5, #1
 8016be2:	2d08      	cmp	r5, #8
 8016be4:	f10b 0b01 	add.w	fp, fp, #1
 8016be8:	dd06      	ble.n	8016bf8 <__hexnan+0x100>
 8016bea:	4544      	cmp	r4, r8
 8016bec:	d9c1      	bls.n	8016b72 <__hexnan+0x7a>
 8016bee:	2300      	movs	r3, #0
 8016bf0:	f844 3c04 	str.w	r3, [r4, #-4]
 8016bf4:	2501      	movs	r5, #1
 8016bf6:	3c04      	subs	r4, #4
 8016bf8:	6822      	ldr	r2, [r4, #0]
 8016bfa:	f000 000f 	and.w	r0, r0, #15
 8016bfe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016c02:	6020      	str	r0, [r4, #0]
 8016c04:	e7b5      	b.n	8016b72 <__hexnan+0x7a>
 8016c06:	2508      	movs	r5, #8
 8016c08:	e7b3      	b.n	8016b72 <__hexnan+0x7a>
 8016c0a:	9b01      	ldr	r3, [sp, #4]
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d0dd      	beq.n	8016bcc <__hexnan+0xd4>
 8016c10:	f1c3 0320 	rsb	r3, r3, #32
 8016c14:	f04f 32ff 	mov.w	r2, #4294967295
 8016c18:	40da      	lsrs	r2, r3
 8016c1a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8016c1e:	4013      	ands	r3, r2
 8016c20:	f846 3c04 	str.w	r3, [r6, #-4]
 8016c24:	e7d2      	b.n	8016bcc <__hexnan+0xd4>
 8016c26:	3f04      	subs	r7, #4
 8016c28:	e7d0      	b.n	8016bcc <__hexnan+0xd4>
 8016c2a:	2004      	movs	r0, #4
 8016c2c:	e7d5      	b.n	8016bda <__hexnan+0xe2>

08016c2e <__ascii_mbtowc>:
 8016c2e:	b082      	sub	sp, #8
 8016c30:	b901      	cbnz	r1, 8016c34 <__ascii_mbtowc+0x6>
 8016c32:	a901      	add	r1, sp, #4
 8016c34:	b142      	cbz	r2, 8016c48 <__ascii_mbtowc+0x1a>
 8016c36:	b14b      	cbz	r3, 8016c4c <__ascii_mbtowc+0x1e>
 8016c38:	7813      	ldrb	r3, [r2, #0]
 8016c3a:	600b      	str	r3, [r1, #0]
 8016c3c:	7812      	ldrb	r2, [r2, #0]
 8016c3e:	1e10      	subs	r0, r2, #0
 8016c40:	bf18      	it	ne
 8016c42:	2001      	movne	r0, #1
 8016c44:	b002      	add	sp, #8
 8016c46:	4770      	bx	lr
 8016c48:	4610      	mov	r0, r2
 8016c4a:	e7fb      	b.n	8016c44 <__ascii_mbtowc+0x16>
 8016c4c:	f06f 0001 	mvn.w	r0, #1
 8016c50:	e7f8      	b.n	8016c44 <__ascii_mbtowc+0x16>

08016c52 <_realloc_r>:
 8016c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c56:	4680      	mov	r8, r0
 8016c58:	4615      	mov	r5, r2
 8016c5a:	460c      	mov	r4, r1
 8016c5c:	b921      	cbnz	r1, 8016c68 <_realloc_r+0x16>
 8016c5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c62:	4611      	mov	r1, r2
 8016c64:	f7fd bc98 	b.w	8014598 <_malloc_r>
 8016c68:	b92a      	cbnz	r2, 8016c76 <_realloc_r+0x24>
 8016c6a:	f7fd fc21 	bl	80144b0 <_free_r>
 8016c6e:	2400      	movs	r4, #0
 8016c70:	4620      	mov	r0, r4
 8016c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c76:	f000 f840 	bl	8016cfa <_malloc_usable_size_r>
 8016c7a:	4285      	cmp	r5, r0
 8016c7c:	4606      	mov	r6, r0
 8016c7e:	d802      	bhi.n	8016c86 <_realloc_r+0x34>
 8016c80:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8016c84:	d8f4      	bhi.n	8016c70 <_realloc_r+0x1e>
 8016c86:	4629      	mov	r1, r5
 8016c88:	4640      	mov	r0, r8
 8016c8a:	f7fd fc85 	bl	8014598 <_malloc_r>
 8016c8e:	4607      	mov	r7, r0
 8016c90:	2800      	cmp	r0, #0
 8016c92:	d0ec      	beq.n	8016c6e <_realloc_r+0x1c>
 8016c94:	42b5      	cmp	r5, r6
 8016c96:	462a      	mov	r2, r5
 8016c98:	4621      	mov	r1, r4
 8016c9a:	bf28      	it	cs
 8016c9c:	4632      	movcs	r2, r6
 8016c9e:	f7ff fc43 	bl	8016528 <memcpy>
 8016ca2:	4621      	mov	r1, r4
 8016ca4:	4640      	mov	r0, r8
 8016ca6:	f7fd fc03 	bl	80144b0 <_free_r>
 8016caa:	463c      	mov	r4, r7
 8016cac:	e7e0      	b.n	8016c70 <_realloc_r+0x1e>

08016cae <__ascii_wctomb>:
 8016cae:	4603      	mov	r3, r0
 8016cb0:	4608      	mov	r0, r1
 8016cb2:	b141      	cbz	r1, 8016cc6 <__ascii_wctomb+0x18>
 8016cb4:	2aff      	cmp	r2, #255	@ 0xff
 8016cb6:	d904      	bls.n	8016cc2 <__ascii_wctomb+0x14>
 8016cb8:	228a      	movs	r2, #138	@ 0x8a
 8016cba:	601a      	str	r2, [r3, #0]
 8016cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8016cc0:	4770      	bx	lr
 8016cc2:	700a      	strb	r2, [r1, #0]
 8016cc4:	2001      	movs	r0, #1
 8016cc6:	4770      	bx	lr

08016cc8 <fiprintf>:
 8016cc8:	b40e      	push	{r1, r2, r3}
 8016cca:	b503      	push	{r0, r1, lr}
 8016ccc:	4601      	mov	r1, r0
 8016cce:	ab03      	add	r3, sp, #12
 8016cd0:	4805      	ldr	r0, [pc, #20]	@ (8016ce8 <fiprintf+0x20>)
 8016cd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8016cd6:	6800      	ldr	r0, [r0, #0]
 8016cd8:	9301      	str	r3, [sp, #4]
 8016cda:	f7ff f9a1 	bl	8016020 <_vfiprintf_r>
 8016cde:	b002      	add	sp, #8
 8016ce0:	f85d eb04 	ldr.w	lr, [sp], #4
 8016ce4:	b003      	add	sp, #12
 8016ce6:	4770      	bx	lr
 8016ce8:	200001d8 	.word	0x200001d8

08016cec <abort>:
 8016cec:	b508      	push	{r3, lr}
 8016cee:	2006      	movs	r0, #6
 8016cf0:	f000 f834 	bl	8016d5c <raise>
 8016cf4:	2001      	movs	r0, #1
 8016cf6:	f7ed f977 	bl	8003fe8 <_exit>

08016cfa <_malloc_usable_size_r>:
 8016cfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016cfe:	1f18      	subs	r0, r3, #4
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	bfbc      	itt	lt
 8016d04:	580b      	ldrlt	r3, [r1, r0]
 8016d06:	18c0      	addlt	r0, r0, r3
 8016d08:	4770      	bx	lr

08016d0a <_raise_r>:
 8016d0a:	291f      	cmp	r1, #31
 8016d0c:	b538      	push	{r3, r4, r5, lr}
 8016d0e:	4605      	mov	r5, r0
 8016d10:	460c      	mov	r4, r1
 8016d12:	d904      	bls.n	8016d1e <_raise_r+0x14>
 8016d14:	2316      	movs	r3, #22
 8016d16:	6003      	str	r3, [r0, #0]
 8016d18:	f04f 30ff 	mov.w	r0, #4294967295
 8016d1c:	bd38      	pop	{r3, r4, r5, pc}
 8016d1e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8016d20:	b112      	cbz	r2, 8016d28 <_raise_r+0x1e>
 8016d22:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016d26:	b94b      	cbnz	r3, 8016d3c <_raise_r+0x32>
 8016d28:	4628      	mov	r0, r5
 8016d2a:	f000 f831 	bl	8016d90 <_getpid_r>
 8016d2e:	4622      	mov	r2, r4
 8016d30:	4601      	mov	r1, r0
 8016d32:	4628      	mov	r0, r5
 8016d34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016d38:	f000 b818 	b.w	8016d6c <_kill_r>
 8016d3c:	2b01      	cmp	r3, #1
 8016d3e:	d00a      	beq.n	8016d56 <_raise_r+0x4c>
 8016d40:	1c59      	adds	r1, r3, #1
 8016d42:	d103      	bne.n	8016d4c <_raise_r+0x42>
 8016d44:	2316      	movs	r3, #22
 8016d46:	6003      	str	r3, [r0, #0]
 8016d48:	2001      	movs	r0, #1
 8016d4a:	e7e7      	b.n	8016d1c <_raise_r+0x12>
 8016d4c:	2100      	movs	r1, #0
 8016d4e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8016d52:	4620      	mov	r0, r4
 8016d54:	4798      	blx	r3
 8016d56:	2000      	movs	r0, #0
 8016d58:	e7e0      	b.n	8016d1c <_raise_r+0x12>
	...

08016d5c <raise>:
 8016d5c:	4b02      	ldr	r3, [pc, #8]	@ (8016d68 <raise+0xc>)
 8016d5e:	4601      	mov	r1, r0
 8016d60:	6818      	ldr	r0, [r3, #0]
 8016d62:	f7ff bfd2 	b.w	8016d0a <_raise_r>
 8016d66:	bf00      	nop
 8016d68:	200001d8 	.word	0x200001d8

08016d6c <_kill_r>:
 8016d6c:	b538      	push	{r3, r4, r5, lr}
 8016d6e:	4d07      	ldr	r5, [pc, #28]	@ (8016d8c <_kill_r+0x20>)
 8016d70:	2300      	movs	r3, #0
 8016d72:	4604      	mov	r4, r0
 8016d74:	4608      	mov	r0, r1
 8016d76:	4611      	mov	r1, r2
 8016d78:	602b      	str	r3, [r5, #0]
 8016d7a:	f7ed f925 	bl	8003fc8 <_kill>
 8016d7e:	1c43      	adds	r3, r0, #1
 8016d80:	d102      	bne.n	8016d88 <_kill_r+0x1c>
 8016d82:	682b      	ldr	r3, [r5, #0]
 8016d84:	b103      	cbz	r3, 8016d88 <_kill_r+0x1c>
 8016d86:	6023      	str	r3, [r4, #0]
 8016d88:	bd38      	pop	{r3, r4, r5, pc}
 8016d8a:	bf00      	nop
 8016d8c:	20003e9c 	.word	0x20003e9c

08016d90 <_getpid_r>:
 8016d90:	f7ed b912 	b.w	8003fb8 <_getpid>

08016d94 <_init>:
 8016d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d96:	bf00      	nop
 8016d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016d9a:	bc08      	pop	{r3}
 8016d9c:	469e      	mov	lr, r3
 8016d9e:	4770      	bx	lr

08016da0 <_fini>:
 8016da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016da2:	bf00      	nop
 8016da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016da6:	bc08      	pop	{r3}
 8016da8:	469e      	mov	lr, r3
 8016daa:	4770      	bx	lr
