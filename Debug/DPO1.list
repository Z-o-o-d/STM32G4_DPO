
DPO1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001602c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e0e8  08016210  08016210  00017210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080242f8  080242f8  00026394  2**0
                  CONTENTS
  4 .ARM          00000008  080242f8  080242f8  000252f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024300  08024300  00026394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024300  08024300  00025300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08024304  08024304  00025304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000394  20000000  08024308  00026000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003b18  20000394  0802469c  00026394  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003eac  0802469c  00026eac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00026394  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c8ba  00000000  00000000  000263c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005e29  00000000  00000000  00052c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025d0  00000000  00000000  00058aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d25  00000000  00000000  0005b078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030927  00000000  00000000  0005cd9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031644  00000000  00000000  0008d6c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012ab9b  00000000  00000000  000bed08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e98a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b714  00000000  00000000  001e98e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  001f4ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000394 	.word	0x20000394
 80001fc:	00000000 	.word	0x00000000
 8000200:	080161f4 	.word	0x080161f4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000398 	.word	0x20000398
 800021c:	080161f4 	.word	0x080161f4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <TLC5952_WriteBit>:
/**
 * @brief 发送单个 bit
 * @param bit 0 或 1
 */
void TLC5952_WriteBit(uint8_t bit)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
    if (bit)
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d005      	beq.n	8001050 <TLC5952_WriteBit+0x1c>
        TLC5952_SIN_HIGH();
 8001044:	2201      	movs	r2, #1
 8001046:	2120      	movs	r1, #32
 8001048:	480b      	ldr	r0, [pc, #44]	@ (8001078 <TLC5952_WriteBit+0x44>)
 800104a:	f005 ffb5 	bl	8006fb8 <HAL_GPIO_WritePin>
 800104e:	e004      	b.n	800105a <TLC5952_WriteBit+0x26>
    else
        TLC5952_SIN_LOW();
 8001050:	2200      	movs	r2, #0
 8001052:	2120      	movs	r1, #32
 8001054:	4808      	ldr	r0, [pc, #32]	@ (8001078 <TLC5952_WriteBit+0x44>)
 8001056:	f005 ffaf 	bl	8006fb8 <HAL_GPIO_WritePin>

    TLC5952_SCLK_HIGH();
 800105a:	2201      	movs	r2, #1
 800105c:	2108      	movs	r1, #8
 800105e:	4806      	ldr	r0, [pc, #24]	@ (8001078 <TLC5952_WriteBit+0x44>)
 8001060:	f005 ffaa 	bl	8006fb8 <HAL_GPIO_WritePin>
    TLC5952_SCLK_LOW();
 8001064:	2200      	movs	r2, #0
 8001066:	2108      	movs	r1, #8
 8001068:	4803      	ldr	r0, [pc, #12]	@ (8001078 <TLC5952_WriteBit+0x44>)
 800106a:	f005 ffa5 	bl	8006fb8 <HAL_GPIO_WritePin>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	48000400 	.word	0x48000400

0800107c <TLC5952_WriteLED>:

/**
 * @brief 发送 24 位 LED 数据
 */
void TLC5952_WriteLED(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
    TLC5952_WriteBit(0);
 8001082:	2000      	movs	r0, #0
 8001084:	f7ff ffd6 	bl	8001034 <TLC5952_WriteBit>
    uint32_t *data = (uint32_t *)&allData;
 8001088:	4b15      	ldr	r3, [pc, #84]	@ (80010e0 <TLC5952_WriteLED+0x64>)
 800108a:	60bb      	str	r3, [r7, #8]
    for (int8_t i = 23; i >= 0; i--)
 800108c:	2317      	movs	r3, #23
 800108e:	73fb      	strb	r3, [r7, #15]
 8001090:	e013      	b.n	80010ba <TLC5952_WriteLED+0x3e>
    {
        uint8_t currentBit = (*data >> i) & 0x01;
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109a:	fa22 f303 	lsr.w	r3, r2, r3
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	71fb      	strb	r3, [r7, #7]
        TLC5952_WriteBit(currentBit);
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ffc3 	bl	8001034 <TLC5952_WriteBit>
    for (int8_t i = 23; i >= 0; i--)
 80010ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	3b01      	subs	r3, #1
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	73fb      	strb	r3, [r7, #15]
 80010ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	dae7      	bge.n	8001092 <TLC5952_WriteLED+0x16>
    }
    TLC5952_LAT_HIGH();
 80010c2:	2201      	movs	r2, #1
 80010c4:	2110      	movs	r1, #16
 80010c6:	4807      	ldr	r0, [pc, #28]	@ (80010e4 <TLC5952_WriteLED+0x68>)
 80010c8:	f005 ff76 	bl	8006fb8 <HAL_GPIO_WritePin>
    TLC5952_LAT_LOW();
 80010cc:	2200      	movs	r2, #0
 80010ce:	2110      	movs	r1, #16
 80010d0:	4804      	ldr	r0, [pc, #16]	@ (80010e4 <TLC5952_WriteLED+0x68>)
 80010d2:	f005 ff71 	bl	8006fb8 <HAL_GPIO_WritePin>
}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200003b0 	.word	0x200003b0
 80010e4:	48000400 	.word	0x48000400

080010e8 <TLC5952_WriteControl>:


/**
 * @brief 发送 24 位 控制 数据
 */
void TLC5952_WriteControl(void) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
    TLC5952_WriteBit(1);
 80010ee:	2001      	movs	r0, #1
 80010f0:	f7ff ffa0 	bl	8001034 <TLC5952_WriteBit>
    for (int i = 6; i >= 0; i--) {
 80010f4:	2306      	movs	r3, #6
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	e012      	b.n	8001120 <TLC5952_WriteControl+0x38>
        TLC5952_WriteBit((allData.red_brightness >> i) & 0x01);
 80010fa:	4b37      	ldr	r3, [pc, #220]	@ (80011d8 <TLC5952_WriteControl+0xf0>)
 80010fc:	78db      	ldrb	r3, [r3, #3]
 80010fe:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001102:	b2db      	uxtb	r3, r3
 8001104:	461a      	mov	r2, r3
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	fa42 f303 	asr.w	r3, r2, r3
 800110c:	b2db      	uxtb	r3, r3
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	b2db      	uxtb	r3, r3
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff8d 	bl	8001034 <TLC5952_WriteBit>
    for (int i = 6; i >= 0; i--) {
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	3b01      	subs	r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2b00      	cmp	r3, #0
 8001124:	dae9      	bge.n	80010fa <TLC5952_WriteControl+0x12>
    }
    for (int i = 6; i >= 0; i--) {
 8001126:	2306      	movs	r3, #6
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	e012      	b.n	8001152 <TLC5952_WriteControl+0x6a>
        TLC5952_WriteBit((allData.green_brightness >> i) & 0x01);
 800112c:	4b2a      	ldr	r3, [pc, #168]	@ (80011d8 <TLC5952_WriteControl+0xf0>)
 800112e:	791b      	ldrb	r3, [r3, #4]
 8001130:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001134:	b2db      	uxtb	r3, r3
 8001136:	461a      	mov	r2, r3
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	fa42 f303 	asr.w	r3, r2, r3
 800113e:	b2db      	uxtb	r3, r3
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	b2db      	uxtb	r3, r3
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff ff74 	bl	8001034 <TLC5952_WriteBit>
    for (int i = 6; i >= 0; i--) {
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	3b01      	subs	r3, #1
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	2b00      	cmp	r3, #0
 8001156:	dae9      	bge.n	800112c <TLC5952_WriteControl+0x44>
    }
    for (int i = 6; i >= 0; i--) {
 8001158:	2306      	movs	r3, #6
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	e012      	b.n	8001184 <TLC5952_WriteControl+0x9c>
        TLC5952_WriteBit((allData.blue_brightness >> i) & 0x01);
 800115e:	4b1e      	ldr	r3, [pc, #120]	@ (80011d8 <TLC5952_WriteControl+0xf0>)
 8001160:	889b      	ldrh	r3, [r3, #4]
 8001162:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 8001166:	b2db      	uxtb	r3, r3
 8001168:	461a      	mov	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	fa42 f303 	asr.w	r3, r2, r3
 8001170:	b2db      	uxtb	r3, r3
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	b2db      	uxtb	r3, r3
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff5b 	bl	8001034 <TLC5952_WriteBit>
    for (int i = 6; i >= 0; i--) {
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3b01      	subs	r3, #1
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	dae9      	bge.n	800115e <TLC5952_WriteControl+0x76>
    }
    for (int i = 2; i >= 0; i--) {
 800118a:	2302      	movs	r3, #2
 800118c:	603b      	str	r3, [r7, #0]
 800118e:	e012      	b.n	80011b6 <TLC5952_WriteControl+0xce>
        TLC5952_WriteBit((allData.detection_voltage_select >> i) & 0x01);
 8001190:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <TLC5952_WriteControl+0xf0>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f3c3 3382 	ubfx	r3, r3, #14, #3
 8001198:	b2db      	uxtb	r3, r3
 800119a:	461a      	mov	r2, r3
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	fa42 f303 	asr.w	r3, r2, r3
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff42 	bl	8001034 <TLC5952_WriteBit>
    for (int i = 2; i >= 0; i--) {
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	dae9      	bge.n	8001190 <TLC5952_WriteControl+0xa8>
    }
    TLC5952_LAT_HIGH();
 80011bc:	2201      	movs	r2, #1
 80011be:	2110      	movs	r1, #16
 80011c0:	4806      	ldr	r0, [pc, #24]	@ (80011dc <TLC5952_WriteControl+0xf4>)
 80011c2:	f005 fef9 	bl	8006fb8 <HAL_GPIO_WritePin>
    TLC5952_LAT_LOW();
 80011c6:	2200      	movs	r2, #0
 80011c8:	2110      	movs	r1, #16
 80011ca:	4804      	ldr	r0, [pc, #16]	@ (80011dc <TLC5952_WriteControl+0xf4>)
 80011cc:	f005 fef4 	bl	8006fb8 <HAL_GPIO_WritePin>
}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	200003b0 	.word	0x200003b0
 80011dc:	48000400 	.word	0x48000400

080011e0 <FT6336_ReadRegister>:

HAL_StatusTypeDef FT6336_WriteRegister( uint8_t RegAddress, uint8_t *pData, uint16_t Size) {
    return HAL_I2C_Mem_Write(&FT6336_I2C_PORT, FT6X36_ADDR, RegAddress, I2C_MEMADD_SIZE_8BIT, pData, Size, HAL_MAX_DELAY);
}

HAL_StatusTypeDef FT6336_ReadRegister( uint8_t RegAddress, uint8_t *pData, uint16_t Size) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af04      	add	r7, sp, #16
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]
 80011ec:	4613      	mov	r3, r2
 80011ee:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Read(&FT6336_I2C_PORT, FT6X36_ADDR, RegAddress, I2C_MEMADD_SIZE_8BIT, pData, Size, HAL_MAX_DELAY);
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	f04f 33ff 	mov.w	r3, #4294967295
 80011f8:	9302      	str	r3, [sp, #8]
 80011fa:	88bb      	ldrh	r3, [r7, #4]
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2301      	movs	r3, #1
 8001204:	2170      	movs	r1, #112	@ 0x70
 8001206:	4804      	ldr	r0, [pc, #16]	@ (8001218 <FT6336_ReadRegister+0x38>)
 8001208:	f005 ffac 	bl	8007164 <HAL_I2C_Mem_Read>
 800120c:	4603      	mov	r3, r0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000648 	.word	0x20000648

0800121c <FT6336_Init>:

void FT6336_Init(void) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
    FT6336_RST_L;
 8001222:	2200      	movs	r2, #0
 8001224:	2104      	movs	r1, #4
 8001226:	480f      	ldr	r0, [pc, #60]	@ (8001264 <FT6336_Init+0x48>)
 8001228:	f005 fec6 	bl	8006fb8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800122c:	200a      	movs	r0, #10
 800122e:	f003 f8b5 	bl	800439c <HAL_Delay>
    FT6336_RST_H;
 8001232:	2201      	movs	r2, #1
 8001234:	2104      	movs	r1, #4
 8001236:	480b      	ldr	r0, [pc, #44]	@ (8001264 <FT6336_Init+0x48>)
 8001238:	f005 febe 	bl	8006fb8 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800123c:	2032      	movs	r0, #50	@ 0x32
 800123e:	f003 f8ad 	bl	800439c <HAL_Delay>
//    FT6336_WriteRegister(0x00, 0x00,1);
//
//    // 设置 ID_G_MODE 为 0x00（启用中断输出）
//    FT6336_WriteRegister(0xA4, 0x00,1);

    uint8_t id = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	71fb      	strb	r3, [r7, #7]
    FT6336_ReadRegister(FT6336_FOCALTECH_ID, &id, 1);
 8001246:	1dfb      	adds	r3, r7, #7
 8001248:	2201      	movs	r2, #1
 800124a:	4619      	mov	r1, r3
 800124c:	20a8      	movs	r0, #168	@ 0xa8
 800124e:	f7ff ffc7 	bl	80011e0 <FT6336_ReadRegister>
    HAL_Delay(1000);
 8001252:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001256:	f003 f8a1 	bl	800439c <HAL_Delay>
//    HAL_Delay(1000);
    //used to debug IIC



}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	48000c00 	.word	0x48000c00

08001268 <AdjustTouchCoordinates>:

static void AdjustTouchCoordinates(uint16_t *x, uint16_t *y) {
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
    uint16_t rawX = *x;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	81fb      	strh	r3, [r7, #14]
    uint16_t rawY = *y;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	81bb      	strh	r3, [r7, #12]
//
//    *x = (*x * SCREEN_WIDTH) / TOUCH_WIDTH;
//    *y = (*y * SCREEN_HEIGHT) / TOUCH_HEIGHT;

    // 情况 X：特殊处理
    *x = rawY;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	89ba      	ldrh	r2, [r7, #12]
 8001282:	801a      	strh	r2, [r3, #0]
    *y = SCREEN_HEIGHT-rawX;
 8001284:	89fb      	ldrh	r3, [r7, #14]
 8001286:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800128a:	b29a      	uxth	r2, r3
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	801a      	strh	r2, [r3, #0]
}
 8001290:	bf00      	nop
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <FT6336_GetTouchPoint>:





void FT6336_GetTouchPoint(TouchPoints_HandleTypeDef *touchPoints) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
    uint8_t touchStatus = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	73bb      	strb	r3, [r7, #14]
    uint8_t touchData[4];  // 存储两个点的坐标数据 (每个点4个字节)

    // 读取触摸状态寄存器
    FT6336_ReadRegister(FT6336_TD_STATUS, &touchStatus, 1);
 80012a8:	f107 030e 	add.w	r3, r7, #14
 80012ac:	2201      	movs	r2, #1
 80012ae:	4619      	mov	r1, r3
 80012b0:	2002      	movs	r0, #2
 80012b2:	f7ff ff95 	bl	80011e0 <FT6336_ReadRegister>
    uint8_t touchCount = touchStatus & 0x0F;  // 获取触摸点数量
 80012b6:	7bbb      	ldrb	r3, [r7, #14]
 80012b8:	f003 030f 	and.w	r3, r3, #15
 80012bc:	73fb      	strb	r3, [r7, #15]

    if (touchCount > 0) {
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d054      	beq.n	800136e <FT6336_GetTouchPoint+0xd2>
        // 读取第一个触摸点的坐标 (4个字节)
    	FT6336_ReadRegister(FT6336_P1_XH, touchData, 4);
 80012c4:	f107 0308 	add.w	r3, r7, #8
 80012c8:	2204      	movs	r2, #4
 80012ca:	4619      	mov	r1, r3
 80012cc:	2003      	movs	r0, #3
 80012ce:	f7ff ff87 	bl	80011e0 <FT6336_ReadRegister>
        touchPoints->point1_x = ((touchData[0] & 0x0F) << 8) | touchData[1];
 80012d2:	7a3b      	ldrb	r3, [r7, #8]
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	b21b      	sxth	r3, r3
 80012d8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80012dc:	b21a      	sxth	r2, r3
 80012de:	7a7b      	ldrb	r3, [r7, #9]
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	4313      	orrs	r3, r2
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	801a      	strh	r2, [r3, #0]
        touchPoints->point1_y = ((touchData[2] & 0x0F) << 8) | touchData[3];
 80012ec:	7abb      	ldrb	r3, [r7, #10]
 80012ee:	021b      	lsls	r3, r3, #8
 80012f0:	b21b      	sxth	r3, r3
 80012f2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80012f6:	b21a      	sxth	r2, r3
 80012f8:	7afb      	ldrb	r3, [r7, #11]
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	4313      	orrs	r3, r2
 80012fe:	b21b      	sxth	r3, r3
 8001300:	b29a      	uxth	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	805a      	strh	r2, [r3, #2]
        AdjustTouchCoordinates(&touchPoints->point1_x, &touchPoints->point1_y);  // 调整第一个触摸点坐标
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3302      	adds	r3, #2
 800130c:	4619      	mov	r1, r3
 800130e:	4610      	mov	r0, r2
 8001310:	f7ff ffaa 	bl	8001268 <AdjustTouchCoordinates>

        if (touchCount > 1) {
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d929      	bls.n	800136e <FT6336_GetTouchPoint+0xd2>
            // 读取第二个触摸点的坐标 (4个字节)
        	FT6336_ReadRegister(FT6336_P2_XH, &touchData[4], 4);
 800131a:	f107 0308 	add.w	r3, r7, #8
 800131e:	3304      	adds	r3, #4
 8001320:	2204      	movs	r2, #4
 8001322:	4619      	mov	r1, r3
 8001324:	2009      	movs	r0, #9
 8001326:	f7ff ff5b 	bl	80011e0 <FT6336_ReadRegister>
            touchPoints->point2_x = ((touchData[4] & 0x0F) << 8) | touchData[5];
 800132a:	7b3b      	ldrb	r3, [r7, #12]
 800132c:	021b      	lsls	r3, r3, #8
 800132e:	b21b      	sxth	r3, r3
 8001330:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001334:	b21a      	sxth	r2, r3
 8001336:	7b7b      	ldrb	r3, [r7, #13]
 8001338:	b21b      	sxth	r3, r3
 800133a:	4313      	orrs	r3, r2
 800133c:	b21b      	sxth	r3, r3
 800133e:	b29a      	uxth	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	809a      	strh	r2, [r3, #4]
            touchPoints->point2_y = ((touchData[6] & 0x0F) << 8) | touchData[7];
 8001344:	7bbb      	ldrb	r3, [r7, #14]
 8001346:	021b      	lsls	r3, r3, #8
 8001348:	b21b      	sxth	r3, r3
 800134a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800134e:	b21a      	sxth	r2, r3
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	b21b      	sxth	r3, r3
 8001354:	4313      	orrs	r3, r2
 8001356:	b21b      	sxth	r3, r3
 8001358:	b29a      	uxth	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	80da      	strh	r2, [r3, #6]
            AdjustTouchCoordinates(&touchPoints->point2_x, &touchPoints->point2_y);  // 调整第二个触摸点坐标
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	1d1a      	adds	r2, r3, #4
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3306      	adds	r3, #6
 8001366:	4619      	mov	r1, r3
 8001368:	4610      	mov	r0, r2
 800136a:	f7ff ff7d 	bl	8001268 <AdjustTouchCoordinates>
        }
    }
}
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <__io_putchar>:
/* USER CODE BEGIN 0 */



int __io_putchar(int ch)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1 , (uint8_t *)&ch, 1, 0xFFFF);
 8001380:	1d39      	adds	r1, r7, #4
 8001382:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001386:	2201      	movs	r2, #1
 8001388:	4803      	ldr	r0, [pc, #12]	@ (8001398 <__io_putchar+0x20>)
 800138a:	f00b fd1d 	bl	800cdc8 <HAL_UART_Transmit>
    return ch;
 800138e:	687b      	ldr	r3, [r7, #4]
};
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	2000069c 	.word	0x2000069c

0800139c <Analog_FE_Update>:
    .CD_CH2 = 0,
    .OFFSET1 = 2200,
    .OFFSET2 = 2200
};

void Analog_FE_Update(void) {
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AC_DC_CH1_GPIO_Port, AC_DC_CH1_Pin, (GPIO_PinState)FEAnalog.AC_DC_CH1);
 80013a0:	4b47      	ldr	r3, [pc, #284]	@ (80014c0 <Analog_FE_Update+0x124>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	461a      	mov	r2, r3
 80013ac:	2120      	movs	r1, #32
 80013ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013b2:	f005 fe01 	bl	8006fb8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(CD_CH1_A_GPIO_Port, CD_CH1_A_Pin, (GPIO_PinState)((FEAnalog.CD_CH1 >> 0) & 0x01));
 80013b6:	4b42      	ldr	r3, [pc, #264]	@ (80014c0 <Analog_FE_Update+0x124>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	f3c3 0382 	ubfx	r3, r3, #2, #3
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	461a      	mov	r2, r3
 80013c8:	2120      	movs	r1, #32
 80013ca:	483e      	ldr	r0, [pc, #248]	@ (80014c4 <Analog_FE_Update+0x128>)
 80013cc:	f005 fdf4 	bl	8006fb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CD_CH1_B_GPIO_Port, CD_CH1_B_Pin, (GPIO_PinState)((FEAnalog.CD_CH1 >> 1) & 0x01));
 80013d0:	4b3b      	ldr	r3, [pc, #236]	@ (80014c0 <Analog_FE_Update+0x124>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	f3c3 0382 	ubfx	r3, r3, #2, #3
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	105b      	asrs	r3, r3, #1
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	461a      	mov	r2, r3
 80013e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013ea:	4837      	ldr	r0, [pc, #220]	@ (80014c8 <Analog_FE_Update+0x12c>)
 80013ec:	f005 fde4 	bl	8006fb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CD_CH1_C_GPIO_Port, CD_CH1_C_Pin, (GPIO_PinState)((FEAnalog.CD_CH1 >> 2) & 0x01));
 80013f0:	4b33      	ldr	r3, [pc, #204]	@ (80014c0 <Analog_FE_Update+0x124>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	f3c3 0382 	ubfx	r3, r3, #2, #3
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	109b      	asrs	r3, r3, #2
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	b2db      	uxtb	r3, r3
 8001404:	461a      	mov	r2, r3
 8001406:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800140a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800140e:	f005 fdd3 	bl	8006fb8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(AC_DC_CH2_GPIO_Port, AC_DC_CH2_Pin, (GPIO_PinState)FEAnalog.AC_DC_CH2);
 8001412:	4b2b      	ldr	r3, [pc, #172]	@ (80014c0 <Analog_FE_Update+0x124>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800141a:	b2db      	uxtb	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001422:	4828      	ldr	r0, [pc, #160]	@ (80014c4 <Analog_FE_Update+0x128>)
 8001424:	f005 fdc8 	bl	8006fb8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(CD_CH2_A_GPIO_Port, CD_CH2_A_Pin, (GPIO_PinState)((FEAnalog.CD_CH2 >> 0) & 0x01));
 8001428:	4b25      	ldr	r3, [pc, #148]	@ (80014c0 <Analog_FE_Update+0x124>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	b2db      	uxtb	r3, r3
 8001438:	461a      	mov	r2, r3
 800143a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800143e:	4821      	ldr	r0, [pc, #132]	@ (80014c4 <Analog_FE_Update+0x128>)
 8001440:	f005 fdba 	bl	8006fb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CD_CH2_B_GPIO_Port, CD_CH2_B_Pin, (GPIO_PinState)((FEAnalog.CD_CH2 >> 1) & 0x01));
 8001444:	4b1e      	ldr	r3, [pc, #120]	@ (80014c0 <Analog_FE_Update+0x124>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800144c:	b2db      	uxtb	r3, r3
 800144e:	105b      	asrs	r3, r3, #1
 8001450:	b2db      	uxtb	r3, r3
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	b2db      	uxtb	r3, r3
 8001458:	461a      	mov	r2, r3
 800145a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800145e:	4819      	ldr	r0, [pc, #100]	@ (80014c4 <Analog_FE_Update+0x128>)
 8001460:	f005 fdaa 	bl	8006fb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CD_CH2_C_GPIO_Port, CD_CH2_C_Pin, (GPIO_PinState)((FEAnalog.CD_CH2 >> 2) & 0x01));
 8001464:	4b16      	ldr	r3, [pc, #88]	@ (80014c0 <Analog_FE_Update+0x124>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800146c:	b2db      	uxtb	r3, r3
 800146e:	109b      	asrs	r3, r3, #2
 8001470:	b2db      	uxtb	r3, r3
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	b2db      	uxtb	r3, r3
 8001478:	461a      	mov	r2, r3
 800147a:	2102      	movs	r1, #2
 800147c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001480:	f005 fd9a 	bl	8006fb8 <HAL_GPIO_WritePin>

	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, FEAnalog.OFFSET1);
 8001484:	4b0e      	ldr	r3, [pc, #56]	@ (80014c0 <Analog_FE_Update+0x124>)
 8001486:	885b      	ldrh	r3, [r3, #2]
 8001488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800148c:	b29b      	uxth	r3, r3
 800148e:	2200      	movs	r2, #0
 8001490:	2100      	movs	r1, #0
 8001492:	480e      	ldr	r0, [pc, #56]	@ (80014cc <Analog_FE_Update+0x130>)
 8001494:	f004 ffb4 	bl	8006400 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, FEAnalog.OFFSET2);
 8001498:	4b09      	ldr	r3, [pc, #36]	@ (80014c0 <Analog_FE_Update+0x124>)
 800149a:	889b      	ldrh	r3, [r3, #4]
 800149c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	2200      	movs	r2, #0
 80014a4:	2100      	movs	r1, #0
 80014a6:	480a      	ldr	r0, [pc, #40]	@ (80014d0 <Analog_FE_Update+0x134>)
 80014a8:	f004 ffaa 	bl	8006400 <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80014ac:	2100      	movs	r1, #0
 80014ae:	4807      	ldr	r0, [pc, #28]	@ (80014cc <Analog_FE_Update+0x130>)
 80014b0:	f004 ff3a 	bl	8006328 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 80014b4:	2100      	movs	r1, #0
 80014b6:	4806      	ldr	r0, [pc, #24]	@ (80014d0 <Analog_FE_Update+0x134>)
 80014b8:	f004 ff36 	bl	8006328 <HAL_DAC_Start>

}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000010 	.word	0x20000010
 80014c4:	48000800 	.word	0x48000800
 80014c8:	48000400 	.word	0x48000400
 80014cc:	2000060c 	.word	0x2000060c
 80014d0:	20000620 	.word	0x20000620

080014d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014da:	f002 feee 	bl	80042ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014de:	f000 f8b1 	bl	8001644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014e2:	f001 f8c5 	bl	8002670 <MX_GPIO_Init>
  MX_DMA_Init();
 80014e6:	f001 f879 	bl	80025dc <MX_DMA_Init>
  MX_USB_Device_Init();
 80014ea:	f00f fdc3 	bl	8011074 <MX_USB_Device_Init>
  MX_COMP2_Init();
 80014ee:	f000 fa81 	bl	80019f4 <MX_COMP2_Init>
  MX_COMP5_Init();
 80014f2:	f000 faa5 	bl	8001a40 <MX_COMP5_Init>
  MX_DAC1_Init();
 80014f6:	f000 fac9 	bl	8001a8c <MX_DAC1_Init>
  MX_DAC2_Init();
 80014fa:	f000 fb11 	bl	8001b20 <MX_DAC2_Init>
  MX_OPAMP1_Init();
 80014fe:	f000 fc0d 	bl	8001d1c <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8001502:	f000 fc37 	bl	8001d74 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8001506:	f000 fc5b 	bl	8001dc0 <MX_OPAMP3_Init>
  MX_OPAMP6_Init();
 800150a:	f000 fccb 	bl	8001ea4 <MX_OPAMP6_Init>
  MX_TIM1_Init();
 800150e:	f000 fd33 	bl	8001f78 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001512:	f000 fde1 	bl	80020d8 <MX_TIM4_Init>
  MX_TIM20_Init();
 8001516:	f001 f807 	bl	8002528 <MX_TIM20_Init>
  MX_TIM3_Init();
 800151a:	f000 fd87 	bl	800202c <MX_TIM3_Init>
  MX_ADC5_Init();
 800151e:	f000 f9c1 	bl	80018a4 <MX_ADC5_Init>
  MX_TIM15_Init();
 8001522:	f000 ff5d 	bl	80023e0 <MX_TIM15_Init>
  MX_TIM8_Init();
 8001526:	f000 fe99 	bl	800225c <MX_TIM8_Init>
  MX_SPI3_Init();
 800152a:	f000 fce7 	bl	8001efc <MX_SPI3_Init>
  MX_I2C3_Init();
 800152e:	f000 fb6b 	bl	8001c08 <MX_I2C3_Init>
  MX_DAC4_Init();
 8001532:	f000 fb2f 	bl	8001b94 <MX_DAC4_Init>
  MX_LPUART1_UART_Init();
 8001536:	f000 fba7 	bl	8001c88 <MX_LPUART1_UART_Init>
  MX_OPAMP4_Init();
 800153a:	f000 fc67 	bl	8001e0c <MX_OPAMP4_Init>
  MX_OPAMP5_Init();
 800153e:	f000 fc8b 	bl	8001e58 <MX_OPAMP5_Init>
  MX_TIM7_Init();
 8001542:	f000 fe55 	bl	80021f0 <MX_TIM7_Init>
  MX_ADC2_Init();
 8001546:	f000 f8cb 	bl	80016e0 <MX_ADC2_Init>
  MX_ADC3_Init();
 800154a:	f000 f931 	bl	80017b0 <MX_ADC3_Init>
  MX_TIM6_Init();
 800154e:	f000 fe19 	bl	8002184 <MX_TIM6_Init>
//  HAL_OPAMP_Start(&hopamp4);
//  HAL_OPAMP_Start(&hopamp5);
//  HAL_OPAMP_Start(&hopamp6);


  HAL_ADC_Start_DMA(&hadc5, BUFFER_SYS_ADC, 5);
 8001552:	2205      	movs	r2, #5
 8001554:	492c      	ldr	r1, [pc, #176]	@ (8001608 <main+0x134>)
 8001556:	482d      	ldr	r0, [pc, #180]	@ (800160c <main+0x138>)
 8001558:	f003 fb40 	bl	8004bdc <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim6);
 800155c:	482c      	ldr	r0, [pc, #176]	@ (8001610 <main+0x13c>)
 800155e:	f009 fdbb 	bl	800b0d8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim7);
 8001562:	482c      	ldr	r0, [pc, #176]	@ (8001614 <main+0x140>)
 8001564:	f009 fdb8 	bl	800b0d8 <HAL_TIM_Base_Start>


  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001568:	213c      	movs	r1, #60	@ 0x3c
 800156a:	482b      	ldr	r0, [pc, #172]	@ (8001618 <main+0x144>)
 800156c:	f00a fa6a 	bl	800ba44 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001570:	213c      	movs	r1, #60	@ 0x3c
 8001572:	482a      	ldr	r0, [pc, #168]	@ (800161c <main+0x148>)
 8001574:	f00a fa66 	bl	800ba44 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001578:	213c      	movs	r1, #60	@ 0x3c
 800157a:	4829      	ldr	r0, [pc, #164]	@ (8001620 <main+0x14c>)
 800157c:	f00a fa62 	bl	800ba44 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim20, TIM_CHANNEL_ALL);
 8001580:	213c      	movs	r1, #60	@ 0x3c
 8001582:	4828      	ldr	r0, [pc, #160]	@ (8001624 <main+0x150>)
 8001584:	f00a fa5e 	bl	800ba44 <HAL_TIM_Encoder_Start>


  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001588:	2100      	movs	r1, #0
 800158a:	4827      	ldr	r0, [pc, #156]	@ (8001628 <main+0x154>)
 800158c:	f009 fe76 	bl	800b27c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001590:	2100      	movs	r1, #0
 8001592:	4826      	ldr	r0, [pc, #152]	@ (800162c <main+0x158>)
 8001594:	f009 fe72 	bl	800b27c <HAL_TIM_PWM_Start>
  FT6336_Init();
 8001598:	f7ff fe40 	bl	800121c <FT6336_Init>
  ST7789_Init();
 800159c:	f001 fa84 	bl	8002aa8 <ST7789_Init>
//	  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);


  View_DoubaoWelcome();
 80015a0:	f001 fc80 	bl	8002ea4 <View_DoubaoWelcome>
  {
//	  ST7789_Test();
//	  ST7789_WriteString(10, 10, " !\"#\%\$", Han_Array, WHITE, BLACK);


	Analog_FE_Update();
 80015a4:	f7ff fefa 	bl	800139c <Analog_FE_Update>

	View_Sensor();
 80015a8:	f001 fcae 	bl	8002f08 <View_Sensor>

	HAL_ADC_Start_DMA(&hadc2, BUFFER_DPO_CH1, DPO_DEEP);
 80015ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015b0:	491f      	ldr	r1, [pc, #124]	@ (8001630 <main+0x15c>)
 80015b2:	4820      	ldr	r0, [pc, #128]	@ (8001634 <main+0x160>)
 80015b4:	f003 fb12 	bl	8004bdc <HAL_ADC_Start_DMA>


    while (__HAL_DMA_GET_COUNTER(hadc2.DMA_Handle) != 0) {
 80015b8:	bf00      	nop
 80015ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001634 <main+0x160>)
 80015bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f9      	bne.n	80015ba <main+0xe6>
        // 等待 DMA 传输完成
    }
    printf("ADC DMA transfer completed!\n");
 80015c6:	481c      	ldr	r0, [pc, #112]	@ (8001638 <main+0x164>)
 80015c8:	f011 f9ce 	bl	8012968 <puts>

    // 可以在这里处理 ADC 转换结果
    for (int i = 0; i < DPO_DEEP; i++) {
 80015cc:	2300      	movs	r3, #0
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	e00a      	b.n	80015e8 <main+0x114>
        printf("ADC: %d\n", BUFFER_DPO_CH1[i]);
 80015d2:	4a17      	ldr	r2, [pc, #92]	@ (8001630 <main+0x15c>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015da:	4619      	mov	r1, r3
 80015dc:	4817      	ldr	r0, [pc, #92]	@ (800163c <main+0x168>)
 80015de:	f011 f95b 	bl	8012898 <iprintf>
    for (int i = 0; i < DPO_DEEP; i++) {
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3301      	adds	r3, #1
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015ee:	dbf0      	blt.n	80015d2 <main+0xfe>
    }

    HAL_Delay(100);
 80015f0:	2064      	movs	r0, #100	@ 0x64
 80015f2:	f002 fed3 	bl	800439c <HAL_Delay>

	TLC5952_WriteLED();
 80015f6:	f7ff fd41 	bl	800107c <TLC5952_WriteLED>
	TLC5952_WriteControl();
 80015fa:	f7ff fd75 	bl	80010e8 <TLC5952_WriteControl>




	WS2812_Write_Colors(rainbow_colors, 10);
 80015fe:	210a      	movs	r1, #10
 8001600:	480f      	ldr	r0, [pc, #60]	@ (8001640 <main+0x16c>)
 8001602:	f002 fdd3 	bl	80041ac <WS2812_Write_Colors>
	Analog_FE_Update();
 8001606:	e7cd      	b.n	80015a4 <main+0xd0>
 8001608:	20000c7c 	.word	0x20000c7c
 800160c:	20000498 	.word	0x20000498
 8001610:	20000a40 	.word	0x20000a40
 8001614:	20000a8c 	.word	0x20000a8c
 8001618:	2000095c 	.word	0x2000095c
 800161c:	200009a8 	.word	0x200009a8
 8001620:	200009f4 	.word	0x200009f4
 8001624:	20000b70 	.word	0x20000b70
 8001628:	20000b24 	.word	0x20000b24
 800162c:	20000ad8 	.word	0x20000ad8
 8001630:	20000c90 	.word	0x20000c90
 8001634:	200003c0 	.word	0x200003c0
 8001638:	08016210 	.word	0x08016210
 800163c:	0801622c 	.word	0x0801622c
 8001640:	20000018 	.word	0x20000018

08001644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b094      	sub	sp, #80	@ 0x50
 8001648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164a:	f107 0318 	add.w	r3, r7, #24
 800164e:	2238      	movs	r2, #56	@ 0x38
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f011 fa88 	bl	8012b68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
 8001664:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001666:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800166a:	f007 ff6d 	bl	8009548 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800166e:	2321      	movs	r3, #33	@ 0x21
 8001670:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001672:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001676:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001678:	2301      	movs	r3, #1
 800167a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800167c:	2302      	movs	r3, #2
 800167e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001680:	2303      	movs	r3, #3
 8001682:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001684:	2302      	movs	r3, #2
 8001686:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8001688:	235a      	movs	r3, #90	@ 0x5a
 800168a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800168c:	2306      	movs	r3, #6
 800168e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001690:	2302      	movs	r3, #2
 8001692:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001694:	2302      	movs	r3, #2
 8001696:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001698:	f107 0318 	add.w	r3, r7, #24
 800169c:	4618      	mov	r0, r3
 800169e:	f008 f807 	bl	80096b0 <HAL_RCC_OscConfig>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <SystemClock_Config+0x68>
  {
    Error_Handler();
 80016a8:	f001 f8fc 	bl	80028a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ac:	230f      	movs	r3, #15
 80016ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016b0:	2303      	movs	r3, #3
 80016b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016b8:	2300      	movs	r3, #0
 80016ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	2104      	movs	r1, #4
 80016c4:	4618      	mov	r0, r3
 80016c6:	f008 fb05 	bl	8009cd4 <HAL_RCC_ClockConfig>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80016d0:	f001 f8e8 	bl	80028a4 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80016d4:	f008 fcd4 	bl	800a080 <HAL_RCC_EnableCSS>
}
 80016d8:	bf00      	nop
 80016da:	3750      	adds	r7, #80	@ 0x50
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016e6:	463b      	mov	r3, r7
 80016e8:	2220      	movs	r2, #32
 80016ea:	2100      	movs	r1, #0
 80016ec:	4618      	mov	r0, r3
 80016ee:	f011 fa3b 	bl	8012b68 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80016f2:	4b2c      	ldr	r3, [pc, #176]	@ (80017a4 <MX_ADC2_Init+0xc4>)
 80016f4:	4a2c      	ldr	r2, [pc, #176]	@ (80017a8 <MX_ADC2_Init+0xc8>)
 80016f6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80016f8:	4b2a      	ldr	r3, [pc, #168]	@ (80017a4 <MX_ADC2_Init+0xc4>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80016fe:	4b29      	ldr	r3, [pc, #164]	@ (80017a4 <MX_ADC2_Init+0xc4>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001704:	4b27      	ldr	r3, [pc, #156]	@ (80017a4 <MX_ADC2_Init+0xc4>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800170a:	4b26      	ldr	r3, [pc, #152]	@ (80017a4 <MX_ADC2_Init+0xc4>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001710:	4b24      	ldr	r3, [pc, #144]	@ (80017a4 <MX_ADC2_Init+0xc4>)
 8001712:	2200      	movs	r2, #0
 8001714:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001716:	4b23      	ldr	r3, [pc, #140]	@ (80017a4 <MX_ADC2_Init+0xc4>)
 8001718:	2204      	movs	r2, #4
 800171a:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800171c:	4b21      	ldr	r3, [pc, #132]	@ (80017a4 <MX_ADC2_Init+0xc4>)
 800171e:	2200      	movs	r2, #0
 8001720:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001722:	4b20      	ldr	r3, [pc, #128]	@ (80017a4 <MX_ADC2_Init+0xc4>)
 8001724:	2200      	movs	r2, #0
 8001726:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001728:	4b1e      	ldr	r3, [pc, #120]	@ (80017a4 <MX_ADC2_Init+0xc4>)
 800172a:	2201      	movs	r2, #1
 800172c:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800172e:	4b1d      	ldr	r3, [pc, #116]	@ (80017a4 <MX_ADC2_Init+0xc4>)
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8001736:	4b1b      	ldr	r3, [pc, #108]	@ (80017a4 <MX_ADC2_Init+0xc4>)
 8001738:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 800173c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800173e:	4b19      	ldr	r3, [pc, #100]	@ (80017a4 <MX_ADC2_Init+0xc4>)
 8001740:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001744:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001746:	4b17      	ldr	r3, [pc, #92]	@ (80017a4 <MX_ADC2_Init+0xc4>)
 8001748:	2201      	movs	r2, #1
 800174a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800174e:	4b15      	ldr	r3, [pc, #84]	@ (80017a4 <MX_ADC2_Init+0xc4>)
 8001750:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001754:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001756:	4b13      	ldr	r3, [pc, #76]	@ (80017a4 <MX_ADC2_Init+0xc4>)
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800175e:	4811      	ldr	r0, [pc, #68]	@ (80017a4 <MX_ADC2_Init+0xc4>)
 8001760:	f003 f880 	bl	8004864 <HAL_ADC_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800176a:	f001 f89b 	bl	80028a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800176e:	4b0f      	ldr	r3, [pc, #60]	@ (80017ac <MX_ADC2_Init+0xcc>)
 8001770:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001772:	2306      	movs	r3, #6
 8001774:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001776:	2300      	movs	r3, #0
 8001778:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800177a:	237f      	movs	r3, #127	@ 0x7f
 800177c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800177e:	2304      	movs	r3, #4
 8001780:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001786:	463b      	mov	r3, r7
 8001788:	4619      	mov	r1, r3
 800178a:	4806      	ldr	r0, [pc, #24]	@ (80017a4 <MX_ADC2_Init+0xc4>)
 800178c:	f003 fb18 	bl	8004dc0 <HAL_ADC_ConfigChannel>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8001796:	f001 f885 	bl	80028a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800179a:	bf00      	nop
 800179c:	3720      	adds	r7, #32
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	200003c0 	.word	0x200003c0
 80017a8:	50000100 	.word	0x50000100
 80017ac:	10c00010 	.word	0x10c00010

080017b0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08c      	sub	sp, #48	@ 0x30
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80017b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	2220      	movs	r2, #32
 80017c6:	2100      	movs	r1, #0
 80017c8:	4618      	mov	r0, r3
 80017ca:	f011 f9cd 	bl	8012b68 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80017ce:	4b32      	ldr	r3, [pc, #200]	@ (8001898 <MX_ADC3_Init+0xe8>)
 80017d0:	4a32      	ldr	r2, [pc, #200]	@ (800189c <MX_ADC3_Init+0xec>)
 80017d2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80017d4:	4b30      	ldr	r3, [pc, #192]	@ (8001898 <MX_ADC3_Init+0xe8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80017da:	4b2f      	ldr	r3, [pc, #188]	@ (8001898 <MX_ADC3_Init+0xe8>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001898 <MX_ADC3_Init+0xe8>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80017e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001898 <MX_ADC3_Init+0xe8>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001898 <MX_ADC3_Init+0xe8>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017f2:	4b29      	ldr	r3, [pc, #164]	@ (8001898 <MX_ADC3_Init+0xe8>)
 80017f4:	2204      	movs	r2, #4
 80017f6:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80017f8:	4b27      	ldr	r3, [pc, #156]	@ (8001898 <MX_ADC3_Init+0xe8>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80017fe:	4b26      	ldr	r3, [pc, #152]	@ (8001898 <MX_ADC3_Init+0xe8>)
 8001800:	2200      	movs	r2, #0
 8001802:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8001804:	4b24      	ldr	r3, [pc, #144]	@ (8001898 <MX_ADC3_Init+0xe8>)
 8001806:	2201      	movs	r2, #1
 8001808:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800180a:	4b23      	ldr	r3, [pc, #140]	@ (8001898 <MX_ADC3_Init+0xe8>)
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8001812:	4b21      	ldr	r3, [pc, #132]	@ (8001898 <MX_ADC3_Init+0xe8>)
 8001814:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8001818:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800181a:	4b1f      	ldr	r3, [pc, #124]	@ (8001898 <MX_ADC3_Init+0xe8>)
 800181c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001820:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001822:	4b1d      	ldr	r3, [pc, #116]	@ (8001898 <MX_ADC3_Init+0xe8>)
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800182a:	4b1b      	ldr	r3, [pc, #108]	@ (8001898 <MX_ADC3_Init+0xe8>)
 800182c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001830:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001832:	4b19      	ldr	r3, [pc, #100]	@ (8001898 <MX_ADC3_Init+0xe8>)
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800183a:	4817      	ldr	r0, [pc, #92]	@ (8001898 <MX_ADC3_Init+0xe8>)
 800183c:	f003 f812 	bl	8004864 <HAL_ADC_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8001846:	f001 f82d 	bl	80028a4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800184a:	2300      	movs	r3, #0
 800184c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800184e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001852:	4619      	mov	r1, r3
 8001854:	4810      	ldr	r0, [pc, #64]	@ (8001898 <MX_ADC3_Init+0xe8>)
 8001856:	f004 f843 	bl	80058e0 <HAL_ADCEx_MultiModeConfigChannel>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8001860:	f001 f820 	bl	80028a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001864:	4b0e      	ldr	r3, [pc, #56]	@ (80018a0 <MX_ADC3_Init+0xf0>)
 8001866:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001868:	2306      	movs	r3, #6
 800186a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001870:	237f      	movs	r3, #127	@ 0x7f
 8001872:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001874:	2304      	movs	r3, #4
 8001876:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	4619      	mov	r1, r3
 8001880:	4805      	ldr	r0, [pc, #20]	@ (8001898 <MX_ADC3_Init+0xe8>)
 8001882:	f003 fa9d 	bl	8004dc0 <HAL_ADC_ConfigChannel>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_ADC3_Init+0xe0>
  {
    Error_Handler();
 800188c:	f001 f80a 	bl	80028a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001890:	bf00      	nop
 8001892:	3730      	adds	r7, #48	@ 0x30
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	2000042c 	.word	0x2000042c
 800189c:	50000400 	.word	0x50000400
 80018a0:	14f00020 	.word	0x14f00020

080018a4 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018aa:	463b      	mov	r3, r7
 80018ac:	2220      	movs	r2, #32
 80018ae:	2100      	movs	r1, #0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f011 f959 	bl	8012b68 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 80018b6:	4b48      	ldr	r3, [pc, #288]	@ (80019d8 <MX_ADC5_Init+0x134>)
 80018b8:	4a48      	ldr	r2, [pc, #288]	@ (80019dc <MX_ADC5_Init+0x138>)
 80018ba:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80018bc:	4b46      	ldr	r3, [pc, #280]	@ (80019d8 <MX_ADC5_Init+0x134>)
 80018be:	2200      	movs	r2, #0
 80018c0:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 80018c2:	4b45      	ldr	r3, [pc, #276]	@ (80019d8 <MX_ADC5_Init+0x134>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018c8:	4b43      	ldr	r3, [pc, #268]	@ (80019d8 <MX_ADC5_Init+0x134>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 80018ce:	4b42      	ldr	r3, [pc, #264]	@ (80019d8 <MX_ADC5_Init+0x134>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80018d4:	4b40      	ldr	r3, [pc, #256]	@ (80019d8 <MX_ADC5_Init+0x134>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80018da:	4b3f      	ldr	r3, [pc, #252]	@ (80019d8 <MX_ADC5_Init+0x134>)
 80018dc:	2208      	movs	r2, #8
 80018de:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80018e0:	4b3d      	ldr	r3, [pc, #244]	@ (80019d8 <MX_ADC5_Init+0x134>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 80018e6:	4b3c      	ldr	r3, [pc, #240]	@ (80019d8 <MX_ADC5_Init+0x134>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 5;
 80018ec:	4b3a      	ldr	r3, [pc, #232]	@ (80019d8 <MX_ADC5_Init+0x134>)
 80018ee:	2205      	movs	r2, #5
 80018f0:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 80018f2:	4b39      	ldr	r3, [pc, #228]	@ (80019d8 <MX_ADC5_Init+0x134>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T7_TRGO;
 80018fa:	4b37      	ldr	r3, [pc, #220]	@ (80019d8 <MX_ADC5_Init+0x134>)
 80018fc:	f44f 62f8 	mov.w	r2, #1984	@ 0x7c0
 8001900:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001902:	4b35      	ldr	r3, [pc, #212]	@ (80019d8 <MX_ADC5_Init+0x134>)
 8001904:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001908:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 800190a:	4b33      	ldr	r3, [pc, #204]	@ (80019d8 <MX_ADC5_Init+0x134>)
 800190c:	2201      	movs	r2, #1
 800190e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001912:	4b31      	ldr	r3, [pc, #196]	@ (80019d8 <MX_ADC5_Init+0x134>)
 8001914:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001918:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 800191a:	4b2f      	ldr	r3, [pc, #188]	@ (80019d8 <MX_ADC5_Init+0x134>)
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8001922:	482d      	ldr	r0, [pc, #180]	@ (80019d8 <MX_ADC5_Init+0x134>)
 8001924:	f002 ff9e 	bl	8004864 <HAL_ADC_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_ADC5_Init+0x8e>
  {
    Error_Handler();
 800192e:	f000 ffb9 	bl	80028a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001932:	4b2b      	ldr	r3, [pc, #172]	@ (80019e0 <MX_ADC5_Init+0x13c>)
 8001934:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001936:	2306      	movs	r3, #6
 8001938:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800193a:	2307      	movs	r3, #7
 800193c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800193e:	237f      	movs	r3, #127	@ 0x7f
 8001940:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001942:	2304      	movs	r3, #4
 8001944:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 800194a:	463b      	mov	r3, r7
 800194c:	4619      	mov	r1, r3
 800194e:	4822      	ldr	r0, [pc, #136]	@ (80019d8 <MX_ADC5_Init+0x134>)
 8001950:	f003 fa36 	bl	8004dc0 <HAL_ADC_ConfigChannel>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_ADC5_Init+0xba>
  {
    Error_Handler();
 800195a:	f000 ffa3 	bl	80028a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC5;
 800195e:	4b21      	ldr	r3, [pc, #132]	@ (80019e4 <MX_ADC5_Init+0x140>)
 8001960:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001962:	230c      	movs	r3, #12
 8001964:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001966:	463b      	mov	r3, r7
 8001968:	4619      	mov	r1, r3
 800196a:	481b      	ldr	r0, [pc, #108]	@ (80019d8 <MX_ADC5_Init+0x134>)
 800196c:	f003 fa28 	bl	8004dc0 <HAL_ADC_ConfigChannel>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_ADC5_Init+0xd6>
  {
    Error_Handler();
 8001976:	f000 ff95 	bl	80028a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 800197a:	4b1b      	ldr	r3, [pc, #108]	@ (80019e8 <MX_ADC5_Init+0x144>)
 800197c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800197e:	2312      	movs	r3, #18
 8001980:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001982:	463b      	mov	r3, r7
 8001984:	4619      	mov	r1, r3
 8001986:	4814      	ldr	r0, [pc, #80]	@ (80019d8 <MX_ADC5_Init+0x134>)
 8001988:	f003 fa1a 	bl	8004dc0 <HAL_ADC_ConfigChannel>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_ADC5_Init+0xf2>
  {
    Error_Handler();
 8001992:	f000 ff87 	bl	80028a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001996:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <MX_ADC5_Init+0x148>)
 8001998:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800199a:	2318      	movs	r3, #24
 800199c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 800199e:	463b      	mov	r3, r7
 80019a0:	4619      	mov	r1, r3
 80019a2:	480d      	ldr	r0, [pc, #52]	@ (80019d8 <MX_ADC5_Init+0x134>)
 80019a4:	f003 fa0c 	bl	8004dc0 <HAL_ADC_ConfigChannel>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_ADC5_Init+0x10e>
  {
    Error_Handler();
 80019ae:	f000 ff79 	bl	80028a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP5;
 80019b2:	4b0f      	ldr	r3, [pc, #60]	@ (80019f0 <MX_ADC5_Init+0x14c>)
 80019b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80019b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80019bc:	463b      	mov	r3, r7
 80019be:	4619      	mov	r1, r3
 80019c0:	4805      	ldr	r0, [pc, #20]	@ (80019d8 <MX_ADC5_Init+0x134>)
 80019c2:	f003 f9fd 	bl	8004dc0 <HAL_ADC_ConfigChannel>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_ADC5_Init+0x12c>
  {
    Error_Handler();
 80019cc:	f000 ff6a 	bl	80028a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 80019d0:	bf00      	nop
 80019d2:	3720      	adds	r7, #32
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000498 	.word	0x20000498
 80019dc:	50000600 	.word	0x50000600
 80019e0:	08600004 	.word	0x08600004
 80019e4:	90c00010 	.word	0x90c00010
 80019e8:	c7520000 	.word	0xc7520000
 80019ec:	cb840000 	.word	0xcb840000
 80019f0:	8c900008 	.word	0x8c900008

080019f4 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 80019f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a38 <MX_COMP2_Init+0x44>)
 80019fa:	4a10      	ldr	r2, [pc, #64]	@ (8001a3c <MX_COMP2_Init+0x48>)
 80019fc:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80019fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001a38 <MX_COMP2_Init+0x44>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	605a      	str	r2, [r3, #4]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 8001a04:	4b0c      	ldr	r3, [pc, #48]	@ (8001a38 <MX_COMP2_Init+0x44>)
 8001a06:	2250      	movs	r2, #80	@ 0x50
 8001a08:	609a      	str	r2, [r3, #8]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a38 <MX_COMP2_Init+0x44>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001a10:	4b09      	ldr	r3, [pc, #36]	@ (8001a38 <MX_COMP2_Init+0x44>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	60da      	str	r2, [r3, #12]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001a16:	4b08      	ldr	r3, [pc, #32]	@ (8001a38 <MX_COMP2_Init+0x44>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	615a      	str	r2, [r3, #20]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001a1c:	4b06      	ldr	r3, [pc, #24]	@ (8001a38 <MX_COMP2_Init+0x44>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8001a22:	4805      	ldr	r0, [pc, #20]	@ (8001a38 <MX_COMP2_Init+0x44>)
 8001a24:	f004 f9b4 	bl	8005d90 <HAL_COMP_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_COMP2_Init+0x3e>
  {
    Error_Handler();
 8001a2e:	f000 ff39 	bl	80028a4 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	200005c4 	.word	0x200005c4
 8001a3c:	40010204 	.word	0x40010204

08001a40 <MX_COMP5_Init>:
  * @brief COMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP5_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END COMP5_Init 0 */

  /* USER CODE BEGIN COMP5_Init 1 */

  /* USER CODE END COMP5_Init 1 */
  hcomp5.Instance = COMP5;
 8001a44:	4b0f      	ldr	r3, [pc, #60]	@ (8001a84 <MX_COMP5_Init+0x44>)
 8001a46:	4a10      	ldr	r2, [pc, #64]	@ (8001a88 <MX_COMP5_Init+0x48>)
 8001a48:	601a      	str	r2, [r3, #0]
  hcomp5.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a84 <MX_COMP5_Init+0x44>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	605a      	str	r2, [r3, #4]
  hcomp5.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 8001a50:	4b0c      	ldr	r3, [pc, #48]	@ (8001a84 <MX_COMP5_Init+0x44>)
 8001a52:	2250      	movs	r2, #80	@ 0x50
 8001a54:	609a      	str	r2, [r3, #8]
  hcomp5.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001a56:	4b0b      	ldr	r3, [pc, #44]	@ (8001a84 <MX_COMP5_Init+0x44>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	611a      	str	r2, [r3, #16]
  hcomp5.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001a5c:	4b09      	ldr	r3, [pc, #36]	@ (8001a84 <MX_COMP5_Init+0x44>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	60da      	str	r2, [r3, #12]
  hcomp5.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001a62:	4b08      	ldr	r3, [pc, #32]	@ (8001a84 <MX_COMP5_Init+0x44>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	615a      	str	r2, [r3, #20]
  hcomp5.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001a68:	4b06      	ldr	r3, [pc, #24]	@ (8001a84 <MX_COMP5_Init+0x44>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp5) != HAL_OK)
 8001a6e:	4805      	ldr	r0, [pc, #20]	@ (8001a84 <MX_COMP5_Init+0x44>)
 8001a70:	f004 f98e 	bl	8005d90 <HAL_COMP_Init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_COMP5_Init+0x3e>
  {
    Error_Handler();
 8001a7a:	f000 ff13 	bl	80028a4 <Error_Handler>
  }
  /* USER CODE BEGIN COMP5_Init 2 */

  /* USER CODE END COMP5_Init 2 */

}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	200005e8 	.word	0x200005e8
 8001a88:	40010210 	.word	0x40010210

08001a8c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08c      	sub	sp, #48	@ 0x30
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001a92:	463b      	mov	r3, r7
 8001a94:	2230      	movs	r2, #48	@ 0x30
 8001a96:	2100      	movs	r1, #0
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f011 f865 	bl	8012b68 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001b18 <MX_DAC1_Init+0x8c>)
 8001aa0:	4a1e      	ldr	r2, [pc, #120]	@ (8001b1c <MX_DAC1_Init+0x90>)
 8001aa2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001aa4:	481c      	ldr	r0, [pc, #112]	@ (8001b18 <MX_DAC1_Init+0x8c>)
 8001aa6:	f004 fc1c 	bl	80062e2 <HAL_DAC_Init>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001ab0:	f000 fef8 	bl	80028a4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001ad8:	463b      	mov	r3, r7
 8001ada:	2200      	movs	r2, #0
 8001adc:	4619      	mov	r1, r3
 8001ade:	480e      	ldr	r0, [pc, #56]	@ (8001b18 <MX_DAC1_Init+0x8c>)
 8001ae0:	f004 fcbc 	bl	800645c <HAL_DAC_ConfigChannel>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001aea:	f000 fedb 	bl	80028a4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001af2:	2302      	movs	r3, #2
 8001af4:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001af6:	2302      	movs	r3, #2
 8001af8:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001afa:	463b      	mov	r3, r7
 8001afc:	2210      	movs	r2, #16
 8001afe:	4619      	mov	r1, r3
 8001b00:	4805      	ldr	r0, [pc, #20]	@ (8001b18 <MX_DAC1_Init+0x8c>)
 8001b02:	f004 fcab 	bl	800645c <HAL_DAC_ConfigChannel>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_DAC1_Init+0x84>
  {
    Error_Handler();
 8001b0c:	f000 feca 	bl	80028a4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001b10:	bf00      	nop
 8001b12:	3730      	adds	r7, #48	@ 0x30
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	2000060c 	.word	0x2000060c
 8001b1c:	50000800 	.word	0x50000800

08001b20 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08c      	sub	sp, #48	@ 0x30
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001b26:	463b      	mov	r3, r7
 8001b28:	2230      	movs	r2, #48	@ 0x30
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f011 f81b 	bl	8012b68 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8001b32:	4b16      	ldr	r3, [pc, #88]	@ (8001b8c <MX_DAC2_Init+0x6c>)
 8001b34:	4a16      	ldr	r2, [pc, #88]	@ (8001b90 <MX_DAC2_Init+0x70>)
 8001b36:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001b38:	4814      	ldr	r0, [pc, #80]	@ (8001b8c <MX_DAC2_Init+0x6c>)
 8001b3a:	f004 fbd2 	bl	80062e2 <HAL_DAC_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8001b44:	f000 feae 	bl	80028a4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 8001b64:	2304      	movs	r3, #4
 8001b66:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001b6c:	463b      	mov	r3, r7
 8001b6e:	2200      	movs	r2, #0
 8001b70:	4619      	mov	r1, r3
 8001b72:	4806      	ldr	r0, [pc, #24]	@ (8001b8c <MX_DAC2_Init+0x6c>)
 8001b74:	f004 fc72 	bl	800645c <HAL_DAC_ConfigChannel>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8001b7e:	f000 fe91 	bl	80028a4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8001b82:	bf00      	nop
 8001b84:	3730      	adds	r7, #48	@ 0x30
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000620 	.word	0x20000620
 8001b90:	50000c00 	.word	0x50000c00

08001b94 <MX_DAC4_Init>:
  * @brief DAC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC4_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08c      	sub	sp, #48	@ 0x30
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC4_Init 0 */

  /* USER CODE END DAC4_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001b9a:	463b      	mov	r3, r7
 8001b9c:	2230      	movs	r2, #48	@ 0x30
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f010 ffe1 	bl	8012b68 <memset>

  /* USER CODE END DAC4_Init 1 */

  /** DAC Initialization
  */
  hdac4.Instance = DAC4;
 8001ba6:	4b16      	ldr	r3, [pc, #88]	@ (8001c00 <MX_DAC4_Init+0x6c>)
 8001ba8:	4a16      	ldr	r2, [pc, #88]	@ (8001c04 <MX_DAC4_Init+0x70>)
 8001baa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac4) != HAL_OK)
 8001bac:	4814      	ldr	r0, [pc, #80]	@ (8001c00 <MX_DAC4_Init+0x6c>)
 8001bae:	f004 fb98 	bl	80062e2 <HAL_DAC_Init>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_DAC4_Init+0x28>
  {
    Error_Handler();
 8001bb8:	f000 fe74 	bl	80028a4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac4, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001be0:	463b      	mov	r3, r7
 8001be2:	2200      	movs	r2, #0
 8001be4:	4619      	mov	r1, r3
 8001be6:	4806      	ldr	r0, [pc, #24]	@ (8001c00 <MX_DAC4_Init+0x6c>)
 8001be8:	f004 fc38 	bl	800645c <HAL_DAC_ConfigChannel>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_DAC4_Init+0x62>
  {
    Error_Handler();
 8001bf2:	f000 fe57 	bl	80028a4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC4_Init 2 */

  /* USER CODE END DAC4_Init 2 */

}
 8001bf6:	bf00      	nop
 8001bf8:	3730      	adds	r7, #48	@ 0x30
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000634 	.word	0x20000634
 8001c04:	50001400 	.word	0x50001400

08001c08 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c7c <MX_I2C3_Init+0x74>)
 8001c0e:	4a1c      	ldr	r2, [pc, #112]	@ (8001c80 <MX_I2C3_Init+0x78>)
 8001c10:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10E32879;
 8001c12:	4b1a      	ldr	r3, [pc, #104]	@ (8001c7c <MX_I2C3_Init+0x74>)
 8001c14:	4a1b      	ldr	r2, [pc, #108]	@ (8001c84 <MX_I2C3_Init+0x7c>)
 8001c16:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001c18:	4b18      	ldr	r3, [pc, #96]	@ (8001c7c <MX_I2C3_Init+0x74>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c1e:	4b17      	ldr	r3, [pc, #92]	@ (8001c7c <MX_I2C3_Init+0x74>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c24:	4b15      	ldr	r3, [pc, #84]	@ (8001c7c <MX_I2C3_Init+0x74>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001c2a:	4b14      	ldr	r3, [pc, #80]	@ (8001c7c <MX_I2C3_Init+0x74>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c30:	4b12      	ldr	r3, [pc, #72]	@ (8001c7c <MX_I2C3_Init+0x74>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c36:	4b11      	ldr	r3, [pc, #68]	@ (8001c7c <MX_I2C3_Init+0x74>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c7c <MX_I2C3_Init+0x74>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c42:	480e      	ldr	r0, [pc, #56]	@ (8001c7c <MX_I2C3_Init+0x74>)
 8001c44:	f005 f9f3 	bl	800702e <HAL_I2C_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001c4e:	f000 fe29 	bl	80028a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c52:	2100      	movs	r1, #0
 8001c54:	4809      	ldr	r0, [pc, #36]	@ (8001c7c <MX_I2C3_Init+0x74>)
 8001c56:	f005 fe0d 	bl	8007874 <HAL_I2CEx_ConfigAnalogFilter>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001c60:	f000 fe20 	bl	80028a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001c64:	2100      	movs	r1, #0
 8001c66:	4805      	ldr	r0, [pc, #20]	@ (8001c7c <MX_I2C3_Init+0x74>)
 8001c68:	f005 fe4f 	bl	800790a <HAL_I2CEx_ConfigDigitalFilter>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001c72:	f000 fe17 	bl	80028a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000648 	.word	0x20000648
 8001c80:	40007800 	.word	0x40007800
 8001c84:	10e32879 	.word	0x10e32879

08001c88 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001c8c:	4b21      	ldr	r3, [pc, #132]	@ (8001d14 <MX_LPUART1_UART_Init+0x8c>)
 8001c8e:	4a22      	ldr	r2, [pc, #136]	@ (8001d18 <MX_LPUART1_UART_Init+0x90>)
 8001c90:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 921600;
 8001c92:	4b20      	ldr	r3, [pc, #128]	@ (8001d14 <MX_LPUART1_UART_Init+0x8c>)
 8001c94:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001c98:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001d14 <MX_LPUART1_UART_Init+0x8c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d14 <MX_LPUART1_UART_Init+0x8c>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d14 <MX_LPUART1_UART_Init+0x8c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001cac:	4b19      	ldr	r3, [pc, #100]	@ (8001d14 <MX_LPUART1_UART_Init+0x8c>)
 8001cae:	220c      	movs	r2, #12
 8001cb0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cb2:	4b18      	ldr	r3, [pc, #96]	@ (8001d14 <MX_LPUART1_UART_Init+0x8c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cb8:	4b16      	ldr	r3, [pc, #88]	@ (8001d14 <MX_LPUART1_UART_Init+0x8c>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cbe:	4b15      	ldr	r3, [pc, #84]	@ (8001d14 <MX_LPUART1_UART_Init+0x8c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cc4:	4b13      	ldr	r3, [pc, #76]	@ (8001d14 <MX_LPUART1_UART_Init+0x8c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001cca:	4812      	ldr	r0, [pc, #72]	@ (8001d14 <MX_LPUART1_UART_Init+0x8c>)
 8001ccc:	f00b f82c 	bl	800cd28 <HAL_UART_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001cd6:	f000 fde5 	bl	80028a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cda:	2100      	movs	r1, #0
 8001cdc:	480d      	ldr	r0, [pc, #52]	@ (8001d14 <MX_LPUART1_UART_Init+0x8c>)
 8001cde:	f00b fe55 	bl	800d98c <HAL_UARTEx_SetTxFifoThreshold>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001ce8:	f000 fddc 	bl	80028a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cec:	2100      	movs	r1, #0
 8001cee:	4809      	ldr	r0, [pc, #36]	@ (8001d14 <MX_LPUART1_UART_Init+0x8c>)
 8001cf0:	f00b fe8a 	bl	800da08 <HAL_UARTEx_SetRxFifoThreshold>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001cfa:	f000 fdd3 	bl	80028a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001cfe:	4805      	ldr	r0, [pc, #20]	@ (8001d14 <MX_LPUART1_UART_Init+0x8c>)
 8001d00:	f00b fe0b 	bl	800d91a <HAL_UARTEx_DisableFifoMode>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001d0a:	f000 fdcb 	bl	80028a4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	2000069c 	.word	0x2000069c
 8001d18:	40008000 	.word	0x40008000

08001d1c <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001d20:	4b12      	ldr	r3, [pc, #72]	@ (8001d6c <MX_OPAMP1_Init+0x50>)
 8001d22:	4a13      	ldr	r2, [pc, #76]	@ (8001d70 <MX_OPAMP1_Init+0x54>)
 8001d24:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001d26:	4b11      	ldr	r3, [pc, #68]	@ (8001d6c <MX_OPAMP1_Init+0x50>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d6c <MX_OPAMP1_Init+0x50>)
 8001d2e:	2240      	movs	r2, #64	@ 0x40
 8001d30:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8001d32:	4b0e      	ldr	r3, [pc, #56]	@ (8001d6c <MX_OPAMP1_Init+0x50>)
 8001d34:	2208      	movs	r2, #8
 8001d36:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8001d38:	4b0c      	ldr	r3, [pc, #48]	@ (8001d6c <MX_OPAMP1_Init+0x50>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d6c <MX_OPAMP1_Init+0x50>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8001d44:	4b09      	ldr	r3, [pc, #36]	@ (8001d6c <MX_OPAMP1_Init+0x50>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	625a      	str	r2, [r3, #36]	@ 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8001d4a:	4b08      	ldr	r3, [pc, #32]	@ (8001d6c <MX_OPAMP1_Init+0x50>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	629a      	str	r2, [r3, #40]	@ 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001d50:	4b06      	ldr	r3, [pc, #24]	@ (8001d6c <MX_OPAMP1_Init+0x50>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001d56:	4805      	ldr	r0, [pc, #20]	@ (8001d6c <MX_OPAMP1_Init+0x50>)
 8001d58:	f005 fe24 	bl	80079a4 <HAL_OPAMP_Init>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_OPAMP1_Init+0x4a>
  {
    Error_Handler();
 8001d62:	f000 fd9f 	bl	80028a4 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000730 	.word	0x20000730
 8001d70:	40010300 	.word	0x40010300

08001d74 <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8001d78:	4b0f      	ldr	r3, [pc, #60]	@ (8001db8 <MX_OPAMP2_Init+0x44>)
 8001d7a:	4a10      	ldr	r2, [pc, #64]	@ (8001dbc <MX_OPAMP2_Init+0x48>)
 8001d7c:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001db8 <MX_OPAMP2_Init+0x44>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001d84:	4b0c      	ldr	r3, [pc, #48]	@ (8001db8 <MX_OPAMP2_Init+0x44>)
 8001d86:	2260      	movs	r2, #96	@ 0x60
 8001d88:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001db8 <MX_OPAMP2_Init+0x44>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = ENABLE;
 8001d90:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <MX_OPAMP2_Init+0x44>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001d96:	4b08      	ldr	r3, [pc, #32]	@ (8001db8 <MX_OPAMP2_Init+0x44>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	619a      	str	r2, [r3, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001d9c:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <MX_OPAMP2_Init+0x44>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001da2:	4805      	ldr	r0, [pc, #20]	@ (8001db8 <MX_OPAMP2_Init+0x44>)
 8001da4:	f005 fdfe 	bl	80079a4 <HAL_OPAMP_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_OPAMP2_Init+0x3e>
  {
    Error_Handler();
 8001dae:	f000 fd79 	bl	80028a4 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	2000076c 	.word	0x2000076c
 8001dbc:	40010304 	.word	0x40010304

08001dc0 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e04 <MX_OPAMP3_Init+0x44>)
 8001dc6:	4a10      	ldr	r2, [pc, #64]	@ (8001e08 <MX_OPAMP3_Init+0x48>)
 8001dc8:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001dca:	4b0e      	ldr	r3, [pc, #56]	@ (8001e04 <MX_OPAMP3_Init+0x44>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e04 <MX_OPAMP3_Init+0x44>)
 8001dd2:	2260      	movs	r2, #96	@ 0x60
 8001dd4:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO1;
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <MX_OPAMP3_Init+0x44>)
 8001dd8:	2204      	movs	r2, #4
 8001dda:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8001ddc:	4b09      	ldr	r3, [pc, #36]	@ (8001e04 <MX_OPAMP3_Init+0x44>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001de2:	4b08      	ldr	r3, [pc, #32]	@ (8001e04 <MX_OPAMP3_Init+0x44>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001de8:	4b06      	ldr	r3, [pc, #24]	@ (8001e04 <MX_OPAMP3_Init+0x44>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8001dee:	4805      	ldr	r0, [pc, #20]	@ (8001e04 <MX_OPAMP3_Init+0x44>)
 8001df0:	f005 fdd8 	bl	80079a4 <HAL_OPAMP_Init>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 8001dfa:	f000 fd53 	bl	80028a4 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	200007a8 	.word	0x200007a8
 8001e08:	40010308 	.word	0x40010308

08001e0c <MX_OPAMP4_Init>:
  * @brief OPAMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP4_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP4_Init 0 */

  /* USER CODE BEGIN OPAMP4_Init 1 */

  /* USER CODE END OPAMP4_Init 1 */
  hopamp4.Instance = OPAMP4;
 8001e10:	4b0f      	ldr	r3, [pc, #60]	@ (8001e50 <MX_OPAMP4_Init+0x44>)
 8001e12:	4a10      	ldr	r2, [pc, #64]	@ (8001e54 <MX_OPAMP4_Init+0x48>)
 8001e14:	601a      	str	r2, [r3, #0]
  hopamp4.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8001e16:	4b0e      	ldr	r3, [pc, #56]	@ (8001e50 <MX_OPAMP4_Init+0x44>)
 8001e18:	2280      	movs	r2, #128	@ 0x80
 8001e1a:	605a      	str	r2, [r3, #4]
  hopamp4.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e50 <MX_OPAMP4_Init+0x44>)
 8001e1e:	2260      	movs	r2, #96	@ 0x60
 8001e20:	609a      	str	r2, [r3, #8]
  hopamp4.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8001e22:	4b0b      	ldr	r3, [pc, #44]	@ (8001e50 <MX_OPAMP4_Init+0x44>)
 8001e24:	220c      	movs	r2, #12
 8001e26:	611a      	str	r2, [r3, #16]
  hopamp4.Init.InternalOutput = DISABLE;
 8001e28:	4b09      	ldr	r3, [pc, #36]	@ (8001e50 <MX_OPAMP4_Init+0x44>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	751a      	strb	r2, [r3, #20]
  hopamp4.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001e2e:	4b08      	ldr	r3, [pc, #32]	@ (8001e50 <MX_OPAMP4_Init+0x44>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	619a      	str	r2, [r3, #24]
  hopamp4.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001e34:	4b06      	ldr	r3, [pc, #24]	@ (8001e50 <MX_OPAMP4_Init+0x44>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp4) != HAL_OK)
 8001e3a:	4805      	ldr	r0, [pc, #20]	@ (8001e50 <MX_OPAMP4_Init+0x44>)
 8001e3c:	f005 fdb2 	bl	80079a4 <HAL_OPAMP_Init>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_OPAMP4_Init+0x3e>
  {
    Error_Handler();
 8001e46:	f000 fd2d 	bl	80028a4 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP4_Init 2 */

  /* USER CODE END OPAMP4_Init 2 */

}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200007e4 	.word	0x200007e4
 8001e54:	4001030c 	.word	0x4001030c

08001e58 <MX_OPAMP5_Init>:
  * @brief OPAMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP5_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP5_Init 0 */

  /* USER CODE BEGIN OPAMP5_Init 1 */

  /* USER CODE END OPAMP5_Init 1 */
  hopamp5.Instance = OPAMP5;
 8001e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e9c <MX_OPAMP5_Init+0x44>)
 8001e5e:	4a10      	ldr	r2, [pc, #64]	@ (8001ea0 <MX_OPAMP5_Init+0x48>)
 8001e60:	601a      	str	r2, [r3, #0]
  hopamp5.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001e62:	4b0e      	ldr	r3, [pc, #56]	@ (8001e9c <MX_OPAMP5_Init+0x44>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	605a      	str	r2, [r3, #4]
  hopamp5.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001e68:	4b0c      	ldr	r3, [pc, #48]	@ (8001e9c <MX_OPAMP5_Init+0x44>)
 8001e6a:	2260      	movs	r2, #96	@ 0x60
 8001e6c:	609a      	str	r2, [r3, #8]
  hopamp5.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e9c <MX_OPAMP5_Init+0x44>)
 8001e70:	2208      	movs	r2, #8
 8001e72:	611a      	str	r2, [r3, #16]
  hopamp5.Init.InternalOutput = ENABLE;
 8001e74:	4b09      	ldr	r3, [pc, #36]	@ (8001e9c <MX_OPAMP5_Init+0x44>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	751a      	strb	r2, [r3, #20]
  hopamp5.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001e7a:	4b08      	ldr	r3, [pc, #32]	@ (8001e9c <MX_OPAMP5_Init+0x44>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	619a      	str	r2, [r3, #24]
  hopamp5.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001e80:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <MX_OPAMP5_Init+0x44>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp5) != HAL_OK)
 8001e86:	4805      	ldr	r0, [pc, #20]	@ (8001e9c <MX_OPAMP5_Init+0x44>)
 8001e88:	f005 fd8c 	bl	80079a4 <HAL_OPAMP_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_OPAMP5_Init+0x3e>
  {
    Error_Handler();
 8001e92:	f000 fd07 	bl	80028a4 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP5_Init 2 */

  /* USER CODE END OPAMP5_Init 2 */

}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000820 	.word	0x20000820
 8001ea0:	40010310 	.word	0x40010310

08001ea4 <MX_OPAMP6_Init>:
  * @brief OPAMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP6_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 8001ea8:	4b12      	ldr	r3, [pc, #72]	@ (8001ef4 <MX_OPAMP6_Init+0x50>)
 8001eaa:	4a13      	ldr	r2, [pc, #76]	@ (8001ef8 <MX_OPAMP6_Init+0x54>)
 8001eac:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001eae:	4b11      	ldr	r3, [pc, #68]	@ (8001ef4 <MX_OPAMP6_Init+0x50>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_PGA_MODE;
 8001eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef4 <MX_OPAMP6_Init+0x50>)
 8001eb6:	2240      	movs	r2, #64	@ 0x40
 8001eb8:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8001eba:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef4 <MX_OPAMP6_Init+0x50>)
 8001ebc:	2208      	movs	r2, #8
 8001ebe:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = ENABLE;
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef4 <MX_OPAMP6_Init+0x50>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef4 <MX_OPAMP6_Init+0x50>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]
  hopamp6.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8001ecc:	4b09      	ldr	r3, [pc, #36]	@ (8001ef4 <MX_OPAMP6_Init+0x50>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	625a      	str	r2, [r3, #36]	@ 0x24
  hopamp6.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8001ed2:	4b08      	ldr	r3, [pc, #32]	@ (8001ef4 <MX_OPAMP6_Init+0x50>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	629a      	str	r2, [r3, #40]	@ 0x28
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001ed8:	4b06      	ldr	r3, [pc, #24]	@ (8001ef4 <MX_OPAMP6_Init+0x50>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 8001ede:	4805      	ldr	r0, [pc, #20]	@ (8001ef4 <MX_OPAMP6_Init+0x50>)
 8001ee0:	f005 fd60 	bl	80079a4 <HAL_OPAMP_Init>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_OPAMP6_Init+0x4a>
  {
    Error_Handler();
 8001eea:	f000 fcdb 	bl	80028a4 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	2000085c 	.word	0x2000085c
 8001ef8:	40010314 	.word	0x40010314

08001efc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001f00:	4b1b      	ldr	r3, [pc, #108]	@ (8001f70 <MX_SPI3_Init+0x74>)
 8001f02:	4a1c      	ldr	r2, [pc, #112]	@ (8001f74 <MX_SPI3_Init+0x78>)
 8001f04:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001f06:	4b1a      	ldr	r3, [pc, #104]	@ (8001f70 <MX_SPI3_Init+0x74>)
 8001f08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f0c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8001f0e:	4b18      	ldr	r3, [pc, #96]	@ (8001f70 <MX_SPI3_Init+0x74>)
 8001f10:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001f14:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f16:	4b16      	ldr	r3, [pc, #88]	@ (8001f70 <MX_SPI3_Init+0x74>)
 8001f18:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001f1c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001f1e:	4b14      	ldr	r3, [pc, #80]	@ (8001f70 <MX_SPI3_Init+0x74>)
 8001f20:	2202      	movs	r2, #2
 8001f22:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f24:	4b12      	ldr	r3, [pc, #72]	@ (8001f70 <MX_SPI3_Init+0x74>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001f2a:	4b11      	ldr	r3, [pc, #68]	@ (8001f70 <MX_SPI3_Init+0x74>)
 8001f2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f30:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001f32:	4b0f      	ldr	r3, [pc, #60]	@ (8001f70 <MX_SPI3_Init+0x74>)
 8001f34:	2210      	movs	r2, #16
 8001f36:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f38:	4b0d      	ldr	r3, [pc, #52]	@ (8001f70 <MX_SPI3_Init+0x74>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f70 <MX_SPI3_Init+0x74>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f44:	4b0a      	ldr	r3, [pc, #40]	@ (8001f70 <MX_SPI3_Init+0x74>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001f4a:	4b09      	ldr	r3, [pc, #36]	@ (8001f70 <MX_SPI3_Init+0x74>)
 8001f4c:	2207      	movs	r2, #7
 8001f4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f50:	4b07      	ldr	r3, [pc, #28]	@ (8001f70 <MX_SPI3_Init+0x74>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f56:	4b06      	ldr	r3, [pc, #24]	@ (8001f70 <MX_SPI3_Init+0x74>)
 8001f58:	2208      	movs	r2, #8
 8001f5a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001f5c:	4804      	ldr	r0, [pc, #16]	@ (8001f70 <MX_SPI3_Init+0x74>)
 8001f5e:	f008 fb4f 	bl	800a600 <HAL_SPI_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_SPI3_Init+0x70>
  {
    Error_Handler();
 8001f68:	f000 fc9c 	bl	80028a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001f6c:	bf00      	nop
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20000898 	.word	0x20000898
 8001f74:	40003c00 	.word	0x40003c00

08001f78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08c      	sub	sp, #48	@ 0x30
 8001f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f7e:	f107 030c 	add.w	r3, r7, #12
 8001f82:	2224      	movs	r2, #36	@ 0x24
 8001f84:	2100      	movs	r1, #0
 8001f86:	4618      	mov	r0, r3
 8001f88:	f010 fdee 	bl	8012b68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f8c:	463b      	mov	r3, r7
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	605a      	str	r2, [r3, #4]
 8001f94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f96:	4b23      	ldr	r3, [pc, #140]	@ (8002024 <MX_TIM1_Init+0xac>)
 8001f98:	4a23      	ldr	r2, [pc, #140]	@ (8002028 <MX_TIM1_Init+0xb0>)
 8001f9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f9c:	4b21      	ldr	r3, [pc, #132]	@ (8002024 <MX_TIM1_Init+0xac>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa2:	4b20      	ldr	r3, [pc, #128]	@ (8002024 <MX_TIM1_Init+0xac>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001fa8:	4b1e      	ldr	r3, [pc, #120]	@ (8002024 <MX_TIM1_Init+0xac>)
 8001faa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb0:	4b1c      	ldr	r3, [pc, #112]	@ (8002024 <MX_TIM1_Init+0xac>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8002024 <MX_TIM1_Init+0xac>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fbc:	4b19      	ldr	r3, [pc, #100]	@ (8002024 <MX_TIM1_Init+0xac>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001fd2:	230f      	movs	r3, #15
 8001fd4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001fe2:	230f      	movs	r3, #15
 8001fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001fe6:	f107 030c 	add.w	r3, r7, #12
 8001fea:	4619      	mov	r1, r3
 8001fec:	480d      	ldr	r0, [pc, #52]	@ (8002024 <MX_TIM1_Init+0xac>)
 8001fee:	f009 fc83 	bl	800b8f8 <HAL_TIM_Encoder_Init>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001ff8:	f000 fc54 	bl	80028a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002000:	2300      	movs	r3, #0
 8002002:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002004:	2300      	movs	r3, #0
 8002006:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002008:	463b      	mov	r3, r7
 800200a:	4619      	mov	r1, r3
 800200c:	4805      	ldr	r0, [pc, #20]	@ (8002024 <MX_TIM1_Init+0xac>)
 800200e:	f00a fd61 	bl	800cad4 <HAL_TIMEx_MasterConfigSynchronization>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002018:	f000 fc44 	bl	80028a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800201c:	bf00      	nop
 800201e:	3730      	adds	r7, #48	@ 0x30
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	2000095c 	.word	0x2000095c
 8002028:	40012c00 	.word	0x40012c00

0800202c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08c      	sub	sp, #48	@ 0x30
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002032:	f107 030c 	add.w	r3, r7, #12
 8002036:	2224      	movs	r2, #36	@ 0x24
 8002038:	2100      	movs	r1, #0
 800203a:	4618      	mov	r0, r3
 800203c:	f010 fd94 	bl	8012b68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002040:	463b      	mov	r3, r7
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	605a      	str	r2, [r3, #4]
 8002048:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800204a:	4b21      	ldr	r3, [pc, #132]	@ (80020d0 <MX_TIM3_Init+0xa4>)
 800204c:	4a21      	ldr	r2, [pc, #132]	@ (80020d4 <MX_TIM3_Init+0xa8>)
 800204e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002050:	4b1f      	ldr	r3, [pc, #124]	@ (80020d0 <MX_TIM3_Init+0xa4>)
 8002052:	2200      	movs	r2, #0
 8002054:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002056:	4b1e      	ldr	r3, [pc, #120]	@ (80020d0 <MX_TIM3_Init+0xa4>)
 8002058:	2200      	movs	r2, #0
 800205a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800205c:	4b1c      	ldr	r3, [pc, #112]	@ (80020d0 <MX_TIM3_Init+0xa4>)
 800205e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002062:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002064:	4b1a      	ldr	r3, [pc, #104]	@ (80020d0 <MX_TIM3_Init+0xa4>)
 8002066:	2200      	movs	r2, #0
 8002068:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800206a:	4b19      	ldr	r3, [pc, #100]	@ (80020d0 <MX_TIM3_Init+0xa4>)
 800206c:	2200      	movs	r2, #0
 800206e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002070:	2301      	movs	r3, #1
 8002072:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002074:	2300      	movs	r3, #0
 8002076:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002078:	2301      	movs	r3, #1
 800207a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800207c:	2300      	movs	r3, #0
 800207e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002080:	230f      	movs	r3, #15
 8002082:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002084:	2300      	movs	r3, #0
 8002086:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002088:	2301      	movs	r3, #1
 800208a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800208c:	2300      	movs	r3, #0
 800208e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8002090:	230f      	movs	r3, #15
 8002092:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002094:	f107 030c 	add.w	r3, r7, #12
 8002098:	4619      	mov	r1, r3
 800209a:	480d      	ldr	r0, [pc, #52]	@ (80020d0 <MX_TIM3_Init+0xa4>)
 800209c:	f009 fc2c 	bl	800b8f8 <HAL_TIM_Encoder_Init>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80020a6:	f000 fbfd 	bl	80028a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020aa:	2300      	movs	r3, #0
 80020ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ae:	2300      	movs	r3, #0
 80020b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020b2:	463b      	mov	r3, r7
 80020b4:	4619      	mov	r1, r3
 80020b6:	4806      	ldr	r0, [pc, #24]	@ (80020d0 <MX_TIM3_Init+0xa4>)
 80020b8:	f00a fd0c 	bl	800cad4 <HAL_TIMEx_MasterConfigSynchronization>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80020c2:	f000 fbef 	bl	80028a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020c6:	bf00      	nop
 80020c8:	3730      	adds	r7, #48	@ 0x30
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	200009a8 	.word	0x200009a8
 80020d4:	40000400 	.word	0x40000400

080020d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08c      	sub	sp, #48	@ 0x30
 80020dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80020de:	f107 030c 	add.w	r3, r7, #12
 80020e2:	2224      	movs	r2, #36	@ 0x24
 80020e4:	2100      	movs	r1, #0
 80020e6:	4618      	mov	r0, r3
 80020e8:	f010 fd3e 	bl	8012b68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ec:	463b      	mov	r3, r7
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	605a      	str	r2, [r3, #4]
 80020f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80020f6:	4b21      	ldr	r3, [pc, #132]	@ (800217c <MX_TIM4_Init+0xa4>)
 80020f8:	4a21      	ldr	r2, [pc, #132]	@ (8002180 <MX_TIM4_Init+0xa8>)
 80020fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80020fc:	4b1f      	ldr	r3, [pc, #124]	@ (800217c <MX_TIM4_Init+0xa4>)
 80020fe:	2200      	movs	r2, #0
 8002100:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002102:	4b1e      	ldr	r3, [pc, #120]	@ (800217c <MX_TIM4_Init+0xa4>)
 8002104:	2200      	movs	r2, #0
 8002106:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002108:	4b1c      	ldr	r3, [pc, #112]	@ (800217c <MX_TIM4_Init+0xa4>)
 800210a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800210e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002110:	4b1a      	ldr	r3, [pc, #104]	@ (800217c <MX_TIM4_Init+0xa4>)
 8002112:	2200      	movs	r2, #0
 8002114:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002116:	4b19      	ldr	r3, [pc, #100]	@ (800217c <MX_TIM4_Init+0xa4>)
 8002118:	2200      	movs	r2, #0
 800211a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800211c:	2301      	movs	r3, #1
 800211e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002120:	2300      	movs	r3, #0
 8002122:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002124:	2301      	movs	r3, #1
 8002126:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002128:	2300      	movs	r3, #0
 800212a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800212c:	230f      	movs	r3, #15
 800212e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002130:	2300      	movs	r3, #0
 8002132:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002134:	2301      	movs	r3, #1
 8002136:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002138:	2300      	movs	r3, #0
 800213a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800213c:	230f      	movs	r3, #15
 800213e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002140:	f107 030c 	add.w	r3, r7, #12
 8002144:	4619      	mov	r1, r3
 8002146:	480d      	ldr	r0, [pc, #52]	@ (800217c <MX_TIM4_Init+0xa4>)
 8002148:	f009 fbd6 	bl	800b8f8 <HAL_TIM_Encoder_Init>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002152:	f000 fba7 	bl	80028a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002156:	2300      	movs	r3, #0
 8002158:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800215a:	2300      	movs	r3, #0
 800215c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800215e:	463b      	mov	r3, r7
 8002160:	4619      	mov	r1, r3
 8002162:	4806      	ldr	r0, [pc, #24]	@ (800217c <MX_TIM4_Init+0xa4>)
 8002164:	f00a fcb6 	bl	800cad4 <HAL_TIMEx_MasterConfigSynchronization>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800216e:	f000 fb99 	bl	80028a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002172:	bf00      	nop
 8002174:	3730      	adds	r7, #48	@ 0x30
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	200009f4 	.word	0x200009f4
 8002180:	40000800 	.word	0x40000800

08002184 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800218a:	1d3b      	adds	r3, r7, #4
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002194:	4b14      	ldr	r3, [pc, #80]	@ (80021e8 <MX_TIM6_Init+0x64>)
 8002196:	4a15      	ldr	r2, [pc, #84]	@ (80021ec <MX_TIM6_Init+0x68>)
 8002198:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800219a:	4b13      	ldr	r3, [pc, #76]	@ (80021e8 <MX_TIM6_Init+0x64>)
 800219c:	2200      	movs	r2, #0
 800219e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a0:	4b11      	ldr	r3, [pc, #68]	@ (80021e8 <MX_TIM6_Init+0x64>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 149;
 80021a6:	4b10      	ldr	r3, [pc, #64]	@ (80021e8 <MX_TIM6_Init+0x64>)
 80021a8:	2295      	movs	r2, #149	@ 0x95
 80021aa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ac:	4b0e      	ldr	r3, [pc, #56]	@ (80021e8 <MX_TIM6_Init+0x64>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80021b2:	480d      	ldr	r0, [pc, #52]	@ (80021e8 <MX_TIM6_Init+0x64>)
 80021b4:	f008 ff38 	bl	800b028 <HAL_TIM_Base_Init>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80021be:	f000 fb71 	bl	80028a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80021c2:	2320      	movs	r3, #32
 80021c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80021ca:	1d3b      	adds	r3, r7, #4
 80021cc:	4619      	mov	r1, r3
 80021ce:	4806      	ldr	r0, [pc, #24]	@ (80021e8 <MX_TIM6_Init+0x64>)
 80021d0:	f00a fc80 	bl	800cad4 <HAL_TIMEx_MasterConfigSynchronization>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80021da:	f000 fb63 	bl	80028a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80021de:	bf00      	nop
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000a40 	.word	0x20000a40
 80021ec:	40001000 	.word	0x40001000

080021f0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021f6:	1d3b      	adds	r3, r7, #4
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002200:	4b14      	ldr	r3, [pc, #80]	@ (8002254 <MX_TIM7_Init+0x64>)
 8002202:	4a15      	ldr	r2, [pc, #84]	@ (8002258 <MX_TIM7_Init+0x68>)
 8002204:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 180-1;
 8002206:	4b13      	ldr	r3, [pc, #76]	@ (8002254 <MX_TIM7_Init+0x64>)
 8002208:	22b3      	movs	r2, #179	@ 0xb3
 800220a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800220c:	4b11      	ldr	r3, [pc, #68]	@ (8002254 <MX_TIM7_Init+0x64>)
 800220e:	2200      	movs	r2, #0
 8002210:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8002212:	4b10      	ldr	r3, [pc, #64]	@ (8002254 <MX_TIM7_Init+0x64>)
 8002214:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002218:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800221a:	4b0e      	ldr	r3, [pc, #56]	@ (8002254 <MX_TIM7_Init+0x64>)
 800221c:	2200      	movs	r2, #0
 800221e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002220:	480c      	ldr	r0, [pc, #48]	@ (8002254 <MX_TIM7_Init+0x64>)
 8002222:	f008 ff01 	bl	800b028 <HAL_TIM_Base_Init>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800222c:	f000 fb3a 	bl	80028a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002230:	2320      	movs	r3, #32
 8002232:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002234:	2300      	movs	r3, #0
 8002236:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002238:	1d3b      	adds	r3, r7, #4
 800223a:	4619      	mov	r1, r3
 800223c:	4805      	ldr	r0, [pc, #20]	@ (8002254 <MX_TIM7_Init+0x64>)
 800223e:	f00a fc49 	bl	800cad4 <HAL_TIMEx_MasterConfigSynchronization>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002248:	f000 fb2c 	bl	80028a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800224c:	bf00      	nop
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20000a8c 	.word	0x20000a8c
 8002258:	40001400 	.word	0x40001400

0800225c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b09c      	sub	sp, #112	@ 0x70
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002262:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	605a      	str	r2, [r3, #4]
 800226c:	609a      	str	r2, [r3, #8]
 800226e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002270:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800227c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
 800228c:	615a      	str	r2, [r3, #20]
 800228e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002290:	1d3b      	adds	r3, r7, #4
 8002292:	2234      	movs	r2, #52	@ 0x34
 8002294:	2100      	movs	r1, #0
 8002296:	4618      	mov	r0, r3
 8002298:	f010 fc66 	bl	8012b68 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800229c:	4b4e      	ldr	r3, [pc, #312]	@ (80023d8 <MX_TIM8_Init+0x17c>)
 800229e:	4a4f      	ldr	r2, [pc, #316]	@ (80023dc <MX_TIM8_Init+0x180>)
 80022a0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80022a2:	4b4d      	ldr	r3, [pc, #308]	@ (80023d8 <MX_TIM8_Init+0x17c>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a8:	4b4b      	ldr	r3, [pc, #300]	@ (80023d8 <MX_TIM8_Init+0x17c>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 179;
 80022ae:	4b4a      	ldr	r3, [pc, #296]	@ (80023d8 <MX_TIM8_Init+0x17c>)
 80022b0:	22b3      	movs	r2, #179	@ 0xb3
 80022b2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b4:	4b48      	ldr	r3, [pc, #288]	@ (80023d8 <MX_TIM8_Init+0x17c>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80022ba:	4b47      	ldr	r3, [pc, #284]	@ (80023d8 <MX_TIM8_Init+0x17c>)
 80022bc:	2200      	movs	r2, #0
 80022be:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c0:	4b45      	ldr	r3, [pc, #276]	@ (80023d8 <MX_TIM8_Init+0x17c>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80022c6:	4844      	ldr	r0, [pc, #272]	@ (80023d8 <MX_TIM8_Init+0x17c>)
 80022c8:	f008 feae 	bl	800b028 <HAL_TIM_Base_Init>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80022d2:	f000 fae7 	bl	80028a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022da:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80022dc:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80022e0:	4619      	mov	r1, r3
 80022e2:	483d      	ldr	r0, [pc, #244]	@ (80023d8 <MX_TIM8_Init+0x17c>)
 80022e4:	f009 fd50 	bl	800bd88 <HAL_TIM_ConfigClockSource>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80022ee:	f000 fad9 	bl	80028a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80022f2:	4839      	ldr	r0, [pc, #228]	@ (80023d8 <MX_TIM8_Init+0x17c>)
 80022f4:	f008 ff60 	bl	800b1b8 <HAL_TIM_PWM_Init>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80022fe:	f000 fad1 	bl	80028a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002302:	2300      	movs	r3, #0
 8002304:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002306:	2300      	movs	r3, #0
 8002308:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800230a:	2300      	movs	r3, #0
 800230c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800230e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002312:	4619      	mov	r1, r3
 8002314:	4830      	ldr	r0, [pc, #192]	@ (80023d8 <MX_TIM8_Init+0x17c>)
 8002316:	f00a fbdd 	bl	800cad4 <HAL_TIMEx_MasterConfigSynchronization>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8002320:	f000 fac0 	bl	80028a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002324:	2370      	movs	r3, #112	@ 0x70
 8002326:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 90;
 8002328:	235a      	movs	r3, #90	@ 0x5a
 800232a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800232c:	2302      	movs	r3, #2
 800232e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002330:	2300      	movs	r3, #0
 8002332:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002334:	2300      	movs	r3, #0
 8002336:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002338:	2300      	movs	r3, #0
 800233a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800233c:	2300      	movs	r3, #0
 800233e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002340:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002344:	2200      	movs	r2, #0
 8002346:	4619      	mov	r1, r3
 8002348:	4823      	ldr	r0, [pc, #140]	@ (80023d8 <MX_TIM8_Init+0x17c>)
 800234a:	f009 fc09 	bl	800bb60 <HAL_TIM_PWM_ConfigChannel>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 8002354:	f000 faa6 	bl	80028a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002358:	2360      	movs	r3, #96	@ 0x60
 800235a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800235c:	2300      	movs	r3, #0
 800235e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8002360:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002364:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002366:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800236a:	2208      	movs	r2, #8
 800236c:	4619      	mov	r1, r3
 800236e:	481a      	ldr	r0, [pc, #104]	@ (80023d8 <MX_TIM8_Init+0x17c>)
 8002370:	f009 fbf6 	bl	800bb60 <HAL_TIM_PWM_ConfigChannel>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <MX_TIM8_Init+0x122>
  {
    Error_Handler();
 800237a:	f000 fa93 	bl	80028a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800237e:	2300      	movs	r3, #0
 8002380:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002382:	2300      	movs	r3, #0
 8002384:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800238a:	2300      	movs	r3, #0
 800238c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002392:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002396:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002398:	2300      	movs	r3, #0
 800239a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800239c:	2300      	movs	r3, #0
 800239e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80023a0:	2300      	movs	r3, #0
 80023a2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80023a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80023ae:	2300      	movs	r3, #0
 80023b0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023b2:	2300      	movs	r3, #0
 80023b4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80023b6:	1d3b      	adds	r3, r7, #4
 80023b8:	4619      	mov	r1, r3
 80023ba:	4807      	ldr	r0, [pc, #28]	@ (80023d8 <MX_TIM8_Init+0x17c>)
 80023bc:	f00a fc20 	bl	800cc00 <HAL_TIMEx_ConfigBreakDeadTime>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_TIM8_Init+0x16e>
  {
    Error_Handler();
 80023c6:	f000 fa6d 	bl	80028a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80023ca:	4803      	ldr	r0, [pc, #12]	@ (80023d8 <MX_TIM8_Init+0x17c>)
 80023cc:	f001 fc9c 	bl	8003d08 <HAL_TIM_MspPostInit>

}
 80023d0:	bf00      	nop
 80023d2:	3770      	adds	r7, #112	@ 0x70
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20000ad8 	.word	0x20000ad8
 80023dc:	40013400 	.word	0x40013400

080023e0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b09c      	sub	sp, #112	@ 0x70
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023e6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	605a      	str	r2, [r3, #4]
 80023f0:	609a      	str	r2, [r3, #8]
 80023f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023f4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002400:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	60da      	str	r2, [r3, #12]
 800240e:	611a      	str	r2, [r3, #16]
 8002410:	615a      	str	r2, [r3, #20]
 8002412:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002414:	1d3b      	adds	r3, r7, #4
 8002416:	2234      	movs	r2, #52	@ 0x34
 8002418:	2100      	movs	r1, #0
 800241a:	4618      	mov	r0, r3
 800241c:	f010 fba4 	bl	8012b68 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002420:	4b3f      	ldr	r3, [pc, #252]	@ (8002520 <MX_TIM15_Init+0x140>)
 8002422:	4a40      	ldr	r2, [pc, #256]	@ (8002524 <MX_TIM15_Init+0x144>)
 8002424:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 150;
 8002426:	4b3e      	ldr	r3, [pc, #248]	@ (8002520 <MX_TIM15_Init+0x140>)
 8002428:	2296      	movs	r2, #150	@ 0x96
 800242a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800242c:	4b3c      	ldr	r3, [pc, #240]	@ (8002520 <MX_TIM15_Init+0x140>)
 800242e:	2200      	movs	r2, #0
 8002430:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8002432:	4b3b      	ldr	r3, [pc, #236]	@ (8002520 <MX_TIM15_Init+0x140>)
 8002434:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002438:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800243a:	4b39      	ldr	r3, [pc, #228]	@ (8002520 <MX_TIM15_Init+0x140>)
 800243c:	2200      	movs	r2, #0
 800243e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002440:	4b37      	ldr	r3, [pc, #220]	@ (8002520 <MX_TIM15_Init+0x140>)
 8002442:	2200      	movs	r2, #0
 8002444:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002446:	4b36      	ldr	r3, [pc, #216]	@ (8002520 <MX_TIM15_Init+0x140>)
 8002448:	2200      	movs	r2, #0
 800244a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800244c:	4834      	ldr	r0, [pc, #208]	@ (8002520 <MX_TIM15_Init+0x140>)
 800244e:	f008 fdeb 	bl	800b028 <HAL_TIM_Base_Init>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8002458:	f000 fa24 	bl	80028a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800245c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002460:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002462:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002466:	4619      	mov	r1, r3
 8002468:	482d      	ldr	r0, [pc, #180]	@ (8002520 <MX_TIM15_Init+0x140>)
 800246a:	f009 fc8d 	bl	800bd88 <HAL_TIM_ConfigClockSource>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8002474:	f000 fa16 	bl	80028a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002478:	4829      	ldr	r0, [pc, #164]	@ (8002520 <MX_TIM15_Init+0x140>)
 800247a:	f008 fe9d 	bl	800b1b8 <HAL_TIM_PWM_Init>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8002484:	f000 fa0e 	bl	80028a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002488:	2300      	movs	r3, #0
 800248a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800248c:	2300      	movs	r3, #0
 800248e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002490:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002494:	4619      	mov	r1, r3
 8002496:	4822      	ldr	r0, [pc, #136]	@ (8002520 <MX_TIM15_Init+0x140>)
 8002498:	f00a fb1c 	bl	800cad4 <HAL_TIMEx_MasterConfigSynchronization>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 80024a2:	f000 f9ff 	bl	80028a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024a6:	2360      	movs	r3, #96	@ 0x60
 80024a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 499;
 80024aa:	f240 13f3 	movw	r3, #499	@ 0x1f3
 80024ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024b0:	2300      	movs	r3, #0
 80024b2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024b4:	2300      	movs	r3, #0
 80024b6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024b8:	2300      	movs	r3, #0
 80024ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024bc:	2300      	movs	r3, #0
 80024be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024c0:	2300      	movs	r3, #0
 80024c2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024c4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80024c8:	2200      	movs	r2, #0
 80024ca:	4619      	mov	r1, r3
 80024cc:	4814      	ldr	r0, [pc, #80]	@ (8002520 <MX_TIM15_Init+0x140>)
 80024ce:	f009 fb47 	bl	800bb60 <HAL_TIM_PWM_ConfigChannel>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 80024d8:	f000 f9e4 	bl	80028a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024dc:	2300      	movs	r3, #0
 80024de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024fa:	2300      	movs	r3, #0
 80024fc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80024fe:	1d3b      	adds	r3, r7, #4
 8002500:	4619      	mov	r1, r3
 8002502:	4807      	ldr	r0, [pc, #28]	@ (8002520 <MX_TIM15_Init+0x140>)
 8002504:	f00a fb7c 	bl	800cc00 <HAL_TIMEx_ConfigBreakDeadTime>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 800250e:	f000 f9c9 	bl	80028a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002512:	4803      	ldr	r0, [pc, #12]	@ (8002520 <MX_TIM15_Init+0x140>)
 8002514:	f001 fbf8 	bl	8003d08 <HAL_TIM_MspPostInit>

}
 8002518:	bf00      	nop
 800251a:	3770      	adds	r7, #112	@ 0x70
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000b24 	.word	0x20000b24
 8002524:	40014000 	.word	0x40014000

08002528 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08c      	sub	sp, #48	@ 0x30
 800252c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800252e:	f107 030c 	add.w	r3, r7, #12
 8002532:	2224      	movs	r2, #36	@ 0x24
 8002534:	2100      	movs	r1, #0
 8002536:	4618      	mov	r0, r3
 8002538:	f010 fb16 	bl	8012b68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800253c:	463b      	mov	r3, r7
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	605a      	str	r2, [r3, #4]
 8002544:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8002546:	4b23      	ldr	r3, [pc, #140]	@ (80025d4 <MX_TIM20_Init+0xac>)
 8002548:	4a23      	ldr	r2, [pc, #140]	@ (80025d8 <MX_TIM20_Init+0xb0>)
 800254a:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 800254c:	4b21      	ldr	r3, [pc, #132]	@ (80025d4 <MX_TIM20_Init+0xac>)
 800254e:	2200      	movs	r2, #0
 8002550:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002552:	4b20      	ldr	r3, [pc, #128]	@ (80025d4 <MX_TIM20_Init+0xac>)
 8002554:	2200      	movs	r2, #0
 8002556:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8002558:	4b1e      	ldr	r3, [pc, #120]	@ (80025d4 <MX_TIM20_Init+0xac>)
 800255a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800255e:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002560:	4b1c      	ldr	r3, [pc, #112]	@ (80025d4 <MX_TIM20_Init+0xac>)
 8002562:	2200      	movs	r2, #0
 8002564:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8002566:	4b1b      	ldr	r3, [pc, #108]	@ (80025d4 <MX_TIM20_Init+0xac>)
 8002568:	2200      	movs	r2, #0
 800256a:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800256c:	4b19      	ldr	r3, [pc, #100]	@ (80025d4 <MX_TIM20_Init+0xac>)
 800256e:	2200      	movs	r2, #0
 8002570:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002572:	2301      	movs	r3, #1
 8002574:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002576:	2300      	movs	r3, #0
 8002578:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800257a:	2301      	movs	r3, #1
 800257c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800257e:	2300      	movs	r3, #0
 8002580:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002582:	230f      	movs	r3, #15
 8002584:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002586:	2300      	movs	r3, #0
 8002588:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800258a:	2301      	movs	r3, #1
 800258c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800258e:	2300      	movs	r3, #0
 8002590:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8002592:	230f      	movs	r3, #15
 8002594:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim20, &sConfig) != HAL_OK)
 8002596:	f107 030c 	add.w	r3, r7, #12
 800259a:	4619      	mov	r1, r3
 800259c:	480d      	ldr	r0, [pc, #52]	@ (80025d4 <MX_TIM20_Init+0xac>)
 800259e:	f009 f9ab 	bl	800b8f8 <HAL_TIM_Encoder_Init>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_TIM20_Init+0x84>
  {
    Error_Handler();
 80025a8:	f000 f97c 	bl	80028a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ac:	2300      	movs	r3, #0
 80025ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80025b0:	2300      	movs	r3, #0
 80025b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025b4:	2300      	movs	r3, #0
 80025b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 80025b8:	463b      	mov	r3, r7
 80025ba:	4619      	mov	r1, r3
 80025bc:	4805      	ldr	r0, [pc, #20]	@ (80025d4 <MX_TIM20_Init+0xac>)
 80025be:	f00a fa89 	bl	800cad4 <HAL_TIMEx_MasterConfigSynchronization>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <MX_TIM20_Init+0xa4>
  {
    Error_Handler();
 80025c8:	f000 f96c 	bl	80028a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 80025cc:	bf00      	nop
 80025ce:	3730      	adds	r7, #48	@ 0x30
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20000b70 	.word	0x20000b70
 80025d8:	40015000 	.word	0x40015000

080025dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80025e2:	4b22      	ldr	r3, [pc, #136]	@ (800266c <MX_DMA_Init+0x90>)
 80025e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025e6:	4a21      	ldr	r2, [pc, #132]	@ (800266c <MX_DMA_Init+0x90>)
 80025e8:	f043 0304 	orr.w	r3, r3, #4
 80025ec:	6493      	str	r3, [r2, #72]	@ 0x48
 80025ee:	4b1f      	ldr	r3, [pc, #124]	@ (800266c <MX_DMA_Init+0x90>)
 80025f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025f2:	f003 0304 	and.w	r3, r3, #4
 80025f6:	607b      	str	r3, [r7, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025fa:	4b1c      	ldr	r3, [pc, #112]	@ (800266c <MX_DMA_Init+0x90>)
 80025fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025fe:	4a1b      	ldr	r2, [pc, #108]	@ (800266c <MX_DMA_Init+0x90>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	6493      	str	r3, [r2, #72]	@ 0x48
 8002606:	4b19      	ldr	r3, [pc, #100]	@ (800266c <MX_DMA_Init+0x90>)
 8002608:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	603b      	str	r3, [r7, #0]
 8002610:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002612:	2200      	movs	r2, #0
 8002614:	2100      	movs	r1, #0
 8002616:	200b      	movs	r0, #11
 8002618:	f003 fe2f 	bl	800627a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800261c:	200b      	movs	r0, #11
 800261e:	f003 fe46 	bl	80062ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002622:	2200      	movs	r2, #0
 8002624:	2100      	movs	r1, #0
 8002626:	200c      	movs	r0, #12
 8002628:	f003 fe27 	bl	800627a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800262c:	200c      	movs	r0, #12
 800262e:	f003 fe3e 	bl	80062ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002632:	2200      	movs	r2, #0
 8002634:	2100      	movs	r1, #0
 8002636:	200d      	movs	r0, #13
 8002638:	f003 fe1f 	bl	800627a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800263c:	200d      	movs	r0, #13
 800263e:	f003 fe36 	bl	80062ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002642:	2200      	movs	r2, #0
 8002644:	2100      	movs	r1, #0
 8002646:	200e      	movs	r0, #14
 8002648:	f003 fe17 	bl	800627a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800264c:	200e      	movs	r0, #14
 800264e:	f003 fe2e 	bl	80062ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002652:	2200      	movs	r2, #0
 8002654:	2100      	movs	r1, #0
 8002656:	200f      	movs	r0, #15
 8002658:	f003 fe0f 	bl	800627a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800265c:	200f      	movs	r0, #15
 800265e:	f003 fe26 	bl	80062ae <HAL_NVIC_EnableIRQ>

}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40021000 	.word	0x40021000

08002670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b08a      	sub	sp, #40	@ 0x28
 8002674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002676:	f107 0314 	add.w	r3, r7, #20
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]
 8002680:	609a      	str	r2, [r3, #8]
 8002682:	60da      	str	r2, [r3, #12]
 8002684:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002686:	4b83      	ldr	r3, [pc, #524]	@ (8002894 <MX_GPIO_Init+0x224>)
 8002688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800268a:	4a82      	ldr	r2, [pc, #520]	@ (8002894 <MX_GPIO_Init+0x224>)
 800268c:	f043 0304 	orr.w	r3, r3, #4
 8002690:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002692:	4b80      	ldr	r3, [pc, #512]	@ (8002894 <MX_GPIO_Init+0x224>)
 8002694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002696:	f003 0304 	and.w	r3, r3, #4
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800269e:	4b7d      	ldr	r3, [pc, #500]	@ (8002894 <MX_GPIO_Init+0x224>)
 80026a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026a2:	4a7c      	ldr	r2, [pc, #496]	@ (8002894 <MX_GPIO_Init+0x224>)
 80026a4:	f043 0320 	orr.w	r3, r3, #32
 80026a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026aa:	4b7a      	ldr	r3, [pc, #488]	@ (8002894 <MX_GPIO_Init+0x224>)
 80026ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ae:	f003 0320 	and.w	r3, r3, #32
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b6:	4b77      	ldr	r3, [pc, #476]	@ (8002894 <MX_GPIO_Init+0x224>)
 80026b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ba:	4a76      	ldr	r2, [pc, #472]	@ (8002894 <MX_GPIO_Init+0x224>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026c2:	4b74      	ldr	r3, [pc, #464]	@ (8002894 <MX_GPIO_Init+0x224>)
 80026c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ce:	4b71      	ldr	r3, [pc, #452]	@ (8002894 <MX_GPIO_Init+0x224>)
 80026d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d2:	4a70      	ldr	r2, [pc, #448]	@ (8002894 <MX_GPIO_Init+0x224>)
 80026d4:	f043 0302 	orr.w	r3, r3, #2
 80026d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026da:	4b6e      	ldr	r3, [pc, #440]	@ (8002894 <MX_GPIO_Init+0x224>)
 80026dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	607b      	str	r3, [r7, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026e6:	4b6b      	ldr	r3, [pc, #428]	@ (8002894 <MX_GPIO_Init+0x224>)
 80026e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ea:	4a6a      	ldr	r2, [pc, #424]	@ (8002894 <MX_GPIO_Init+0x224>)
 80026ec:	f043 0308 	orr.w	r3, r3, #8
 80026f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026f2:	4b68      	ldr	r3, [pc, #416]	@ (8002894 <MX_GPIO_Init+0x224>)
 80026f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	603b      	str	r3, [r7, #0]
 80026fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AC_DC_CH2_Pin|CD_CH2_A_Pin|CD_CH2_B_Pin|CD_CH1_A_Pin
 80026fe:	2200      	movs	r2, #0
 8002700:	f64e 0120 	movw	r1, #59424	@ 0xe820
 8002704:	4864      	ldr	r0, [pc, #400]	@ (8002898 <MX_GPIO_Init+0x228>)
 8002706:	f004 fc57 	bl	8006fb8 <HAL_GPIO_WritePin>
                          |ST7789_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CD_CH2_C_Pin|AC_DC_CH1_Pin|CD_CH1_C_Pin, GPIO_PIN_RESET);
 800270a:	2200      	movs	r2, #0
 800270c:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8002710:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002714:	f004 fc50 	bl	8006fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CD_CH1_B_Pin|TLC5952_SCLK_Pin|TLC5952_LAT_Pin|TLC5952_SIN_Pin, GPIO_PIN_RESET);
 8002718:	2200      	movs	r2, #0
 800271a:	f248 0138 	movw	r1, #32824	@ 0x8038
 800271e:	485f      	ldr	r0, [pc, #380]	@ (800289c <MX_GPIO_Init+0x22c>)
 8002720:	f004 fc4a 	bl	8006fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FT6336_RST_GPIO_Port, FT6336_RST_Pin, GPIO_PIN_RESET);
 8002724:	2200      	movs	r2, #0
 8002726:	2104      	movs	r1, #4
 8002728:	485d      	ldr	r0, [pc, #372]	@ (80028a0 <MX_GPIO_Init+0x230>)
 800272a:	f004 fc45 	bl	8006fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AC_DC_CH2_Pin CD_CH2_A_Pin CD_CH2_B_Pin CD_CH1_A_Pin
                           ST7789_DC_Pin */
  GPIO_InitStruct.Pin = AC_DC_CH2_Pin|CD_CH2_A_Pin|CD_CH2_B_Pin|CD_CH1_A_Pin
 800272e:	f64e 0320 	movw	r3, #59424	@ 0xe820
 8002732:	617b      	str	r3, [r7, #20]
                          |ST7789_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002734:	2301      	movs	r3, #1
 8002736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273c:	2300      	movs	r3, #0
 800273e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002740:	f107 0314 	add.w	r3, r7, #20
 8002744:	4619      	mov	r1, r3
 8002746:	4854      	ldr	r0, [pc, #336]	@ (8002898 <MX_GPIO_Init+0x228>)
 8002748:	f004 fab4 	bl	8006cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800274c:	2301      	movs	r3, #1
 800274e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002750:	2302      	movs	r3, #2
 8002752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002758:	2300      	movs	r3, #0
 800275a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 800275c:	230e      	movs	r3, #14
 800275e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002760:	f107 0314 	add.w	r3, r7, #20
 8002764:	4619      	mov	r1, r3
 8002766:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800276a:	f004 faa3 	bl	8006cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CD_CH2_C_Pin AC_DC_CH1_Pin CD_CH1_C_Pin */
  GPIO_InitStruct.Pin = CD_CH2_C_Pin|AC_DC_CH1_Pin|CD_CH1_C_Pin;
 800276e:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8002772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002774:	2301      	movs	r3, #1
 8002776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002778:	2300      	movs	r3, #0
 800277a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277c:	2300      	movs	r3, #0
 800277e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002780:	f107 0314 	add.w	r3, r7, #20
 8002784:	4619      	mov	r1, r3
 8002786:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800278a:	f004 fa93 	bl	8006cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10;
 800278e:	f240 430c 	movw	r3, #1036	@ 0x40c
 8002792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002794:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279e:	f107 0314 	add.w	r3, r7, #20
 80027a2:	4619      	mov	r1, r3
 80027a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027a8:	f004 fa84 	bl	8006cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80027ac:	2310      	movs	r3, #16
 80027ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027b0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80027b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ba:	f107 0314 	add.w	r3, r7, #20
 80027be:	4619      	mov	r1, r3
 80027c0:	4835      	ldr	r0, [pc, #212]	@ (8002898 <MX_GPIO_Init+0x228>)
 80027c2:	f004 fa77 	bl	8006cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8;
 80027c6:	f240 1303 	movw	r3, #259	@ 0x103
 80027ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027cc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80027d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d6:	f107 0314 	add.w	r3, r7, #20
 80027da:	4619      	mov	r1, r3
 80027dc:	482f      	ldr	r0, [pc, #188]	@ (800289c <MX_GPIO_Init+0x22c>)
 80027de:	f004 fa69 	bl	8006cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CD_CH1_B_Pin TLC5952_SCLK_Pin TLC5952_LAT_Pin TLC5952_SIN_Pin */
  GPIO_InitStruct.Pin = CD_CH1_B_Pin|TLC5952_SCLK_Pin|TLC5952_LAT_Pin|TLC5952_SIN_Pin;
 80027e2:	f248 0338 	movw	r3, #32824	@ 0x8038
 80027e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027e8:	2301      	movs	r3, #1
 80027ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f0:	2300      	movs	r3, #0
 80027f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027f4:	f107 0314 	add.w	r3, r7, #20
 80027f8:	4619      	mov	r1, r3
 80027fa:	4828      	ldr	r0, [pc, #160]	@ (800289c <MX_GPIO_Init+0x22c>)
 80027fc:	f004 fa5a 	bl	8006cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FT6336_RST_Pin */
  GPIO_InitStruct.Pin = FT6336_RST_Pin;
 8002800:	2304      	movs	r3, #4
 8002802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002804:	2301      	movs	r3, #1
 8002806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002808:	2300      	movs	r3, #0
 800280a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280c:	2300      	movs	r3, #0
 800280e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FT6336_RST_GPIO_Port, &GPIO_InitStruct);
 8002810:	f107 0314 	add.w	r3, r7, #20
 8002814:	4619      	mov	r1, r3
 8002816:	4822      	ldr	r0, [pc, #136]	@ (80028a0 <MX_GPIO_Init+0x230>)
 8002818:	f004 fa4c 	bl	8006cb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800281c:	2200      	movs	r2, #0
 800281e:	2100      	movs	r1, #0
 8002820:	2006      	movs	r0, #6
 8002822:	f003 fd2a 	bl	800627a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002826:	2006      	movs	r0, #6
 8002828:	f003 fd41 	bl	80062ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800282c:	2200      	movs	r2, #0
 800282e:	2100      	movs	r1, #0
 8002830:	2007      	movs	r0, #7
 8002832:	f003 fd22 	bl	800627a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002836:	2007      	movs	r0, #7
 8002838:	f003 fd39 	bl	80062ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800283c:	2200      	movs	r2, #0
 800283e:	2100      	movs	r1, #0
 8002840:	2008      	movs	r0, #8
 8002842:	f003 fd1a 	bl	800627a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002846:	2008      	movs	r0, #8
 8002848:	f003 fd31 	bl	80062ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800284c:	2200      	movs	r2, #0
 800284e:	2100      	movs	r1, #0
 8002850:	2009      	movs	r0, #9
 8002852:	f003 fd12 	bl	800627a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002856:	2009      	movs	r0, #9
 8002858:	f003 fd29 	bl	80062ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800285c:	2200      	movs	r2, #0
 800285e:	2100      	movs	r1, #0
 8002860:	200a      	movs	r0, #10
 8002862:	f003 fd0a 	bl	800627a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002866:	200a      	movs	r0, #10
 8002868:	f003 fd21 	bl	80062ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800286c:	2200      	movs	r2, #0
 800286e:	2100      	movs	r1, #0
 8002870:	2017      	movs	r0, #23
 8002872:	f003 fd02 	bl	800627a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002876:	2017      	movs	r0, #23
 8002878:	f003 fd19 	bl	80062ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800287c:	2200      	movs	r2, #0
 800287e:	2100      	movs	r1, #0
 8002880:	2028      	movs	r0, #40	@ 0x28
 8002882:	f003 fcfa 	bl	800627a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002886:	2028      	movs	r0, #40	@ 0x28
 8002888:	f003 fd11 	bl	80062ae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800288c:	bf00      	nop
 800288e:	3728      	adds	r7, #40	@ 0x28
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40021000 	.word	0x40021000
 8002898:	48000800 	.word	0x48000800
 800289c:	48000400 	.word	0x48000400
 80028a0:	48000c00 	.word	0x48000c00

080028a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028a8:	b672      	cpsid	i
}
 80028aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028ac:	bf00      	nop
 80028ae:	e7fd      	b.n	80028ac <Error_Handler+0x8>

080028b0 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 80028ba:	bf00      	nop
	ST7789_DC_Clr();
 80028bc:	2200      	movs	r2, #0
 80028be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80028c2:	4807      	ldr	r0, [pc, #28]	@ (80028e0 <ST7789_WriteCommand+0x30>)
 80028c4:	f004 fb78 	bl	8006fb8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80028c8:	1df9      	adds	r1, r7, #7
 80028ca:	f04f 33ff 	mov.w	r3, #4294967295
 80028ce:	2201      	movs	r2, #1
 80028d0:	4804      	ldr	r0, [pc, #16]	@ (80028e4 <ST7789_WriteCommand+0x34>)
 80028d2:	f007 ff40 	bl	800a756 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 80028d6:	bf00      	nop
}
 80028d8:	bf00      	nop
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	48000800 	.word	0x48000800
 80028e4:	20000898 	.word	0x20000898

080028e8 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 80028f2:	bf00      	nop
	ST7789_DC_Set();
 80028f4:	2201      	movs	r2, #1
 80028f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80028fa:	481b      	ldr	r0, [pc, #108]	@ (8002968 <ST7789_WriteData+0x80>)
 80028fc:	f004 fb5c 	bl	8006fb8 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8002900:	e02a      	b.n	8002958 <ST7789_WriteData+0x70>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002908:	4293      	cmp	r3, r2
 800290a:	bf28      	it	cs
 800290c:	4613      	movcs	r3, r2
 800290e:	81fb      	strh	r3, [r7, #14]
		#ifdef USE_DMA
			if (DMA_MIN_SIZE <= buff_size)
 8002910:	4b16      	ldr	r3, [pc, #88]	@ (800296c <ST7789_WriteData+0x84>)
 8002912:	881b      	ldrh	r3, [r3, #0]
 8002914:	461a      	mov	r2, r3
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	4293      	cmp	r3, r2
 800291a:	d30e      	bcc.n	800293a <ST7789_WriteData+0x52>
			{
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 800291c:	89fb      	ldrh	r3, [r7, #14]
 800291e:	461a      	mov	r2, r3
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	4813      	ldr	r0, [pc, #76]	@ (8002970 <ST7789_WriteData+0x88>)
 8002924:	f008 f88e 	bl	800aa44 <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 8002928:	bf00      	nop
 800292a:	4b11      	ldr	r3, [pc, #68]	@ (8002970 <ST7789_WriteData+0x88>)
 800292c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800292e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b01      	cmp	r3, #1
 8002936:	d1f8      	bne.n	800292a <ST7789_WriteData+0x42>
 8002938:	e006      	b.n	8002948 <ST7789_WriteData+0x60>
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 800293a:	89fa      	ldrh	r2, [r7, #14]
 800293c:	f04f 33ff 	mov.w	r3, #4294967295
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	480b      	ldr	r0, [pc, #44]	@ (8002970 <ST7789_WriteData+0x88>)
 8002944:	f007 ff07 	bl	800a756 <HAL_SPI_Transmit>
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#endif
		buff += chunk_size;
 8002948:	89fb      	ldrh	r3, [r7, #14]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	4413      	add	r3, r2
 800294e:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8002950:	89fb      	ldrh	r3, [r7, #14]
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1d1      	bne.n	8002902 <ST7789_WriteData+0x1a>
	}

	ST7789_UnSelect();
 800295e:	bf00      	nop
}
 8002960:	bf00      	nop
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	48000800 	.word	0x48000800
 800296c:	20000040 	.word	0x20000040
 8002970:	20000898 	.word	0x20000898

08002974 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800297e:	bf00      	nop
	ST7789_DC_Set();
 8002980:	2201      	movs	r2, #1
 8002982:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002986:	4807      	ldr	r0, [pc, #28]	@ (80029a4 <ST7789_WriteSmallData+0x30>)
 8002988:	f004 fb16 	bl	8006fb8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 800298c:	1df9      	adds	r1, r7, #7
 800298e:	f04f 33ff 	mov.w	r3, #4294967295
 8002992:	2201      	movs	r2, #1
 8002994:	4804      	ldr	r0, [pc, #16]	@ (80029a8 <ST7789_WriteSmallData+0x34>)
 8002996:	f007 fede 	bl	800a756 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 800299a:	bf00      	nop
}
 800299c:	bf00      	nop
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	48000800 	.word	0x48000800
 80029a8:	20000898 	.word	0x20000898

080029ac <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 80029b6:	2036      	movs	r0, #54	@ 0x36
 80029b8:	f7ff ff7a 	bl	80028b0 <ST7789_WriteCommand>
	switch (m) {
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d81a      	bhi.n	80029f8 <ST7789_SetRotation+0x4c>
 80029c2:	a201      	add	r2, pc, #4	@ (adr r2, 80029c8 <ST7789_SetRotation+0x1c>)
 80029c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c8:	080029d9 	.word	0x080029d9
 80029cc:	080029e1 	.word	0x080029e1
 80029d0:	080029e9 	.word	0x080029e9
 80029d4:	080029f1 	.word	0x080029f1
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 80029d8:	20c0      	movs	r0, #192	@ 0xc0
 80029da:	f7ff ffcb 	bl	8002974 <ST7789_WriteSmallData>
		break;
 80029de:	e00c      	b.n	80029fa <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80029e0:	20a0      	movs	r0, #160	@ 0xa0
 80029e2:	f7ff ffc7 	bl	8002974 <ST7789_WriteSmallData>
		break;
 80029e6:	e008      	b.n	80029fa <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 80029e8:	2000      	movs	r0, #0
 80029ea:	f7ff ffc3 	bl	8002974 <ST7789_WriteSmallData>
		break;
 80029ee:	e004      	b.n	80029fa <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80029f0:	2060      	movs	r0, #96	@ 0x60
 80029f2:	f7ff ffbf 	bl	8002974 <ST7789_WriteSmallData>
		break;
 80029f6:	e000      	b.n	80029fa <ST7789_SetRotation+0x4e>
	default:
		break;
 80029f8:	bf00      	nop
	}
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop

08002a04 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8002a04:	b590      	push	{r4, r7, lr}
 8002a06:	b087      	sub	sp, #28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4604      	mov	r4, r0
 8002a0c:	4608      	mov	r0, r1
 8002a0e:	4611      	mov	r1, r2
 8002a10:	461a      	mov	r2, r3
 8002a12:	4623      	mov	r3, r4
 8002a14:	80fb      	strh	r3, [r7, #6]
 8002a16:	4603      	mov	r3, r0
 8002a18:	80bb      	strh	r3, [r7, #4]
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	807b      	strh	r3, [r7, #2]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8002a22:	bf00      	nop
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8002a24:	88fb      	ldrh	r3, [r7, #6]
 8002a26:	82fb      	strh	r3, [r7, #22]
 8002a28:	887b      	ldrh	r3, [r7, #2]
 8002a2a:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8002a2c:	88bb      	ldrh	r3, [r7, #4]
 8002a2e:	827b      	strh	r3, [r7, #18]
 8002a30:	883b      	ldrh	r3, [r7, #0]
 8002a32:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8002a34:	202a      	movs	r0, #42	@ 0x2a
 8002a36:	f7ff ff3b 	bl	80028b0 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8002a3a:	8afb      	ldrh	r3, [r7, #22]
 8002a3c:	0a1b      	lsrs	r3, r3, #8
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	733b      	strb	r3, [r7, #12]
 8002a44:	8afb      	ldrh	r3, [r7, #22]
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	737b      	strb	r3, [r7, #13]
 8002a4a:	8abb      	ldrh	r3, [r7, #20]
 8002a4c:	0a1b      	lsrs	r3, r3, #8
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	73bb      	strb	r3, [r7, #14]
 8002a54:	8abb      	ldrh	r3, [r7, #20]
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8002a5a:	f107 030c 	add.w	r3, r7, #12
 8002a5e:	2104      	movs	r1, #4
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff ff41 	bl	80028e8 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8002a66:	202b      	movs	r0, #43	@ 0x2b
 8002a68:	f7ff ff22 	bl	80028b0 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8002a6c:	8a7b      	ldrh	r3, [r7, #18]
 8002a6e:	0a1b      	lsrs	r3, r3, #8
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	723b      	strb	r3, [r7, #8]
 8002a76:	8a7b      	ldrh	r3, [r7, #18]
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	727b      	strb	r3, [r7, #9]
 8002a7c:	8a3b      	ldrh	r3, [r7, #16]
 8002a7e:	0a1b      	lsrs	r3, r3, #8
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	72bb      	strb	r3, [r7, #10]
 8002a86:	8a3b      	ldrh	r3, [r7, #16]
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8002a8c:	f107 0308 	add.w	r3, r7, #8
 8002a90:	2104      	movs	r1, #4
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff ff28 	bl	80028e8 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8002a98:	202c      	movs	r0, #44	@ 0x2c
 8002a9a:	f7ff ff09 	bl	80028b0 <ST7789_WriteCommand>
	ST7789_UnSelect();
 8002a9e:	bf00      	nop
}
 8002aa0:	bf00      	nop
 8002aa2:	371c      	adds	r7, #28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd90      	pop	{r4, r7, pc}

08002aa8 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8002aa8:	b590      	push	{r4, r7, lr}
 8002aaa:	b08b      	sub	sp, #44	@ 0x2c
 8002aac:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
 8002aae:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	484a      	ldr	r0, [pc, #296]	@ (8002be0 <ST7789_Init+0x138>)
 8002ab6:	f010 f857 	bl	8012b68 <memset>
	#endif
	HAL_Delay(10);
 8002aba:	200a      	movs	r0, #10
 8002abc:	f001 fc6e 	bl	800439c <HAL_Delay>
    ST7789_RST_Clr();
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2104      	movs	r1, #4
 8002ac4:	4847      	ldr	r0, [pc, #284]	@ (8002be4 <ST7789_Init+0x13c>)
 8002ac6:	f004 fa77 	bl	8006fb8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8002aca:	200a      	movs	r0, #10
 8002acc:	f001 fc66 	bl	800439c <HAL_Delay>
    ST7789_RST_Set();
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	2104      	movs	r1, #4
 8002ad4:	4843      	ldr	r0, [pc, #268]	@ (8002be4 <ST7789_Init+0x13c>)
 8002ad6:	f004 fa6f 	bl	8006fb8 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8002ada:	2014      	movs	r0, #20
 8002adc:	f001 fc5e 	bl	800439c <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8002ae0:	203a      	movs	r0, #58	@ 0x3a
 8002ae2:	f7ff fee5 	bl	80028b0 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8002ae6:	2055      	movs	r0, #85	@ 0x55
 8002ae8:	f7ff ff44 	bl	8002974 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8002aec:	20b2      	movs	r0, #178	@ 0xb2
 8002aee:	f7ff fedf 	bl	80028b0 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8002af2:	4a3d      	ldr	r2, [pc, #244]	@ (8002be8 <ST7789_Init+0x140>)
 8002af4:	f107 0320 	add.w	r3, r7, #32
 8002af8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002afc:	6018      	str	r0, [r3, #0]
 8002afe:	3304      	adds	r3, #4
 8002b00:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8002b02:	f107 0320 	add.w	r3, r7, #32
 8002b06:	2105      	movs	r1, #5
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff feed 	bl	80028e8 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8002b0e:	2003      	movs	r0, #3
 8002b10:	f7ff ff4c 	bl	80029ac <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8002b14:	20b7      	movs	r0, #183	@ 0xb7
 8002b16:	f7ff fecb 	bl	80028b0 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8002b1a:	2035      	movs	r0, #53	@ 0x35
 8002b1c:	f7ff ff2a 	bl	8002974 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8002b20:	20bb      	movs	r0, #187	@ 0xbb
 8002b22:	f7ff fec5 	bl	80028b0 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8002b26:	2019      	movs	r0, #25
 8002b28:	f7ff ff24 	bl	8002974 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8002b2c:	20c0      	movs	r0, #192	@ 0xc0
 8002b2e:	f7ff febf 	bl	80028b0 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 8002b32:	202c      	movs	r0, #44	@ 0x2c
 8002b34:	f7ff ff1e 	bl	8002974 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8002b38:	20c2      	movs	r0, #194	@ 0xc2
 8002b3a:	f7ff feb9 	bl	80028b0 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8002b3e:	2001      	movs	r0, #1
 8002b40:	f7ff ff18 	bl	8002974 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8002b44:	20c3      	movs	r0, #195	@ 0xc3
 8002b46:	f7ff feb3 	bl	80028b0 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8002b4a:	2012      	movs	r0, #18
 8002b4c:	f7ff ff12 	bl	8002974 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8002b50:	20c4      	movs	r0, #196	@ 0xc4
 8002b52:	f7ff fead 	bl	80028b0 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8002b56:	2020      	movs	r0, #32
 8002b58:	f7ff ff0c 	bl	8002974 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8002b5c:	20c6      	movs	r0, #198	@ 0xc6
 8002b5e:	f7ff fea7 	bl	80028b0 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8002b62:	200f      	movs	r0, #15
 8002b64:	f7ff ff06 	bl	8002974 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8002b68:	20d0      	movs	r0, #208	@ 0xd0
 8002b6a:	f7ff fea1 	bl	80028b0 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8002b6e:	20a4      	movs	r0, #164	@ 0xa4
 8002b70:	f7ff ff00 	bl	8002974 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8002b74:	20a1      	movs	r0, #161	@ 0xa1
 8002b76:	f7ff fefd 	bl	8002974 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8002b7a:	20e0      	movs	r0, #224	@ 0xe0
 8002b7c:	f7ff fe98 	bl	80028b0 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8002b80:	4b1a      	ldr	r3, [pc, #104]	@ (8002bec <ST7789_Init+0x144>)
 8002b82:	f107 0410 	add.w	r4, r7, #16
 8002b86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b88:	c407      	stmia	r4!, {r0, r1, r2}
 8002b8a:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8002b8c:	f107 0310 	add.w	r3, r7, #16
 8002b90:	210e      	movs	r1, #14
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff fea8 	bl	80028e8 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8002b98:	20e1      	movs	r0, #225	@ 0xe1
 8002b9a:	f7ff fe89 	bl	80028b0 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8002b9e:	4b14      	ldr	r3, [pc, #80]	@ (8002bf0 <ST7789_Init+0x148>)
 8002ba0:	463c      	mov	r4, r7
 8002ba2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ba4:	c407      	stmia	r4!, {r0, r1, r2}
 8002ba6:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8002ba8:	463b      	mov	r3, r7
 8002baa:	210e      	movs	r1, #14
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fe9b 	bl	80028e8 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8002bb2:	2021      	movs	r0, #33	@ 0x21
 8002bb4:	f7ff fe7c 	bl	80028b0 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8002bb8:	2011      	movs	r0, #17
 8002bba:	f7ff fe79 	bl	80028b0 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8002bbe:	2013      	movs	r0, #19
 8002bc0:	f7ff fe76 	bl	80028b0 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8002bc4:	2029      	movs	r0, #41	@ 0x29
 8002bc6:	f7ff fe73 	bl	80028b0 <ST7789_WriteCommand>

	HAL_Delay(50);
 8002bca:	2032      	movs	r0, #50	@ 0x32
 8002bcc:	f001 fbe6 	bl	800439c <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	f000 f80f 	bl	8002bf4 <ST7789_Fill_Color>
}
 8002bd6:	bf00      	nop
 8002bd8:	372c      	adds	r7, #44	@ 0x2c
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd90      	pop	{r4, r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20001c90 	.word	0x20001c90
 8002be4:	48000c00 	.word	0x48000c00
 8002be8:	08016238 	.word	0x08016238
 8002bec:	08016240 	.word	0x08016240
 8002bf0:	08016250 	.word	0x08016250

08002bf4 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8002bfe:	23ef      	movs	r3, #239	@ 0xef
 8002c00:	f240 123f 	movw	r2, #319	@ 0x13f
 8002c04:	2100      	movs	r1, #0
 8002c06:	2000      	movs	r0, #0
 8002c08:	f7ff fefc 	bl	8002a04 <ST7789_SetAddressWindow>
	ST7789_Select();
 8002c0c:	bf00      	nop

	#ifdef USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8002c0e:	2300      	movs	r3, #0
 8002c10:	81fb      	strh	r3, [r7, #14]
 8002c12:	e00e      	b.n	8002c32 <ST7789_Fill_Color+0x3e>
		{
			memset(disp_buf, color, sizeof(disp_buf));
 8002c14:	88fb      	ldrh	r3, [r7, #6]
 8002c16:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4809      	ldr	r0, [pc, #36]	@ (8002c44 <ST7789_Fill_Color+0x50>)
 8002c1e:	f00f ffa3 	bl	8012b68 <memset>
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
 8002c22:	f44f 6148 	mov.w	r1, #3200	@ 0xc80
 8002c26:	4807      	ldr	r0, [pc, #28]	@ (8002c44 <ST7789_Fill_Color+0x50>)
 8002c28:	f7ff fe5e 	bl	80028e8 <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8002c2c:	89fb      	ldrh	r3, [r7, #14]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	81fb      	strh	r3, [r7, #14]
 8002c32:	89fb      	ldrh	r3, [r7, #14]
 8002c34:	2b2f      	cmp	r3, #47	@ 0x2f
 8002c36:	d9ed      	bls.n	8002c14 <ST7789_Fill_Color+0x20>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 8002c38:	bf00      	nop
}
 8002c3a:	bf00      	nop
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	20001c90 	.word	0x20001c90

08002c48 <ST7789_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	80fb      	strh	r3, [r7, #6]
 8002c52:	460b      	mov	r3, r1
 8002c54:	80bb      	strh	r3, [r7, #4]
 8002c56:	4613      	mov	r3, r2
 8002c58:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 8002c5a:	88fb      	ldrh	r3, [r7, #6]
 8002c5c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002c60:	d219      	bcs.n	8002c96 <ST7789_DrawPixel+0x4e>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8002c62:	88bb      	ldrh	r3, [r7, #4]
 8002c64:	2bef      	cmp	r3, #239	@ 0xef
 8002c66:	d816      	bhi.n	8002c96 <ST7789_DrawPixel+0x4e>
	
	ST7789_SetAddressWindow(x, y, x, y);
 8002c68:	88bb      	ldrh	r3, [r7, #4]
 8002c6a:	88fa      	ldrh	r2, [r7, #6]
 8002c6c:	88b9      	ldrh	r1, [r7, #4]
 8002c6e:	88f8      	ldrh	r0, [r7, #6]
 8002c70:	f7ff fec8 	bl	8002a04 <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 8002c74:	887b      	ldrh	r3, [r7, #2]
 8002c76:	0a1b      	lsrs	r3, r3, #8
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	733b      	strb	r3, [r7, #12]
 8002c7e:	887b      	ldrh	r3, [r7, #2]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	737b      	strb	r3, [r7, #13]
	ST7789_Select();
 8002c84:	bf00      	nop
	ST7789_WriteData(data, sizeof(data));
 8002c86:	f107 030c 	add.w	r3, r7, #12
 8002c8a:	2102      	movs	r1, #2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff fe2b 	bl	80028e8 <ST7789_WriteData>
	ST7789_UnSelect();
 8002c92:	bf00      	nop
 8002c94:	e000      	b.n	8002c98 <ST7789_DrawPixel+0x50>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8002c96:	bf00      	nop
}
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <ST7789_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void ST7789_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t *data)
{
 8002c9e:	b590      	push	{r4, r7, lr}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	4604      	mov	r4, r0
 8002ca6:	4608      	mov	r0, r1
 8002ca8:	4611      	mov	r1, r2
 8002caa:	461a      	mov	r2, r3
 8002cac:	4623      	mov	r3, r4
 8002cae:	80fb      	strh	r3, [r7, #6]
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	80bb      	strh	r3, [r7, #4]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	807b      	strh	r3, [r7, #2]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	803b      	strh	r3, [r7, #0]
	if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT))
 8002cbc:	88fb      	ldrh	r3, [r7, #6]
 8002cbe:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002cc2:	d22a      	bcs.n	8002d1a <ST7789_DrawImage+0x7c>
 8002cc4:	88bb      	ldrh	r3, [r7, #4]
 8002cc6:	2bef      	cmp	r3, #239	@ 0xef
 8002cc8:	d827      	bhi.n	8002d1a <ST7789_DrawImage+0x7c>
		return;
	if ((x + w - 1) >= ST7789_WIDTH)
 8002cca:	88fa      	ldrh	r2, [r7, #6]
 8002ccc:	887b      	ldrh	r3, [r7, #2]
 8002cce:	4413      	add	r3, r2
 8002cd0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002cd4:	dc23      	bgt.n	8002d1e <ST7789_DrawImage+0x80>
		return;
	if ((y + h - 1) >= ST7789_HEIGHT)
 8002cd6:	88ba      	ldrh	r2, [r7, #4]
 8002cd8:	883b      	ldrh	r3, [r7, #0]
 8002cda:	4413      	add	r3, r2
 8002cdc:	2bf0      	cmp	r3, #240	@ 0xf0
 8002cde:	dc20      	bgt.n	8002d22 <ST7789_DrawImage+0x84>
		return;

	ST7789_Select();
 8002ce0:	bf00      	nop
	ST7789_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8002ce2:	88fa      	ldrh	r2, [r7, #6]
 8002ce4:	887b      	ldrh	r3, [r7, #2]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b29c      	uxth	r4, r3
 8002cee:	88ba      	ldrh	r2, [r7, #4]
 8002cf0:	883b      	ldrh	r3, [r7, #0]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	88b9      	ldrh	r1, [r7, #4]
 8002cfc:	88f8      	ldrh	r0, [r7, #6]
 8002cfe:	4622      	mov	r2, r4
 8002d00:	f7ff fe80 	bl	8002a04 <ST7789_SetAddressWindow>
	ST7789_WriteData((uint8_t *)data, sizeof(uint16_t) * w * h);
 8002d04:	887b      	ldrh	r3, [r7, #2]
 8002d06:	883a      	ldrh	r2, [r7, #0]
 8002d08:	fb02 f303 	mul.w	r3, r2, r3
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	4619      	mov	r1, r3
 8002d10:	69b8      	ldr	r0, [r7, #24]
 8002d12:	f7ff fde9 	bl	80028e8 <ST7789_WriteData>
	ST7789_UnSelect();
 8002d16:	bf00      	nop
 8002d18:	e004      	b.n	8002d24 <ST7789_DrawImage+0x86>
		return;
 8002d1a:	bf00      	nop
 8002d1c:	e002      	b.n	8002d24 <ST7789_DrawImage+0x86>
		return;
 8002d1e:	bf00      	nop
 8002d20:	e000      	b.n	8002d24 <ST7789_DrawImage+0x86>
		return;
 8002d22:	bf00      	nop
}
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd90      	pop	{r4, r7, pc}

08002d2a <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d34:	4603      	mov	r3, r0
 8002d36:	80fb      	strh	r3, [r7, #6]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	80bb      	strh	r3, [r7, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8002d40:	bf00      	nop
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8002d42:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002d46:	461a      	mov	r2, r3
 8002d48:	88fb      	ldrh	r3, [r7, #6]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002d56:	4619      	mov	r1, r3
 8002d58:	88bb      	ldrh	r3, [r7, #4]
 8002d5a:	440b      	add	r3, r1
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	88b9      	ldrh	r1, [r7, #4]
 8002d64:	88f8      	ldrh	r0, [r7, #6]
 8002d66:	f7ff fe4d 	bl	8002a04 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61fb      	str	r3, [r7, #28]
 8002d6e:	e041      	b.n	8002df4 <ST7789_WriteChar+0xca>
		b = font.data[(ch - 32) * font.height + i];
 8002d70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d72:	78fb      	ldrb	r3, [r7, #3]
 8002d74:	3b20      	subs	r3, #32
 8002d76:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8002d7a:	fb01 f303 	mul.w	r3, r1, r3
 8002d7e:	4619      	mov	r1, r3
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	440b      	add	r3, r1
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	4413      	add	r3, r2
 8002d88:	881b      	ldrh	r3, [r3, #0]
 8002d8a:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	61bb      	str	r3, [r7, #24]
 8002d90:	e027      	b.n	8002de2 <ST7789_WriteChar+0xb8>
			if ((b << j) & 0x8000) {
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00e      	beq.n	8002dc0 <ST7789_WriteChar+0x96>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8002da2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002da4:	0a1b      	lsrs	r3, r3, #8
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	743b      	strb	r3, [r7, #16]
 8002dac:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8002db2:	f107 0310 	add.w	r3, r7, #16
 8002db6:	2102      	movs	r1, #2
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff fd95 	bl	80028e8 <ST7789_WriteData>
 8002dbe:	e00d      	b.n	8002ddc <ST7789_WriteChar+0xb2>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8002dc0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002dc2:	0a1b      	lsrs	r3, r3, #8
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	733b      	strb	r3, [r7, #12]
 8002dca:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 8002dd0:	f107 030c 	add.w	r3, r7, #12
 8002dd4:	2102      	movs	r1, #2
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff fd86 	bl	80028e8 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	3301      	adds	r3, #1
 8002de0:	61bb      	str	r3, [r7, #24]
 8002de2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002de6:	461a      	mov	r2, r3
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d3d1      	bcc.n	8002d92 <ST7789_WriteChar+0x68>
	for (i = 0; i < font.height; i++) {
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	3301      	adds	r3, #1
 8002df2:	61fb      	str	r3, [r7, #28]
 8002df4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002df8:	461a      	mov	r2, r3
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d3b7      	bcc.n	8002d70 <ST7789_WriteChar+0x46>
			}
		}
	}
	ST7789_UnSelect();
 8002e00:	bf00      	nop
}
 8002e02:	bf00      	nop
 8002e04:	3720      	adds	r7, #32
 8002e06:	46bd      	mov	sp, r7
 8002e08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e0c:	b002      	add	sp, #8
 8002e0e:	4770      	bx	lr

08002e10 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8002e10:	b082      	sub	sp, #8
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b086      	sub	sp, #24
 8002e16:	af04      	add	r7, sp, #16
 8002e18:	603a      	str	r2, [r7, #0]
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	80fb      	strh	r3, [r7, #6]
 8002e20:	460b      	mov	r3, r1
 8002e22:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8002e24:	bf00      	nop
	while (*str) {
 8002e26:	e02e      	b.n	8002e86 <ST7789_WriteString+0x76>
		if (x + font.width >= ST7789_WIDTH) {
 8002e28:	88fb      	ldrh	r3, [r7, #6]
 8002e2a:	7d3a      	ldrb	r2, [r7, #20]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002e32:	db13      	blt.n	8002e5c <ST7789_WriteString+0x4c>
			x = 0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8002e38:	7d7b      	ldrb	r3, [r7, #21]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	88bb      	ldrh	r3, [r7, #4]
 8002e3e:	4413      	add	r3, r2
 8002e40:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8002e42:	88bb      	ldrh	r3, [r7, #4]
 8002e44:	7d7a      	ldrb	r2, [r7, #21]
 8002e46:	4413      	add	r3, r2
 8002e48:	2bef      	cmp	r3, #239	@ 0xef
 8002e4a:	dc21      	bgt.n	8002e90 <ST7789_WriteString+0x80>
				break;
			}

			if (*str == ' ') {
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b20      	cmp	r3, #32
 8002e52:	d103      	bne.n	8002e5c <ST7789_WriteString+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	3301      	adds	r3, #1
 8002e58:	603b      	str	r3, [r7, #0]
				continue;
 8002e5a:	e014      	b.n	8002e86 <ST7789_WriteString+0x76>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	781a      	ldrb	r2, [r3, #0]
 8002e60:	88b9      	ldrh	r1, [r7, #4]
 8002e62:	88f8      	ldrh	r0, [r7, #6]
 8002e64:	8c3b      	ldrh	r3, [r7, #32]
 8002e66:	9302      	str	r3, [sp, #8]
 8002e68:	8bbb      	ldrh	r3, [r7, #28]
 8002e6a:	9301      	str	r3, [sp, #4]
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	f7ff ff5a 	bl	8002d2a <ST7789_WriteChar>
		x += font.width;
 8002e76:	7d3b      	ldrb	r3, [r7, #20]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	88fb      	ldrh	r3, [r7, #6]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	80fb      	strh	r3, [r7, #6]
		str++;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	3301      	adds	r3, #1
 8002e84:	603b      	str	r3, [r7, #0]
	while (*str) {
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1cc      	bne.n	8002e28 <ST7789_WriteString+0x18>
 8002e8e:	e000      	b.n	8002e92 <ST7789_WriteString+0x82>
				break;
 8002e90:	bf00      	nop
	}
	ST7789_UnSelect();
 8002e92:	bf00      	nop
}
 8002e94:	bf00      	nop
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e9e:	b002      	add	sp, #8
 8002ea0:	4770      	bx	lr
	...

08002ea4 <View_DoubaoWelcome>:
		ST7789_DrawCircle(90, 210, 10, WHITE);
		ST7789_DrawRectangle(140, 200, 160, 220, WHITE);
	}


void View_DoubaoWelcome(void){
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af04      	add	r7, sp, #16
		ST7789_DrawImage(10, 10, 160, 160, (uint16_t *)doubao);
 8002eaa:	4b13      	ldr	r3, [pc, #76]	@ (8002ef8 <View_DoubaoWelcome+0x54>)
 8002eac:	9300      	str	r3, [sp, #0]
 8002eae:	23a0      	movs	r3, #160	@ 0xa0
 8002eb0:	22a0      	movs	r2, #160	@ 0xa0
 8002eb2:	210a      	movs	r1, #10
 8002eb4:	200a      	movs	r0, #10
 8002eb6:	f7ff fef2 	bl	8002c9e <ST7789_DrawImage>
		ST7789_WriteString(200, 130, " !\"#$\%", Han_Array, WHITE, BLACK);
 8002eba:	4b10      	ldr	r3, [pc, #64]	@ (8002efc <View_DoubaoWelcome+0x58>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	9202      	str	r2, [sp, #8]
 8002ec0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ec4:	9201      	str	r2, [sp, #4]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	9200      	str	r2, [sp, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a0c      	ldr	r2, [pc, #48]	@ (8002f00 <View_DoubaoWelcome+0x5c>)
 8002ece:	2182      	movs	r1, #130	@ 0x82
 8002ed0:	20c8      	movs	r0, #200	@ 0xc8
 8002ed2:	f7ff ff9d 	bl	8002e10 <ST7789_WriteString>
		ST7789_WriteString(170, 180, "&\'\(\)\*+,-.", Han_Array, WHITE, BLACK);
 8002ed6:	4b09      	ldr	r3, [pc, #36]	@ (8002efc <View_DoubaoWelcome+0x58>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	9202      	str	r2, [sp, #8]
 8002edc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ee0:	9201      	str	r2, [sp, #4]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	9200      	str	r2, [sp, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a06      	ldr	r2, [pc, #24]	@ (8002f04 <View_DoubaoWelcome+0x60>)
 8002eea:	21b4      	movs	r1, #180	@ 0xb4
 8002eec:	20aa      	movs	r0, #170	@ 0xaa
 8002eee:	f7ff ff8f 	bl	8002e10 <ST7789_WriteString>
	}
 8002ef2:	bf00      	nop
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	080170e8 	.word	0x080170e8
 8002efc:	20000008 	.word	0x20000008
 8002f00:	080162d0 	.word	0x080162d0
 8002f04:	080162d8 	.word	0x080162d8

08002f08 <View_Sensor>:

void View_Sensor(void){
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af04      	add	r7, sp, #16
	sprintf(BUFFER_Display,"ENC1:%5d",htim4.Instance->CNT);
 8002f0e:	4b78      	ldr	r3, [pc, #480]	@ (80030f0 <View_Sensor+0x1e8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f14:	461a      	mov	r2, r3
 8002f16:	4977      	ldr	r1, [pc, #476]	@ (80030f4 <View_Sensor+0x1ec>)
 8002f18:	4877      	ldr	r0, [pc, #476]	@ (80030f8 <View_Sensor+0x1f0>)
 8002f1a:	f00f fd2d 	bl	8012978 <siprintf>
	ST7789_WriteString(200, 10, BUFFER_Display, Font_11x18, WHITE, BLACK);
 8002f1e:	4b77      	ldr	r3, [pc, #476]	@ (80030fc <View_Sensor+0x1f4>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	9202      	str	r2, [sp, #8]
 8002f24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f28:	9201      	str	r2, [sp, #4]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	9200      	str	r2, [sp, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a71      	ldr	r2, [pc, #452]	@ (80030f8 <View_Sensor+0x1f0>)
 8002f32:	210a      	movs	r1, #10
 8002f34:	20c8      	movs	r0, #200	@ 0xc8
 8002f36:	f7ff ff6b 	bl	8002e10 <ST7789_WriteString>
	sprintf(BUFFER_Display,"ENC2:%5d",htim3.Instance->CNT);
 8002f3a:	4b71      	ldr	r3, [pc, #452]	@ (8003100 <View_Sensor+0x1f8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f40:	461a      	mov	r2, r3
 8002f42:	4970      	ldr	r1, [pc, #448]	@ (8003104 <View_Sensor+0x1fc>)
 8002f44:	486c      	ldr	r0, [pc, #432]	@ (80030f8 <View_Sensor+0x1f0>)
 8002f46:	f00f fd17 	bl	8012978 <siprintf>
	ST7789_WriteString(200, 40, BUFFER_Display, Font_11x18, WHITE, BLACK);
 8002f4a:	4b6c      	ldr	r3, [pc, #432]	@ (80030fc <View_Sensor+0x1f4>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	9202      	str	r2, [sp, #8]
 8002f50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f54:	9201      	str	r2, [sp, #4]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	9200      	str	r2, [sp, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a66      	ldr	r2, [pc, #408]	@ (80030f8 <View_Sensor+0x1f0>)
 8002f5e:	2128      	movs	r1, #40	@ 0x28
 8002f60:	20c8      	movs	r0, #200	@ 0xc8
 8002f62:	f7ff ff55 	bl	8002e10 <ST7789_WriteString>
	sprintf(BUFFER_Display,"ENC3:%5d",htim20.Instance->CNT);
 8002f66:	4b68      	ldr	r3, [pc, #416]	@ (8003108 <View_Sensor+0x200>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4967      	ldr	r1, [pc, #412]	@ (800310c <View_Sensor+0x204>)
 8002f70:	4861      	ldr	r0, [pc, #388]	@ (80030f8 <View_Sensor+0x1f0>)
 8002f72:	f00f fd01 	bl	8012978 <siprintf>
	ST7789_WriteString(200, 70, BUFFER_Display, Font_11x18, WHITE, BLACK);
 8002f76:	4b61      	ldr	r3, [pc, #388]	@ (80030fc <View_Sensor+0x1f4>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	9202      	str	r2, [sp, #8]
 8002f7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f80:	9201      	str	r2, [sp, #4]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	9200      	str	r2, [sp, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a5b      	ldr	r2, [pc, #364]	@ (80030f8 <View_Sensor+0x1f0>)
 8002f8a:	2146      	movs	r1, #70	@ 0x46
 8002f8c:	20c8      	movs	r0, #200	@ 0xc8
 8002f8e:	f7ff ff3f 	bl	8002e10 <ST7789_WriteString>
	sprintf(BUFFER_Display,"ENC4:%5d",htim1.Instance->CNT);
 8002f92:	4b5f      	ldr	r3, [pc, #380]	@ (8003110 <View_Sensor+0x208>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f98:	461a      	mov	r2, r3
 8002f9a:	495e      	ldr	r1, [pc, #376]	@ (8003114 <View_Sensor+0x20c>)
 8002f9c:	4856      	ldr	r0, [pc, #344]	@ (80030f8 <View_Sensor+0x1f0>)
 8002f9e:	f00f fceb 	bl	8012978 <siprintf>
	ST7789_WriteString(200, 100, BUFFER_Display, Font_11x18, WHITE, BLACK);
 8002fa2:	4b56      	ldr	r3, [pc, #344]	@ (80030fc <View_Sensor+0x1f4>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	9202      	str	r2, [sp, #8]
 8002fa8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002fac:	9201      	str	r2, [sp, #4]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	9200      	str	r2, [sp, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a50      	ldr	r2, [pc, #320]	@ (80030f8 <View_Sensor+0x1f0>)
 8002fb6:	2164      	movs	r1, #100	@ 0x64
 8002fb8:	20c8      	movs	r0, #200	@ 0xc8
 8002fba:	f7ff ff29 	bl	8002e10 <ST7789_WriteString>

	sprintf(BUFFER_Display,"KEYs:%5d",BUFFER_SYS_ADC[0]);
 8002fbe:	4b56      	ldr	r3, [pc, #344]	@ (8003118 <View_Sensor+0x210>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	4955      	ldr	r1, [pc, #340]	@ (800311c <View_Sensor+0x214>)
 8002fc6:	484c      	ldr	r0, [pc, #304]	@ (80030f8 <View_Sensor+0x1f0>)
 8002fc8:	f00f fcd6 	bl	8012978 <siprintf>
	ST7789_WriteString(200, 130, BUFFER_Display, Font_11x18, WHITE, BLACK);
 8002fcc:	4b4b      	ldr	r3, [pc, #300]	@ (80030fc <View_Sensor+0x1f4>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	9202      	str	r2, [sp, #8]
 8002fd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002fd6:	9201      	str	r2, [sp, #4]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	9200      	str	r2, [sp, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a46      	ldr	r2, [pc, #280]	@ (80030f8 <View_Sensor+0x1f0>)
 8002fe0:	2182      	movs	r1, #130	@ 0x82
 8002fe2:	20c8      	movs	r0, #200	@ 0xc8
 8002fe4:	f7ff ff14 	bl	8002e10 <ST7789_WriteString>

	float temperate=(((float)BUFFER_SYS_ADC[1]*(3.3/4096)-0.76)/0.0025 + 30); //转换为温度值;
 8002fe8:	4b4b      	ldr	r3, [pc, #300]	@ (8003118 <View_Sensor+0x210>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	ee07 3a90 	vmov	s15, r3
 8002ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ff4:	ee17 0a90 	vmov	r0, s15
 8002ff8:	f7fd face 	bl	8000598 <__aeabi_f2d>
 8002ffc:	a336      	add	r3, pc, #216	@ (adr r3, 80030d8 <View_Sensor+0x1d0>)
 8002ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003002:	f7fd fb21 	bl	8000648 <__aeabi_dmul>
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	4610      	mov	r0, r2
 800300c:	4619      	mov	r1, r3
 800300e:	a334      	add	r3, pc, #208	@ (adr r3, 80030e0 <View_Sensor+0x1d8>)
 8003010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003014:	f7fd f960 	bl	80002d8 <__aeabi_dsub>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	4610      	mov	r0, r2
 800301e:	4619      	mov	r1, r3
 8003020:	a331      	add	r3, pc, #196	@ (adr r3, 80030e8 <View_Sensor+0x1e0>)
 8003022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003026:	f7fd fc39 	bl	800089c <__aeabi_ddiv>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4610      	mov	r0, r2
 8003030:	4619      	mov	r1, r3
 8003032:	f04f 0200 	mov.w	r2, #0
 8003036:	4b3a      	ldr	r3, [pc, #232]	@ (8003120 <View_Sensor+0x218>)
 8003038:	f7fd f950 	bl	80002dc <__adddf3>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	4610      	mov	r0, r2
 8003042:	4619      	mov	r1, r3
 8003044:	f7fd fdf8 	bl	8000c38 <__aeabi_d2f>
 8003048:	4603      	mov	r3, r0
 800304a:	607b      	str	r3, [r7, #4]
	sprintf(BUFFER_Display,"TEMP:%4.1f",temperate);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7fd faa3 	bl	8000598 <__aeabi_f2d>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	4933      	ldr	r1, [pc, #204]	@ (8003124 <View_Sensor+0x21c>)
 8003058:	4827      	ldr	r0, [pc, #156]	@ (80030f8 <View_Sensor+0x1f0>)
 800305a:	f00f fc8d 	bl	8012978 <siprintf>
	ST7789_WriteString(200, 160, BUFFER_Display, Font_11x18, WHITE, BLACK);
 800305e:	4b27      	ldr	r3, [pc, #156]	@ (80030fc <View_Sensor+0x1f4>)
 8003060:	2200      	movs	r2, #0
 8003062:	9202      	str	r2, [sp, #8]
 8003064:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003068:	9201      	str	r2, [sp, #4]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	9200      	str	r2, [sp, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a21      	ldr	r2, [pc, #132]	@ (80030f8 <View_Sensor+0x1f0>)
 8003072:	21a0      	movs	r1, #160	@ 0xa0
 8003074:	20c8      	movs	r0, #200	@ 0xc8
 8003076:	f7ff fecb 	bl	8002e10 <ST7789_WriteString>

	sprintf(BUFFER_Display,"Vbat:%5d",BUFFER_SYS_ADC[2]);
 800307a:	4b27      	ldr	r3, [pc, #156]	@ (8003118 <View_Sensor+0x210>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	461a      	mov	r2, r3
 8003080:	4929      	ldr	r1, [pc, #164]	@ (8003128 <View_Sensor+0x220>)
 8003082:	481d      	ldr	r0, [pc, #116]	@ (80030f8 <View_Sensor+0x1f0>)
 8003084:	f00f fc78 	bl	8012978 <siprintf>
	ST7789_WriteString(200, 190, BUFFER_Display, Font_11x18, WHITE, BLACK);
 8003088:	4b1c      	ldr	r3, [pc, #112]	@ (80030fc <View_Sensor+0x1f4>)
 800308a:	2200      	movs	r2, #0
 800308c:	9202      	str	r2, [sp, #8]
 800308e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003092:	9201      	str	r2, [sp, #4]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	9200      	str	r2, [sp, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a17      	ldr	r2, [pc, #92]	@ (80030f8 <View_Sensor+0x1f0>)
 800309c:	21be      	movs	r1, #190	@ 0xbe
 800309e:	20c8      	movs	r0, #200	@ 0xc8
 80030a0:	f7ff feb6 	bl	8002e10 <ST7789_WriteString>

	sprintf(BUFFER_Display,"Vref:%5d",BUFFER_SYS_ADC[3]);
 80030a4:	4b1c      	ldr	r3, [pc, #112]	@ (8003118 <View_Sensor+0x210>)
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	461a      	mov	r2, r3
 80030aa:	4920      	ldr	r1, [pc, #128]	@ (800312c <View_Sensor+0x224>)
 80030ac:	4812      	ldr	r0, [pc, #72]	@ (80030f8 <View_Sensor+0x1f0>)
 80030ae:	f00f fc63 	bl	8012978 <siprintf>
	ST7789_WriteString(200, 220, BUFFER_Display, Font_11x18, WHITE, BLACK);
 80030b2:	4b12      	ldr	r3, [pc, #72]	@ (80030fc <View_Sensor+0x1f4>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	9202      	str	r2, [sp, #8]
 80030b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030bc:	9201      	str	r2, [sp, #4]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	9200      	str	r2, [sp, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a0c      	ldr	r2, [pc, #48]	@ (80030f8 <View_Sensor+0x1f0>)
 80030c6:	21dc      	movs	r1, #220	@ 0xdc
 80030c8:	20c8      	movs	r0, #200	@ 0xc8
 80030ca:	f7ff fea1 	bl	8002e10 <ST7789_WriteString>

	}
 80030ce:	bf00      	nop
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	66666666 	.word	0x66666666
 80030dc:	3f4a6666 	.word	0x3f4a6666
 80030e0:	851eb852 	.word	0x851eb852
 80030e4:	3fe851eb 	.word	0x3fe851eb
 80030e8:	47ae147b 	.word	0x47ae147b
 80030ec:	3f647ae1 	.word	0x3f647ae1
 80030f0:	200009f4 	.word	0x200009f4
 80030f4:	080162e4 	.word	0x080162e4
 80030f8:	20002910 	.word	0x20002910
 80030fc:	20000000 	.word	0x20000000
 8003100:	200009a8 	.word	0x200009a8
 8003104:	080162f0 	.word	0x080162f0
 8003108:	20000b70 	.word	0x20000b70
 800310c:	080162fc 	.word	0x080162fc
 8003110:	2000095c 	.word	0x2000095c
 8003114:	08016308 	.word	0x08016308
 8003118:	20000c7c 	.word	0x20000c7c
 800311c:	08016314 	.word	0x08016314
 8003120:	403e0000 	.word	0x403e0000
 8003124:	08016320 	.word	0x08016320
 8003128:	0801632c 	.word	0x0801632c
 800312c:	08016338 	.word	0x08016338

08003130 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003136:	4b11      	ldr	r3, [pc, #68]	@ (800317c <HAL_MspInit+0x4c>)
 8003138:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800313a:	4a10      	ldr	r2, [pc, #64]	@ (800317c <HAL_MspInit+0x4c>)
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	6613      	str	r3, [r2, #96]	@ 0x60
 8003142:	4b0e      	ldr	r3, [pc, #56]	@ (800317c <HAL_MspInit+0x4c>)
 8003144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	607b      	str	r3, [r7, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800314e:	4b0b      	ldr	r3, [pc, #44]	@ (800317c <HAL_MspInit+0x4c>)
 8003150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003152:	4a0a      	ldr	r2, [pc, #40]	@ (800317c <HAL_MspInit+0x4c>)
 8003154:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003158:	6593      	str	r3, [r2, #88]	@ 0x58
 800315a:	4b08      	ldr	r3, [pc, #32]	@ (800317c <HAL_MspInit+0x4c>)
 800315c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800315e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003162:	603b      	str	r3, [r7, #0]
 8003164:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8003166:	f001 f94f 	bl	8004408 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 800316a:	2002      	movs	r0, #2
 800316c:	f001 f938 	bl	80043e0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003170:	f006 fa8e 	bl	8009690 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003174:	bf00      	nop
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40021000 	.word	0x40021000

08003180 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b0a2      	sub	sp, #136	@ 0x88
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003188:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	605a      	str	r2, [r3, #4]
 8003192:	609a      	str	r2, [r3, #8]
 8003194:	60da      	str	r2, [r3, #12]
 8003196:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003198:	f107 0320 	add.w	r3, r7, #32
 800319c:	2254      	movs	r2, #84	@ 0x54
 800319e:	2100      	movs	r1, #0
 80031a0:	4618      	mov	r0, r3
 80031a2:	f00f fce1 	bl	8012b68 <memset>
  if(hadc->Instance==ADC2)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a8d      	ldr	r2, [pc, #564]	@ (80033e0 <HAL_ADC_MspInit+0x260>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d160      	bne.n	8003272 <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80031b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031b4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80031b6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80031ba:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031bc:	f107 0320 	add.w	r3, r7, #32
 80031c0:	4618      	mov	r0, r3
 80031c2:	f006 ffcf 	bl	800a164 <HAL_RCCEx_PeriphCLKConfig>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80031cc:	f7ff fb6a 	bl	80028a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80031d0:	4b84      	ldr	r3, [pc, #528]	@ (80033e4 <HAL_ADC_MspInit+0x264>)
 80031d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031d4:	4a83      	ldr	r2, [pc, #524]	@ (80033e4 <HAL_ADC_MspInit+0x264>)
 80031d6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80031da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031dc:	4b81      	ldr	r3, [pc, #516]	@ (80033e4 <HAL_ADC_MspInit+0x264>)
 80031de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031e4:	61fb      	str	r3, [r7, #28]
 80031e6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e8:	4b7e      	ldr	r3, [pc, #504]	@ (80033e4 <HAL_ADC_MspInit+0x264>)
 80031ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ec:	4a7d      	ldr	r2, [pc, #500]	@ (80033e4 <HAL_ADC_MspInit+0x264>)
 80031ee:	f043 0301 	orr.w	r3, r3, #1
 80031f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031f4:	4b7b      	ldr	r3, [pc, #492]	@ (80033e4 <HAL_ADC_MspInit+0x264>)
 80031f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	61bb      	str	r3, [r7, #24]
 80031fe:	69bb      	ldr	r3, [r7, #24]
    /**ADC2 GPIO Configuration
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003200:	2380      	movs	r3, #128	@ 0x80
 8003202:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003204:	2303      	movs	r3, #3
 8003206:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003208:	2300      	movs	r3, #0
 800320a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800320c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003210:	4619      	mov	r1, r3
 8003212:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003216:	f003 fd4d 	bl	8006cb4 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel5;
 800321a:	4b73      	ldr	r3, [pc, #460]	@ (80033e8 <HAL_ADC_MspInit+0x268>)
 800321c:	4a73      	ldr	r2, [pc, #460]	@ (80033ec <HAL_ADC_MspInit+0x26c>)
 800321e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8003220:	4b71      	ldr	r3, [pc, #452]	@ (80033e8 <HAL_ADC_MspInit+0x268>)
 8003222:	2224      	movs	r2, #36	@ 0x24
 8003224:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003226:	4b70      	ldr	r3, [pc, #448]	@ (80033e8 <HAL_ADC_MspInit+0x268>)
 8003228:	2200      	movs	r2, #0
 800322a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800322c:	4b6e      	ldr	r3, [pc, #440]	@ (80033e8 <HAL_ADC_MspInit+0x268>)
 800322e:	2200      	movs	r2, #0
 8003230:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003232:	4b6d      	ldr	r3, [pc, #436]	@ (80033e8 <HAL_ADC_MspInit+0x268>)
 8003234:	2280      	movs	r2, #128	@ 0x80
 8003236:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003238:	4b6b      	ldr	r3, [pc, #428]	@ (80033e8 <HAL_ADC_MspInit+0x268>)
 800323a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800323e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003240:	4b69      	ldr	r3, [pc, #420]	@ (80033e8 <HAL_ADC_MspInit+0x268>)
 8003242:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003246:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8003248:	4b67      	ldr	r3, [pc, #412]	@ (80033e8 <HAL_ADC_MspInit+0x268>)
 800324a:	2200      	movs	r2, #0
 800324c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800324e:	4b66      	ldr	r3, [pc, #408]	@ (80033e8 <HAL_ADC_MspInit+0x268>)
 8003250:	2200      	movs	r2, #0
 8003252:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003254:	4864      	ldr	r0, [pc, #400]	@ (80033e8 <HAL_ADC_MspInit+0x268>)
 8003256:	f003 fabb 	bl	80067d0 <HAL_DMA_Init>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8003260:	f7ff fb20 	bl	80028a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a60      	ldr	r2, [pc, #384]	@ (80033e8 <HAL_ADC_MspInit+0x268>)
 8003268:	655a      	str	r2, [r3, #84]	@ 0x54
 800326a:	4a5f      	ldr	r2, [pc, #380]	@ (80033e8 <HAL_ADC_MspInit+0x268>)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8003270:	e0b2      	b.n	80033d8 <HAL_ADC_MspInit+0x258>
  else if(hadc->Instance==ADC3)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a5e      	ldr	r2, [pc, #376]	@ (80033f0 <HAL_ADC_MspInit+0x270>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d13e      	bne.n	80032fa <HAL_ADC_MspInit+0x17a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800327c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003280:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8003282:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003286:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003288:	f107 0320 	add.w	r3, r7, #32
 800328c:	4618      	mov	r0, r3
 800328e:	f006 ff69 	bl	800a164 <HAL_RCCEx_PeriphCLKConfig>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_ADC_MspInit+0x11c>
      Error_Handler();
 8003298:	f7ff fb04 	bl	80028a4 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800329c:	4b55      	ldr	r3, [pc, #340]	@ (80033f4 <HAL_ADC_MspInit+0x274>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	3301      	adds	r3, #1
 80032a2:	4a54      	ldr	r2, [pc, #336]	@ (80033f4 <HAL_ADC_MspInit+0x274>)
 80032a4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80032a6:	4b53      	ldr	r3, [pc, #332]	@ (80033f4 <HAL_ADC_MspInit+0x274>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d10b      	bne.n	80032c6 <HAL_ADC_MspInit+0x146>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80032ae:	4b4d      	ldr	r3, [pc, #308]	@ (80033e4 <HAL_ADC_MspInit+0x264>)
 80032b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032b2:	4a4c      	ldr	r2, [pc, #304]	@ (80033e4 <HAL_ADC_MspInit+0x264>)
 80032b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032ba:	4b4a      	ldr	r3, [pc, #296]	@ (80033e4 <HAL_ADC_MspInit+0x264>)
 80032bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032c2:	617b      	str	r3, [r7, #20]
 80032c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032c6:	4b47      	ldr	r3, [pc, #284]	@ (80033e4 <HAL_ADC_MspInit+0x264>)
 80032c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ca:	4a46      	ldr	r2, [pc, #280]	@ (80033e4 <HAL_ADC_MspInit+0x264>)
 80032cc:	f043 0302 	orr.w	r3, r3, #2
 80032d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032d2:	4b44      	ldr	r3, [pc, #272]	@ (80033e4 <HAL_ADC_MspInit+0x264>)
 80032d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80032de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80032e2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032e4:	2303      	movs	r3, #3
 80032e6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e8:	2300      	movs	r3, #0
 80032ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ec:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80032f0:	4619      	mov	r1, r3
 80032f2:	4841      	ldr	r0, [pc, #260]	@ (80033f8 <HAL_ADC_MspInit+0x278>)
 80032f4:	f003 fcde 	bl	8006cb4 <HAL_GPIO_Init>
}
 80032f8:	e06e      	b.n	80033d8 <HAL_ADC_MspInit+0x258>
  else if(hadc->Instance==ADC5)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a3f      	ldr	r2, [pc, #252]	@ (80033fc <HAL_ADC_MspInit+0x27c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d169      	bne.n	80033d8 <HAL_ADC_MspInit+0x258>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003304:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003308:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 800330a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800330e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003310:	f107 0320 	add.w	r3, r7, #32
 8003314:	4618      	mov	r0, r3
 8003316:	f006 ff25 	bl	800a164 <HAL_RCCEx_PeriphCLKConfig>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <HAL_ADC_MspInit+0x1a4>
      Error_Handler();
 8003320:	f7ff fac0 	bl	80028a4 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8003324:	4b33      	ldr	r3, [pc, #204]	@ (80033f4 <HAL_ADC_MspInit+0x274>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	3301      	adds	r3, #1
 800332a:	4a32      	ldr	r2, [pc, #200]	@ (80033f4 <HAL_ADC_MspInit+0x274>)
 800332c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800332e:	4b31      	ldr	r3, [pc, #196]	@ (80033f4 <HAL_ADC_MspInit+0x274>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d10b      	bne.n	800334e <HAL_ADC_MspInit+0x1ce>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8003336:	4b2b      	ldr	r3, [pc, #172]	@ (80033e4 <HAL_ADC_MspInit+0x264>)
 8003338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800333a:	4a2a      	ldr	r2, [pc, #168]	@ (80033e4 <HAL_ADC_MspInit+0x264>)
 800333c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003340:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003342:	4b28      	ldr	r3, [pc, #160]	@ (80033e4 <HAL_ADC_MspInit+0x264>)
 8003344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003346:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800334e:	4b25      	ldr	r3, [pc, #148]	@ (80033e4 <HAL_ADC_MspInit+0x264>)
 8003350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003352:	4a24      	ldr	r2, [pc, #144]	@ (80033e4 <HAL_ADC_MspInit+0x264>)
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800335a:	4b22      	ldr	r3, [pc, #136]	@ (80033e4 <HAL_ADC_MspInit+0x264>)
 800335c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	60bb      	str	r3, [r7, #8]
 8003364:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003366:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800336a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800336c:	2303      	movs	r3, #3
 800336e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003370:	2300      	movs	r3, #0
 8003372:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003374:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003378:	4619      	mov	r1, r3
 800337a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800337e:	f003 fc99 	bl	8006cb4 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel4;
 8003382:	4b1f      	ldr	r3, [pc, #124]	@ (8003400 <HAL_ADC_MspInit+0x280>)
 8003384:	4a1f      	ldr	r2, [pc, #124]	@ (8003404 <HAL_ADC_MspInit+0x284>)
 8003386:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8003388:	4b1d      	ldr	r3, [pc, #116]	@ (8003400 <HAL_ADC_MspInit+0x280>)
 800338a:	2227      	movs	r2, #39	@ 0x27
 800338c:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800338e:	4b1c      	ldr	r3, [pc, #112]	@ (8003400 <HAL_ADC_MspInit+0x280>)
 8003390:	2200      	movs	r2, #0
 8003392:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8003394:	4b1a      	ldr	r3, [pc, #104]	@ (8003400 <HAL_ADC_MspInit+0x280>)
 8003396:	2200      	movs	r2, #0
 8003398:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 800339a:	4b19      	ldr	r3, [pc, #100]	@ (8003400 <HAL_ADC_MspInit+0x280>)
 800339c:	2280      	movs	r2, #128	@ 0x80
 800339e:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80033a0:	4b17      	ldr	r3, [pc, #92]	@ (8003400 <HAL_ADC_MspInit+0x280>)
 80033a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033a6:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80033a8:	4b15      	ldr	r3, [pc, #84]	@ (8003400 <HAL_ADC_MspInit+0x280>)
 80033aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033ae:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 80033b0:	4b13      	ldr	r3, [pc, #76]	@ (8003400 <HAL_ADC_MspInit+0x280>)
 80033b2:	2220      	movs	r2, #32
 80033b4:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 80033b6:	4b12      	ldr	r3, [pc, #72]	@ (8003400 <HAL_ADC_MspInit+0x280>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 80033bc:	4810      	ldr	r0, [pc, #64]	@ (8003400 <HAL_ADC_MspInit+0x280>)
 80033be:	f003 fa07 	bl	80067d0 <HAL_DMA_Init>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <HAL_ADC_MspInit+0x24c>
      Error_Handler();
 80033c8:	f7ff fa6c 	bl	80028a4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a0c      	ldr	r2, [pc, #48]	@ (8003400 <HAL_ADC_MspInit+0x280>)
 80033d0:	655a      	str	r2, [r3, #84]	@ 0x54
 80033d2:	4a0b      	ldr	r2, [pc, #44]	@ (8003400 <HAL_ADC_MspInit+0x280>)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80033d8:	bf00      	nop
 80033da:	3788      	adds	r7, #136	@ 0x88
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	50000100 	.word	0x50000100
 80033e4:	40021000 	.word	0x40021000
 80033e8:	20000504 	.word	0x20000504
 80033ec:	40020058 	.word	0x40020058
 80033f0:	50000400 	.word	0x50000400
 80033f4:	20002974 	.word	0x20002974
 80033f8:	48000400 	.word	0x48000400
 80033fc:	50000600 	.word	0x50000600
 8003400:	20000564 	.word	0x20000564
 8003404:	40020044 	.word	0x40020044

08003408 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08a      	sub	sp, #40	@ 0x28
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003410:	f107 0314 	add.w	r3, r7, #20
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	605a      	str	r2, [r3, #4]
 800341a:	609a      	str	r2, [r3, #8]
 800341c:	60da      	str	r2, [r3, #12]
 800341e:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a1f      	ldr	r2, [pc, #124]	@ (80034a4 <HAL_COMP_MspInit+0x9c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d119      	bne.n	800345e <HAL_COMP_MspInit+0x56>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800342a:	4b1f      	ldr	r3, [pc, #124]	@ (80034a8 <HAL_COMP_MspInit+0xa0>)
 800342c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800342e:	4a1e      	ldr	r2, [pc, #120]	@ (80034a8 <HAL_COMP_MspInit+0xa0>)
 8003430:	f043 0301 	orr.w	r3, r3, #1
 8003434:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003436:	4b1c      	ldr	r3, [pc, #112]	@ (80034a8 <HAL_COMP_MspInit+0xa0>)
 8003438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	613b      	str	r3, [r7, #16]
 8003440:	693b      	ldr	r3, [r7, #16]
    /**COMP2 GPIO Configuration
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003442:	2380      	movs	r3, #128	@ 0x80
 8003444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003446:	2303      	movs	r3, #3
 8003448:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344a:	2300      	movs	r3, #0
 800344c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800344e:	f107 0314 	add.w	r3, r7, #20
 8003452:	4619      	mov	r1, r3
 8003454:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003458:	f003 fc2c 	bl	8006cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP5_MspInit 1 */

  /* USER CODE END COMP5_MspInit 1 */
  }

}
 800345c:	e01d      	b.n	800349a <HAL_COMP_MspInit+0x92>
  else if(hcomp->Instance==COMP5)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a12      	ldr	r2, [pc, #72]	@ (80034ac <HAL_COMP_MspInit+0xa4>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d118      	bne.n	800349a <HAL_COMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003468:	4b0f      	ldr	r3, [pc, #60]	@ (80034a8 <HAL_COMP_MspInit+0xa0>)
 800346a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800346c:	4a0e      	ldr	r2, [pc, #56]	@ (80034a8 <HAL_COMP_MspInit+0xa0>)
 800346e:	f043 0302 	orr.w	r3, r3, #2
 8003472:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003474:	4b0c      	ldr	r3, [pc, #48]	@ (80034a8 <HAL_COMP_MspInit+0xa0>)
 8003476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003480:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003486:	2303      	movs	r3, #3
 8003488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348a:	2300      	movs	r3, #0
 800348c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800348e:	f107 0314 	add.w	r3, r7, #20
 8003492:	4619      	mov	r1, r3
 8003494:	4806      	ldr	r0, [pc, #24]	@ (80034b0 <HAL_COMP_MspInit+0xa8>)
 8003496:	f003 fc0d 	bl	8006cb4 <HAL_GPIO_Init>
}
 800349a:	bf00      	nop
 800349c:	3728      	adds	r7, #40	@ 0x28
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	40010204 	.word	0x40010204
 80034a8:	40021000 	.word	0x40021000
 80034ac:	40010210 	.word	0x40010210
 80034b0:	48000400 	.word	0x48000400

080034b4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08c      	sub	sp, #48	@ 0x30
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034bc:	f107 031c 	add.w	r3, r7, #28
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	605a      	str	r2, [r3, #4]
 80034c6:	609a      	str	r2, [r3, #8]
 80034c8:	60da      	str	r2, [r3, #12]
 80034ca:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a34      	ldr	r2, [pc, #208]	@ (80035a4 <HAL_DAC_MspInit+0xf0>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d125      	bne.n	8003522 <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80034d6:	4b34      	ldr	r3, [pc, #208]	@ (80035a8 <HAL_DAC_MspInit+0xf4>)
 80034d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034da:	4a33      	ldr	r2, [pc, #204]	@ (80035a8 <HAL_DAC_MspInit+0xf4>)
 80034dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034e2:	4b31      	ldr	r3, [pc, #196]	@ (80035a8 <HAL_DAC_MspInit+0xf4>)
 80034e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034ea:	61bb      	str	r3, [r7, #24]
 80034ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ee:	4b2e      	ldr	r3, [pc, #184]	@ (80035a8 <HAL_DAC_MspInit+0xf4>)
 80034f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034f2:	4a2d      	ldr	r2, [pc, #180]	@ (80035a8 <HAL_DAC_MspInit+0xf4>)
 80034f4:	f043 0301 	orr.w	r3, r3, #1
 80034f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034fa:	4b2b      	ldr	r3, [pc, #172]	@ (80035a8 <HAL_DAC_MspInit+0xf4>)
 80034fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003506:	2310      	movs	r3, #16
 8003508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800350a:	2303      	movs	r3, #3
 800350c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350e:	2300      	movs	r3, #0
 8003510:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003512:	f107 031c 	add.w	r3, r7, #28
 8003516:	4619      	mov	r1, r3
 8003518:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800351c:	f003 fbca 	bl	8006cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC4_MspInit 1 */

  /* USER CODE END DAC4_MspInit 1 */
  }

}
 8003520:	e03b      	b.n	800359a <HAL_DAC_MspInit+0xe6>
  else if(hdac->Instance==DAC2)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a21      	ldr	r2, [pc, #132]	@ (80035ac <HAL_DAC_MspInit+0xf8>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d125      	bne.n	8003578 <HAL_DAC_MspInit+0xc4>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800352c:	4b1e      	ldr	r3, [pc, #120]	@ (80035a8 <HAL_DAC_MspInit+0xf4>)
 800352e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003530:	4a1d      	ldr	r2, [pc, #116]	@ (80035a8 <HAL_DAC_MspInit+0xf4>)
 8003532:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003536:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003538:	4b1b      	ldr	r3, [pc, #108]	@ (80035a8 <HAL_DAC_MspInit+0xf4>)
 800353a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800353c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003544:	4b18      	ldr	r3, [pc, #96]	@ (80035a8 <HAL_DAC_MspInit+0xf4>)
 8003546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003548:	4a17      	ldr	r2, [pc, #92]	@ (80035a8 <HAL_DAC_MspInit+0xf4>)
 800354a:	f043 0301 	orr.w	r3, r3, #1
 800354e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003550:	4b15      	ldr	r3, [pc, #84]	@ (80035a8 <HAL_DAC_MspInit+0xf4>)
 8003552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800355c:	2340      	movs	r3, #64	@ 0x40
 800355e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003560:	2303      	movs	r3, #3
 8003562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003564:	2300      	movs	r3, #0
 8003566:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003568:	f107 031c 	add.w	r3, r7, #28
 800356c:	4619      	mov	r1, r3
 800356e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003572:	f003 fb9f 	bl	8006cb4 <HAL_GPIO_Init>
}
 8003576:	e010      	b.n	800359a <HAL_DAC_MspInit+0xe6>
  else if(hdac->Instance==DAC4)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a0c      	ldr	r2, [pc, #48]	@ (80035b0 <HAL_DAC_MspInit+0xfc>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d10b      	bne.n	800359a <HAL_DAC_MspInit+0xe6>
    __HAL_RCC_DAC4_CLK_ENABLE();
 8003582:	4b09      	ldr	r3, [pc, #36]	@ (80035a8 <HAL_DAC_MspInit+0xf4>)
 8003584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003586:	4a08      	ldr	r2, [pc, #32]	@ (80035a8 <HAL_DAC_MspInit+0xf4>)
 8003588:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800358c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800358e:	4b06      	ldr	r3, [pc, #24]	@ (80035a8 <HAL_DAC_MspInit+0xf4>)
 8003590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003592:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003596:	60bb      	str	r3, [r7, #8]
 8003598:	68bb      	ldr	r3, [r7, #8]
}
 800359a:	bf00      	nop
 800359c:	3730      	adds	r7, #48	@ 0x30
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	50000800 	.word	0x50000800
 80035a8:	40021000 	.word	0x40021000
 80035ac:	50000c00 	.word	0x50000c00
 80035b0:	50001400 	.word	0x50001400

080035b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b09e      	sub	sp, #120	@ 0x78
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035bc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	605a      	str	r2, [r3, #4]
 80035c6:	609a      	str	r2, [r3, #8]
 80035c8:	60da      	str	r2, [r3, #12]
 80035ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035cc:	f107 0310 	add.w	r3, r7, #16
 80035d0:	2254      	movs	r2, #84	@ 0x54
 80035d2:	2100      	movs	r1, #0
 80035d4:	4618      	mov	r0, r3
 80035d6:	f00f fac7 	bl	8012b68 <memset>
  if(hi2c->Instance==I2C3)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a1f      	ldr	r2, [pc, #124]	@ (800365c <HAL_I2C_MspInit+0xa8>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d137      	bne.n	8003654 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80035e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035e8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80035ea:	2300      	movs	r3, #0
 80035ec:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035ee:	f107 0310 	add.w	r3, r7, #16
 80035f2:	4618      	mov	r0, r3
 80035f4:	f006 fdb6 	bl	800a164 <HAL_RCCEx_PeriphCLKConfig>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80035fe:	f7ff f951 	bl	80028a4 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003602:	4b17      	ldr	r3, [pc, #92]	@ (8003660 <HAL_I2C_MspInit+0xac>)
 8003604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003606:	4a16      	ldr	r2, [pc, #88]	@ (8003660 <HAL_I2C_MspInit+0xac>)
 8003608:	f043 0304 	orr.w	r3, r3, #4
 800360c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800360e:	4b14      	ldr	r3, [pc, #80]	@ (8003660 <HAL_I2C_MspInit+0xac>)
 8003610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800361a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800361e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003620:	2312      	movs	r3, #18
 8003622:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003624:	2300      	movs	r3, #0
 8003626:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003628:	2300      	movs	r3, #0
 800362a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 800362c:	2308      	movs	r3, #8
 800362e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003630:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003634:	4619      	mov	r1, r3
 8003636:	480b      	ldr	r0, [pc, #44]	@ (8003664 <HAL_I2C_MspInit+0xb0>)
 8003638:	f003 fb3c 	bl	8006cb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800363c:	4b08      	ldr	r3, [pc, #32]	@ (8003660 <HAL_I2C_MspInit+0xac>)
 800363e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003640:	4a07      	ldr	r2, [pc, #28]	@ (8003660 <HAL_I2C_MspInit+0xac>)
 8003642:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003646:	6593      	str	r3, [r2, #88]	@ 0x58
 8003648:	4b05      	ldr	r3, [pc, #20]	@ (8003660 <HAL_I2C_MspInit+0xac>)
 800364a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800364c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003650:	60bb      	str	r3, [r7, #8]
 8003652:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8003654:	bf00      	nop
 8003656:	3778      	adds	r7, #120	@ 0x78
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	40007800 	.word	0x40007800
 8003660:	40021000 	.word	0x40021000
 8003664:	48000800 	.word	0x48000800

08003668 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b09e      	sub	sp, #120	@ 0x78
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003670:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	605a      	str	r2, [r3, #4]
 800367a:	609a      	str	r2, [r3, #8]
 800367c:	60da      	str	r2, [r3, #12]
 800367e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003680:	f107 0310 	add.w	r3, r7, #16
 8003684:	2254      	movs	r2, #84	@ 0x54
 8003686:	2100      	movs	r1, #0
 8003688:	4618      	mov	r0, r3
 800368a:	f00f fa6d 	bl	8012b68 <memset>
  if(huart->Instance==LPUART1)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a1f      	ldr	r2, [pc, #124]	@ (8003710 <HAL_UART_MspInit+0xa8>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d136      	bne.n	8003706 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003698:	2320      	movs	r3, #32
 800369a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800369c:	2300      	movs	r3, #0
 800369e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036a0:	f107 0310 	add.w	r3, r7, #16
 80036a4:	4618      	mov	r0, r3
 80036a6:	f006 fd5d 	bl	800a164 <HAL_RCCEx_PeriphCLKConfig>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80036b0:	f7ff f8f8 	bl	80028a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80036b4:	4b17      	ldr	r3, [pc, #92]	@ (8003714 <HAL_UART_MspInit+0xac>)
 80036b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b8:	4a16      	ldr	r2, [pc, #88]	@ (8003714 <HAL_UART_MspInit+0xac>)
 80036ba:	f043 0301 	orr.w	r3, r3, #1
 80036be:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80036c0:	4b14      	ldr	r3, [pc, #80]	@ (8003714 <HAL_UART_MspInit+0xac>)
 80036c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	60fb      	str	r3, [r7, #12]
 80036ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036cc:	4b11      	ldr	r3, [pc, #68]	@ (8003714 <HAL_UART_MspInit+0xac>)
 80036ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036d0:	4a10      	ldr	r2, [pc, #64]	@ (8003714 <HAL_UART_MspInit+0xac>)
 80036d2:	f043 0302 	orr.w	r3, r3, #2
 80036d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003714 <HAL_UART_MspInit+0xac>)
 80036da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	60bb      	str	r3, [r7, #8]
 80036e2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80036e4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80036e8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ea:	2302      	movs	r3, #2
 80036ec:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ee:	2300      	movs	r3, #0
 80036f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f2:	2300      	movs	r3, #0
 80036f4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80036f6:	2308      	movs	r3, #8
 80036f8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036fa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80036fe:	4619      	mov	r1, r3
 8003700:	4805      	ldr	r0, [pc, #20]	@ (8003718 <HAL_UART_MspInit+0xb0>)
 8003702:	f003 fad7 	bl	8006cb4 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8003706:	bf00      	nop
 8003708:	3778      	adds	r7, #120	@ 0x78
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40008000 	.word	0x40008000
 8003714:	40021000 	.word	0x40021000
 8003718:	48000400 	.word	0x48000400

0800371c <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b08e      	sub	sp, #56	@ 0x38
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003724:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	605a      	str	r2, [r3, #4]
 800372e:	609a      	str	r2, [r3, #8]
 8003730:	60da      	str	r2, [r3, #12]
 8003732:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a5c      	ldr	r2, [pc, #368]	@ (80038ac <HAL_OPAMP_MspInit+0x190>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d119      	bne.n	8003772 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800373e:	4b5c      	ldr	r3, [pc, #368]	@ (80038b0 <HAL_OPAMP_MspInit+0x194>)
 8003740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003742:	4a5b      	ldr	r2, [pc, #364]	@ (80038b0 <HAL_OPAMP_MspInit+0x194>)
 8003744:	f043 0301 	orr.w	r3, r3, #1
 8003748:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800374a:	4b59      	ldr	r3, [pc, #356]	@ (80038b0 <HAL_OPAMP_MspInit+0x194>)
 800374c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	623b      	str	r3, [r7, #32]
 8003754:	6a3b      	ldr	r3, [r7, #32]
    /**OPAMP1 GPIO Configuration
    PA7     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003756:	2380      	movs	r3, #128	@ 0x80
 8003758:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800375a:	2303      	movs	r3, #3
 800375c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800375e:	2300      	movs	r3, #0
 8003760:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003762:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003766:	4619      	mov	r1, r3
 8003768:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800376c:	f003 faa2 	bl	8006cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }

}
 8003770:	e098      	b.n	80038a4 <HAL_OPAMP_MspInit+0x188>
  else if(hopamp->Instance==OPAMP2)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a4f      	ldr	r2, [pc, #316]	@ (80038b4 <HAL_OPAMP_MspInit+0x198>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d119      	bne.n	80037b0 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800377c:	4b4c      	ldr	r3, [pc, #304]	@ (80038b0 <HAL_OPAMP_MspInit+0x194>)
 800377e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003780:	4a4b      	ldr	r2, [pc, #300]	@ (80038b0 <HAL_OPAMP_MspInit+0x194>)
 8003782:	f043 0301 	orr.w	r3, r3, #1
 8003786:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003788:	4b49      	ldr	r3, [pc, #292]	@ (80038b0 <HAL_OPAMP_MspInit+0x194>)
 800378a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	61fb      	str	r3, [r7, #28]
 8003792:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003794:	2380      	movs	r3, #128	@ 0x80
 8003796:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003798:	2303      	movs	r3, #3
 800379a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379c:	2300      	movs	r3, #0
 800379e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037a4:	4619      	mov	r1, r3
 80037a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037aa:	f003 fa83 	bl	8006cb4 <HAL_GPIO_Init>
}
 80037ae:	e079      	b.n	80038a4 <HAL_OPAMP_MspInit+0x188>
  else if(hopamp->Instance==OPAMP3)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a40      	ldr	r2, [pc, #256]	@ (80038b8 <HAL_OPAMP_MspInit+0x19c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d119      	bne.n	80037ee <HAL_OPAMP_MspInit+0xd2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ba:	4b3d      	ldr	r3, [pc, #244]	@ (80038b0 <HAL_OPAMP_MspInit+0x194>)
 80037bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037be:	4a3c      	ldr	r2, [pc, #240]	@ (80038b0 <HAL_OPAMP_MspInit+0x194>)
 80037c0:	f043 0302 	orr.w	r3, r3, #2
 80037c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037c6:	4b3a      	ldr	r3, [pc, #232]	@ (80038b0 <HAL_OPAMP_MspInit+0x194>)
 80037c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	61bb      	str	r3, [r7, #24]
 80037d0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80037d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80037d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037d8:	2303      	movs	r3, #3
 80037da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037dc:	2300      	movs	r3, #0
 80037de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037e4:	4619      	mov	r1, r3
 80037e6:	4835      	ldr	r0, [pc, #212]	@ (80038bc <HAL_OPAMP_MspInit+0x1a0>)
 80037e8:	f003 fa64 	bl	8006cb4 <HAL_GPIO_Init>
}
 80037ec:	e05a      	b.n	80038a4 <HAL_OPAMP_MspInit+0x188>
  else if(hopamp->Instance==OPAMP4)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a33      	ldr	r2, [pc, #204]	@ (80038c0 <HAL_OPAMP_MspInit+0x1a4>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d119      	bne.n	800382c <HAL_OPAMP_MspInit+0x110>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037f8:	4b2d      	ldr	r3, [pc, #180]	@ (80038b0 <HAL_OPAMP_MspInit+0x194>)
 80037fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037fc:	4a2c      	ldr	r2, [pc, #176]	@ (80038b0 <HAL_OPAMP_MspInit+0x194>)
 80037fe:	f043 0302 	orr.w	r3, r3, #2
 8003802:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003804:	4b2a      	ldr	r3, [pc, #168]	@ (80038b0 <HAL_OPAMP_MspInit+0x194>)
 8003806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	617b      	str	r3, [r7, #20]
 800380e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003810:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003814:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003816:	2303      	movs	r3, #3
 8003818:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381a:	2300      	movs	r3, #0
 800381c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800381e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003822:	4619      	mov	r1, r3
 8003824:	4825      	ldr	r0, [pc, #148]	@ (80038bc <HAL_OPAMP_MspInit+0x1a0>)
 8003826:	f003 fa45 	bl	8006cb4 <HAL_GPIO_Init>
}
 800382a:	e03b      	b.n	80038a4 <HAL_OPAMP_MspInit+0x188>
  else if(hopamp->Instance==OPAMP5)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a24      	ldr	r2, [pc, #144]	@ (80038c4 <HAL_OPAMP_MspInit+0x1a8>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d118      	bne.n	8003868 <HAL_OPAMP_MspInit+0x14c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003836:	4b1e      	ldr	r3, [pc, #120]	@ (80038b0 <HAL_OPAMP_MspInit+0x194>)
 8003838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800383a:	4a1d      	ldr	r2, [pc, #116]	@ (80038b0 <HAL_OPAMP_MspInit+0x194>)
 800383c:	f043 0304 	orr.w	r3, r3, #4
 8003840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003842:	4b1b      	ldr	r3, [pc, #108]	@ (80038b0 <HAL_OPAMP_MspInit+0x194>)
 8003844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	613b      	str	r3, [r7, #16]
 800384c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800384e:	2308      	movs	r3, #8
 8003850:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003852:	2303      	movs	r3, #3
 8003854:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003856:	2300      	movs	r3, #0
 8003858:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800385a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800385e:	4619      	mov	r1, r3
 8003860:	4819      	ldr	r0, [pc, #100]	@ (80038c8 <HAL_OPAMP_MspInit+0x1ac>)
 8003862:	f003 fa27 	bl	8006cb4 <HAL_GPIO_Init>
}
 8003866:	e01d      	b.n	80038a4 <HAL_OPAMP_MspInit+0x188>
  else if(hopamp->Instance==OPAMP6)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a17      	ldr	r2, [pc, #92]	@ (80038cc <HAL_OPAMP_MspInit+0x1b0>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d118      	bne.n	80038a4 <HAL_OPAMP_MspInit+0x188>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003872:	4b0f      	ldr	r3, [pc, #60]	@ (80038b0 <HAL_OPAMP_MspInit+0x194>)
 8003874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003876:	4a0e      	ldr	r2, [pc, #56]	@ (80038b0 <HAL_OPAMP_MspInit+0x194>)
 8003878:	f043 0302 	orr.w	r3, r3, #2
 800387c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800387e:	4b0c      	ldr	r3, [pc, #48]	@ (80038b0 <HAL_OPAMP_MspInit+0x194>)
 8003880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800388a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800388e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003890:	2303      	movs	r3, #3
 8003892:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003894:	2300      	movs	r3, #0
 8003896:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003898:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800389c:	4619      	mov	r1, r3
 800389e:	4807      	ldr	r0, [pc, #28]	@ (80038bc <HAL_OPAMP_MspInit+0x1a0>)
 80038a0:	f003 fa08 	bl	8006cb4 <HAL_GPIO_Init>
}
 80038a4:	bf00      	nop
 80038a6:	3738      	adds	r7, #56	@ 0x38
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40010300 	.word	0x40010300
 80038b0:	40021000 	.word	0x40021000
 80038b4:	40010304 	.word	0x40010304
 80038b8:	40010308 	.word	0x40010308
 80038bc:	48000400 	.word	0x48000400
 80038c0:	4001030c 	.word	0x4001030c
 80038c4:	40010310 	.word	0x40010310
 80038c8:	48000800 	.word	0x48000800
 80038cc:	40010314 	.word	0x40010314

080038d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08a      	sub	sp, #40	@ 0x28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038d8:	f107 0314 	add.w	r3, r7, #20
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	605a      	str	r2, [r3, #4]
 80038e2:	609a      	str	r2, [r3, #8]
 80038e4:	60da      	str	r2, [r3, #12]
 80038e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a2c      	ldr	r2, [pc, #176]	@ (80039a0 <HAL_SPI_MspInit+0xd0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d151      	bne.n	8003996 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80038f2:	4b2c      	ldr	r3, [pc, #176]	@ (80039a4 <HAL_SPI_MspInit+0xd4>)
 80038f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f6:	4a2b      	ldr	r2, [pc, #172]	@ (80039a4 <HAL_SPI_MspInit+0xd4>)
 80038f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80038fe:	4b29      	ldr	r3, [pc, #164]	@ (80039a4 <HAL_SPI_MspInit+0xd4>)
 8003900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003902:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003906:	613b      	str	r3, [r7, #16]
 8003908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800390a:	4b26      	ldr	r3, [pc, #152]	@ (80039a4 <HAL_SPI_MspInit+0xd4>)
 800390c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800390e:	4a25      	ldr	r2, [pc, #148]	@ (80039a4 <HAL_SPI_MspInit+0xd4>)
 8003910:	f043 0304 	orr.w	r3, r3, #4
 8003914:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003916:	4b23      	ldr	r3, [pc, #140]	@ (80039a4 <HAL_SPI_MspInit+0xd4>)
 8003918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800391a:	f003 0304 	and.w	r3, r3, #4
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8003922:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003928:	2302      	movs	r3, #2
 800392a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392c:	2300      	movs	r3, #0
 800392e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003930:	2300      	movs	r3, #0
 8003932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003934:	2306      	movs	r3, #6
 8003936:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003938:	f107 0314 	add.w	r3, r7, #20
 800393c:	4619      	mov	r1, r3
 800393e:	481a      	ldr	r0, [pc, #104]	@ (80039a8 <HAL_SPI_MspInit+0xd8>)
 8003940:	f003 f9b8 	bl	8006cb4 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Channel3;
 8003944:	4b19      	ldr	r3, [pc, #100]	@ (80039ac <HAL_SPI_MspInit+0xdc>)
 8003946:	4a1a      	ldr	r2, [pc, #104]	@ (80039b0 <HAL_SPI_MspInit+0xe0>)
 8003948:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 800394a:	4b18      	ldr	r3, [pc, #96]	@ (80039ac <HAL_SPI_MspInit+0xdc>)
 800394c:	220f      	movs	r2, #15
 800394e:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003950:	4b16      	ldr	r3, [pc, #88]	@ (80039ac <HAL_SPI_MspInit+0xdc>)
 8003952:	2210      	movs	r2, #16
 8003954:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003956:	4b15      	ldr	r3, [pc, #84]	@ (80039ac <HAL_SPI_MspInit+0xdc>)
 8003958:	2200      	movs	r2, #0
 800395a:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800395c:	4b13      	ldr	r3, [pc, #76]	@ (80039ac <HAL_SPI_MspInit+0xdc>)
 800395e:	2280      	movs	r2, #128	@ 0x80
 8003960:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003962:	4b12      	ldr	r3, [pc, #72]	@ (80039ac <HAL_SPI_MspInit+0xdc>)
 8003964:	2200      	movs	r2, #0
 8003966:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003968:	4b10      	ldr	r3, [pc, #64]	@ (80039ac <HAL_SPI_MspInit+0xdc>)
 800396a:	2200      	movs	r2, #0
 800396c:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800396e:	4b0f      	ldr	r3, [pc, #60]	@ (80039ac <HAL_SPI_MspInit+0xdc>)
 8003970:	2200      	movs	r2, #0
 8003972:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003974:	4b0d      	ldr	r3, [pc, #52]	@ (80039ac <HAL_SPI_MspInit+0xdc>)
 8003976:	2200      	movs	r2, #0
 8003978:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800397a:	480c      	ldr	r0, [pc, #48]	@ (80039ac <HAL_SPI_MspInit+0xdc>)
 800397c:	f002 ff28 	bl	80067d0 <HAL_DMA_Init>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8003986:	f7fe ff8d 	bl	80028a4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a07      	ldr	r2, [pc, #28]	@ (80039ac <HAL_SPI_MspInit+0xdc>)
 800398e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003990:	4a06      	ldr	r2, [pc, #24]	@ (80039ac <HAL_SPI_MspInit+0xdc>)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8003996:	bf00      	nop
 8003998:	3728      	adds	r7, #40	@ 0x28
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40003c00 	.word	0x40003c00
 80039a4:	40021000 	.word	0x40021000
 80039a8:	48000800 	.word	0x48000800
 80039ac:	200008fc 	.word	0x200008fc
 80039b0:	40020030 	.word	0x40020030

080039b4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b090      	sub	sp, #64	@ 0x40
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	605a      	str	r2, [r3, #4]
 80039c6:	609a      	str	r2, [r3, #8]
 80039c8:	60da      	str	r2, [r3, #12]
 80039ca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a6a      	ldr	r2, [pc, #424]	@ (8003b7c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d128      	bne.n	8003a28 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039d6:	4b6a      	ldr	r3, [pc, #424]	@ (8003b80 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80039d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039da:	4a69      	ldr	r2, [pc, #420]	@ (8003b80 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80039dc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80039e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80039e2:	4b67      	ldr	r3, [pc, #412]	@ (8003b80 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80039e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039ee:	4b64      	ldr	r3, [pc, #400]	@ (8003b80 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80039f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039f2:	4a63      	ldr	r2, [pc, #396]	@ (8003b80 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80039f4:	f043 0304 	orr.w	r3, r3, #4
 80039f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039fa:	4b61      	ldr	r3, [pc, #388]	@ (8003b80 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80039fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039fe:	f003 0304 	and.w	r3, r3, #4
 8003a02:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003a06:	2303      	movs	r3, #3
 8003a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a12:	2303      	movs	r3, #3
 8003a14:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003a16:	2302      	movs	r3, #2
 8003a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a1e:	4619      	mov	r1, r3
 8003a20:	4858      	ldr	r0, [pc, #352]	@ (8003b84 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003a22:	f003 f947 	bl	8006cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 8003a26:	e0a4      	b.n	8003b72 <HAL_TIM_Encoder_MspInit+0x1be>
  else if(htim_encoder->Instance==TIM3)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a56      	ldr	r2, [pc, #344]	@ (8003b88 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d128      	bne.n	8003a84 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a32:	4b53      	ldr	r3, [pc, #332]	@ (8003b80 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a36:	4a52      	ldr	r2, [pc, #328]	@ (8003b80 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003a38:	f043 0302 	orr.w	r3, r3, #2
 8003a3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a3e:	4b50      	ldr	r3, [pc, #320]	@ (8003b80 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	623b      	str	r3, [r7, #32]
 8003a48:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a4a:	4b4d      	ldr	r3, [pc, #308]	@ (8003b80 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a4e:	4a4c      	ldr	r2, [pc, #304]	@ (8003b80 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003a50:	f043 0304 	orr.w	r3, r3, #4
 8003a54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a56:	4b4a      	ldr	r3, [pc, #296]	@ (8003b80 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a5a:	f003 0304 	and.w	r3, r3, #4
 8003a5e:	61fb      	str	r3, [r7, #28]
 8003a60:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a62:	23c0      	movs	r3, #192	@ 0xc0
 8003a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a66:	2302      	movs	r3, #2
 8003a68:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003a72:	2302      	movs	r3, #2
 8003a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4841      	ldr	r0, [pc, #260]	@ (8003b84 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003a7e:	f003 f919 	bl	8006cb4 <HAL_GPIO_Init>
}
 8003a82:	e076      	b.n	8003b72 <HAL_TIM_Encoder_MspInit+0x1be>
  else if(htim_encoder->Instance==TIM4)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a40      	ldr	r2, [pc, #256]	@ (8003b8c <HAL_TIM_Encoder_MspInit+0x1d8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d128      	bne.n	8003ae0 <HAL_TIM_Encoder_MspInit+0x12c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003a8e:	4b3c      	ldr	r3, [pc, #240]	@ (8003b80 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a92:	4a3b      	ldr	r2, [pc, #236]	@ (8003b80 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003a94:	f043 0304 	orr.w	r3, r3, #4
 8003a98:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a9a:	4b39      	ldr	r3, [pc, #228]	@ (8003b80 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a9e:	f003 0304 	and.w	r3, r3, #4
 8003aa2:	61bb      	str	r3, [r7, #24]
 8003aa4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aa6:	4b36      	ldr	r3, [pc, #216]	@ (8003b80 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aaa:	4a35      	ldr	r2, [pc, #212]	@ (8003b80 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003aac:	f043 0302 	orr.w	r3, r3, #2
 8003ab0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ab2:	4b33      	ldr	r3, [pc, #204]	@ (8003b80 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	617b      	str	r3, [r7, #20]
 8003abc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003abe:	23c0      	movs	r3, #192	@ 0xc0
 8003ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aca:	2303      	movs	r3, #3
 8003acc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003ace:	2302      	movs	r3, #2
 8003ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ad2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	482d      	ldr	r0, [pc, #180]	@ (8003b90 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8003ada:	f003 f8eb 	bl	8006cb4 <HAL_GPIO_Init>
}
 8003ade:	e048      	b.n	8003b72 <HAL_TIM_Encoder_MspInit+0x1be>
  else if(htim_encoder->Instance==TIM20)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a2b      	ldr	r2, [pc, #172]	@ (8003b94 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d143      	bne.n	8003b72 <HAL_TIM_Encoder_MspInit+0x1be>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8003aea:	4b25      	ldr	r3, [pc, #148]	@ (8003b80 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aee:	4a24      	ldr	r2, [pc, #144]	@ (8003b80 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003af0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003af4:	6613      	str	r3, [r2, #96]	@ 0x60
 8003af6:	4b22      	ldr	r3, [pc, #136]	@ (8003b80 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003af8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003afa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b02:	4b1f      	ldr	r3, [pc, #124]	@ (8003b80 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b06:	4a1e      	ldr	r2, [pc, #120]	@ (8003b80 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003b08:	f043 0304 	orr.w	r3, r3, #4
 8003b0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8003b80 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b12:	f003 0304 	and.w	r3, r3, #4
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b1a:	4b19      	ldr	r3, [pc, #100]	@ (8003b80 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b1e:	4a18      	ldr	r2, [pc, #96]	@ (8003b80 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003b20:	f043 0302 	orr.w	r3, r3, #2
 8003b24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b26:	4b16      	ldr	r3, [pc, #88]	@ (8003b80 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	60bb      	str	r3, [r7, #8]
 8003b30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003b32:	2304      	movs	r3, #4
 8003b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b36:	2302      	movs	r3, #2
 8003b38:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8003b42:	2306      	movs	r3, #6
 8003b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	480d      	ldr	r0, [pc, #52]	@ (8003b84 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003b4e:	f003 f8b1 	bl	8006cb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003b52:	2304      	movs	r3, #4
 8003b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b56:	2302      	movs	r3, #2
 8003b58:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8003b62:	2303      	movs	r3, #3
 8003b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	4808      	ldr	r0, [pc, #32]	@ (8003b90 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8003b6e:	f003 f8a1 	bl	8006cb4 <HAL_GPIO_Init>
}
 8003b72:	bf00      	nop
 8003b74:	3740      	adds	r7, #64	@ 0x40
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40012c00 	.word	0x40012c00
 8003b80:	40021000 	.word	0x40021000
 8003b84:	48000800 	.word	0x48000800
 8003b88:	40000400 	.word	0x40000400
 8003b8c:	40000800 	.word	0x40000800
 8003b90:	48000400 	.word	0x48000400
 8003b94:	40015000 	.word	0x40015000

08003b98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a4f      	ldr	r2, [pc, #316]	@ (8003ce4 <HAL_TIM_Base_MspInit+0x14c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d10c      	bne.n	8003bc4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003baa:	4b4f      	ldr	r3, [pc, #316]	@ (8003ce8 <HAL_TIM_Base_MspInit+0x150>)
 8003bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bae:	4a4e      	ldr	r2, [pc, #312]	@ (8003ce8 <HAL_TIM_Base_MspInit+0x150>)
 8003bb0:	f043 0310 	orr.w	r3, r3, #16
 8003bb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bb6:	4b4c      	ldr	r3, [pc, #304]	@ (8003ce8 <HAL_TIM_Base_MspInit+0x150>)
 8003bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bba:	f003 0310 	and.w	r3, r3, #16
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003bc2:	e08a      	b.n	8003cda <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM7)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a48      	ldr	r2, [pc, #288]	@ (8003cec <HAL_TIM_Base_MspInit+0x154>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d10c      	bne.n	8003be8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003bce:	4b46      	ldr	r3, [pc, #280]	@ (8003ce8 <HAL_TIM_Base_MspInit+0x150>)
 8003bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd2:	4a45      	ldr	r2, [pc, #276]	@ (8003ce8 <HAL_TIM_Base_MspInit+0x150>)
 8003bd4:	f043 0320 	orr.w	r3, r3, #32
 8003bd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bda:	4b43      	ldr	r3, [pc, #268]	@ (8003ce8 <HAL_TIM_Base_MspInit+0x150>)
 8003bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bde:	f003 0320 	and.w	r3, r3, #32
 8003be2:	613b      	str	r3, [r7, #16]
 8003be4:	693b      	ldr	r3, [r7, #16]
}
 8003be6:	e078      	b.n	8003cda <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM8)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a40      	ldr	r2, [pc, #256]	@ (8003cf0 <HAL_TIM_Base_MspInit+0x158>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d137      	bne.n	8003c62 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003bf2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ce8 <HAL_TIM_Base_MspInit+0x150>)
 8003bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bf6:	4a3c      	ldr	r2, [pc, #240]	@ (8003ce8 <HAL_TIM_Base_MspInit+0x150>)
 8003bf8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003bfc:	6613      	str	r3, [r2, #96]	@ 0x60
 8003bfe:	4b3a      	ldr	r3, [pc, #232]	@ (8003ce8 <HAL_TIM_Base_MspInit+0x150>)
 8003c00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	68fb      	ldr	r3, [r7, #12]
    hdma_tim8_ch3.Instance = DMA1_Channel1;
 8003c0a:	4b3a      	ldr	r3, [pc, #232]	@ (8003cf4 <HAL_TIM_Base_MspInit+0x15c>)
 8003c0c:	4a3a      	ldr	r2, [pc, #232]	@ (8003cf8 <HAL_TIM_Base_MspInit+0x160>)
 8003c0e:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch3.Init.Request = DMA_REQUEST_TIM8_CH3;
 8003c10:	4b38      	ldr	r3, [pc, #224]	@ (8003cf4 <HAL_TIM_Base_MspInit+0x15c>)
 8003c12:	2233      	movs	r2, #51	@ 0x33
 8003c14:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c16:	4b37      	ldr	r3, [pc, #220]	@ (8003cf4 <HAL_TIM_Base_MspInit+0x15c>)
 8003c18:	2210      	movs	r2, #16
 8003c1a:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c1c:	4b35      	ldr	r3, [pc, #212]	@ (8003cf4 <HAL_TIM_Base_MspInit+0x15c>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003c22:	4b34      	ldr	r3, [pc, #208]	@ (8003cf4 <HAL_TIM_Base_MspInit+0x15c>)
 8003c24:	2280      	movs	r2, #128	@ 0x80
 8003c26:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003c28:	4b32      	ldr	r3, [pc, #200]	@ (8003cf4 <HAL_TIM_Base_MspInit+0x15c>)
 8003c2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c2e:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003c30:	4b30      	ldr	r3, [pc, #192]	@ (8003cf4 <HAL_TIM_Base_MspInit+0x15c>)
 8003c32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c36:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch3.Init.Mode = DMA_NORMAL;
 8003c38:	4b2e      	ldr	r3, [pc, #184]	@ (8003cf4 <HAL_TIM_Base_MspInit+0x15c>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003c3e:	4b2d      	ldr	r3, [pc, #180]	@ (8003cf4 <HAL_TIM_Base_MspInit+0x15c>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim8_ch3) != HAL_OK)
 8003c44:	482b      	ldr	r0, [pc, #172]	@ (8003cf4 <HAL_TIM_Base_MspInit+0x15c>)
 8003c46:	f002 fdc3 	bl	80067d0 <HAL_DMA_Init>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <HAL_TIM_Base_MspInit+0xbc>
      Error_Handler();
 8003c50:	f7fe fe28 	bl	80028a4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim8_ch3);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a27      	ldr	r2, [pc, #156]	@ (8003cf4 <HAL_TIM_Base_MspInit+0x15c>)
 8003c58:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003c5a:	4a26      	ldr	r2, [pc, #152]	@ (8003cf4 <HAL_TIM_Base_MspInit+0x15c>)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003c60:	e03b      	b.n	8003cda <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM15)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a25      	ldr	r2, [pc, #148]	@ (8003cfc <HAL_TIM_Base_MspInit+0x164>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d136      	bne.n	8003cda <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003c6c:	4b1e      	ldr	r3, [pc, #120]	@ (8003ce8 <HAL_TIM_Base_MspInit+0x150>)
 8003c6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c70:	4a1d      	ldr	r2, [pc, #116]	@ (8003ce8 <HAL_TIM_Base_MspInit+0x150>)
 8003c72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c76:	6613      	str	r3, [r2, #96]	@ 0x60
 8003c78:	4b1b      	ldr	r3, [pc, #108]	@ (8003ce8 <HAL_TIM_Base_MspInit+0x150>)
 8003c7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c80:	60bb      	str	r3, [r7, #8]
 8003c82:	68bb      	ldr	r3, [r7, #8]
    hdma_tim15_ch1.Instance = DMA1_Channel2;
 8003c84:	4b1e      	ldr	r3, [pc, #120]	@ (8003d00 <HAL_TIM_Base_MspInit+0x168>)
 8003c86:	4a1f      	ldr	r2, [pc, #124]	@ (8003d04 <HAL_TIM_Base_MspInit+0x16c>)
 8003c88:	601a      	str	r2, [r3, #0]
    hdma_tim15_ch1.Init.Request = DMA_REQUEST_TIM15_CH1;
 8003c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8003d00 <HAL_TIM_Base_MspInit+0x168>)
 8003c8c:	224e      	movs	r2, #78	@ 0x4e
 8003c8e:	605a      	str	r2, [r3, #4]
    hdma_tim15_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c90:	4b1b      	ldr	r3, [pc, #108]	@ (8003d00 <HAL_TIM_Base_MspInit+0x168>)
 8003c92:	2210      	movs	r2, #16
 8003c94:	609a      	str	r2, [r3, #8]
    hdma_tim15_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c96:	4b1a      	ldr	r3, [pc, #104]	@ (8003d00 <HAL_TIM_Base_MspInit+0x168>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	60da      	str	r2, [r3, #12]
    hdma_tim15_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003c9c:	4b18      	ldr	r3, [pc, #96]	@ (8003d00 <HAL_TIM_Base_MspInit+0x168>)
 8003c9e:	2280      	movs	r2, #128	@ 0x80
 8003ca0:	611a      	str	r2, [r3, #16]
    hdma_tim15_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003ca2:	4b17      	ldr	r3, [pc, #92]	@ (8003d00 <HAL_TIM_Base_MspInit+0x168>)
 8003ca4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ca8:	615a      	str	r2, [r3, #20]
    hdma_tim15_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003caa:	4b15      	ldr	r3, [pc, #84]	@ (8003d00 <HAL_TIM_Base_MspInit+0x168>)
 8003cac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cb0:	619a      	str	r2, [r3, #24]
    hdma_tim15_ch1.Init.Mode = DMA_NORMAL;
 8003cb2:	4b13      	ldr	r3, [pc, #76]	@ (8003d00 <HAL_TIM_Base_MspInit+0x168>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	61da      	str	r2, [r3, #28]
    hdma_tim15_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003cb8:	4b11      	ldr	r3, [pc, #68]	@ (8003d00 <HAL_TIM_Base_MspInit+0x168>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim15_ch1) != HAL_OK)
 8003cbe:	4810      	ldr	r0, [pc, #64]	@ (8003d00 <HAL_TIM_Base_MspInit+0x168>)
 8003cc0:	f002 fd86 	bl	80067d0 <HAL_DMA_Init>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <HAL_TIM_Base_MspInit+0x136>
      Error_Handler();
 8003cca:	f7fe fdeb 	bl	80028a4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a0b      	ldr	r2, [pc, #44]	@ (8003d00 <HAL_TIM_Base_MspInit+0x168>)
 8003cd2:	625a      	str	r2, [r3, #36]	@ 0x24
 8003cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8003d00 <HAL_TIM_Base_MspInit+0x168>)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003cda:	bf00      	nop
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40001000 	.word	0x40001000
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	40001400 	.word	0x40001400
 8003cf0:	40013400 	.word	0x40013400
 8003cf4:	20000bbc 	.word	0x20000bbc
 8003cf8:	40020008 	.word	0x40020008
 8003cfc:	40014000 	.word	0x40014000
 8003d00:	20000c1c 	.word	0x20000c1c
 8003d04:	4002001c 	.word	0x4002001c

08003d08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b08a      	sub	sp, #40	@ 0x28
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d10:	f107 0314 	add.w	r3, r7, #20
 8003d14:	2200      	movs	r2, #0
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	605a      	str	r2, [r3, #4]
 8003d1a:	609a      	str	r2, [r3, #8]
 8003d1c:	60da      	str	r2, [r3, #12]
 8003d1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a32      	ldr	r2, [pc, #200]	@ (8003df0 <HAL_TIM_MspPostInit+0xe8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d13b      	bne.n	8003da2 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d2a:	4b32      	ldr	r3, [pc, #200]	@ (8003df4 <HAL_TIM_MspPostInit+0xec>)
 8003d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d2e:	4a31      	ldr	r2, [pc, #196]	@ (8003df4 <HAL_TIM_MspPostInit+0xec>)
 8003d30:	f043 0301 	orr.w	r3, r3, #1
 8003d34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d36:	4b2f      	ldr	r3, [pc, #188]	@ (8003df4 <HAL_TIM_MspPostInit+0xec>)
 8003d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	613b      	str	r3, [r7, #16]
 8003d40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d42:	4b2c      	ldr	r3, [pc, #176]	@ (8003df4 <HAL_TIM_MspPostInit+0xec>)
 8003d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d46:	4a2b      	ldr	r2, [pc, #172]	@ (8003df4 <HAL_TIM_MspPostInit+0xec>)
 8003d48:	f043 0302 	orr.w	r3, r3, #2
 8003d4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d4e:	4b29      	ldr	r3, [pc, #164]	@ (8003df4 <HAL_TIM_MspPostInit+0xec>)
 8003d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	60fb      	str	r3, [r7, #12]
 8003d58:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PA15     ------> TIM8_CH1
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003d5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d60:	2302      	movs	r3, #2
 8003d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003d64:	2302      	movs	r3, #2
 8003d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d70:	f107 0314 	add.w	r3, r7, #20
 8003d74:	4619      	mov	r1, r3
 8003d76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d7a:	f002 ff9b 	bl	8006cb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003d7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d84:	2302      	movs	r3, #2
 8003d86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8003d90:	230a      	movs	r3, #10
 8003d92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d94:	f107 0314 	add.w	r3, r7, #20
 8003d98:	4619      	mov	r1, r3
 8003d9a:	4817      	ldr	r0, [pc, #92]	@ (8003df8 <HAL_TIM_MspPostInit+0xf0>)
 8003d9c:	f002 ff8a 	bl	8006cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8003da0:	e021      	b.n	8003de6 <HAL_TIM_MspPostInit+0xde>
  else if(htim->Instance==TIM15)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a15      	ldr	r2, [pc, #84]	@ (8003dfc <HAL_TIM_MspPostInit+0xf4>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d11c      	bne.n	8003de6 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dac:	4b11      	ldr	r3, [pc, #68]	@ (8003df4 <HAL_TIM_MspPostInit+0xec>)
 8003dae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003db0:	4a10      	ldr	r2, [pc, #64]	@ (8003df4 <HAL_TIM_MspPostInit+0xec>)
 8003db2:	f043 0302 	orr.w	r3, r3, #2
 8003db6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003db8:	4b0e      	ldr	r3, [pc, #56]	@ (8003df4 <HAL_TIM_MspPostInit+0xec>)
 8003dba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	60bb      	str	r3, [r7, #8]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003dc4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dca:	2302      	movs	r3, #2
 8003dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dda:	f107 0314 	add.w	r3, r7, #20
 8003dde:	4619      	mov	r1, r3
 8003de0:	4805      	ldr	r0, [pc, #20]	@ (8003df8 <HAL_TIM_MspPostInit+0xf0>)
 8003de2:	f002 ff67 	bl	8006cb4 <HAL_GPIO_Init>
}
 8003de6:	bf00      	nop
 8003de8:	3728      	adds	r7, #40	@ 0x28
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	40013400 	.word	0x40013400
 8003df4:	40021000 	.word	0x40021000
 8003df8:	48000400 	.word	0x48000400
 8003dfc:	40014000 	.word	0x40014000

08003e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003e04:	f006 f94c 	bl	800a0a0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003e08:	bf00      	nop
 8003e0a:	e7fd      	b.n	8003e08 <NMI_Handler+0x8>

08003e0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e10:	bf00      	nop
 8003e12:	e7fd      	b.n	8003e10 <HardFault_Handler+0x4>

08003e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e18:	bf00      	nop
 8003e1a:	e7fd      	b.n	8003e18 <MemManage_Handler+0x4>

08003e1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e20:	bf00      	nop
 8003e22:	e7fd      	b.n	8003e20 <BusFault_Handler+0x4>

08003e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e28:	bf00      	nop
 8003e2a:	e7fd      	b.n	8003e28 <UsageFault_Handler+0x4>

08003e2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e30:	bf00      	nop
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e3e:	bf00      	nop
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e4c:	bf00      	nop
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e5a:	f000 fa81 	bl	8004360 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e5e:	bf00      	nop
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003e66:	2001      	movs	r0, #1
 8003e68:	f003 f8be 	bl	8006fe8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003e6c:	bf00      	nop
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003e74:	2002      	movs	r0, #2
 8003e76:	f003 f8b7 	bl	8006fe8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003e7a:	bf00      	nop
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003e82:	2004      	movs	r0, #4
 8003e84:	f003 f8b0 	bl	8006fe8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003e88:	bf00      	nop
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003e90:	2008      	movs	r0, #8
 8003e92:	f003 f8a9 	bl	8006fe8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003e96:	bf00      	nop
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003e9e:	2010      	movs	r0, #16
 8003ea0:	f003 f8a2 	bl	8006fe8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003ea4:	bf00      	nop
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch3);
 8003eac:	4802      	ldr	r0, [pc, #8]	@ (8003eb8 <DMA1_Channel1_IRQHandler+0x10>)
 8003eae:	f002 fdb2 	bl	8006a16 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003eb2:	bf00      	nop
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	20000bbc 	.word	0x20000bbc

08003ebc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim15_ch1);
 8003ec0:	4802      	ldr	r0, [pc, #8]	@ (8003ecc <DMA1_Channel2_IRQHandler+0x10>)
 8003ec2:	f002 fda8 	bl	8006a16 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003ec6:	bf00      	nop
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	20000c1c 	.word	0x20000c1c

08003ed0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8003ed4:	4802      	ldr	r0, [pc, #8]	@ (8003ee0 <DMA1_Channel3_IRQHandler+0x10>)
 8003ed6:	f002 fd9e 	bl	8006a16 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003eda:	bf00      	nop
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	200008fc 	.word	0x200008fc

08003ee4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8003ee8:	4802      	ldr	r0, [pc, #8]	@ (8003ef4 <DMA1_Channel4_IRQHandler+0x10>)
 8003eea:	f002 fd94 	bl	8006a16 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003eee:	bf00      	nop
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	20000564 	.word	0x20000564

08003ef8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003efc:	4802      	ldr	r0, [pc, #8]	@ (8003f08 <DMA1_Channel5_IRQHandler+0x10>)
 8003efe:	f002 fd8a 	bl	8006a16 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003f02:	bf00      	nop
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	20000504 	.word	0x20000504

08003f0c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003f10:	4802      	ldr	r0, [pc, #8]	@ (8003f1c <USB_LP_IRQHandler+0x10>)
 8003f12:	f003 ff07 	bl	8007d24 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8003f16:	bf00      	nop
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20003864 	.word	0x20003864

08003f20 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003f24:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003f28:	f003 f85e 	bl	8006fe8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003f2c:	bf00      	nop
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	  FT6336_GetTouchPoint(&TouchPoints);
 8003f34:	4808      	ldr	r0, [pc, #32]	@ (8003f58 <EXTI15_10_IRQHandler+0x28>)
 8003f36:	f7fd f9b1 	bl	800129c <FT6336_GetTouchPoint>

	  ST7789_DrawPixel(TouchPoints.point1_x, TouchPoints.point1_y, 0xffffff);
 8003f3a:	4b07      	ldr	r3, [pc, #28]	@ (8003f58 <EXTI15_10_IRQHandler+0x28>)
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	4a06      	ldr	r2, [pc, #24]	@ (8003f58 <EXTI15_10_IRQHandler+0x28>)
 8003f40:	8851      	ldrh	r1, [r2, #2]
 8003f42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fe fe7e 	bl	8002c48 <ST7789_DrawPixel>


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003f4c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003f50:	f003 f84a 	bl	8006fe8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003f54:	bf00      	nop
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	200003b8 	.word	0x200003b8

08003f5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
  return 1;
 8003f60:	2301      	movs	r3, #1
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <_kill>:

int _kill(int pid, int sig)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003f76:	f00e fe49 	bl	8012c0c <__errno>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2216      	movs	r2, #22
 8003f7e:	601a      	str	r2, [r3, #0]
  return -1;
 8003f80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <_exit>:

void _exit (int status)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003f94:	f04f 31ff 	mov.w	r1, #4294967295
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f7ff ffe7 	bl	8003f6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003f9e:	bf00      	nop
 8003fa0:	e7fd      	b.n	8003f9e <_exit+0x12>

08003fa2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b086      	sub	sp, #24
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	60f8      	str	r0, [r7, #12]
 8003faa:	60b9      	str	r1, [r7, #8]
 8003fac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fae:	2300      	movs	r3, #0
 8003fb0:	617b      	str	r3, [r7, #20]
 8003fb2:	e00a      	b.n	8003fca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003fb4:	f3af 8000 	nop.w
 8003fb8:	4601      	mov	r1, r0
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	60ba      	str	r2, [r7, #8]
 8003fc0:	b2ca      	uxtb	r2, r1
 8003fc2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	617b      	str	r3, [r7, #20]
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	dbf0      	blt.n	8003fb4 <_read+0x12>
  }

  return len;
 8003fd2:	687b      	ldr	r3, [r7, #4]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3718      	adds	r7, #24
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fe8:	2300      	movs	r3, #0
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	e009      	b.n	8004002 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	60ba      	str	r2, [r7, #8]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fd f9be 	bl	8001378 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	3301      	adds	r3, #1
 8004000:	617b      	str	r3, [r7, #20]
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	429a      	cmp	r2, r3
 8004008:	dbf1      	blt.n	8003fee <_write+0x12>
  }
  return len;
 800400a:	687b      	ldr	r3, [r7, #4]
}
 800400c:	4618      	mov	r0, r3
 800400e:	3718      	adds	r7, #24
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <_close>:

int _close(int file)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800401c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004020:	4618      	mov	r0, r3
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800403c:	605a      	str	r2, [r3, #4]
  return 0;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <_isatty>:

int _isatty(int file)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004054:	2301      	movs	r3, #1
}
 8004056:	4618      	mov	r0, r3
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004062:	b480      	push	{r7}
 8004064:	b085      	sub	sp, #20
 8004066:	af00      	add	r7, sp, #0
 8004068:	60f8      	str	r0, [r7, #12]
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004084:	4a14      	ldr	r2, [pc, #80]	@ (80040d8 <_sbrk+0x5c>)
 8004086:	4b15      	ldr	r3, [pc, #84]	@ (80040dc <_sbrk+0x60>)
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004090:	4b13      	ldr	r3, [pc, #76]	@ (80040e0 <_sbrk+0x64>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d102      	bne.n	800409e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004098:	4b11      	ldr	r3, [pc, #68]	@ (80040e0 <_sbrk+0x64>)
 800409a:	4a12      	ldr	r2, [pc, #72]	@ (80040e4 <_sbrk+0x68>)
 800409c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800409e:	4b10      	ldr	r3, [pc, #64]	@ (80040e0 <_sbrk+0x64>)
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4413      	add	r3, r2
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d207      	bcs.n	80040bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040ac:	f00e fdae 	bl	8012c0c <__errno>
 80040b0:	4603      	mov	r3, r0
 80040b2:	220c      	movs	r2, #12
 80040b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040b6:	f04f 33ff 	mov.w	r3, #4294967295
 80040ba:	e009      	b.n	80040d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040bc:	4b08      	ldr	r3, [pc, #32]	@ (80040e0 <_sbrk+0x64>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040c2:	4b07      	ldr	r3, [pc, #28]	@ (80040e0 <_sbrk+0x64>)
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4413      	add	r3, r2
 80040ca:	4a05      	ldr	r2, [pc, #20]	@ (80040e0 <_sbrk+0x64>)
 80040cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80040ce:	68fb      	ldr	r3, [r7, #12]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3718      	adds	r7, #24
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	20020000 	.word	0x20020000
 80040dc:	00000400 	.word	0x00000400
 80040e0:	20002978 	.word	0x20002978
 80040e4:	20003eb0 	.word	0x20003eb0

080040e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80040ec:	4b06      	ldr	r3, [pc, #24]	@ (8004108 <SystemInit+0x20>)
 80040ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040f2:	4a05      	ldr	r2, [pc, #20]	@ (8004108 <SystemInit+0x20>)
 80040f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80040f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040fc:	bf00      	nop
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	e000ed00 	.word	0xe000ed00

0800410c <WS2812_Write_Data>:
 * @param  Color:颜色24bit of RGB888
 * @param  index:灯的标号
 * @return None
 */
void WS2812_Write_Data(uint32_t Color, uint8_t index)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < 24; i++)
 8004118:	2300      	movs	r3, #0
 800411a:	73fb      	strb	r3, [r7, #15]
 800411c:	e018      	b.n	8004150 <WS2812_Write_Data+0x44>
		WS2812_Buf[24 * index + i] = (((Color << i) & 0X800000) ? High_Code : Low_Code);
 800411e:	7bfb      	ldrb	r3, [r7, #15]
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	fa02 f303 	lsl.w	r3, r2, r3
 8004126:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <WS2812_Write_Data+0x26>
 800412e:	215a      	movs	r1, #90	@ 0x5a
 8004130:	e000      	b.n	8004134 <WS2812_Write_Data+0x28>
 8004132:	212d      	movs	r1, #45	@ 0x2d
 8004134:	78fa      	ldrb	r2, [r7, #3]
 8004136:	4613      	mov	r3, r2
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	4413      	add	r3, r2
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	461a      	mov	r2, r3
 8004140:	7bfb      	ldrb	r3, [r7, #15]
 8004142:	4413      	add	r3, r2
 8004144:	4a07      	ldr	r2, [pc, #28]	@ (8004164 <WS2812_Write_Data+0x58>)
 8004146:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < 24; i++)
 800414a:	7bfb      	ldrb	r3, [r7, #15]
 800414c:	3301      	adds	r3, #1
 800414e:	73fb      	strb	r3, [r7, #15]
 8004150:	7bfb      	ldrb	r3, [r7, #15]
 8004152:	2b17      	cmp	r3, #23
 8004154:	d9e3      	bls.n	800411e <WS2812_Write_Data+0x12>
}
 8004156:	bf00      	nop
 8004158:	bf00      	nop
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	2000297c 	.word	0x2000297c

08004168 <WS2812_Update>:
 * @brief  WS2812更新指令
 * @param  None
 * @return None
 */
void WS2812_Update(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&WS2812_TIM,WS2812_CHANNEL,(uint32_t *)WS2812_Buf,WS2812_BUF_SIZE);
 800416c:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8004170:	4a03      	ldr	r2, [pc, #12]	@ (8004180 <WS2812_Update+0x18>)
 8004172:	2108      	movs	r1, #8
 8004174:	4803      	ldr	r0, [pc, #12]	@ (8004184 <WS2812_Update+0x1c>)
 8004176:	f007 f993 	bl	800b4a0 <HAL_TIM_PWM_Start_DMA>
}
 800417a:	bf00      	nop
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	2000297c 	.word	0x2000297c
 8004184:	20000ad8 	.word	0x20000ad8

08004188 <RGBColorToUint32>:

// 将位域结构体转换为 uint32_t 类型
uint32_t RGBColorToUint32(RGBColor color) {
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
    return (color.red << 16) | (color.green << 8) | color.blue;
 8004190:	793b      	ldrb	r3, [r7, #4]
 8004192:	041a      	lsls	r2, r3, #16
 8004194:	797b      	ldrb	r3, [r7, #5]
 8004196:	021b      	lsls	r3, r3, #8
 8004198:	4313      	orrs	r3, r2
 800419a:	79ba      	ldrb	r2, [r7, #6]
 800419c:	4313      	orrs	r3, r2
}
 800419e:	4618      	mov	r0, r3
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
	...

080041ac <WS2812_Write_Colors>:
 * @brief Write a series of RGB colors to WS2812 with brightness adjustment.
 * @param colors Pointer to the original RGBColor array.
 * @param count Number of elements in the array.
 * @return None
 */
void WS2812_Write_Colors(RGBColor *colors, uint8_t count) {
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	460b      	mov	r3, r1
 80041b6:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < count; i++) {
 80041b8:	2300      	movs	r3, #0
 80041ba:	75fb      	strb	r3, [r7, #23]
 80041bc:	e046      	b.n	800424c <WS2812_Write_Colors+0xa0>
        uint32_t color_value = RGBColorToUint32(colors[i]);
 80041be:	7dfb      	ldrb	r3, [r7, #23]
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	4413      	add	r3, r2
 80041c6:	6818      	ldr	r0, [r3, #0]
 80041c8:	f7ff ffde 	bl	8004188 <RGBColorToUint32>
 80041cc:	6138      	str	r0, [r7, #16]
        // 分离出 RGB 各通道
        uint8_t red = (color_value >> 16) & 0xFF;
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	0c1b      	lsrs	r3, r3, #16
 80041d2:	73fb      	strb	r3, [r7, #15]
        uint8_t green = (color_value >> 8) & 0xFF;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	0a1b      	lsrs	r3, r3, #8
 80041d8:	73bb      	strb	r3, [r7, #14]
        uint8_t blue = color_value & 0xFF;
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	737b      	strb	r3, [r7, #13]

        // 调整各通道亮度
        red = (uint16_t)red * WS2812_Brightness / 255;
 80041de:	7bfb      	ldrb	r3, [r7, #15]
 80041e0:	4a1f      	ldr	r2, [pc, #124]	@ (8004260 <WS2812_Write_Colors+0xb4>)
 80041e2:	7812      	ldrb	r2, [r2, #0]
 80041e4:	fb02 f303 	mul.w	r3, r2, r3
 80041e8:	4a1e      	ldr	r2, [pc, #120]	@ (8004264 <WS2812_Write_Colors+0xb8>)
 80041ea:	fb82 1203 	smull	r1, r2, r2, r3
 80041ee:	441a      	add	r2, r3
 80041f0:	11d2      	asrs	r2, r2, #7
 80041f2:	17db      	asrs	r3, r3, #31
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	73fb      	strb	r3, [r7, #15]
        green = (uint16_t)green * WS2812_Brightness / 255;
 80041f8:	7bbb      	ldrb	r3, [r7, #14]
 80041fa:	4a19      	ldr	r2, [pc, #100]	@ (8004260 <WS2812_Write_Colors+0xb4>)
 80041fc:	7812      	ldrb	r2, [r2, #0]
 80041fe:	fb02 f303 	mul.w	r3, r2, r3
 8004202:	4a18      	ldr	r2, [pc, #96]	@ (8004264 <WS2812_Write_Colors+0xb8>)
 8004204:	fb82 1203 	smull	r1, r2, r2, r3
 8004208:	441a      	add	r2, r3
 800420a:	11d2      	asrs	r2, r2, #7
 800420c:	17db      	asrs	r3, r3, #31
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	73bb      	strb	r3, [r7, #14]
        blue = (uint16_t)blue * WS2812_Brightness / 255;
 8004212:	7b7b      	ldrb	r3, [r7, #13]
 8004214:	4a12      	ldr	r2, [pc, #72]	@ (8004260 <WS2812_Write_Colors+0xb4>)
 8004216:	7812      	ldrb	r2, [r2, #0]
 8004218:	fb02 f303 	mul.w	r3, r2, r3
 800421c:	4a11      	ldr	r2, [pc, #68]	@ (8004264 <WS2812_Write_Colors+0xb8>)
 800421e:	fb82 1203 	smull	r1, r2, r2, r3
 8004222:	441a      	add	r2, r3
 8004224:	11d2      	asrs	r2, r2, #7
 8004226:	17db      	asrs	r3, r3, #31
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	737b      	strb	r3, [r7, #13]

        // 重新组合成 uint32_t 类型
        color_value = ((uint32_t)red << 16) | ((uint32_t)green << 8) | blue;
 800422c:	7bfb      	ldrb	r3, [r7, #15]
 800422e:	041a      	lsls	r2, r3, #16
 8004230:	7bbb      	ldrb	r3, [r7, #14]
 8004232:	021b      	lsls	r3, r3, #8
 8004234:	431a      	orrs	r2, r3
 8004236:	7b7b      	ldrb	r3, [r7, #13]
 8004238:	4313      	orrs	r3, r2
 800423a:	613b      	str	r3, [r7, #16]

        WS2812_Write_Data(color_value, i);
 800423c:	7dfb      	ldrb	r3, [r7, #23]
 800423e:	4619      	mov	r1, r3
 8004240:	6938      	ldr	r0, [r7, #16]
 8004242:	f7ff ff63 	bl	800410c <WS2812_Write_Data>
    for (uint8_t i = 0; i < count; i++) {
 8004246:	7dfb      	ldrb	r3, [r7, #23]
 8004248:	3301      	adds	r3, #1
 800424a:	75fb      	strb	r3, [r7, #23]
 800424c:	7dfa      	ldrb	r2, [r7, #23]
 800424e:	78fb      	ldrb	r3, [r7, #3]
 8004250:	429a      	cmp	r2, r3
 8004252:	d3b4      	bcc.n	80041be <WS2812_Write_Colors+0x12>
    }
    WS2812_Update();
 8004254:	f7ff ff88 	bl	8004168 <WS2812_Update>
}
 8004258:	bf00      	nop
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	20000048 	.word	0x20000048
 8004264:	80808081 	.word	0x80808081

08004268 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004268:	480d      	ldr	r0, [pc, #52]	@ (80042a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800426a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800426c:	f7ff ff3c 	bl	80040e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004270:	480c      	ldr	r0, [pc, #48]	@ (80042a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8004272:	490d      	ldr	r1, [pc, #52]	@ (80042a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004274:	4a0d      	ldr	r2, [pc, #52]	@ (80042ac <LoopForever+0xe>)
  movs r3, #0
 8004276:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004278:	e002      	b.n	8004280 <LoopCopyDataInit>

0800427a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800427a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800427c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800427e:	3304      	adds	r3, #4

08004280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004284:	d3f9      	bcc.n	800427a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004286:	4a0a      	ldr	r2, [pc, #40]	@ (80042b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004288:	4c0a      	ldr	r4, [pc, #40]	@ (80042b4 <LoopForever+0x16>)
  movs r3, #0
 800428a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800428c:	e001      	b.n	8004292 <LoopFillZerobss>

0800428e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800428e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004290:	3204      	adds	r2, #4

08004292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004294:	d3fb      	bcc.n	800428e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004296:	f00e fcbf 	bl	8012c18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800429a:	f7fd f91b 	bl	80014d4 <main>

0800429e <LoopForever>:

LoopForever:
    b LoopForever
 800429e:	e7fe      	b.n	800429e <LoopForever>
  ldr   r0, =_estack
 80042a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80042a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042a8:	20000394 	.word	0x20000394
  ldr r2, =_sidata
 80042ac:	08024308 	.word	0x08024308
  ldr r2, =_sbss
 80042b0:	20000394 	.word	0x20000394
  ldr r4, =_ebss
 80042b4:	20003eac 	.word	0x20003eac

080042b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80042b8:	e7fe      	b.n	80042b8 <ADC1_2_IRQHandler>

080042ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b082      	sub	sp, #8
 80042be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80042c0:	2300      	movs	r3, #0
 80042c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042c4:	2003      	movs	r0, #3
 80042c6:	f001 ffcd 	bl	8006264 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80042ca:	200f      	movs	r0, #15
 80042cc:	f000 f80e 	bl	80042ec <HAL_InitTick>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	71fb      	strb	r3, [r7, #7]
 80042da:	e001      	b.n	80042e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80042dc:	f7fe ff28 	bl	8003130 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80042e0:	79fb      	ldrb	r3, [r7, #7]

}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
	...

080042ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80042f4:	2300      	movs	r3, #0
 80042f6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80042f8:	4b16      	ldr	r3, [pc, #88]	@ (8004354 <HAL_InitTick+0x68>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d022      	beq.n	8004346 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004300:	4b15      	ldr	r3, [pc, #84]	@ (8004358 <HAL_InitTick+0x6c>)
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	4b13      	ldr	r3, [pc, #76]	@ (8004354 <HAL_InitTick+0x68>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800430c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004310:	fbb2 f3f3 	udiv	r3, r2, r3
 8004314:	4618      	mov	r0, r3
 8004316:	f001 ffd8 	bl	80062ca <HAL_SYSTICK_Config>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10f      	bne.n	8004340 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b0f      	cmp	r3, #15
 8004324:	d809      	bhi.n	800433a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004326:	2200      	movs	r2, #0
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	f04f 30ff 	mov.w	r0, #4294967295
 800432e:	f001 ffa4 	bl	800627a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004332:	4a0a      	ldr	r2, [pc, #40]	@ (800435c <HAL_InitTick+0x70>)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6013      	str	r3, [r2, #0]
 8004338:	e007      	b.n	800434a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	73fb      	strb	r3, [r7, #15]
 800433e:	e004      	b.n	800434a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	73fb      	strb	r3, [r7, #15]
 8004344:	e001      	b.n	800434a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800434a:	7bfb      	ldrb	r3, [r7, #15]
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	20000050 	.word	0x20000050
 8004358:	20000044 	.word	0x20000044
 800435c:	2000004c 	.word	0x2000004c

08004360 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004364:	4b05      	ldr	r3, [pc, #20]	@ (800437c <HAL_IncTick+0x1c>)
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	4b05      	ldr	r3, [pc, #20]	@ (8004380 <HAL_IncTick+0x20>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4413      	add	r3, r2
 800436e:	4a03      	ldr	r2, [pc, #12]	@ (800437c <HAL_IncTick+0x1c>)
 8004370:	6013      	str	r3, [r2, #0]
}
 8004372:	bf00      	nop
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	20002b8c 	.word	0x20002b8c
 8004380:	20000050 	.word	0x20000050

08004384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  return uwTick;
 8004388:	4b03      	ldr	r3, [pc, #12]	@ (8004398 <HAL_GetTick+0x14>)
 800438a:	681b      	ldr	r3, [r3, #0]
}
 800438c:	4618      	mov	r0, r3
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	20002b8c 	.word	0x20002b8c

0800439c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043a4:	f7ff ffee 	bl	8004384 <HAL_GetTick>
 80043a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b4:	d004      	beq.n	80043c0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80043b6:	4b09      	ldr	r3, [pc, #36]	@ (80043dc <HAL_Delay+0x40>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	4413      	add	r3, r2
 80043be:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80043c0:	bf00      	nop
 80043c2:	f7ff ffdf 	bl	8004384 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d8f7      	bhi.n	80043c2 <HAL_Delay+0x26>
  {
  }
}
 80043d2:	bf00      	nop
 80043d4:	bf00      	nop
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	20000050 	.word	0x20000050

080043e0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80043e8:	4b06      	ldr	r3, [pc, #24]	@ (8004404 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f023 0202 	bic.w	r2, r3, #2
 80043f0:	4904      	ldr	r1, [pc, #16]	@ (8004404 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	600b      	str	r3, [r1, #0]
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	40010030 	.word	0x40010030

08004408 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 800440c:	4b05      	ldr	r3, [pc, #20]	@ (8004424 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a04      	ldr	r2, [pc, #16]	@ (8004424 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8004412:	f023 0301 	bic.w	r3, r3, #1
 8004416:	6013      	str	r3, [r2, #0]
}
 8004418:	bf00      	nop
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	40010030 	.word	0x40010030

08004428 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	431a      	orrs	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	609a      	str	r2, [r3, #8]
}
 8004442:	bf00      	nop
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	609a      	str	r2, [r3, #8]
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004484:	4618      	mov	r0, r3
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
 800449c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	3360      	adds	r3, #96	@ 0x60
 80044a2:	461a      	mov	r2, r3
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	4b08      	ldr	r3, [pc, #32]	@ (80044d4 <LL_ADC_SetOffset+0x44>)
 80044b2:	4013      	ands	r3, r2
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80044ba:	683a      	ldr	r2, [r7, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	4313      	orrs	r3, r2
 80044c0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80044c8:	bf00      	nop
 80044ca:	371c      	adds	r7, #28
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	03fff000 	.word	0x03fff000

080044d8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	3360      	adds	r3, #96	@ 0x60
 80044e6:	461a      	mov	r2, r3
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004504:	b480      	push	{r7}
 8004506:	b087      	sub	sp, #28
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3360      	adds	r3, #96	@ 0x60
 8004514:	461a      	mov	r2, r3
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	431a      	orrs	r2, r3
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800452e:	bf00      	nop
 8004530:	371c      	adds	r7, #28
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800453a:	b480      	push	{r7}
 800453c:	b087      	sub	sp, #28
 800453e:	af00      	add	r7, sp, #0
 8004540:	60f8      	str	r0, [r7, #12]
 8004542:	60b9      	str	r1, [r7, #8]
 8004544:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	3360      	adds	r3, #96	@ 0x60
 800454a:	461a      	mov	r2, r3
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4413      	add	r3, r2
 8004552:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	431a      	orrs	r2, r3
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004564:	bf00      	nop
 8004566:	371c      	adds	r7, #28
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004570:	b480      	push	{r7}
 8004572:	b087      	sub	sp, #28
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	3360      	adds	r3, #96	@ 0x60
 8004580:	461a      	mov	r2, r3
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4413      	add	r3, r2
 8004588:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	431a      	orrs	r2, r3
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800459a:	bf00      	nop
 800459c:	371c      	adds	r7, #28
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80045a6:	b480      	push	{r7}
 80045a8:	b083      	sub	sp, #12
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
 80045ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	615a      	str	r2, [r3, #20]
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d101      	bne.n	80045e4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80045e0:	2301      	movs	r3, #1
 80045e2:	e000      	b.n	80045e6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b087      	sub	sp, #28
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	60f8      	str	r0, [r7, #12]
 80045fa:	60b9      	str	r1, [r7, #8]
 80045fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	3330      	adds	r3, #48	@ 0x30
 8004602:	461a      	mov	r2, r3
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	0a1b      	lsrs	r3, r3, #8
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	f003 030c 	and.w	r3, r3, #12
 800460e:	4413      	add	r3, r2
 8004610:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	f003 031f 	and.w	r3, r3, #31
 800461c:	211f      	movs	r1, #31
 800461e:	fa01 f303 	lsl.w	r3, r1, r3
 8004622:	43db      	mvns	r3, r3
 8004624:	401a      	ands	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	0e9b      	lsrs	r3, r3, #26
 800462a:	f003 011f 	and.w	r1, r3, #31
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	f003 031f 	and.w	r3, r3, #31
 8004634:	fa01 f303 	lsl.w	r3, r1, r3
 8004638:	431a      	orrs	r2, r3
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800463e:	bf00      	nop
 8004640:	371c      	adds	r7, #28
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800464a:	b480      	push	{r7}
 800464c:	b087      	sub	sp, #28
 800464e:	af00      	add	r7, sp, #0
 8004650:	60f8      	str	r0, [r7, #12]
 8004652:	60b9      	str	r1, [r7, #8]
 8004654:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	3314      	adds	r3, #20
 800465a:	461a      	mov	r2, r3
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	0e5b      	lsrs	r3, r3, #25
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	4413      	add	r3, r2
 8004668:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	0d1b      	lsrs	r3, r3, #20
 8004672:	f003 031f 	and.w	r3, r3, #31
 8004676:	2107      	movs	r1, #7
 8004678:	fa01 f303 	lsl.w	r3, r1, r3
 800467c:	43db      	mvns	r3, r3
 800467e:	401a      	ands	r2, r3
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	0d1b      	lsrs	r3, r3, #20
 8004684:	f003 031f 	and.w	r3, r3, #31
 8004688:	6879      	ldr	r1, [r7, #4]
 800468a:	fa01 f303 	lsl.w	r3, r1, r3
 800468e:	431a      	orrs	r2, r3
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004694:	bf00      	nop
 8004696:	371c      	adds	r7, #28
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046b8:	43db      	mvns	r3, r3
 80046ba:	401a      	ands	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f003 0318 	and.w	r3, r3, #24
 80046c2:	4908      	ldr	r1, [pc, #32]	@ (80046e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80046c4:	40d9      	lsrs	r1, r3
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	400b      	ands	r3, r1
 80046ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ce:	431a      	orrs	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80046d6:	bf00      	nop
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	0007ffff 	.word	0x0007ffff

080046e8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f003 031f 	and.w	r3, r3, #31
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004714:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6093      	str	r3, [r2, #8]
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004738:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800473c:	d101      	bne.n	8004742 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800473e:	2301      	movs	r3, #1
 8004740:	e000      	b.n	8004744 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004760:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004764:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004788:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800478c:	d101      	bne.n	8004792 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800478e:	2301      	movs	r3, #1
 8004790:	e000      	b.n	8004794 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80047b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80047b4:	f043 0201 	orr.w	r2, r3, #1
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d101      	bne.n	80047e0 <LL_ADC_IsEnabled+0x18>
 80047dc:	2301      	movs	r3, #1
 80047de:	e000      	b.n	80047e2 <LL_ADC_IsEnabled+0x1a>
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b083      	sub	sp, #12
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80047fe:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004802:	f043 0204 	orr.w	r2, r3, #4
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800480a:	bf00      	nop
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004816:	b480      	push	{r7}
 8004818:	b083      	sub	sp, #12
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 0304 	and.w	r3, r3, #4
 8004826:	2b04      	cmp	r3, #4
 8004828:	d101      	bne.n	800482e <LL_ADC_REG_IsConversionOngoing+0x18>
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	2b08      	cmp	r3, #8
 800484e:	d101      	bne.n	8004854 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004850:	2301      	movs	r3, #1
 8004852:	e000      	b.n	8004856 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
	...

08004864 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004864:	b590      	push	{r4, r7, lr}
 8004866:	b089      	sub	sp, #36	@ 0x24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800486c:	2300      	movs	r3, #0
 800486e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004870:	2300      	movs	r3, #0
 8004872:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e1a9      	b.n	8004bd2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004888:	2b00      	cmp	r3, #0
 800488a:	d109      	bne.n	80048a0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f7fe fc77 	bl	8003180 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7ff ff3f 	bl	8004728 <LL_ADC_IsDeepPowerDownEnabled>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d004      	beq.n	80048ba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7ff ff25 	bl	8004704 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff ff5a 	bl	8004778 <LL_ADC_IsInternalRegulatorEnabled>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d115      	bne.n	80048f6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7ff ff3e 	bl	8004750 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80048d4:	4b9c      	ldr	r3, [pc, #624]	@ (8004b48 <HAL_ADC_Init+0x2e4>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	099b      	lsrs	r3, r3, #6
 80048da:	4a9c      	ldr	r2, [pc, #624]	@ (8004b4c <HAL_ADC_Init+0x2e8>)
 80048dc:	fba2 2303 	umull	r2, r3, r2, r3
 80048e0:	099b      	lsrs	r3, r3, #6
 80048e2:	3301      	adds	r3, #1
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80048e8:	e002      	b.n	80048f0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	3b01      	subs	r3, #1
 80048ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1f9      	bne.n	80048ea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7ff ff3c 	bl	8004778 <LL_ADC_IsInternalRegulatorEnabled>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10d      	bne.n	8004922 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800490a:	f043 0210 	orr.w	r2, r3, #16
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004916:	f043 0201 	orr.w	r2, r3, #1
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4618      	mov	r0, r3
 8004928:	f7ff ff75 	bl	8004816 <LL_ADC_REG_IsConversionOngoing>
 800492c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004932:	f003 0310 	and.w	r3, r3, #16
 8004936:	2b00      	cmp	r3, #0
 8004938:	f040 8142 	bne.w	8004bc0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	2b00      	cmp	r3, #0
 8004940:	f040 813e 	bne.w	8004bc0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004948:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800494c:	f043 0202 	orr.w	r2, r3, #2
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4618      	mov	r0, r3
 800495a:	f7ff ff35 	bl	80047c8 <LL_ADC_IsEnabled>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d141      	bne.n	80049e8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800496c:	d004      	beq.n	8004978 <HAL_ADC_Init+0x114>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a77      	ldr	r2, [pc, #476]	@ (8004b50 <HAL_ADC_Init+0x2ec>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d10f      	bne.n	8004998 <HAL_ADC_Init+0x134>
 8004978:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800497c:	f7ff ff24 	bl	80047c8 <LL_ADC_IsEnabled>
 8004980:	4604      	mov	r4, r0
 8004982:	4873      	ldr	r0, [pc, #460]	@ (8004b50 <HAL_ADC_Init+0x2ec>)
 8004984:	f7ff ff20 	bl	80047c8 <LL_ADC_IsEnabled>
 8004988:	4603      	mov	r3, r0
 800498a:	4323      	orrs	r3, r4
 800498c:	2b00      	cmp	r3, #0
 800498e:	bf0c      	ite	eq
 8004990:	2301      	moveq	r3, #1
 8004992:	2300      	movne	r3, #0
 8004994:	b2db      	uxtb	r3, r3
 8004996:	e012      	b.n	80049be <HAL_ADC_Init+0x15a>
 8004998:	486e      	ldr	r0, [pc, #440]	@ (8004b54 <HAL_ADC_Init+0x2f0>)
 800499a:	f7ff ff15 	bl	80047c8 <LL_ADC_IsEnabled>
 800499e:	4604      	mov	r4, r0
 80049a0:	486d      	ldr	r0, [pc, #436]	@ (8004b58 <HAL_ADC_Init+0x2f4>)
 80049a2:	f7ff ff11 	bl	80047c8 <LL_ADC_IsEnabled>
 80049a6:	4603      	mov	r3, r0
 80049a8:	431c      	orrs	r4, r3
 80049aa:	486c      	ldr	r0, [pc, #432]	@ (8004b5c <HAL_ADC_Init+0x2f8>)
 80049ac:	f7ff ff0c 	bl	80047c8 <LL_ADC_IsEnabled>
 80049b0:	4603      	mov	r3, r0
 80049b2:	4323      	orrs	r3, r4
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	bf0c      	ite	eq
 80049b8:	2301      	moveq	r3, #1
 80049ba:	2300      	movne	r3, #0
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d012      	beq.n	80049e8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049ca:	d004      	beq.n	80049d6 <HAL_ADC_Init+0x172>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a5f      	ldr	r2, [pc, #380]	@ (8004b50 <HAL_ADC_Init+0x2ec>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d101      	bne.n	80049da <HAL_ADC_Init+0x176>
 80049d6:	4a62      	ldr	r2, [pc, #392]	@ (8004b60 <HAL_ADC_Init+0x2fc>)
 80049d8:	e000      	b.n	80049dc <HAL_ADC_Init+0x178>
 80049da:	4a62      	ldr	r2, [pc, #392]	@ (8004b64 <HAL_ADC_Init+0x300>)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	4619      	mov	r1, r3
 80049e2:	4610      	mov	r0, r2
 80049e4:	f7ff fd20 	bl	8004428 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	7f5b      	ldrb	r3, [r3, #29]
 80049ec:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80049f2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80049f8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80049fe:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004a06:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d106      	bne.n	8004a24 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	045b      	lsls	r3, r3, #17
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d009      	beq.n	8004a40 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a30:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a38:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68da      	ldr	r2, [r3, #12]
 8004a46:	4b48      	ldr	r3, [pc, #288]	@ (8004b68 <HAL_ADC_Init+0x304>)
 8004a48:	4013      	ands	r3, r2
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	6812      	ldr	r2, [r2, #0]
 8004a4e:	69b9      	ldr	r1, [r7, #24]
 8004a50:	430b      	orrs	r3, r1
 8004a52:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7ff fee4 	bl	800483c <LL_ADC_INJ_IsConversionOngoing>
 8004a74:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d17f      	bne.n	8004b7c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d17c      	bne.n	8004b7c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004a86:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004a8e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004a90:	4313      	orrs	r3, r2
 8004a92:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a9e:	f023 0302 	bic.w	r3, r3, #2
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	6812      	ldr	r2, [r2, #0]
 8004aa6:	69b9      	ldr	r1, [r7, #24]
 8004aa8:	430b      	orrs	r3, r1
 8004aaa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d017      	beq.n	8004ae4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	691a      	ldr	r2, [r3, #16]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004ac2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004acc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004ad0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6911      	ldr	r1, [r2, #16]
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6812      	ldr	r2, [r2, #0]
 8004adc:	430b      	orrs	r3, r1
 8004ade:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004ae2:	e013      	b.n	8004b0c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	691a      	ldr	r2, [r3, #16]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004af2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6812      	ldr	r2, [r2, #0]
 8004b00:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004b04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004b08:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d12a      	bne.n	8004b6c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004b20:	f023 0304 	bic.w	r3, r3, #4
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004b2c:	4311      	orrs	r1, r2
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004b32:	4311      	orrs	r1, r2
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f042 0201 	orr.w	r2, r2, #1
 8004b44:	611a      	str	r2, [r3, #16]
 8004b46:	e019      	b.n	8004b7c <HAL_ADC_Init+0x318>
 8004b48:	20000044 	.word	0x20000044
 8004b4c:	053e2d63 	.word	0x053e2d63
 8004b50:	50000100 	.word	0x50000100
 8004b54:	50000400 	.word	0x50000400
 8004b58:	50000500 	.word	0x50000500
 8004b5c:	50000600 	.word	0x50000600
 8004b60:	50000300 	.word	0x50000300
 8004b64:	50000700 	.word	0x50000700
 8004b68:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	691a      	ldr	r2, [r3, #16]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 0201 	bic.w	r2, r2, #1
 8004b7a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d10c      	bne.n	8004b9e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b8a:	f023 010f 	bic.w	r1, r3, #15
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	1e5a      	subs	r2, r3, #1
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004b9c:	e007      	b.n	8004bae <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 020f 	bic.w	r2, r2, #15
 8004bac:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bb2:	f023 0303 	bic.w	r3, r3, #3
 8004bb6:	f043 0201 	orr.w	r2, r3, #1
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004bbe:	e007      	b.n	8004bd0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bc4:	f043 0210 	orr.w	r2, r3, #16
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004bd0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3724      	adds	r7, #36	@ 0x24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd90      	pop	{r4, r7, pc}
 8004bda:	bf00      	nop

08004bdc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bf0:	d004      	beq.n	8004bfc <HAL_ADC_Start_DMA+0x20>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a5a      	ldr	r2, [pc, #360]	@ (8004d60 <HAL_ADC_Start_DMA+0x184>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d101      	bne.n	8004c00 <HAL_ADC_Start_DMA+0x24>
 8004bfc:	4b59      	ldr	r3, [pc, #356]	@ (8004d64 <HAL_ADC_Start_DMA+0x188>)
 8004bfe:	e000      	b.n	8004c02 <HAL_ADC_Start_DMA+0x26>
 8004c00:	4b59      	ldr	r3, [pc, #356]	@ (8004d68 <HAL_ADC_Start_DMA+0x18c>)
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7ff fd70 	bl	80046e8 <LL_ADC_GetMultimode>
 8004c08:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7ff fe01 	bl	8004816 <LL_ADC_REG_IsConversionOngoing>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f040 809b 	bne.w	8004d52 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d101      	bne.n	8004c2a <HAL_ADC_Start_DMA+0x4e>
 8004c26:	2302      	movs	r3, #2
 8004c28:	e096      	b.n	8004d58 <HAL_ADC_Start_DMA+0x17c>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a4d      	ldr	r2, [pc, #308]	@ (8004d6c <HAL_ADC_Start_DMA+0x190>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d008      	beq.n	8004c4e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d005      	beq.n	8004c4e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	2b05      	cmp	r3, #5
 8004c46:	d002      	beq.n	8004c4e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	2b09      	cmp	r3, #9
 8004c4c:	d17a      	bne.n	8004d44 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f000 fcf6 	bl	8005640 <ADC_Enable>
 8004c54:	4603      	mov	r3, r0
 8004c56:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004c58:	7dfb      	ldrb	r3, [r7, #23]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d16d      	bne.n	8004d3a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c62:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004c66:	f023 0301 	bic.w	r3, r3, #1
 8004c6a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a3a      	ldr	r2, [pc, #232]	@ (8004d60 <HAL_ADC_Start_DMA+0x184>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d009      	beq.n	8004c90 <HAL_ADC_Start_DMA+0xb4>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a3b      	ldr	r2, [pc, #236]	@ (8004d70 <HAL_ADC_Start_DMA+0x194>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d002      	beq.n	8004c8c <HAL_ADC_Start_DMA+0xb0>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	e003      	b.n	8004c94 <HAL_ADC_Start_DMA+0xb8>
 8004c8c:	4b39      	ldr	r3, [pc, #228]	@ (8004d74 <HAL_ADC_Start_DMA+0x198>)
 8004c8e:	e001      	b.n	8004c94 <HAL_ADC_Start_DMA+0xb8>
 8004c90:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	6812      	ldr	r2, [r2, #0]
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d002      	beq.n	8004ca2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d105      	bne.n	8004cae <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ca6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d006      	beq.n	8004cc8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cbe:	f023 0206 	bic.w	r2, r3, #6
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	661a      	str	r2, [r3, #96]	@ 0x60
 8004cc6:	e002      	b.n	8004cce <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd2:	4a29      	ldr	r2, [pc, #164]	@ (8004d78 <HAL_ADC_Start_DMA+0x19c>)
 8004cd4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cda:	4a28      	ldr	r2, [pc, #160]	@ (8004d7c <HAL_ADC_Start_DMA+0x1a0>)
 8004cdc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ce2:	4a27      	ldr	r2, [pc, #156]	@ (8004d80 <HAL_ADC_Start_DMA+0x1a4>)
 8004ce4:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	221c      	movs	r2, #28
 8004cec:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f042 0210 	orr.w	r2, r2, #16
 8004d04:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68da      	ldr	r2, [r3, #12]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f042 0201 	orr.w	r2, r2, #1
 8004d14:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	3340      	adds	r3, #64	@ 0x40
 8004d20:	4619      	mov	r1, r3
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f001 fdfb 	bl	8006920 <HAL_DMA_Start_IT>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7ff fd5b 	bl	80047ee <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004d38:	e00d      	b.n	8004d56 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8004d42:	e008      	b.n	8004d56 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004d50:	e001      	b.n	8004d56 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004d52:	2302      	movs	r3, #2
 8004d54:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3718      	adds	r7, #24
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	50000100 	.word	0x50000100
 8004d64:	50000300 	.word	0x50000300
 8004d68:	50000700 	.word	0x50000700
 8004d6c:	50000600 	.word	0x50000600
 8004d70:	50000500 	.word	0x50000500
 8004d74:	50000400 	.word	0x50000400
 8004d78:	0800576d 	.word	0x0800576d
 8004d7c:	08005845 	.word	0x08005845
 8004d80:	08005861 	.word	0x08005861

08004d84 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b0b6      	sub	sp, #216	@ 0xd8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d102      	bne.n	8004de4 <HAL_ADC_ConfigChannel+0x24>
 8004dde:	2302      	movs	r3, #2
 8004de0:	f000 bc13 	b.w	800560a <HAL_ADC_ConfigChannel+0x84a>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7ff fd10 	bl	8004816 <LL_ADC_REG_IsConversionOngoing>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f040 83f3 	bne.w	80055e4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6818      	ldr	r0, [r3, #0]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	6859      	ldr	r1, [r3, #4]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	f7ff fbf1 	bl	80045f2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7ff fcfe 	bl	8004816 <LL_ADC_REG_IsConversionOngoing>
 8004e1a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7ff fd0a 	bl	800483c <LL_ADC_INJ_IsConversionOngoing>
 8004e28:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004e2c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f040 81d9 	bne.w	80051e8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004e36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f040 81d4 	bne.w	80051e8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e48:	d10f      	bne.n	8004e6a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6818      	ldr	r0, [r3, #0]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2200      	movs	r2, #0
 8004e54:	4619      	mov	r1, r3
 8004e56:	f7ff fbf8 	bl	800464a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7ff fb9f 	bl	80045a6 <LL_ADC_SetSamplingTimeCommonConfig>
 8004e68:	e00e      	b.n	8004e88 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6818      	ldr	r0, [r3, #0]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	6819      	ldr	r1, [r3, #0]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	461a      	mov	r2, r3
 8004e78:	f7ff fbe7 	bl	800464a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2100      	movs	r1, #0
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7ff fb8f 	bl	80045a6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	695a      	ldr	r2, [r3, #20]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	08db      	lsrs	r3, r3, #3
 8004e94:	f003 0303 	and.w	r3, r3, #3
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	d022      	beq.n	8004ef0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6818      	ldr	r0, [r3, #0]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	6919      	ldr	r1, [r3, #16]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004eba:	f7ff fae9 	bl	8004490 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6818      	ldr	r0, [r3, #0]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	6919      	ldr	r1, [r3, #16]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	f7ff fb35 	bl	800453a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6818      	ldr	r0, [r3, #0]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d102      	bne.n	8004ee6 <HAL_ADC_ConfigChannel+0x126>
 8004ee0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ee4:	e000      	b.n	8004ee8 <HAL_ADC_ConfigChannel+0x128>
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	461a      	mov	r2, r3
 8004eea:	f7ff fb41 	bl	8004570 <LL_ADC_SetOffsetSaturation>
 8004eee:	e17b      	b.n	80051e8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7ff faee 	bl	80044d8 <LL_ADC_GetOffsetChannel>
 8004efc:	4603      	mov	r3, r0
 8004efe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10a      	bne.n	8004f1c <HAL_ADC_ConfigChannel+0x15c>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7ff fae3 	bl	80044d8 <LL_ADC_GetOffsetChannel>
 8004f12:	4603      	mov	r3, r0
 8004f14:	0e9b      	lsrs	r3, r3, #26
 8004f16:	f003 021f 	and.w	r2, r3, #31
 8004f1a:	e01e      	b.n	8004f5a <HAL_ADC_ConfigChannel+0x19a>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2100      	movs	r1, #0
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7ff fad8 	bl	80044d8 <LL_ADC_GetOffsetChannel>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004f32:	fa93 f3a3 	rbit	r3, r3
 8004f36:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004f3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004f3e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004f42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004f4a:	2320      	movs	r3, #32
 8004f4c:	e004      	b.n	8004f58 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004f4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004f52:	fab3 f383 	clz	r3, r3
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d105      	bne.n	8004f72 <HAL_ADC_ConfigChannel+0x1b2>
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	0e9b      	lsrs	r3, r3, #26
 8004f6c:	f003 031f 	and.w	r3, r3, #31
 8004f70:	e018      	b.n	8004fa4 <HAL_ADC_ConfigChannel+0x1e4>
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004f7e:	fa93 f3a3 	rbit	r3, r3
 8004f82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004f86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004f8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004f96:	2320      	movs	r3, #32
 8004f98:	e004      	b.n	8004fa4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004f9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004f9e:	fab3 f383 	clz	r3, r3
 8004fa2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d106      	bne.n	8004fb6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2200      	movs	r2, #0
 8004fae:	2100      	movs	r1, #0
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7ff faa7 	bl	8004504 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2101      	movs	r1, #1
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7ff fa8b 	bl	80044d8 <LL_ADC_GetOffsetChannel>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10a      	bne.n	8004fe2 <HAL_ADC_ConfigChannel+0x222>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7ff fa80 	bl	80044d8 <LL_ADC_GetOffsetChannel>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	0e9b      	lsrs	r3, r3, #26
 8004fdc:	f003 021f 	and.w	r2, r3, #31
 8004fe0:	e01e      	b.n	8005020 <HAL_ADC_ConfigChannel+0x260>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7ff fa75 	bl	80044d8 <LL_ADC_GetOffsetChannel>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004ff8:	fa93 f3a3 	rbit	r3, r3
 8004ffc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8005000:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005004:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8005008:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800500c:	2b00      	cmp	r3, #0
 800500e:	d101      	bne.n	8005014 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005010:	2320      	movs	r3, #32
 8005012:	e004      	b.n	800501e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005014:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005018:	fab3 f383 	clz	r3, r3
 800501c:	b2db      	uxtb	r3, r3
 800501e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005028:	2b00      	cmp	r3, #0
 800502a:	d105      	bne.n	8005038 <HAL_ADC_ConfigChannel+0x278>
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	0e9b      	lsrs	r3, r3, #26
 8005032:	f003 031f 	and.w	r3, r3, #31
 8005036:	e018      	b.n	800506a <HAL_ADC_ConfigChannel+0x2aa>
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005040:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005044:	fa93 f3a3 	rbit	r3, r3
 8005048:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800504c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005050:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005054:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800505c:	2320      	movs	r3, #32
 800505e:	e004      	b.n	800506a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005060:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005064:	fab3 f383 	clz	r3, r3
 8005068:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800506a:	429a      	cmp	r2, r3
 800506c:	d106      	bne.n	800507c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2200      	movs	r2, #0
 8005074:	2101      	movs	r1, #1
 8005076:	4618      	mov	r0, r3
 8005078:	f7ff fa44 	bl	8004504 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2102      	movs	r1, #2
 8005082:	4618      	mov	r0, r3
 8005084:	f7ff fa28 	bl	80044d8 <LL_ADC_GetOffsetChannel>
 8005088:	4603      	mov	r3, r0
 800508a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10a      	bne.n	80050a8 <HAL_ADC_ConfigChannel+0x2e8>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2102      	movs	r1, #2
 8005098:	4618      	mov	r0, r3
 800509a:	f7ff fa1d 	bl	80044d8 <LL_ADC_GetOffsetChannel>
 800509e:	4603      	mov	r3, r0
 80050a0:	0e9b      	lsrs	r3, r3, #26
 80050a2:	f003 021f 	and.w	r2, r3, #31
 80050a6:	e01e      	b.n	80050e6 <HAL_ADC_ConfigChannel+0x326>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2102      	movs	r1, #2
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7ff fa12 	bl	80044d8 <LL_ADC_GetOffsetChannel>
 80050b4:	4603      	mov	r3, r0
 80050b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050be:	fa93 f3a3 	rbit	r3, r3
 80050c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80050c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80050ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80050ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80050d6:	2320      	movs	r3, #32
 80050d8:	e004      	b.n	80050e4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80050da:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80050de:	fab3 f383 	clz	r3, r3
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d105      	bne.n	80050fe <HAL_ADC_ConfigChannel+0x33e>
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	0e9b      	lsrs	r3, r3, #26
 80050f8:	f003 031f 	and.w	r3, r3, #31
 80050fc:	e016      	b.n	800512c <HAL_ADC_ConfigChannel+0x36c>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005106:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800510a:	fa93 f3a3 	rbit	r3, r3
 800510e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8005110:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005112:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8005116:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800511e:	2320      	movs	r3, #32
 8005120:	e004      	b.n	800512c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005122:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005126:	fab3 f383 	clz	r3, r3
 800512a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800512c:	429a      	cmp	r2, r3
 800512e:	d106      	bne.n	800513e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2200      	movs	r2, #0
 8005136:	2102      	movs	r1, #2
 8005138:	4618      	mov	r0, r3
 800513a:	f7ff f9e3 	bl	8004504 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2103      	movs	r1, #3
 8005144:	4618      	mov	r0, r3
 8005146:	f7ff f9c7 	bl	80044d8 <LL_ADC_GetOffsetChannel>
 800514a:	4603      	mov	r3, r0
 800514c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10a      	bne.n	800516a <HAL_ADC_ConfigChannel+0x3aa>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2103      	movs	r1, #3
 800515a:	4618      	mov	r0, r3
 800515c:	f7ff f9bc 	bl	80044d8 <LL_ADC_GetOffsetChannel>
 8005160:	4603      	mov	r3, r0
 8005162:	0e9b      	lsrs	r3, r3, #26
 8005164:	f003 021f 	and.w	r2, r3, #31
 8005168:	e017      	b.n	800519a <HAL_ADC_ConfigChannel+0x3da>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2103      	movs	r1, #3
 8005170:	4618      	mov	r0, r3
 8005172:	f7ff f9b1 	bl	80044d8 <LL_ADC_GetOffsetChannel>
 8005176:	4603      	mov	r3, r0
 8005178:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800517a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800517c:	fa93 f3a3 	rbit	r3, r3
 8005180:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8005182:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005184:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005186:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800518c:	2320      	movs	r3, #32
 800518e:	e003      	b.n	8005198 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8005190:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005192:	fab3 f383 	clz	r3, r3
 8005196:	b2db      	uxtb	r3, r3
 8005198:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d105      	bne.n	80051b2 <HAL_ADC_ConfigChannel+0x3f2>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	0e9b      	lsrs	r3, r3, #26
 80051ac:	f003 031f 	and.w	r3, r3, #31
 80051b0:	e011      	b.n	80051d6 <HAL_ADC_ConfigChannel+0x416>
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051ba:	fa93 f3a3 	rbit	r3, r3
 80051be:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80051c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80051c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80051ca:	2320      	movs	r3, #32
 80051cc:	e003      	b.n	80051d6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80051ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051d0:	fab3 f383 	clz	r3, r3
 80051d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d106      	bne.n	80051e8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2200      	movs	r2, #0
 80051e0:	2103      	movs	r1, #3
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7ff f98e 	bl	8004504 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7ff faeb 	bl	80047c8 <LL_ADC_IsEnabled>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f040 813d 	bne.w	8005474 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6818      	ldr	r0, [r3, #0]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	6819      	ldr	r1, [r3, #0]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	461a      	mov	r2, r3
 8005208:	f7ff fa4a 	bl	80046a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	4aa2      	ldr	r2, [pc, #648]	@ (800549c <HAL_ADC_ConfigChannel+0x6dc>)
 8005212:	4293      	cmp	r3, r2
 8005214:	f040 812e 	bne.w	8005474 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10b      	bne.n	8005240 <HAL_ADC_ConfigChannel+0x480>
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	0e9b      	lsrs	r3, r3, #26
 800522e:	3301      	adds	r3, #1
 8005230:	f003 031f 	and.w	r3, r3, #31
 8005234:	2b09      	cmp	r3, #9
 8005236:	bf94      	ite	ls
 8005238:	2301      	movls	r3, #1
 800523a:	2300      	movhi	r3, #0
 800523c:	b2db      	uxtb	r3, r3
 800523e:	e019      	b.n	8005274 <HAL_ADC_ConfigChannel+0x4b4>
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005246:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005248:	fa93 f3a3 	rbit	r3, r3
 800524c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800524e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005250:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005252:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005258:	2320      	movs	r3, #32
 800525a:	e003      	b.n	8005264 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800525c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800525e:	fab3 f383 	clz	r3, r3
 8005262:	b2db      	uxtb	r3, r3
 8005264:	3301      	adds	r3, #1
 8005266:	f003 031f 	and.w	r3, r3, #31
 800526a:	2b09      	cmp	r3, #9
 800526c:	bf94      	ite	ls
 800526e:	2301      	movls	r3, #1
 8005270:	2300      	movhi	r3, #0
 8005272:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005274:	2b00      	cmp	r3, #0
 8005276:	d079      	beq.n	800536c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005280:	2b00      	cmp	r3, #0
 8005282:	d107      	bne.n	8005294 <HAL_ADC_ConfigChannel+0x4d4>
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	0e9b      	lsrs	r3, r3, #26
 800528a:	3301      	adds	r3, #1
 800528c:	069b      	lsls	r3, r3, #26
 800528e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005292:	e015      	b.n	80052c0 <HAL_ADC_ConfigChannel+0x500>
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800529c:	fa93 f3a3 	rbit	r3, r3
 80052a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80052a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052a4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80052a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80052ac:	2320      	movs	r3, #32
 80052ae:	e003      	b.n	80052b8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80052b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052b2:	fab3 f383 	clz	r3, r3
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	3301      	adds	r3, #1
 80052ba:	069b      	lsls	r3, r3, #26
 80052bc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d109      	bne.n	80052e0 <HAL_ADC_ConfigChannel+0x520>
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	0e9b      	lsrs	r3, r3, #26
 80052d2:	3301      	adds	r3, #1
 80052d4:	f003 031f 	and.w	r3, r3, #31
 80052d8:	2101      	movs	r1, #1
 80052da:	fa01 f303 	lsl.w	r3, r1, r3
 80052de:	e017      	b.n	8005310 <HAL_ADC_ConfigChannel+0x550>
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052e8:	fa93 f3a3 	rbit	r3, r3
 80052ec:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80052ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80052f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d101      	bne.n	80052fc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80052f8:	2320      	movs	r3, #32
 80052fa:	e003      	b.n	8005304 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80052fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052fe:	fab3 f383 	clz	r3, r3
 8005302:	b2db      	uxtb	r3, r3
 8005304:	3301      	adds	r3, #1
 8005306:	f003 031f 	and.w	r3, r3, #31
 800530a:	2101      	movs	r1, #1
 800530c:	fa01 f303 	lsl.w	r3, r1, r3
 8005310:	ea42 0103 	orr.w	r1, r2, r3
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10a      	bne.n	8005336 <HAL_ADC_ConfigChannel+0x576>
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	0e9b      	lsrs	r3, r3, #26
 8005326:	3301      	adds	r3, #1
 8005328:	f003 021f 	and.w	r2, r3, #31
 800532c:	4613      	mov	r3, r2
 800532e:	005b      	lsls	r3, r3, #1
 8005330:	4413      	add	r3, r2
 8005332:	051b      	lsls	r3, r3, #20
 8005334:	e018      	b.n	8005368 <HAL_ADC_ConfigChannel+0x5a8>
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800533c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800533e:	fa93 f3a3 	rbit	r3, r3
 8005342:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005346:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005348:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800534e:	2320      	movs	r3, #32
 8005350:	e003      	b.n	800535a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005354:	fab3 f383 	clz	r3, r3
 8005358:	b2db      	uxtb	r3, r3
 800535a:	3301      	adds	r3, #1
 800535c:	f003 021f 	and.w	r2, r3, #31
 8005360:	4613      	mov	r3, r2
 8005362:	005b      	lsls	r3, r3, #1
 8005364:	4413      	add	r3, r2
 8005366:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005368:	430b      	orrs	r3, r1
 800536a:	e07e      	b.n	800546a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005374:	2b00      	cmp	r3, #0
 8005376:	d107      	bne.n	8005388 <HAL_ADC_ConfigChannel+0x5c8>
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	0e9b      	lsrs	r3, r3, #26
 800537e:	3301      	adds	r3, #1
 8005380:	069b      	lsls	r3, r3, #26
 8005382:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005386:	e015      	b.n	80053b4 <HAL_ADC_ConfigChannel+0x5f4>
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800538e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005390:	fa93 f3a3 	rbit	r3, r3
 8005394:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005398:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800539a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80053a0:	2320      	movs	r3, #32
 80053a2:	e003      	b.n	80053ac <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80053a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a6:	fab3 f383 	clz	r3, r3
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	3301      	adds	r3, #1
 80053ae:	069b      	lsls	r3, r3, #26
 80053b0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d109      	bne.n	80053d4 <HAL_ADC_ConfigChannel+0x614>
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	0e9b      	lsrs	r3, r3, #26
 80053c6:	3301      	adds	r3, #1
 80053c8:	f003 031f 	and.w	r3, r3, #31
 80053cc:	2101      	movs	r1, #1
 80053ce:	fa01 f303 	lsl.w	r3, r1, r3
 80053d2:	e017      	b.n	8005404 <HAL_ADC_ConfigChannel+0x644>
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	fa93 f3a3 	rbit	r3, r3
 80053e0:	61fb      	str	r3, [r7, #28]
  return result;
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80053e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80053ec:	2320      	movs	r3, #32
 80053ee:	e003      	b.n	80053f8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80053f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f2:	fab3 f383 	clz	r3, r3
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	3301      	adds	r3, #1
 80053fa:	f003 031f 	and.w	r3, r3, #31
 80053fe:	2101      	movs	r1, #1
 8005400:	fa01 f303 	lsl.w	r3, r1, r3
 8005404:	ea42 0103 	orr.w	r1, r2, r3
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10d      	bne.n	8005430 <HAL_ADC_ConfigChannel+0x670>
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	0e9b      	lsrs	r3, r3, #26
 800541a:	3301      	adds	r3, #1
 800541c:	f003 021f 	and.w	r2, r3, #31
 8005420:	4613      	mov	r3, r2
 8005422:	005b      	lsls	r3, r3, #1
 8005424:	4413      	add	r3, r2
 8005426:	3b1e      	subs	r3, #30
 8005428:	051b      	lsls	r3, r3, #20
 800542a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800542e:	e01b      	b.n	8005468 <HAL_ADC_ConfigChannel+0x6a8>
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	fa93 f3a3 	rbit	r3, r3
 800543c:	613b      	str	r3, [r7, #16]
  return result;
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d101      	bne.n	800544c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005448:	2320      	movs	r3, #32
 800544a:	e003      	b.n	8005454 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	fab3 f383 	clz	r3, r3
 8005452:	b2db      	uxtb	r3, r3
 8005454:	3301      	adds	r3, #1
 8005456:	f003 021f 	and.w	r2, r3, #31
 800545a:	4613      	mov	r3, r2
 800545c:	005b      	lsls	r3, r3, #1
 800545e:	4413      	add	r3, r2
 8005460:	3b1e      	subs	r3, #30
 8005462:	051b      	lsls	r3, r3, #20
 8005464:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005468:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800546a:	683a      	ldr	r2, [r7, #0]
 800546c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800546e:	4619      	mov	r1, r3
 8005470:	f7ff f8eb 	bl	800464a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	4b09      	ldr	r3, [pc, #36]	@ (80054a0 <HAL_ADC_ConfigChannel+0x6e0>)
 800547a:	4013      	ands	r3, r2
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 80be 	beq.w	80055fe <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800548a:	d004      	beq.n	8005496 <HAL_ADC_ConfigChannel+0x6d6>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a04      	ldr	r2, [pc, #16]	@ (80054a4 <HAL_ADC_ConfigChannel+0x6e4>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d10a      	bne.n	80054ac <HAL_ADC_ConfigChannel+0x6ec>
 8005496:	4b04      	ldr	r3, [pc, #16]	@ (80054a8 <HAL_ADC_ConfigChannel+0x6e8>)
 8005498:	e009      	b.n	80054ae <HAL_ADC_ConfigChannel+0x6ee>
 800549a:	bf00      	nop
 800549c:	407f0000 	.word	0x407f0000
 80054a0:	80080000 	.word	0x80080000
 80054a4:	50000100 	.word	0x50000100
 80054a8:	50000300 	.word	0x50000300
 80054ac:	4b59      	ldr	r3, [pc, #356]	@ (8005614 <HAL_ADC_ConfigChannel+0x854>)
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7fe ffe0 	bl	8004474 <LL_ADC_GetCommonPathInternalCh>
 80054b4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a56      	ldr	r2, [pc, #344]	@ (8005618 <HAL_ADC_ConfigChannel+0x858>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d004      	beq.n	80054cc <HAL_ADC_ConfigChannel+0x70c>
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a55      	ldr	r2, [pc, #340]	@ (800561c <HAL_ADC_ConfigChannel+0x85c>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d13a      	bne.n	8005542 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80054cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80054d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d134      	bne.n	8005542 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80054e0:	d005      	beq.n	80054ee <HAL_ADC_ConfigChannel+0x72e>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a4e      	ldr	r2, [pc, #312]	@ (8005620 <HAL_ADC_ConfigChannel+0x860>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	f040 8085 	bne.w	80055f8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80054f6:	d004      	beq.n	8005502 <HAL_ADC_ConfigChannel+0x742>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a49      	ldr	r2, [pc, #292]	@ (8005624 <HAL_ADC_ConfigChannel+0x864>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d101      	bne.n	8005506 <HAL_ADC_ConfigChannel+0x746>
 8005502:	4a49      	ldr	r2, [pc, #292]	@ (8005628 <HAL_ADC_ConfigChannel+0x868>)
 8005504:	e000      	b.n	8005508 <HAL_ADC_ConfigChannel+0x748>
 8005506:	4a43      	ldr	r2, [pc, #268]	@ (8005614 <HAL_ADC_ConfigChannel+0x854>)
 8005508:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800550c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005510:	4619      	mov	r1, r3
 8005512:	4610      	mov	r0, r2
 8005514:	f7fe ff9b 	bl	800444e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005518:	4b44      	ldr	r3, [pc, #272]	@ (800562c <HAL_ADC_ConfigChannel+0x86c>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	099b      	lsrs	r3, r3, #6
 800551e:	4a44      	ldr	r2, [pc, #272]	@ (8005630 <HAL_ADC_ConfigChannel+0x870>)
 8005520:	fba2 2303 	umull	r2, r3, r2, r3
 8005524:	099b      	lsrs	r3, r3, #6
 8005526:	1c5a      	adds	r2, r3, #1
 8005528:	4613      	mov	r3, r2
 800552a:	005b      	lsls	r3, r3, #1
 800552c:	4413      	add	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005532:	e002      	b.n	800553a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	3b01      	subs	r3, #1
 8005538:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1f9      	bne.n	8005534 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005540:	e05a      	b.n	80055f8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a3b      	ldr	r2, [pc, #236]	@ (8005634 <HAL_ADC_ConfigChannel+0x874>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d125      	bne.n	8005598 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800554c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005550:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d11f      	bne.n	8005598 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a31      	ldr	r2, [pc, #196]	@ (8005624 <HAL_ADC_ConfigChannel+0x864>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d104      	bne.n	800556c <HAL_ADC_ConfigChannel+0x7ac>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a34      	ldr	r2, [pc, #208]	@ (8005638 <HAL_ADC_ConfigChannel+0x878>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d047      	beq.n	80055fc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005574:	d004      	beq.n	8005580 <HAL_ADC_ConfigChannel+0x7c0>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a2a      	ldr	r2, [pc, #168]	@ (8005624 <HAL_ADC_ConfigChannel+0x864>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d101      	bne.n	8005584 <HAL_ADC_ConfigChannel+0x7c4>
 8005580:	4a29      	ldr	r2, [pc, #164]	@ (8005628 <HAL_ADC_ConfigChannel+0x868>)
 8005582:	e000      	b.n	8005586 <HAL_ADC_ConfigChannel+0x7c6>
 8005584:	4a23      	ldr	r2, [pc, #140]	@ (8005614 <HAL_ADC_ConfigChannel+0x854>)
 8005586:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800558a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800558e:	4619      	mov	r1, r3
 8005590:	4610      	mov	r0, r2
 8005592:	f7fe ff5c 	bl	800444e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005596:	e031      	b.n	80055fc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a27      	ldr	r2, [pc, #156]	@ (800563c <HAL_ADC_ConfigChannel+0x87c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d12d      	bne.n	80055fe <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80055a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80055a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d127      	bne.n	80055fe <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a1c      	ldr	r2, [pc, #112]	@ (8005624 <HAL_ADC_ConfigChannel+0x864>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d022      	beq.n	80055fe <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055c0:	d004      	beq.n	80055cc <HAL_ADC_ConfigChannel+0x80c>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a17      	ldr	r2, [pc, #92]	@ (8005624 <HAL_ADC_ConfigChannel+0x864>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d101      	bne.n	80055d0 <HAL_ADC_ConfigChannel+0x810>
 80055cc:	4a16      	ldr	r2, [pc, #88]	@ (8005628 <HAL_ADC_ConfigChannel+0x868>)
 80055ce:	e000      	b.n	80055d2 <HAL_ADC_ConfigChannel+0x812>
 80055d0:	4a10      	ldr	r2, [pc, #64]	@ (8005614 <HAL_ADC_ConfigChannel+0x854>)
 80055d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80055d6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80055da:	4619      	mov	r1, r3
 80055dc:	4610      	mov	r0, r2
 80055de:	f7fe ff36 	bl	800444e <LL_ADC_SetCommonPathInternalCh>
 80055e2:	e00c      	b.n	80055fe <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055e8:	f043 0220 	orr.w	r2, r3, #32
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80055f6:	e002      	b.n	80055fe <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80055f8:	bf00      	nop
 80055fa:	e000      	b.n	80055fe <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80055fc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005606:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800560a:	4618      	mov	r0, r3
 800560c:	37d8      	adds	r7, #216	@ 0xd8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	50000700 	.word	0x50000700
 8005618:	c3210000 	.word	0xc3210000
 800561c:	90c00010 	.word	0x90c00010
 8005620:	50000600 	.word	0x50000600
 8005624:	50000100 	.word	0x50000100
 8005628:	50000300 	.word	0x50000300
 800562c:	20000044 	.word	0x20000044
 8005630:	053e2d63 	.word	0x053e2d63
 8005634:	c7520000 	.word	0xc7520000
 8005638:	50000500 	.word	0x50000500
 800563c:	cb840000 	.word	0xcb840000

08005640 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005648:	2300      	movs	r3, #0
 800564a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4618      	mov	r0, r3
 8005652:	f7ff f8b9 	bl	80047c8 <LL_ADC_IsEnabled>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d176      	bne.n	800574a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689a      	ldr	r2, [r3, #8]
 8005662:	4b3c      	ldr	r3, [pc, #240]	@ (8005754 <ADC_Enable+0x114>)
 8005664:	4013      	ands	r3, r2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00d      	beq.n	8005686 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800566e:	f043 0210 	orr.w	r2, r3, #16
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800567a:	f043 0201 	orr.w	r2, r3, #1
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e062      	b.n	800574c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4618      	mov	r0, r3
 800568c:	f7ff f888 	bl	80047a0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005698:	d004      	beq.n	80056a4 <ADC_Enable+0x64>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a2e      	ldr	r2, [pc, #184]	@ (8005758 <ADC_Enable+0x118>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d101      	bne.n	80056a8 <ADC_Enable+0x68>
 80056a4:	4b2d      	ldr	r3, [pc, #180]	@ (800575c <ADC_Enable+0x11c>)
 80056a6:	e000      	b.n	80056aa <ADC_Enable+0x6a>
 80056a8:	4b2d      	ldr	r3, [pc, #180]	@ (8005760 <ADC_Enable+0x120>)
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7fe fee2 	bl	8004474 <LL_ADC_GetCommonPathInternalCh>
 80056b0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80056b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d013      	beq.n	80056e2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80056ba:	4b2a      	ldr	r3, [pc, #168]	@ (8005764 <ADC_Enable+0x124>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	099b      	lsrs	r3, r3, #6
 80056c0:	4a29      	ldr	r2, [pc, #164]	@ (8005768 <ADC_Enable+0x128>)
 80056c2:	fba2 2303 	umull	r2, r3, r2, r3
 80056c6:	099b      	lsrs	r3, r3, #6
 80056c8:	1c5a      	adds	r2, r3, #1
 80056ca:	4613      	mov	r3, r2
 80056cc:	005b      	lsls	r3, r3, #1
 80056ce:	4413      	add	r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80056d4:	e002      	b.n	80056dc <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	3b01      	subs	r3, #1
 80056da:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1f9      	bne.n	80056d6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80056e2:	f7fe fe4f 	bl	8004384 <HAL_GetTick>
 80056e6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80056e8:	e028      	b.n	800573c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7ff f86a 	bl	80047c8 <LL_ADC_IsEnabled>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d104      	bne.n	8005704 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4618      	mov	r0, r3
 8005700:	f7ff f84e 	bl	80047a0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005704:	f7fe fe3e 	bl	8004384 <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	2b02      	cmp	r3, #2
 8005710:	d914      	bls.n	800573c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	2b01      	cmp	r3, #1
 800571e:	d00d      	beq.n	800573c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005724:	f043 0210 	orr.w	r2, r3, #16
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005730:	f043 0201 	orr.w	r2, r3, #1
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e007      	b.n	800574c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b01      	cmp	r3, #1
 8005748:	d1cf      	bne.n	80056ea <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	8000003f 	.word	0x8000003f
 8005758:	50000100 	.word	0x50000100
 800575c:	50000300 	.word	0x50000300
 8005760:	50000700 	.word	0x50000700
 8005764:	20000044 	.word	0x20000044
 8005768:	053e2d63 	.word	0x053e2d63

0800576c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005778:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800577e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005782:	2b00      	cmp	r3, #0
 8005784:	d14b      	bne.n	800581e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800578a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0308 	and.w	r3, r3, #8
 800579c:	2b00      	cmp	r3, #0
 800579e:	d021      	beq.n	80057e4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7fe ff11 	bl	80045cc <LL_ADC_REG_IsTriggerSourceSWStart>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d032      	beq.n	8005816 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d12b      	bne.n	8005816 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057c2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d11f      	bne.n	8005816 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057da:	f043 0201 	orr.w	r2, r3, #1
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80057e2:	e018      	b.n	8005816 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d111      	bne.n	8005816 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057f6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005802:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d105      	bne.n	8005816 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800580e:	f043 0201 	orr.w	r2, r3, #1
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f7ff fab4 	bl	8004d84 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800581c:	e00e      	b.n	800583c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005822:	f003 0310 	and.w	r3, r3, #16
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f7ff fabe 	bl	8004dac <HAL_ADC_ErrorCallback>
}
 8005830:	e004      	b.n	800583c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	4798      	blx	r3
}
 800583c:	bf00      	nop
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005850:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f7ff faa0 	bl	8004d98 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005858:	bf00      	nop
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800586c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005872:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800587e:	f043 0204 	orr.w	r2, r3, #4
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f7ff fa90 	bl	8004dac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800588c:	bf00      	nop
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <LL_ADC_IsEnabled>:
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d101      	bne.n	80058ac <LL_ADC_IsEnabled+0x18>
 80058a8:	2301      	movs	r3, #1
 80058aa:	e000      	b.n	80058ae <LL_ADC_IsEnabled+0x1a>
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <LL_ADC_REG_IsConversionOngoing>:
{
 80058ba:	b480      	push	{r7}
 80058bc:	b083      	sub	sp, #12
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f003 0304 	and.w	r3, r3, #4
 80058ca:	2b04      	cmp	r3, #4
 80058cc:	d101      	bne.n	80058d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80058ce:	2301      	movs	r3, #1
 80058d0:	e000      	b.n	80058d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80058e0:	b590      	push	{r4, r7, lr}
 80058e2:	b0a1      	sub	sp, #132	@ 0x84
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058ea:	2300      	movs	r3, #0
 80058ec:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d101      	bne.n	80058fe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80058fa:	2302      	movs	r3, #2
 80058fc:	e0e7      	b.n	8005ace <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005906:	2300      	movs	r3, #0
 8005908:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800590a:	2300      	movs	r3, #0
 800590c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005916:	d102      	bne.n	800591e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005918:	4b6f      	ldr	r3, [pc, #444]	@ (8005ad8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800591a:	60bb      	str	r3, [r7, #8]
 800591c:	e009      	b.n	8005932 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a6e      	ldr	r2, [pc, #440]	@ (8005adc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d102      	bne.n	800592e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005928:	4b6d      	ldr	r3, [pc, #436]	@ (8005ae0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800592a:	60bb      	str	r3, [r7, #8]
 800592c:	e001      	b.n	8005932 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800592e:	2300      	movs	r3, #0
 8005930:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10b      	bne.n	8005950 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800593c:	f043 0220 	orr.w	r2, r3, #32
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e0be      	b.n	8005ace <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	4618      	mov	r0, r3
 8005954:	f7ff ffb1 	bl	80058ba <LL_ADC_REG_IsConversionOngoing>
 8005958:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4618      	mov	r0, r3
 8005960:	f7ff ffab 	bl	80058ba <LL_ADC_REG_IsConversionOngoing>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	f040 80a0 	bne.w	8005aac <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800596c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800596e:	2b00      	cmp	r3, #0
 8005970:	f040 809c 	bne.w	8005aac <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800597c:	d004      	beq.n	8005988 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a55      	ldr	r2, [pc, #340]	@ (8005ad8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d101      	bne.n	800598c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005988:	4b56      	ldr	r3, [pc, #344]	@ (8005ae4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800598a:	e000      	b.n	800598e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800598c:	4b56      	ldr	r3, [pc, #344]	@ (8005ae8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800598e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d04b      	beq.n	8005a30 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005998:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	6859      	ldr	r1, [r3, #4]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80059aa:	035b      	lsls	r3, r3, #13
 80059ac:	430b      	orrs	r3, r1
 80059ae:	431a      	orrs	r2, r3
 80059b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059b2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059bc:	d004      	beq.n	80059c8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a45      	ldr	r2, [pc, #276]	@ (8005ad8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d10f      	bne.n	80059e8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80059c8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80059cc:	f7ff ff62 	bl	8005894 <LL_ADC_IsEnabled>
 80059d0:	4604      	mov	r4, r0
 80059d2:	4841      	ldr	r0, [pc, #260]	@ (8005ad8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80059d4:	f7ff ff5e 	bl	8005894 <LL_ADC_IsEnabled>
 80059d8:	4603      	mov	r3, r0
 80059da:	4323      	orrs	r3, r4
 80059dc:	2b00      	cmp	r3, #0
 80059de:	bf0c      	ite	eq
 80059e0:	2301      	moveq	r3, #1
 80059e2:	2300      	movne	r3, #0
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	e012      	b.n	8005a0e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80059e8:	483c      	ldr	r0, [pc, #240]	@ (8005adc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80059ea:	f7ff ff53 	bl	8005894 <LL_ADC_IsEnabled>
 80059ee:	4604      	mov	r4, r0
 80059f0:	483b      	ldr	r0, [pc, #236]	@ (8005ae0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80059f2:	f7ff ff4f 	bl	8005894 <LL_ADC_IsEnabled>
 80059f6:	4603      	mov	r3, r0
 80059f8:	431c      	orrs	r4, r3
 80059fa:	483c      	ldr	r0, [pc, #240]	@ (8005aec <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80059fc:	f7ff ff4a 	bl	8005894 <LL_ADC_IsEnabled>
 8005a00:	4603      	mov	r3, r0
 8005a02:	4323      	orrs	r3, r4
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	bf0c      	ite	eq
 8005a08:	2301      	moveq	r3, #1
 8005a0a:	2300      	movne	r3, #0
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d056      	beq.n	8005ac0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005a12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005a1a:	f023 030f 	bic.w	r3, r3, #15
 8005a1e:	683a      	ldr	r2, [r7, #0]
 8005a20:	6811      	ldr	r1, [r2, #0]
 8005a22:	683a      	ldr	r2, [r7, #0]
 8005a24:	6892      	ldr	r2, [r2, #8]
 8005a26:	430a      	orrs	r2, r1
 8005a28:	431a      	orrs	r2, r3
 8005a2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a2c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005a2e:	e047      	b.n	8005ac0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005a30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005a38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a3a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a44:	d004      	beq.n	8005a50 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a23      	ldr	r2, [pc, #140]	@ (8005ad8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d10f      	bne.n	8005a70 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005a50:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005a54:	f7ff ff1e 	bl	8005894 <LL_ADC_IsEnabled>
 8005a58:	4604      	mov	r4, r0
 8005a5a:	481f      	ldr	r0, [pc, #124]	@ (8005ad8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005a5c:	f7ff ff1a 	bl	8005894 <LL_ADC_IsEnabled>
 8005a60:	4603      	mov	r3, r0
 8005a62:	4323      	orrs	r3, r4
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	bf0c      	ite	eq
 8005a68:	2301      	moveq	r3, #1
 8005a6a:	2300      	movne	r3, #0
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	e012      	b.n	8005a96 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005a70:	481a      	ldr	r0, [pc, #104]	@ (8005adc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005a72:	f7ff ff0f 	bl	8005894 <LL_ADC_IsEnabled>
 8005a76:	4604      	mov	r4, r0
 8005a78:	4819      	ldr	r0, [pc, #100]	@ (8005ae0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005a7a:	f7ff ff0b 	bl	8005894 <LL_ADC_IsEnabled>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	431c      	orrs	r4, r3
 8005a82:	481a      	ldr	r0, [pc, #104]	@ (8005aec <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005a84:	f7ff ff06 	bl	8005894 <LL_ADC_IsEnabled>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	4323      	orrs	r3, r4
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	bf0c      	ite	eq
 8005a90:	2301      	moveq	r3, #1
 8005a92:	2300      	movne	r3, #0
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d012      	beq.n	8005ac0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005a9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005aa2:	f023 030f 	bic.w	r3, r3, #15
 8005aa6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005aa8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005aaa:	e009      	b.n	8005ac0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ab0:	f043 0220 	orr.w	r2, r3, #32
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005abe:	e000      	b.n	8005ac2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005ac0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005aca:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3784      	adds	r7, #132	@ 0x84
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd90      	pop	{r4, r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	50000100 	.word	0x50000100
 8005adc:	50000400 	.word	0x50000400
 8005ae0:	50000500 	.word	0x50000500
 8005ae4:	50000300 	.word	0x50000300
 8005ae8:	50000700 	.word	0x50000700
 8005aec:	50000600 	.word	0x50000600

08005af0 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005af8:	4b05      	ldr	r3, [pc, #20]	@ (8005b10 <LL_EXTI_EnableIT_0_31+0x20>)
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	4904      	ldr	r1, [pc, #16]	@ (8005b10 <LL_EXTI_EnableIT_0_31+0x20>)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	600b      	str	r3, [r1, #0]
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr
 8005b10:	40010400 	.word	0x40010400

08005b14 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005b1c:	4b05      	ldr	r3, [pc, #20]	@ (8005b34 <LL_EXTI_EnableIT_32_63+0x20>)
 8005b1e:	6a1a      	ldr	r2, [r3, #32]
 8005b20:	4904      	ldr	r1, [pc, #16]	@ (8005b34 <LL_EXTI_EnableIT_32_63+0x20>)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	620b      	str	r3, [r1, #32]
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	40010400 	.word	0x40010400

08005b38 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8005b40:	4b06      	ldr	r3, [pc, #24]	@ (8005b5c <LL_EXTI_DisableIT_0_31+0x24>)
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	43db      	mvns	r3, r3
 8005b48:	4904      	ldr	r1, [pc, #16]	@ (8005b5c <LL_EXTI_DisableIT_0_31+0x24>)
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	600b      	str	r3, [r1, #0]
}
 8005b4e:	bf00      	nop
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	40010400 	.word	0x40010400

08005b60 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8005b68:	4b06      	ldr	r3, [pc, #24]	@ (8005b84 <LL_EXTI_DisableIT_32_63+0x24>)
 8005b6a:	6a1a      	ldr	r2, [r3, #32]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	43db      	mvns	r3, r3
 8005b70:	4904      	ldr	r1, [pc, #16]	@ (8005b84 <LL_EXTI_DisableIT_32_63+0x24>)
 8005b72:	4013      	ands	r3, r2
 8005b74:	620b      	str	r3, [r1, #32]
}
 8005b76:	bf00      	nop
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	40010400 	.word	0x40010400

08005b88 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8005b90:	4b05      	ldr	r3, [pc, #20]	@ (8005ba8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	4904      	ldr	r1, [pc, #16]	@ (8005ba8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	604b      	str	r3, [r1, #4]

}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr
 8005ba8:	40010400 	.word	0x40010400

08005bac <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8005bb4:	4b05      	ldr	r3, [pc, #20]	@ (8005bcc <LL_EXTI_EnableEvent_32_63+0x20>)
 8005bb6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005bb8:	4904      	ldr	r1, [pc, #16]	@ (8005bcc <LL_EXTI_EnableEvent_32_63+0x20>)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	40010400 	.word	0x40010400

08005bd0 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8005bd8:	4b06      	ldr	r3, [pc, #24]	@ (8005bf4 <LL_EXTI_DisableEvent_0_31+0x24>)
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	43db      	mvns	r3, r3
 8005be0:	4904      	ldr	r1, [pc, #16]	@ (8005bf4 <LL_EXTI_DisableEvent_0_31+0x24>)
 8005be2:	4013      	ands	r3, r2
 8005be4:	604b      	str	r3, [r1, #4]
}
 8005be6:	bf00      	nop
 8005be8:	370c      	adds	r7, #12
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	40010400 	.word	0x40010400

08005bf8 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8005c00:	4b06      	ldr	r3, [pc, #24]	@ (8005c1c <LL_EXTI_DisableEvent_32_63+0x24>)
 8005c02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	43db      	mvns	r3, r3
 8005c08:	4904      	ldr	r1, [pc, #16]	@ (8005c1c <LL_EXTI_DisableEvent_32_63+0x24>)
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8005c0e:	bf00      	nop
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	40010400 	.word	0x40010400

08005c20 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005c28:	4b05      	ldr	r3, [pc, #20]	@ (8005c40 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005c2a:	689a      	ldr	r2, [r3, #8]
 8005c2c:	4904      	ldr	r1, [pc, #16]	@ (8005c40 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	608b      	str	r3, [r1, #8]

}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr
 8005c40:	40010400 	.word	0x40010400

08005c44 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8005c4c:	4b05      	ldr	r3, [pc, #20]	@ (8005c64 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8005c4e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c50:	4904      	ldr	r1, [pc, #16]	@ (8005c64 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr
 8005c64:	40010400 	.word	0x40010400

08005c68 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005c70:	4b06      	ldr	r3, [pc, #24]	@ (8005c8c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	43db      	mvns	r3, r3
 8005c78:	4904      	ldr	r1, [pc, #16]	@ (8005c8c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	608b      	str	r3, [r1, #8]

}
 8005c7e:	bf00      	nop
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	40010400 	.word	0x40010400

08005c90 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8005c98:	4b06      	ldr	r3, [pc, #24]	@ (8005cb4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8005c9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	43db      	mvns	r3, r3
 8005ca0:	4904      	ldr	r1, [pc, #16]	@ (8005cb4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8005ca6:	bf00      	nop
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	40010400 	.word	0x40010400

08005cb8 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005cc0:	4b05      	ldr	r3, [pc, #20]	@ (8005cd8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005cc2:	68da      	ldr	r2, [r3, #12]
 8005cc4:	4904      	ldr	r1, [pc, #16]	@ (8005cd8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	60cb      	str	r3, [r1, #12]
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr
 8005cd8:	40010400 	.word	0x40010400

08005cdc <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8005ce4:	4b05      	ldr	r3, [pc, #20]	@ (8005cfc <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8005ce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ce8:	4904      	ldr	r1, [pc, #16]	@ (8005cfc <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	40010400 	.word	0x40010400

08005d00 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005d08:	4b06      	ldr	r3, [pc, #24]	@ (8005d24 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005d0a:	68da      	ldr	r2, [r3, #12]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	43db      	mvns	r3, r3
 8005d10:	4904      	ldr	r1, [pc, #16]	@ (8005d24 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005d12:	4013      	ands	r3, r2
 8005d14:	60cb      	str	r3, [r1, #12]
}
 8005d16:	bf00      	nop
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	40010400 	.word	0x40010400

08005d28 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8005d30:	4b06      	ldr	r3, [pc, #24]	@ (8005d4c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8005d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	43db      	mvns	r3, r3
 8005d38:	4904      	ldr	r1, [pc, #16]	@ (8005d4c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8005d3e:	bf00      	nop
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	40010400 	.word	0x40010400

08005d50 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8005d58:	4a04      	ldr	r2, [pc, #16]	@ (8005d6c <LL_EXTI_ClearFlag_0_31+0x1c>)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6153      	str	r3, [r2, #20]
}
 8005d5e:	bf00      	nop
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	40010400 	.word	0x40010400

08005d70 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8005d78:	4a04      	ldr	r2, [pc, #16]	@ (8005d8c <LL_EXTI_ClearFlag_32_63+0x1c>)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8005d7e:	bf00      	nop
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	40010400 	.word	0x40010400

08005d90 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b088      	sub	sp, #32
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d102      	bne.n	8005dac <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	77fb      	strb	r3, [r7, #31]
 8005daa:	e181      	b.n	80060b0 <HAL_COMP_Init+0x320>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005db6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005dba:	d102      	bne.n	8005dc2 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	77fb      	strb	r3, [r7, #31]
 8005dc0:	e176      	b.n	80060b0 <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	7f5b      	ldrb	r3, [r3, #29]
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d108      	bne.n	8005dde <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f7fd fb15 	bl	8003408 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005de8:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 8005e04:	4313      	orrs	r3, r2
 8005e06:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	4b90      	ldr	r3, [pc, #576]	@ (8006050 <HAL_COMP_Init+0x2c0>)
 8005e10:	4013      	ands	r3, r2
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	6812      	ldr	r2, [r2, #0]
 8005e16:	6979      	ldr	r1, [r7, #20]
 8005e18:	430b      	orrs	r3, r1
 8005e1a:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d016      	beq.n	8005e58 <HAL_COMP_Init+0xc8>
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d113      	bne.n	8005e58 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005e30:	4b88      	ldr	r3, [pc, #544]	@ (8006054 <HAL_COMP_Init+0x2c4>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	099b      	lsrs	r3, r3, #6
 8005e36:	4a88      	ldr	r2, [pc, #544]	@ (8006058 <HAL_COMP_Init+0x2c8>)
 8005e38:	fba2 2303 	umull	r2, r3, r2, r3
 8005e3c:	099b      	lsrs	r3, r3, #6
 8005e3e:	1c5a      	adds	r2, r3, #1
 8005e40:	4613      	mov	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8005e4a:	e002      	b.n	8005e52 <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1f9      	bne.n	8005e4c <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a7f      	ldr	r2, [pc, #508]	@ (800605c <HAL_COMP_Init+0x2cc>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d028      	beq.n	8005eb4 <HAL_COMP_Init+0x124>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a7e      	ldr	r2, [pc, #504]	@ (8006060 <HAL_COMP_Init+0x2d0>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d020      	beq.n	8005eae <HAL_COMP_Init+0x11e>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a7c      	ldr	r2, [pc, #496]	@ (8006064 <HAL_COMP_Init+0x2d4>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d018      	beq.n	8005ea8 <HAL_COMP_Init+0x118>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a7b      	ldr	r2, [pc, #492]	@ (8006068 <HAL_COMP_Init+0x2d8>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d010      	beq.n	8005ea2 <HAL_COMP_Init+0x112>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a79      	ldr	r2, [pc, #484]	@ (800606c <HAL_COMP_Init+0x2dc>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d008      	beq.n	8005e9c <HAL_COMP_Init+0x10c>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a78      	ldr	r2, [pc, #480]	@ (8006070 <HAL_COMP_Init+0x2e0>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d101      	bne.n	8005e98 <HAL_COMP_Init+0x108>
 8005e94:	2301      	movs	r3, #1
 8005e96:	e00f      	b.n	8005eb8 <HAL_COMP_Init+0x128>
 8005e98:	2302      	movs	r3, #2
 8005e9a:	e00d      	b.n	8005eb8 <HAL_COMP_Init+0x128>
 8005e9c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005ea0:	e00a      	b.n	8005eb8 <HAL_COMP_Init+0x128>
 8005ea2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005ea6:	e007      	b.n	8005eb8 <HAL_COMP_Init+0x128>
 8005ea8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8005eac:	e004      	b.n	8005eb8 <HAL_COMP_Init+0x128>
 8005eae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005eb2:	e001      	b.n	8005eb8 <HAL_COMP_Init+0x128>
 8005eb4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005eb8:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	f003 0303 	and.w	r3, r3, #3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f000 80b6 	beq.w	8006034 <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	f003 0310 	and.w	r3, r3, #16
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d011      	beq.n	8005ef8 <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a65      	ldr	r2, [pc, #404]	@ (8006070 <HAL_COMP_Init+0x2e0>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d004      	beq.n	8005ee8 <HAL_COMP_Init+0x158>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a64      	ldr	r2, [pc, #400]	@ (8006074 <HAL_COMP_Init+0x2e4>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d103      	bne.n	8005ef0 <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8005ee8:	6938      	ldr	r0, [r7, #16]
 8005eea:	f7ff feab 	bl	8005c44 <LL_EXTI_EnableRisingTrig_32_63>
 8005eee:	e014      	b.n	8005f1a <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8005ef0:	6938      	ldr	r0, [r7, #16]
 8005ef2:	f7ff fe95 	bl	8005c20 <LL_EXTI_EnableRisingTrig_0_31>
 8005ef6:	e010      	b.n	8005f1a <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a5c      	ldr	r2, [pc, #368]	@ (8006070 <HAL_COMP_Init+0x2e0>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d004      	beq.n	8005f0c <HAL_COMP_Init+0x17c>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a5b      	ldr	r2, [pc, #364]	@ (8006074 <HAL_COMP_Init+0x2e4>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d103      	bne.n	8005f14 <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8005f0c:	6938      	ldr	r0, [r7, #16]
 8005f0e:	f7ff febf 	bl	8005c90 <LL_EXTI_DisableRisingTrig_32_63>
 8005f12:	e002      	b.n	8005f1a <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8005f14:	6938      	ldr	r0, [r7, #16]
 8005f16:	f7ff fea7 	bl	8005c68 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	f003 0320 	and.w	r3, r3, #32
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d011      	beq.n	8005f4a <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a51      	ldr	r2, [pc, #324]	@ (8006070 <HAL_COMP_Init+0x2e0>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d004      	beq.n	8005f3a <HAL_COMP_Init+0x1aa>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a4f      	ldr	r2, [pc, #316]	@ (8006074 <HAL_COMP_Init+0x2e4>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d103      	bne.n	8005f42 <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8005f3a:	6938      	ldr	r0, [r7, #16]
 8005f3c:	f7ff fece 	bl	8005cdc <LL_EXTI_EnableFallingTrig_32_63>
 8005f40:	e014      	b.n	8005f6c <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8005f42:	6938      	ldr	r0, [r7, #16]
 8005f44:	f7ff feb8 	bl	8005cb8 <LL_EXTI_EnableFallingTrig_0_31>
 8005f48:	e010      	b.n	8005f6c <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a48      	ldr	r2, [pc, #288]	@ (8006070 <HAL_COMP_Init+0x2e0>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d004      	beq.n	8005f5e <HAL_COMP_Init+0x1ce>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a46      	ldr	r2, [pc, #280]	@ (8006074 <HAL_COMP_Init+0x2e4>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d103      	bne.n	8005f66 <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8005f5e:	6938      	ldr	r0, [r7, #16]
 8005f60:	f7ff fee2 	bl	8005d28 <LL_EXTI_DisableFallingTrig_32_63>
 8005f64:	e002      	b.n	8005f6c <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8005f66:	6938      	ldr	r0, [r7, #16]
 8005f68:	f7ff feca 	bl	8005d00 <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a3f      	ldr	r2, [pc, #252]	@ (8006070 <HAL_COMP_Init+0x2e0>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d004      	beq.n	8005f80 <HAL_COMP_Init+0x1f0>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a3e      	ldr	r2, [pc, #248]	@ (8006074 <HAL_COMP_Init+0x2e4>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d103      	bne.n	8005f88 <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8005f80:	6938      	ldr	r0, [r7, #16]
 8005f82:	f7ff fef5 	bl	8005d70 <LL_EXTI_ClearFlag_32_63>
 8005f86:	e002      	b.n	8005f8e <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8005f88:	6938      	ldr	r0, [r7, #16]
 8005f8a:	f7ff fee1 	bl	8005d50 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d011      	beq.n	8005fbe <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a34      	ldr	r2, [pc, #208]	@ (8006070 <HAL_COMP_Init+0x2e0>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d004      	beq.n	8005fae <HAL_COMP_Init+0x21e>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a32      	ldr	r2, [pc, #200]	@ (8006074 <HAL_COMP_Init+0x2e4>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d103      	bne.n	8005fb6 <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8005fae:	6938      	ldr	r0, [r7, #16]
 8005fb0:	f7ff fdfc 	bl	8005bac <LL_EXTI_EnableEvent_32_63>
 8005fb4:	e014      	b.n	8005fe0 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8005fb6:	6938      	ldr	r0, [r7, #16]
 8005fb8:	f7ff fde6 	bl	8005b88 <LL_EXTI_EnableEvent_0_31>
 8005fbc:	e010      	b.n	8005fe0 <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a2b      	ldr	r2, [pc, #172]	@ (8006070 <HAL_COMP_Init+0x2e0>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d004      	beq.n	8005fd2 <HAL_COMP_Init+0x242>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a29      	ldr	r2, [pc, #164]	@ (8006074 <HAL_COMP_Init+0x2e4>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d103      	bne.n	8005fda <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8005fd2:	6938      	ldr	r0, [r7, #16]
 8005fd4:	f7ff fe10 	bl	8005bf8 <LL_EXTI_DisableEvent_32_63>
 8005fd8:	e002      	b.n	8005fe0 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8005fda:	6938      	ldr	r0, [r7, #16]
 8005fdc:	f7ff fdf8 	bl	8005bd0 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	f003 0301 	and.w	r3, r3, #1
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d011      	beq.n	8006010 <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a1f      	ldr	r2, [pc, #124]	@ (8006070 <HAL_COMP_Init+0x2e0>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d004      	beq.n	8006000 <HAL_COMP_Init+0x270>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a1e      	ldr	r2, [pc, #120]	@ (8006074 <HAL_COMP_Init+0x2e4>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d103      	bne.n	8006008 <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8006000:	6938      	ldr	r0, [r7, #16]
 8006002:	f7ff fd87 	bl	8005b14 <LL_EXTI_EnableIT_32_63>
 8006006:	e04b      	b.n	80060a0 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8006008:	6938      	ldr	r0, [r7, #16]
 800600a:	f7ff fd71 	bl	8005af0 <LL_EXTI_EnableIT_0_31>
 800600e:	e047      	b.n	80060a0 <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a16      	ldr	r2, [pc, #88]	@ (8006070 <HAL_COMP_Init+0x2e0>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d004      	beq.n	8006024 <HAL_COMP_Init+0x294>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a15      	ldr	r2, [pc, #84]	@ (8006074 <HAL_COMP_Init+0x2e4>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d103      	bne.n	800602c <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8006024:	6938      	ldr	r0, [r7, #16]
 8006026:	f7ff fd9b 	bl	8005b60 <LL_EXTI_DisableIT_32_63>
 800602a:	e039      	b.n	80060a0 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 800602c:	6938      	ldr	r0, [r7, #16]
 800602e:	f7ff fd83 	bl	8005b38 <LL_EXTI_DisableIT_0_31>
 8006032:	e035      	b.n	80060a0 <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a0d      	ldr	r2, [pc, #52]	@ (8006070 <HAL_COMP_Init+0x2e0>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d004      	beq.n	8006048 <HAL_COMP_Init+0x2b8>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a0c      	ldr	r2, [pc, #48]	@ (8006074 <HAL_COMP_Init+0x2e4>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d117      	bne.n	8006078 <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8006048:	6938      	ldr	r0, [r7, #16]
 800604a:	f7ff fdd5 	bl	8005bf8 <LL_EXTI_DisableEvent_32_63>
 800604e:	e016      	b.n	800607e <HAL_COMP_Init+0x2ee>
 8006050:	ff007e0f 	.word	0xff007e0f
 8006054:	20000044 	.word	0x20000044
 8006058:	053e2d63 	.word	0x053e2d63
 800605c:	40010200 	.word	0x40010200
 8006060:	40010204 	.word	0x40010204
 8006064:	40010208 	.word	0x40010208
 8006068:	4001020c 	.word	0x4001020c
 800606c:	40010210 	.word	0x40010210
 8006070:	40010214 	.word	0x40010214
 8006074:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8006078:	6938      	ldr	r0, [r7, #16]
 800607a:	f7ff fda9 	bl	8005bd0 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a0e      	ldr	r2, [pc, #56]	@ (80060bc <HAL_COMP_Init+0x32c>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d004      	beq.n	8006092 <HAL_COMP_Init+0x302>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a0c      	ldr	r2, [pc, #48]	@ (80060c0 <HAL_COMP_Init+0x330>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d103      	bne.n	800609a <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8006092:	6938      	ldr	r0, [r7, #16]
 8006094:	f7ff fd64 	bl	8005b60 <LL_EXTI_DisableIT_32_63>
 8006098:	e002      	b.n	80060a0 <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800609a:	6938      	ldr	r0, [r7, #16]
 800609c:	f7ff fd4c 	bl	8005b38 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	7f5b      	ldrb	r3, [r3, #29]
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d102      	bne.n	80060b0 <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 80060b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3720      	adds	r7, #32
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	40010214 	.word	0x40010214
 80060c0:	40010218 	.word	0x40010218

080060c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f003 0307 	and.w	r3, r3, #7
 80060d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80060d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006108 <__NVIC_SetPriorityGrouping+0x44>)
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80060e0:	4013      	ands	r3, r2
 80060e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80060ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80060f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80060f6:	4a04      	ldr	r2, [pc, #16]	@ (8006108 <__NVIC_SetPriorityGrouping+0x44>)
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	60d3      	str	r3, [r2, #12]
}
 80060fc:	bf00      	nop
 80060fe:	3714      	adds	r7, #20
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr
 8006108:	e000ed00 	.word	0xe000ed00

0800610c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800610c:	b480      	push	{r7}
 800610e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006110:	4b04      	ldr	r3, [pc, #16]	@ (8006124 <__NVIC_GetPriorityGrouping+0x18>)
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	0a1b      	lsrs	r3, r3, #8
 8006116:	f003 0307 	and.w	r3, r3, #7
}
 800611a:	4618      	mov	r0, r3
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr
 8006124:	e000ed00 	.word	0xe000ed00

08006128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	4603      	mov	r3, r0
 8006130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006136:	2b00      	cmp	r3, #0
 8006138:	db0b      	blt.n	8006152 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800613a:	79fb      	ldrb	r3, [r7, #7]
 800613c:	f003 021f 	and.w	r2, r3, #31
 8006140:	4907      	ldr	r1, [pc, #28]	@ (8006160 <__NVIC_EnableIRQ+0x38>)
 8006142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006146:	095b      	lsrs	r3, r3, #5
 8006148:	2001      	movs	r0, #1
 800614a:	fa00 f202 	lsl.w	r2, r0, r2
 800614e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006152:	bf00      	nop
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	e000e100 	.word	0xe000e100

08006164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	4603      	mov	r3, r0
 800616c:	6039      	str	r1, [r7, #0]
 800616e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006174:	2b00      	cmp	r3, #0
 8006176:	db0a      	blt.n	800618e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	b2da      	uxtb	r2, r3
 800617c:	490c      	ldr	r1, [pc, #48]	@ (80061b0 <__NVIC_SetPriority+0x4c>)
 800617e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006182:	0112      	lsls	r2, r2, #4
 8006184:	b2d2      	uxtb	r2, r2
 8006186:	440b      	add	r3, r1
 8006188:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800618c:	e00a      	b.n	80061a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	b2da      	uxtb	r2, r3
 8006192:	4908      	ldr	r1, [pc, #32]	@ (80061b4 <__NVIC_SetPriority+0x50>)
 8006194:	79fb      	ldrb	r3, [r7, #7]
 8006196:	f003 030f 	and.w	r3, r3, #15
 800619a:	3b04      	subs	r3, #4
 800619c:	0112      	lsls	r2, r2, #4
 800619e:	b2d2      	uxtb	r2, r2
 80061a0:	440b      	add	r3, r1
 80061a2:	761a      	strb	r2, [r3, #24]
}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	e000e100 	.word	0xe000e100
 80061b4:	e000ed00 	.word	0xe000ed00

080061b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b089      	sub	sp, #36	@ 0x24
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f003 0307 	and.w	r3, r3, #7
 80061ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	f1c3 0307 	rsb	r3, r3, #7
 80061d2:	2b04      	cmp	r3, #4
 80061d4:	bf28      	it	cs
 80061d6:	2304      	movcs	r3, #4
 80061d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	3304      	adds	r3, #4
 80061de:	2b06      	cmp	r3, #6
 80061e0:	d902      	bls.n	80061e8 <NVIC_EncodePriority+0x30>
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	3b03      	subs	r3, #3
 80061e6:	e000      	b.n	80061ea <NVIC_EncodePriority+0x32>
 80061e8:	2300      	movs	r3, #0
 80061ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061ec:	f04f 32ff 	mov.w	r2, #4294967295
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	fa02 f303 	lsl.w	r3, r2, r3
 80061f6:	43da      	mvns	r2, r3
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	401a      	ands	r2, r3
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006200:	f04f 31ff 	mov.w	r1, #4294967295
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	fa01 f303 	lsl.w	r3, r1, r3
 800620a:	43d9      	mvns	r1, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006210:	4313      	orrs	r3, r2
         );
}
 8006212:	4618      	mov	r0, r3
 8006214:	3724      	adds	r7, #36	@ 0x24
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
	...

08006220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	3b01      	subs	r3, #1
 800622c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006230:	d301      	bcc.n	8006236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006232:	2301      	movs	r3, #1
 8006234:	e00f      	b.n	8006256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006236:	4a0a      	ldr	r2, [pc, #40]	@ (8006260 <SysTick_Config+0x40>)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	3b01      	subs	r3, #1
 800623c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800623e:	210f      	movs	r1, #15
 8006240:	f04f 30ff 	mov.w	r0, #4294967295
 8006244:	f7ff ff8e 	bl	8006164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006248:	4b05      	ldr	r3, [pc, #20]	@ (8006260 <SysTick_Config+0x40>)
 800624a:	2200      	movs	r2, #0
 800624c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800624e:	4b04      	ldr	r3, [pc, #16]	@ (8006260 <SysTick_Config+0x40>)
 8006250:	2207      	movs	r2, #7
 8006252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	e000e010 	.word	0xe000e010

08006264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f7ff ff29 	bl	80060c4 <__NVIC_SetPriorityGrouping>
}
 8006272:	bf00      	nop
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b086      	sub	sp, #24
 800627e:	af00      	add	r7, sp, #0
 8006280:	4603      	mov	r3, r0
 8006282:	60b9      	str	r1, [r7, #8]
 8006284:	607a      	str	r2, [r7, #4]
 8006286:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006288:	f7ff ff40 	bl	800610c <__NVIC_GetPriorityGrouping>
 800628c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	68b9      	ldr	r1, [r7, #8]
 8006292:	6978      	ldr	r0, [r7, #20]
 8006294:	f7ff ff90 	bl	80061b8 <NVIC_EncodePriority>
 8006298:	4602      	mov	r2, r0
 800629a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800629e:	4611      	mov	r1, r2
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7ff ff5f 	bl	8006164 <__NVIC_SetPriority>
}
 80062a6:	bf00      	nop
 80062a8:	3718      	adds	r7, #24
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b082      	sub	sp, #8
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	4603      	mov	r3, r0
 80062b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80062b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062bc:	4618      	mov	r0, r3
 80062be:	f7ff ff33 	bl	8006128 <__NVIC_EnableIRQ>
}
 80062c2:	bf00      	nop
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b082      	sub	sp, #8
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7ff ffa4 	bl	8006220 <SysTick_Config>
 80062d8:	4603      	mov	r3, r0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3708      	adds	r7, #8
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b082      	sub	sp, #8
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d101      	bne.n	80062f4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e014      	b.n	800631e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	791b      	ldrb	r3, [r3, #4]
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d105      	bne.n	800630a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f7fd f8d5 	bl	80034b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2202      	movs	r2, #2
 800630e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3708      	adds	r7, #8
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
	...

08006328 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d101      	bne.n	800633c <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e056      	b.n	80063ea <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	795b      	ldrb	r3, [r3, #5]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d101      	bne.n	8006348 <HAL_DAC_Start+0x20>
 8006344:	2302      	movs	r3, #2
 8006346:	e050      	b.n	80063ea <HAL_DAC_Start+0xc2>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2202      	movs	r2, #2
 8006352:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6819      	ldr	r1, [r3, #0]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	f003 0310 	and.w	r3, r3, #16
 8006360:	2201      	movs	r2, #1
 8006362:	409a      	lsls	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	430a      	orrs	r2, r1
 800636a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800636c:	4b22      	ldr	r3, [pc, #136]	@ (80063f8 <HAL_DAC_Start+0xd0>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	099b      	lsrs	r3, r3, #6
 8006372:	4a22      	ldr	r2, [pc, #136]	@ (80063fc <HAL_DAC_Start+0xd4>)
 8006374:	fba2 2303 	umull	r2, r3, r2, r3
 8006378:	099b      	lsrs	r3, r3, #6
 800637a:	3301      	adds	r3, #1
 800637c:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 800637e:	e002      	b.n	8006386 <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	3b01      	subs	r3, #1
 8006384:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1f9      	bne.n	8006380 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10f      	bne.n	80063b2 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800639c:	2b02      	cmp	r3, #2
 800639e:	d11d      	bne.n	80063dc <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f042 0201 	orr.w	r2, r2, #1
 80063ae:	605a      	str	r2, [r3, #4]
 80063b0:	e014      	b.n	80063dc <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	f003 0310 	and.w	r3, r3, #16
 80063c2:	2102      	movs	r1, #2
 80063c4:	fa01 f303 	lsl.w	r3, r1, r3
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d107      	bne.n	80063dc <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f042 0202 	orr.w	r2, r2, #2
 80063da:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	20000044 	.word	0x20000044
 80063fc:	053e2d63 	.word	0x053e2d63

08006400 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8006400:	b480      	push	{r7}
 8006402:	b087      	sub	sp, #28
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
 800640c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800640e:	2300      	movs	r3, #0
 8006410:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d101      	bne.n	800641c <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e018      	b.n	800644e <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d105      	bne.n	800643a <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4413      	add	r3, r2
 8006434:	3308      	adds	r3, #8
 8006436:	617b      	str	r3, [r7, #20]
 8006438:	e004      	b.n	8006444 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4413      	add	r3, r2
 8006440:	3314      	adds	r3, #20
 8006442:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	461a      	mov	r2, r3
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	371c      	adds	r7, #28
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
	...

0800645c <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b08a      	sub	sp, #40	@ 0x28
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006468:	2300      	movs	r3, #0
 800646a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d002      	beq.n	8006478 <HAL_DAC_ConfigChannel+0x1c>
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d101      	bne.n	800647c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e1a1      	b.n	80067c0 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	795b      	ldrb	r3, [r3, #5]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d101      	bne.n	800648e <HAL_DAC_ConfigChannel+0x32>
 800648a:	2302      	movs	r3, #2
 800648c:	e198      	b.n	80067c0 <HAL_DAC_ConfigChannel+0x364>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2201      	movs	r2, #1
 8006492:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2202      	movs	r2, #2
 8006498:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	2b04      	cmp	r3, #4
 80064a0:	d17a      	bne.n	8006598 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80064a2:	f7fd ff6f 	bl	8004384 <HAL_GetTick>
 80064a6:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d13d      	bne.n	800652a <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80064ae:	e018      	b.n	80064e2 <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80064b0:	f7fd ff68 	bl	8004384 <HAL_GetTick>
 80064b4:	4602      	mov	r2, r0
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d911      	bls.n	80064e2 <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00a      	beq.n	80064e2 <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	f043 0208 	orr.w	r2, r3, #8
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2203      	movs	r2, #3
 80064dc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e16e      	b.n	80067c0 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1df      	bne.n	80064b0 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80064f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80064fa:	e020      	b.n	800653e <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80064fc:	f7fd ff42 	bl	8004384 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	2b01      	cmp	r3, #1
 8006508:	d90f      	bls.n	800652a <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006510:	2b00      	cmp	r3, #0
 8006512:	da0a      	bge.n	800652a <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	f043 0208 	orr.w	r2, r3, #8
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2203      	movs	r2, #3
 8006524:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e14a      	b.n	80067c0 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006530:	2b00      	cmp	r3, #0
 8006532:	dbe3      	blt.n	80064fc <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800653c:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f003 0310 	and.w	r3, r3, #16
 800654a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800654e:	fa01 f303 	lsl.w	r3, r1, r3
 8006552:	43db      	mvns	r3, r3
 8006554:	ea02 0103 	and.w	r1, r2, r3
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f003 0310 	and.w	r3, r3, #16
 8006562:	409a      	lsls	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	430a      	orrs	r2, r1
 800656a:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f003 0310 	and.w	r3, r3, #16
 8006578:	21ff      	movs	r1, #255	@ 0xff
 800657a:	fa01 f303 	lsl.w	r3, r1, r3
 800657e:	43db      	mvns	r3, r3
 8006580:	ea02 0103 	and.w	r1, r2, r3
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f003 0310 	and.w	r3, r3, #16
 800658e:	409a      	lsls	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	430a      	orrs	r2, r1
 8006596:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	69db      	ldr	r3, [r3, #28]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d11d      	bne.n	80065dc <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a6:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f003 0310 	and.w	r3, r3, #16
 80065ae:	221f      	movs	r2, #31
 80065b0:	fa02 f303 	lsl.w	r3, r2, r3
 80065b4:	43db      	mvns	r3, r3
 80065b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065b8:	4013      	ands	r3, r2
 80065ba:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f003 0310 	and.w	r3, r3, #16
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	fa02 f303 	lsl.w	r3, r2, r3
 80065ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065d0:	4313      	orrs	r3, r2
 80065d2:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065da:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065e2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f003 0310 	and.w	r3, r3, #16
 80065ea:	2207      	movs	r2, #7
 80065ec:	fa02 f303 	lsl.w	r3, r2, r3
 80065f0:	43db      	mvns	r3, r3
 80065f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065f4:	4013      	ands	r3, r2
 80065f6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d102      	bne.n	8006606 <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8006600:	2300      	movs	r3, #0
 8006602:	623b      	str	r3, [r7, #32]
 8006604:	e00f      	b.n	8006626 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	2b02      	cmp	r3, #2
 800660c:	d102      	bne.n	8006614 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800660e:	2301      	movs	r3, #1
 8006610:	623b      	str	r3, [r7, #32]
 8006612:	e008      	b.n	8006626 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	695b      	ldr	r3, [r3, #20]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d102      	bne.n	8006622 <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800661c:	2301      	movs	r3, #1
 800661e:	623b      	str	r3, [r7, #32]
 8006620:	e001      	b.n	8006626 <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006622:	2300      	movs	r3, #0
 8006624:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	689a      	ldr	r2, [r3, #8]
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	4313      	orrs	r3, r2
 8006630:	6a3a      	ldr	r2, [r7, #32]
 8006632:	4313      	orrs	r3, r2
 8006634:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f003 0310 	and.w	r3, r3, #16
 800663c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006640:	fa02 f303 	lsl.w	r3, r2, r3
 8006644:	43db      	mvns	r3, r3
 8006646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006648:	4013      	ands	r3, r2
 800664a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	791b      	ldrb	r3, [r3, #4]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d102      	bne.n	800665a <HAL_DAC_ConfigChannel+0x1fe>
 8006654:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006658:	e000      	b.n	800665c <HAL_DAC_ConfigChannel+0x200>
 800665a:	2300      	movs	r3, #0
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	4313      	orrs	r3, r2
 8006660:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f003 0310 	and.w	r3, r3, #16
 8006668:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800666c:	fa02 f303 	lsl.w	r3, r2, r3
 8006670:	43db      	mvns	r3, r3
 8006672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006674:	4013      	ands	r3, r2
 8006676:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	795b      	ldrb	r3, [r3, #5]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d102      	bne.n	8006686 <HAL_DAC_ConfigChannel+0x22a>
 8006680:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006684:	e000      	b.n	8006688 <HAL_DAC_ConfigChannel+0x22c>
 8006686:	2300      	movs	r3, #0
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	4313      	orrs	r3, r2
 800668c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800668e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006690:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8006694:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2b02      	cmp	r3, #2
 800669c:	d114      	bne.n	80066c8 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800669e:	f003 fcb7 	bl	800a010 <HAL_RCC_GetHCLKFreq>
 80066a2:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	4a48      	ldr	r2, [pc, #288]	@ (80067c8 <HAL_DAC_ConfigChannel+0x36c>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d904      	bls.n	80066b6 <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80066ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80066b4:	e00f      	b.n	80066d6 <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	4a44      	ldr	r2, [pc, #272]	@ (80067cc <HAL_DAC_ConfigChannel+0x370>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d90a      	bls.n	80066d4 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80066be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80066c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80066c6:	e006      	b.n	80066d6 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066ce:	4313      	orrs	r3, r2
 80066d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80066d2:	e000      	b.n	80066d6 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80066d4:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f003 0310 	and.w	r3, r3, #16
 80066dc:	697a      	ldr	r2, [r7, #20]
 80066de:	fa02 f303 	lsl.w	r3, r2, r3
 80066e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066e4:	4313      	orrs	r3, r2
 80066e6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066ee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6819      	ldr	r1, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f003 0310 	and.w	r3, r3, #16
 80066fc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006700:	fa02 f303 	lsl.w	r3, r2, r3
 8006704:	43da      	mvns	r2, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	400a      	ands	r2, r1
 800670c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f003 0310 	and.w	r3, r3, #16
 800671c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8006720:	fa02 f303 	lsl.w	r3, r2, r3
 8006724:	43db      	mvns	r3, r3
 8006726:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006728:	4013      	ands	r3, r2
 800672a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f003 0310 	and.w	r3, r3, #16
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	fa02 f303 	lsl.w	r3, r2, r3
 800673e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006740:	4313      	orrs	r3, r2
 8006742:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800674a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6819      	ldr	r1, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f003 0310 	and.w	r3, r3, #16
 8006758:	22c0      	movs	r2, #192	@ 0xc0
 800675a:	fa02 f303 	lsl.w	r3, r2, r3
 800675e:	43da      	mvns	r2, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	400a      	ands	r2, r1
 8006766:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	089b      	lsrs	r3, r3, #2
 800676e:	f003 030f 	and.w	r3, r3, #15
 8006772:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	089b      	lsrs	r3, r3, #2
 800677a:	021b      	lsls	r3, r3, #8
 800677c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006780:	697a      	ldr	r2, [r7, #20]
 8006782:	4313      	orrs	r3, r2
 8006784:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f003 0310 	and.w	r3, r3, #16
 8006792:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8006796:	fa01 f303 	lsl.w	r3, r1, r3
 800679a:	43db      	mvns	r3, r3
 800679c:	ea02 0103 	and.w	r1, r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f003 0310 	and.w	r3, r3, #16
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	409a      	lsls	r2, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2201      	movs	r2, #1
 80067b6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2200      	movs	r2, #0
 80067bc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80067be:	7ffb      	ldrb	r3, [r7, #31]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3728      	adds	r7, #40	@ 0x28
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	09896800 	.word	0x09896800
 80067cc:	04c4b400 	.word	0x04c4b400

080067d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e08d      	b.n	80068fe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	461a      	mov	r2, r3
 80067e8:	4b47      	ldr	r3, [pc, #284]	@ (8006908 <HAL_DMA_Init+0x138>)
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d80f      	bhi.n	800680e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	461a      	mov	r2, r3
 80067f4:	4b45      	ldr	r3, [pc, #276]	@ (800690c <HAL_DMA_Init+0x13c>)
 80067f6:	4413      	add	r3, r2
 80067f8:	4a45      	ldr	r2, [pc, #276]	@ (8006910 <HAL_DMA_Init+0x140>)
 80067fa:	fba2 2303 	umull	r2, r3, r2, r3
 80067fe:	091b      	lsrs	r3, r3, #4
 8006800:	009a      	lsls	r2, r3, #2
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a42      	ldr	r2, [pc, #264]	@ (8006914 <HAL_DMA_Init+0x144>)
 800680a:	641a      	str	r2, [r3, #64]	@ 0x40
 800680c:	e00e      	b.n	800682c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	461a      	mov	r2, r3
 8006814:	4b40      	ldr	r3, [pc, #256]	@ (8006918 <HAL_DMA_Init+0x148>)
 8006816:	4413      	add	r3, r2
 8006818:	4a3d      	ldr	r2, [pc, #244]	@ (8006910 <HAL_DMA_Init+0x140>)
 800681a:	fba2 2303 	umull	r2, r3, r2, r3
 800681e:	091b      	lsrs	r3, r3, #4
 8006820:	009a      	lsls	r2, r3, #2
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a3c      	ldr	r2, [pc, #240]	@ (800691c <HAL_DMA_Init+0x14c>)
 800682a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006846:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006850:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800685c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006868:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	4313      	orrs	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f9b6 	bl	8006bf0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800688c:	d102      	bne.n	8006894 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685a      	ldr	r2, [r3, #4]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800689c:	b2d2      	uxtb	r2, r2
 800689e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80068a8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d010      	beq.n	80068d4 <HAL_DMA_Init+0x104>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	d80c      	bhi.n	80068d4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f9d6 	bl	8006c6c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068c4:	2200      	movs	r2, #0
 80068c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80068d0:	605a      	str	r2, [r3, #4]
 80068d2:	e008      	b.n	80068e6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	40020407 	.word	0x40020407
 800690c:	bffdfff8 	.word	0xbffdfff8
 8006910:	cccccccd 	.word	0xcccccccd
 8006914:	40020000 	.word	0x40020000
 8006918:	bffdfbf8 	.word	0xbffdfbf8
 800691c:	40020400 	.word	0x40020400

08006920 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
 800692c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006938:	2b01      	cmp	r3, #1
 800693a:	d101      	bne.n	8006940 <HAL_DMA_Start_IT+0x20>
 800693c:	2302      	movs	r3, #2
 800693e:	e066      	b.n	8006a0e <HAL_DMA_Start_IT+0xee>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b01      	cmp	r3, #1
 8006952:	d155      	bne.n	8006a00 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2202      	movs	r2, #2
 8006958:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f022 0201 	bic.w	r2, r2, #1
 8006970:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	68b9      	ldr	r1, [r7, #8]
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f000 f8fb 	bl	8006b74 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006982:	2b00      	cmp	r3, #0
 8006984:	d008      	beq.n	8006998 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f042 020e 	orr.w	r2, r2, #14
 8006994:	601a      	str	r2, [r3, #0]
 8006996:	e00f      	b.n	80069b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f022 0204 	bic.w	r2, r2, #4
 80069a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f042 020a 	orr.w	r2, r2, #10
 80069b6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d007      	beq.n	80069d6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80069d4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d007      	beq.n	80069ee <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80069ec:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f042 0201 	orr.w	r2, r2, #1
 80069fc:	601a      	str	r2, [r3, #0]
 80069fe:	e005      	b.n	8006a0c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006a08:	2302      	movs	r3, #2
 8006a0a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3718      	adds	r7, #24
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b084      	sub	sp, #16
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a32:	f003 031f 	and.w	r3, r3, #31
 8006a36:	2204      	movs	r2, #4
 8006a38:	409a      	lsls	r2, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d026      	beq.n	8006a90 <HAL_DMA_IRQHandler+0x7a>
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	f003 0304 	and.w	r3, r3, #4
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d021      	beq.n	8006a90 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0320 	and.w	r3, r3, #32
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d107      	bne.n	8006a6a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f022 0204 	bic.w	r2, r2, #4
 8006a68:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a6e:	f003 021f 	and.w	r2, r3, #31
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a76:	2104      	movs	r1, #4
 8006a78:	fa01 f202 	lsl.w	r2, r1, r2
 8006a7c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d071      	beq.n	8006b6a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006a8e:	e06c      	b.n	8006b6a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a94:	f003 031f 	and.w	r3, r3, #31
 8006a98:	2202      	movs	r2, #2
 8006a9a:	409a      	lsls	r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d02e      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	f003 0302 	and.w	r3, r3, #2
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d029      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0320 	and.w	r3, r3, #32
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10b      	bne.n	8006ad4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f022 020a 	bic.w	r2, r2, #10
 8006aca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ad8:	f003 021f 	and.w	r2, r3, #31
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ae0:	2102      	movs	r1, #2
 8006ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8006ae6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d038      	beq.n	8006b6a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006b00:	e033      	b.n	8006b6a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b06:	f003 031f 	and.w	r3, r3, #31
 8006b0a:	2208      	movs	r2, #8
 8006b0c:	409a      	lsls	r2, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	4013      	ands	r3, r2
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d02a      	beq.n	8006b6c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	f003 0308 	and.w	r3, r3, #8
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d025      	beq.n	8006b6c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f022 020e 	bic.w	r2, r2, #14
 8006b2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b34:	f003 021f 	and.w	r2, r3, #31
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b3c:	2101      	movs	r1, #1
 8006b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8006b42:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d004      	beq.n	8006b6c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006b6a:	bf00      	nop
 8006b6c:	bf00      	nop
}
 8006b6e:	3710      	adds	r7, #16
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	607a      	str	r2, [r7, #4]
 8006b80:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006b8a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d004      	beq.n	8006b9e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006b9c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ba2:	f003 021f 	and.w	r2, r3, #31
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006baa:	2101      	movs	r1, #1
 8006bac:	fa01 f202 	lsl.w	r2, r1, r2
 8006bb0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	683a      	ldr	r2, [r7, #0]
 8006bb8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	2b10      	cmp	r3, #16
 8006bc0:	d108      	bne.n	8006bd4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006bd2:	e007      	b.n	8006be4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	60da      	str	r2, [r3, #12]
}
 8006be4:	bf00      	nop
 8006be6:	3714      	adds	r7, #20
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b087      	sub	sp, #28
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	4b16      	ldr	r3, [pc, #88]	@ (8006c58 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d802      	bhi.n	8006c0a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006c04:	4b15      	ldr	r3, [pc, #84]	@ (8006c5c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006c06:	617b      	str	r3, [r7, #20]
 8006c08:	e001      	b.n	8006c0e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006c0a:	4b15      	ldr	r3, [pc, #84]	@ (8006c60 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006c0c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	3b08      	subs	r3, #8
 8006c1a:	4a12      	ldr	r2, [pc, #72]	@ (8006c64 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c20:	091b      	lsrs	r3, r3, #4
 8006c22:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c28:	089b      	lsrs	r3, r3, #2
 8006c2a:	009a      	lsls	r2, r3, #2
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	4413      	add	r3, r2
 8006c30:	461a      	mov	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a0b      	ldr	r2, [pc, #44]	@ (8006c68 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006c3a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f003 031f 	and.w	r3, r3, #31
 8006c42:	2201      	movs	r2, #1
 8006c44:	409a      	lsls	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006c4a:	bf00      	nop
 8006c4c:	371c      	adds	r7, #28
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	40020407 	.word	0x40020407
 8006c5c:	40020800 	.word	0x40020800
 8006c60:	40020820 	.word	0x40020820
 8006c64:	cccccccd 	.word	0xcccccccd
 8006c68:	40020880 	.word	0x40020880

08006c6c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b085      	sub	sp, #20
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8006cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006c80:	4413      	add	r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	461a      	mov	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a08      	ldr	r2, [pc, #32]	@ (8006cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006c8e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	3b01      	subs	r3, #1
 8006c94:	f003 031f 	and.w	r3, r3, #31
 8006c98:	2201      	movs	r2, #1
 8006c9a:	409a      	lsls	r2, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006ca0:	bf00      	nop
 8006ca2:	3714      	adds	r7, #20
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	1000823f 	.word	0x1000823f
 8006cb0:	40020940 	.word	0x40020940

08006cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b087      	sub	sp, #28
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006cc2:	e15a      	b.n	8006f7a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	2101      	movs	r1, #1
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f000 814c 	beq.w	8006f74 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	f003 0303 	and.w	r3, r3, #3
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d005      	beq.n	8006cf4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d130      	bne.n	8006d56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	005b      	lsls	r3, r3, #1
 8006cfe:	2203      	movs	r2, #3
 8006d00:	fa02 f303 	lsl.w	r3, r2, r3
 8006d04:	43db      	mvns	r3, r3
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	4013      	ands	r3, r2
 8006d0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	68da      	ldr	r2, [r3, #12]
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	005b      	lsls	r3, r3, #1
 8006d14:	fa02 f303 	lsl.w	r3, r2, r3
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	693a      	ldr	r2, [r7, #16]
 8006d22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d32:	43db      	mvns	r3, r3
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	4013      	ands	r3, r2
 8006d38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	091b      	lsrs	r3, r3, #4
 8006d40:	f003 0201 	and.w	r2, r3, #1
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	fa02 f303 	lsl.w	r3, r2, r3
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	f003 0303 	and.w	r3, r3, #3
 8006d5e:	2b03      	cmp	r3, #3
 8006d60:	d017      	beq.n	8006d92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	005b      	lsls	r3, r3, #1
 8006d6c:	2203      	movs	r2, #3
 8006d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d72:	43db      	mvns	r3, r3
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	4013      	ands	r3, r2
 8006d78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	689a      	ldr	r2, [r3, #8]
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	005b      	lsls	r3, r3, #1
 8006d82:	fa02 f303 	lsl.w	r3, r2, r3
 8006d86:	693a      	ldr	r2, [r7, #16]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f003 0303 	and.w	r3, r3, #3
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d123      	bne.n	8006de6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	08da      	lsrs	r2, r3, #3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	3208      	adds	r2, #8
 8006da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006daa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	f003 0307 	and.w	r3, r3, #7
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	220f      	movs	r2, #15
 8006db6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dba:	43db      	mvns	r3, r3
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	691a      	ldr	r2, [r3, #16]
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	f003 0307 	and.w	r3, r3, #7
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	08da      	lsrs	r2, r3, #3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	3208      	adds	r2, #8
 8006de0:	6939      	ldr	r1, [r7, #16]
 8006de2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	005b      	lsls	r3, r3, #1
 8006df0:	2203      	movs	r2, #3
 8006df2:	fa02 f303 	lsl.w	r3, r2, r3
 8006df6:	43db      	mvns	r3, r3
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f003 0203 	and.w	r2, r3, #3
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	005b      	lsls	r3, r3, #1
 8006e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e0e:	693a      	ldr	r2, [r7, #16]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f000 80a6 	beq.w	8006f74 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e28:	4b5b      	ldr	r3, [pc, #364]	@ (8006f98 <HAL_GPIO_Init+0x2e4>)
 8006e2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e2c:	4a5a      	ldr	r2, [pc, #360]	@ (8006f98 <HAL_GPIO_Init+0x2e4>)
 8006e2e:	f043 0301 	orr.w	r3, r3, #1
 8006e32:	6613      	str	r3, [r2, #96]	@ 0x60
 8006e34:	4b58      	ldr	r3, [pc, #352]	@ (8006f98 <HAL_GPIO_Init+0x2e4>)
 8006e36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e38:	f003 0301 	and.w	r3, r3, #1
 8006e3c:	60bb      	str	r3, [r7, #8]
 8006e3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006e40:	4a56      	ldr	r2, [pc, #344]	@ (8006f9c <HAL_GPIO_Init+0x2e8>)
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	089b      	lsrs	r3, r3, #2
 8006e46:	3302      	adds	r3, #2
 8006e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f003 0303 	and.w	r3, r3, #3
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	220f      	movs	r2, #15
 8006e58:	fa02 f303 	lsl.w	r3, r2, r3
 8006e5c:	43db      	mvns	r3, r3
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	4013      	ands	r3, r2
 8006e62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006e6a:	d01f      	beq.n	8006eac <HAL_GPIO_Init+0x1f8>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a4c      	ldr	r2, [pc, #304]	@ (8006fa0 <HAL_GPIO_Init+0x2ec>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d019      	beq.n	8006ea8 <HAL_GPIO_Init+0x1f4>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a4b      	ldr	r2, [pc, #300]	@ (8006fa4 <HAL_GPIO_Init+0x2f0>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d013      	beq.n	8006ea4 <HAL_GPIO_Init+0x1f0>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a4a      	ldr	r2, [pc, #296]	@ (8006fa8 <HAL_GPIO_Init+0x2f4>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d00d      	beq.n	8006ea0 <HAL_GPIO_Init+0x1ec>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a49      	ldr	r2, [pc, #292]	@ (8006fac <HAL_GPIO_Init+0x2f8>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d007      	beq.n	8006e9c <HAL_GPIO_Init+0x1e8>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a48      	ldr	r2, [pc, #288]	@ (8006fb0 <HAL_GPIO_Init+0x2fc>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d101      	bne.n	8006e98 <HAL_GPIO_Init+0x1e4>
 8006e94:	2305      	movs	r3, #5
 8006e96:	e00a      	b.n	8006eae <HAL_GPIO_Init+0x1fa>
 8006e98:	2306      	movs	r3, #6
 8006e9a:	e008      	b.n	8006eae <HAL_GPIO_Init+0x1fa>
 8006e9c:	2304      	movs	r3, #4
 8006e9e:	e006      	b.n	8006eae <HAL_GPIO_Init+0x1fa>
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e004      	b.n	8006eae <HAL_GPIO_Init+0x1fa>
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	e002      	b.n	8006eae <HAL_GPIO_Init+0x1fa>
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e000      	b.n	8006eae <HAL_GPIO_Init+0x1fa>
 8006eac:	2300      	movs	r3, #0
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	f002 0203 	and.w	r2, r2, #3
 8006eb4:	0092      	lsls	r2, r2, #2
 8006eb6:	4093      	lsls	r3, r2
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ebe:	4937      	ldr	r1, [pc, #220]	@ (8006f9c <HAL_GPIO_Init+0x2e8>)
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	089b      	lsrs	r3, r3, #2
 8006ec4:	3302      	adds	r3, #2
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006ecc:	4b39      	ldr	r3, [pc, #228]	@ (8006fb4 <HAL_GPIO_Init+0x300>)
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	43db      	mvns	r3, r3
 8006ed6:	693a      	ldr	r2, [r7, #16]
 8006ed8:	4013      	ands	r3, r2
 8006eda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d003      	beq.n	8006ef0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006ef0:	4a30      	ldr	r2, [pc, #192]	@ (8006fb4 <HAL_GPIO_Init+0x300>)
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006ef6:	4b2f      	ldr	r3, [pc, #188]	@ (8006fb4 <HAL_GPIO_Init+0x300>)
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	43db      	mvns	r3, r3
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	4013      	ands	r3, r2
 8006f04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d003      	beq.n	8006f1a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006f12:	693a      	ldr	r2, [r7, #16]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006f1a:	4a26      	ldr	r2, [pc, #152]	@ (8006fb4 <HAL_GPIO_Init+0x300>)
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006f20:	4b24      	ldr	r3, [pc, #144]	@ (8006fb4 <HAL_GPIO_Init+0x300>)
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	43db      	mvns	r3, r3
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d003      	beq.n	8006f44 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006f44:	4a1b      	ldr	r2, [pc, #108]	@ (8006fb4 <HAL_GPIO_Init+0x300>)
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8006fb4 <HAL_GPIO_Init+0x300>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	43db      	mvns	r3, r3
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	4013      	ands	r3, r2
 8006f58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d003      	beq.n	8006f6e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006f6e:	4a11      	ldr	r2, [pc, #68]	@ (8006fb4 <HAL_GPIO_Init+0x300>)
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	3301      	adds	r3, #1
 8006f78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	fa22 f303 	lsr.w	r3, r2, r3
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f47f ae9d 	bne.w	8006cc4 <HAL_GPIO_Init+0x10>
  }
}
 8006f8a:	bf00      	nop
 8006f8c:	bf00      	nop
 8006f8e:	371c      	adds	r7, #28
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr
 8006f98:	40021000 	.word	0x40021000
 8006f9c:	40010000 	.word	0x40010000
 8006fa0:	48000400 	.word	0x48000400
 8006fa4:	48000800 	.word	0x48000800
 8006fa8:	48000c00 	.word	0x48000c00
 8006fac:	48001000 	.word	0x48001000
 8006fb0:	48001400 	.word	0x48001400
 8006fb4:	40010400 	.word	0x40010400

08006fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	807b      	strh	r3, [r7, #2]
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006fc8:	787b      	ldrb	r3, [r7, #1]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d003      	beq.n	8006fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006fce:	887a      	ldrh	r2, [r7, #2]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006fd4:	e002      	b.n	8006fdc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006fd6:	887a      	ldrh	r2, [r7, #2]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	4603      	mov	r3, r0
 8006ff0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006ff2:	4b08      	ldr	r3, [pc, #32]	@ (8007014 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ff4:	695a      	ldr	r2, [r3, #20]
 8006ff6:	88fb      	ldrh	r3, [r7, #6]
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d006      	beq.n	800700c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006ffe:	4a05      	ldr	r2, [pc, #20]	@ (8007014 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007000:	88fb      	ldrh	r3, [r7, #6]
 8007002:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007004:	88fb      	ldrh	r3, [r7, #6]
 8007006:	4618      	mov	r0, r3
 8007008:	f000 f806 	bl	8007018 <HAL_GPIO_EXTI_Callback>
  }
}
 800700c:	bf00      	nop
 800700e:	3708      	adds	r7, #8
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	40010400 	.word	0x40010400

08007018 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	4603      	mov	r3, r0
 8007020:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007022:	bf00      	nop
 8007024:	370c      	adds	r7, #12
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr

0800702e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b082      	sub	sp, #8
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d101      	bne.n	8007040 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e08d      	b.n	800715c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007046:	b2db      	uxtb	r3, r3
 8007048:	2b00      	cmp	r3, #0
 800704a:	d106      	bne.n	800705a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f7fc faad 	bl	80035b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2224      	movs	r2, #36	@ 0x24
 800705e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f022 0201 	bic.w	r2, r2, #1
 8007070:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685a      	ldr	r2, [r3, #4]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800707e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	689a      	ldr	r2, [r3, #8]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800708e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	2b01      	cmp	r3, #1
 8007096:	d107      	bne.n	80070a8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	689a      	ldr	r2, [r3, #8]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80070a4:	609a      	str	r2, [r3, #8]
 80070a6:	e006      	b.n	80070b6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	689a      	ldr	r2, [r3, #8]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80070b4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d108      	bne.n	80070d0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80070cc:	605a      	str	r2, [r3, #4]
 80070ce:	e007      	b.n	80070e0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	685a      	ldr	r2, [r3, #4]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80070de:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	6812      	ldr	r2, [r2, #0]
 80070ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80070ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070f2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68da      	ldr	r2, [r3, #12]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007102:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	691a      	ldr	r2, [r3, #16]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	695b      	ldr	r3, [r3, #20]
 800710c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	699b      	ldr	r3, [r3, #24]
 8007114:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	430a      	orrs	r2, r1
 800711c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	69d9      	ldr	r1, [r3, #28]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a1a      	ldr	r2, [r3, #32]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	430a      	orrs	r2, r1
 800712c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f042 0201 	orr.w	r2, r2, #1
 800713c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2220      	movs	r2, #32
 8007148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b088      	sub	sp, #32
 8007168:	af02      	add	r7, sp, #8
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	4608      	mov	r0, r1
 800716e:	4611      	mov	r1, r2
 8007170:	461a      	mov	r2, r3
 8007172:	4603      	mov	r3, r0
 8007174:	817b      	strh	r3, [r7, #10]
 8007176:	460b      	mov	r3, r1
 8007178:	813b      	strh	r3, [r7, #8]
 800717a:	4613      	mov	r3, r2
 800717c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007184:	b2db      	uxtb	r3, r3
 8007186:	2b20      	cmp	r3, #32
 8007188:	f040 80fd 	bne.w	8007386 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800718c:	6a3b      	ldr	r3, [r7, #32]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d002      	beq.n	8007198 <HAL_I2C_Mem_Read+0x34>
 8007192:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007194:	2b00      	cmp	r3, #0
 8007196:	d105      	bne.n	80071a4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800719e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	e0f1      	b.n	8007388 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d101      	bne.n	80071b2 <HAL_I2C_Mem_Read+0x4e>
 80071ae:	2302      	movs	r3, #2
 80071b0:	e0ea      	b.n	8007388 <HAL_I2C_Mem_Read+0x224>
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80071ba:	f7fd f8e3 	bl	8004384 <HAL_GetTick>
 80071be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	2319      	movs	r3, #25
 80071c6:	2201      	movs	r2, #1
 80071c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f000 f95b 	bl	8007488 <I2C_WaitOnFlagUntilTimeout>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d001      	beq.n	80071dc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e0d5      	b.n	8007388 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2222      	movs	r2, #34	@ 0x22
 80071e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2240      	movs	r2, #64	@ 0x40
 80071e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6a3a      	ldr	r2, [r7, #32]
 80071f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80071fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007204:	88f8      	ldrh	r0, [r7, #6]
 8007206:	893a      	ldrh	r2, [r7, #8]
 8007208:	8979      	ldrh	r1, [r7, #10]
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	9301      	str	r3, [sp, #4]
 800720e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007210:	9300      	str	r3, [sp, #0]
 8007212:	4603      	mov	r3, r0
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f000 f8bf 	bl	8007398 <I2C_RequestMemoryRead>
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d005      	beq.n	800722c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e0ad      	b.n	8007388 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007230:	b29b      	uxth	r3, r3
 8007232:	2bff      	cmp	r3, #255	@ 0xff
 8007234:	d90e      	bls.n	8007254 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	22ff      	movs	r2, #255	@ 0xff
 800723a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007240:	b2da      	uxtb	r2, r3
 8007242:	8979      	ldrh	r1, [r7, #10]
 8007244:	4b52      	ldr	r3, [pc, #328]	@ (8007390 <HAL_I2C_Mem_Read+0x22c>)
 8007246:	9300      	str	r3, [sp, #0]
 8007248:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f000 fadf 	bl	8007810 <I2C_TransferConfig>
 8007252:	e00f      	b.n	8007274 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007258:	b29a      	uxth	r2, r3
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007262:	b2da      	uxtb	r2, r3
 8007264:	8979      	ldrh	r1, [r7, #10]
 8007266:	4b4a      	ldr	r3, [pc, #296]	@ (8007390 <HAL_I2C_Mem_Read+0x22c>)
 8007268:	9300      	str	r3, [sp, #0]
 800726a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f000 face 	bl	8007810 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	9300      	str	r3, [sp, #0]
 8007278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800727a:	2200      	movs	r2, #0
 800727c:	2104      	movs	r1, #4
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f000 f902 	bl	8007488 <I2C_WaitOnFlagUntilTimeout>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d001      	beq.n	800728e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e07c      	b.n	8007388 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007298:	b2d2      	uxtb	r2, r2
 800729a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a0:	1c5a      	adds	r2, r3, #1
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072aa:	3b01      	subs	r3, #1
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	3b01      	subs	r3, #1
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d034      	beq.n	8007334 <HAL_I2C_Mem_Read+0x1d0>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d130      	bne.n	8007334 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	9300      	str	r3, [sp, #0]
 80072d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d8:	2200      	movs	r2, #0
 80072da:	2180      	movs	r1, #128	@ 0x80
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f000 f8d3 	bl	8007488 <I2C_WaitOnFlagUntilTimeout>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d001      	beq.n	80072ec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e04d      	b.n	8007388 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	2bff      	cmp	r3, #255	@ 0xff
 80072f4:	d90e      	bls.n	8007314 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	22ff      	movs	r2, #255	@ 0xff
 80072fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007300:	b2da      	uxtb	r2, r3
 8007302:	8979      	ldrh	r1, [r7, #10]
 8007304:	2300      	movs	r3, #0
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f000 fa7f 	bl	8007810 <I2C_TransferConfig>
 8007312:	e00f      	b.n	8007334 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007318:	b29a      	uxth	r2, r3
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007322:	b2da      	uxtb	r2, r3
 8007324:	8979      	ldrh	r1, [r7, #10]
 8007326:	2300      	movs	r3, #0
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f000 fa6e 	bl	8007810 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007338:	b29b      	uxth	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	d19a      	bne.n	8007274 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800733e:	697a      	ldr	r2, [r7, #20]
 8007340:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007342:	68f8      	ldr	r0, [r7, #12]
 8007344:	f000 f940 	bl	80075c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d001      	beq.n	8007352 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e01a      	b.n	8007388 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2220      	movs	r2, #32
 8007358:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	6859      	ldr	r1, [r3, #4]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	4b0b      	ldr	r3, [pc, #44]	@ (8007394 <HAL_I2C_Mem_Read+0x230>)
 8007366:	400b      	ands	r3, r1
 8007368:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2220      	movs	r2, #32
 800736e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2200      	movs	r2, #0
 800737e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007382:	2300      	movs	r3, #0
 8007384:	e000      	b.n	8007388 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007386:	2302      	movs	r3, #2
  }
}
 8007388:	4618      	mov	r0, r3
 800738a:	3718      	adds	r7, #24
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	80002400 	.word	0x80002400
 8007394:	fe00e800 	.word	0xfe00e800

08007398 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b086      	sub	sp, #24
 800739c:	af02      	add	r7, sp, #8
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	4608      	mov	r0, r1
 80073a2:	4611      	mov	r1, r2
 80073a4:	461a      	mov	r2, r3
 80073a6:	4603      	mov	r3, r0
 80073a8:	817b      	strh	r3, [r7, #10]
 80073aa:	460b      	mov	r3, r1
 80073ac:	813b      	strh	r3, [r7, #8]
 80073ae:	4613      	mov	r3, r2
 80073b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80073b2:	88fb      	ldrh	r3, [r7, #6]
 80073b4:	b2da      	uxtb	r2, r3
 80073b6:	8979      	ldrh	r1, [r7, #10]
 80073b8:	4b20      	ldr	r3, [pc, #128]	@ (800743c <I2C_RequestMemoryRead+0xa4>)
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	2300      	movs	r3, #0
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f000 fa26 	bl	8007810 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073c4:	69fa      	ldr	r2, [r7, #28]
 80073c6:	69b9      	ldr	r1, [r7, #24]
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f000 f8b6 	bl	800753a <I2C_WaitOnTXISFlagUntilTimeout>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d001      	beq.n	80073d8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e02c      	b.n	8007432 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80073d8:	88fb      	ldrh	r3, [r7, #6]
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d105      	bne.n	80073ea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80073de:	893b      	ldrh	r3, [r7, #8]
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80073e8:	e015      	b.n	8007416 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80073ea:	893b      	ldrh	r3, [r7, #8]
 80073ec:	0a1b      	lsrs	r3, r3, #8
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	b2da      	uxtb	r2, r3
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073f8:	69fa      	ldr	r2, [r7, #28]
 80073fa:	69b9      	ldr	r1, [r7, #24]
 80073fc:	68f8      	ldr	r0, [r7, #12]
 80073fe:	f000 f89c 	bl	800753a <I2C_WaitOnTXISFlagUntilTimeout>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d001      	beq.n	800740c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e012      	b.n	8007432 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800740c:	893b      	ldrh	r3, [r7, #8]
 800740e:	b2da      	uxtb	r2, r3
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	9300      	str	r3, [sp, #0]
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	2200      	movs	r2, #0
 800741e:	2140      	movs	r1, #64	@ 0x40
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f000 f831 	bl	8007488 <I2C_WaitOnFlagUntilTimeout>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d001      	beq.n	8007430 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	e000      	b.n	8007432 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	80002000 	.word	0x80002000

08007440 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	f003 0302 	and.w	r3, r3, #2
 8007452:	2b02      	cmp	r3, #2
 8007454:	d103      	bne.n	800745e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2200      	movs	r2, #0
 800745c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	699b      	ldr	r3, [r3, #24]
 8007464:	f003 0301 	and.w	r3, r3, #1
 8007468:	2b01      	cmp	r3, #1
 800746a:	d007      	beq.n	800747c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	699a      	ldr	r2, [r3, #24]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f042 0201 	orr.w	r2, r2, #1
 800747a:	619a      	str	r2, [r3, #24]
  }
}
 800747c:	bf00      	nop
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	603b      	str	r3, [r7, #0]
 8007494:	4613      	mov	r3, r2
 8007496:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007498:	e03b      	b.n	8007512 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800749a:	69ba      	ldr	r2, [r7, #24]
 800749c:	6839      	ldr	r1, [r7, #0]
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	f000 f8d6 	bl	8007650 <I2C_IsErrorOccurred>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d001      	beq.n	80074ae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e041      	b.n	8007532 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074b4:	d02d      	beq.n	8007512 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074b6:	f7fc ff65 	bl	8004384 <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	683a      	ldr	r2, [r7, #0]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d302      	bcc.n	80074cc <I2C_WaitOnFlagUntilTimeout+0x44>
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d122      	bne.n	8007512 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	699a      	ldr	r2, [r3, #24]
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	4013      	ands	r3, r2
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	429a      	cmp	r2, r3
 80074da:	bf0c      	ite	eq
 80074dc:	2301      	moveq	r3, #1
 80074de:	2300      	movne	r3, #0
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	461a      	mov	r2, r3
 80074e4:	79fb      	ldrb	r3, [r7, #7]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d113      	bne.n	8007512 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074ee:	f043 0220 	orr.w	r2, r3, #32
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2220      	movs	r2, #32
 80074fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e00f      	b.n	8007532 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	699a      	ldr	r2, [r3, #24]
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	4013      	ands	r3, r2
 800751c:	68ba      	ldr	r2, [r7, #8]
 800751e:	429a      	cmp	r2, r3
 8007520:	bf0c      	ite	eq
 8007522:	2301      	moveq	r3, #1
 8007524:	2300      	movne	r3, #0
 8007526:	b2db      	uxtb	r3, r3
 8007528:	461a      	mov	r2, r3
 800752a:	79fb      	ldrb	r3, [r7, #7]
 800752c:	429a      	cmp	r2, r3
 800752e:	d0b4      	beq.n	800749a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b084      	sub	sp, #16
 800753e:	af00      	add	r7, sp, #0
 8007540:	60f8      	str	r0, [r7, #12]
 8007542:	60b9      	str	r1, [r7, #8]
 8007544:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007546:	e033      	b.n	80075b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	68b9      	ldr	r1, [r7, #8]
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f000 f87f 	bl	8007650 <I2C_IsErrorOccurred>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d001      	beq.n	800755c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e031      	b.n	80075c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007562:	d025      	beq.n	80075b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007564:	f7fc ff0e 	bl	8004384 <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	429a      	cmp	r2, r3
 8007572:	d302      	bcc.n	800757a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d11a      	bne.n	80075b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	f003 0302 	and.w	r3, r3, #2
 8007584:	2b02      	cmp	r3, #2
 8007586:	d013      	beq.n	80075b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800758c:	f043 0220 	orr.w	r2, r3, #32
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2220      	movs	r2, #32
 8007598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e007      	b.n	80075c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	699b      	ldr	r3, [r3, #24]
 80075b6:	f003 0302 	and.w	r3, r3, #2
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	d1c4      	bne.n	8007548 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3710      	adds	r7, #16
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80075d4:	e02f      	b.n	8007636 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	68b9      	ldr	r1, [r7, #8]
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f000 f838 	bl	8007650 <I2C_IsErrorOccurred>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d001      	beq.n	80075ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e02d      	b.n	8007646 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075ea:	f7fc fecb 	bl	8004384 <HAL_GetTick>
 80075ee:	4602      	mov	r2, r0
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d302      	bcc.n	8007600 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d11a      	bne.n	8007636 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	f003 0320 	and.w	r3, r3, #32
 800760a:	2b20      	cmp	r3, #32
 800760c:	d013      	beq.n	8007636 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007612:	f043 0220 	orr.w	r2, r3, #32
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2220      	movs	r2, #32
 800761e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e007      	b.n	8007646 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	699b      	ldr	r3, [r3, #24]
 800763c:	f003 0320 	and.w	r3, r3, #32
 8007640:	2b20      	cmp	r3, #32
 8007642:	d1c8      	bne.n	80075d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
	...

08007650 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b08a      	sub	sp, #40	@ 0x28
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800765c:	2300      	movs	r3, #0
 800765e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800766a:	2300      	movs	r3, #0
 800766c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	f003 0310 	and.w	r3, r3, #16
 8007678:	2b00      	cmp	r3, #0
 800767a:	d068      	beq.n	800774e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2210      	movs	r2, #16
 8007682:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007684:	e049      	b.n	800771a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800768c:	d045      	beq.n	800771a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800768e:	f7fc fe79 	bl	8004384 <HAL_GetTick>
 8007692:	4602      	mov	r2, r0
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	68ba      	ldr	r2, [r7, #8]
 800769a:	429a      	cmp	r2, r3
 800769c:	d302      	bcc.n	80076a4 <I2C_IsErrorOccurred+0x54>
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d13a      	bne.n	800771a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80076ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80076b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	699b      	ldr	r3, [r3, #24]
 80076be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80076c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076c6:	d121      	bne.n	800770c <I2C_IsErrorOccurred+0xbc>
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80076ce:	d01d      	beq.n	800770c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80076d0:	7cfb      	ldrb	r3, [r7, #19]
 80076d2:	2b20      	cmp	r3, #32
 80076d4:	d01a      	beq.n	800770c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80076e4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80076e6:	f7fc fe4d 	bl	8004384 <HAL_GetTick>
 80076ea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80076ec:	e00e      	b.n	800770c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80076ee:	f7fc fe49 	bl	8004384 <HAL_GetTick>
 80076f2:	4602      	mov	r2, r0
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	1ad3      	subs	r3, r2, r3
 80076f8:	2b19      	cmp	r3, #25
 80076fa:	d907      	bls.n	800770c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80076fc:	6a3b      	ldr	r3, [r7, #32]
 80076fe:	f043 0320 	orr.w	r3, r3, #32
 8007702:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800770a:	e006      	b.n	800771a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	699b      	ldr	r3, [r3, #24]
 8007712:	f003 0320 	and.w	r3, r3, #32
 8007716:	2b20      	cmp	r3, #32
 8007718:	d1e9      	bne.n	80076ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	699b      	ldr	r3, [r3, #24]
 8007720:	f003 0320 	and.w	r3, r3, #32
 8007724:	2b20      	cmp	r3, #32
 8007726:	d003      	beq.n	8007730 <I2C_IsErrorOccurred+0xe0>
 8007728:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800772c:	2b00      	cmp	r3, #0
 800772e:	d0aa      	beq.n	8007686 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007730:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007734:	2b00      	cmp	r3, #0
 8007736:	d103      	bne.n	8007740 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2220      	movs	r2, #32
 800773e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	f043 0304 	orr.w	r3, r3, #4
 8007746:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	699b      	ldr	r3, [r3, #24]
 8007754:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00b      	beq.n	8007778 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007760:	6a3b      	ldr	r3, [r7, #32]
 8007762:	f043 0301 	orr.w	r3, r3, #1
 8007766:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007770:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800777e:	2b00      	cmp	r3, #0
 8007780:	d00b      	beq.n	800779a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007782:	6a3b      	ldr	r3, [r7, #32]
 8007784:	f043 0308 	orr.w	r3, r3, #8
 8007788:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007792:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00b      	beq.n	80077bc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80077a4:	6a3b      	ldr	r3, [r7, #32]
 80077a6:	f043 0302 	orr.w	r3, r3, #2
 80077aa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80077b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80077bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d01c      	beq.n	80077fe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	f7ff fe3b 	bl	8007440 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	6859      	ldr	r1, [r3, #4]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	4b0d      	ldr	r3, [pc, #52]	@ (800780c <I2C_IsErrorOccurred+0x1bc>)
 80077d6:	400b      	ands	r3, r1
 80077d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077de:	6a3b      	ldr	r3, [r7, #32]
 80077e0:	431a      	orrs	r2, r3
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2220      	movs	r2, #32
 80077ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80077fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007802:	4618      	mov	r0, r3
 8007804:	3728      	adds	r7, #40	@ 0x28
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	fe00e800 	.word	0xfe00e800

08007810 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007810:	b480      	push	{r7}
 8007812:	b087      	sub	sp, #28
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	607b      	str	r3, [r7, #4]
 800781a:	460b      	mov	r3, r1
 800781c:	817b      	strh	r3, [r7, #10]
 800781e:	4613      	mov	r3, r2
 8007820:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007822:	897b      	ldrh	r3, [r7, #10]
 8007824:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007828:	7a7b      	ldrb	r3, [r7, #9]
 800782a:	041b      	lsls	r3, r3, #16
 800782c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007830:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	4313      	orrs	r3, r2
 800783a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800783e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	685a      	ldr	r2, [r3, #4]
 8007846:	6a3b      	ldr	r3, [r7, #32]
 8007848:	0d5b      	lsrs	r3, r3, #21
 800784a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800784e:	4b08      	ldr	r3, [pc, #32]	@ (8007870 <I2C_TransferConfig+0x60>)
 8007850:	430b      	orrs	r3, r1
 8007852:	43db      	mvns	r3, r3
 8007854:	ea02 0103 	and.w	r1, r2, r3
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	697a      	ldr	r2, [r7, #20]
 800785e:	430a      	orrs	r2, r1
 8007860:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007862:	bf00      	nop
 8007864:	371c      	adds	r7, #28
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr
 800786e:	bf00      	nop
 8007870:	03ff63ff 	.word	0x03ff63ff

08007874 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007884:	b2db      	uxtb	r3, r3
 8007886:	2b20      	cmp	r3, #32
 8007888:	d138      	bne.n	80078fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007890:	2b01      	cmp	r3, #1
 8007892:	d101      	bne.n	8007898 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007894:	2302      	movs	r3, #2
 8007896:	e032      	b.n	80078fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2224      	movs	r2, #36	@ 0x24
 80078a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f022 0201 	bic.w	r2, r2, #1
 80078b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80078c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	6819      	ldr	r1, [r3, #0]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	430a      	orrs	r2, r1
 80078d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f042 0201 	orr.w	r2, r2, #1
 80078e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2220      	movs	r2, #32
 80078ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80078f8:	2300      	movs	r3, #0
 80078fa:	e000      	b.n	80078fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80078fc:	2302      	movs	r3, #2
  }
}
 80078fe:	4618      	mov	r0, r3
 8007900:	370c      	adds	r7, #12
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr

0800790a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800790a:	b480      	push	{r7}
 800790c:	b085      	sub	sp, #20
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
 8007912:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800791a:	b2db      	uxtb	r3, r3
 800791c:	2b20      	cmp	r3, #32
 800791e:	d139      	bne.n	8007994 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007926:	2b01      	cmp	r3, #1
 8007928:	d101      	bne.n	800792e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800792a:	2302      	movs	r3, #2
 800792c:	e033      	b.n	8007996 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2201      	movs	r2, #1
 8007932:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2224      	movs	r2, #36	@ 0x24
 800793a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f022 0201 	bic.w	r2, r2, #1
 800794c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800795c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	021b      	lsls	r3, r3, #8
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	4313      	orrs	r3, r2
 8007966:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f042 0201 	orr.w	r2, r2, #1
 800797e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2220      	movs	r2, #32
 8007984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007990:	2300      	movs	r3, #0
 8007992:	e000      	b.n	8007996 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007994:	2302      	movs	r3, #2
  }
}
 8007996:	4618      	mov	r0, r3
 8007998:	3714      	adds	r7, #20
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr
	...

080079a4 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079ac:	2300      	movs	r3, #0
 80079ae:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d101      	bne.n	80079ba <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e0bb      	b.n	8007b32 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	2b05      	cmp	r3, #5
 80079c4:	d101      	bne.n	80079ca <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	e0b3      	b.n	8007b32 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d101      	bne.n	80079da <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e0ab      	b.n	8007b32 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079da:	4b58      	ldr	r3, [pc, #352]	@ (8007b3c <HAL_OPAMP_Init+0x198>)
 80079dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079de:	4a57      	ldr	r2, [pc, #348]	@ (8007b3c <HAL_OPAMP_Init+0x198>)
 80079e0:	f043 0301 	orr.w	r3, r3, #1
 80079e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80079e6:	4b55      	ldr	r3, [pc, #340]	@ (8007b3c <HAL_OPAMP_Init+0x198>)
 80079e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079ea:	f003 0301 	and.w	r3, r3, #1
 80079ee:	60bb      	str	r3, [r7, #8]
 80079f0:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d103      	bne.n	8007a06 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f7fb fe88 	bl	800371c <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	2b40      	cmp	r3, #64	@ 0x40
 8007a12:	d003      	beq.n	8007a1c <HAL_OPAMP_Init+0x78>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	2b60      	cmp	r3, #96	@ 0x60
 8007a1a:	d133      	bne.n	8007a84 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f023 0110 	bic.w	r1, r3, #16
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	430a      	orrs	r2, r1
 8007a30:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	4b41      	ldr	r3, [pc, #260]	@ (8007b40 <HAL_OPAMP_Init+0x19c>)
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	6851      	ldr	r1, [r2, #4]
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	6892      	ldr	r2, [r2, #8]
 8007a44:	4311      	orrs	r1, r2
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	6912      	ldr	r2, [r2, #16]
 8007a4a:	430a      	orrs	r2, r1
 8007a4c:	6879      	ldr	r1, [r7, #4]
 8007a4e:	7d09      	ldrb	r1, [r1, #20]
 8007a50:	2901      	cmp	r1, #1
 8007a52:	d102      	bne.n	8007a5a <HAL_OPAMP_Init+0xb6>
 8007a54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007a58:	e000      	b.n	8007a5c <HAL_OPAMP_Init+0xb8>
 8007a5a:	2100      	movs	r1, #0
 8007a5c:	4311      	orrs	r1, r2
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007a62:	4311      	orrs	r1, r2
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007a68:	4311      	orrs	r1, r2
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007a6e:	04d2      	lsls	r2, r2, #19
 8007a70:	4311      	orrs	r1, r2
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007a76:	0612      	lsls	r2, r2, #24
 8007a78:	4311      	orrs	r1, r2
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	6812      	ldr	r2, [r2, #0]
 8007a7e:	430b      	orrs	r3, r1
 8007a80:	6013      	str	r3, [r2, #0]
 8007a82:	e035      	b.n	8007af0 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f023 0110 	bic.w	r1, r3, #16
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	430a      	orrs	r2, r1
 8007a98:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	4b27      	ldr	r3, [pc, #156]	@ (8007b40 <HAL_OPAMP_Init+0x19c>)
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	6851      	ldr	r1, [r2, #4]
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	6892      	ldr	r2, [r2, #8]
 8007aac:	4311      	orrs	r1, r2
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	68d2      	ldr	r2, [r2, #12]
 8007ab2:	4311      	orrs	r1, r2
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	6912      	ldr	r2, [r2, #16]
 8007ab8:	430a      	orrs	r2, r1
 8007aba:	6879      	ldr	r1, [r7, #4]
 8007abc:	7d09      	ldrb	r1, [r1, #20]
 8007abe:	2901      	cmp	r1, #1
 8007ac0:	d102      	bne.n	8007ac8 <HAL_OPAMP_Init+0x124>
 8007ac2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007ac6:	e000      	b.n	8007aca <HAL_OPAMP_Init+0x126>
 8007ac8:	2100      	movs	r1, #0
 8007aca:	4311      	orrs	r1, r2
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007ad0:	4311      	orrs	r1, r2
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007ad6:	4311      	orrs	r1, r2
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007adc:	04d2      	lsls	r2, r2, #19
 8007ade:	4311      	orrs	r1, r2
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007ae4:	0612      	lsls	r2, r2, #24
 8007ae6:	4311      	orrs	r1, r2
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	6812      	ldr	r2, [r2, #0]
 8007aec:	430b      	orrs	r3, r1
 8007aee:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	699b      	ldr	r3, [r3, #24]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	db10      	blt.n	8007b1c <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	699a      	ldr	r2, [r3, #24]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	69db      	ldr	r3, [r3, #28]
 8007b0c:	431a      	orrs	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a1b      	ldr	r3, [r3, #32]
 8007b12:	431a      	orrs	r2, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	430a      	orrs	r2, r1
 8007b1a:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d103      	bne.n	8007b30 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8007b30:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	40021000 	.word	0x40021000
 8007b40:	e0003e11 	.word	0xe0003e11

08007b44 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e0c0      	b.n	8007cd8 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d106      	bne.n	8007b70 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f009 fc62 	bl	8011434 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2203      	movs	r2, #3
 8007b74:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f005 ffe6 	bl	800db4e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b82:	2300      	movs	r3, #0
 8007b84:	73fb      	strb	r3, [r7, #15]
 8007b86:	e03e      	b.n	8007c06 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007b88:	7bfa      	ldrb	r2, [r7, #15]
 8007b8a:	6879      	ldr	r1, [r7, #4]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4413      	add	r3, r2
 8007b92:	00db      	lsls	r3, r3, #3
 8007b94:	440b      	add	r3, r1
 8007b96:	3311      	adds	r3, #17
 8007b98:	2201      	movs	r2, #1
 8007b9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007b9c:	7bfa      	ldrb	r2, [r7, #15]
 8007b9e:	6879      	ldr	r1, [r7, #4]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	4413      	add	r3, r2
 8007ba6:	00db      	lsls	r3, r3, #3
 8007ba8:	440b      	add	r3, r1
 8007baa:	3310      	adds	r3, #16
 8007bac:	7bfa      	ldrb	r2, [r7, #15]
 8007bae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007bb0:	7bfa      	ldrb	r2, [r7, #15]
 8007bb2:	6879      	ldr	r1, [r7, #4]
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	4413      	add	r3, r2
 8007bba:	00db      	lsls	r3, r3, #3
 8007bbc:	440b      	add	r3, r1
 8007bbe:	3313      	adds	r3, #19
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007bc4:	7bfa      	ldrb	r2, [r7, #15]
 8007bc6:	6879      	ldr	r1, [r7, #4]
 8007bc8:	4613      	mov	r3, r2
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	4413      	add	r3, r2
 8007bce:	00db      	lsls	r3, r3, #3
 8007bd0:	440b      	add	r3, r1
 8007bd2:	3320      	adds	r3, #32
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007bd8:	7bfa      	ldrb	r2, [r7, #15]
 8007bda:	6879      	ldr	r1, [r7, #4]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	4413      	add	r3, r2
 8007be2:	00db      	lsls	r3, r3, #3
 8007be4:	440b      	add	r3, r1
 8007be6:	3324      	adds	r3, #36	@ 0x24
 8007be8:	2200      	movs	r2, #0
 8007bea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007bec:	7bfb      	ldrb	r3, [r7, #15]
 8007bee:	6879      	ldr	r1, [r7, #4]
 8007bf0:	1c5a      	adds	r2, r3, #1
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	00db      	lsls	r3, r3, #3
 8007bfa:	440b      	add	r3, r1
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c00:	7bfb      	ldrb	r3, [r7, #15]
 8007c02:	3301      	adds	r3, #1
 8007c04:	73fb      	strb	r3, [r7, #15]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	791b      	ldrb	r3, [r3, #4]
 8007c0a:	7bfa      	ldrb	r2, [r7, #15]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d3bb      	bcc.n	8007b88 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c10:	2300      	movs	r3, #0
 8007c12:	73fb      	strb	r3, [r7, #15]
 8007c14:	e044      	b.n	8007ca0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007c16:	7bfa      	ldrb	r2, [r7, #15]
 8007c18:	6879      	ldr	r1, [r7, #4]
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	4413      	add	r3, r2
 8007c20:	00db      	lsls	r3, r3, #3
 8007c22:	440b      	add	r3, r1
 8007c24:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8007c28:	2200      	movs	r2, #0
 8007c2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007c2c:	7bfa      	ldrb	r2, [r7, #15]
 8007c2e:	6879      	ldr	r1, [r7, #4]
 8007c30:	4613      	mov	r3, r2
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	4413      	add	r3, r2
 8007c36:	00db      	lsls	r3, r3, #3
 8007c38:	440b      	add	r3, r1
 8007c3a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007c3e:	7bfa      	ldrb	r2, [r7, #15]
 8007c40:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007c42:	7bfa      	ldrb	r2, [r7, #15]
 8007c44:	6879      	ldr	r1, [r7, #4]
 8007c46:	4613      	mov	r3, r2
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	4413      	add	r3, r2
 8007c4c:	00db      	lsls	r3, r3, #3
 8007c4e:	440b      	add	r3, r1
 8007c50:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8007c54:	2200      	movs	r2, #0
 8007c56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007c58:	7bfa      	ldrb	r2, [r7, #15]
 8007c5a:	6879      	ldr	r1, [r7, #4]
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	4413      	add	r3, r2
 8007c62:	00db      	lsls	r3, r3, #3
 8007c64:	440b      	add	r3, r1
 8007c66:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007c6e:	7bfa      	ldrb	r2, [r7, #15]
 8007c70:	6879      	ldr	r1, [r7, #4]
 8007c72:	4613      	mov	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4413      	add	r3, r2
 8007c78:	00db      	lsls	r3, r3, #3
 8007c7a:	440b      	add	r3, r1
 8007c7c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007c80:	2200      	movs	r2, #0
 8007c82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007c84:	7bfa      	ldrb	r2, [r7, #15]
 8007c86:	6879      	ldr	r1, [r7, #4]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	4413      	add	r3, r2
 8007c8e:	00db      	lsls	r3, r3, #3
 8007c90:	440b      	add	r3, r1
 8007c92:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8007c96:	2200      	movs	r2, #0
 8007c98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c9a:	7bfb      	ldrb	r3, [r7, #15]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	73fb      	strb	r3, [r7, #15]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	791b      	ldrb	r3, [r3, #4]
 8007ca4:	7bfa      	ldrb	r2, [r7, #15]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d3b5      	bcc.n	8007c16 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6818      	ldr	r0, [r3, #0]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	3304      	adds	r3, #4
 8007cb2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007cb6:	f005 ff65 	bl	800db84 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	7a9b      	ldrb	r3, [r3, #10]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d102      	bne.n	8007cd6 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f001 fc0e 	bl	80094f2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3710      	adds	r7, #16
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d101      	bne.n	8007cf6 <HAL_PCD_Start+0x16>
 8007cf2:	2302      	movs	r3, #2
 8007cf4:	e012      	b.n	8007d1c <HAL_PCD_Start+0x3c>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4618      	mov	r0, r3
 8007d04:	f005 ff0c 	bl	800db20 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f007 fce9 	bl	800f6e4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3708      	adds	r7, #8
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4618      	mov	r0, r3
 8007d32:	f007 fcee 	bl	800f712 <USB_ReadInterrupts>
 8007d36:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d003      	beq.n	8007d4a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fb06 	bl	8008354 <PCD_EP_ISR_Handler>

    return;
 8007d48:	e110      	b.n	8007f6c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d013      	beq.n	8007d7c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d66:	b292      	uxth	r2, r2
 8007d68:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f009 fbf2 	bl	8011556 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8007d72:	2100      	movs	r1, #0
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f8fc 	bl	8007f72 <HAL_PCD_SetAddress>

    return;
 8007d7a:	e0f7      	b.n	8007f6c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00c      	beq.n	8007da0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007d98:	b292      	uxth	r2, r2
 8007d9a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8007d9e:	e0e5      	b.n	8007f6c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00c      	beq.n	8007dc4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007dbc:	b292      	uxth	r2, r2
 8007dbe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8007dc2:	e0d3      	b.n	8007f6c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d034      	beq.n	8007e38 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f022 0204 	bic.w	r2, r2, #4
 8007de0:	b292      	uxth	r2, r2
 8007de2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f022 0208 	bic.w	r2, r2, #8
 8007df8:	b292      	uxth	r2, r2
 8007dfa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d107      	bne.n	8007e18 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007e10:	2100      	movs	r1, #0
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f009 fd92 	bl	801193c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f009 fbd5 	bl	80115c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007e26:	b29a      	uxth	r2, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007e30:	b292      	uxth	r2, r2
 8007e32:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8007e36:	e099      	b.n	8007f6c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d027      	beq.n	8007e92 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007e4a:	b29a      	uxth	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f042 0208 	orr.w	r2, r2, #8
 8007e54:	b292      	uxth	r2, r2
 8007e56:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007e6c:	b292      	uxth	r2, r2
 8007e6e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f042 0204 	orr.w	r2, r2, #4
 8007e84:	b292      	uxth	r2, r2
 8007e86:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f009 fb82 	bl	8011594 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007e90:	e06c      	b.n	8007f6c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d040      	beq.n	8007f1e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007eae:	b292      	uxth	r2, r2
 8007eb0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d12b      	bne.n	8007f16 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007ec6:	b29a      	uxth	r2, r3
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f042 0204 	orr.w	r2, r2, #4
 8007ed0:	b292      	uxth	r2, r2
 8007ed2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f042 0208 	orr.w	r2, r2, #8
 8007ee8:	b292      	uxth	r2, r2
 8007eea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	089b      	lsrs	r3, r3, #2
 8007f02:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007f0c:	2101      	movs	r1, #1
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f009 fd14 	bl	801193c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8007f14:	e02a      	b.n	8007f6c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f009 fb3c 	bl	8011594 <HAL_PCD_SuspendCallback>
    return;
 8007f1c:	e026      	b.n	8007f6c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00f      	beq.n	8007f48 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007f30:	b29a      	uxth	r2, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007f3a:	b292      	uxth	r2, r2
 8007f3c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f009 fafa 	bl	801153a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007f46:	e011      	b.n	8007f6c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00c      	beq.n	8007f6c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007f64:	b292      	uxth	r2, r2
 8007f66:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8007f6a:	bf00      	nop
  }
}
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b082      	sub	sp, #8
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d101      	bne.n	8007f8c <HAL_PCD_SetAddress+0x1a>
 8007f88:	2302      	movs	r3, #2
 8007f8a:	e012      	b.n	8007fb2 <HAL_PCD_SetAddress+0x40>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	78fa      	ldrb	r2, [r7, #3]
 8007f98:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	78fa      	ldrb	r2, [r7, #3]
 8007fa0:	4611      	mov	r1, r2
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f007 fb8a 	bl	800f6bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3708      	adds	r7, #8
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b084      	sub	sp, #16
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
 8007fc2:	4608      	mov	r0, r1
 8007fc4:	4611      	mov	r1, r2
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	4603      	mov	r3, r0
 8007fca:	70fb      	strb	r3, [r7, #3]
 8007fcc:	460b      	mov	r3, r1
 8007fce:	803b      	strh	r3, [r7, #0]
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007fd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	da0e      	bge.n	8007ffe <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007fe0:	78fb      	ldrb	r3, [r7, #3]
 8007fe2:	f003 0207 	and.w	r2, r3, #7
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	4413      	add	r3, r2
 8007fec:	00db      	lsls	r3, r3, #3
 8007fee:	3310      	adds	r3, #16
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	705a      	strb	r2, [r3, #1]
 8007ffc:	e00e      	b.n	800801c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ffe:	78fb      	ldrb	r3, [r7, #3]
 8008000:	f003 0207 	and.w	r2, r3, #7
 8008004:	4613      	mov	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4413      	add	r3, r2
 800800a:	00db      	lsls	r3, r3, #3
 800800c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	4413      	add	r3, r2
 8008014:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2200      	movs	r2, #0
 800801a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800801c:	78fb      	ldrb	r3, [r7, #3]
 800801e:	f003 0307 	and.w	r3, r3, #7
 8008022:	b2da      	uxtb	r2, r3
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8008028:	883b      	ldrh	r3, [r7, #0]
 800802a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	78ba      	ldrb	r2, [r7, #2]
 8008036:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008038:	78bb      	ldrb	r3, [r7, #2]
 800803a:	2b02      	cmp	r3, #2
 800803c:	d102      	bne.n	8008044 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2200      	movs	r2, #0
 8008042:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800804a:	2b01      	cmp	r3, #1
 800804c:	d101      	bne.n	8008052 <HAL_PCD_EP_Open+0x98>
 800804e:	2302      	movs	r3, #2
 8008050:	e00e      	b.n	8008070 <HAL_PCD_EP_Open+0xb6>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2201      	movs	r2, #1
 8008056:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	68f9      	ldr	r1, [r7, #12]
 8008060:	4618      	mov	r0, r3
 8008062:	f005 fdad 	bl	800dbc0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800806e:	7afb      	ldrb	r3, [r7, #11]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3710      	adds	r7, #16
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	460b      	mov	r3, r1
 8008082:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008084:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008088:	2b00      	cmp	r3, #0
 800808a:	da0e      	bge.n	80080aa <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800808c:	78fb      	ldrb	r3, [r7, #3]
 800808e:	f003 0207 	and.w	r2, r3, #7
 8008092:	4613      	mov	r3, r2
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	4413      	add	r3, r2
 8008098:	00db      	lsls	r3, r3, #3
 800809a:	3310      	adds	r3, #16
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	4413      	add	r3, r2
 80080a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2201      	movs	r2, #1
 80080a6:	705a      	strb	r2, [r3, #1]
 80080a8:	e00e      	b.n	80080c8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80080aa:	78fb      	ldrb	r3, [r7, #3]
 80080ac:	f003 0207 	and.w	r2, r3, #7
 80080b0:	4613      	mov	r3, r2
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	4413      	add	r3, r2
 80080b6:	00db      	lsls	r3, r3, #3
 80080b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	4413      	add	r3, r2
 80080c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2200      	movs	r2, #0
 80080c6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80080c8:	78fb      	ldrb	r3, [r7, #3]
 80080ca:	f003 0307 	and.w	r3, r3, #7
 80080ce:	b2da      	uxtb	r2, r3
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d101      	bne.n	80080e2 <HAL_PCD_EP_Close+0x6a>
 80080de:	2302      	movs	r3, #2
 80080e0:	e00e      	b.n	8008100 <HAL_PCD_EP_Close+0x88>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2201      	movs	r2, #1
 80080e6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68f9      	ldr	r1, [r7, #12]
 80080f0:	4618      	mov	r0, r3
 80080f2:	f006 fa4d 	bl	800e590 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b086      	sub	sp, #24
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	607a      	str	r2, [r7, #4]
 8008112:	603b      	str	r3, [r7, #0]
 8008114:	460b      	mov	r3, r1
 8008116:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008118:	7afb      	ldrb	r3, [r7, #11]
 800811a:	f003 0207 	and.w	r2, r3, #7
 800811e:	4613      	mov	r3, r2
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	4413      	add	r3, r2
 8008124:	00db      	lsls	r3, r3, #3
 8008126:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	4413      	add	r3, r2
 800812e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	683a      	ldr	r2, [r7, #0]
 800813a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	2200      	movs	r2, #0
 8008140:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	2200      	movs	r2, #0
 8008146:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008148:	7afb      	ldrb	r3, [r7, #11]
 800814a:	f003 0307 	and.w	r3, r3, #7
 800814e:	b2da      	uxtb	r2, r3
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	6979      	ldr	r1, [r7, #20]
 800815a:	4618      	mov	r0, r3
 800815c:	f006 fc05 	bl	800e96a <USB_EPStartXfer>

  return HAL_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3718      	adds	r7, #24
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800816a:	b480      	push	{r7}
 800816c:	b083      	sub	sp, #12
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	460b      	mov	r3, r1
 8008174:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008176:	78fb      	ldrb	r3, [r7, #3]
 8008178:	f003 0207 	and.w	r2, r3, #7
 800817c:	6879      	ldr	r1, [r7, #4]
 800817e:	4613      	mov	r3, r2
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	4413      	add	r3, r2
 8008184:	00db      	lsls	r3, r3, #3
 8008186:	440b      	add	r3, r1
 8008188:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800818c:	681b      	ldr	r3, [r3, #0]
}
 800818e:	4618      	mov	r0, r3
 8008190:	370c      	adds	r7, #12
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr

0800819a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b086      	sub	sp, #24
 800819e:	af00      	add	r7, sp, #0
 80081a0:	60f8      	str	r0, [r7, #12]
 80081a2:	607a      	str	r2, [r7, #4]
 80081a4:	603b      	str	r3, [r7, #0]
 80081a6:	460b      	mov	r3, r1
 80081a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80081aa:	7afb      	ldrb	r3, [r7, #11]
 80081ac:	f003 0207 	and.w	r2, r3, #7
 80081b0:	4613      	mov	r3, r2
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	4413      	add	r3, r2
 80081b6:	00db      	lsls	r3, r3, #3
 80081b8:	3310      	adds	r3, #16
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	4413      	add	r3, r2
 80081be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	683a      	ldr	r2, [r7, #0]
 80081ca:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	683a      	ldr	r2, [r7, #0]
 80081d8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	2200      	movs	r2, #0
 80081de:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	2201      	movs	r2, #1
 80081e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80081e6:	7afb      	ldrb	r3, [r7, #11]
 80081e8:	f003 0307 	and.w	r3, r3, #7
 80081ec:	b2da      	uxtb	r2, r3
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	6979      	ldr	r1, [r7, #20]
 80081f8:	4618      	mov	r0, r3
 80081fa:	f006 fbb6 	bl	800e96a <USB_EPStartXfer>

  return HAL_OK;
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	3718      	adds	r7, #24
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	460b      	mov	r3, r1
 8008212:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008214:	78fb      	ldrb	r3, [r7, #3]
 8008216:	f003 0307 	and.w	r3, r3, #7
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	7912      	ldrb	r2, [r2, #4]
 800821e:	4293      	cmp	r3, r2
 8008220:	d901      	bls.n	8008226 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008222:	2301      	movs	r3, #1
 8008224:	e03e      	b.n	80082a4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008226:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800822a:	2b00      	cmp	r3, #0
 800822c:	da0e      	bge.n	800824c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800822e:	78fb      	ldrb	r3, [r7, #3]
 8008230:	f003 0207 	and.w	r2, r3, #7
 8008234:	4613      	mov	r3, r2
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	4413      	add	r3, r2
 800823a:	00db      	lsls	r3, r3, #3
 800823c:	3310      	adds	r3, #16
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	4413      	add	r3, r2
 8008242:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2201      	movs	r2, #1
 8008248:	705a      	strb	r2, [r3, #1]
 800824a:	e00c      	b.n	8008266 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800824c:	78fa      	ldrb	r2, [r7, #3]
 800824e:	4613      	mov	r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	4413      	add	r3, r2
 8008254:	00db      	lsls	r3, r3, #3
 8008256:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	4413      	add	r3, r2
 800825e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2200      	movs	r2, #0
 8008264:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2201      	movs	r2, #1
 800826a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800826c:	78fb      	ldrb	r3, [r7, #3]
 800826e:	f003 0307 	and.w	r3, r3, #7
 8008272:	b2da      	uxtb	r2, r3
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800827e:	2b01      	cmp	r3, #1
 8008280:	d101      	bne.n	8008286 <HAL_PCD_EP_SetStall+0x7e>
 8008282:	2302      	movs	r3, #2
 8008284:	e00e      	b.n	80082a4 <HAL_PCD_EP_SetStall+0x9c>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2201      	movs	r2, #1
 800828a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	68f9      	ldr	r1, [r7, #12]
 8008294:	4618      	mov	r0, r3
 8008296:	f007 f917 	bl	800f4c8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	460b      	mov	r3, r1
 80082b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80082b8:	78fb      	ldrb	r3, [r7, #3]
 80082ba:	f003 030f 	and.w	r3, r3, #15
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	7912      	ldrb	r2, [r2, #4]
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d901      	bls.n	80082ca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	e040      	b.n	800834c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80082ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	da0e      	bge.n	80082f0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80082d2:	78fb      	ldrb	r3, [r7, #3]
 80082d4:	f003 0207 	and.w	r2, r3, #7
 80082d8:	4613      	mov	r3, r2
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	4413      	add	r3, r2
 80082de:	00db      	lsls	r3, r3, #3
 80082e0:	3310      	adds	r3, #16
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	4413      	add	r3, r2
 80082e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2201      	movs	r2, #1
 80082ec:	705a      	strb	r2, [r3, #1]
 80082ee:	e00e      	b.n	800830e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80082f0:	78fb      	ldrb	r3, [r7, #3]
 80082f2:	f003 0207 	and.w	r2, r3, #7
 80082f6:	4613      	mov	r3, r2
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	4413      	add	r3, r2
 80082fc:	00db      	lsls	r3, r3, #3
 80082fe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	4413      	add	r3, r2
 8008306:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2200      	movs	r2, #0
 800830c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2200      	movs	r2, #0
 8008312:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008314:	78fb      	ldrb	r3, [r7, #3]
 8008316:	f003 0307 	and.w	r3, r3, #7
 800831a:	b2da      	uxtb	r2, r3
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008326:	2b01      	cmp	r3, #1
 8008328:	d101      	bne.n	800832e <HAL_PCD_EP_ClrStall+0x82>
 800832a:	2302      	movs	r3, #2
 800832c:	e00e      	b.n	800834c <HAL_PCD_EP_ClrStall+0xa0>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2201      	movs	r2, #1
 8008332:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	68f9      	ldr	r1, [r7, #12]
 800833c:	4618      	mov	r0, r3
 800833e:	f007 f914 	bl	800f56a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	3710      	adds	r7, #16
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b092      	sub	sp, #72	@ 0x48
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800835c:	e333      	b.n	80089c6 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008366:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8008368:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800836a:	b2db      	uxtb	r3, r3
 800836c:	f003 030f 	and.w	r3, r3, #15
 8008370:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8008374:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8008378:	2b00      	cmp	r3, #0
 800837a:	f040 8108 	bne.w	800858e <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800837e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008380:	f003 0310 	and.w	r3, r3, #16
 8008384:	2b00      	cmp	r3, #0
 8008386:	d14c      	bne.n	8008422 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	881b      	ldrh	r3, [r3, #0]
 800838e:	b29b      	uxth	r3, r3
 8008390:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8008394:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008398:	813b      	strh	r3, [r7, #8]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	893b      	ldrh	r3, [r7, #8]
 80083a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	3310      	adds	r3, #16
 80083b0:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	461a      	mov	r2, r3
 80083be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	00db      	lsls	r3, r3, #3
 80083c4:	4413      	add	r3, r2
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	6812      	ldr	r2, [r2, #0]
 80083ca:	4413      	add	r3, r2
 80083cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80083d0:	881b      	ldrh	r3, [r3, #0]
 80083d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80083d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083d8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80083da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083dc:	695a      	ldr	r2, [r3, #20]
 80083de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083e0:	69db      	ldr	r3, [r3, #28]
 80083e2:	441a      	add	r2, r3
 80083e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083e6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80083e8:	2100      	movs	r1, #0
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f009 f88b 	bl	8011506 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	7b1b      	ldrb	r3, [r3, #12]
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f000 82e5 	beq.w	80089c6 <PCD_EP_ISR_Handler+0x672>
 80083fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	2b00      	cmp	r3, #0
 8008402:	f040 82e0 	bne.w	80089c6 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	7b1b      	ldrb	r3, [r3, #12]
 800840a:	b2db      	uxtb	r3, r3
 800840c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008410:	b2da      	uxtb	r2, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	731a      	strb	r2, [r3, #12]
 8008420:	e2d1      	b.n	80089c6 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008428:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	881b      	ldrh	r3, [r3, #0]
 8008430:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8008432:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008434:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008438:	2b00      	cmp	r3, #0
 800843a:	d032      	beq.n	80084a2 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008444:	b29b      	uxth	r3, r3
 8008446:	461a      	mov	r2, r3
 8008448:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	00db      	lsls	r3, r3, #3
 800844e:	4413      	add	r3, r2
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	6812      	ldr	r2, [r2, #0]
 8008454:	4413      	add	r3, r2
 8008456:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800845a:	881b      	ldrh	r3, [r3, #0]
 800845c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008460:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008462:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6818      	ldr	r0, [r3, #0]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800846e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008470:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8008472:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008474:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008476:	b29b      	uxth	r3, r3
 8008478:	f007 f99d 	bl	800f7b6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	881b      	ldrh	r3, [r3, #0]
 8008482:	b29a      	uxth	r2, r3
 8008484:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8008488:	4013      	ands	r3, r2
 800848a:	817b      	strh	r3, [r7, #10]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	897a      	ldrh	r2, [r7, #10]
 8008492:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008496:	b292      	uxth	r2, r2
 8008498:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f009 f806 	bl	80114ac <HAL_PCD_SetupStageCallback>
 80084a0:	e291      	b.n	80089c6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80084a2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	f280 828d 	bge.w	80089c6 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	881b      	ldrh	r3, [r3, #0]
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80084b8:	4013      	ands	r3, r2
 80084ba:	81fb      	strh	r3, [r7, #14]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	89fa      	ldrh	r2, [r7, #14]
 80084c2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80084c6:	b292      	uxth	r2, r2
 80084c8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	461a      	mov	r2, r3
 80084d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	00db      	lsls	r3, r3, #3
 80084dc:	4413      	add	r3, r2
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	6812      	ldr	r2, [r2, #0]
 80084e2:	4413      	add	r3, r2
 80084e4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80084e8:	881b      	ldrh	r3, [r3, #0]
 80084ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80084ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084f0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80084f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084f4:	69db      	ldr	r3, [r3, #28]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d019      	beq.n	800852e <PCD_EP_ISR_Handler+0x1da>
 80084fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084fc:	695b      	ldr	r3, [r3, #20]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d015      	beq.n	800852e <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6818      	ldr	r0, [r3, #0]
 8008506:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008508:	6959      	ldr	r1, [r3, #20]
 800850a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800850c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800850e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008510:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8008512:	b29b      	uxth	r3, r3
 8008514:	f007 f94f 	bl	800f7b6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8008518:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800851a:	695a      	ldr	r2, [r3, #20]
 800851c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800851e:	69db      	ldr	r3, [r3, #28]
 8008520:	441a      	add	r2, r3
 8008522:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008524:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8008526:	2100      	movs	r1, #0
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f008 ffd1 	bl	80114d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	881b      	ldrh	r3, [r3, #0]
 8008534:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8008536:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008538:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800853c:	2b00      	cmp	r3, #0
 800853e:	f040 8242 	bne.w	80089c6 <PCD_EP_ISR_Handler+0x672>
 8008542:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008544:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008548:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800854c:	f000 823b 	beq.w	80089c6 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	881b      	ldrh	r3, [r3, #0]
 8008556:	b29b      	uxth	r3, r3
 8008558:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800855c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008560:	81bb      	strh	r3, [r7, #12]
 8008562:	89bb      	ldrh	r3, [r7, #12]
 8008564:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008568:	81bb      	strh	r3, [r7, #12]
 800856a:	89bb      	ldrh	r3, [r7, #12]
 800856c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008570:	81bb      	strh	r3, [r7, #12]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	89bb      	ldrh	r3, [r7, #12]
 8008578:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800857c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008580:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008584:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008588:	b29b      	uxth	r3, r3
 800858a:	8013      	strh	r3, [r2, #0]
 800858c:	e21b      	b.n	80089c6 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	461a      	mov	r2, r3
 8008594:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4413      	add	r3, r2
 800859c:	881b      	ldrh	r3, [r3, #0]
 800859e:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80085a0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f280 80f1 	bge.w	800878c <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	461a      	mov	r2, r3
 80085b0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	4413      	add	r3, r2
 80085b8:	881b      	ldrh	r3, [r3, #0]
 80085ba:	b29a      	uxth	r2, r3
 80085bc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80085c0:	4013      	ands	r3, r2
 80085c2:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	461a      	mov	r2, r3
 80085ca:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	4413      	add	r3, r2
 80085d2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80085d4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80085d8:	b292      	uxth	r2, r2
 80085da:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80085dc:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80085e0:	4613      	mov	r3, r2
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	4413      	add	r3, r2
 80085e6:	00db      	lsls	r3, r3, #3
 80085e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	4413      	add	r3, r2
 80085f0:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80085f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80085f4:	7b1b      	ldrb	r3, [r3, #12]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d123      	bne.n	8008642 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008602:	b29b      	uxth	r3, r3
 8008604:	461a      	mov	r2, r3
 8008606:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	00db      	lsls	r3, r3, #3
 800860c:	4413      	add	r3, r2
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	6812      	ldr	r2, [r2, #0]
 8008612:	4413      	add	r3, r2
 8008614:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008618:	881b      	ldrh	r3, [r3, #0]
 800861a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800861e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8008622:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8008626:	2b00      	cmp	r3, #0
 8008628:	f000 808b 	beq.w	8008742 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6818      	ldr	r0, [r3, #0]
 8008630:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008632:	6959      	ldr	r1, [r3, #20]
 8008634:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008636:	88da      	ldrh	r2, [r3, #6]
 8008638:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800863c:	f007 f8bb 	bl	800f7b6 <USB_ReadPMA>
 8008640:	e07f      	b.n	8008742 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8008642:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008644:	78db      	ldrb	r3, [r3, #3]
 8008646:	2b02      	cmp	r3, #2
 8008648:	d109      	bne.n	800865e <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800864a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800864c:	461a      	mov	r2, r3
 800864e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 f9c6 	bl	80089e2 <HAL_PCD_EP_DB_Receive>
 8008656:	4603      	mov	r3, r0
 8008658:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800865c:	e071      	b.n	8008742 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	461a      	mov	r2, r3
 8008664:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	4413      	add	r3, r2
 800866c:	881b      	ldrh	r3, [r3, #0]
 800866e:	b29b      	uxth	r3, r3
 8008670:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008674:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008678:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	461a      	mov	r2, r3
 8008680:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	441a      	add	r2, r3
 8008688:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800868a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800868e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008692:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008696:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800869a:	b29b      	uxth	r3, r3
 800869c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	461a      	mov	r2, r3
 80086a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	4413      	add	r3, r2
 80086ac:	881b      	ldrh	r3, [r3, #0]
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d022      	beq.n	80086fe <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	461a      	mov	r2, r3
 80086c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	00db      	lsls	r3, r3, #3
 80086ca:	4413      	add	r3, r2
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	6812      	ldr	r2, [r2, #0]
 80086d0:	4413      	add	r3, r2
 80086d2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80086d6:	881b      	ldrh	r3, [r3, #0]
 80086d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086dc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80086e0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d02c      	beq.n	8008742 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6818      	ldr	r0, [r3, #0]
 80086ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086ee:	6959      	ldr	r1, [r3, #20]
 80086f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086f2:	891a      	ldrh	r2, [r3, #8]
 80086f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80086f8:	f007 f85d 	bl	800f7b6 <USB_ReadPMA>
 80086fc:	e021      	b.n	8008742 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008706:	b29b      	uxth	r3, r3
 8008708:	461a      	mov	r2, r3
 800870a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	00db      	lsls	r3, r3, #3
 8008710:	4413      	add	r3, r2
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	6812      	ldr	r2, [r2, #0]
 8008716:	4413      	add	r3, r2
 8008718:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800871c:	881b      	ldrh	r3, [r3, #0]
 800871e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008722:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8008726:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800872a:	2b00      	cmp	r3, #0
 800872c:	d009      	beq.n	8008742 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6818      	ldr	r0, [r3, #0]
 8008732:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008734:	6959      	ldr	r1, [r3, #20]
 8008736:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008738:	895a      	ldrh	r2, [r3, #10]
 800873a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800873e:	f007 f83a 	bl	800f7b6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8008742:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008744:	69da      	ldr	r2, [r3, #28]
 8008746:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800874a:	441a      	add	r2, r3
 800874c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800874e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8008750:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008752:	695a      	ldr	r2, [r3, #20]
 8008754:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8008758:	441a      	add	r2, r3
 800875a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800875c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800875e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008760:	699b      	ldr	r3, [r3, #24]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d005      	beq.n	8008772 <PCD_EP_ISR_Handler+0x41e>
 8008766:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800876a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800876c:	691b      	ldr	r3, [r3, #16]
 800876e:	429a      	cmp	r2, r3
 8008770:	d206      	bcs.n	8008780 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8008772:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	4619      	mov	r1, r3
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f008 fea9 	bl	80114d0 <HAL_PCD_DataOutStageCallback>
 800877e:	e005      	b.n	800878c <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008786:	4618      	mov	r0, r3
 8008788:	f006 f8ef 	bl	800e96a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800878c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800878e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008792:	2b00      	cmp	r3, #0
 8008794:	f000 8117 	beq.w	80089c6 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8008798:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800879c:	4613      	mov	r3, r2
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	4413      	add	r3, r2
 80087a2:	00db      	lsls	r3, r3, #3
 80087a4:	3310      	adds	r3, #16
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	4413      	add	r3, r2
 80087aa:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	461a      	mov	r2, r3
 80087b2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	4413      	add	r3, r2
 80087ba:	881b      	ldrh	r3, [r3, #0]
 80087bc:	b29b      	uxth	r3, r3
 80087be:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80087c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087c6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	461a      	mov	r2, r3
 80087ce:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	441a      	add	r2, r3
 80087d6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80087d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80087e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087e6:	78db      	ldrb	r3, [r3, #3]
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	f040 80a1 	bne.w	8008930 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80087ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087f0:	2200      	movs	r2, #0
 80087f2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80087f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087f6:	7b1b      	ldrb	r3, [r3, #12]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	f000 8092 	beq.w	8008922 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80087fe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008804:	2b00      	cmp	r3, #0
 8008806:	d046      	beq.n	8008896 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008808:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800880a:	785b      	ldrb	r3, [r3, #1]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d126      	bne.n	800885e <PCD_EP_ISR_Handler+0x50a>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	617b      	str	r3, [r7, #20]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800881e:	b29b      	uxth	r3, r3
 8008820:	461a      	mov	r2, r3
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	4413      	add	r3, r2
 8008826:	617b      	str	r3, [r7, #20]
 8008828:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	00da      	lsls	r2, r3, #3
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	4413      	add	r3, r2
 8008832:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008836:	613b      	str	r3, [r7, #16]
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	881b      	ldrh	r3, [r3, #0]
 800883c:	b29b      	uxth	r3, r3
 800883e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008842:	b29a      	uxth	r2, r3
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	801a      	strh	r2, [r3, #0]
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	881b      	ldrh	r3, [r3, #0]
 800884c:	b29b      	uxth	r3, r3
 800884e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008852:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008856:	b29a      	uxth	r2, r3
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	801a      	strh	r2, [r3, #0]
 800885c:	e061      	b.n	8008922 <PCD_EP_ISR_Handler+0x5ce>
 800885e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008860:	785b      	ldrb	r3, [r3, #1]
 8008862:	2b01      	cmp	r3, #1
 8008864:	d15d      	bne.n	8008922 <PCD_EP_ISR_Handler+0x5ce>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	61fb      	str	r3, [r7, #28]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008874:	b29b      	uxth	r3, r3
 8008876:	461a      	mov	r2, r3
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	4413      	add	r3, r2
 800887c:	61fb      	str	r3, [r7, #28]
 800887e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	00da      	lsls	r2, r3, #3
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	4413      	add	r3, r2
 8008888:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800888c:	61bb      	str	r3, [r7, #24]
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	2200      	movs	r2, #0
 8008892:	801a      	strh	r2, [r3, #0]
 8008894:	e045      	b.n	8008922 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800889c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800889e:	785b      	ldrb	r3, [r3, #1]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d126      	bne.n	80088f2 <PCD_EP_ISR_Handler+0x59e>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	461a      	mov	r2, r3
 80088b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b8:	4413      	add	r3, r2
 80088ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80088bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	00da      	lsls	r2, r3, #3
 80088c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c4:	4413      	add	r3, r2
 80088c6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80088ca:	623b      	str	r3, [r7, #32]
 80088cc:	6a3b      	ldr	r3, [r7, #32]
 80088ce:	881b      	ldrh	r3, [r3, #0]
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088d6:	b29a      	uxth	r2, r3
 80088d8:	6a3b      	ldr	r3, [r7, #32]
 80088da:	801a      	strh	r2, [r3, #0]
 80088dc:	6a3b      	ldr	r3, [r7, #32]
 80088de:	881b      	ldrh	r3, [r3, #0]
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088ea:	b29a      	uxth	r2, r3
 80088ec:	6a3b      	ldr	r3, [r7, #32]
 80088ee:	801a      	strh	r2, [r3, #0]
 80088f0:	e017      	b.n	8008922 <PCD_EP_ISR_Handler+0x5ce>
 80088f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088f4:	785b      	ldrb	r3, [r3, #1]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d113      	bne.n	8008922 <PCD_EP_ISR_Handler+0x5ce>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008902:	b29b      	uxth	r3, r3
 8008904:	461a      	mov	r2, r3
 8008906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008908:	4413      	add	r3, r2
 800890a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800890c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	00da      	lsls	r2, r3, #3
 8008912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008914:	4413      	add	r3, r2
 8008916:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800891a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800891c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800891e:	2200      	movs	r2, #0
 8008920:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008922:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	4619      	mov	r1, r3
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f008 fdec 	bl	8011506 <HAL_PCD_DataInStageCallback>
 800892e:	e04a      	b.n	80089c6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8008930:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008936:	2b00      	cmp	r3, #0
 8008938:	d13f      	bne.n	80089ba <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008942:	b29b      	uxth	r3, r3
 8008944:	461a      	mov	r2, r3
 8008946:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	00db      	lsls	r3, r3, #3
 800894c:	4413      	add	r3, r2
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	6812      	ldr	r2, [r2, #0]
 8008952:	4413      	add	r3, r2
 8008954:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008958:	881b      	ldrh	r3, [r3, #0]
 800895a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800895e:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8008960:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008962:	699a      	ldr	r2, [r3, #24]
 8008964:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008966:	429a      	cmp	r2, r3
 8008968:	d906      	bls.n	8008978 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800896a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800896c:	699a      	ldr	r2, [r3, #24]
 800896e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008970:	1ad2      	subs	r2, r2, r3
 8008972:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008974:	619a      	str	r2, [r3, #24]
 8008976:	e002      	b.n	800897e <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8008978:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800897a:	2200      	movs	r2, #0
 800897c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800897e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008980:	699b      	ldr	r3, [r3, #24]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d106      	bne.n	8008994 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008986:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	4619      	mov	r1, r3
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f008 fdba 	bl	8011506 <HAL_PCD_DataInStageCallback>
 8008992:	e018      	b.n	80089c6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8008994:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008996:	695a      	ldr	r2, [r3, #20]
 8008998:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800899a:	441a      	add	r2, r3
 800899c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800899e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80089a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089a2:	69da      	ldr	r2, [r3, #28]
 80089a4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80089a6:	441a      	add	r2, r3
 80089a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089aa:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80089b2:	4618      	mov	r0, r3
 80089b4:	f005 ffd9 	bl	800e96a <USB_EPStartXfer>
 80089b8:	e005      	b.n	80089c6 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80089ba:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80089bc:	461a      	mov	r2, r3
 80089be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 f917 	bl	8008bf4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	b21b      	sxth	r3, r3
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	f6ff acc3 	blt.w	800835e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3748      	adds	r7, #72	@ 0x48
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b088      	sub	sp, #32
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	60f8      	str	r0, [r7, #12]
 80089ea:	60b9      	str	r1, [r7, #8]
 80089ec:	4613      	mov	r3, r2
 80089ee:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80089f0:	88fb      	ldrh	r3, [r7, #6]
 80089f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d07c      	beq.n	8008af4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	461a      	mov	r2, r3
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	00db      	lsls	r3, r3, #3
 8008a0c:	4413      	add	r3, r2
 8008a0e:	68fa      	ldr	r2, [r7, #12]
 8008a10:	6812      	ldr	r2, [r2, #0]
 8008a12:	4413      	add	r3, r2
 8008a14:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008a18:	881b      	ldrh	r3, [r3, #0]
 8008a1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a1e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	699a      	ldr	r2, [r3, #24]
 8008a24:	8b7b      	ldrh	r3, [r7, #26]
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d306      	bcc.n	8008a38 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	699a      	ldr	r2, [r3, #24]
 8008a2e:	8b7b      	ldrh	r3, [r7, #26]
 8008a30:	1ad2      	subs	r2, r2, r3
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	619a      	str	r2, [r3, #24]
 8008a36:	e002      	b.n	8008a3e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	699b      	ldr	r3, [r3, #24]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d123      	bne.n	8008a8e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	4413      	add	r3, r2
 8008a54:	881b      	ldrh	r3, [r3, #0]
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a60:	833b      	strh	r3, [r7, #24]
 8008a62:	8b3b      	ldrh	r3, [r7, #24]
 8008a64:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008a68:	833b      	strh	r3, [r7, #24]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	461a      	mov	r2, r3
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	441a      	add	r2, r3
 8008a78:	8b3b      	ldrh	r3, [r7, #24]
 8008a7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008a8e:	88fb      	ldrh	r3, [r7, #6]
 8008a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d01f      	beq.n	8008ad8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	4413      	add	r3, r2
 8008aa6:	881b      	ldrh	r3, [r3, #0]
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008aae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ab2:	82fb      	strh	r3, [r7, #22]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	461a      	mov	r2, r3
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	441a      	add	r2, r3
 8008ac2:	8afb      	ldrh	r3, [r7, #22]
 8008ac4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ac8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008acc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ad0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8008ad8:	8b7b      	ldrh	r3, [r7, #26]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f000 8085 	beq.w	8008bea <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	6818      	ldr	r0, [r3, #0]
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	6959      	ldr	r1, [r3, #20]
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	891a      	ldrh	r2, [r3, #8]
 8008aec:	8b7b      	ldrh	r3, [r7, #26]
 8008aee:	f006 fe62 	bl	800f7b6 <USB_ReadPMA>
 8008af2:	e07a      	b.n	8008bea <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	461a      	mov	r2, r3
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	00db      	lsls	r3, r3, #3
 8008b06:	4413      	add	r3, r2
 8008b08:	68fa      	ldr	r2, [r7, #12]
 8008b0a:	6812      	ldr	r2, [r2, #0]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008b12:	881b      	ldrh	r3, [r3, #0]
 8008b14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b18:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	699a      	ldr	r2, [r3, #24]
 8008b1e:	8b7b      	ldrh	r3, [r7, #26]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d306      	bcc.n	8008b32 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	699a      	ldr	r2, [r3, #24]
 8008b28:	8b7b      	ldrh	r3, [r7, #26]
 8008b2a:	1ad2      	subs	r2, r2, r3
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	619a      	str	r2, [r3, #24]
 8008b30:	e002      	b.n	8008b38 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	2200      	movs	r2, #0
 8008b36:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	699b      	ldr	r3, [r3, #24]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d123      	bne.n	8008b88 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	461a      	mov	r2, r3
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	4413      	add	r3, r2
 8008b4e:	881b      	ldrh	r3, [r3, #0]
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b5a:	83fb      	strh	r3, [r7, #30]
 8008b5c:	8bfb      	ldrh	r3, [r7, #30]
 8008b5e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008b62:	83fb      	strh	r3, [r7, #30]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	461a      	mov	r2, r3
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	441a      	add	r2, r3
 8008b72:	8bfb      	ldrh	r3, [r7, #30]
 8008b74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8008b88:	88fb      	ldrh	r3, [r7, #6]
 8008b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d11f      	bne.n	8008bd2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	461a      	mov	r2, r3
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	4413      	add	r3, r2
 8008ba0:	881b      	ldrh	r3, [r3, #0]
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ba8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bac:	83bb      	strh	r3, [r7, #28]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	441a      	add	r2, r3
 8008bbc:	8bbb      	ldrh	r3, [r7, #28]
 8008bbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8008bd2:	8b7b      	ldrh	r3, [r7, #26]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d008      	beq.n	8008bea <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6818      	ldr	r0, [r3, #0]
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	6959      	ldr	r1, [r3, #20]
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	895a      	ldrh	r2, [r3, #10]
 8008be4:	8b7b      	ldrh	r3, [r7, #26]
 8008be6:	f006 fde6 	bl	800f7b6 <USB_ReadPMA>
    }
  }

  return count;
 8008bea:	8b7b      	ldrh	r3, [r7, #26]
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3720      	adds	r7, #32
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b0a6      	sub	sp, #152	@ 0x98
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	4613      	mov	r3, r2
 8008c00:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008c02:	88fb      	ldrh	r3, [r7, #6]
 8008c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	f000 81f7 	beq.w	8008ffc <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	461a      	mov	r2, r3
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	00db      	lsls	r3, r3, #3
 8008c20:	4413      	add	r3, r2
 8008c22:	68fa      	ldr	r2, [r7, #12]
 8008c24:	6812      	ldr	r2, [r2, #0]
 8008c26:	4413      	add	r3, r2
 8008c28:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008c2c:	881b      	ldrh	r3, [r3, #0]
 8008c2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c32:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	699a      	ldr	r2, [r3, #24]
 8008c3a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d907      	bls.n	8008c52 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	699a      	ldr	r2, [r3, #24]
 8008c46:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008c4a:	1ad2      	subs	r2, r2, r3
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	619a      	str	r2, [r3, #24]
 8008c50:	e002      	b.n	8008c58 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	2200      	movs	r2, #0
 8008c56:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	699b      	ldr	r3, [r3, #24]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f040 80e1 	bne.w	8008e24 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	785b      	ldrb	r3, [r3, #1]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d126      	bne.n	8008cb8 <HAL_PCD_EP_DB_Transmit+0xc4>
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c7e:	4413      	add	r3, r2
 8008c80:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	00da      	lsls	r2, r3, #3
 8008c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c8a:	4413      	add	r3, r2
 8008c8c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c94:	881b      	ldrh	r3, [r3, #0]
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c9c:	b29a      	uxth	r2, r3
 8008c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ca0:	801a      	strh	r2, [r3, #0]
 8008ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ca4:	881b      	ldrh	r3, [r3, #0]
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cb4:	801a      	strh	r2, [r3, #0]
 8008cb6:	e01a      	b.n	8008cee <HAL_PCD_EP_DB_Transmit+0xfa>
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	785b      	ldrb	r3, [r3, #1]
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d116      	bne.n	8008cee <HAL_PCD_EP_DB_Transmit+0xfa>
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd4:	4413      	add	r3, r2
 8008cd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	00da      	lsls	r2, r3, #3
 8008cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce0:	4413      	add	r3, r2
 8008ce2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008ce6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cea:	2200      	movs	r2, #0
 8008cec:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	785b      	ldrb	r3, [r3, #1]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d126      	bne.n	8008d4a <HAL_PCD_EP_DB_Transmit+0x156>
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	623b      	str	r3, [r7, #32]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	6a3b      	ldr	r3, [r7, #32]
 8008d10:	4413      	add	r3, r2
 8008d12:	623b      	str	r3, [r7, #32]
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	00da      	lsls	r2, r3, #3
 8008d1a:	6a3b      	ldr	r3, [r7, #32]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008d22:	61fb      	str	r3, [r7, #28]
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	881b      	ldrh	r3, [r3, #0]
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d2e:	b29a      	uxth	r2, r3
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	801a      	strh	r2, [r3, #0]
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	881b      	ldrh	r3, [r3, #0]
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	801a      	strh	r2, [r3, #0]
 8008d48:	e017      	b.n	8008d7a <HAL_PCD_EP_DB_Transmit+0x186>
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	785b      	ldrb	r3, [r3, #1]
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d113      	bne.n	8008d7a <HAL_PCD_EP_DB_Transmit+0x186>
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d60:	4413      	add	r3, r2
 8008d62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	00da      	lsls	r2, r3, #3
 8008d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d6c:	4413      	add	r3, r2
 8008d6e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008d72:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d76:	2200      	movs	r2, #0
 8008d78:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	78db      	ldrb	r3, [r3, #3]
 8008d7e:	2b02      	cmp	r3, #2
 8008d80:	d123      	bne.n	8008dca <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	461a      	mov	r2, r3
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	009b      	lsls	r3, r3, #2
 8008d8e:	4413      	add	r3, r2
 8008d90:	881b      	ldrh	r3, [r3, #0]
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d9c:	837b      	strh	r3, [r7, #26]
 8008d9e:	8b7b      	ldrh	r3, [r7, #26]
 8008da0:	f083 0320 	eor.w	r3, r3, #32
 8008da4:	837b      	strh	r3, [r7, #26]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	461a      	mov	r2, r3
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	441a      	add	r2, r3
 8008db4:	8b7b      	ldrh	r3, [r7, #26]
 8008db6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008dba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008dbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008dc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	4619      	mov	r1, r3
 8008dd0:	68f8      	ldr	r0, [r7, #12]
 8008dd2:	f008 fb98 	bl	8011506 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008dd6:	88fb      	ldrh	r3, [r7, #6]
 8008dd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d01f      	beq.n	8008e20 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	461a      	mov	r2, r3
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	4413      	add	r3, r2
 8008dee:	881b      	ldrh	r3, [r3, #0]
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008df6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dfa:	833b      	strh	r3, [r7, #24]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	461a      	mov	r2, r3
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	441a      	add	r2, r3
 8008e0a:	8b3b      	ldrh	r3, [r7, #24]
 8008e0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008e18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8008e20:	2300      	movs	r3, #0
 8008e22:	e31f      	b.n	8009464 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008e24:	88fb      	ldrh	r3, [r7, #6]
 8008e26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d021      	beq.n	8008e72 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	461a      	mov	r2, r3
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	4413      	add	r3, r2
 8008e3c:	881b      	ldrh	r3, [r3, #0]
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e48:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	461a      	mov	r2, r3
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	441a      	add	r2, r3
 8008e5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008e5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e66:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	f040 82ca 	bne.w	8009412 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	695a      	ldr	r2, [r3, #20]
 8008e82:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008e86:	441a      	add	r2, r3
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	69da      	ldr	r2, [r3, #28]
 8008e90:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008e94:	441a      	add	r2, r3
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	6a1a      	ldr	r2, [r3, #32]
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d309      	bcc.n	8008eba <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	6a1a      	ldr	r2, [r3, #32]
 8008eb0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008eb2:	1ad2      	subs	r2, r2, r3
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	621a      	str	r2, [r3, #32]
 8008eb8:	e015      	b.n	8008ee6 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	6a1b      	ldr	r3, [r3, #32]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d107      	bne.n	8008ed2 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8008ec2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008ec6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8008ed0:	e009      	b.n	8008ee6 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	6a1b      	ldr	r3, [r3, #32]
 8008ede:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	785b      	ldrb	r3, [r3, #1]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d15f      	bne.n	8008fae <HAL_PCD_EP_DB_Transmit+0x3ba>
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	461a      	mov	r2, r3
 8008f00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f02:	4413      	add	r3, r2
 8008f04:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	00da      	lsls	r2, r3, #3
 8008f0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f0e:	4413      	add	r3, r2
 8008f10:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f18:	881b      	ldrh	r3, [r3, #0]
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f20:	b29a      	uxth	r2, r3
 8008f22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f24:	801a      	strh	r2, [r3, #0]
 8008f26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d10a      	bne.n	8008f42 <HAL_PCD_EP_DB_Transmit+0x34e>
 8008f2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f2e:	881b      	ldrh	r3, [r3, #0]
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f3a:	b29a      	uxth	r2, r3
 8008f3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f3e:	801a      	strh	r2, [r3, #0]
 8008f40:	e051      	b.n	8008fe6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8008f42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f44:	2b3e      	cmp	r3, #62	@ 0x3e
 8008f46:	d816      	bhi.n	8008f76 <HAL_PCD_EP_DB_Transmit+0x382>
 8008f48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f4a:	085b      	lsrs	r3, r3, #1
 8008f4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f50:	f003 0301 	and.w	r3, r3, #1
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d002      	beq.n	8008f5e <HAL_PCD_EP_DB_Transmit+0x36a>
 8008f58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f60:	881b      	ldrh	r3, [r3, #0]
 8008f62:	b29a      	uxth	r2, r3
 8008f64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	029b      	lsls	r3, r3, #10
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	b29a      	uxth	r2, r3
 8008f70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f72:	801a      	strh	r2, [r3, #0]
 8008f74:	e037      	b.n	8008fe6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8008f76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f78:	095b      	lsrs	r3, r3, #5
 8008f7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f7e:	f003 031f 	and.w	r3, r3, #31
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d102      	bne.n	8008f8c <HAL_PCD_EP_DB_Transmit+0x398>
 8008f86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f88:	3b01      	subs	r3, #1
 8008f8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f8e:	881b      	ldrh	r3, [r3, #0]
 8008f90:	b29a      	uxth	r2, r3
 8008f92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	029b      	lsls	r3, r3, #10
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fa6:	b29a      	uxth	r2, r3
 8008fa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008faa:	801a      	strh	r2, [r3, #0]
 8008fac:	e01b      	b.n	8008fe6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	785b      	ldrb	r3, [r3, #1]
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d117      	bne.n	8008fe6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fca:	4413      	add	r3, r2
 8008fcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	00da      	lsls	r2, r3, #3
 8008fd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fd6:	4413      	add	r3, r2
 8008fd8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008fdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008fe0:	b29a      	uxth	r2, r3
 8008fe2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fe4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6818      	ldr	r0, [r3, #0]
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	6959      	ldr	r1, [r3, #20]
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	891a      	ldrh	r2, [r3, #8]
 8008ff2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	f006 fb9c 	bl	800f732 <USB_WritePMA>
 8008ffa:	e20a      	b.n	8009412 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009004:	b29b      	uxth	r3, r3
 8009006:	461a      	mov	r2, r3
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	00db      	lsls	r3, r3, #3
 800900e:	4413      	add	r3, r2
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	6812      	ldr	r2, [r2, #0]
 8009014:	4413      	add	r3, r2
 8009016:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800901a:	881b      	ldrh	r3, [r3, #0]
 800901c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009020:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	699a      	ldr	r2, [r3, #24]
 8009028:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800902c:	429a      	cmp	r2, r3
 800902e:	d307      	bcc.n	8009040 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	699a      	ldr	r2, [r3, #24]
 8009034:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009038:	1ad2      	subs	r2, r2, r3
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	619a      	str	r2, [r3, #24]
 800903e:	e002      	b.n	8009046 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	2200      	movs	r2, #0
 8009044:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	699b      	ldr	r3, [r3, #24]
 800904a:	2b00      	cmp	r3, #0
 800904c:	f040 80f6 	bne.w	800923c <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	785b      	ldrb	r3, [r3, #1]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d126      	bne.n	80090a6 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	677b      	str	r3, [r7, #116]	@ 0x74
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009066:	b29b      	uxth	r3, r3
 8009068:	461a      	mov	r2, r3
 800906a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800906c:	4413      	add	r3, r2
 800906e:	677b      	str	r3, [r7, #116]	@ 0x74
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	00da      	lsls	r2, r3, #3
 8009076:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009078:	4413      	add	r3, r2
 800907a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800907e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009080:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009082:	881b      	ldrh	r3, [r3, #0]
 8009084:	b29b      	uxth	r3, r3
 8009086:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800908a:	b29a      	uxth	r2, r3
 800908c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800908e:	801a      	strh	r2, [r3, #0]
 8009090:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009092:	881b      	ldrh	r3, [r3, #0]
 8009094:	b29b      	uxth	r3, r3
 8009096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800909a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800909e:	b29a      	uxth	r2, r3
 80090a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80090a2:	801a      	strh	r2, [r3, #0]
 80090a4:	e01a      	b.n	80090dc <HAL_PCD_EP_DB_Transmit+0x4e8>
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	785b      	ldrb	r3, [r3, #1]
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d116      	bne.n	80090dc <HAL_PCD_EP_DB_Transmit+0x4e8>
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80090bc:	b29b      	uxth	r3, r3
 80090be:	461a      	mov	r2, r3
 80090c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80090c2:	4413      	add	r3, r2
 80090c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	00da      	lsls	r2, r3, #3
 80090cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80090ce:	4413      	add	r3, r2
 80090d0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80090d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80090d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80090d8:	2200      	movs	r2, #0
 80090da:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	785b      	ldrb	r3, [r3, #1]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d12f      	bne.n	800914c <HAL_PCD_EP_DB_Transmit+0x558>
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	461a      	mov	r2, r3
 8009100:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009104:	4413      	add	r3, r2
 8009106:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	00da      	lsls	r2, r3, #3
 8009110:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009114:	4413      	add	r3, r2
 8009116:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800911a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800911e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009122:	881b      	ldrh	r3, [r3, #0]
 8009124:	b29b      	uxth	r3, r3
 8009126:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800912a:	b29a      	uxth	r2, r3
 800912c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009130:	801a      	strh	r2, [r3, #0]
 8009132:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009136:	881b      	ldrh	r3, [r3, #0]
 8009138:	b29b      	uxth	r3, r3
 800913a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800913e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009142:	b29a      	uxth	r2, r3
 8009144:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009148:	801a      	strh	r2, [r3, #0]
 800914a:	e01c      	b.n	8009186 <HAL_PCD_EP_DB_Transmit+0x592>
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	785b      	ldrb	r3, [r3, #1]
 8009150:	2b01      	cmp	r3, #1
 8009152:	d118      	bne.n	8009186 <HAL_PCD_EP_DB_Transmit+0x592>
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800915c:	b29b      	uxth	r3, r3
 800915e:	461a      	mov	r2, r3
 8009160:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009164:	4413      	add	r3, r2
 8009166:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	00da      	lsls	r2, r3, #3
 8009170:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009174:	4413      	add	r3, r2
 8009176:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800917a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800917e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009182:	2200      	movs	r2, #0
 8009184:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	78db      	ldrb	r3, [r3, #3]
 800918a:	2b02      	cmp	r3, #2
 800918c:	d127      	bne.n	80091de <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	461a      	mov	r2, r3
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	4413      	add	r3, r2
 800919c:	881b      	ldrh	r3, [r3, #0]
 800919e:	b29b      	uxth	r3, r3
 80091a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091a8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80091ac:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80091b0:	f083 0320 	eor.w	r3, r3, #32
 80091b4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	461a      	mov	r2, r3
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	441a      	add	r2, r3
 80091c6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80091ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091da:	b29b      	uxth	r3, r3
 80091dc:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	4619      	mov	r1, r3
 80091e4:	68f8      	ldr	r0, [r7, #12]
 80091e6:	f008 f98e 	bl	8011506 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80091ea:	88fb      	ldrh	r3, [r7, #6]
 80091ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d121      	bne.n	8009238 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	461a      	mov	r2, r3
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	4413      	add	r3, r2
 8009202:	881b      	ldrh	r3, [r3, #0]
 8009204:	b29b      	uxth	r3, r3
 8009206:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800920a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800920e:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	461a      	mov	r2, r3
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	441a      	add	r2, r3
 8009220:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009224:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009228:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800922c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009230:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009234:	b29b      	uxth	r3, r3
 8009236:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8009238:	2300      	movs	r3, #0
 800923a:	e113      	b.n	8009464 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800923c:	88fb      	ldrh	r3, [r7, #6]
 800923e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009242:	2b00      	cmp	r3, #0
 8009244:	d121      	bne.n	800928a <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	461a      	mov	r2, r3
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	4413      	add	r3, r2
 8009254:	881b      	ldrh	r3, [r3, #0]
 8009256:	b29b      	uxth	r3, r3
 8009258:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800925c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009260:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	461a      	mov	r2, r3
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	441a      	add	r2, r3
 8009272:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009276:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800927a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800927e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009286:	b29b      	uxth	r3, r3
 8009288:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009290:	2b01      	cmp	r3, #1
 8009292:	f040 80be 	bne.w	8009412 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	695a      	ldr	r2, [r3, #20]
 800929a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800929e:	441a      	add	r2, r3
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	69da      	ldr	r2, [r3, #28]
 80092a8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80092ac:	441a      	add	r2, r3
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	6a1a      	ldr	r2, [r3, #32]
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	691b      	ldr	r3, [r3, #16]
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d309      	bcc.n	80092d2 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	691b      	ldr	r3, [r3, #16]
 80092c2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	6a1a      	ldr	r2, [r3, #32]
 80092c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80092ca:	1ad2      	subs	r2, r2, r3
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	621a      	str	r2, [r3, #32]
 80092d0:	e015      	b.n	80092fe <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	6a1b      	ldr	r3, [r3, #32]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d107      	bne.n	80092ea <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80092da:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80092de:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	2200      	movs	r2, #0
 80092e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80092e8:	e009      	b.n	80092fe <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	6a1b      	ldr	r3, [r3, #32]
 80092ee:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	2200      	movs	r2, #0
 80092f4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	2200      	movs	r2, #0
 80092fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	785b      	ldrb	r3, [r3, #1]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d15f      	bne.n	80093cc <HAL_PCD_EP_DB_Transmit+0x7d8>
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800931a:	b29b      	uxth	r3, r3
 800931c:	461a      	mov	r2, r3
 800931e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009320:	4413      	add	r3, r2
 8009322:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	00da      	lsls	r2, r3, #3
 800932a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800932c:	4413      	add	r3, r2
 800932e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009332:	667b      	str	r3, [r7, #100]	@ 0x64
 8009334:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009336:	881b      	ldrh	r3, [r3, #0]
 8009338:	b29b      	uxth	r3, r3
 800933a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800933e:	b29a      	uxth	r2, r3
 8009340:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009342:	801a      	strh	r2, [r3, #0]
 8009344:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009346:	2b00      	cmp	r3, #0
 8009348:	d10a      	bne.n	8009360 <HAL_PCD_EP_DB_Transmit+0x76c>
 800934a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800934c:	881b      	ldrh	r3, [r3, #0]
 800934e:	b29b      	uxth	r3, r3
 8009350:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009354:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009358:	b29a      	uxth	r2, r3
 800935a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800935c:	801a      	strh	r2, [r3, #0]
 800935e:	e04e      	b.n	80093fe <HAL_PCD_EP_DB_Transmit+0x80a>
 8009360:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009362:	2b3e      	cmp	r3, #62	@ 0x3e
 8009364:	d816      	bhi.n	8009394 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8009366:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009368:	085b      	lsrs	r3, r3, #1
 800936a:	663b      	str	r3, [r7, #96]	@ 0x60
 800936c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800936e:	f003 0301 	and.w	r3, r3, #1
 8009372:	2b00      	cmp	r3, #0
 8009374:	d002      	beq.n	800937c <HAL_PCD_EP_DB_Transmit+0x788>
 8009376:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009378:	3301      	adds	r3, #1
 800937a:	663b      	str	r3, [r7, #96]	@ 0x60
 800937c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800937e:	881b      	ldrh	r3, [r3, #0]
 8009380:	b29a      	uxth	r2, r3
 8009382:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009384:	b29b      	uxth	r3, r3
 8009386:	029b      	lsls	r3, r3, #10
 8009388:	b29b      	uxth	r3, r3
 800938a:	4313      	orrs	r3, r2
 800938c:	b29a      	uxth	r2, r3
 800938e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009390:	801a      	strh	r2, [r3, #0]
 8009392:	e034      	b.n	80093fe <HAL_PCD_EP_DB_Transmit+0x80a>
 8009394:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009396:	095b      	lsrs	r3, r3, #5
 8009398:	663b      	str	r3, [r7, #96]	@ 0x60
 800939a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800939c:	f003 031f 	and.w	r3, r3, #31
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d102      	bne.n	80093aa <HAL_PCD_EP_DB_Transmit+0x7b6>
 80093a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80093a6:	3b01      	subs	r3, #1
 80093a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80093aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093ac:	881b      	ldrh	r3, [r3, #0]
 80093ae:	b29a      	uxth	r2, r3
 80093b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	029b      	lsls	r3, r3, #10
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	4313      	orrs	r3, r2
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093c4:	b29a      	uxth	r2, r3
 80093c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093c8:	801a      	strh	r2, [r3, #0]
 80093ca:	e018      	b.n	80093fe <HAL_PCD_EP_DB_Transmit+0x80a>
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	785b      	ldrb	r3, [r3, #1]
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d114      	bne.n	80093fe <HAL_PCD_EP_DB_Transmit+0x80a>
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80093dc:	b29b      	uxth	r3, r3
 80093de:	461a      	mov	r2, r3
 80093e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80093e2:	4413      	add	r3, r2
 80093e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	00da      	lsls	r2, r3, #3
 80093ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80093ee:	4413      	add	r3, r2
 80093f0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80093f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80093f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80093f8:	b29a      	uxth	r2, r3
 80093fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093fc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	6818      	ldr	r0, [r3, #0]
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	6959      	ldr	r1, [r3, #20]
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	895a      	ldrh	r2, [r3, #10]
 800940a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800940c:	b29b      	uxth	r3, r3
 800940e:	f006 f990 	bl	800f732 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	461a      	mov	r2, r3
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	4413      	add	r3, r2
 8009420:	881b      	ldrh	r3, [r3, #0]
 8009422:	b29b      	uxth	r3, r3
 8009424:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009428:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800942c:	82fb      	strh	r3, [r7, #22]
 800942e:	8afb      	ldrh	r3, [r7, #22]
 8009430:	f083 0310 	eor.w	r3, r3, #16
 8009434:	82fb      	strh	r3, [r7, #22]
 8009436:	8afb      	ldrh	r3, [r7, #22]
 8009438:	f083 0320 	eor.w	r3, r3, #32
 800943c:	82fb      	strh	r3, [r7, #22]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	461a      	mov	r2, r3
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	441a      	add	r2, r3
 800944c:	8afb      	ldrh	r3, [r7, #22]
 800944e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009452:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009456:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800945a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800945e:	b29b      	uxth	r3, r3
 8009460:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8009462:	2300      	movs	r3, #0
}
 8009464:	4618      	mov	r0, r3
 8009466:	3798      	adds	r7, #152	@ 0x98
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800946c:	b480      	push	{r7}
 800946e:	b087      	sub	sp, #28
 8009470:	af00      	add	r7, sp, #0
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	607b      	str	r3, [r7, #4]
 8009476:	460b      	mov	r3, r1
 8009478:	817b      	strh	r3, [r7, #10]
 800947a:	4613      	mov	r3, r2
 800947c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800947e:	897b      	ldrh	r3, [r7, #10]
 8009480:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009484:	b29b      	uxth	r3, r3
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00b      	beq.n	80094a2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800948a:	897b      	ldrh	r3, [r7, #10]
 800948c:	f003 0207 	and.w	r2, r3, #7
 8009490:	4613      	mov	r3, r2
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	4413      	add	r3, r2
 8009496:	00db      	lsls	r3, r3, #3
 8009498:	3310      	adds	r3, #16
 800949a:	68fa      	ldr	r2, [r7, #12]
 800949c:	4413      	add	r3, r2
 800949e:	617b      	str	r3, [r7, #20]
 80094a0:	e009      	b.n	80094b6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80094a2:	897a      	ldrh	r2, [r7, #10]
 80094a4:	4613      	mov	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	4413      	add	r3, r2
 80094aa:	00db      	lsls	r3, r3, #3
 80094ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80094b0:	68fa      	ldr	r2, [r7, #12]
 80094b2:	4413      	add	r3, r2
 80094b4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80094b6:	893b      	ldrh	r3, [r7, #8]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d107      	bne.n	80094cc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	2200      	movs	r2, #0
 80094c0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	b29a      	uxth	r2, r3
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	80da      	strh	r2, [r3, #6]
 80094ca:	e00b      	b.n	80094e4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	2201      	movs	r2, #1
 80094d0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	b29a      	uxth	r2, r3
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	0c1b      	lsrs	r3, r3, #16
 80094de:	b29a      	uxth	r2, r3
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80094e4:	2300      	movs	r3, #0
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	371c      	adds	r7, #28
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr

080094f2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80094f2:	b480      	push	{r7}
 80094f4:	b085      	sub	sp, #20
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2200      	movs	r2, #0
 800950c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8009516:	b29b      	uxth	r3, r3
 8009518:	f043 0301 	orr.w	r3, r3, #1
 800951c:	b29a      	uxth	r2, r3
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800952a:	b29b      	uxth	r3, r3
 800952c:	f043 0302 	orr.w	r3, r3, #2
 8009530:	b29a      	uxth	r2, r3
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8009538:	2300      	movs	r3, #0
}
 800953a:	4618      	mov	r0, r3
 800953c:	3714      	adds	r7, #20
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr
	...

08009548 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009548:	b480      	push	{r7}
 800954a:	b085      	sub	sp, #20
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d141      	bne.n	80095da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009556:	4b4b      	ldr	r3, [pc, #300]	@ (8009684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800955e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009562:	d131      	bne.n	80095c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009564:	4b47      	ldr	r3, [pc, #284]	@ (8009684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009566:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800956a:	4a46      	ldr	r2, [pc, #280]	@ (8009684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800956c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009570:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009574:	4b43      	ldr	r3, [pc, #268]	@ (8009684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800957c:	4a41      	ldr	r2, [pc, #260]	@ (8009684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800957e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009582:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009584:	4b40      	ldr	r3, [pc, #256]	@ (8009688 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2232      	movs	r2, #50	@ 0x32
 800958a:	fb02 f303 	mul.w	r3, r2, r3
 800958e:	4a3f      	ldr	r2, [pc, #252]	@ (800968c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009590:	fba2 2303 	umull	r2, r3, r2, r3
 8009594:	0c9b      	lsrs	r3, r3, #18
 8009596:	3301      	adds	r3, #1
 8009598:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800959a:	e002      	b.n	80095a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	3b01      	subs	r3, #1
 80095a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80095a2:	4b38      	ldr	r3, [pc, #224]	@ (8009684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80095a4:	695b      	ldr	r3, [r3, #20]
 80095a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095ae:	d102      	bne.n	80095b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d1f2      	bne.n	800959c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80095b6:	4b33      	ldr	r3, [pc, #204]	@ (8009684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80095b8:	695b      	ldr	r3, [r3, #20]
 80095ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095c2:	d158      	bne.n	8009676 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80095c4:	2303      	movs	r3, #3
 80095c6:	e057      	b.n	8009678 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80095c8:	4b2e      	ldr	r3, [pc, #184]	@ (8009684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80095ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095ce:	4a2d      	ldr	r2, [pc, #180]	@ (8009684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80095d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80095d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80095d8:	e04d      	b.n	8009676 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095e0:	d141      	bne.n	8009666 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80095e2:	4b28      	ldr	r3, [pc, #160]	@ (8009684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80095ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095ee:	d131      	bne.n	8009654 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80095f0:	4b24      	ldr	r3, [pc, #144]	@ (8009684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80095f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095f6:	4a23      	ldr	r2, [pc, #140]	@ (8009684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80095f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80095fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009600:	4b20      	ldr	r3, [pc, #128]	@ (8009684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009608:	4a1e      	ldr	r2, [pc, #120]	@ (8009684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800960a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800960e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009610:	4b1d      	ldr	r3, [pc, #116]	@ (8009688 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	2232      	movs	r2, #50	@ 0x32
 8009616:	fb02 f303 	mul.w	r3, r2, r3
 800961a:	4a1c      	ldr	r2, [pc, #112]	@ (800968c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800961c:	fba2 2303 	umull	r2, r3, r2, r3
 8009620:	0c9b      	lsrs	r3, r3, #18
 8009622:	3301      	adds	r3, #1
 8009624:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009626:	e002      	b.n	800962e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	3b01      	subs	r3, #1
 800962c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800962e:	4b15      	ldr	r3, [pc, #84]	@ (8009684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009630:	695b      	ldr	r3, [r3, #20]
 8009632:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009636:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800963a:	d102      	bne.n	8009642 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d1f2      	bne.n	8009628 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009642:	4b10      	ldr	r3, [pc, #64]	@ (8009684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009644:	695b      	ldr	r3, [r3, #20]
 8009646:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800964a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800964e:	d112      	bne.n	8009676 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009650:	2303      	movs	r3, #3
 8009652:	e011      	b.n	8009678 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009654:	4b0b      	ldr	r3, [pc, #44]	@ (8009684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009656:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800965a:	4a0a      	ldr	r2, [pc, #40]	@ (8009684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800965c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009660:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8009664:	e007      	b.n	8009676 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009666:	4b07      	ldr	r3, [pc, #28]	@ (8009684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800966e:	4a05      	ldr	r2, [pc, #20]	@ (8009684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009670:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009674:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8009676:	2300      	movs	r3, #0
}
 8009678:	4618      	mov	r0, r3
 800967a:	3714      	adds	r7, #20
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr
 8009684:	40007000 	.word	0x40007000
 8009688:	20000044 	.word	0x20000044
 800968c:	431bde83 	.word	0x431bde83

08009690 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8009690:	b480      	push	{r7}
 8009692:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009694:	4b05      	ldr	r3, [pc, #20]	@ (80096ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	4a04      	ldr	r2, [pc, #16]	@ (80096ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800969a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800969e:	6093      	str	r3, [r2, #8]
}
 80096a0:	bf00      	nop
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr
 80096aa:	bf00      	nop
 80096ac:	40007000 	.word	0x40007000

080096b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b088      	sub	sp, #32
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d101      	bne.n	80096c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80096be:	2301      	movs	r3, #1
 80096c0:	e2fe      	b.n	8009cc0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f003 0301 	and.w	r3, r3, #1
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d075      	beq.n	80097ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80096ce:	4b97      	ldr	r3, [pc, #604]	@ (800992c <HAL_RCC_OscConfig+0x27c>)
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	f003 030c 	and.w	r3, r3, #12
 80096d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80096d8:	4b94      	ldr	r3, [pc, #592]	@ (800992c <HAL_RCC_OscConfig+0x27c>)
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	f003 0303 	and.w	r3, r3, #3
 80096e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	2b0c      	cmp	r3, #12
 80096e6:	d102      	bne.n	80096ee <HAL_RCC_OscConfig+0x3e>
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	2b03      	cmp	r3, #3
 80096ec:	d002      	beq.n	80096f4 <HAL_RCC_OscConfig+0x44>
 80096ee:	69bb      	ldr	r3, [r7, #24]
 80096f0:	2b08      	cmp	r3, #8
 80096f2:	d10b      	bne.n	800970c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80096f4:	4b8d      	ldr	r3, [pc, #564]	@ (800992c <HAL_RCC_OscConfig+0x27c>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d05b      	beq.n	80097b8 <HAL_RCC_OscConfig+0x108>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d157      	bne.n	80097b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009708:	2301      	movs	r3, #1
 800970a:	e2d9      	b.n	8009cc0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009714:	d106      	bne.n	8009724 <HAL_RCC_OscConfig+0x74>
 8009716:	4b85      	ldr	r3, [pc, #532]	@ (800992c <HAL_RCC_OscConfig+0x27c>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a84      	ldr	r2, [pc, #528]	@ (800992c <HAL_RCC_OscConfig+0x27c>)
 800971c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009720:	6013      	str	r3, [r2, #0]
 8009722:	e01d      	b.n	8009760 <HAL_RCC_OscConfig+0xb0>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800972c:	d10c      	bne.n	8009748 <HAL_RCC_OscConfig+0x98>
 800972e:	4b7f      	ldr	r3, [pc, #508]	@ (800992c <HAL_RCC_OscConfig+0x27c>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a7e      	ldr	r2, [pc, #504]	@ (800992c <HAL_RCC_OscConfig+0x27c>)
 8009734:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009738:	6013      	str	r3, [r2, #0]
 800973a:	4b7c      	ldr	r3, [pc, #496]	@ (800992c <HAL_RCC_OscConfig+0x27c>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a7b      	ldr	r2, [pc, #492]	@ (800992c <HAL_RCC_OscConfig+0x27c>)
 8009740:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009744:	6013      	str	r3, [r2, #0]
 8009746:	e00b      	b.n	8009760 <HAL_RCC_OscConfig+0xb0>
 8009748:	4b78      	ldr	r3, [pc, #480]	@ (800992c <HAL_RCC_OscConfig+0x27c>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a77      	ldr	r2, [pc, #476]	@ (800992c <HAL_RCC_OscConfig+0x27c>)
 800974e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009752:	6013      	str	r3, [r2, #0]
 8009754:	4b75      	ldr	r3, [pc, #468]	@ (800992c <HAL_RCC_OscConfig+0x27c>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a74      	ldr	r2, [pc, #464]	@ (800992c <HAL_RCC_OscConfig+0x27c>)
 800975a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800975e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d013      	beq.n	8009790 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009768:	f7fa fe0c 	bl	8004384 <HAL_GetTick>
 800976c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800976e:	e008      	b.n	8009782 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009770:	f7fa fe08 	bl	8004384 <HAL_GetTick>
 8009774:	4602      	mov	r2, r0
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	2b64      	cmp	r3, #100	@ 0x64
 800977c:	d901      	bls.n	8009782 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800977e:	2303      	movs	r3, #3
 8009780:	e29e      	b.n	8009cc0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009782:	4b6a      	ldr	r3, [pc, #424]	@ (800992c <HAL_RCC_OscConfig+0x27c>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800978a:	2b00      	cmp	r3, #0
 800978c:	d0f0      	beq.n	8009770 <HAL_RCC_OscConfig+0xc0>
 800978e:	e014      	b.n	80097ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009790:	f7fa fdf8 	bl	8004384 <HAL_GetTick>
 8009794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009796:	e008      	b.n	80097aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009798:	f7fa fdf4 	bl	8004384 <HAL_GetTick>
 800979c:	4602      	mov	r2, r0
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	1ad3      	subs	r3, r2, r3
 80097a2:	2b64      	cmp	r3, #100	@ 0x64
 80097a4:	d901      	bls.n	80097aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80097a6:	2303      	movs	r3, #3
 80097a8:	e28a      	b.n	8009cc0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80097aa:	4b60      	ldr	r3, [pc, #384]	@ (800992c <HAL_RCC_OscConfig+0x27c>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1f0      	bne.n	8009798 <HAL_RCC_OscConfig+0xe8>
 80097b6:	e000      	b.n	80097ba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f003 0302 	and.w	r3, r3, #2
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d075      	beq.n	80098b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80097c6:	4b59      	ldr	r3, [pc, #356]	@ (800992c <HAL_RCC_OscConfig+0x27c>)
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	f003 030c 	and.w	r3, r3, #12
 80097ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80097d0:	4b56      	ldr	r3, [pc, #344]	@ (800992c <HAL_RCC_OscConfig+0x27c>)
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	f003 0303 	and.w	r3, r3, #3
 80097d8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80097da:	69bb      	ldr	r3, [r7, #24]
 80097dc:	2b0c      	cmp	r3, #12
 80097de:	d102      	bne.n	80097e6 <HAL_RCC_OscConfig+0x136>
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	2b02      	cmp	r3, #2
 80097e4:	d002      	beq.n	80097ec <HAL_RCC_OscConfig+0x13c>
 80097e6:	69bb      	ldr	r3, [r7, #24]
 80097e8:	2b04      	cmp	r3, #4
 80097ea:	d11f      	bne.n	800982c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80097ec:	4b4f      	ldr	r3, [pc, #316]	@ (800992c <HAL_RCC_OscConfig+0x27c>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d005      	beq.n	8009804 <HAL_RCC_OscConfig+0x154>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d101      	bne.n	8009804 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8009800:	2301      	movs	r3, #1
 8009802:	e25d      	b.n	8009cc0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009804:	4b49      	ldr	r3, [pc, #292]	@ (800992c <HAL_RCC_OscConfig+0x27c>)
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	691b      	ldr	r3, [r3, #16]
 8009810:	061b      	lsls	r3, r3, #24
 8009812:	4946      	ldr	r1, [pc, #280]	@ (800992c <HAL_RCC_OscConfig+0x27c>)
 8009814:	4313      	orrs	r3, r2
 8009816:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009818:	4b45      	ldr	r3, [pc, #276]	@ (8009930 <HAL_RCC_OscConfig+0x280>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4618      	mov	r0, r3
 800981e:	f7fa fd65 	bl	80042ec <HAL_InitTick>
 8009822:	4603      	mov	r3, r0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d043      	beq.n	80098b0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009828:	2301      	movs	r3, #1
 800982a:	e249      	b.n	8009cc0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	68db      	ldr	r3, [r3, #12]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d023      	beq.n	800987c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009834:	4b3d      	ldr	r3, [pc, #244]	@ (800992c <HAL_RCC_OscConfig+0x27c>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a3c      	ldr	r2, [pc, #240]	@ (800992c <HAL_RCC_OscConfig+0x27c>)
 800983a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800983e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009840:	f7fa fda0 	bl	8004384 <HAL_GetTick>
 8009844:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009846:	e008      	b.n	800985a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009848:	f7fa fd9c 	bl	8004384 <HAL_GetTick>
 800984c:	4602      	mov	r2, r0
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	1ad3      	subs	r3, r2, r3
 8009852:	2b02      	cmp	r3, #2
 8009854:	d901      	bls.n	800985a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009856:	2303      	movs	r3, #3
 8009858:	e232      	b.n	8009cc0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800985a:	4b34      	ldr	r3, [pc, #208]	@ (800992c <HAL_RCC_OscConfig+0x27c>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009862:	2b00      	cmp	r3, #0
 8009864:	d0f0      	beq.n	8009848 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009866:	4b31      	ldr	r3, [pc, #196]	@ (800992c <HAL_RCC_OscConfig+0x27c>)
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	691b      	ldr	r3, [r3, #16]
 8009872:	061b      	lsls	r3, r3, #24
 8009874:	492d      	ldr	r1, [pc, #180]	@ (800992c <HAL_RCC_OscConfig+0x27c>)
 8009876:	4313      	orrs	r3, r2
 8009878:	604b      	str	r3, [r1, #4]
 800987a:	e01a      	b.n	80098b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800987c:	4b2b      	ldr	r3, [pc, #172]	@ (800992c <HAL_RCC_OscConfig+0x27c>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a2a      	ldr	r2, [pc, #168]	@ (800992c <HAL_RCC_OscConfig+0x27c>)
 8009882:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009888:	f7fa fd7c 	bl	8004384 <HAL_GetTick>
 800988c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800988e:	e008      	b.n	80098a2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009890:	f7fa fd78 	bl	8004384 <HAL_GetTick>
 8009894:	4602      	mov	r2, r0
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	1ad3      	subs	r3, r2, r3
 800989a:	2b02      	cmp	r3, #2
 800989c:	d901      	bls.n	80098a2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800989e:	2303      	movs	r3, #3
 80098a0:	e20e      	b.n	8009cc0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80098a2:	4b22      	ldr	r3, [pc, #136]	@ (800992c <HAL_RCC_OscConfig+0x27c>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d1f0      	bne.n	8009890 <HAL_RCC_OscConfig+0x1e0>
 80098ae:	e000      	b.n	80098b2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80098b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f003 0308 	and.w	r3, r3, #8
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d041      	beq.n	8009942 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	695b      	ldr	r3, [r3, #20]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d01c      	beq.n	8009900 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80098c6:	4b19      	ldr	r3, [pc, #100]	@ (800992c <HAL_RCC_OscConfig+0x27c>)
 80098c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80098cc:	4a17      	ldr	r2, [pc, #92]	@ (800992c <HAL_RCC_OscConfig+0x27c>)
 80098ce:	f043 0301 	orr.w	r3, r3, #1
 80098d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098d6:	f7fa fd55 	bl	8004384 <HAL_GetTick>
 80098da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80098dc:	e008      	b.n	80098f0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80098de:	f7fa fd51 	bl	8004384 <HAL_GetTick>
 80098e2:	4602      	mov	r2, r0
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	1ad3      	subs	r3, r2, r3
 80098e8:	2b02      	cmp	r3, #2
 80098ea:	d901      	bls.n	80098f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80098ec:	2303      	movs	r3, #3
 80098ee:	e1e7      	b.n	8009cc0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80098f0:	4b0e      	ldr	r3, [pc, #56]	@ (800992c <HAL_RCC_OscConfig+0x27c>)
 80098f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80098f6:	f003 0302 	and.w	r3, r3, #2
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d0ef      	beq.n	80098de <HAL_RCC_OscConfig+0x22e>
 80098fe:	e020      	b.n	8009942 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009900:	4b0a      	ldr	r3, [pc, #40]	@ (800992c <HAL_RCC_OscConfig+0x27c>)
 8009902:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009906:	4a09      	ldr	r2, [pc, #36]	@ (800992c <HAL_RCC_OscConfig+0x27c>)
 8009908:	f023 0301 	bic.w	r3, r3, #1
 800990c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009910:	f7fa fd38 	bl	8004384 <HAL_GetTick>
 8009914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009916:	e00d      	b.n	8009934 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009918:	f7fa fd34 	bl	8004384 <HAL_GetTick>
 800991c:	4602      	mov	r2, r0
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	1ad3      	subs	r3, r2, r3
 8009922:	2b02      	cmp	r3, #2
 8009924:	d906      	bls.n	8009934 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009926:	2303      	movs	r3, #3
 8009928:	e1ca      	b.n	8009cc0 <HAL_RCC_OscConfig+0x610>
 800992a:	bf00      	nop
 800992c:	40021000 	.word	0x40021000
 8009930:	2000004c 	.word	0x2000004c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009934:	4b8c      	ldr	r3, [pc, #560]	@ (8009b68 <HAL_RCC_OscConfig+0x4b8>)
 8009936:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800993a:	f003 0302 	and.w	r3, r3, #2
 800993e:	2b00      	cmp	r3, #0
 8009940:	d1ea      	bne.n	8009918 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f003 0304 	and.w	r3, r3, #4
 800994a:	2b00      	cmp	r3, #0
 800994c:	f000 80a6 	beq.w	8009a9c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009950:	2300      	movs	r3, #0
 8009952:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009954:	4b84      	ldr	r3, [pc, #528]	@ (8009b68 <HAL_RCC_OscConfig+0x4b8>)
 8009956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009958:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800995c:	2b00      	cmp	r3, #0
 800995e:	d101      	bne.n	8009964 <HAL_RCC_OscConfig+0x2b4>
 8009960:	2301      	movs	r3, #1
 8009962:	e000      	b.n	8009966 <HAL_RCC_OscConfig+0x2b6>
 8009964:	2300      	movs	r3, #0
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00d      	beq.n	8009986 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800996a:	4b7f      	ldr	r3, [pc, #508]	@ (8009b68 <HAL_RCC_OscConfig+0x4b8>)
 800996c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800996e:	4a7e      	ldr	r2, [pc, #504]	@ (8009b68 <HAL_RCC_OscConfig+0x4b8>)
 8009970:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009974:	6593      	str	r3, [r2, #88]	@ 0x58
 8009976:	4b7c      	ldr	r3, [pc, #496]	@ (8009b68 <HAL_RCC_OscConfig+0x4b8>)
 8009978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800997a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800997e:	60fb      	str	r3, [r7, #12]
 8009980:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009982:	2301      	movs	r3, #1
 8009984:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009986:	4b79      	ldr	r3, [pc, #484]	@ (8009b6c <HAL_RCC_OscConfig+0x4bc>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800998e:	2b00      	cmp	r3, #0
 8009990:	d118      	bne.n	80099c4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009992:	4b76      	ldr	r3, [pc, #472]	@ (8009b6c <HAL_RCC_OscConfig+0x4bc>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a75      	ldr	r2, [pc, #468]	@ (8009b6c <HAL_RCC_OscConfig+0x4bc>)
 8009998:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800999c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800999e:	f7fa fcf1 	bl	8004384 <HAL_GetTick>
 80099a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80099a4:	e008      	b.n	80099b8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099a6:	f7fa fced 	bl	8004384 <HAL_GetTick>
 80099aa:	4602      	mov	r2, r0
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	1ad3      	subs	r3, r2, r3
 80099b0:	2b02      	cmp	r3, #2
 80099b2:	d901      	bls.n	80099b8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80099b4:	2303      	movs	r3, #3
 80099b6:	e183      	b.n	8009cc0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80099b8:	4b6c      	ldr	r3, [pc, #432]	@ (8009b6c <HAL_RCC_OscConfig+0x4bc>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d0f0      	beq.n	80099a6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d108      	bne.n	80099de <HAL_RCC_OscConfig+0x32e>
 80099cc:	4b66      	ldr	r3, [pc, #408]	@ (8009b68 <HAL_RCC_OscConfig+0x4b8>)
 80099ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099d2:	4a65      	ldr	r2, [pc, #404]	@ (8009b68 <HAL_RCC_OscConfig+0x4b8>)
 80099d4:	f043 0301 	orr.w	r3, r3, #1
 80099d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80099dc:	e024      	b.n	8009a28 <HAL_RCC_OscConfig+0x378>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	2b05      	cmp	r3, #5
 80099e4:	d110      	bne.n	8009a08 <HAL_RCC_OscConfig+0x358>
 80099e6:	4b60      	ldr	r3, [pc, #384]	@ (8009b68 <HAL_RCC_OscConfig+0x4b8>)
 80099e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099ec:	4a5e      	ldr	r2, [pc, #376]	@ (8009b68 <HAL_RCC_OscConfig+0x4b8>)
 80099ee:	f043 0304 	orr.w	r3, r3, #4
 80099f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80099f6:	4b5c      	ldr	r3, [pc, #368]	@ (8009b68 <HAL_RCC_OscConfig+0x4b8>)
 80099f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099fc:	4a5a      	ldr	r2, [pc, #360]	@ (8009b68 <HAL_RCC_OscConfig+0x4b8>)
 80099fe:	f043 0301 	orr.w	r3, r3, #1
 8009a02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009a06:	e00f      	b.n	8009a28 <HAL_RCC_OscConfig+0x378>
 8009a08:	4b57      	ldr	r3, [pc, #348]	@ (8009b68 <HAL_RCC_OscConfig+0x4b8>)
 8009a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a0e:	4a56      	ldr	r2, [pc, #344]	@ (8009b68 <HAL_RCC_OscConfig+0x4b8>)
 8009a10:	f023 0301 	bic.w	r3, r3, #1
 8009a14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009a18:	4b53      	ldr	r3, [pc, #332]	@ (8009b68 <HAL_RCC_OscConfig+0x4b8>)
 8009a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a1e:	4a52      	ldr	r2, [pc, #328]	@ (8009b68 <HAL_RCC_OscConfig+0x4b8>)
 8009a20:	f023 0304 	bic.w	r3, r3, #4
 8009a24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d016      	beq.n	8009a5e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a30:	f7fa fca8 	bl	8004384 <HAL_GetTick>
 8009a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009a36:	e00a      	b.n	8009a4e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a38:	f7fa fca4 	bl	8004384 <HAL_GetTick>
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	1ad3      	subs	r3, r2, r3
 8009a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d901      	bls.n	8009a4e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009a4a:	2303      	movs	r3, #3
 8009a4c:	e138      	b.n	8009cc0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009a4e:	4b46      	ldr	r3, [pc, #280]	@ (8009b68 <HAL_RCC_OscConfig+0x4b8>)
 8009a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a54:	f003 0302 	and.w	r3, r3, #2
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d0ed      	beq.n	8009a38 <HAL_RCC_OscConfig+0x388>
 8009a5c:	e015      	b.n	8009a8a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a5e:	f7fa fc91 	bl	8004384 <HAL_GetTick>
 8009a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009a64:	e00a      	b.n	8009a7c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a66:	f7fa fc8d 	bl	8004384 <HAL_GetTick>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	1ad3      	subs	r3, r2, r3
 8009a70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d901      	bls.n	8009a7c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009a78:	2303      	movs	r3, #3
 8009a7a:	e121      	b.n	8009cc0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009a7c:	4b3a      	ldr	r3, [pc, #232]	@ (8009b68 <HAL_RCC_OscConfig+0x4b8>)
 8009a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a82:	f003 0302 	and.w	r3, r3, #2
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d1ed      	bne.n	8009a66 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009a8a:	7ffb      	ldrb	r3, [r7, #31]
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d105      	bne.n	8009a9c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a90:	4b35      	ldr	r3, [pc, #212]	@ (8009b68 <HAL_RCC_OscConfig+0x4b8>)
 8009a92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a94:	4a34      	ldr	r2, [pc, #208]	@ (8009b68 <HAL_RCC_OscConfig+0x4b8>)
 8009a96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a9a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f003 0320 	and.w	r3, r3, #32
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d03c      	beq.n	8009b22 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	699b      	ldr	r3, [r3, #24]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d01c      	beq.n	8009aea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009ab0:	4b2d      	ldr	r3, [pc, #180]	@ (8009b68 <HAL_RCC_OscConfig+0x4b8>)
 8009ab2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009ab6:	4a2c      	ldr	r2, [pc, #176]	@ (8009b68 <HAL_RCC_OscConfig+0x4b8>)
 8009ab8:	f043 0301 	orr.w	r3, r3, #1
 8009abc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ac0:	f7fa fc60 	bl	8004384 <HAL_GetTick>
 8009ac4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009ac6:	e008      	b.n	8009ada <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009ac8:	f7fa fc5c 	bl	8004384 <HAL_GetTick>
 8009acc:	4602      	mov	r2, r0
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	1ad3      	subs	r3, r2, r3
 8009ad2:	2b02      	cmp	r3, #2
 8009ad4:	d901      	bls.n	8009ada <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8009ad6:	2303      	movs	r3, #3
 8009ad8:	e0f2      	b.n	8009cc0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009ada:	4b23      	ldr	r3, [pc, #140]	@ (8009b68 <HAL_RCC_OscConfig+0x4b8>)
 8009adc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009ae0:	f003 0302 	and.w	r3, r3, #2
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d0ef      	beq.n	8009ac8 <HAL_RCC_OscConfig+0x418>
 8009ae8:	e01b      	b.n	8009b22 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009aea:	4b1f      	ldr	r3, [pc, #124]	@ (8009b68 <HAL_RCC_OscConfig+0x4b8>)
 8009aec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009af0:	4a1d      	ldr	r2, [pc, #116]	@ (8009b68 <HAL_RCC_OscConfig+0x4b8>)
 8009af2:	f023 0301 	bic.w	r3, r3, #1
 8009af6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009afa:	f7fa fc43 	bl	8004384 <HAL_GetTick>
 8009afe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009b00:	e008      	b.n	8009b14 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009b02:	f7fa fc3f 	bl	8004384 <HAL_GetTick>
 8009b06:	4602      	mov	r2, r0
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	1ad3      	subs	r3, r2, r3
 8009b0c:	2b02      	cmp	r3, #2
 8009b0e:	d901      	bls.n	8009b14 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009b10:	2303      	movs	r3, #3
 8009b12:	e0d5      	b.n	8009cc0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009b14:	4b14      	ldr	r3, [pc, #80]	@ (8009b68 <HAL_RCC_OscConfig+0x4b8>)
 8009b16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009b1a:	f003 0302 	and.w	r3, r3, #2
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d1ef      	bne.n	8009b02 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	69db      	ldr	r3, [r3, #28]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	f000 80c9 	beq.w	8009cbe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8009b68 <HAL_RCC_OscConfig+0x4b8>)
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	f003 030c 	and.w	r3, r3, #12
 8009b34:	2b0c      	cmp	r3, #12
 8009b36:	f000 8083 	beq.w	8009c40 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	69db      	ldr	r3, [r3, #28]
 8009b3e:	2b02      	cmp	r3, #2
 8009b40:	d15e      	bne.n	8009c00 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b42:	4b09      	ldr	r3, [pc, #36]	@ (8009b68 <HAL_RCC_OscConfig+0x4b8>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a08      	ldr	r2, [pc, #32]	@ (8009b68 <HAL_RCC_OscConfig+0x4b8>)
 8009b48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b4e:	f7fa fc19 	bl	8004384 <HAL_GetTick>
 8009b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009b54:	e00c      	b.n	8009b70 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b56:	f7fa fc15 	bl	8004384 <HAL_GetTick>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	1ad3      	subs	r3, r2, r3
 8009b60:	2b02      	cmp	r3, #2
 8009b62:	d905      	bls.n	8009b70 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009b64:	2303      	movs	r3, #3
 8009b66:	e0ab      	b.n	8009cc0 <HAL_RCC_OscConfig+0x610>
 8009b68:	40021000 	.word	0x40021000
 8009b6c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009b70:	4b55      	ldr	r3, [pc, #340]	@ (8009cc8 <HAL_RCC_OscConfig+0x618>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1ec      	bne.n	8009b56 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009b7c:	4b52      	ldr	r3, [pc, #328]	@ (8009cc8 <HAL_RCC_OscConfig+0x618>)
 8009b7e:	68da      	ldr	r2, [r3, #12]
 8009b80:	4b52      	ldr	r3, [pc, #328]	@ (8009ccc <HAL_RCC_OscConfig+0x61c>)
 8009b82:	4013      	ands	r3, r2
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	6a11      	ldr	r1, [r2, #32]
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009b8c:	3a01      	subs	r2, #1
 8009b8e:	0112      	lsls	r2, r2, #4
 8009b90:	4311      	orrs	r1, r2
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8009b96:	0212      	lsls	r2, r2, #8
 8009b98:	4311      	orrs	r1, r2
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009b9e:	0852      	lsrs	r2, r2, #1
 8009ba0:	3a01      	subs	r2, #1
 8009ba2:	0552      	lsls	r2, r2, #21
 8009ba4:	4311      	orrs	r1, r2
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009baa:	0852      	lsrs	r2, r2, #1
 8009bac:	3a01      	subs	r2, #1
 8009bae:	0652      	lsls	r2, r2, #25
 8009bb0:	4311      	orrs	r1, r2
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009bb6:	06d2      	lsls	r2, r2, #27
 8009bb8:	430a      	orrs	r2, r1
 8009bba:	4943      	ldr	r1, [pc, #268]	@ (8009cc8 <HAL_RCC_OscConfig+0x618>)
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009bc0:	4b41      	ldr	r3, [pc, #260]	@ (8009cc8 <HAL_RCC_OscConfig+0x618>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a40      	ldr	r2, [pc, #256]	@ (8009cc8 <HAL_RCC_OscConfig+0x618>)
 8009bc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009bca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009bcc:	4b3e      	ldr	r3, [pc, #248]	@ (8009cc8 <HAL_RCC_OscConfig+0x618>)
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	4a3d      	ldr	r2, [pc, #244]	@ (8009cc8 <HAL_RCC_OscConfig+0x618>)
 8009bd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009bd6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bd8:	f7fa fbd4 	bl	8004384 <HAL_GetTick>
 8009bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009bde:	e008      	b.n	8009bf2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009be0:	f7fa fbd0 	bl	8004384 <HAL_GetTick>
 8009be4:	4602      	mov	r2, r0
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	1ad3      	subs	r3, r2, r3
 8009bea:	2b02      	cmp	r3, #2
 8009bec:	d901      	bls.n	8009bf2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8009bee:	2303      	movs	r3, #3
 8009bf0:	e066      	b.n	8009cc0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009bf2:	4b35      	ldr	r3, [pc, #212]	@ (8009cc8 <HAL_RCC_OscConfig+0x618>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d0f0      	beq.n	8009be0 <HAL_RCC_OscConfig+0x530>
 8009bfe:	e05e      	b.n	8009cbe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c00:	4b31      	ldr	r3, [pc, #196]	@ (8009cc8 <HAL_RCC_OscConfig+0x618>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a30      	ldr	r2, [pc, #192]	@ (8009cc8 <HAL_RCC_OscConfig+0x618>)
 8009c06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c0c:	f7fa fbba 	bl	8004384 <HAL_GetTick>
 8009c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009c12:	e008      	b.n	8009c26 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c14:	f7fa fbb6 	bl	8004384 <HAL_GetTick>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	1ad3      	subs	r3, r2, r3
 8009c1e:	2b02      	cmp	r3, #2
 8009c20:	d901      	bls.n	8009c26 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8009c22:	2303      	movs	r3, #3
 8009c24:	e04c      	b.n	8009cc0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009c26:	4b28      	ldr	r3, [pc, #160]	@ (8009cc8 <HAL_RCC_OscConfig+0x618>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d1f0      	bne.n	8009c14 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009c32:	4b25      	ldr	r3, [pc, #148]	@ (8009cc8 <HAL_RCC_OscConfig+0x618>)
 8009c34:	68da      	ldr	r2, [r3, #12]
 8009c36:	4924      	ldr	r1, [pc, #144]	@ (8009cc8 <HAL_RCC_OscConfig+0x618>)
 8009c38:	4b25      	ldr	r3, [pc, #148]	@ (8009cd0 <HAL_RCC_OscConfig+0x620>)
 8009c3a:	4013      	ands	r3, r2
 8009c3c:	60cb      	str	r3, [r1, #12]
 8009c3e:	e03e      	b.n	8009cbe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	69db      	ldr	r3, [r3, #28]
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d101      	bne.n	8009c4c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e039      	b.n	8009cc0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8009cc8 <HAL_RCC_OscConfig+0x618>)
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	f003 0203 	and.w	r2, r3, #3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6a1b      	ldr	r3, [r3, #32]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d12c      	bne.n	8009cba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c6a:	3b01      	subs	r3, #1
 8009c6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d123      	bne.n	8009cba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d11b      	bne.n	8009cba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c8c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d113      	bne.n	8009cba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c9c:	085b      	lsrs	r3, r3, #1
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d109      	bne.n	8009cba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cb0:	085b      	lsrs	r3, r3, #1
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d001      	beq.n	8009cbe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e000      	b.n	8009cc0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8009cbe:	2300      	movs	r3, #0
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3720      	adds	r7, #32
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}
 8009cc8:	40021000 	.word	0x40021000
 8009ccc:	019f800c 	.word	0x019f800c
 8009cd0:	feeefffc 	.word	0xfeeefffc

08009cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b086      	sub	sp, #24
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d101      	bne.n	8009cec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	e11e      	b.n	8009f2a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009cec:	4b91      	ldr	r3, [pc, #580]	@ (8009f34 <HAL_RCC_ClockConfig+0x260>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f003 030f 	and.w	r3, r3, #15
 8009cf4:	683a      	ldr	r2, [r7, #0]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d910      	bls.n	8009d1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009cfa:	4b8e      	ldr	r3, [pc, #568]	@ (8009f34 <HAL_RCC_ClockConfig+0x260>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f023 020f 	bic.w	r2, r3, #15
 8009d02:	498c      	ldr	r1, [pc, #560]	@ (8009f34 <HAL_RCC_ClockConfig+0x260>)
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	4313      	orrs	r3, r2
 8009d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d0a:	4b8a      	ldr	r3, [pc, #552]	@ (8009f34 <HAL_RCC_ClockConfig+0x260>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f003 030f 	and.w	r3, r3, #15
 8009d12:	683a      	ldr	r2, [r7, #0]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d001      	beq.n	8009d1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	e106      	b.n	8009f2a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f003 0301 	and.w	r3, r3, #1
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d073      	beq.n	8009e10 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	2b03      	cmp	r3, #3
 8009d2e:	d129      	bne.n	8009d84 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009d30:	4b81      	ldr	r3, [pc, #516]	@ (8009f38 <HAL_RCC_ClockConfig+0x264>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d101      	bne.n	8009d40 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	e0f4      	b.n	8009f2a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009d40:	f000 f9ca 	bl	800a0d8 <RCC_GetSysClockFreqFromPLLSource>
 8009d44:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	4a7c      	ldr	r2, [pc, #496]	@ (8009f3c <HAL_RCC_ClockConfig+0x268>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d93f      	bls.n	8009dce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009d4e:	4b7a      	ldr	r3, [pc, #488]	@ (8009f38 <HAL_RCC_ClockConfig+0x264>)
 8009d50:	689b      	ldr	r3, [r3, #8]
 8009d52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d009      	beq.n	8009d6e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d033      	beq.n	8009dce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d12f      	bne.n	8009dce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009d6e:	4b72      	ldr	r3, [pc, #456]	@ (8009f38 <HAL_RCC_ClockConfig+0x264>)
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009d76:	4a70      	ldr	r2, [pc, #448]	@ (8009f38 <HAL_RCC_ClockConfig+0x264>)
 8009d78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d7c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009d7e:	2380      	movs	r3, #128	@ 0x80
 8009d80:	617b      	str	r3, [r7, #20]
 8009d82:	e024      	b.n	8009dce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	2b02      	cmp	r3, #2
 8009d8a:	d107      	bne.n	8009d9c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009d8c:	4b6a      	ldr	r3, [pc, #424]	@ (8009f38 <HAL_RCC_ClockConfig+0x264>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d109      	bne.n	8009dac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	e0c6      	b.n	8009f2a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009d9c:	4b66      	ldr	r3, [pc, #408]	@ (8009f38 <HAL_RCC_ClockConfig+0x264>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d101      	bne.n	8009dac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009da8:	2301      	movs	r3, #1
 8009daa:	e0be      	b.n	8009f2a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009dac:	f000 f8ce 	bl	8009f4c <HAL_RCC_GetSysClockFreq>
 8009db0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	4a61      	ldr	r2, [pc, #388]	@ (8009f3c <HAL_RCC_ClockConfig+0x268>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d909      	bls.n	8009dce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009dba:	4b5f      	ldr	r3, [pc, #380]	@ (8009f38 <HAL_RCC_ClockConfig+0x264>)
 8009dbc:	689b      	ldr	r3, [r3, #8]
 8009dbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009dc2:	4a5d      	ldr	r2, [pc, #372]	@ (8009f38 <HAL_RCC_ClockConfig+0x264>)
 8009dc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009dc8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009dca:	2380      	movs	r3, #128	@ 0x80
 8009dcc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009dce:	4b5a      	ldr	r3, [pc, #360]	@ (8009f38 <HAL_RCC_ClockConfig+0x264>)
 8009dd0:	689b      	ldr	r3, [r3, #8]
 8009dd2:	f023 0203 	bic.w	r2, r3, #3
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	4957      	ldr	r1, [pc, #348]	@ (8009f38 <HAL_RCC_ClockConfig+0x264>)
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009de0:	f7fa fad0 	bl	8004384 <HAL_GetTick>
 8009de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009de6:	e00a      	b.n	8009dfe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009de8:	f7fa facc 	bl	8004384 <HAL_GetTick>
 8009dec:	4602      	mov	r2, r0
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	1ad3      	subs	r3, r2, r3
 8009df2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d901      	bls.n	8009dfe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009dfa:	2303      	movs	r3, #3
 8009dfc:	e095      	b.n	8009f2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009dfe:	4b4e      	ldr	r3, [pc, #312]	@ (8009f38 <HAL_RCC_ClockConfig+0x264>)
 8009e00:	689b      	ldr	r3, [r3, #8]
 8009e02:	f003 020c 	and.w	r2, r3, #12
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d1eb      	bne.n	8009de8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f003 0302 	and.w	r3, r3, #2
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d023      	beq.n	8009e64 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f003 0304 	and.w	r3, r3, #4
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d005      	beq.n	8009e34 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009e28:	4b43      	ldr	r3, [pc, #268]	@ (8009f38 <HAL_RCC_ClockConfig+0x264>)
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	4a42      	ldr	r2, [pc, #264]	@ (8009f38 <HAL_RCC_ClockConfig+0x264>)
 8009e2e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009e32:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f003 0308 	and.w	r3, r3, #8
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d007      	beq.n	8009e50 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009e40:	4b3d      	ldr	r3, [pc, #244]	@ (8009f38 <HAL_RCC_ClockConfig+0x264>)
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009e48:	4a3b      	ldr	r2, [pc, #236]	@ (8009f38 <HAL_RCC_ClockConfig+0x264>)
 8009e4a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009e4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e50:	4b39      	ldr	r3, [pc, #228]	@ (8009f38 <HAL_RCC_ClockConfig+0x264>)
 8009e52:	689b      	ldr	r3, [r3, #8]
 8009e54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	4936      	ldr	r1, [pc, #216]	@ (8009f38 <HAL_RCC_ClockConfig+0x264>)
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	608b      	str	r3, [r1, #8]
 8009e62:	e008      	b.n	8009e76 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	2b80      	cmp	r3, #128	@ 0x80
 8009e68:	d105      	bne.n	8009e76 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009e6a:	4b33      	ldr	r3, [pc, #204]	@ (8009f38 <HAL_RCC_ClockConfig+0x264>)
 8009e6c:	689b      	ldr	r3, [r3, #8]
 8009e6e:	4a32      	ldr	r2, [pc, #200]	@ (8009f38 <HAL_RCC_ClockConfig+0x264>)
 8009e70:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009e74:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009e76:	4b2f      	ldr	r3, [pc, #188]	@ (8009f34 <HAL_RCC_ClockConfig+0x260>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f003 030f 	and.w	r3, r3, #15
 8009e7e:	683a      	ldr	r2, [r7, #0]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d21d      	bcs.n	8009ec0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e84:	4b2b      	ldr	r3, [pc, #172]	@ (8009f34 <HAL_RCC_ClockConfig+0x260>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f023 020f 	bic.w	r2, r3, #15
 8009e8c:	4929      	ldr	r1, [pc, #164]	@ (8009f34 <HAL_RCC_ClockConfig+0x260>)
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	4313      	orrs	r3, r2
 8009e92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009e94:	f7fa fa76 	bl	8004384 <HAL_GetTick>
 8009e98:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e9a:	e00a      	b.n	8009eb2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e9c:	f7fa fa72 	bl	8004384 <HAL_GetTick>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	1ad3      	subs	r3, r2, r3
 8009ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d901      	bls.n	8009eb2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009eae:	2303      	movs	r3, #3
 8009eb0:	e03b      	b.n	8009f2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009eb2:	4b20      	ldr	r3, [pc, #128]	@ (8009f34 <HAL_RCC_ClockConfig+0x260>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f003 030f 	and.w	r3, r3, #15
 8009eba:	683a      	ldr	r2, [r7, #0]
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d1ed      	bne.n	8009e9c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f003 0304 	and.w	r3, r3, #4
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d008      	beq.n	8009ede <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8009f38 <HAL_RCC_ClockConfig+0x264>)
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	4917      	ldr	r1, [pc, #92]	@ (8009f38 <HAL_RCC_ClockConfig+0x264>)
 8009eda:	4313      	orrs	r3, r2
 8009edc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f003 0308 	and.w	r3, r3, #8
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d009      	beq.n	8009efe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009eea:	4b13      	ldr	r3, [pc, #76]	@ (8009f38 <HAL_RCC_ClockConfig+0x264>)
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	691b      	ldr	r3, [r3, #16]
 8009ef6:	00db      	lsls	r3, r3, #3
 8009ef8:	490f      	ldr	r1, [pc, #60]	@ (8009f38 <HAL_RCC_ClockConfig+0x264>)
 8009efa:	4313      	orrs	r3, r2
 8009efc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009efe:	f000 f825 	bl	8009f4c <HAL_RCC_GetSysClockFreq>
 8009f02:	4602      	mov	r2, r0
 8009f04:	4b0c      	ldr	r3, [pc, #48]	@ (8009f38 <HAL_RCC_ClockConfig+0x264>)
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	091b      	lsrs	r3, r3, #4
 8009f0a:	f003 030f 	and.w	r3, r3, #15
 8009f0e:	490c      	ldr	r1, [pc, #48]	@ (8009f40 <HAL_RCC_ClockConfig+0x26c>)
 8009f10:	5ccb      	ldrb	r3, [r1, r3]
 8009f12:	f003 031f 	and.w	r3, r3, #31
 8009f16:	fa22 f303 	lsr.w	r3, r2, r3
 8009f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8009f44 <HAL_RCC_ClockConfig+0x270>)
 8009f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8009f48 <HAL_RCC_ClockConfig+0x274>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7fa f9e2 	bl	80042ec <HAL_InitTick>
 8009f28:	4603      	mov	r3, r0
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3718      	adds	r7, #24
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	40022000 	.word	0x40022000
 8009f38:	40021000 	.word	0x40021000
 8009f3c:	04c4b400 	.word	0x04c4b400
 8009f40:	08023e88 	.word	0x08023e88
 8009f44:	20000044 	.word	0x20000044
 8009f48:	2000004c 	.word	0x2000004c

08009f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b087      	sub	sp, #28
 8009f50:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009f52:	4b2c      	ldr	r3, [pc, #176]	@ (800a004 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009f54:	689b      	ldr	r3, [r3, #8]
 8009f56:	f003 030c 	and.w	r3, r3, #12
 8009f5a:	2b04      	cmp	r3, #4
 8009f5c:	d102      	bne.n	8009f64 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009f5e:	4b2a      	ldr	r3, [pc, #168]	@ (800a008 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009f60:	613b      	str	r3, [r7, #16]
 8009f62:	e047      	b.n	8009ff4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009f64:	4b27      	ldr	r3, [pc, #156]	@ (800a004 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	f003 030c 	and.w	r3, r3, #12
 8009f6c:	2b08      	cmp	r3, #8
 8009f6e:	d102      	bne.n	8009f76 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009f70:	4b26      	ldr	r3, [pc, #152]	@ (800a00c <HAL_RCC_GetSysClockFreq+0xc0>)
 8009f72:	613b      	str	r3, [r7, #16]
 8009f74:	e03e      	b.n	8009ff4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009f76:	4b23      	ldr	r3, [pc, #140]	@ (800a004 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009f78:	689b      	ldr	r3, [r3, #8]
 8009f7a:	f003 030c 	and.w	r3, r3, #12
 8009f7e:	2b0c      	cmp	r3, #12
 8009f80:	d136      	bne.n	8009ff0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009f82:	4b20      	ldr	r3, [pc, #128]	@ (800a004 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	f003 0303 	and.w	r3, r3, #3
 8009f8a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009f8c:	4b1d      	ldr	r3, [pc, #116]	@ (800a004 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009f8e:	68db      	ldr	r3, [r3, #12]
 8009f90:	091b      	lsrs	r3, r3, #4
 8009f92:	f003 030f 	and.w	r3, r3, #15
 8009f96:	3301      	adds	r3, #1
 8009f98:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2b03      	cmp	r3, #3
 8009f9e:	d10c      	bne.n	8009fba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009fa0:	4a1a      	ldr	r2, [pc, #104]	@ (800a00c <HAL_RCC_GetSysClockFreq+0xc0>)
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fa8:	4a16      	ldr	r2, [pc, #88]	@ (800a004 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009faa:	68d2      	ldr	r2, [r2, #12]
 8009fac:	0a12      	lsrs	r2, r2, #8
 8009fae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009fb2:	fb02 f303 	mul.w	r3, r2, r3
 8009fb6:	617b      	str	r3, [r7, #20]
      break;
 8009fb8:	e00c      	b.n	8009fd4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009fba:	4a13      	ldr	r2, [pc, #76]	@ (800a008 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fc2:	4a10      	ldr	r2, [pc, #64]	@ (800a004 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009fc4:	68d2      	ldr	r2, [r2, #12]
 8009fc6:	0a12      	lsrs	r2, r2, #8
 8009fc8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009fcc:	fb02 f303 	mul.w	r3, r2, r3
 8009fd0:	617b      	str	r3, [r7, #20]
      break;
 8009fd2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009fd4:	4b0b      	ldr	r3, [pc, #44]	@ (800a004 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	0e5b      	lsrs	r3, r3, #25
 8009fda:	f003 0303 	and.w	r3, r3, #3
 8009fde:	3301      	adds	r3, #1
 8009fe0:	005b      	lsls	r3, r3, #1
 8009fe2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009fe4:	697a      	ldr	r2, [r7, #20]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fec:	613b      	str	r3, [r7, #16]
 8009fee:	e001      	b.n	8009ff4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009ff4:	693b      	ldr	r3, [r7, #16]
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	371c      	adds	r7, #28
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr
 800a002:	bf00      	nop
 800a004:	40021000 	.word	0x40021000
 800a008:	00f42400 	.word	0x00f42400
 800a00c:	007a1200 	.word	0x007a1200

0800a010 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a010:	b480      	push	{r7}
 800a012:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a014:	4b03      	ldr	r3, [pc, #12]	@ (800a024 <HAL_RCC_GetHCLKFreq+0x14>)
 800a016:	681b      	ldr	r3, [r3, #0]
}
 800a018:	4618      	mov	r0, r3
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr
 800a022:	bf00      	nop
 800a024:	20000044 	.word	0x20000044

0800a028 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a02c:	f7ff fff0 	bl	800a010 <HAL_RCC_GetHCLKFreq>
 800a030:	4602      	mov	r2, r0
 800a032:	4b06      	ldr	r3, [pc, #24]	@ (800a04c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a034:	689b      	ldr	r3, [r3, #8]
 800a036:	0a1b      	lsrs	r3, r3, #8
 800a038:	f003 0307 	and.w	r3, r3, #7
 800a03c:	4904      	ldr	r1, [pc, #16]	@ (800a050 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a03e:	5ccb      	ldrb	r3, [r1, r3]
 800a040:	f003 031f 	and.w	r3, r3, #31
 800a044:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a048:	4618      	mov	r0, r3
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	40021000 	.word	0x40021000
 800a050:	08023e98 	.word	0x08023e98

0800a054 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a058:	f7ff ffda 	bl	800a010 <HAL_RCC_GetHCLKFreq>
 800a05c:	4602      	mov	r2, r0
 800a05e:	4b06      	ldr	r3, [pc, #24]	@ (800a078 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	0adb      	lsrs	r3, r3, #11
 800a064:	f003 0307 	and.w	r3, r3, #7
 800a068:	4904      	ldr	r1, [pc, #16]	@ (800a07c <HAL_RCC_GetPCLK2Freq+0x28>)
 800a06a:	5ccb      	ldrb	r3, [r1, r3]
 800a06c:	f003 031f 	and.w	r3, r3, #31
 800a070:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a074:	4618      	mov	r0, r3
 800a076:	bd80      	pop	{r7, pc}
 800a078:	40021000 	.word	0x40021000
 800a07c:	08023e98 	.word	0x08023e98

0800a080 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800a080:	b480      	push	{r7}
 800a082:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 800a084:	4b05      	ldr	r3, [pc, #20]	@ (800a09c <HAL_RCC_EnableCSS+0x1c>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a04      	ldr	r2, [pc, #16]	@ (800a09c <HAL_RCC_EnableCSS+0x1c>)
 800a08a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a08e:	6013      	str	r3, [r2, #0]
}
 800a090:	bf00      	nop
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr
 800a09a:	bf00      	nop
 800a09c:	40021000 	.word	0x40021000

0800a0a0 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800a0a4:	4b07      	ldr	r3, [pc, #28]	@ (800a0c4 <HAL_RCC_NMI_IRQHandler+0x24>)
 800a0a6:	69db      	ldr	r3, [r3, #28]
 800a0a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0b0:	d105      	bne.n	800a0be <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800a0b2:	f000 f809 	bl	800a0c8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800a0b6:	4b03      	ldr	r3, [pc, #12]	@ (800a0c4 <HAL_RCC_NMI_IRQHandler+0x24>)
 800a0b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a0bc:	621a      	str	r2, [r3, #32]
  }
}
 800a0be:	bf00      	nop
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	40021000 	.word	0x40021000

0800a0c8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 800a0cc:	bf00      	nop
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d4:	4770      	bx	lr
	...

0800a0d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b087      	sub	sp, #28
 800a0dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a0de:	4b1e      	ldr	r3, [pc, #120]	@ (800a158 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	f003 0303 	and.w	r3, r3, #3
 800a0e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a0e8:	4b1b      	ldr	r3, [pc, #108]	@ (800a158 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	091b      	lsrs	r3, r3, #4
 800a0ee:	f003 030f 	and.w	r3, r3, #15
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	2b03      	cmp	r3, #3
 800a0fa:	d10c      	bne.n	800a116 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a0fc:	4a17      	ldr	r2, [pc, #92]	@ (800a15c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	fbb2 f3f3 	udiv	r3, r2, r3
 800a104:	4a14      	ldr	r2, [pc, #80]	@ (800a158 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a106:	68d2      	ldr	r2, [r2, #12]
 800a108:	0a12      	lsrs	r2, r2, #8
 800a10a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a10e:	fb02 f303 	mul.w	r3, r2, r3
 800a112:	617b      	str	r3, [r7, #20]
    break;
 800a114:	e00c      	b.n	800a130 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a116:	4a12      	ldr	r2, [pc, #72]	@ (800a160 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a11e:	4a0e      	ldr	r2, [pc, #56]	@ (800a158 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a120:	68d2      	ldr	r2, [r2, #12]
 800a122:	0a12      	lsrs	r2, r2, #8
 800a124:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a128:	fb02 f303 	mul.w	r3, r2, r3
 800a12c:	617b      	str	r3, [r7, #20]
    break;
 800a12e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a130:	4b09      	ldr	r3, [pc, #36]	@ (800a158 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a132:	68db      	ldr	r3, [r3, #12]
 800a134:	0e5b      	lsrs	r3, r3, #25
 800a136:	f003 0303 	and.w	r3, r3, #3
 800a13a:	3301      	adds	r3, #1
 800a13c:	005b      	lsls	r3, r3, #1
 800a13e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800a140:	697a      	ldr	r2, [r7, #20]
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	fbb2 f3f3 	udiv	r3, r2, r3
 800a148:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800a14a:	687b      	ldr	r3, [r7, #4]
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	371c      	adds	r7, #28
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr
 800a158:	40021000 	.word	0x40021000
 800a15c:	007a1200 	.word	0x007a1200
 800a160:	00f42400 	.word	0x00f42400

0800a164 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b086      	sub	sp, #24
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a16c:	2300      	movs	r3, #0
 800a16e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a170:	2300      	movs	r3, #0
 800a172:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	f000 8098 	beq.w	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a182:	2300      	movs	r3, #0
 800a184:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a186:	4b43      	ldr	r3, [pc, #268]	@ (800a294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a18a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d10d      	bne.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a192:	4b40      	ldr	r3, [pc, #256]	@ (800a294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a196:	4a3f      	ldr	r2, [pc, #252]	@ (800a294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a198:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a19c:	6593      	str	r3, [r2, #88]	@ 0x58
 800a19e:	4b3d      	ldr	r3, [pc, #244]	@ (800a294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a1a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a1a6:	60bb      	str	r3, [r7, #8]
 800a1a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a1ae:	4b3a      	ldr	r3, [pc, #232]	@ (800a298 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	4a39      	ldr	r2, [pc, #228]	@ (800a298 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a1b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a1b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a1ba:	f7fa f8e3 	bl	8004384 <HAL_GetTick>
 800a1be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a1c0:	e009      	b.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a1c2:	f7fa f8df 	bl	8004384 <HAL_GetTick>
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	1ad3      	subs	r3, r2, r3
 800a1cc:	2b02      	cmp	r3, #2
 800a1ce:	d902      	bls.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800a1d0:	2303      	movs	r3, #3
 800a1d2:	74fb      	strb	r3, [r7, #19]
        break;
 800a1d4:	e005      	b.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a1d6:	4b30      	ldr	r3, [pc, #192]	@ (800a298 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d0ef      	beq.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800a1e2:	7cfb      	ldrb	r3, [r7, #19]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d159      	bne.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a1e8:	4b2a      	ldr	r3, [pc, #168]	@ (800a294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a1ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a1f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d01e      	beq.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1fe:	697a      	ldr	r2, [r7, #20]
 800a200:	429a      	cmp	r2, r3
 800a202:	d019      	beq.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a204:	4b23      	ldr	r3, [pc, #140]	@ (800a294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a20a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a20e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a210:	4b20      	ldr	r3, [pc, #128]	@ (800a294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a216:	4a1f      	ldr	r2, [pc, #124]	@ (800a294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a21c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a220:	4b1c      	ldr	r3, [pc, #112]	@ (800a294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a226:	4a1b      	ldr	r2, [pc, #108]	@ (800a294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a228:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a22c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a230:	4a18      	ldr	r2, [pc, #96]	@ (800a294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	f003 0301 	and.w	r3, r3, #1
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d016      	beq.n	800a270 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a242:	f7fa f89f 	bl	8004384 <HAL_GetTick>
 800a246:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a248:	e00b      	b.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a24a:	f7fa f89b 	bl	8004384 <HAL_GetTick>
 800a24e:	4602      	mov	r2, r0
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	1ad3      	subs	r3, r2, r3
 800a254:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a258:	4293      	cmp	r3, r2
 800a25a:	d902      	bls.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800a25c:	2303      	movs	r3, #3
 800a25e:	74fb      	strb	r3, [r7, #19]
            break;
 800a260:	e006      	b.n	800a270 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a262:	4b0c      	ldr	r3, [pc, #48]	@ (800a294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a264:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a268:	f003 0302 	and.w	r3, r3, #2
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d0ec      	beq.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800a270:	7cfb      	ldrb	r3, [r7, #19]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d10b      	bne.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a276:	4b07      	ldr	r3, [pc, #28]	@ (800a294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a278:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a27c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a284:	4903      	ldr	r1, [pc, #12]	@ (800a294 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a286:	4313      	orrs	r3, r2
 800a288:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800a28c:	e008      	b.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a28e:	7cfb      	ldrb	r3, [r7, #19]
 800a290:	74bb      	strb	r3, [r7, #18]
 800a292:	e005      	b.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800a294:	40021000 	.word	0x40021000
 800a298:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a29c:	7cfb      	ldrb	r3, [r7, #19]
 800a29e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a2a0:	7c7b      	ldrb	r3, [r7, #17]
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d105      	bne.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a2a6:	4ba7      	ldr	r3, [pc, #668]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a2a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2aa:	4aa6      	ldr	r2, [pc, #664]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a2ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a2b0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f003 0301 	and.w	r3, r3, #1
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d00a      	beq.n	800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a2be:	4ba1      	ldr	r3, [pc, #644]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a2c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2c4:	f023 0203 	bic.w	r2, r3, #3
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	499d      	ldr	r1, [pc, #628]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f003 0302 	and.w	r3, r3, #2
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d00a      	beq.n	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a2e0:	4b98      	ldr	r3, [pc, #608]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a2e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2e6:	f023 020c 	bic.w	r2, r3, #12
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	689b      	ldr	r3, [r3, #8]
 800a2ee:	4995      	ldr	r1, [pc, #596]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f003 0304 	and.w	r3, r3, #4
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d00a      	beq.n	800a318 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a302:	4b90      	ldr	r3, [pc, #576]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a308:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	498c      	ldr	r1, [pc, #560]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a312:	4313      	orrs	r3, r2
 800a314:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f003 0308 	and.w	r3, r3, #8
 800a320:	2b00      	cmp	r3, #0
 800a322:	d00a      	beq.n	800a33a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a324:	4b87      	ldr	r3, [pc, #540]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a32a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	691b      	ldr	r3, [r3, #16]
 800a332:	4984      	ldr	r1, [pc, #528]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a334:	4313      	orrs	r3, r2
 800a336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f003 0310 	and.w	r3, r3, #16
 800a342:	2b00      	cmp	r3, #0
 800a344:	d00a      	beq.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a346:	4b7f      	ldr	r3, [pc, #508]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a34c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	695b      	ldr	r3, [r3, #20]
 800a354:	497b      	ldr	r1, [pc, #492]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a356:	4313      	orrs	r3, r2
 800a358:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f003 0320 	and.w	r3, r3, #32
 800a364:	2b00      	cmp	r3, #0
 800a366:	d00a      	beq.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a368:	4b76      	ldr	r3, [pc, #472]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a36a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a36e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	699b      	ldr	r3, [r3, #24]
 800a376:	4973      	ldr	r1, [pc, #460]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a378:	4313      	orrs	r3, r2
 800a37a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a386:	2b00      	cmp	r3, #0
 800a388:	d00a      	beq.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a38a:	4b6e      	ldr	r3, [pc, #440]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a38c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a390:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	69db      	ldr	r3, [r3, #28]
 800a398:	496a      	ldr	r1, [pc, #424]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a39a:	4313      	orrs	r3, r2
 800a39c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d00a      	beq.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a3ac:	4b65      	ldr	r3, [pc, #404]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a3ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3b2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6a1b      	ldr	r3, [r3, #32]
 800a3ba:	4962      	ldr	r1, [pc, #392]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d00a      	beq.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a3ce:	4b5d      	ldr	r3, [pc, #372]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a3d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3dc:	4959      	ldr	r1, [pc, #356]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d00a      	beq.n	800a406 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a3f0:	4b54      	ldr	r3, [pc, #336]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a3f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a3f6:	f023 0203 	bic.w	r2, r3, #3
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3fe:	4951      	ldr	r1, [pc, #324]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a400:	4313      	orrs	r3, r2
 800a402:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d00a      	beq.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a412:	4b4c      	ldr	r3, [pc, #304]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a418:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a420:	4948      	ldr	r1, [pc, #288]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a422:	4313      	orrs	r3, r2
 800a424:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a430:	2b00      	cmp	r3, #0
 800a432:	d015      	beq.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a434:	4b43      	ldr	r3, [pc, #268]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a43a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a442:	4940      	ldr	r1, [pc, #256]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a444:	4313      	orrs	r3, r2
 800a446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a44e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a452:	d105      	bne.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a454:	4b3b      	ldr	r3, [pc, #236]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	4a3a      	ldr	r2, [pc, #232]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a45a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a45e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d015      	beq.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a46c:	4b35      	ldr	r3, [pc, #212]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a46e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a472:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a47a:	4932      	ldr	r1, [pc, #200]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a47c:	4313      	orrs	r3, r2
 800a47e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a486:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a48a:	d105      	bne.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a48c:	4b2d      	ldr	r3, [pc, #180]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a48e:	68db      	ldr	r3, [r3, #12]
 800a490:	4a2c      	ldr	r2, [pc, #176]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a492:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a496:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d015      	beq.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a4a4:	4b27      	ldr	r3, [pc, #156]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4aa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4b2:	4924      	ldr	r1, [pc, #144]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a4c2:	d105      	bne.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a4c4:	4b1f      	ldr	r3, [pc, #124]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	4a1e      	ldr	r2, [pc, #120]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a4ce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d015      	beq.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a4dc:	4b19      	ldr	r3, [pc, #100]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4ea:	4916      	ldr	r1, [pc, #88]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a4fa:	d105      	bne.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a4fc:	4b11      	ldr	r3, [pc, #68]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4fe:	68db      	ldr	r3, [r3, #12]
 800a500:	4a10      	ldr	r2, [pc, #64]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a502:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a506:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a510:	2b00      	cmp	r3, #0
 800a512:	d019      	beq.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a514:	4b0b      	ldr	r3, [pc, #44]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a51a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a522:	4908      	ldr	r1, [pc, #32]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a524:	4313      	orrs	r3, r2
 800a526:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a52e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a532:	d109      	bne.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a534:	4b03      	ldr	r3, [pc, #12]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	4a02      	ldr	r2, [pc, #8]	@ (800a544 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a53a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a53e:	60d3      	str	r3, [r2, #12]
 800a540:	e002      	b.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800a542:	bf00      	nop
 800a544:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a550:	2b00      	cmp	r3, #0
 800a552:	d015      	beq.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a554:	4b29      	ldr	r3, [pc, #164]	@ (800a5fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a55a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a562:	4926      	ldr	r1, [pc, #152]	@ (800a5fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a564:	4313      	orrs	r3, r2
 800a566:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a56e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a572:	d105      	bne.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a574:	4b21      	ldr	r3, [pc, #132]	@ (800a5fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a576:	68db      	ldr	r3, [r3, #12]
 800a578:	4a20      	ldr	r2, [pc, #128]	@ (800a5fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a57a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a57e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d015      	beq.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800a58c:	4b1b      	ldr	r3, [pc, #108]	@ (800a5fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a58e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a592:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a59a:	4918      	ldr	r1, [pc, #96]	@ (800a5fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a59c:	4313      	orrs	r3, r2
 800a59e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a5a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5aa:	d105      	bne.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a5ac:	4b13      	ldr	r3, [pc, #76]	@ (800a5fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	4a12      	ldr	r2, [pc, #72]	@ (800a5fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a5b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a5b6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d015      	beq.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a5c4:	4b0d      	ldr	r3, [pc, #52]	@ (800a5fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a5c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a5ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5d2:	490a      	ldr	r1, [pc, #40]	@ (800a5fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a5e2:	d105      	bne.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a5e4:	4b05      	ldr	r3, [pc, #20]	@ (800a5fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a5e6:	68db      	ldr	r3, [r3, #12]
 800a5e8:	4a04      	ldr	r2, [pc, #16]	@ (800a5fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a5ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a5ee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a5f0:	7cbb      	ldrb	r3, [r7, #18]
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3718      	adds	r7, #24
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	bf00      	nop
 800a5fc:	40021000 	.word	0x40021000

0800a600 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b084      	sub	sp, #16
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d101      	bne.n	800a612 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a60e:	2301      	movs	r3, #1
 800a610:	e09d      	b.n	800a74e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a616:	2b00      	cmp	r3, #0
 800a618:	d108      	bne.n	800a62c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a622:	d009      	beq.n	800a638 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	61da      	str	r2, [r3, #28]
 800a62a:	e005      	b.n	800a638 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2200      	movs	r2, #0
 800a630:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2200      	movs	r2, #0
 800a636:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2200      	movs	r2, #0
 800a63c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a644:	b2db      	uxtb	r3, r3
 800a646:	2b00      	cmp	r3, #0
 800a648:	d106      	bne.n	800a658 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2200      	movs	r2, #0
 800a64e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f7f9 f93c 	bl	80038d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2202      	movs	r2, #2
 800a65c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a66e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	68db      	ldr	r3, [r3, #12]
 800a674:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a678:	d902      	bls.n	800a680 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a67a:	2300      	movs	r3, #0
 800a67c:	60fb      	str	r3, [r7, #12]
 800a67e:	e002      	b.n	800a686 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a680:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a684:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	68db      	ldr	r3, [r3, #12]
 800a68a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800a68e:	d007      	beq.n	800a6a0 <HAL_SPI_Init+0xa0>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	68db      	ldr	r3, [r3, #12]
 800a694:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a698:	d002      	beq.n	800a6a0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2200      	movs	r2, #0
 800a69e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	689b      	ldr	r3, [r3, #8]
 800a6ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a6b0:	431a      	orrs	r2, r3
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	691b      	ldr	r3, [r3, #16]
 800a6b6:	f003 0302 	and.w	r3, r3, #2
 800a6ba:	431a      	orrs	r2, r3
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	695b      	ldr	r3, [r3, #20]
 800a6c0:	f003 0301 	and.w	r3, r3, #1
 800a6c4:	431a      	orrs	r2, r3
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	699b      	ldr	r3, [r3, #24]
 800a6ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a6ce:	431a      	orrs	r2, r3
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	69db      	ldr	r3, [r3, #28]
 800a6d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a6d8:	431a      	orrs	r2, r3
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6a1b      	ldr	r3, [r3, #32]
 800a6de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6e2:	ea42 0103 	orr.w	r1, r2, r3
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ea:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	430a      	orrs	r2, r1
 800a6f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	699b      	ldr	r3, [r3, #24]
 800a6fa:	0c1b      	lsrs	r3, r3, #16
 800a6fc:	f003 0204 	and.w	r2, r3, #4
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a704:	f003 0310 	and.w	r3, r3, #16
 800a708:	431a      	orrs	r2, r3
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a70e:	f003 0308 	and.w	r3, r3, #8
 800a712:	431a      	orrs	r2, r3
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	68db      	ldr	r3, [r3, #12]
 800a718:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a71c:	ea42 0103 	orr.w	r1, r2, r3
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	430a      	orrs	r2, r1
 800a72c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	69da      	ldr	r2, [r3, #28]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a73c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2200      	movs	r2, #0
 800a742:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2201      	movs	r2, #1
 800a748:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800a74c:	2300      	movs	r3, #0
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3710      	adds	r7, #16
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a756:	b580      	push	{r7, lr}
 800a758:	b088      	sub	sp, #32
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	60f8      	str	r0, [r7, #12]
 800a75e:	60b9      	str	r1, [r7, #8]
 800a760:	603b      	str	r3, [r7, #0]
 800a762:	4613      	mov	r3, r2
 800a764:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a766:	f7f9 fe0d 	bl	8004384 <HAL_GetTick>
 800a76a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800a76c:	88fb      	ldrh	r3, [r7, #6]
 800a76e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a776:	b2db      	uxtb	r3, r3
 800a778:	2b01      	cmp	r3, #1
 800a77a:	d001      	beq.n	800a780 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800a77c:	2302      	movs	r3, #2
 800a77e:	e15c      	b.n	800aa3a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d002      	beq.n	800a78c <HAL_SPI_Transmit+0x36>
 800a786:	88fb      	ldrh	r3, [r7, #6]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d101      	bne.n	800a790 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800a78c:	2301      	movs	r3, #1
 800a78e:	e154      	b.n	800aa3a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a796:	2b01      	cmp	r3, #1
 800a798:	d101      	bne.n	800a79e <HAL_SPI_Transmit+0x48>
 800a79a:	2302      	movs	r3, #2
 800a79c:	e14d      	b.n	800aa3a <HAL_SPI_Transmit+0x2e4>
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2203      	movs	r2, #3
 800a7aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	68ba      	ldr	r2, [r7, #8]
 800a7b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	88fa      	ldrh	r2, [r7, #6]
 800a7be:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	88fa      	ldrh	r2, [r7, #6]
 800a7c4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a7f0:	d10f      	bne.n	800a812 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a800:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a810:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a81c:	2b40      	cmp	r3, #64	@ 0x40
 800a81e:	d007      	beq.n	800a830 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a82e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a838:	d952      	bls.n	800a8e0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d002      	beq.n	800a848 <HAL_SPI_Transmit+0xf2>
 800a842:	8b7b      	ldrh	r3, [r7, #26]
 800a844:	2b01      	cmp	r3, #1
 800a846:	d145      	bne.n	800a8d4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a84c:	881a      	ldrh	r2, [r3, #0]
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a858:	1c9a      	adds	r2, r3, #2
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a862:	b29b      	uxth	r3, r3
 800a864:	3b01      	subs	r3, #1
 800a866:	b29a      	uxth	r2, r3
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a86c:	e032      	b.n	800a8d4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	689b      	ldr	r3, [r3, #8]
 800a874:	f003 0302 	and.w	r3, r3, #2
 800a878:	2b02      	cmp	r3, #2
 800a87a:	d112      	bne.n	800a8a2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a880:	881a      	ldrh	r2, [r3, #0]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a88c:	1c9a      	adds	r2, r3, #2
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a896:	b29b      	uxth	r3, r3
 800a898:	3b01      	subs	r3, #1
 800a89a:	b29a      	uxth	r2, r3
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a8a0:	e018      	b.n	800a8d4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8a2:	f7f9 fd6f 	bl	8004384 <HAL_GetTick>
 800a8a6:	4602      	mov	r2, r0
 800a8a8:	69fb      	ldr	r3, [r7, #28]
 800a8aa:	1ad3      	subs	r3, r2, r3
 800a8ac:	683a      	ldr	r2, [r7, #0]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d803      	bhi.n	800a8ba <HAL_SPI_Transmit+0x164>
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8b8:	d102      	bne.n	800a8c0 <HAL_SPI_Transmit+0x16a>
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d109      	bne.n	800a8d4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800a8d0:	2303      	movs	r3, #3
 800a8d2:	e0b2      	b.n	800aa3a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d1c7      	bne.n	800a86e <HAL_SPI_Transmit+0x118>
 800a8de:	e083      	b.n	800a9e8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d002      	beq.n	800a8ee <HAL_SPI_Transmit+0x198>
 800a8e8:	8b7b      	ldrh	r3, [r7, #26]
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	d177      	bne.n	800a9de <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	2b01      	cmp	r3, #1
 800a8f6:	d912      	bls.n	800a91e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8fc:	881a      	ldrh	r2, [r3, #0]
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a908:	1c9a      	adds	r2, r3, #2
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a912:	b29b      	uxth	r3, r3
 800a914:	3b02      	subs	r3, #2
 800a916:	b29a      	uxth	r2, r3
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a91c:	e05f      	b.n	800a9de <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	330c      	adds	r3, #12
 800a928:	7812      	ldrb	r2, [r2, #0]
 800a92a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a930:	1c5a      	adds	r2, r3, #1
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	3b01      	subs	r3, #1
 800a93e:	b29a      	uxth	r2, r3
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800a944:	e04b      	b.n	800a9de <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	689b      	ldr	r3, [r3, #8]
 800a94c:	f003 0302 	and.w	r3, r3, #2
 800a950:	2b02      	cmp	r3, #2
 800a952:	d12b      	bne.n	800a9ac <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a958:	b29b      	uxth	r3, r3
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d912      	bls.n	800a984 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a962:	881a      	ldrh	r2, [r3, #0]
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a96e:	1c9a      	adds	r2, r3, #2
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a978:	b29b      	uxth	r3, r3
 800a97a:	3b02      	subs	r3, #2
 800a97c:	b29a      	uxth	r2, r3
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a982:	e02c      	b.n	800a9de <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	330c      	adds	r3, #12
 800a98e:	7812      	ldrb	r2, [r2, #0]
 800a990:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a996:	1c5a      	adds	r2, r3, #1
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	3b01      	subs	r3, #1
 800a9a4:	b29a      	uxth	r2, r3
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a9aa:	e018      	b.n	800a9de <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a9ac:	f7f9 fcea 	bl	8004384 <HAL_GetTick>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	69fb      	ldr	r3, [r7, #28]
 800a9b4:	1ad3      	subs	r3, r2, r3
 800a9b6:	683a      	ldr	r2, [r7, #0]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d803      	bhi.n	800a9c4 <HAL_SPI_Transmit+0x26e>
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9c2:	d102      	bne.n	800a9ca <HAL_SPI_Transmit+0x274>
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d109      	bne.n	800a9de <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800a9da:	2303      	movs	r3, #3
 800a9dc:	e02d      	b.n	800aa3a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d1ae      	bne.n	800a946 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a9e8:	69fa      	ldr	r2, [r7, #28]
 800a9ea:	6839      	ldr	r1, [r7, #0]
 800a9ec:	68f8      	ldr	r0, [r7, #12]
 800a9ee:	f000 fad5 	bl	800af9c <SPI_EndRxTxTransaction>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d002      	beq.n	800a9fe <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2220      	movs	r2, #32
 800a9fc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	689b      	ldr	r3, [r3, #8]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d10a      	bne.n	800aa1c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aa06:	2300      	movs	r3, #0
 800aa08:	617b      	str	r3, [r7, #20]
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	617b      	str	r3, [r7, #20]
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	689b      	ldr	r3, [r3, #8]
 800aa18:	617b      	str	r3, [r7, #20]
 800aa1a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2200      	movs	r2, #0
 800aa28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d001      	beq.n	800aa38 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800aa34:	2301      	movs	r3, #1
 800aa36:	e000      	b.n	800aa3a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800aa38:	2300      	movs	r3, #0
  }
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3720      	adds	r7, #32
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
	...

0800aa44 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b084      	sub	sp, #16
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	60f8      	str	r0, [r7, #12]
 800aa4c:	60b9      	str	r1, [r7, #8]
 800aa4e:	4613      	mov	r3, r2
 800aa50:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800aa58:	b2db      	uxtb	r3, r3
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d001      	beq.n	800aa62 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800aa5e:	2302      	movs	r3, #2
 800aa60:	e0d4      	b.n	800ac0c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d002      	beq.n	800aa6e <HAL_SPI_Transmit_DMA+0x2a>
 800aa68:	88fb      	ldrh	r3, [r7, #6]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d101      	bne.n	800aa72 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	e0cc      	b.n	800ac0c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d101      	bne.n	800aa80 <HAL_SPI_Transmit_DMA+0x3c>
 800aa7c:	2302      	movs	r3, #2
 800aa7e:	e0c5      	b.n	800ac0c <HAL_SPI_Transmit_DMA+0x1c8>
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2201      	movs	r2, #1
 800aa84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2203      	movs	r2, #3
 800aa8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2200      	movs	r2, #0
 800aa94:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	68ba      	ldr	r2, [r7, #8]
 800aa9a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	88fa      	ldrh	r2, [r7, #6]
 800aaa0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	88fa      	ldrh	r2, [r7, #6]
 800aaa6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2200      	movs	r2, #0
 800aab2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2200      	movs	r2, #0
 800aab8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2200      	movs	r2, #0
 800aabe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2200      	movs	r2, #0
 800aac6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	689b      	ldr	r3, [r3, #8]
 800aace:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aad2:	d10f      	bne.n	800aaf4 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aae2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aaf2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aaf8:	4a46      	ldr	r2, [pc, #280]	@ (800ac14 <HAL_SPI_Transmit_DMA+0x1d0>)
 800aafa:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab00:	4a45      	ldr	r2, [pc, #276]	@ (800ac18 <HAL_SPI_Transmit_DMA+0x1d4>)
 800ab02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab08:	4a44      	ldr	r2, [pc, #272]	@ (800ac1c <HAL_SPI_Transmit_DMA+0x1d8>)
 800ab0a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab10:	2200      	movs	r2, #0
 800ab12:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	685a      	ldr	r2, [r3, #4]
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ab22:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	68db      	ldr	r3, [r3, #12]
 800ab28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ab2c:	d82d      	bhi.n	800ab8a <HAL_SPI_Transmit_DMA+0x146>
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab32:	699b      	ldr	r3, [r3, #24]
 800ab34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab38:	d127      	bne.n	800ab8a <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	f003 0301 	and.w	r3, r3, #1
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d10f      	bne.n	800ab68 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	685a      	ldr	r2, [r3, #4]
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ab56:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ab5c:	b29b      	uxth	r3, r3
 800ab5e:	085b      	lsrs	r3, r3, #1
 800ab60:	b29a      	uxth	r2, r3
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ab66:	e010      	b.n	800ab8a <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	685a      	ldr	r2, [r3, #4]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ab76:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ab7c:	b29b      	uxth	r3, r3
 800ab7e:	085b      	lsrs	r3, r3, #1
 800ab80:	b29b      	uxth	r3, r3
 800ab82:	3301      	adds	r3, #1
 800ab84:	b29a      	uxth	r2, r3
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab92:	4619      	mov	r1, r3
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	330c      	adds	r3, #12
 800ab9a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aba0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800aba2:	f7fb febd 	bl	8006920 <HAL_DMA_Start_IT>
 800aba6:	4603      	mov	r3, r0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d00b      	beq.n	800abc4 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800abb0:	f043 0210 	orr.w	r2, r3, #16
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2200      	movs	r2, #0
 800abbc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800abc0:	2301      	movs	r3, #1
 800abc2:	e023      	b.n	800ac0c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abce:	2b40      	cmp	r3, #64	@ 0x40
 800abd0:	d007      	beq.n	800abe2 <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	681a      	ldr	r2, [r3, #0]
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800abe0:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2200      	movs	r2, #0
 800abe6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	685a      	ldr	r2, [r3, #4]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f042 0220 	orr.w	r2, r2, #32
 800abf8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	685a      	ldr	r2, [r3, #4]
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f042 0202 	orr.w	r2, r2, #2
 800ac08:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ac0a:	2300      	movs	r3, #0
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3710      	adds	r7, #16
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	0800ad03 	.word	0x0800ad03
 800ac18:	0800ac5d 	.word	0x0800ac5d
 800ac1c:	0800ad1f 	.word	0x0800ad1f

0800ac20 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b083      	sub	sp, #12
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800ac28:	bf00      	nop
 800ac2a:	370c      	adds	r7, #12
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac32:	4770      	bx	lr

0800ac34 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b083      	sub	sp, #12
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800ac3c:	bf00      	nop
 800ac3e:	370c      	adds	r7, #12
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr

0800ac48 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b083      	sub	sp, #12
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ac50:	bf00      	nop
 800ac52:	370c      	adds	r7, #12
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr

0800ac5c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b086      	sub	sp, #24
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac68:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ac6a:	f7f9 fb8b 	bl	8004384 <HAL_GetTick>
 800ac6e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f003 0320 	and.w	r3, r3, #32
 800ac7a:	2b20      	cmp	r3, #32
 800ac7c:	d03b      	beq.n	800acf6 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	685a      	ldr	r2, [r3, #4]
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f022 0220 	bic.w	r2, r2, #32
 800ac8c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	685a      	ldr	r2, [r3, #4]
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f022 0202 	bic.w	r2, r2, #2
 800ac9c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ac9e:	693a      	ldr	r2, [r7, #16]
 800aca0:	2164      	movs	r1, #100	@ 0x64
 800aca2:	6978      	ldr	r0, [r7, #20]
 800aca4:	f000 f97a 	bl	800af9c <SPI_EndRxTxTransaction>
 800aca8:	4603      	mov	r3, r0
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d005      	beq.n	800acba <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800acb2:	f043 0220 	orr.w	r2, r3, #32
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	689b      	ldr	r3, [r3, #8]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d10a      	bne.n	800acd8 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800acc2:	2300      	movs	r3, #0
 800acc4:	60fb      	str	r3, [r7, #12]
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	68db      	ldr	r3, [r3, #12]
 800accc:	60fb      	str	r3, [r7, #12]
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	689b      	ldr	r3, [r3, #8]
 800acd4:	60fb      	str	r3, [r7, #12]
 800acd6:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	2200      	movs	r2, #0
 800acdc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	2201      	movs	r2, #1
 800ace2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800acea:	2b00      	cmp	r3, #0
 800acec:	d003      	beq.n	800acf6 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800acee:	6978      	ldr	r0, [r7, #20]
 800acf0:	f7ff ffaa 	bl	800ac48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800acf4:	e002      	b.n	800acfc <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800acf6:	6978      	ldr	r0, [r7, #20]
 800acf8:	f7ff ff92 	bl	800ac20 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800acfc:	3718      	adds	r7, #24
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}

0800ad02 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ad02:	b580      	push	{r7, lr}
 800ad04:	b084      	sub	sp, #16
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad0e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800ad10:	68f8      	ldr	r0, [r7, #12]
 800ad12:	f7ff ff8f 	bl	800ac34 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ad16:	bf00      	nop
 800ad18:	3710      	adds	r7, #16
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}

0800ad1e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ad1e:	b580      	push	{r7, lr}
 800ad20:	b084      	sub	sp, #16
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad2a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	685a      	ldr	r2, [r3, #4]
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f022 0203 	bic.w	r2, r2, #3
 800ad3a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad40:	f043 0210 	orr.w	r2, r3, #16
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ad50:	68f8      	ldr	r0, [r7, #12]
 800ad52:	f7ff ff79 	bl	800ac48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ad56:	bf00      	nop
 800ad58:	3710      	adds	r7, #16
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}
	...

0800ad60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b088      	sub	sp, #32
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	60b9      	str	r1, [r7, #8]
 800ad6a:	603b      	str	r3, [r7, #0]
 800ad6c:	4613      	mov	r3, r2
 800ad6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ad70:	f7f9 fb08 	bl	8004384 <HAL_GetTick>
 800ad74:	4602      	mov	r2, r0
 800ad76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad78:	1a9b      	subs	r3, r3, r2
 800ad7a:	683a      	ldr	r2, [r7, #0]
 800ad7c:	4413      	add	r3, r2
 800ad7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ad80:	f7f9 fb00 	bl	8004384 <HAL_GetTick>
 800ad84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ad86:	4b39      	ldr	r3, [pc, #228]	@ (800ae6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	015b      	lsls	r3, r3, #5
 800ad8c:	0d1b      	lsrs	r3, r3, #20
 800ad8e:	69fa      	ldr	r2, [r7, #28]
 800ad90:	fb02 f303 	mul.w	r3, r2, r3
 800ad94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ad96:	e054      	b.n	800ae42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad9e:	d050      	beq.n	800ae42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ada0:	f7f9 faf0 	bl	8004384 <HAL_GetTick>
 800ada4:	4602      	mov	r2, r0
 800ada6:	69bb      	ldr	r3, [r7, #24]
 800ada8:	1ad3      	subs	r3, r2, r3
 800adaa:	69fa      	ldr	r2, [r7, #28]
 800adac:	429a      	cmp	r2, r3
 800adae:	d902      	bls.n	800adb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800adb0:	69fb      	ldr	r3, [r7, #28]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d13d      	bne.n	800ae32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	685a      	ldr	r2, [r3, #4]
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800adc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	685b      	ldr	r3, [r3, #4]
 800adca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800adce:	d111      	bne.n	800adf4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	689b      	ldr	r3, [r3, #8]
 800add4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800add8:	d004      	beq.n	800ade4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	689b      	ldr	r3, [r3, #8]
 800adde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ade2:	d107      	bne.n	800adf4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	681a      	ldr	r2, [r3, #0]
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800adf2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800adfc:	d10f      	bne.n	800ae1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ae0c:	601a      	str	r2, [r3, #0]
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ae1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2201      	movs	r2, #1
 800ae22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800ae2e:	2303      	movs	r3, #3
 800ae30:	e017      	b.n	800ae62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d101      	bne.n	800ae3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	3b01      	subs	r3, #1
 800ae40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	689a      	ldr	r2, [r3, #8]
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	4013      	ands	r3, r2
 800ae4c:	68ba      	ldr	r2, [r7, #8]
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	bf0c      	ite	eq
 800ae52:	2301      	moveq	r3, #1
 800ae54:	2300      	movne	r3, #0
 800ae56:	b2db      	uxtb	r3, r3
 800ae58:	461a      	mov	r2, r3
 800ae5a:	79fb      	ldrb	r3, [r7, #7]
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d19b      	bne.n	800ad98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ae60:	2300      	movs	r3, #0
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3720      	adds	r7, #32
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	20000044 	.word	0x20000044

0800ae70 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b08a      	sub	sp, #40	@ 0x28
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	607a      	str	r2, [r7, #4]
 800ae7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ae82:	f7f9 fa7f 	bl	8004384 <HAL_GetTick>
 800ae86:	4602      	mov	r2, r0
 800ae88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae8a:	1a9b      	subs	r3, r3, r2
 800ae8c:	683a      	ldr	r2, [r7, #0]
 800ae8e:	4413      	add	r3, r2
 800ae90:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800ae92:	f7f9 fa77 	bl	8004384 <HAL_GetTick>
 800ae96:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	330c      	adds	r3, #12
 800ae9e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800aea0:	4b3d      	ldr	r3, [pc, #244]	@ (800af98 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800aea2:	681a      	ldr	r2, [r3, #0]
 800aea4:	4613      	mov	r3, r2
 800aea6:	009b      	lsls	r3, r3, #2
 800aea8:	4413      	add	r3, r2
 800aeaa:	00da      	lsls	r2, r3, #3
 800aeac:	1ad3      	subs	r3, r2, r3
 800aeae:	0d1b      	lsrs	r3, r3, #20
 800aeb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aeb2:	fb02 f303 	mul.w	r3, r2, r3
 800aeb6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800aeb8:	e060      	b.n	800af7c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800aec0:	d107      	bne.n	800aed2 <SPI_WaitFifoStateUntilTimeout+0x62>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d104      	bne.n	800aed2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800aec8:	69fb      	ldr	r3, [r7, #28]
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	b2db      	uxtb	r3, r3
 800aece:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800aed0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aed8:	d050      	beq.n	800af7c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800aeda:	f7f9 fa53 	bl	8004384 <HAL_GetTick>
 800aede:	4602      	mov	r2, r0
 800aee0:	6a3b      	ldr	r3, [r7, #32]
 800aee2:	1ad3      	subs	r3, r2, r3
 800aee4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d902      	bls.n	800aef0 <SPI_WaitFifoStateUntilTimeout+0x80>
 800aeea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d13d      	bne.n	800af6c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	685a      	ldr	r2, [r3, #4]
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800aefe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800af08:	d111      	bne.n	800af2e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	689b      	ldr	r3, [r3, #8]
 800af0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800af12:	d004      	beq.n	800af1e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	689b      	ldr	r3, [r3, #8]
 800af18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af1c:	d107      	bne.n	800af2e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800af2c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af36:	d10f      	bne.n	800af58 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	681a      	ldr	r2, [r3, #0]
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800af46:	601a      	str	r2, [r3, #0]
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	681a      	ldr	r2, [r3, #0]
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800af56:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2201      	movs	r2, #1
 800af5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2200      	movs	r2, #0
 800af64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800af68:	2303      	movs	r3, #3
 800af6a:	e010      	b.n	800af8e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800af6c:	69bb      	ldr	r3, [r7, #24]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d101      	bne.n	800af76 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800af72:	2300      	movs	r3, #0
 800af74:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800af76:	69bb      	ldr	r3, [r7, #24]
 800af78:	3b01      	subs	r3, #1
 800af7a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	689a      	ldr	r2, [r3, #8]
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	4013      	ands	r3, r2
 800af86:	687a      	ldr	r2, [r7, #4]
 800af88:	429a      	cmp	r2, r3
 800af8a:	d196      	bne.n	800aeba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800af8c:	2300      	movs	r3, #0
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3728      	adds	r7, #40	@ 0x28
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
 800af96:	bf00      	nop
 800af98:	20000044 	.word	0x20000044

0800af9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b086      	sub	sp, #24
 800afa0:	af02      	add	r7, sp, #8
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	9300      	str	r3, [sp, #0]
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	2200      	movs	r2, #0
 800afb0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800afb4:	68f8      	ldr	r0, [r7, #12]
 800afb6:	f7ff ff5b 	bl	800ae70 <SPI_WaitFifoStateUntilTimeout>
 800afba:	4603      	mov	r3, r0
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d007      	beq.n	800afd0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800afc4:	f043 0220 	orr.w	r2, r3, #32
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800afcc:	2303      	movs	r3, #3
 800afce:	e027      	b.n	800b020 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	9300      	str	r3, [sp, #0]
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	2200      	movs	r2, #0
 800afd8:	2180      	movs	r1, #128	@ 0x80
 800afda:	68f8      	ldr	r0, [r7, #12]
 800afdc:	f7ff fec0 	bl	800ad60 <SPI_WaitFlagStateUntilTimeout>
 800afe0:	4603      	mov	r3, r0
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d007      	beq.n	800aff6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800afea:	f043 0220 	orr.w	r2, r3, #32
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800aff2:	2303      	movs	r3, #3
 800aff4:	e014      	b.n	800b020 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	9300      	str	r3, [sp, #0]
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	2200      	movs	r2, #0
 800affe:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800b002:	68f8      	ldr	r0, [r7, #12]
 800b004:	f7ff ff34 	bl	800ae70 <SPI_WaitFifoStateUntilTimeout>
 800b008:	4603      	mov	r3, r0
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d007      	beq.n	800b01e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b012:	f043 0220 	orr.w	r2, r3, #32
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b01a:	2303      	movs	r3, #3
 800b01c:	e000      	b.n	800b020 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b01e:	2300      	movs	r3, #0
}
 800b020:	4618      	mov	r0, r3
 800b022:	3710      	adds	r7, #16
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}

0800b028 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b082      	sub	sp, #8
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d101      	bne.n	800b03a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b036:	2301      	movs	r3, #1
 800b038:	e049      	b.n	800b0ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b040:	b2db      	uxtb	r3, r3
 800b042:	2b00      	cmp	r3, #0
 800b044:	d106      	bne.n	800b054 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2200      	movs	r2, #0
 800b04a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f7f8 fda2 	bl	8003b98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2202      	movs	r2, #2
 800b058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681a      	ldr	r2, [r3, #0]
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	3304      	adds	r3, #4
 800b064:	4619      	mov	r1, r3
 800b066:	4610      	mov	r0, r2
 800b068:	f001 f894 	bl	800c194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2201      	movs	r2, #1
 800b070:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2201      	movs	r2, #1
 800b078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2201      	movs	r2, #1
 800b080:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2201      	movs	r2, #1
 800b088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2201      	movs	r2, #1
 800b090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2201      	movs	r2, #1
 800b098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2201      	movs	r2, #1
 800b0a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2201      	movs	r2, #1
 800b0c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b0cc:	2300      	movs	r3, #0
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3708      	adds	r7, #8
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}
	...

0800b0d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b085      	sub	sp, #20
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	d001      	beq.n	800b0f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	e04c      	b.n	800b18a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2202      	movs	r2, #2
 800b0f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	4a26      	ldr	r2, [pc, #152]	@ (800b198 <HAL_TIM_Base_Start+0xc0>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d022      	beq.n	800b148 <HAL_TIM_Base_Start+0x70>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b10a:	d01d      	beq.n	800b148 <HAL_TIM_Base_Start+0x70>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a22      	ldr	r2, [pc, #136]	@ (800b19c <HAL_TIM_Base_Start+0xc4>)
 800b112:	4293      	cmp	r3, r2
 800b114:	d018      	beq.n	800b148 <HAL_TIM_Base_Start+0x70>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4a21      	ldr	r2, [pc, #132]	@ (800b1a0 <HAL_TIM_Base_Start+0xc8>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d013      	beq.n	800b148 <HAL_TIM_Base_Start+0x70>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	4a1f      	ldr	r2, [pc, #124]	@ (800b1a4 <HAL_TIM_Base_Start+0xcc>)
 800b126:	4293      	cmp	r3, r2
 800b128:	d00e      	beq.n	800b148 <HAL_TIM_Base_Start+0x70>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	4a1e      	ldr	r2, [pc, #120]	@ (800b1a8 <HAL_TIM_Base_Start+0xd0>)
 800b130:	4293      	cmp	r3, r2
 800b132:	d009      	beq.n	800b148 <HAL_TIM_Base_Start+0x70>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	4a1c      	ldr	r2, [pc, #112]	@ (800b1ac <HAL_TIM_Base_Start+0xd4>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d004      	beq.n	800b148 <HAL_TIM_Base_Start+0x70>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	4a1b      	ldr	r2, [pc, #108]	@ (800b1b0 <HAL_TIM_Base_Start+0xd8>)
 800b144:	4293      	cmp	r3, r2
 800b146:	d115      	bne.n	800b174 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	689a      	ldr	r2, [r3, #8]
 800b14e:	4b19      	ldr	r3, [pc, #100]	@ (800b1b4 <HAL_TIM_Base_Start+0xdc>)
 800b150:	4013      	ands	r3, r2
 800b152:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2b06      	cmp	r3, #6
 800b158:	d015      	beq.n	800b186 <HAL_TIM_Base_Start+0xae>
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b160:	d011      	beq.n	800b186 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	681a      	ldr	r2, [r3, #0]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f042 0201 	orr.w	r2, r2, #1
 800b170:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b172:	e008      	b.n	800b186 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	681a      	ldr	r2, [r3, #0]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f042 0201 	orr.w	r2, r2, #1
 800b182:	601a      	str	r2, [r3, #0]
 800b184:	e000      	b.n	800b188 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b186:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b188:	2300      	movs	r3, #0
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3714      	adds	r7, #20
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr
 800b196:	bf00      	nop
 800b198:	40012c00 	.word	0x40012c00
 800b19c:	40000400 	.word	0x40000400
 800b1a0:	40000800 	.word	0x40000800
 800b1a4:	40000c00 	.word	0x40000c00
 800b1a8:	40013400 	.word	0x40013400
 800b1ac:	40014000 	.word	0x40014000
 800b1b0:	40015000 	.word	0x40015000
 800b1b4:	00010007 	.word	0x00010007

0800b1b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b082      	sub	sp, #8
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d101      	bne.n	800b1ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	e049      	b.n	800b25e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b1d0:	b2db      	uxtb	r3, r3
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d106      	bne.n	800b1e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f000 f841 	bl	800b266 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2202      	movs	r2, #2
 800b1e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681a      	ldr	r2, [r3, #0]
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	3304      	adds	r3, #4
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	4610      	mov	r0, r2
 800b1f8:	f000 ffcc 	bl	800c194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2201      	movs	r2, #1
 800b200:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2201      	movs	r2, #1
 800b208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2201      	movs	r2, #1
 800b210:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2201      	movs	r2, #1
 800b218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2201      	movs	r2, #1
 800b220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2201      	movs	r2, #1
 800b228:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2201      	movs	r2, #1
 800b230:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2201      	movs	r2, #1
 800b238:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2201      	movs	r2, #1
 800b240:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2201      	movs	r2, #1
 800b248:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2201      	movs	r2, #1
 800b250:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2201      	movs	r2, #1
 800b258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b25c:	2300      	movs	r3, #0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3708      	adds	r7, #8
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b266:	b480      	push	{r7}
 800b268:	b083      	sub	sp, #12
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b26e:	bf00      	nop
 800b270:	370c      	adds	r7, #12
 800b272:	46bd      	mov	sp, r7
 800b274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b278:	4770      	bx	lr
	...

0800b27c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d109      	bne.n	800b2a0 <HAL_TIM_PWM_Start+0x24>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b292:	b2db      	uxtb	r3, r3
 800b294:	2b01      	cmp	r3, #1
 800b296:	bf14      	ite	ne
 800b298:	2301      	movne	r3, #1
 800b29a:	2300      	moveq	r3, #0
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	e03c      	b.n	800b31a <HAL_TIM_PWM_Start+0x9e>
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	2b04      	cmp	r3, #4
 800b2a4:	d109      	bne.n	800b2ba <HAL_TIM_PWM_Start+0x3e>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b2ac:	b2db      	uxtb	r3, r3
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	bf14      	ite	ne
 800b2b2:	2301      	movne	r3, #1
 800b2b4:	2300      	moveq	r3, #0
 800b2b6:	b2db      	uxtb	r3, r3
 800b2b8:	e02f      	b.n	800b31a <HAL_TIM_PWM_Start+0x9e>
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	2b08      	cmp	r3, #8
 800b2be:	d109      	bne.n	800b2d4 <HAL_TIM_PWM_Start+0x58>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b2c6:	b2db      	uxtb	r3, r3
 800b2c8:	2b01      	cmp	r3, #1
 800b2ca:	bf14      	ite	ne
 800b2cc:	2301      	movne	r3, #1
 800b2ce:	2300      	moveq	r3, #0
 800b2d0:	b2db      	uxtb	r3, r3
 800b2d2:	e022      	b.n	800b31a <HAL_TIM_PWM_Start+0x9e>
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	2b0c      	cmp	r3, #12
 800b2d8:	d109      	bne.n	800b2ee <HAL_TIM_PWM_Start+0x72>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b2e0:	b2db      	uxtb	r3, r3
 800b2e2:	2b01      	cmp	r3, #1
 800b2e4:	bf14      	ite	ne
 800b2e6:	2301      	movne	r3, #1
 800b2e8:	2300      	moveq	r3, #0
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	e015      	b.n	800b31a <HAL_TIM_PWM_Start+0x9e>
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	2b10      	cmp	r3, #16
 800b2f2:	d109      	bne.n	800b308 <HAL_TIM_PWM_Start+0x8c>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b2fa:	b2db      	uxtb	r3, r3
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	bf14      	ite	ne
 800b300:	2301      	movne	r3, #1
 800b302:	2300      	moveq	r3, #0
 800b304:	b2db      	uxtb	r3, r3
 800b306:	e008      	b.n	800b31a <HAL_TIM_PWM_Start+0x9e>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	2b01      	cmp	r3, #1
 800b312:	bf14      	ite	ne
 800b314:	2301      	movne	r3, #1
 800b316:	2300      	moveq	r3, #0
 800b318:	b2db      	uxtb	r3, r3
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d001      	beq.n	800b322 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b31e:	2301      	movs	r3, #1
 800b320:	e0a6      	b.n	800b470 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d104      	bne.n	800b332 <HAL_TIM_PWM_Start+0xb6>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2202      	movs	r2, #2
 800b32c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b330:	e023      	b.n	800b37a <HAL_TIM_PWM_Start+0xfe>
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	2b04      	cmp	r3, #4
 800b336:	d104      	bne.n	800b342 <HAL_TIM_PWM_Start+0xc6>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2202      	movs	r2, #2
 800b33c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b340:	e01b      	b.n	800b37a <HAL_TIM_PWM_Start+0xfe>
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	2b08      	cmp	r3, #8
 800b346:	d104      	bne.n	800b352 <HAL_TIM_PWM_Start+0xd6>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2202      	movs	r2, #2
 800b34c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b350:	e013      	b.n	800b37a <HAL_TIM_PWM_Start+0xfe>
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	2b0c      	cmp	r3, #12
 800b356:	d104      	bne.n	800b362 <HAL_TIM_PWM_Start+0xe6>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2202      	movs	r2, #2
 800b35c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b360:	e00b      	b.n	800b37a <HAL_TIM_PWM_Start+0xfe>
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	2b10      	cmp	r3, #16
 800b366:	d104      	bne.n	800b372 <HAL_TIM_PWM_Start+0xf6>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2202      	movs	r2, #2
 800b36c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b370:	e003      	b.n	800b37a <HAL_TIM_PWM_Start+0xfe>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2202      	movs	r2, #2
 800b376:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	2201      	movs	r2, #1
 800b380:	6839      	ldr	r1, [r7, #0]
 800b382:	4618      	mov	r0, r3
 800b384:	f001 fb80 	bl	800ca88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4a3a      	ldr	r2, [pc, #232]	@ (800b478 <HAL_TIM_PWM_Start+0x1fc>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d018      	beq.n	800b3c4 <HAL_TIM_PWM_Start+0x148>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	4a39      	ldr	r2, [pc, #228]	@ (800b47c <HAL_TIM_PWM_Start+0x200>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d013      	beq.n	800b3c4 <HAL_TIM_PWM_Start+0x148>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4a37      	ldr	r2, [pc, #220]	@ (800b480 <HAL_TIM_PWM_Start+0x204>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d00e      	beq.n	800b3c4 <HAL_TIM_PWM_Start+0x148>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	4a36      	ldr	r2, [pc, #216]	@ (800b484 <HAL_TIM_PWM_Start+0x208>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d009      	beq.n	800b3c4 <HAL_TIM_PWM_Start+0x148>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4a34      	ldr	r2, [pc, #208]	@ (800b488 <HAL_TIM_PWM_Start+0x20c>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d004      	beq.n	800b3c4 <HAL_TIM_PWM_Start+0x148>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4a33      	ldr	r2, [pc, #204]	@ (800b48c <HAL_TIM_PWM_Start+0x210>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d101      	bne.n	800b3c8 <HAL_TIM_PWM_Start+0x14c>
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	e000      	b.n	800b3ca <HAL_TIM_PWM_Start+0x14e>
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d007      	beq.n	800b3de <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b3dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	4a25      	ldr	r2, [pc, #148]	@ (800b478 <HAL_TIM_PWM_Start+0x1fc>)
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d022      	beq.n	800b42e <HAL_TIM_PWM_Start+0x1b2>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3f0:	d01d      	beq.n	800b42e <HAL_TIM_PWM_Start+0x1b2>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	4a26      	ldr	r2, [pc, #152]	@ (800b490 <HAL_TIM_PWM_Start+0x214>)
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d018      	beq.n	800b42e <HAL_TIM_PWM_Start+0x1b2>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4a24      	ldr	r2, [pc, #144]	@ (800b494 <HAL_TIM_PWM_Start+0x218>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d013      	beq.n	800b42e <HAL_TIM_PWM_Start+0x1b2>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4a23      	ldr	r2, [pc, #140]	@ (800b498 <HAL_TIM_PWM_Start+0x21c>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d00e      	beq.n	800b42e <HAL_TIM_PWM_Start+0x1b2>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4a19      	ldr	r2, [pc, #100]	@ (800b47c <HAL_TIM_PWM_Start+0x200>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d009      	beq.n	800b42e <HAL_TIM_PWM_Start+0x1b2>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	4a18      	ldr	r2, [pc, #96]	@ (800b480 <HAL_TIM_PWM_Start+0x204>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d004      	beq.n	800b42e <HAL_TIM_PWM_Start+0x1b2>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4a18      	ldr	r2, [pc, #96]	@ (800b48c <HAL_TIM_PWM_Start+0x210>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d115      	bne.n	800b45a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	689a      	ldr	r2, [r3, #8]
 800b434:	4b19      	ldr	r3, [pc, #100]	@ (800b49c <HAL_TIM_PWM_Start+0x220>)
 800b436:	4013      	ands	r3, r2
 800b438:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2b06      	cmp	r3, #6
 800b43e:	d015      	beq.n	800b46c <HAL_TIM_PWM_Start+0x1f0>
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b446:	d011      	beq.n	800b46c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f042 0201 	orr.w	r2, r2, #1
 800b456:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b458:	e008      	b.n	800b46c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	681a      	ldr	r2, [r3, #0]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f042 0201 	orr.w	r2, r2, #1
 800b468:	601a      	str	r2, [r3, #0]
 800b46a:	e000      	b.n	800b46e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b46c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b46e:	2300      	movs	r3, #0
}
 800b470:	4618      	mov	r0, r3
 800b472:	3710      	adds	r7, #16
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}
 800b478:	40012c00 	.word	0x40012c00
 800b47c:	40013400 	.word	0x40013400
 800b480:	40014000 	.word	0x40014000
 800b484:	40014400 	.word	0x40014400
 800b488:	40014800 	.word	0x40014800
 800b48c:	40015000 	.word	0x40015000
 800b490:	40000400 	.word	0x40000400
 800b494:	40000800 	.word	0x40000800
 800b498:	40000c00 	.word	0x40000c00
 800b49c:	00010007 	.word	0x00010007

0800b4a0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b086      	sub	sp, #24
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	60f8      	str	r0, [r7, #12]
 800b4a8:	60b9      	str	r1, [r7, #8]
 800b4aa:	607a      	str	r2, [r7, #4]
 800b4ac:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d109      	bne.n	800b4cc <HAL_TIM_PWM_Start_DMA+0x2c>
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b4be:	b2db      	uxtb	r3, r3
 800b4c0:	2b02      	cmp	r3, #2
 800b4c2:	bf0c      	ite	eq
 800b4c4:	2301      	moveq	r3, #1
 800b4c6:	2300      	movne	r3, #0
 800b4c8:	b2db      	uxtb	r3, r3
 800b4ca:	e03c      	b.n	800b546 <HAL_TIM_PWM_Start_DMA+0xa6>
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	2b04      	cmp	r3, #4
 800b4d0:	d109      	bne.n	800b4e6 <HAL_TIM_PWM_Start_DMA+0x46>
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b4d8:	b2db      	uxtb	r3, r3
 800b4da:	2b02      	cmp	r3, #2
 800b4dc:	bf0c      	ite	eq
 800b4de:	2301      	moveq	r3, #1
 800b4e0:	2300      	movne	r3, #0
 800b4e2:	b2db      	uxtb	r3, r3
 800b4e4:	e02f      	b.n	800b546 <HAL_TIM_PWM_Start_DMA+0xa6>
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	2b08      	cmp	r3, #8
 800b4ea:	d109      	bne.n	800b500 <HAL_TIM_PWM_Start_DMA+0x60>
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b4f2:	b2db      	uxtb	r3, r3
 800b4f4:	2b02      	cmp	r3, #2
 800b4f6:	bf0c      	ite	eq
 800b4f8:	2301      	moveq	r3, #1
 800b4fa:	2300      	movne	r3, #0
 800b4fc:	b2db      	uxtb	r3, r3
 800b4fe:	e022      	b.n	800b546 <HAL_TIM_PWM_Start_DMA+0xa6>
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	2b0c      	cmp	r3, #12
 800b504:	d109      	bne.n	800b51a <HAL_TIM_PWM_Start_DMA+0x7a>
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b50c:	b2db      	uxtb	r3, r3
 800b50e:	2b02      	cmp	r3, #2
 800b510:	bf0c      	ite	eq
 800b512:	2301      	moveq	r3, #1
 800b514:	2300      	movne	r3, #0
 800b516:	b2db      	uxtb	r3, r3
 800b518:	e015      	b.n	800b546 <HAL_TIM_PWM_Start_DMA+0xa6>
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	2b10      	cmp	r3, #16
 800b51e:	d109      	bne.n	800b534 <HAL_TIM_PWM_Start_DMA+0x94>
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b526:	b2db      	uxtb	r3, r3
 800b528:	2b02      	cmp	r3, #2
 800b52a:	bf0c      	ite	eq
 800b52c:	2301      	moveq	r3, #1
 800b52e:	2300      	movne	r3, #0
 800b530:	b2db      	uxtb	r3, r3
 800b532:	e008      	b.n	800b546 <HAL_TIM_PWM_Start_DMA+0xa6>
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b53a:	b2db      	uxtb	r3, r3
 800b53c:	2b02      	cmp	r3, #2
 800b53e:	bf0c      	ite	eq
 800b540:	2301      	moveq	r3, #1
 800b542:	2300      	movne	r3, #0
 800b544:	b2db      	uxtb	r3, r3
 800b546:	2b00      	cmp	r3, #0
 800b548:	d001      	beq.n	800b54e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800b54a:	2302      	movs	r3, #2
 800b54c:	e1b5      	b.n	800b8ba <HAL_TIM_PWM_Start_DMA+0x41a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d109      	bne.n	800b568 <HAL_TIM_PWM_Start_DMA+0xc8>
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b55a:	b2db      	uxtb	r3, r3
 800b55c:	2b01      	cmp	r3, #1
 800b55e:	bf0c      	ite	eq
 800b560:	2301      	moveq	r3, #1
 800b562:	2300      	movne	r3, #0
 800b564:	b2db      	uxtb	r3, r3
 800b566:	e03c      	b.n	800b5e2 <HAL_TIM_PWM_Start_DMA+0x142>
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	2b04      	cmp	r3, #4
 800b56c:	d109      	bne.n	800b582 <HAL_TIM_PWM_Start_DMA+0xe2>
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b574:	b2db      	uxtb	r3, r3
 800b576:	2b01      	cmp	r3, #1
 800b578:	bf0c      	ite	eq
 800b57a:	2301      	moveq	r3, #1
 800b57c:	2300      	movne	r3, #0
 800b57e:	b2db      	uxtb	r3, r3
 800b580:	e02f      	b.n	800b5e2 <HAL_TIM_PWM_Start_DMA+0x142>
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	2b08      	cmp	r3, #8
 800b586:	d109      	bne.n	800b59c <HAL_TIM_PWM_Start_DMA+0xfc>
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b58e:	b2db      	uxtb	r3, r3
 800b590:	2b01      	cmp	r3, #1
 800b592:	bf0c      	ite	eq
 800b594:	2301      	moveq	r3, #1
 800b596:	2300      	movne	r3, #0
 800b598:	b2db      	uxtb	r3, r3
 800b59a:	e022      	b.n	800b5e2 <HAL_TIM_PWM_Start_DMA+0x142>
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	2b0c      	cmp	r3, #12
 800b5a0:	d109      	bne.n	800b5b6 <HAL_TIM_PWM_Start_DMA+0x116>
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b5a8:	b2db      	uxtb	r3, r3
 800b5aa:	2b01      	cmp	r3, #1
 800b5ac:	bf0c      	ite	eq
 800b5ae:	2301      	moveq	r3, #1
 800b5b0:	2300      	movne	r3, #0
 800b5b2:	b2db      	uxtb	r3, r3
 800b5b4:	e015      	b.n	800b5e2 <HAL_TIM_PWM_Start_DMA+0x142>
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	2b10      	cmp	r3, #16
 800b5ba:	d109      	bne.n	800b5d0 <HAL_TIM_PWM_Start_DMA+0x130>
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b5c2:	b2db      	uxtb	r3, r3
 800b5c4:	2b01      	cmp	r3, #1
 800b5c6:	bf0c      	ite	eq
 800b5c8:	2301      	moveq	r3, #1
 800b5ca:	2300      	movne	r3, #0
 800b5cc:	b2db      	uxtb	r3, r3
 800b5ce:	e008      	b.n	800b5e2 <HAL_TIM_PWM_Start_DMA+0x142>
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b5d6:	b2db      	uxtb	r3, r3
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	bf0c      	ite	eq
 800b5dc:	2301      	moveq	r3, #1
 800b5de:	2300      	movne	r3, #0
 800b5e0:	b2db      	uxtb	r3, r3
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d034      	beq.n	800b650 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d002      	beq.n	800b5f2 <HAL_TIM_PWM_Start_DMA+0x152>
 800b5ec:	887b      	ldrh	r3, [r7, #2]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d101      	bne.n	800b5f6 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	e161      	b.n	800b8ba <HAL_TIM_PWM_Start_DMA+0x41a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d104      	bne.n	800b606 <HAL_TIM_PWM_Start_DMA+0x166>
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	2202      	movs	r2, #2
 800b600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b604:	e026      	b.n	800b654 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	2b04      	cmp	r3, #4
 800b60a:	d104      	bne.n	800b616 <HAL_TIM_PWM_Start_DMA+0x176>
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	2202      	movs	r2, #2
 800b610:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b614:	e01e      	b.n	800b654 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	2b08      	cmp	r3, #8
 800b61a:	d104      	bne.n	800b626 <HAL_TIM_PWM_Start_DMA+0x186>
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2202      	movs	r2, #2
 800b620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b624:	e016      	b.n	800b654 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	2b0c      	cmp	r3, #12
 800b62a:	d104      	bne.n	800b636 <HAL_TIM_PWM_Start_DMA+0x196>
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	2202      	movs	r2, #2
 800b630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b634:	e00e      	b.n	800b654 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	2b10      	cmp	r3, #16
 800b63a:	d104      	bne.n	800b646 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	2202      	movs	r2, #2
 800b640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b644:	e006      	b.n	800b654 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2202      	movs	r2, #2
 800b64a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b64e:	e001      	b.n	800b654 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800b650:	2301      	movs	r3, #1
 800b652:	e132      	b.n	800b8ba <HAL_TIM_PWM_Start_DMA+0x41a>
  }

  switch (Channel)
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	2b0c      	cmp	r3, #12
 800b658:	f200 80ae 	bhi.w	800b7b8 <HAL_TIM_PWM_Start_DMA+0x318>
 800b65c:	a201      	add	r2, pc, #4	@ (adr r2, 800b664 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800b65e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b662:	bf00      	nop
 800b664:	0800b699 	.word	0x0800b699
 800b668:	0800b7b9 	.word	0x0800b7b9
 800b66c:	0800b7b9 	.word	0x0800b7b9
 800b670:	0800b7b9 	.word	0x0800b7b9
 800b674:	0800b6e1 	.word	0x0800b6e1
 800b678:	0800b7b9 	.word	0x0800b7b9
 800b67c:	0800b7b9 	.word	0x0800b7b9
 800b680:	0800b7b9 	.word	0x0800b7b9
 800b684:	0800b729 	.word	0x0800b729
 800b688:	0800b7b9 	.word	0x0800b7b9
 800b68c:	0800b7b9 	.word	0x0800b7b9
 800b690:	0800b7b9 	.word	0x0800b7b9
 800b694:	0800b771 	.word	0x0800b771
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b69c:	4a89      	ldr	r2, [pc, #548]	@ (800b8c4 <HAL_TIM_PWM_Start_DMA+0x424>)
 800b69e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6a4:	4a88      	ldr	r2, [pc, #544]	@ (800b8c8 <HAL_TIM_PWM_Start_DMA+0x428>)
 800b6a6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6ac:	4a87      	ldr	r2, [pc, #540]	@ (800b8cc <HAL_TIM_PWM_Start_DMA+0x42c>)
 800b6ae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800b6b4:	6879      	ldr	r1, [r7, #4]
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	3334      	adds	r3, #52	@ 0x34
 800b6bc:	461a      	mov	r2, r3
 800b6be:	887b      	ldrh	r3, [r7, #2]
 800b6c0:	f7fb f92e 	bl	8006920 <HAL_DMA_Start_IT>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d001      	beq.n	800b6ce <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	e0f5      	b.n	800b8ba <HAL_TIM_PWM_Start_DMA+0x41a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	68da      	ldr	r2, [r3, #12]
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b6dc:	60da      	str	r2, [r3, #12]
      break;
 800b6de:	e06e      	b.n	800b7be <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6e4:	4a77      	ldr	r2, [pc, #476]	@ (800b8c4 <HAL_TIM_PWM_Start_DMA+0x424>)
 800b6e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6ec:	4a76      	ldr	r2, [pc, #472]	@ (800b8c8 <HAL_TIM_PWM_Start_DMA+0x428>)
 800b6ee:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6f4:	4a75      	ldr	r2, [pc, #468]	@ (800b8cc <HAL_TIM_PWM_Start_DMA+0x42c>)
 800b6f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800b6fc:	6879      	ldr	r1, [r7, #4]
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	3338      	adds	r3, #56	@ 0x38
 800b704:	461a      	mov	r2, r3
 800b706:	887b      	ldrh	r3, [r7, #2]
 800b708:	f7fb f90a 	bl	8006920 <HAL_DMA_Start_IT>
 800b70c:	4603      	mov	r3, r0
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d001      	beq.n	800b716 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b712:	2301      	movs	r3, #1
 800b714:	e0d1      	b.n	800b8ba <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	68da      	ldr	r2, [r3, #12]
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b724:	60da      	str	r2, [r3, #12]
      break;
 800b726:	e04a      	b.n	800b7be <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b72c:	4a65      	ldr	r2, [pc, #404]	@ (800b8c4 <HAL_TIM_PWM_Start_DMA+0x424>)
 800b72e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b734:	4a64      	ldr	r2, [pc, #400]	@ (800b8c8 <HAL_TIM_PWM_Start_DMA+0x428>)
 800b736:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b73c:	4a63      	ldr	r2, [pc, #396]	@ (800b8cc <HAL_TIM_PWM_Start_DMA+0x42c>)
 800b73e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800b744:	6879      	ldr	r1, [r7, #4]
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	333c      	adds	r3, #60	@ 0x3c
 800b74c:	461a      	mov	r2, r3
 800b74e:	887b      	ldrh	r3, [r7, #2]
 800b750:	f7fb f8e6 	bl	8006920 <HAL_DMA_Start_IT>
 800b754:	4603      	mov	r3, r0
 800b756:	2b00      	cmp	r3, #0
 800b758:	d001      	beq.n	800b75e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b75a:	2301      	movs	r3, #1
 800b75c:	e0ad      	b.n	800b8ba <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	68da      	ldr	r2, [r3, #12]
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b76c:	60da      	str	r2, [r3, #12]
      break;
 800b76e:	e026      	b.n	800b7be <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b774:	4a53      	ldr	r2, [pc, #332]	@ (800b8c4 <HAL_TIM_PWM_Start_DMA+0x424>)
 800b776:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b77c:	4a52      	ldr	r2, [pc, #328]	@ (800b8c8 <HAL_TIM_PWM_Start_DMA+0x428>)
 800b77e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b784:	4a51      	ldr	r2, [pc, #324]	@ (800b8cc <HAL_TIM_PWM_Start_DMA+0x42c>)
 800b786:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b78c:	6879      	ldr	r1, [r7, #4]
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	3340      	adds	r3, #64	@ 0x40
 800b794:	461a      	mov	r2, r3
 800b796:	887b      	ldrh	r3, [r7, #2]
 800b798:	f7fb f8c2 	bl	8006920 <HAL_DMA_Start_IT>
 800b79c:	4603      	mov	r3, r0
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d001      	beq.n	800b7a6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	e089      	b.n	800b8ba <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	68da      	ldr	r2, [r3, #12]
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b7b4:	60da      	str	r2, [r3, #12]
      break;
 800b7b6:	e002      	b.n	800b7be <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	75fb      	strb	r3, [r7, #23]
      break;
 800b7bc:	bf00      	nop
  }

  if (status == HAL_OK)
 800b7be:	7dfb      	ldrb	r3, [r7, #23]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d179      	bne.n	800b8b8 <HAL_TIM_PWM_Start_DMA+0x418>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	68b9      	ldr	r1, [r7, #8]
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f001 f95b 	bl	800ca88 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	4a3e      	ldr	r2, [pc, #248]	@ (800b8d0 <HAL_TIM_PWM_Start_DMA+0x430>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d018      	beq.n	800b80e <HAL_TIM_PWM_Start_DMA+0x36e>
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4a3c      	ldr	r2, [pc, #240]	@ (800b8d4 <HAL_TIM_PWM_Start_DMA+0x434>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d013      	beq.n	800b80e <HAL_TIM_PWM_Start_DMA+0x36e>
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	4a3b      	ldr	r2, [pc, #236]	@ (800b8d8 <HAL_TIM_PWM_Start_DMA+0x438>)
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d00e      	beq.n	800b80e <HAL_TIM_PWM_Start_DMA+0x36e>
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	4a39      	ldr	r2, [pc, #228]	@ (800b8dc <HAL_TIM_PWM_Start_DMA+0x43c>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d009      	beq.n	800b80e <HAL_TIM_PWM_Start_DMA+0x36e>
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	4a38      	ldr	r2, [pc, #224]	@ (800b8e0 <HAL_TIM_PWM_Start_DMA+0x440>)
 800b800:	4293      	cmp	r3, r2
 800b802:	d004      	beq.n	800b80e <HAL_TIM_PWM_Start_DMA+0x36e>
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	4a36      	ldr	r2, [pc, #216]	@ (800b8e4 <HAL_TIM_PWM_Start_DMA+0x444>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d101      	bne.n	800b812 <HAL_TIM_PWM_Start_DMA+0x372>
 800b80e:	2301      	movs	r3, #1
 800b810:	e000      	b.n	800b814 <HAL_TIM_PWM_Start_DMA+0x374>
 800b812:	2300      	movs	r3, #0
 800b814:	2b00      	cmp	r3, #0
 800b816:	d007      	beq.n	800b828 <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b826:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	4a28      	ldr	r2, [pc, #160]	@ (800b8d0 <HAL_TIM_PWM_Start_DMA+0x430>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d022      	beq.n	800b878 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b83a:	d01d      	beq.n	800b878 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4a29      	ldr	r2, [pc, #164]	@ (800b8e8 <HAL_TIM_PWM_Start_DMA+0x448>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d018      	beq.n	800b878 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a28      	ldr	r2, [pc, #160]	@ (800b8ec <HAL_TIM_PWM_Start_DMA+0x44c>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d013      	beq.n	800b878 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4a26      	ldr	r2, [pc, #152]	@ (800b8f0 <HAL_TIM_PWM_Start_DMA+0x450>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d00e      	beq.n	800b878 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4a1d      	ldr	r2, [pc, #116]	@ (800b8d4 <HAL_TIM_PWM_Start_DMA+0x434>)
 800b860:	4293      	cmp	r3, r2
 800b862:	d009      	beq.n	800b878 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4a1b      	ldr	r2, [pc, #108]	@ (800b8d8 <HAL_TIM_PWM_Start_DMA+0x438>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d004      	beq.n	800b878 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4a1c      	ldr	r2, [pc, #112]	@ (800b8e4 <HAL_TIM_PWM_Start_DMA+0x444>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d115      	bne.n	800b8a4 <HAL_TIM_PWM_Start_DMA+0x404>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	689a      	ldr	r2, [r3, #8]
 800b87e:	4b1d      	ldr	r3, [pc, #116]	@ (800b8f4 <HAL_TIM_PWM_Start_DMA+0x454>)
 800b880:	4013      	ands	r3, r2
 800b882:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	2b06      	cmp	r3, #6
 800b888:	d015      	beq.n	800b8b6 <HAL_TIM_PWM_Start_DMA+0x416>
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b890:	d011      	beq.n	800b8b6 <HAL_TIM_PWM_Start_DMA+0x416>
      {
        __HAL_TIM_ENABLE(htim);
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	681a      	ldr	r2, [r3, #0]
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f042 0201 	orr.w	r2, r2, #1
 800b8a0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8a2:	e008      	b.n	800b8b6 <HAL_TIM_PWM_Start_DMA+0x416>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	681a      	ldr	r2, [r3, #0]
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f042 0201 	orr.w	r2, r2, #1
 800b8b2:	601a      	str	r2, [r3, #0]
 800b8b4:	e000      	b.n	800b8b8 <HAL_TIM_PWM_Start_DMA+0x418>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8b6:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800b8b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3718      	adds	r7, #24
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	0800c083 	.word	0x0800c083
 800b8c8:	0800c12b 	.word	0x0800c12b
 800b8cc:	0800bff1 	.word	0x0800bff1
 800b8d0:	40012c00 	.word	0x40012c00
 800b8d4:	40013400 	.word	0x40013400
 800b8d8:	40014000 	.word	0x40014000
 800b8dc:	40014400 	.word	0x40014400
 800b8e0:	40014800 	.word	0x40014800
 800b8e4:	40015000 	.word	0x40015000
 800b8e8:	40000400 	.word	0x40000400
 800b8ec:	40000800 	.word	0x40000800
 800b8f0:	40000c00 	.word	0x40000c00
 800b8f4:	00010007 	.word	0x00010007

0800b8f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b086      	sub	sp, #24
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d101      	bne.n	800b90c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b908:	2301      	movs	r3, #1
 800b90a:	e097      	b.n	800ba3c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b912:	b2db      	uxtb	r3, r3
 800b914:	2b00      	cmp	r3, #0
 800b916:	d106      	bne.n	800b926 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2200      	movs	r2, #0
 800b91c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f7f8 f847 	bl	80039b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2202      	movs	r2, #2
 800b92a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	689b      	ldr	r3, [r3, #8]
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	6812      	ldr	r2, [r2, #0]
 800b938:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800b93c:	f023 0307 	bic.w	r3, r3, #7
 800b940:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681a      	ldr	r2, [r3, #0]
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	3304      	adds	r3, #4
 800b94a:	4619      	mov	r1, r3
 800b94c:	4610      	mov	r0, r2
 800b94e:	f000 fc21 	bl	800c194 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	689b      	ldr	r3, [r3, #8]
 800b958:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	699b      	ldr	r3, [r3, #24]
 800b960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	6a1b      	ldr	r3, [r3, #32]
 800b968:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	697a      	ldr	r2, [r7, #20]
 800b970:	4313      	orrs	r3, r2
 800b972:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b97a:	f023 0303 	bic.w	r3, r3, #3
 800b97e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	689a      	ldr	r2, [r3, #8]
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	699b      	ldr	r3, [r3, #24]
 800b988:	021b      	lsls	r3, r3, #8
 800b98a:	4313      	orrs	r3, r2
 800b98c:	693a      	ldr	r2, [r7, #16]
 800b98e:	4313      	orrs	r3, r2
 800b990:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800b998:	f023 030c 	bic.w	r3, r3, #12
 800b99c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b9a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b9a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	68da      	ldr	r2, [r3, #12]
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	69db      	ldr	r3, [r3, #28]
 800b9b2:	021b      	lsls	r3, r3, #8
 800b9b4:	4313      	orrs	r3, r2
 800b9b6:	693a      	ldr	r2, [r7, #16]
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	691b      	ldr	r3, [r3, #16]
 800b9c0:	011a      	lsls	r2, r3, #4
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	6a1b      	ldr	r3, [r3, #32]
 800b9c6:	031b      	lsls	r3, r3, #12
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	693a      	ldr	r2, [r7, #16]
 800b9cc:	4313      	orrs	r3, r2
 800b9ce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800b9d6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800b9de:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	685a      	ldr	r2, [r3, #4]
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	695b      	ldr	r3, [r3, #20]
 800b9e8:	011b      	lsls	r3, r3, #4
 800b9ea:	4313      	orrs	r3, r2
 800b9ec:	68fa      	ldr	r2, [r7, #12]
 800b9ee:	4313      	orrs	r3, r2
 800b9f0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	697a      	ldr	r2, [r7, #20]
 800b9f8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	693a      	ldr	r2, [r7, #16]
 800ba00:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	68fa      	ldr	r2, [r7, #12]
 800ba08:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2201      	movs	r2, #1
 800ba0e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2201      	movs	r2, #1
 800ba16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2201      	movs	r2, #1
 800ba26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2201      	movs	r2, #1
 800ba36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ba3a:	2300      	movs	r3, #0
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3718      	adds	r7, #24
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b084      	sub	sp, #16
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
 800ba4c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ba54:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ba5c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ba64:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ba6c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d110      	bne.n	800ba96 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ba74:	7bfb      	ldrb	r3, [r7, #15]
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	d102      	bne.n	800ba80 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800ba7a:	7b7b      	ldrb	r3, [r7, #13]
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	d001      	beq.n	800ba84 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800ba80:	2301      	movs	r3, #1
 800ba82:	e069      	b.n	800bb58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2202      	movs	r2, #2
 800ba88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2202      	movs	r2, #2
 800ba90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ba94:	e031      	b.n	800bafa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	2b04      	cmp	r3, #4
 800ba9a:	d110      	bne.n	800babe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ba9c:	7bbb      	ldrb	r3, [r7, #14]
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	d102      	bne.n	800baa8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800baa2:	7b3b      	ldrb	r3, [r7, #12]
 800baa4:	2b01      	cmp	r3, #1
 800baa6:	d001      	beq.n	800baac <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800baa8:	2301      	movs	r3, #1
 800baaa:	e055      	b.n	800bb58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2202      	movs	r2, #2
 800bab0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2202      	movs	r2, #2
 800bab8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800babc:	e01d      	b.n	800bafa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800babe:	7bfb      	ldrb	r3, [r7, #15]
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d108      	bne.n	800bad6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bac4:	7bbb      	ldrb	r3, [r7, #14]
 800bac6:	2b01      	cmp	r3, #1
 800bac8:	d105      	bne.n	800bad6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800baca:	7b7b      	ldrb	r3, [r7, #13]
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d102      	bne.n	800bad6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bad0:	7b3b      	ldrb	r3, [r7, #12]
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	d001      	beq.n	800bada <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800bad6:	2301      	movs	r3, #1
 800bad8:	e03e      	b.n	800bb58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2202      	movs	r2, #2
 800bade:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2202      	movs	r2, #2
 800bae6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2202      	movs	r2, #2
 800baee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2202      	movs	r2, #2
 800baf6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d003      	beq.n	800bb08 <HAL_TIM_Encoder_Start+0xc4>
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	2b04      	cmp	r3, #4
 800bb04:	d008      	beq.n	800bb18 <HAL_TIM_Encoder_Start+0xd4>
 800bb06:	e00f      	b.n	800bb28 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	2100      	movs	r1, #0
 800bb10:	4618      	mov	r0, r3
 800bb12:	f000 ffb9 	bl	800ca88 <TIM_CCxChannelCmd>
      break;
 800bb16:	e016      	b.n	800bb46 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	2201      	movs	r2, #1
 800bb1e:	2104      	movs	r1, #4
 800bb20:	4618      	mov	r0, r3
 800bb22:	f000 ffb1 	bl	800ca88 <TIM_CCxChannelCmd>
      break;
 800bb26:	e00e      	b.n	800bb46 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	2201      	movs	r2, #1
 800bb2e:	2100      	movs	r1, #0
 800bb30:	4618      	mov	r0, r3
 800bb32:	f000 ffa9 	bl	800ca88 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	2104      	movs	r1, #4
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f000 ffa2 	bl	800ca88 <TIM_CCxChannelCmd>
      break;
 800bb44:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f042 0201 	orr.w	r2, r2, #1
 800bb54:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bb56:	2300      	movs	r3, #0
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3710      	adds	r7, #16
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b086      	sub	sp, #24
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	60b9      	str	r1, [r7, #8]
 800bb6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bb76:	2b01      	cmp	r3, #1
 800bb78:	d101      	bne.n	800bb7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bb7a:	2302      	movs	r3, #2
 800bb7c:	e0ff      	b.n	800bd7e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	2201      	movs	r2, #1
 800bb82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2b14      	cmp	r3, #20
 800bb8a:	f200 80f0 	bhi.w	800bd6e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bb8e:	a201      	add	r2, pc, #4	@ (adr r2, 800bb94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bb90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb94:	0800bbe9 	.word	0x0800bbe9
 800bb98:	0800bd6f 	.word	0x0800bd6f
 800bb9c:	0800bd6f 	.word	0x0800bd6f
 800bba0:	0800bd6f 	.word	0x0800bd6f
 800bba4:	0800bc29 	.word	0x0800bc29
 800bba8:	0800bd6f 	.word	0x0800bd6f
 800bbac:	0800bd6f 	.word	0x0800bd6f
 800bbb0:	0800bd6f 	.word	0x0800bd6f
 800bbb4:	0800bc6b 	.word	0x0800bc6b
 800bbb8:	0800bd6f 	.word	0x0800bd6f
 800bbbc:	0800bd6f 	.word	0x0800bd6f
 800bbc0:	0800bd6f 	.word	0x0800bd6f
 800bbc4:	0800bcab 	.word	0x0800bcab
 800bbc8:	0800bd6f 	.word	0x0800bd6f
 800bbcc:	0800bd6f 	.word	0x0800bd6f
 800bbd0:	0800bd6f 	.word	0x0800bd6f
 800bbd4:	0800bced 	.word	0x0800bced
 800bbd8:	0800bd6f 	.word	0x0800bd6f
 800bbdc:	0800bd6f 	.word	0x0800bd6f
 800bbe0:	0800bd6f 	.word	0x0800bd6f
 800bbe4:	0800bd2d 	.word	0x0800bd2d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	68b9      	ldr	r1, [r7, #8]
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f000 fb84 	bl	800c2fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	699a      	ldr	r2, [r3, #24]
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f042 0208 	orr.w	r2, r2, #8
 800bc02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	699a      	ldr	r2, [r3, #24]
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f022 0204 	bic.w	r2, r2, #4
 800bc12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	6999      	ldr	r1, [r3, #24]
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	691a      	ldr	r2, [r3, #16]
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	430a      	orrs	r2, r1
 800bc24:	619a      	str	r2, [r3, #24]
      break;
 800bc26:	e0a5      	b.n	800bd74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	68b9      	ldr	r1, [r7, #8]
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f000 fbfe 	bl	800c430 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	699a      	ldr	r2, [r3, #24]
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bc42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	699a      	ldr	r2, [r3, #24]
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bc52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	6999      	ldr	r1, [r3, #24]
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	691b      	ldr	r3, [r3, #16]
 800bc5e:	021a      	lsls	r2, r3, #8
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	430a      	orrs	r2, r1
 800bc66:	619a      	str	r2, [r3, #24]
      break;
 800bc68:	e084      	b.n	800bd74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	68b9      	ldr	r1, [r7, #8]
 800bc70:	4618      	mov	r0, r3
 800bc72:	f000 fc71 	bl	800c558 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	69da      	ldr	r2, [r3, #28]
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f042 0208 	orr.w	r2, r2, #8
 800bc84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	69da      	ldr	r2, [r3, #28]
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f022 0204 	bic.w	r2, r2, #4
 800bc94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	69d9      	ldr	r1, [r3, #28]
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	691a      	ldr	r2, [r3, #16]
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	430a      	orrs	r2, r1
 800bca6:	61da      	str	r2, [r3, #28]
      break;
 800bca8:	e064      	b.n	800bd74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	68b9      	ldr	r1, [r7, #8]
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f000 fce3 	bl	800c67c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	69da      	ldr	r2, [r3, #28]
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bcc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	69da      	ldr	r2, [r3, #28]
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bcd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	69d9      	ldr	r1, [r3, #28]
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	691b      	ldr	r3, [r3, #16]
 800bce0:	021a      	lsls	r2, r3, #8
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	430a      	orrs	r2, r1
 800bce8:	61da      	str	r2, [r3, #28]
      break;
 800bcea:	e043      	b.n	800bd74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	68b9      	ldr	r1, [r7, #8]
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f000 fd56 	bl	800c7a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	f042 0208 	orr.w	r2, r2, #8
 800bd06:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f022 0204 	bic.w	r2, r2, #4
 800bd16:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	691a      	ldr	r2, [r3, #16]
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	430a      	orrs	r2, r1
 800bd28:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800bd2a:	e023      	b.n	800bd74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	68b9      	ldr	r1, [r7, #8]
 800bd32:	4618      	mov	r0, r3
 800bd34:	f000 fda0 	bl	800c878 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bd46:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bd56:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	691b      	ldr	r3, [r3, #16]
 800bd62:	021a      	lsls	r2, r3, #8
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	430a      	orrs	r2, r1
 800bd6a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800bd6c:	e002      	b.n	800bd74 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	75fb      	strb	r3, [r7, #23]
      break;
 800bd72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2200      	movs	r2, #0
 800bd78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bd7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3718      	adds	r7, #24
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	bf00      	nop

0800bd88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b084      	sub	sp, #16
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bd92:	2300      	movs	r3, #0
 800bd94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d101      	bne.n	800bda4 <HAL_TIM_ConfigClockSource+0x1c>
 800bda0:	2302      	movs	r3, #2
 800bda2:	e0f6      	b.n	800bf92 <HAL_TIM_ConfigClockSource+0x20a>
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2201      	movs	r2, #1
 800bda8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2202      	movs	r2, #2
 800bdb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	689b      	ldr	r3, [r3, #8]
 800bdba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800bdc2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800bdc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bdce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	68ba      	ldr	r2, [r7, #8]
 800bdd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4a6f      	ldr	r2, [pc, #444]	@ (800bf9c <HAL_TIM_ConfigClockSource+0x214>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	f000 80c1 	beq.w	800bf66 <HAL_TIM_ConfigClockSource+0x1de>
 800bde4:	4a6d      	ldr	r2, [pc, #436]	@ (800bf9c <HAL_TIM_ConfigClockSource+0x214>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	f200 80c6 	bhi.w	800bf78 <HAL_TIM_ConfigClockSource+0x1f0>
 800bdec:	4a6c      	ldr	r2, [pc, #432]	@ (800bfa0 <HAL_TIM_ConfigClockSource+0x218>)
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	f000 80b9 	beq.w	800bf66 <HAL_TIM_ConfigClockSource+0x1de>
 800bdf4:	4a6a      	ldr	r2, [pc, #424]	@ (800bfa0 <HAL_TIM_ConfigClockSource+0x218>)
 800bdf6:	4293      	cmp	r3, r2
 800bdf8:	f200 80be 	bhi.w	800bf78 <HAL_TIM_ConfigClockSource+0x1f0>
 800bdfc:	4a69      	ldr	r2, [pc, #420]	@ (800bfa4 <HAL_TIM_ConfigClockSource+0x21c>)
 800bdfe:	4293      	cmp	r3, r2
 800be00:	f000 80b1 	beq.w	800bf66 <HAL_TIM_ConfigClockSource+0x1de>
 800be04:	4a67      	ldr	r2, [pc, #412]	@ (800bfa4 <HAL_TIM_ConfigClockSource+0x21c>)
 800be06:	4293      	cmp	r3, r2
 800be08:	f200 80b6 	bhi.w	800bf78 <HAL_TIM_ConfigClockSource+0x1f0>
 800be0c:	4a66      	ldr	r2, [pc, #408]	@ (800bfa8 <HAL_TIM_ConfigClockSource+0x220>)
 800be0e:	4293      	cmp	r3, r2
 800be10:	f000 80a9 	beq.w	800bf66 <HAL_TIM_ConfigClockSource+0x1de>
 800be14:	4a64      	ldr	r2, [pc, #400]	@ (800bfa8 <HAL_TIM_ConfigClockSource+0x220>)
 800be16:	4293      	cmp	r3, r2
 800be18:	f200 80ae 	bhi.w	800bf78 <HAL_TIM_ConfigClockSource+0x1f0>
 800be1c:	4a63      	ldr	r2, [pc, #396]	@ (800bfac <HAL_TIM_ConfigClockSource+0x224>)
 800be1e:	4293      	cmp	r3, r2
 800be20:	f000 80a1 	beq.w	800bf66 <HAL_TIM_ConfigClockSource+0x1de>
 800be24:	4a61      	ldr	r2, [pc, #388]	@ (800bfac <HAL_TIM_ConfigClockSource+0x224>)
 800be26:	4293      	cmp	r3, r2
 800be28:	f200 80a6 	bhi.w	800bf78 <HAL_TIM_ConfigClockSource+0x1f0>
 800be2c:	4a60      	ldr	r2, [pc, #384]	@ (800bfb0 <HAL_TIM_ConfigClockSource+0x228>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	f000 8099 	beq.w	800bf66 <HAL_TIM_ConfigClockSource+0x1de>
 800be34:	4a5e      	ldr	r2, [pc, #376]	@ (800bfb0 <HAL_TIM_ConfigClockSource+0x228>)
 800be36:	4293      	cmp	r3, r2
 800be38:	f200 809e 	bhi.w	800bf78 <HAL_TIM_ConfigClockSource+0x1f0>
 800be3c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800be40:	f000 8091 	beq.w	800bf66 <HAL_TIM_ConfigClockSource+0x1de>
 800be44:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800be48:	f200 8096 	bhi.w	800bf78 <HAL_TIM_ConfigClockSource+0x1f0>
 800be4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be50:	f000 8089 	beq.w	800bf66 <HAL_TIM_ConfigClockSource+0x1de>
 800be54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be58:	f200 808e 	bhi.w	800bf78 <HAL_TIM_ConfigClockSource+0x1f0>
 800be5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800be60:	d03e      	beq.n	800bee0 <HAL_TIM_ConfigClockSource+0x158>
 800be62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800be66:	f200 8087 	bhi.w	800bf78 <HAL_TIM_ConfigClockSource+0x1f0>
 800be6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be6e:	f000 8086 	beq.w	800bf7e <HAL_TIM_ConfigClockSource+0x1f6>
 800be72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be76:	d87f      	bhi.n	800bf78 <HAL_TIM_ConfigClockSource+0x1f0>
 800be78:	2b70      	cmp	r3, #112	@ 0x70
 800be7a:	d01a      	beq.n	800beb2 <HAL_TIM_ConfigClockSource+0x12a>
 800be7c:	2b70      	cmp	r3, #112	@ 0x70
 800be7e:	d87b      	bhi.n	800bf78 <HAL_TIM_ConfigClockSource+0x1f0>
 800be80:	2b60      	cmp	r3, #96	@ 0x60
 800be82:	d050      	beq.n	800bf26 <HAL_TIM_ConfigClockSource+0x19e>
 800be84:	2b60      	cmp	r3, #96	@ 0x60
 800be86:	d877      	bhi.n	800bf78 <HAL_TIM_ConfigClockSource+0x1f0>
 800be88:	2b50      	cmp	r3, #80	@ 0x50
 800be8a:	d03c      	beq.n	800bf06 <HAL_TIM_ConfigClockSource+0x17e>
 800be8c:	2b50      	cmp	r3, #80	@ 0x50
 800be8e:	d873      	bhi.n	800bf78 <HAL_TIM_ConfigClockSource+0x1f0>
 800be90:	2b40      	cmp	r3, #64	@ 0x40
 800be92:	d058      	beq.n	800bf46 <HAL_TIM_ConfigClockSource+0x1be>
 800be94:	2b40      	cmp	r3, #64	@ 0x40
 800be96:	d86f      	bhi.n	800bf78 <HAL_TIM_ConfigClockSource+0x1f0>
 800be98:	2b30      	cmp	r3, #48	@ 0x30
 800be9a:	d064      	beq.n	800bf66 <HAL_TIM_ConfigClockSource+0x1de>
 800be9c:	2b30      	cmp	r3, #48	@ 0x30
 800be9e:	d86b      	bhi.n	800bf78 <HAL_TIM_ConfigClockSource+0x1f0>
 800bea0:	2b20      	cmp	r3, #32
 800bea2:	d060      	beq.n	800bf66 <HAL_TIM_ConfigClockSource+0x1de>
 800bea4:	2b20      	cmp	r3, #32
 800bea6:	d867      	bhi.n	800bf78 <HAL_TIM_ConfigClockSource+0x1f0>
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d05c      	beq.n	800bf66 <HAL_TIM_ConfigClockSource+0x1de>
 800beac:	2b10      	cmp	r3, #16
 800beae:	d05a      	beq.n	800bf66 <HAL_TIM_ConfigClockSource+0x1de>
 800beb0:	e062      	b.n	800bf78 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bec2:	f000 fdc1 	bl	800ca48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	689b      	ldr	r3, [r3, #8]
 800becc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bed4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	68ba      	ldr	r2, [r7, #8]
 800bedc:	609a      	str	r2, [r3, #8]
      break;
 800bede:	e04f      	b.n	800bf80 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bef0:	f000 fdaa 	bl	800ca48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	689a      	ldr	r2, [r3, #8]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bf02:	609a      	str	r2, [r3, #8]
      break;
 800bf04:	e03c      	b.n	800bf80 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf12:	461a      	mov	r2, r3
 800bf14:	f000 fd1c 	bl	800c950 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	2150      	movs	r1, #80	@ 0x50
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f000 fd75 	bl	800ca0e <TIM_ITRx_SetConfig>
      break;
 800bf24:	e02c      	b.n	800bf80 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bf32:	461a      	mov	r2, r3
 800bf34:	f000 fd3b 	bl	800c9ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	2160      	movs	r1, #96	@ 0x60
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f000 fd65 	bl	800ca0e <TIM_ITRx_SetConfig>
      break;
 800bf44:	e01c      	b.n	800bf80 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf52:	461a      	mov	r2, r3
 800bf54:	f000 fcfc 	bl	800c950 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	2140      	movs	r1, #64	@ 0x40
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f000 fd55 	bl	800ca0e <TIM_ITRx_SetConfig>
      break;
 800bf64:	e00c      	b.n	800bf80 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681a      	ldr	r2, [r3, #0]
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	4619      	mov	r1, r3
 800bf70:	4610      	mov	r0, r2
 800bf72:	f000 fd4c 	bl	800ca0e <TIM_ITRx_SetConfig>
      break;
 800bf76:	e003      	b.n	800bf80 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800bf78:	2301      	movs	r3, #1
 800bf7a:	73fb      	strb	r3, [r7, #15]
      break;
 800bf7c:	e000      	b.n	800bf80 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800bf7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2201      	movs	r2, #1
 800bf84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bf90:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3710      	adds	r7, #16
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	bf00      	nop
 800bf9c:	00100070 	.word	0x00100070
 800bfa0:	00100060 	.word	0x00100060
 800bfa4:	00100050 	.word	0x00100050
 800bfa8:	00100040 	.word	0x00100040
 800bfac:	00100030 	.word	0x00100030
 800bfb0:	00100020 	.word	0x00100020

0800bfb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b083      	sub	sp, #12
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bfbc:	bf00      	nop
 800bfbe:	370c      	adds	r7, #12
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr

0800bfc8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b083      	sub	sp, #12
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800bfd0:	bf00      	nop
 800bfd2:	370c      	adds	r7, #12
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfda:	4770      	bx	lr

0800bfdc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b083      	sub	sp, #12
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800bfe4:	bf00      	nop
 800bfe6:	370c      	adds	r7, #12
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfee:	4770      	bx	lr

0800bff0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b084      	sub	sp, #16
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bffc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c002:	687a      	ldr	r2, [r7, #4]
 800c004:	429a      	cmp	r2, r3
 800c006:	d107      	bne.n	800c018 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	2201      	movs	r2, #1
 800c00c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2201      	movs	r2, #1
 800c012:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c016:	e02a      	b.n	800c06e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c01c:	687a      	ldr	r2, [r7, #4]
 800c01e:	429a      	cmp	r2, r3
 800c020:	d107      	bne.n	800c032 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	2202      	movs	r2, #2
 800c026:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	2201      	movs	r2, #1
 800c02c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c030:	e01d      	b.n	800c06e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c036:	687a      	ldr	r2, [r7, #4]
 800c038:	429a      	cmp	r2, r3
 800c03a:	d107      	bne.n	800c04c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	2204      	movs	r2, #4
 800c040:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	2201      	movs	r2, #1
 800c046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c04a:	e010      	b.n	800c06e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c050:	687a      	ldr	r2, [r7, #4]
 800c052:	429a      	cmp	r2, r3
 800c054:	d107      	bne.n	800c066 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	2208      	movs	r2, #8
 800c05a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	2201      	movs	r2, #1
 800c060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c064:	e003      	b.n	800c06e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	2201      	movs	r2, #1
 800c06a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800c06e:	68f8      	ldr	r0, [r7, #12]
 800c070:	f7ff ffb4 	bl	800bfdc <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	2200      	movs	r2, #0
 800c078:	771a      	strb	r2, [r3, #28]
}
 800c07a:	bf00      	nop
 800c07c:	3710      	adds	r7, #16
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}

0800c082 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800c082:	b580      	push	{r7, lr}
 800c084:	b084      	sub	sp, #16
 800c086:	af00      	add	r7, sp, #0
 800c088:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c08e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c094:	687a      	ldr	r2, [r7, #4]
 800c096:	429a      	cmp	r2, r3
 800c098:	d10b      	bne.n	800c0b2 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	2201      	movs	r2, #1
 800c09e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	69db      	ldr	r3, [r3, #28]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d136      	bne.n	800c116 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c0b0:	e031      	b.n	800c116 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0b6:	687a      	ldr	r2, [r7, #4]
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d10b      	bne.n	800c0d4 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	2202      	movs	r2, #2
 800c0c0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	69db      	ldr	r3, [r3, #28]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d125      	bne.n	800c116 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	2201      	movs	r2, #1
 800c0ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c0d2:	e020      	b.n	800c116 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0d8:	687a      	ldr	r2, [r7, #4]
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d10b      	bne.n	800c0f6 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	2204      	movs	r2, #4
 800c0e2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	69db      	ldr	r3, [r3, #28]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d114      	bne.n	800c116 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c0f4:	e00f      	b.n	800c116 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0fa:	687a      	ldr	r2, [r7, #4]
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	d10a      	bne.n	800c116 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	2208      	movs	r2, #8
 800c104:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	69db      	ldr	r3, [r3, #28]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d103      	bne.n	800c116 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	2201      	movs	r2, #1
 800c112:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c116:	68f8      	ldr	r0, [r7, #12]
 800c118:	f7ff ff4c 	bl	800bfb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	2200      	movs	r2, #0
 800c120:	771a      	strb	r2, [r3, #28]
}
 800c122:	bf00      	nop
 800c124:	3710      	adds	r7, #16
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}

0800c12a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c12a:	b580      	push	{r7, lr}
 800c12c:	b084      	sub	sp, #16
 800c12e:	af00      	add	r7, sp, #0
 800c130:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c136:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c13c:	687a      	ldr	r2, [r7, #4]
 800c13e:	429a      	cmp	r2, r3
 800c140:	d103      	bne.n	800c14a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	2201      	movs	r2, #1
 800c146:	771a      	strb	r2, [r3, #28]
 800c148:	e019      	b.n	800c17e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c14e:	687a      	ldr	r2, [r7, #4]
 800c150:	429a      	cmp	r2, r3
 800c152:	d103      	bne.n	800c15c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2202      	movs	r2, #2
 800c158:	771a      	strb	r2, [r3, #28]
 800c15a:	e010      	b.n	800c17e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c160:	687a      	ldr	r2, [r7, #4]
 800c162:	429a      	cmp	r2, r3
 800c164:	d103      	bne.n	800c16e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	2204      	movs	r2, #4
 800c16a:	771a      	strb	r2, [r3, #28]
 800c16c:	e007      	b.n	800c17e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c172:	687a      	ldr	r2, [r7, #4]
 800c174:	429a      	cmp	r2, r3
 800c176:	d102      	bne.n	800c17e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2208      	movs	r2, #8
 800c17c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800c17e:	68f8      	ldr	r0, [r7, #12]
 800c180:	f7ff ff22 	bl	800bfc8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	2200      	movs	r2, #0
 800c188:	771a      	strb	r2, [r3, #28]
}
 800c18a:	bf00      	nop
 800c18c:	3710      	adds	r7, #16
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
	...

0800c194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c194:	b480      	push	{r7}
 800c196:	b085      	sub	sp, #20
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	4a4c      	ldr	r2, [pc, #304]	@ (800c2d8 <TIM_Base_SetConfig+0x144>)
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d017      	beq.n	800c1dc <TIM_Base_SetConfig+0x48>
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1b2:	d013      	beq.n	800c1dc <TIM_Base_SetConfig+0x48>
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	4a49      	ldr	r2, [pc, #292]	@ (800c2dc <TIM_Base_SetConfig+0x148>)
 800c1b8:	4293      	cmp	r3, r2
 800c1ba:	d00f      	beq.n	800c1dc <TIM_Base_SetConfig+0x48>
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	4a48      	ldr	r2, [pc, #288]	@ (800c2e0 <TIM_Base_SetConfig+0x14c>)
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d00b      	beq.n	800c1dc <TIM_Base_SetConfig+0x48>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	4a47      	ldr	r2, [pc, #284]	@ (800c2e4 <TIM_Base_SetConfig+0x150>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d007      	beq.n	800c1dc <TIM_Base_SetConfig+0x48>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	4a46      	ldr	r2, [pc, #280]	@ (800c2e8 <TIM_Base_SetConfig+0x154>)
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d003      	beq.n	800c1dc <TIM_Base_SetConfig+0x48>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	4a45      	ldr	r2, [pc, #276]	@ (800c2ec <TIM_Base_SetConfig+0x158>)
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	d108      	bne.n	800c1ee <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	685b      	ldr	r3, [r3, #4]
 800c1e8:	68fa      	ldr	r2, [r7, #12]
 800c1ea:	4313      	orrs	r3, r2
 800c1ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	4a39      	ldr	r2, [pc, #228]	@ (800c2d8 <TIM_Base_SetConfig+0x144>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d023      	beq.n	800c23e <TIM_Base_SetConfig+0xaa>
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1fc:	d01f      	beq.n	800c23e <TIM_Base_SetConfig+0xaa>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	4a36      	ldr	r2, [pc, #216]	@ (800c2dc <TIM_Base_SetConfig+0x148>)
 800c202:	4293      	cmp	r3, r2
 800c204:	d01b      	beq.n	800c23e <TIM_Base_SetConfig+0xaa>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	4a35      	ldr	r2, [pc, #212]	@ (800c2e0 <TIM_Base_SetConfig+0x14c>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d017      	beq.n	800c23e <TIM_Base_SetConfig+0xaa>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	4a34      	ldr	r2, [pc, #208]	@ (800c2e4 <TIM_Base_SetConfig+0x150>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d013      	beq.n	800c23e <TIM_Base_SetConfig+0xaa>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	4a33      	ldr	r2, [pc, #204]	@ (800c2e8 <TIM_Base_SetConfig+0x154>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d00f      	beq.n	800c23e <TIM_Base_SetConfig+0xaa>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	4a33      	ldr	r2, [pc, #204]	@ (800c2f0 <TIM_Base_SetConfig+0x15c>)
 800c222:	4293      	cmp	r3, r2
 800c224:	d00b      	beq.n	800c23e <TIM_Base_SetConfig+0xaa>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	4a32      	ldr	r2, [pc, #200]	@ (800c2f4 <TIM_Base_SetConfig+0x160>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d007      	beq.n	800c23e <TIM_Base_SetConfig+0xaa>
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	4a31      	ldr	r2, [pc, #196]	@ (800c2f8 <TIM_Base_SetConfig+0x164>)
 800c232:	4293      	cmp	r3, r2
 800c234:	d003      	beq.n	800c23e <TIM_Base_SetConfig+0xaa>
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	4a2c      	ldr	r2, [pc, #176]	@ (800c2ec <TIM_Base_SetConfig+0x158>)
 800c23a:	4293      	cmp	r3, r2
 800c23c:	d108      	bne.n	800c250 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c244:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	68db      	ldr	r3, [r3, #12]
 800c24a:	68fa      	ldr	r2, [r7, #12]
 800c24c:	4313      	orrs	r3, r2
 800c24e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	695b      	ldr	r3, [r3, #20]
 800c25a:	4313      	orrs	r3, r2
 800c25c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	68fa      	ldr	r2, [r7, #12]
 800c262:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	689a      	ldr	r2, [r3, #8]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	681a      	ldr	r2, [r3, #0]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	4a18      	ldr	r2, [pc, #96]	@ (800c2d8 <TIM_Base_SetConfig+0x144>)
 800c278:	4293      	cmp	r3, r2
 800c27a:	d013      	beq.n	800c2a4 <TIM_Base_SetConfig+0x110>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	4a1a      	ldr	r2, [pc, #104]	@ (800c2e8 <TIM_Base_SetConfig+0x154>)
 800c280:	4293      	cmp	r3, r2
 800c282:	d00f      	beq.n	800c2a4 <TIM_Base_SetConfig+0x110>
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	4a1a      	ldr	r2, [pc, #104]	@ (800c2f0 <TIM_Base_SetConfig+0x15c>)
 800c288:	4293      	cmp	r3, r2
 800c28a:	d00b      	beq.n	800c2a4 <TIM_Base_SetConfig+0x110>
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	4a19      	ldr	r2, [pc, #100]	@ (800c2f4 <TIM_Base_SetConfig+0x160>)
 800c290:	4293      	cmp	r3, r2
 800c292:	d007      	beq.n	800c2a4 <TIM_Base_SetConfig+0x110>
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	4a18      	ldr	r2, [pc, #96]	@ (800c2f8 <TIM_Base_SetConfig+0x164>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d003      	beq.n	800c2a4 <TIM_Base_SetConfig+0x110>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	4a13      	ldr	r2, [pc, #76]	@ (800c2ec <TIM_Base_SetConfig+0x158>)
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	d103      	bne.n	800c2ac <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	691a      	ldr	r2, [r3, #16]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2201      	movs	r2, #1
 800c2b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	691b      	ldr	r3, [r3, #16]
 800c2b6:	f003 0301 	and.w	r3, r3, #1
 800c2ba:	2b01      	cmp	r3, #1
 800c2bc:	d105      	bne.n	800c2ca <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	691b      	ldr	r3, [r3, #16]
 800c2c2:	f023 0201 	bic.w	r2, r3, #1
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	611a      	str	r2, [r3, #16]
  }
}
 800c2ca:	bf00      	nop
 800c2cc:	3714      	adds	r7, #20
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d4:	4770      	bx	lr
 800c2d6:	bf00      	nop
 800c2d8:	40012c00 	.word	0x40012c00
 800c2dc:	40000400 	.word	0x40000400
 800c2e0:	40000800 	.word	0x40000800
 800c2e4:	40000c00 	.word	0x40000c00
 800c2e8:	40013400 	.word	0x40013400
 800c2ec:	40015000 	.word	0x40015000
 800c2f0:	40014000 	.word	0x40014000
 800c2f4:	40014400 	.word	0x40014400
 800c2f8:	40014800 	.word	0x40014800

0800c2fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b087      	sub	sp, #28
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6a1b      	ldr	r3, [r3, #32]
 800c30a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6a1b      	ldr	r3, [r3, #32]
 800c310:	f023 0201 	bic.w	r2, r3, #1
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	685b      	ldr	r3, [r3, #4]
 800c31c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	699b      	ldr	r3, [r3, #24]
 800c322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c32a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c32e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	f023 0303 	bic.w	r3, r3, #3
 800c336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	68fa      	ldr	r2, [r7, #12]
 800c33e:	4313      	orrs	r3, r2
 800c340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	f023 0302 	bic.w	r3, r3, #2
 800c348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	689b      	ldr	r3, [r3, #8]
 800c34e:	697a      	ldr	r2, [r7, #20]
 800c350:	4313      	orrs	r3, r2
 800c352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	4a30      	ldr	r2, [pc, #192]	@ (800c418 <TIM_OC1_SetConfig+0x11c>)
 800c358:	4293      	cmp	r3, r2
 800c35a:	d013      	beq.n	800c384 <TIM_OC1_SetConfig+0x88>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	4a2f      	ldr	r2, [pc, #188]	@ (800c41c <TIM_OC1_SetConfig+0x120>)
 800c360:	4293      	cmp	r3, r2
 800c362:	d00f      	beq.n	800c384 <TIM_OC1_SetConfig+0x88>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	4a2e      	ldr	r2, [pc, #184]	@ (800c420 <TIM_OC1_SetConfig+0x124>)
 800c368:	4293      	cmp	r3, r2
 800c36a:	d00b      	beq.n	800c384 <TIM_OC1_SetConfig+0x88>
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	4a2d      	ldr	r2, [pc, #180]	@ (800c424 <TIM_OC1_SetConfig+0x128>)
 800c370:	4293      	cmp	r3, r2
 800c372:	d007      	beq.n	800c384 <TIM_OC1_SetConfig+0x88>
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	4a2c      	ldr	r2, [pc, #176]	@ (800c428 <TIM_OC1_SetConfig+0x12c>)
 800c378:	4293      	cmp	r3, r2
 800c37a:	d003      	beq.n	800c384 <TIM_OC1_SetConfig+0x88>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	4a2b      	ldr	r2, [pc, #172]	@ (800c42c <TIM_OC1_SetConfig+0x130>)
 800c380:	4293      	cmp	r3, r2
 800c382:	d10c      	bne.n	800c39e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	f023 0308 	bic.w	r3, r3, #8
 800c38a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	68db      	ldr	r3, [r3, #12]
 800c390:	697a      	ldr	r2, [r7, #20]
 800c392:	4313      	orrs	r3, r2
 800c394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	f023 0304 	bic.w	r3, r3, #4
 800c39c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	4a1d      	ldr	r2, [pc, #116]	@ (800c418 <TIM_OC1_SetConfig+0x11c>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d013      	beq.n	800c3ce <TIM_OC1_SetConfig+0xd2>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	4a1c      	ldr	r2, [pc, #112]	@ (800c41c <TIM_OC1_SetConfig+0x120>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d00f      	beq.n	800c3ce <TIM_OC1_SetConfig+0xd2>
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	4a1b      	ldr	r2, [pc, #108]	@ (800c420 <TIM_OC1_SetConfig+0x124>)
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d00b      	beq.n	800c3ce <TIM_OC1_SetConfig+0xd2>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	4a1a      	ldr	r2, [pc, #104]	@ (800c424 <TIM_OC1_SetConfig+0x128>)
 800c3ba:	4293      	cmp	r3, r2
 800c3bc:	d007      	beq.n	800c3ce <TIM_OC1_SetConfig+0xd2>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	4a19      	ldr	r2, [pc, #100]	@ (800c428 <TIM_OC1_SetConfig+0x12c>)
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d003      	beq.n	800c3ce <TIM_OC1_SetConfig+0xd2>
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	4a18      	ldr	r2, [pc, #96]	@ (800c42c <TIM_OC1_SetConfig+0x130>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d111      	bne.n	800c3f2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c3d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c3d6:	693b      	ldr	r3, [r7, #16]
 800c3d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c3dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	695b      	ldr	r3, [r3, #20]
 800c3e2:	693a      	ldr	r2, [r7, #16]
 800c3e4:	4313      	orrs	r3, r2
 800c3e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	699b      	ldr	r3, [r3, #24]
 800c3ec:	693a      	ldr	r2, [r7, #16]
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	693a      	ldr	r2, [r7, #16]
 800c3f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	68fa      	ldr	r2, [r7, #12]
 800c3fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	685a      	ldr	r2, [r3, #4]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	697a      	ldr	r2, [r7, #20]
 800c40a:	621a      	str	r2, [r3, #32]
}
 800c40c:	bf00      	nop
 800c40e:	371c      	adds	r7, #28
 800c410:	46bd      	mov	sp, r7
 800c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c416:	4770      	bx	lr
 800c418:	40012c00 	.word	0x40012c00
 800c41c:	40013400 	.word	0x40013400
 800c420:	40014000 	.word	0x40014000
 800c424:	40014400 	.word	0x40014400
 800c428:	40014800 	.word	0x40014800
 800c42c:	40015000 	.word	0x40015000

0800c430 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c430:	b480      	push	{r7}
 800c432:	b087      	sub	sp, #28
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6a1b      	ldr	r3, [r3, #32]
 800c43e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6a1b      	ldr	r3, [r3, #32]
 800c444:	f023 0210 	bic.w	r2, r3, #16
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	699b      	ldr	r3, [r3, #24]
 800c456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c45e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c46a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	021b      	lsls	r3, r3, #8
 800c472:	68fa      	ldr	r2, [r7, #12]
 800c474:	4313      	orrs	r3, r2
 800c476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	f023 0320 	bic.w	r3, r3, #32
 800c47e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	689b      	ldr	r3, [r3, #8]
 800c484:	011b      	lsls	r3, r3, #4
 800c486:	697a      	ldr	r2, [r7, #20]
 800c488:	4313      	orrs	r3, r2
 800c48a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	4a2c      	ldr	r2, [pc, #176]	@ (800c540 <TIM_OC2_SetConfig+0x110>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d007      	beq.n	800c4a4 <TIM_OC2_SetConfig+0x74>
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	4a2b      	ldr	r2, [pc, #172]	@ (800c544 <TIM_OC2_SetConfig+0x114>)
 800c498:	4293      	cmp	r3, r2
 800c49a:	d003      	beq.n	800c4a4 <TIM_OC2_SetConfig+0x74>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	4a2a      	ldr	r2, [pc, #168]	@ (800c548 <TIM_OC2_SetConfig+0x118>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d10d      	bne.n	800c4c0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c4aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	68db      	ldr	r3, [r3, #12]
 800c4b0:	011b      	lsls	r3, r3, #4
 800c4b2:	697a      	ldr	r2, [r7, #20]
 800c4b4:	4313      	orrs	r3, r2
 800c4b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c4be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	4a1f      	ldr	r2, [pc, #124]	@ (800c540 <TIM_OC2_SetConfig+0x110>)
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d013      	beq.n	800c4f0 <TIM_OC2_SetConfig+0xc0>
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	4a1e      	ldr	r2, [pc, #120]	@ (800c544 <TIM_OC2_SetConfig+0x114>)
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	d00f      	beq.n	800c4f0 <TIM_OC2_SetConfig+0xc0>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	4a1e      	ldr	r2, [pc, #120]	@ (800c54c <TIM_OC2_SetConfig+0x11c>)
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d00b      	beq.n	800c4f0 <TIM_OC2_SetConfig+0xc0>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	4a1d      	ldr	r2, [pc, #116]	@ (800c550 <TIM_OC2_SetConfig+0x120>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d007      	beq.n	800c4f0 <TIM_OC2_SetConfig+0xc0>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	4a1c      	ldr	r2, [pc, #112]	@ (800c554 <TIM_OC2_SetConfig+0x124>)
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d003      	beq.n	800c4f0 <TIM_OC2_SetConfig+0xc0>
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	4a17      	ldr	r2, [pc, #92]	@ (800c548 <TIM_OC2_SetConfig+0x118>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d113      	bne.n	800c518 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c4f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c4fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	695b      	ldr	r3, [r3, #20]
 800c504:	009b      	lsls	r3, r3, #2
 800c506:	693a      	ldr	r2, [r7, #16]
 800c508:	4313      	orrs	r3, r2
 800c50a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	699b      	ldr	r3, [r3, #24]
 800c510:	009b      	lsls	r3, r3, #2
 800c512:	693a      	ldr	r2, [r7, #16]
 800c514:	4313      	orrs	r3, r2
 800c516:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	693a      	ldr	r2, [r7, #16]
 800c51c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	68fa      	ldr	r2, [r7, #12]
 800c522:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	685a      	ldr	r2, [r3, #4]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	697a      	ldr	r2, [r7, #20]
 800c530:	621a      	str	r2, [r3, #32]
}
 800c532:	bf00      	nop
 800c534:	371c      	adds	r7, #28
 800c536:	46bd      	mov	sp, r7
 800c538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53c:	4770      	bx	lr
 800c53e:	bf00      	nop
 800c540:	40012c00 	.word	0x40012c00
 800c544:	40013400 	.word	0x40013400
 800c548:	40015000 	.word	0x40015000
 800c54c:	40014000 	.word	0x40014000
 800c550:	40014400 	.word	0x40014400
 800c554:	40014800 	.word	0x40014800

0800c558 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c558:	b480      	push	{r7}
 800c55a:	b087      	sub	sp, #28
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
 800c560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6a1b      	ldr	r3, [r3, #32]
 800c566:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6a1b      	ldr	r3, [r3, #32]
 800c56c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	685b      	ldr	r3, [r3, #4]
 800c578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	69db      	ldr	r3, [r3, #28]
 800c57e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c586:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c58a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	f023 0303 	bic.w	r3, r3, #3
 800c592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	68fa      	ldr	r2, [r7, #12]
 800c59a:	4313      	orrs	r3, r2
 800c59c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c5a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	689b      	ldr	r3, [r3, #8]
 800c5aa:	021b      	lsls	r3, r3, #8
 800c5ac:	697a      	ldr	r2, [r7, #20]
 800c5ae:	4313      	orrs	r3, r2
 800c5b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	4a2b      	ldr	r2, [pc, #172]	@ (800c664 <TIM_OC3_SetConfig+0x10c>)
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d007      	beq.n	800c5ca <TIM_OC3_SetConfig+0x72>
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	4a2a      	ldr	r2, [pc, #168]	@ (800c668 <TIM_OC3_SetConfig+0x110>)
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	d003      	beq.n	800c5ca <TIM_OC3_SetConfig+0x72>
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	4a29      	ldr	r2, [pc, #164]	@ (800c66c <TIM_OC3_SetConfig+0x114>)
 800c5c6:	4293      	cmp	r3, r2
 800c5c8:	d10d      	bne.n	800c5e6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c5d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	68db      	ldr	r3, [r3, #12]
 800c5d6:	021b      	lsls	r3, r3, #8
 800c5d8:	697a      	ldr	r2, [r7, #20]
 800c5da:	4313      	orrs	r3, r2
 800c5dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c5de:	697b      	ldr	r3, [r7, #20]
 800c5e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c5e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	4a1e      	ldr	r2, [pc, #120]	@ (800c664 <TIM_OC3_SetConfig+0x10c>)
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d013      	beq.n	800c616 <TIM_OC3_SetConfig+0xbe>
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	4a1d      	ldr	r2, [pc, #116]	@ (800c668 <TIM_OC3_SetConfig+0x110>)
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	d00f      	beq.n	800c616 <TIM_OC3_SetConfig+0xbe>
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	4a1d      	ldr	r2, [pc, #116]	@ (800c670 <TIM_OC3_SetConfig+0x118>)
 800c5fa:	4293      	cmp	r3, r2
 800c5fc:	d00b      	beq.n	800c616 <TIM_OC3_SetConfig+0xbe>
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	4a1c      	ldr	r2, [pc, #112]	@ (800c674 <TIM_OC3_SetConfig+0x11c>)
 800c602:	4293      	cmp	r3, r2
 800c604:	d007      	beq.n	800c616 <TIM_OC3_SetConfig+0xbe>
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	4a1b      	ldr	r2, [pc, #108]	@ (800c678 <TIM_OC3_SetConfig+0x120>)
 800c60a:	4293      	cmp	r3, r2
 800c60c:	d003      	beq.n	800c616 <TIM_OC3_SetConfig+0xbe>
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	4a16      	ldr	r2, [pc, #88]	@ (800c66c <TIM_OC3_SetConfig+0x114>)
 800c612:	4293      	cmp	r3, r2
 800c614:	d113      	bne.n	800c63e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c61c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c624:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	695b      	ldr	r3, [r3, #20]
 800c62a:	011b      	lsls	r3, r3, #4
 800c62c:	693a      	ldr	r2, [r7, #16]
 800c62e:	4313      	orrs	r3, r2
 800c630:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	699b      	ldr	r3, [r3, #24]
 800c636:	011b      	lsls	r3, r3, #4
 800c638:	693a      	ldr	r2, [r7, #16]
 800c63a:	4313      	orrs	r3, r2
 800c63c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	693a      	ldr	r2, [r7, #16]
 800c642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	68fa      	ldr	r2, [r7, #12]
 800c648:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	685a      	ldr	r2, [r3, #4]
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	697a      	ldr	r2, [r7, #20]
 800c656:	621a      	str	r2, [r3, #32]
}
 800c658:	bf00      	nop
 800c65a:	371c      	adds	r7, #28
 800c65c:	46bd      	mov	sp, r7
 800c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c662:	4770      	bx	lr
 800c664:	40012c00 	.word	0x40012c00
 800c668:	40013400 	.word	0x40013400
 800c66c:	40015000 	.word	0x40015000
 800c670:	40014000 	.word	0x40014000
 800c674:	40014400 	.word	0x40014400
 800c678:	40014800 	.word	0x40014800

0800c67c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c67c:	b480      	push	{r7}
 800c67e:	b087      	sub	sp, #28
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6a1b      	ldr	r3, [r3, #32]
 800c68a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	6a1b      	ldr	r3, [r3, #32]
 800c690:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	685b      	ldr	r3, [r3, #4]
 800c69c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	69db      	ldr	r3, [r3, #28]
 800c6a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c6aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c6ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c6b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	021b      	lsls	r3, r3, #8
 800c6be:	68fa      	ldr	r2, [r7, #12]
 800c6c0:	4313      	orrs	r3, r2
 800c6c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c6ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	689b      	ldr	r3, [r3, #8]
 800c6d0:	031b      	lsls	r3, r3, #12
 800c6d2:	697a      	ldr	r2, [r7, #20]
 800c6d4:	4313      	orrs	r3, r2
 800c6d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	4a2c      	ldr	r2, [pc, #176]	@ (800c78c <TIM_OC4_SetConfig+0x110>)
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	d007      	beq.n	800c6f0 <TIM_OC4_SetConfig+0x74>
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	4a2b      	ldr	r2, [pc, #172]	@ (800c790 <TIM_OC4_SetConfig+0x114>)
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d003      	beq.n	800c6f0 <TIM_OC4_SetConfig+0x74>
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	4a2a      	ldr	r2, [pc, #168]	@ (800c794 <TIM_OC4_SetConfig+0x118>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d10d      	bne.n	800c70c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c6f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	68db      	ldr	r3, [r3, #12]
 800c6fc:	031b      	lsls	r3, r3, #12
 800c6fe:	697a      	ldr	r2, [r7, #20]
 800c700:	4313      	orrs	r3, r2
 800c702:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c70a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	4a1f      	ldr	r2, [pc, #124]	@ (800c78c <TIM_OC4_SetConfig+0x110>)
 800c710:	4293      	cmp	r3, r2
 800c712:	d013      	beq.n	800c73c <TIM_OC4_SetConfig+0xc0>
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	4a1e      	ldr	r2, [pc, #120]	@ (800c790 <TIM_OC4_SetConfig+0x114>)
 800c718:	4293      	cmp	r3, r2
 800c71a:	d00f      	beq.n	800c73c <TIM_OC4_SetConfig+0xc0>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	4a1e      	ldr	r2, [pc, #120]	@ (800c798 <TIM_OC4_SetConfig+0x11c>)
 800c720:	4293      	cmp	r3, r2
 800c722:	d00b      	beq.n	800c73c <TIM_OC4_SetConfig+0xc0>
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	4a1d      	ldr	r2, [pc, #116]	@ (800c79c <TIM_OC4_SetConfig+0x120>)
 800c728:	4293      	cmp	r3, r2
 800c72a:	d007      	beq.n	800c73c <TIM_OC4_SetConfig+0xc0>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	4a1c      	ldr	r2, [pc, #112]	@ (800c7a0 <TIM_OC4_SetConfig+0x124>)
 800c730:	4293      	cmp	r3, r2
 800c732:	d003      	beq.n	800c73c <TIM_OC4_SetConfig+0xc0>
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	4a17      	ldr	r2, [pc, #92]	@ (800c794 <TIM_OC4_SetConfig+0x118>)
 800c738:	4293      	cmp	r3, r2
 800c73a:	d113      	bne.n	800c764 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c73c:	693b      	ldr	r3, [r7, #16]
 800c73e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c742:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c74a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	695b      	ldr	r3, [r3, #20]
 800c750:	019b      	lsls	r3, r3, #6
 800c752:	693a      	ldr	r2, [r7, #16]
 800c754:	4313      	orrs	r3, r2
 800c756:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	699b      	ldr	r3, [r3, #24]
 800c75c:	019b      	lsls	r3, r3, #6
 800c75e:	693a      	ldr	r2, [r7, #16]
 800c760:	4313      	orrs	r3, r2
 800c762:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	693a      	ldr	r2, [r7, #16]
 800c768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	68fa      	ldr	r2, [r7, #12]
 800c76e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	685a      	ldr	r2, [r3, #4]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	697a      	ldr	r2, [r7, #20]
 800c77c:	621a      	str	r2, [r3, #32]
}
 800c77e:	bf00      	nop
 800c780:	371c      	adds	r7, #28
 800c782:	46bd      	mov	sp, r7
 800c784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c788:	4770      	bx	lr
 800c78a:	bf00      	nop
 800c78c:	40012c00 	.word	0x40012c00
 800c790:	40013400 	.word	0x40013400
 800c794:	40015000 	.word	0x40015000
 800c798:	40014000 	.word	0x40014000
 800c79c:	40014400 	.word	0x40014400
 800c7a0:	40014800 	.word	0x40014800

0800c7a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b087      	sub	sp, #28
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6a1b      	ldr	r3, [r3, #32]
 800c7b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6a1b      	ldr	r3, [r3, #32]
 800c7b8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	685b      	ldr	r3, [r3, #4]
 800c7c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c7d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	68fa      	ldr	r2, [r7, #12]
 800c7de:	4313      	orrs	r3, r2
 800c7e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c7e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	689b      	ldr	r3, [r3, #8]
 800c7ee:	041b      	lsls	r3, r3, #16
 800c7f0:	693a      	ldr	r2, [r7, #16]
 800c7f2:	4313      	orrs	r3, r2
 800c7f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	4a19      	ldr	r2, [pc, #100]	@ (800c860 <TIM_OC5_SetConfig+0xbc>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d013      	beq.n	800c826 <TIM_OC5_SetConfig+0x82>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	4a18      	ldr	r2, [pc, #96]	@ (800c864 <TIM_OC5_SetConfig+0xc0>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d00f      	beq.n	800c826 <TIM_OC5_SetConfig+0x82>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	4a17      	ldr	r2, [pc, #92]	@ (800c868 <TIM_OC5_SetConfig+0xc4>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d00b      	beq.n	800c826 <TIM_OC5_SetConfig+0x82>
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	4a16      	ldr	r2, [pc, #88]	@ (800c86c <TIM_OC5_SetConfig+0xc8>)
 800c812:	4293      	cmp	r3, r2
 800c814:	d007      	beq.n	800c826 <TIM_OC5_SetConfig+0x82>
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	4a15      	ldr	r2, [pc, #84]	@ (800c870 <TIM_OC5_SetConfig+0xcc>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d003      	beq.n	800c826 <TIM_OC5_SetConfig+0x82>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	4a14      	ldr	r2, [pc, #80]	@ (800c874 <TIM_OC5_SetConfig+0xd0>)
 800c822:	4293      	cmp	r3, r2
 800c824:	d109      	bne.n	800c83a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c82c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	695b      	ldr	r3, [r3, #20]
 800c832:	021b      	lsls	r3, r3, #8
 800c834:	697a      	ldr	r2, [r7, #20]
 800c836:	4313      	orrs	r3, r2
 800c838:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	697a      	ldr	r2, [r7, #20]
 800c83e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	68fa      	ldr	r2, [r7, #12]
 800c844:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	685a      	ldr	r2, [r3, #4]
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	693a      	ldr	r2, [r7, #16]
 800c852:	621a      	str	r2, [r3, #32]
}
 800c854:	bf00      	nop
 800c856:	371c      	adds	r7, #28
 800c858:	46bd      	mov	sp, r7
 800c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85e:	4770      	bx	lr
 800c860:	40012c00 	.word	0x40012c00
 800c864:	40013400 	.word	0x40013400
 800c868:	40014000 	.word	0x40014000
 800c86c:	40014400 	.word	0x40014400
 800c870:	40014800 	.word	0x40014800
 800c874:	40015000 	.word	0x40015000

0800c878 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c878:	b480      	push	{r7}
 800c87a:	b087      	sub	sp, #28
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6a1b      	ldr	r3, [r3, #32]
 800c886:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6a1b      	ldr	r3, [r3, #32]
 800c88c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c89e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c8a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c8aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	021b      	lsls	r3, r3, #8
 800c8b2:	68fa      	ldr	r2, [r7, #12]
 800c8b4:	4313      	orrs	r3, r2
 800c8b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c8be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	689b      	ldr	r3, [r3, #8]
 800c8c4:	051b      	lsls	r3, r3, #20
 800c8c6:	693a      	ldr	r2, [r7, #16]
 800c8c8:	4313      	orrs	r3, r2
 800c8ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	4a1a      	ldr	r2, [pc, #104]	@ (800c938 <TIM_OC6_SetConfig+0xc0>)
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d013      	beq.n	800c8fc <TIM_OC6_SetConfig+0x84>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	4a19      	ldr	r2, [pc, #100]	@ (800c93c <TIM_OC6_SetConfig+0xc4>)
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d00f      	beq.n	800c8fc <TIM_OC6_SetConfig+0x84>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	4a18      	ldr	r2, [pc, #96]	@ (800c940 <TIM_OC6_SetConfig+0xc8>)
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	d00b      	beq.n	800c8fc <TIM_OC6_SetConfig+0x84>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	4a17      	ldr	r2, [pc, #92]	@ (800c944 <TIM_OC6_SetConfig+0xcc>)
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	d007      	beq.n	800c8fc <TIM_OC6_SetConfig+0x84>
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	4a16      	ldr	r2, [pc, #88]	@ (800c948 <TIM_OC6_SetConfig+0xd0>)
 800c8f0:	4293      	cmp	r3, r2
 800c8f2:	d003      	beq.n	800c8fc <TIM_OC6_SetConfig+0x84>
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	4a15      	ldr	r2, [pc, #84]	@ (800c94c <TIM_OC6_SetConfig+0xd4>)
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d109      	bne.n	800c910 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c902:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	695b      	ldr	r3, [r3, #20]
 800c908:	029b      	lsls	r3, r3, #10
 800c90a:	697a      	ldr	r2, [r7, #20]
 800c90c:	4313      	orrs	r3, r2
 800c90e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	697a      	ldr	r2, [r7, #20]
 800c914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	68fa      	ldr	r2, [r7, #12]
 800c91a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	685a      	ldr	r2, [r3, #4]
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	693a      	ldr	r2, [r7, #16]
 800c928:	621a      	str	r2, [r3, #32]
}
 800c92a:	bf00      	nop
 800c92c:	371c      	adds	r7, #28
 800c92e:	46bd      	mov	sp, r7
 800c930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c934:	4770      	bx	lr
 800c936:	bf00      	nop
 800c938:	40012c00 	.word	0x40012c00
 800c93c:	40013400 	.word	0x40013400
 800c940:	40014000 	.word	0x40014000
 800c944:	40014400 	.word	0x40014400
 800c948:	40014800 	.word	0x40014800
 800c94c:	40015000 	.word	0x40015000

0800c950 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c950:	b480      	push	{r7}
 800c952:	b087      	sub	sp, #28
 800c954:	af00      	add	r7, sp, #0
 800c956:	60f8      	str	r0, [r7, #12]
 800c958:	60b9      	str	r1, [r7, #8]
 800c95a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	6a1b      	ldr	r3, [r3, #32]
 800c960:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	6a1b      	ldr	r3, [r3, #32]
 800c966:	f023 0201 	bic.w	r2, r3, #1
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	699b      	ldr	r3, [r3, #24]
 800c972:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c97a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	011b      	lsls	r3, r3, #4
 800c980:	693a      	ldr	r2, [r7, #16]
 800c982:	4313      	orrs	r3, r2
 800c984:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	f023 030a 	bic.w	r3, r3, #10
 800c98c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c98e:	697a      	ldr	r2, [r7, #20]
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	4313      	orrs	r3, r2
 800c994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	693a      	ldr	r2, [r7, #16]
 800c99a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	697a      	ldr	r2, [r7, #20]
 800c9a0:	621a      	str	r2, [r3, #32]
}
 800c9a2:	bf00      	nop
 800c9a4:	371c      	adds	r7, #28
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ac:	4770      	bx	lr

0800c9ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c9ae:	b480      	push	{r7}
 800c9b0:	b087      	sub	sp, #28
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	60f8      	str	r0, [r7, #12]
 800c9b6:	60b9      	str	r1, [r7, #8]
 800c9b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	6a1b      	ldr	r3, [r3, #32]
 800c9be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	6a1b      	ldr	r3, [r3, #32]
 800c9c4:	f023 0210 	bic.w	r2, r3, #16
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	699b      	ldr	r3, [r3, #24]
 800c9d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c9d2:	693b      	ldr	r3, [r7, #16]
 800c9d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c9d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	031b      	lsls	r3, r3, #12
 800c9de:	693a      	ldr	r2, [r7, #16]
 800c9e0:	4313      	orrs	r3, r2
 800c9e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c9ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	011b      	lsls	r3, r3, #4
 800c9f0:	697a      	ldr	r2, [r7, #20]
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	693a      	ldr	r2, [r7, #16]
 800c9fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	697a      	ldr	r2, [r7, #20]
 800ca00:	621a      	str	r2, [r3, #32]
}
 800ca02:	bf00      	nop
 800ca04:	371c      	adds	r7, #28
 800ca06:	46bd      	mov	sp, r7
 800ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0c:	4770      	bx	lr

0800ca0e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ca0e:	b480      	push	{r7}
 800ca10:	b085      	sub	sp, #20
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	6078      	str	r0, [r7, #4]
 800ca16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	689b      	ldr	r3, [r3, #8]
 800ca1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800ca24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ca2a:	683a      	ldr	r2, [r7, #0]
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	4313      	orrs	r3, r2
 800ca30:	f043 0307 	orr.w	r3, r3, #7
 800ca34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	68fa      	ldr	r2, [r7, #12]
 800ca3a:	609a      	str	r2, [r3, #8]
}
 800ca3c:	bf00      	nop
 800ca3e:	3714      	adds	r7, #20
 800ca40:	46bd      	mov	sp, r7
 800ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca46:	4770      	bx	lr

0800ca48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ca48:	b480      	push	{r7}
 800ca4a:	b087      	sub	sp, #28
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	60f8      	str	r0, [r7, #12]
 800ca50:	60b9      	str	r1, [r7, #8]
 800ca52:	607a      	str	r2, [r7, #4]
 800ca54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	689b      	ldr	r3, [r3, #8]
 800ca5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ca62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	021a      	lsls	r2, r3, #8
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	431a      	orrs	r2, r3
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	4313      	orrs	r3, r2
 800ca70:	697a      	ldr	r2, [r7, #20]
 800ca72:	4313      	orrs	r3, r2
 800ca74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	697a      	ldr	r2, [r7, #20]
 800ca7a:	609a      	str	r2, [r3, #8]
}
 800ca7c:	bf00      	nop
 800ca7e:	371c      	adds	r7, #28
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr

0800ca88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b087      	sub	sp, #28
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	60f8      	str	r0, [r7, #12]
 800ca90:	60b9      	str	r1, [r7, #8]
 800ca92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	f003 031f 	and.w	r3, r3, #31
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	fa02 f303 	lsl.w	r3, r2, r3
 800caa0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	6a1a      	ldr	r2, [r3, #32]
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	43db      	mvns	r3, r3
 800caaa:	401a      	ands	r2, r3
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	6a1a      	ldr	r2, [r3, #32]
 800cab4:	68bb      	ldr	r3, [r7, #8]
 800cab6:	f003 031f 	and.w	r3, r3, #31
 800caba:	6879      	ldr	r1, [r7, #4]
 800cabc:	fa01 f303 	lsl.w	r3, r1, r3
 800cac0:	431a      	orrs	r2, r3
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	621a      	str	r2, [r3, #32]
}
 800cac6:	bf00      	nop
 800cac8:	371c      	adds	r7, #28
 800caca:	46bd      	mov	sp, r7
 800cacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad0:	4770      	bx	lr
	...

0800cad4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cad4:	b480      	push	{r7}
 800cad6:	b085      	sub	sp, #20
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cae4:	2b01      	cmp	r3, #1
 800cae6:	d101      	bne.n	800caec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cae8:	2302      	movs	r3, #2
 800caea:	e074      	b.n	800cbd6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2201      	movs	r2, #1
 800caf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2202      	movs	r2, #2
 800caf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	689b      	ldr	r3, [r3, #8]
 800cb0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4a34      	ldr	r2, [pc, #208]	@ (800cbe4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cb12:	4293      	cmp	r3, r2
 800cb14:	d009      	beq.n	800cb2a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	4a33      	ldr	r2, [pc, #204]	@ (800cbe8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cb1c:	4293      	cmp	r3, r2
 800cb1e:	d004      	beq.n	800cb2a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	4a31      	ldr	r2, [pc, #196]	@ (800cbec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d108      	bne.n	800cb3c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800cb30:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	685b      	ldr	r3, [r3, #4]
 800cb36:	68fa      	ldr	r2, [r7, #12]
 800cb38:	4313      	orrs	r3, r2
 800cb3a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800cb42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	68fa      	ldr	r2, [r7, #12]
 800cb4e:	4313      	orrs	r3, r2
 800cb50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	68fa      	ldr	r2, [r7, #12]
 800cb58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	4a21      	ldr	r2, [pc, #132]	@ (800cbe4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d022      	beq.n	800cbaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb6c:	d01d      	beq.n	800cbaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	4a1f      	ldr	r2, [pc, #124]	@ (800cbf0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800cb74:	4293      	cmp	r3, r2
 800cb76:	d018      	beq.n	800cbaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	4a1d      	ldr	r2, [pc, #116]	@ (800cbf4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	d013      	beq.n	800cbaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	4a1c      	ldr	r2, [pc, #112]	@ (800cbf8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800cb88:	4293      	cmp	r3, r2
 800cb8a:	d00e      	beq.n	800cbaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	4a15      	ldr	r2, [pc, #84]	@ (800cbe8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d009      	beq.n	800cbaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	4a18      	ldr	r2, [pc, #96]	@ (800cbfc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	d004      	beq.n	800cbaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	4a11      	ldr	r2, [pc, #68]	@ (800cbec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d10c      	bne.n	800cbc4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cbb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	689b      	ldr	r3, [r3, #8]
 800cbb6:	68ba      	ldr	r2, [r7, #8]
 800cbb8:	4313      	orrs	r3, r2
 800cbba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	68ba      	ldr	r2, [r7, #8]
 800cbc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2201      	movs	r2, #1
 800cbc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cbd4:	2300      	movs	r3, #0
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3714      	adds	r7, #20
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe0:	4770      	bx	lr
 800cbe2:	bf00      	nop
 800cbe4:	40012c00 	.word	0x40012c00
 800cbe8:	40013400 	.word	0x40013400
 800cbec:	40015000 	.word	0x40015000
 800cbf0:	40000400 	.word	0x40000400
 800cbf4:	40000800 	.word	0x40000800
 800cbf8:	40000c00 	.word	0x40000c00
 800cbfc:	40014000 	.word	0x40014000

0800cc00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cc00:	b480      	push	{r7}
 800cc02:	b085      	sub	sp, #20
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
 800cc08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cc14:	2b01      	cmp	r3, #1
 800cc16:	d101      	bne.n	800cc1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cc18:	2302      	movs	r3, #2
 800cc1a:	e078      	b.n	800cd0e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2201      	movs	r2, #1
 800cc20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	68db      	ldr	r3, [r3, #12]
 800cc2e:	4313      	orrs	r3, r2
 800cc30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	689b      	ldr	r3, [r3, #8]
 800cc3c:	4313      	orrs	r3, r2
 800cc3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	685b      	ldr	r3, [r3, #4]
 800cc4a:	4313      	orrs	r3, r2
 800cc4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	4313      	orrs	r3, r2
 800cc5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	691b      	ldr	r3, [r3, #16]
 800cc66:	4313      	orrs	r3, r2
 800cc68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	695b      	ldr	r3, [r3, #20]
 800cc74:	4313      	orrs	r3, r2
 800cc76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc82:	4313      	orrs	r3, r2
 800cc84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	699b      	ldr	r3, [r3, #24]
 800cc90:	041b      	lsls	r3, r3, #16
 800cc92:	4313      	orrs	r3, r2
 800cc94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	69db      	ldr	r3, [r3, #28]
 800cca0:	4313      	orrs	r3, r2
 800cca2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	4a1c      	ldr	r2, [pc, #112]	@ (800cd1c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d009      	beq.n	800ccc2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	4a1b      	ldr	r2, [pc, #108]	@ (800cd20 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d004      	beq.n	800ccc2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	4a19      	ldr	r2, [pc, #100]	@ (800cd24 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d11c      	bne.n	800ccfc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cccc:	051b      	lsls	r3, r3, #20
 800ccce:	4313      	orrs	r3, r2
 800ccd0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	6a1b      	ldr	r3, [r3, #32]
 800ccdc:	4313      	orrs	r3, r2
 800ccde:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccea:	4313      	orrs	r3, r2
 800ccec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccf8:	4313      	orrs	r3, r2
 800ccfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	68fa      	ldr	r2, [r7, #12]
 800cd02:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2200      	movs	r2, #0
 800cd08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cd0c:	2300      	movs	r3, #0
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3714      	adds	r7, #20
 800cd12:	46bd      	mov	sp, r7
 800cd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd18:	4770      	bx	lr
 800cd1a:	bf00      	nop
 800cd1c:	40012c00 	.word	0x40012c00
 800cd20:	40013400 	.word	0x40013400
 800cd24:	40015000 	.word	0x40015000

0800cd28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b082      	sub	sp, #8
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d101      	bne.n	800cd3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cd36:	2301      	movs	r3, #1
 800cd38:	e042      	b.n	800cdc0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d106      	bne.n	800cd52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2200      	movs	r2, #0
 800cd48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f7f6 fc8b 	bl	8003668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2224      	movs	r2, #36	@ 0x24
 800cd56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	681a      	ldr	r2, [r3, #0]
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	f022 0201 	bic.w	r2, r2, #1
 800cd68:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d002      	beq.n	800cd78 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f000 fbb2 	bl	800d4dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f000 f8b3 	bl	800cee4 <UART_SetConfig>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	2b01      	cmp	r3, #1
 800cd82:	d101      	bne.n	800cd88 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800cd84:	2301      	movs	r3, #1
 800cd86:	e01b      	b.n	800cdc0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	685a      	ldr	r2, [r3, #4]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cd96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	689a      	ldr	r2, [r3, #8]
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cda6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	681a      	ldr	r2, [r3, #0]
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f042 0201 	orr.w	r2, r2, #1
 800cdb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f000 fc31 	bl	800d620 <UART_CheckIdleState>
 800cdbe:	4603      	mov	r3, r0
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3708      	adds	r7, #8
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}

0800cdc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b08a      	sub	sp, #40	@ 0x28
 800cdcc:	af02      	add	r7, sp, #8
 800cdce:	60f8      	str	r0, [r7, #12]
 800cdd0:	60b9      	str	r1, [r7, #8]
 800cdd2:	603b      	str	r3, [r7, #0]
 800cdd4:	4613      	mov	r3, r2
 800cdd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cdde:	2b20      	cmp	r3, #32
 800cde0:	d17b      	bne.n	800ceda <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d002      	beq.n	800cdee <HAL_UART_Transmit+0x26>
 800cde8:	88fb      	ldrh	r3, [r7, #6]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d101      	bne.n	800cdf2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800cdee:	2301      	movs	r3, #1
 800cdf0:	e074      	b.n	800cedc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	2221      	movs	r2, #33	@ 0x21
 800cdfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ce02:	f7f7 fabf 	bl	8004384 <HAL_GetTick>
 800ce06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	88fa      	ldrh	r2, [r7, #6]
 800ce0c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	88fa      	ldrh	r2, [r7, #6]
 800ce14:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	689b      	ldr	r3, [r3, #8]
 800ce1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ce20:	d108      	bne.n	800ce34 <HAL_UART_Transmit+0x6c>
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	691b      	ldr	r3, [r3, #16]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d104      	bne.n	800ce34 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	61bb      	str	r3, [r7, #24]
 800ce32:	e003      	b.n	800ce3c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ce38:	2300      	movs	r3, #0
 800ce3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ce3c:	e030      	b.n	800cea0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	9300      	str	r3, [sp, #0]
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	2200      	movs	r2, #0
 800ce46:	2180      	movs	r1, #128	@ 0x80
 800ce48:	68f8      	ldr	r0, [r7, #12]
 800ce4a:	f000 fc93 	bl	800d774 <UART_WaitOnFlagUntilTimeout>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d005      	beq.n	800ce60 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	2220      	movs	r2, #32
 800ce58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ce5c:	2303      	movs	r3, #3
 800ce5e:	e03d      	b.n	800cedc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ce60:	69fb      	ldr	r3, [r7, #28]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d10b      	bne.n	800ce7e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ce66:	69bb      	ldr	r3, [r7, #24]
 800ce68:	881b      	ldrh	r3, [r3, #0]
 800ce6a:	461a      	mov	r2, r3
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ce74:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ce76:	69bb      	ldr	r3, [r7, #24]
 800ce78:	3302      	adds	r3, #2
 800ce7a:	61bb      	str	r3, [r7, #24]
 800ce7c:	e007      	b.n	800ce8e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ce7e:	69fb      	ldr	r3, [r7, #28]
 800ce80:	781a      	ldrb	r2, [r3, #0]
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ce88:	69fb      	ldr	r3, [r7, #28]
 800ce8a:	3301      	adds	r3, #1
 800ce8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ce94:	b29b      	uxth	r3, r3
 800ce96:	3b01      	subs	r3, #1
 800ce98:	b29a      	uxth	r2, r3
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cea6:	b29b      	uxth	r3, r3
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d1c8      	bne.n	800ce3e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	9300      	str	r3, [sp, #0]
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	2140      	movs	r1, #64	@ 0x40
 800ceb6:	68f8      	ldr	r0, [r7, #12]
 800ceb8:	f000 fc5c 	bl	800d774 <UART_WaitOnFlagUntilTimeout>
 800cebc:	4603      	mov	r3, r0
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d005      	beq.n	800cece <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	2220      	movs	r2, #32
 800cec6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800ceca:	2303      	movs	r3, #3
 800cecc:	e006      	b.n	800cedc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2220      	movs	r2, #32
 800ced2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800ced6:	2300      	movs	r3, #0
 800ced8:	e000      	b.n	800cedc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ceda:	2302      	movs	r3, #2
  }
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3720      	adds	r7, #32
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}

0800cee4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cee8:	b08c      	sub	sp, #48	@ 0x30
 800ceea:	af00      	add	r7, sp, #0
 800ceec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ceee:	2300      	movs	r3, #0
 800cef0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	689a      	ldr	r2, [r3, #8]
 800cef8:	697b      	ldr	r3, [r7, #20]
 800cefa:	691b      	ldr	r3, [r3, #16]
 800cefc:	431a      	orrs	r2, r3
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	695b      	ldr	r3, [r3, #20]
 800cf02:	431a      	orrs	r2, r3
 800cf04:	697b      	ldr	r3, [r7, #20]
 800cf06:	69db      	ldr	r3, [r3, #28]
 800cf08:	4313      	orrs	r3, r2
 800cf0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	681a      	ldr	r2, [r3, #0]
 800cf12:	4baa      	ldr	r3, [pc, #680]	@ (800d1bc <UART_SetConfig+0x2d8>)
 800cf14:	4013      	ands	r3, r2
 800cf16:	697a      	ldr	r2, [r7, #20]
 800cf18:	6812      	ldr	r2, [r2, #0]
 800cf1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cf1c:	430b      	orrs	r3, r1
 800cf1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	685b      	ldr	r3, [r3, #4]
 800cf26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	68da      	ldr	r2, [r3, #12]
 800cf2e:	697b      	ldr	r3, [r7, #20]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	430a      	orrs	r2, r1
 800cf34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cf36:	697b      	ldr	r3, [r7, #20]
 800cf38:	699b      	ldr	r3, [r3, #24]
 800cf3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	4a9f      	ldr	r2, [pc, #636]	@ (800d1c0 <UART_SetConfig+0x2dc>)
 800cf42:	4293      	cmp	r3, r2
 800cf44:	d004      	beq.n	800cf50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	6a1b      	ldr	r3, [r3, #32]
 800cf4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cf4c:	4313      	orrs	r3, r2
 800cf4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cf50:	697b      	ldr	r3, [r7, #20]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	689b      	ldr	r3, [r3, #8]
 800cf56:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800cf5a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800cf5e:	697a      	ldr	r2, [r7, #20]
 800cf60:	6812      	ldr	r2, [r2, #0]
 800cf62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cf64:	430b      	orrs	r3, r1
 800cf66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cf68:	697b      	ldr	r3, [r7, #20]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf6e:	f023 010f 	bic.w	r1, r3, #15
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	430a      	orrs	r2, r1
 800cf7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	4a90      	ldr	r2, [pc, #576]	@ (800d1c4 <UART_SetConfig+0x2e0>)
 800cf84:	4293      	cmp	r3, r2
 800cf86:	d125      	bne.n	800cfd4 <UART_SetConfig+0xf0>
 800cf88:	4b8f      	ldr	r3, [pc, #572]	@ (800d1c8 <UART_SetConfig+0x2e4>)
 800cf8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf8e:	f003 0303 	and.w	r3, r3, #3
 800cf92:	2b03      	cmp	r3, #3
 800cf94:	d81a      	bhi.n	800cfcc <UART_SetConfig+0xe8>
 800cf96:	a201      	add	r2, pc, #4	@ (adr r2, 800cf9c <UART_SetConfig+0xb8>)
 800cf98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf9c:	0800cfad 	.word	0x0800cfad
 800cfa0:	0800cfbd 	.word	0x0800cfbd
 800cfa4:	0800cfb5 	.word	0x0800cfb5
 800cfa8:	0800cfc5 	.word	0x0800cfc5
 800cfac:	2301      	movs	r3, #1
 800cfae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfb2:	e116      	b.n	800d1e2 <UART_SetConfig+0x2fe>
 800cfb4:	2302      	movs	r3, #2
 800cfb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfba:	e112      	b.n	800d1e2 <UART_SetConfig+0x2fe>
 800cfbc:	2304      	movs	r3, #4
 800cfbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfc2:	e10e      	b.n	800d1e2 <UART_SetConfig+0x2fe>
 800cfc4:	2308      	movs	r3, #8
 800cfc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfca:	e10a      	b.n	800d1e2 <UART_SetConfig+0x2fe>
 800cfcc:	2310      	movs	r3, #16
 800cfce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfd2:	e106      	b.n	800d1e2 <UART_SetConfig+0x2fe>
 800cfd4:	697b      	ldr	r3, [r7, #20]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	4a7c      	ldr	r2, [pc, #496]	@ (800d1cc <UART_SetConfig+0x2e8>)
 800cfda:	4293      	cmp	r3, r2
 800cfdc:	d138      	bne.n	800d050 <UART_SetConfig+0x16c>
 800cfde:	4b7a      	ldr	r3, [pc, #488]	@ (800d1c8 <UART_SetConfig+0x2e4>)
 800cfe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cfe4:	f003 030c 	and.w	r3, r3, #12
 800cfe8:	2b0c      	cmp	r3, #12
 800cfea:	d82d      	bhi.n	800d048 <UART_SetConfig+0x164>
 800cfec:	a201      	add	r2, pc, #4	@ (adr r2, 800cff4 <UART_SetConfig+0x110>)
 800cfee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cff2:	bf00      	nop
 800cff4:	0800d029 	.word	0x0800d029
 800cff8:	0800d049 	.word	0x0800d049
 800cffc:	0800d049 	.word	0x0800d049
 800d000:	0800d049 	.word	0x0800d049
 800d004:	0800d039 	.word	0x0800d039
 800d008:	0800d049 	.word	0x0800d049
 800d00c:	0800d049 	.word	0x0800d049
 800d010:	0800d049 	.word	0x0800d049
 800d014:	0800d031 	.word	0x0800d031
 800d018:	0800d049 	.word	0x0800d049
 800d01c:	0800d049 	.word	0x0800d049
 800d020:	0800d049 	.word	0x0800d049
 800d024:	0800d041 	.word	0x0800d041
 800d028:	2300      	movs	r3, #0
 800d02a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d02e:	e0d8      	b.n	800d1e2 <UART_SetConfig+0x2fe>
 800d030:	2302      	movs	r3, #2
 800d032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d036:	e0d4      	b.n	800d1e2 <UART_SetConfig+0x2fe>
 800d038:	2304      	movs	r3, #4
 800d03a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d03e:	e0d0      	b.n	800d1e2 <UART_SetConfig+0x2fe>
 800d040:	2308      	movs	r3, #8
 800d042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d046:	e0cc      	b.n	800d1e2 <UART_SetConfig+0x2fe>
 800d048:	2310      	movs	r3, #16
 800d04a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d04e:	e0c8      	b.n	800d1e2 <UART_SetConfig+0x2fe>
 800d050:	697b      	ldr	r3, [r7, #20]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	4a5e      	ldr	r2, [pc, #376]	@ (800d1d0 <UART_SetConfig+0x2ec>)
 800d056:	4293      	cmp	r3, r2
 800d058:	d125      	bne.n	800d0a6 <UART_SetConfig+0x1c2>
 800d05a:	4b5b      	ldr	r3, [pc, #364]	@ (800d1c8 <UART_SetConfig+0x2e4>)
 800d05c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d060:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d064:	2b30      	cmp	r3, #48	@ 0x30
 800d066:	d016      	beq.n	800d096 <UART_SetConfig+0x1b2>
 800d068:	2b30      	cmp	r3, #48	@ 0x30
 800d06a:	d818      	bhi.n	800d09e <UART_SetConfig+0x1ba>
 800d06c:	2b20      	cmp	r3, #32
 800d06e:	d00a      	beq.n	800d086 <UART_SetConfig+0x1a2>
 800d070:	2b20      	cmp	r3, #32
 800d072:	d814      	bhi.n	800d09e <UART_SetConfig+0x1ba>
 800d074:	2b00      	cmp	r3, #0
 800d076:	d002      	beq.n	800d07e <UART_SetConfig+0x19a>
 800d078:	2b10      	cmp	r3, #16
 800d07a:	d008      	beq.n	800d08e <UART_SetConfig+0x1aa>
 800d07c:	e00f      	b.n	800d09e <UART_SetConfig+0x1ba>
 800d07e:	2300      	movs	r3, #0
 800d080:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d084:	e0ad      	b.n	800d1e2 <UART_SetConfig+0x2fe>
 800d086:	2302      	movs	r3, #2
 800d088:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d08c:	e0a9      	b.n	800d1e2 <UART_SetConfig+0x2fe>
 800d08e:	2304      	movs	r3, #4
 800d090:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d094:	e0a5      	b.n	800d1e2 <UART_SetConfig+0x2fe>
 800d096:	2308      	movs	r3, #8
 800d098:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d09c:	e0a1      	b.n	800d1e2 <UART_SetConfig+0x2fe>
 800d09e:	2310      	movs	r3, #16
 800d0a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d0a4:	e09d      	b.n	800d1e2 <UART_SetConfig+0x2fe>
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	4a4a      	ldr	r2, [pc, #296]	@ (800d1d4 <UART_SetConfig+0x2f0>)
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d125      	bne.n	800d0fc <UART_SetConfig+0x218>
 800d0b0:	4b45      	ldr	r3, [pc, #276]	@ (800d1c8 <UART_SetConfig+0x2e4>)
 800d0b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d0b6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d0ba:	2bc0      	cmp	r3, #192	@ 0xc0
 800d0bc:	d016      	beq.n	800d0ec <UART_SetConfig+0x208>
 800d0be:	2bc0      	cmp	r3, #192	@ 0xc0
 800d0c0:	d818      	bhi.n	800d0f4 <UART_SetConfig+0x210>
 800d0c2:	2b80      	cmp	r3, #128	@ 0x80
 800d0c4:	d00a      	beq.n	800d0dc <UART_SetConfig+0x1f8>
 800d0c6:	2b80      	cmp	r3, #128	@ 0x80
 800d0c8:	d814      	bhi.n	800d0f4 <UART_SetConfig+0x210>
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d002      	beq.n	800d0d4 <UART_SetConfig+0x1f0>
 800d0ce:	2b40      	cmp	r3, #64	@ 0x40
 800d0d0:	d008      	beq.n	800d0e4 <UART_SetConfig+0x200>
 800d0d2:	e00f      	b.n	800d0f4 <UART_SetConfig+0x210>
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d0da:	e082      	b.n	800d1e2 <UART_SetConfig+0x2fe>
 800d0dc:	2302      	movs	r3, #2
 800d0de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d0e2:	e07e      	b.n	800d1e2 <UART_SetConfig+0x2fe>
 800d0e4:	2304      	movs	r3, #4
 800d0e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d0ea:	e07a      	b.n	800d1e2 <UART_SetConfig+0x2fe>
 800d0ec:	2308      	movs	r3, #8
 800d0ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d0f2:	e076      	b.n	800d1e2 <UART_SetConfig+0x2fe>
 800d0f4:	2310      	movs	r3, #16
 800d0f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d0fa:	e072      	b.n	800d1e2 <UART_SetConfig+0x2fe>
 800d0fc:	697b      	ldr	r3, [r7, #20]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	4a35      	ldr	r2, [pc, #212]	@ (800d1d8 <UART_SetConfig+0x2f4>)
 800d102:	4293      	cmp	r3, r2
 800d104:	d12a      	bne.n	800d15c <UART_SetConfig+0x278>
 800d106:	4b30      	ldr	r3, [pc, #192]	@ (800d1c8 <UART_SetConfig+0x2e4>)
 800d108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d10c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d110:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d114:	d01a      	beq.n	800d14c <UART_SetConfig+0x268>
 800d116:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d11a:	d81b      	bhi.n	800d154 <UART_SetConfig+0x270>
 800d11c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d120:	d00c      	beq.n	800d13c <UART_SetConfig+0x258>
 800d122:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d126:	d815      	bhi.n	800d154 <UART_SetConfig+0x270>
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d003      	beq.n	800d134 <UART_SetConfig+0x250>
 800d12c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d130:	d008      	beq.n	800d144 <UART_SetConfig+0x260>
 800d132:	e00f      	b.n	800d154 <UART_SetConfig+0x270>
 800d134:	2300      	movs	r3, #0
 800d136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d13a:	e052      	b.n	800d1e2 <UART_SetConfig+0x2fe>
 800d13c:	2302      	movs	r3, #2
 800d13e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d142:	e04e      	b.n	800d1e2 <UART_SetConfig+0x2fe>
 800d144:	2304      	movs	r3, #4
 800d146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d14a:	e04a      	b.n	800d1e2 <UART_SetConfig+0x2fe>
 800d14c:	2308      	movs	r3, #8
 800d14e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d152:	e046      	b.n	800d1e2 <UART_SetConfig+0x2fe>
 800d154:	2310      	movs	r3, #16
 800d156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d15a:	e042      	b.n	800d1e2 <UART_SetConfig+0x2fe>
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	4a17      	ldr	r2, [pc, #92]	@ (800d1c0 <UART_SetConfig+0x2dc>)
 800d162:	4293      	cmp	r3, r2
 800d164:	d13a      	bne.n	800d1dc <UART_SetConfig+0x2f8>
 800d166:	4b18      	ldr	r3, [pc, #96]	@ (800d1c8 <UART_SetConfig+0x2e4>)
 800d168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d16c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d170:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d174:	d01a      	beq.n	800d1ac <UART_SetConfig+0x2c8>
 800d176:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d17a:	d81b      	bhi.n	800d1b4 <UART_SetConfig+0x2d0>
 800d17c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d180:	d00c      	beq.n	800d19c <UART_SetConfig+0x2b8>
 800d182:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d186:	d815      	bhi.n	800d1b4 <UART_SetConfig+0x2d0>
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d003      	beq.n	800d194 <UART_SetConfig+0x2b0>
 800d18c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d190:	d008      	beq.n	800d1a4 <UART_SetConfig+0x2c0>
 800d192:	e00f      	b.n	800d1b4 <UART_SetConfig+0x2d0>
 800d194:	2300      	movs	r3, #0
 800d196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d19a:	e022      	b.n	800d1e2 <UART_SetConfig+0x2fe>
 800d19c:	2302      	movs	r3, #2
 800d19e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d1a2:	e01e      	b.n	800d1e2 <UART_SetConfig+0x2fe>
 800d1a4:	2304      	movs	r3, #4
 800d1a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d1aa:	e01a      	b.n	800d1e2 <UART_SetConfig+0x2fe>
 800d1ac:	2308      	movs	r3, #8
 800d1ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d1b2:	e016      	b.n	800d1e2 <UART_SetConfig+0x2fe>
 800d1b4:	2310      	movs	r3, #16
 800d1b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d1ba:	e012      	b.n	800d1e2 <UART_SetConfig+0x2fe>
 800d1bc:	cfff69f3 	.word	0xcfff69f3
 800d1c0:	40008000 	.word	0x40008000
 800d1c4:	40013800 	.word	0x40013800
 800d1c8:	40021000 	.word	0x40021000
 800d1cc:	40004400 	.word	0x40004400
 800d1d0:	40004800 	.word	0x40004800
 800d1d4:	40004c00 	.word	0x40004c00
 800d1d8:	40005000 	.word	0x40005000
 800d1dc:	2310      	movs	r3, #16
 800d1de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	4aae      	ldr	r2, [pc, #696]	@ (800d4a0 <UART_SetConfig+0x5bc>)
 800d1e8:	4293      	cmp	r3, r2
 800d1ea:	f040 8097 	bne.w	800d31c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d1ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d1f2:	2b08      	cmp	r3, #8
 800d1f4:	d823      	bhi.n	800d23e <UART_SetConfig+0x35a>
 800d1f6:	a201      	add	r2, pc, #4	@ (adr r2, 800d1fc <UART_SetConfig+0x318>)
 800d1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1fc:	0800d221 	.word	0x0800d221
 800d200:	0800d23f 	.word	0x0800d23f
 800d204:	0800d229 	.word	0x0800d229
 800d208:	0800d23f 	.word	0x0800d23f
 800d20c:	0800d22f 	.word	0x0800d22f
 800d210:	0800d23f 	.word	0x0800d23f
 800d214:	0800d23f 	.word	0x0800d23f
 800d218:	0800d23f 	.word	0x0800d23f
 800d21c:	0800d237 	.word	0x0800d237
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d220:	f7fc ff02 	bl	800a028 <HAL_RCC_GetPCLK1Freq>
 800d224:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d226:	e010      	b.n	800d24a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d228:	4b9e      	ldr	r3, [pc, #632]	@ (800d4a4 <UART_SetConfig+0x5c0>)
 800d22a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d22c:	e00d      	b.n	800d24a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d22e:	f7fc fe8d 	bl	8009f4c <HAL_RCC_GetSysClockFreq>
 800d232:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d234:	e009      	b.n	800d24a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d236:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d23a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d23c:	e005      	b.n	800d24a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800d23e:	2300      	movs	r3, #0
 800d240:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d242:	2301      	movs	r3, #1
 800d244:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d248:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	f000 8130 	beq.w	800d4b2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d256:	4a94      	ldr	r2, [pc, #592]	@ (800d4a8 <UART_SetConfig+0x5c4>)
 800d258:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d25c:	461a      	mov	r2, r3
 800d25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d260:	fbb3 f3f2 	udiv	r3, r3, r2
 800d264:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	685a      	ldr	r2, [r3, #4]
 800d26a:	4613      	mov	r3, r2
 800d26c:	005b      	lsls	r3, r3, #1
 800d26e:	4413      	add	r3, r2
 800d270:	69ba      	ldr	r2, [r7, #24]
 800d272:	429a      	cmp	r2, r3
 800d274:	d305      	bcc.n	800d282 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d276:	697b      	ldr	r3, [r7, #20]
 800d278:	685b      	ldr	r3, [r3, #4]
 800d27a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d27c:	69ba      	ldr	r2, [r7, #24]
 800d27e:	429a      	cmp	r2, r3
 800d280:	d903      	bls.n	800d28a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800d282:	2301      	movs	r3, #1
 800d284:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d288:	e113      	b.n	800d4b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d28c:	2200      	movs	r2, #0
 800d28e:	60bb      	str	r3, [r7, #8]
 800d290:	60fa      	str	r2, [r7, #12]
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d296:	4a84      	ldr	r2, [pc, #528]	@ (800d4a8 <UART_SetConfig+0x5c4>)
 800d298:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d29c:	b29b      	uxth	r3, r3
 800d29e:	2200      	movs	r2, #0
 800d2a0:	603b      	str	r3, [r7, #0]
 800d2a2:	607a      	str	r2, [r7, #4]
 800d2a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d2ac:	f7f3 fd14 	bl	8000cd8 <__aeabi_uldivmod>
 800d2b0:	4602      	mov	r2, r0
 800d2b2:	460b      	mov	r3, r1
 800d2b4:	4610      	mov	r0, r2
 800d2b6:	4619      	mov	r1, r3
 800d2b8:	f04f 0200 	mov.w	r2, #0
 800d2bc:	f04f 0300 	mov.w	r3, #0
 800d2c0:	020b      	lsls	r3, r1, #8
 800d2c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d2c6:	0202      	lsls	r2, r0, #8
 800d2c8:	6979      	ldr	r1, [r7, #20]
 800d2ca:	6849      	ldr	r1, [r1, #4]
 800d2cc:	0849      	lsrs	r1, r1, #1
 800d2ce:	2000      	movs	r0, #0
 800d2d0:	460c      	mov	r4, r1
 800d2d2:	4605      	mov	r5, r0
 800d2d4:	eb12 0804 	adds.w	r8, r2, r4
 800d2d8:	eb43 0905 	adc.w	r9, r3, r5
 800d2dc:	697b      	ldr	r3, [r7, #20]
 800d2de:	685b      	ldr	r3, [r3, #4]
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	469a      	mov	sl, r3
 800d2e4:	4693      	mov	fp, r2
 800d2e6:	4652      	mov	r2, sl
 800d2e8:	465b      	mov	r3, fp
 800d2ea:	4640      	mov	r0, r8
 800d2ec:	4649      	mov	r1, r9
 800d2ee:	f7f3 fcf3 	bl	8000cd8 <__aeabi_uldivmod>
 800d2f2:	4602      	mov	r2, r0
 800d2f4:	460b      	mov	r3, r1
 800d2f6:	4613      	mov	r3, r2
 800d2f8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d2fa:	6a3b      	ldr	r3, [r7, #32]
 800d2fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d300:	d308      	bcc.n	800d314 <UART_SetConfig+0x430>
 800d302:	6a3b      	ldr	r3, [r7, #32]
 800d304:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d308:	d204      	bcs.n	800d314 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	6a3a      	ldr	r2, [r7, #32]
 800d310:	60da      	str	r2, [r3, #12]
 800d312:	e0ce      	b.n	800d4b2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800d314:	2301      	movs	r3, #1
 800d316:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d31a:	e0ca      	b.n	800d4b2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	69db      	ldr	r3, [r3, #28]
 800d320:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d324:	d166      	bne.n	800d3f4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800d326:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d32a:	2b08      	cmp	r3, #8
 800d32c:	d827      	bhi.n	800d37e <UART_SetConfig+0x49a>
 800d32e:	a201      	add	r2, pc, #4	@ (adr r2, 800d334 <UART_SetConfig+0x450>)
 800d330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d334:	0800d359 	.word	0x0800d359
 800d338:	0800d361 	.word	0x0800d361
 800d33c:	0800d369 	.word	0x0800d369
 800d340:	0800d37f 	.word	0x0800d37f
 800d344:	0800d36f 	.word	0x0800d36f
 800d348:	0800d37f 	.word	0x0800d37f
 800d34c:	0800d37f 	.word	0x0800d37f
 800d350:	0800d37f 	.word	0x0800d37f
 800d354:	0800d377 	.word	0x0800d377
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d358:	f7fc fe66 	bl	800a028 <HAL_RCC_GetPCLK1Freq>
 800d35c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d35e:	e014      	b.n	800d38a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d360:	f7fc fe78 	bl	800a054 <HAL_RCC_GetPCLK2Freq>
 800d364:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d366:	e010      	b.n	800d38a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d368:	4b4e      	ldr	r3, [pc, #312]	@ (800d4a4 <UART_SetConfig+0x5c0>)
 800d36a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d36c:	e00d      	b.n	800d38a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d36e:	f7fc fded 	bl	8009f4c <HAL_RCC_GetSysClockFreq>
 800d372:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d374:	e009      	b.n	800d38a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d376:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d37a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d37c:	e005      	b.n	800d38a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800d37e:	2300      	movs	r3, #0
 800d380:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d382:	2301      	movs	r3, #1
 800d384:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d388:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	f000 8090 	beq.w	800d4b2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d392:	697b      	ldr	r3, [r7, #20]
 800d394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d396:	4a44      	ldr	r2, [pc, #272]	@ (800d4a8 <UART_SetConfig+0x5c4>)
 800d398:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d39c:	461a      	mov	r2, r3
 800d39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800d3a4:	005a      	lsls	r2, r3, #1
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	685b      	ldr	r3, [r3, #4]
 800d3aa:	085b      	lsrs	r3, r3, #1
 800d3ac:	441a      	add	r2, r3
 800d3ae:	697b      	ldr	r3, [r7, #20]
 800d3b0:	685b      	ldr	r3, [r3, #4]
 800d3b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d3b8:	6a3b      	ldr	r3, [r7, #32]
 800d3ba:	2b0f      	cmp	r3, #15
 800d3bc:	d916      	bls.n	800d3ec <UART_SetConfig+0x508>
 800d3be:	6a3b      	ldr	r3, [r7, #32]
 800d3c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d3c4:	d212      	bcs.n	800d3ec <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d3c6:	6a3b      	ldr	r3, [r7, #32]
 800d3c8:	b29b      	uxth	r3, r3
 800d3ca:	f023 030f 	bic.w	r3, r3, #15
 800d3ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d3d0:	6a3b      	ldr	r3, [r7, #32]
 800d3d2:	085b      	lsrs	r3, r3, #1
 800d3d4:	b29b      	uxth	r3, r3
 800d3d6:	f003 0307 	and.w	r3, r3, #7
 800d3da:	b29a      	uxth	r2, r3
 800d3dc:	8bfb      	ldrh	r3, [r7, #30]
 800d3de:	4313      	orrs	r3, r2
 800d3e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	8bfa      	ldrh	r2, [r7, #30]
 800d3e8:	60da      	str	r2, [r3, #12]
 800d3ea:	e062      	b.n	800d4b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d3f2:	e05e      	b.n	800d4b2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d3f4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d3f8:	2b08      	cmp	r3, #8
 800d3fa:	d828      	bhi.n	800d44e <UART_SetConfig+0x56a>
 800d3fc:	a201      	add	r2, pc, #4	@ (adr r2, 800d404 <UART_SetConfig+0x520>)
 800d3fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d402:	bf00      	nop
 800d404:	0800d429 	.word	0x0800d429
 800d408:	0800d431 	.word	0x0800d431
 800d40c:	0800d439 	.word	0x0800d439
 800d410:	0800d44f 	.word	0x0800d44f
 800d414:	0800d43f 	.word	0x0800d43f
 800d418:	0800d44f 	.word	0x0800d44f
 800d41c:	0800d44f 	.word	0x0800d44f
 800d420:	0800d44f 	.word	0x0800d44f
 800d424:	0800d447 	.word	0x0800d447
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d428:	f7fc fdfe 	bl	800a028 <HAL_RCC_GetPCLK1Freq>
 800d42c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d42e:	e014      	b.n	800d45a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d430:	f7fc fe10 	bl	800a054 <HAL_RCC_GetPCLK2Freq>
 800d434:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d436:	e010      	b.n	800d45a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d438:	4b1a      	ldr	r3, [pc, #104]	@ (800d4a4 <UART_SetConfig+0x5c0>)
 800d43a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d43c:	e00d      	b.n	800d45a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d43e:	f7fc fd85 	bl	8009f4c <HAL_RCC_GetSysClockFreq>
 800d442:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d444:	e009      	b.n	800d45a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d446:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d44a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d44c:	e005      	b.n	800d45a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800d44e:	2300      	movs	r3, #0
 800d450:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d452:	2301      	movs	r3, #1
 800d454:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d458:	bf00      	nop
    }

    if (pclk != 0U)
 800d45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d028      	beq.n	800d4b2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d460:	697b      	ldr	r3, [r7, #20]
 800d462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d464:	4a10      	ldr	r2, [pc, #64]	@ (800d4a8 <UART_SetConfig+0x5c4>)
 800d466:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d46a:	461a      	mov	r2, r3
 800d46c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d46e:	fbb3 f2f2 	udiv	r2, r3, r2
 800d472:	697b      	ldr	r3, [r7, #20]
 800d474:	685b      	ldr	r3, [r3, #4]
 800d476:	085b      	lsrs	r3, r3, #1
 800d478:	441a      	add	r2, r3
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	685b      	ldr	r3, [r3, #4]
 800d47e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d482:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d484:	6a3b      	ldr	r3, [r7, #32]
 800d486:	2b0f      	cmp	r3, #15
 800d488:	d910      	bls.n	800d4ac <UART_SetConfig+0x5c8>
 800d48a:	6a3b      	ldr	r3, [r7, #32]
 800d48c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d490:	d20c      	bcs.n	800d4ac <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d492:	6a3b      	ldr	r3, [r7, #32]
 800d494:	b29a      	uxth	r2, r3
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	60da      	str	r2, [r3, #12]
 800d49c:	e009      	b.n	800d4b2 <UART_SetConfig+0x5ce>
 800d49e:	bf00      	nop
 800d4a0:	40008000 	.word	0x40008000
 800d4a4:	00f42400 	.word	0x00f42400
 800d4a8:	08023ea0 	.word	0x08023ea0
      }
      else
      {
        ret = HAL_ERROR;
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d4b2:	697b      	ldr	r3, [r7, #20]
 800d4b4:	2201      	movs	r2, #1
 800d4b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d4ba:	697b      	ldr	r3, [r7, #20]
 800d4bc:	2201      	movs	r2, #1
 800d4be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d4ce:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	3730      	adds	r7, #48	@ 0x30
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d4dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d4dc:	b480      	push	{r7}
 800d4de:	b083      	sub	sp, #12
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4e8:	f003 0308 	and.w	r3, r3, #8
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d00a      	beq.n	800d506 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	685b      	ldr	r3, [r3, #4]
 800d4f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	430a      	orrs	r2, r1
 800d504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d50a:	f003 0301 	and.w	r3, r3, #1
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d00a      	beq.n	800d528 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	685b      	ldr	r3, [r3, #4]
 800d518:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	430a      	orrs	r2, r1
 800d526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d52c:	f003 0302 	and.w	r3, r3, #2
 800d530:	2b00      	cmp	r3, #0
 800d532:	d00a      	beq.n	800d54a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	685b      	ldr	r3, [r3, #4]
 800d53a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	430a      	orrs	r2, r1
 800d548:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d54e:	f003 0304 	and.w	r3, r3, #4
 800d552:	2b00      	cmp	r3, #0
 800d554:	d00a      	beq.n	800d56c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	685b      	ldr	r3, [r3, #4]
 800d55c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	430a      	orrs	r2, r1
 800d56a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d570:	f003 0310 	and.w	r3, r3, #16
 800d574:	2b00      	cmp	r3, #0
 800d576:	d00a      	beq.n	800d58e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	689b      	ldr	r3, [r3, #8]
 800d57e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	430a      	orrs	r2, r1
 800d58c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d592:	f003 0320 	and.w	r3, r3, #32
 800d596:	2b00      	cmp	r3, #0
 800d598:	d00a      	beq.n	800d5b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	689b      	ldr	r3, [r3, #8]
 800d5a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	430a      	orrs	r2, r1
 800d5ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d01a      	beq.n	800d5f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	685b      	ldr	r3, [r3, #4]
 800d5c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	430a      	orrs	r2, r1
 800d5d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d5da:	d10a      	bne.n	800d5f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	685b      	ldr	r3, [r3, #4]
 800d5e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	430a      	orrs	r2, r1
 800d5f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d00a      	beq.n	800d614 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	685b      	ldr	r3, [r3, #4]
 800d604:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	430a      	orrs	r2, r1
 800d612:	605a      	str	r2, [r3, #4]
  }
}
 800d614:	bf00      	nop
 800d616:	370c      	adds	r7, #12
 800d618:	46bd      	mov	sp, r7
 800d61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61e:	4770      	bx	lr

0800d620 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b098      	sub	sp, #96	@ 0x60
 800d624:	af02      	add	r7, sp, #8
 800d626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2200      	movs	r2, #0
 800d62c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d630:	f7f6 fea8 	bl	8004384 <HAL_GetTick>
 800d634:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	f003 0308 	and.w	r3, r3, #8
 800d640:	2b08      	cmp	r3, #8
 800d642:	d12f      	bne.n	800d6a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d644:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d648:	9300      	str	r3, [sp, #0]
 800d64a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d64c:	2200      	movs	r2, #0
 800d64e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f000 f88e 	bl	800d774 <UART_WaitOnFlagUntilTimeout>
 800d658:	4603      	mov	r3, r0
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d022      	beq.n	800d6a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d666:	e853 3f00 	ldrex	r3, [r3]
 800d66a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d66c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d66e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d672:	653b      	str	r3, [r7, #80]	@ 0x50
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	461a      	mov	r2, r3
 800d67a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d67c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d67e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d680:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d682:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d684:	e841 2300 	strex	r3, r2, [r1]
 800d688:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d68a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d1e6      	bne.n	800d65e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2220      	movs	r2, #32
 800d694:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2200      	movs	r2, #0
 800d69c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d6a0:	2303      	movs	r3, #3
 800d6a2:	e063      	b.n	800d76c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	f003 0304 	and.w	r3, r3, #4
 800d6ae:	2b04      	cmp	r3, #4
 800d6b0:	d149      	bne.n	800d746 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d6b2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d6b6:	9300      	str	r3, [sp, #0]
 800d6b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f000 f857 	bl	800d774 <UART_WaitOnFlagUntilTimeout>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d03c      	beq.n	800d746 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6d4:	e853 3f00 	ldrex	r3, [r3]
 800d6d8:	623b      	str	r3, [r7, #32]
   return(result);
 800d6da:	6a3b      	ldr	r3, [r7, #32]
 800d6dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d6e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	461a      	mov	r2, r3
 800d6e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d6ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800d6ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d6f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d6f2:	e841 2300 	strex	r3, r2, [r1]
 800d6f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d6f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d1e6      	bne.n	800d6cc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	3308      	adds	r3, #8
 800d704:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d706:	693b      	ldr	r3, [r7, #16]
 800d708:	e853 3f00 	ldrex	r3, [r3]
 800d70c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	f023 0301 	bic.w	r3, r3, #1
 800d714:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	3308      	adds	r3, #8
 800d71c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d71e:	61fa      	str	r2, [r7, #28]
 800d720:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d722:	69b9      	ldr	r1, [r7, #24]
 800d724:	69fa      	ldr	r2, [r7, #28]
 800d726:	e841 2300 	strex	r3, r2, [r1]
 800d72a:	617b      	str	r3, [r7, #20]
   return(result);
 800d72c:	697b      	ldr	r3, [r7, #20]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d1e5      	bne.n	800d6fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2220      	movs	r2, #32
 800d736:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2200      	movs	r2, #0
 800d73e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d742:	2303      	movs	r3, #3
 800d744:	e012      	b.n	800d76c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2220      	movs	r2, #32
 800d74a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2220      	movs	r2, #32
 800d752:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2200      	movs	r2, #0
 800d75a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2200      	movs	r2, #0
 800d760:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2200      	movs	r2, #0
 800d766:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d76a:	2300      	movs	r3, #0
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	3758      	adds	r7, #88	@ 0x58
 800d770:	46bd      	mov	sp, r7
 800d772:	bd80      	pop	{r7, pc}

0800d774 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b084      	sub	sp, #16
 800d778:	af00      	add	r7, sp, #0
 800d77a:	60f8      	str	r0, [r7, #12]
 800d77c:	60b9      	str	r1, [r7, #8]
 800d77e:	603b      	str	r3, [r7, #0]
 800d780:	4613      	mov	r3, r2
 800d782:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d784:	e04f      	b.n	800d826 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d786:	69bb      	ldr	r3, [r7, #24]
 800d788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d78c:	d04b      	beq.n	800d826 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d78e:	f7f6 fdf9 	bl	8004384 <HAL_GetTick>
 800d792:	4602      	mov	r2, r0
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	1ad3      	subs	r3, r2, r3
 800d798:	69ba      	ldr	r2, [r7, #24]
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d302      	bcc.n	800d7a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800d79e:	69bb      	ldr	r3, [r7, #24]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d101      	bne.n	800d7a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d7a4:	2303      	movs	r3, #3
 800d7a6:	e04e      	b.n	800d846 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	f003 0304 	and.w	r3, r3, #4
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d037      	beq.n	800d826 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	2b80      	cmp	r3, #128	@ 0x80
 800d7ba:	d034      	beq.n	800d826 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	2b40      	cmp	r3, #64	@ 0x40
 800d7c0:	d031      	beq.n	800d826 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	69db      	ldr	r3, [r3, #28]
 800d7c8:	f003 0308 	and.w	r3, r3, #8
 800d7cc:	2b08      	cmp	r3, #8
 800d7ce:	d110      	bne.n	800d7f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	2208      	movs	r2, #8
 800d7d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d7d8:	68f8      	ldr	r0, [r7, #12]
 800d7da:	f000 f838 	bl	800d84e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	2208      	movs	r2, #8
 800d7e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	e029      	b.n	800d846 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	69db      	ldr	r3, [r3, #28]
 800d7f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d7fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d800:	d111      	bne.n	800d826 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d80a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d80c:	68f8      	ldr	r0, [r7, #12]
 800d80e:	f000 f81e 	bl	800d84e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	2220      	movs	r2, #32
 800d816:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	2200      	movs	r2, #0
 800d81e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d822:	2303      	movs	r3, #3
 800d824:	e00f      	b.n	800d846 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	69da      	ldr	r2, [r3, #28]
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	4013      	ands	r3, r2
 800d830:	68ba      	ldr	r2, [r7, #8]
 800d832:	429a      	cmp	r2, r3
 800d834:	bf0c      	ite	eq
 800d836:	2301      	moveq	r3, #1
 800d838:	2300      	movne	r3, #0
 800d83a:	b2db      	uxtb	r3, r3
 800d83c:	461a      	mov	r2, r3
 800d83e:	79fb      	ldrb	r3, [r7, #7]
 800d840:	429a      	cmp	r2, r3
 800d842:	d0a0      	beq.n	800d786 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d844:	2300      	movs	r3, #0
}
 800d846:	4618      	mov	r0, r3
 800d848:	3710      	adds	r7, #16
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}

0800d84e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d84e:	b480      	push	{r7}
 800d850:	b095      	sub	sp, #84	@ 0x54
 800d852:	af00      	add	r7, sp, #0
 800d854:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d85c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d85e:	e853 3f00 	ldrex	r3, [r3]
 800d862:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d866:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d86a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	461a      	mov	r2, r3
 800d872:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d874:	643b      	str	r3, [r7, #64]	@ 0x40
 800d876:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d878:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d87a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d87c:	e841 2300 	strex	r3, r2, [r1]
 800d880:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d884:	2b00      	cmp	r3, #0
 800d886:	d1e6      	bne.n	800d856 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	3308      	adds	r3, #8
 800d88e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d890:	6a3b      	ldr	r3, [r7, #32]
 800d892:	e853 3f00 	ldrex	r3, [r3]
 800d896:	61fb      	str	r3, [r7, #28]
   return(result);
 800d898:	69fb      	ldr	r3, [r7, #28]
 800d89a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d89e:	f023 0301 	bic.w	r3, r3, #1
 800d8a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	3308      	adds	r3, #8
 800d8aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d8ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d8ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d8b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d8b4:	e841 2300 	strex	r3, r2, [r1]
 800d8b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d1e3      	bne.n	800d888 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d8c4:	2b01      	cmp	r3, #1
 800d8c6:	d118      	bne.n	800d8fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	e853 3f00 	ldrex	r3, [r3]
 800d8d4:	60bb      	str	r3, [r7, #8]
   return(result);
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	f023 0310 	bic.w	r3, r3, #16
 800d8dc:	647b      	str	r3, [r7, #68]	@ 0x44
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	461a      	mov	r2, r3
 800d8e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d8e6:	61bb      	str	r3, [r7, #24]
 800d8e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8ea:	6979      	ldr	r1, [r7, #20]
 800d8ec:	69ba      	ldr	r2, [r7, #24]
 800d8ee:	e841 2300 	strex	r3, r2, [r1]
 800d8f2:	613b      	str	r3, [r7, #16]
   return(result);
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d1e6      	bne.n	800d8c8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2220      	movs	r2, #32
 800d8fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2200      	movs	r2, #0
 800d906:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2200      	movs	r2, #0
 800d90c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d90e:	bf00      	nop
 800d910:	3754      	adds	r7, #84	@ 0x54
 800d912:	46bd      	mov	sp, r7
 800d914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d918:	4770      	bx	lr

0800d91a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d91a:	b480      	push	{r7}
 800d91c:	b085      	sub	sp, #20
 800d91e:	af00      	add	r7, sp, #0
 800d920:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d928:	2b01      	cmp	r3, #1
 800d92a:	d101      	bne.n	800d930 <HAL_UARTEx_DisableFifoMode+0x16>
 800d92c:	2302      	movs	r3, #2
 800d92e:	e027      	b.n	800d980 <HAL_UARTEx_DisableFifoMode+0x66>
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2201      	movs	r2, #1
 800d934:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2224      	movs	r2, #36	@ 0x24
 800d93c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	681a      	ldr	r2, [r3, #0]
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	f022 0201 	bic.w	r2, r2, #1
 800d956:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d95e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2200      	movs	r2, #0
 800d964:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	68fa      	ldr	r2, [r7, #12]
 800d96c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2220      	movs	r2, #32
 800d972:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2200      	movs	r2, #0
 800d97a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d97e:	2300      	movs	r3, #0
}
 800d980:	4618      	mov	r0, r3
 800d982:	3714      	adds	r7, #20
 800d984:	46bd      	mov	sp, r7
 800d986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98a:	4770      	bx	lr

0800d98c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b084      	sub	sp, #16
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d99c:	2b01      	cmp	r3, #1
 800d99e:	d101      	bne.n	800d9a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d9a0:	2302      	movs	r3, #2
 800d9a2:	e02d      	b.n	800da00 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2201      	movs	r2, #1
 800d9a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2224      	movs	r2, #36	@ 0x24
 800d9b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	681a      	ldr	r2, [r3, #0]
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	f022 0201 	bic.w	r2, r2, #1
 800d9ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	689b      	ldr	r3, [r3, #8]
 800d9d2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	683a      	ldr	r2, [r7, #0]
 800d9dc:	430a      	orrs	r2, r1
 800d9de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f000 f84f 	bl	800da84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	68fa      	ldr	r2, [r7, #12]
 800d9ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2220      	movs	r2, #32
 800d9f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d9fe:	2300      	movs	r3, #0
}
 800da00:	4618      	mov	r0, r3
 800da02:	3710      	adds	r7, #16
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}

0800da08 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b084      	sub	sp, #16
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
 800da10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800da18:	2b01      	cmp	r3, #1
 800da1a:	d101      	bne.n	800da20 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800da1c:	2302      	movs	r3, #2
 800da1e:	e02d      	b.n	800da7c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2201      	movs	r2, #1
 800da24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2224      	movs	r2, #36	@ 0x24
 800da2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	681a      	ldr	r2, [r3, #0]
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	f022 0201 	bic.w	r2, r2, #1
 800da46:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	689b      	ldr	r3, [r3, #8]
 800da4e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	683a      	ldr	r2, [r7, #0]
 800da58:	430a      	orrs	r2, r1
 800da5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f000 f811 	bl	800da84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	68fa      	ldr	r2, [r7, #12]
 800da68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	2220      	movs	r2, #32
 800da6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2200      	movs	r2, #0
 800da76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800da7a:	2300      	movs	r3, #0
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	3710      	adds	r7, #16
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}

0800da84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800da84:	b480      	push	{r7}
 800da86:	b085      	sub	sp, #20
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800da90:	2b00      	cmp	r3, #0
 800da92:	d108      	bne.n	800daa6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2201      	movs	r2, #1
 800da98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2201      	movs	r2, #1
 800daa0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800daa4:	e031      	b.n	800db0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800daa6:	2308      	movs	r3, #8
 800daa8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800daaa:	2308      	movs	r3, #8
 800daac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	689b      	ldr	r3, [r3, #8]
 800dab4:	0e5b      	lsrs	r3, r3, #25
 800dab6:	b2db      	uxtb	r3, r3
 800dab8:	f003 0307 	and.w	r3, r3, #7
 800dabc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	689b      	ldr	r3, [r3, #8]
 800dac4:	0f5b      	lsrs	r3, r3, #29
 800dac6:	b2db      	uxtb	r3, r3
 800dac8:	f003 0307 	and.w	r3, r3, #7
 800dacc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dace:	7bbb      	ldrb	r3, [r7, #14]
 800dad0:	7b3a      	ldrb	r2, [r7, #12]
 800dad2:	4911      	ldr	r1, [pc, #68]	@ (800db18 <UARTEx_SetNbDataToProcess+0x94>)
 800dad4:	5c8a      	ldrb	r2, [r1, r2]
 800dad6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dada:	7b3a      	ldrb	r2, [r7, #12]
 800dadc:	490f      	ldr	r1, [pc, #60]	@ (800db1c <UARTEx_SetNbDataToProcess+0x98>)
 800dade:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dae0:	fb93 f3f2 	sdiv	r3, r3, r2
 800dae4:	b29a      	uxth	r2, r3
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800daec:	7bfb      	ldrb	r3, [r7, #15]
 800daee:	7b7a      	ldrb	r2, [r7, #13]
 800daf0:	4909      	ldr	r1, [pc, #36]	@ (800db18 <UARTEx_SetNbDataToProcess+0x94>)
 800daf2:	5c8a      	ldrb	r2, [r1, r2]
 800daf4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800daf8:	7b7a      	ldrb	r2, [r7, #13]
 800dafa:	4908      	ldr	r1, [pc, #32]	@ (800db1c <UARTEx_SetNbDataToProcess+0x98>)
 800dafc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dafe:	fb93 f3f2 	sdiv	r3, r3, r2
 800db02:	b29a      	uxth	r2, r3
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800db0a:	bf00      	nop
 800db0c:	3714      	adds	r7, #20
 800db0e:	46bd      	mov	sp, r7
 800db10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db14:	4770      	bx	lr
 800db16:	bf00      	nop
 800db18:	08023eb8 	.word	0x08023eb8
 800db1c:	08023ec0 	.word	0x08023ec0

0800db20 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800db20:	b480      	push	{r7}
 800db22:	b085      	sub	sp, #20
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2200      	movs	r2, #0
 800db2c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800db30:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800db34:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	b29a      	uxth	r2, r3
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800db40:	2300      	movs	r3, #0
}
 800db42:	4618      	mov	r0, r3
 800db44:	3714      	adds	r7, #20
 800db46:	46bd      	mov	sp, r7
 800db48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4c:	4770      	bx	lr

0800db4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800db4e:	b480      	push	{r7}
 800db50:	b085      	sub	sp, #20
 800db52:	af00      	add	r7, sp, #0
 800db54:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800db56:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800db5a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800db62:	b29a      	uxth	r2, r3
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	b29b      	uxth	r3, r3
 800db68:	43db      	mvns	r3, r3
 800db6a:	b29b      	uxth	r3, r3
 800db6c:	4013      	ands	r3, r2
 800db6e:	b29a      	uxth	r2, r3
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800db76:	2300      	movs	r3, #0
}
 800db78:	4618      	mov	r0, r3
 800db7a:	3714      	adds	r7, #20
 800db7c:	46bd      	mov	sp, r7
 800db7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db82:	4770      	bx	lr

0800db84 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800db84:	b480      	push	{r7}
 800db86:	b085      	sub	sp, #20
 800db88:	af00      	add	r7, sp, #0
 800db8a:	60f8      	str	r0, [r7, #12]
 800db8c:	1d3b      	adds	r3, r7, #4
 800db8e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	2201      	movs	r2, #1
 800db96:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	2200      	movs	r2, #0
 800db9e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	2200      	movs	r2, #0
 800dba6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	2200      	movs	r2, #0
 800dbae:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800dbb2:	2300      	movs	r3, #0
}
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	3714      	adds	r7, #20
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbe:	4770      	bx	lr

0800dbc0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800dbc0:	b480      	push	{r7}
 800dbc2:	b0a7      	sub	sp, #156	@ 0x9c
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
 800dbc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800dbd0:	687a      	ldr	r2, [r7, #4]
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	781b      	ldrb	r3, [r3, #0]
 800dbd6:	009b      	lsls	r3, r3, #2
 800dbd8:	4413      	add	r3, r2
 800dbda:	881b      	ldrh	r3, [r3, #0]
 800dbdc:	b29b      	uxth	r3, r3
 800dbde:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800dbe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dbe6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	78db      	ldrb	r3, [r3, #3]
 800dbee:	2b03      	cmp	r3, #3
 800dbf0:	d81f      	bhi.n	800dc32 <USB_ActivateEndpoint+0x72>
 800dbf2:	a201      	add	r2, pc, #4	@ (adr r2, 800dbf8 <USB_ActivateEndpoint+0x38>)
 800dbf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbf8:	0800dc09 	.word	0x0800dc09
 800dbfc:	0800dc25 	.word	0x0800dc25
 800dc00:	0800dc3b 	.word	0x0800dc3b
 800dc04:	0800dc17 	.word	0x0800dc17
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800dc08:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800dc0c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800dc10:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800dc14:	e012      	b.n	800dc3c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800dc16:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800dc1a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800dc1e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800dc22:	e00b      	b.n	800dc3c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800dc24:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800dc28:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800dc2c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800dc30:	e004      	b.n	800dc3c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800dc32:	2301      	movs	r3, #1
 800dc34:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800dc38:	e000      	b.n	800dc3c <USB_ActivateEndpoint+0x7c>
      break;
 800dc3a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800dc3c:	687a      	ldr	r2, [r7, #4]
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	781b      	ldrb	r3, [r3, #0]
 800dc42:	009b      	lsls	r3, r3, #2
 800dc44:	441a      	add	r2, r3
 800dc46:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800dc4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dc4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dc52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dc56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc5a:	b29b      	uxth	r3, r3
 800dc5c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800dc5e:	687a      	ldr	r2, [r7, #4]
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	781b      	ldrb	r3, [r3, #0]
 800dc64:	009b      	lsls	r3, r3, #2
 800dc66:	4413      	add	r3, r2
 800dc68:	881b      	ldrh	r3, [r3, #0]
 800dc6a:	b29b      	uxth	r3, r3
 800dc6c:	b21b      	sxth	r3, r3
 800dc6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dc72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dc76:	b21a      	sxth	r2, r3
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	b21b      	sxth	r3, r3
 800dc7e:	4313      	orrs	r3, r2
 800dc80:	b21b      	sxth	r3, r3
 800dc82:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800dc86:	687a      	ldr	r2, [r7, #4]
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	781b      	ldrb	r3, [r3, #0]
 800dc8c:	009b      	lsls	r3, r3, #2
 800dc8e:	441a      	add	r2, r3
 800dc90:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800dc94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dc98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dc9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dca0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dca4:	b29b      	uxth	r3, r3
 800dca6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	7b1b      	ldrb	r3, [r3, #12]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	f040 8180 	bne.w	800dfb2 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	785b      	ldrb	r3, [r3, #1]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	f000 8084 	beq.w	800ddc4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	61bb      	str	r3, [r7, #24]
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dcc6:	b29b      	uxth	r3, r3
 800dcc8:	461a      	mov	r2, r3
 800dcca:	69bb      	ldr	r3, [r7, #24]
 800dccc:	4413      	add	r3, r2
 800dcce:	61bb      	str	r3, [r7, #24]
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	781b      	ldrb	r3, [r3, #0]
 800dcd4:	00da      	lsls	r2, r3, #3
 800dcd6:	69bb      	ldr	r3, [r7, #24]
 800dcd8:	4413      	add	r3, r2
 800dcda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dcde:	617b      	str	r3, [r7, #20]
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	88db      	ldrh	r3, [r3, #6]
 800dce4:	085b      	lsrs	r3, r3, #1
 800dce6:	b29b      	uxth	r3, r3
 800dce8:	005b      	lsls	r3, r3, #1
 800dcea:	b29a      	uxth	r2, r3
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dcf0:	687a      	ldr	r2, [r7, #4]
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	781b      	ldrb	r3, [r3, #0]
 800dcf6:	009b      	lsls	r3, r3, #2
 800dcf8:	4413      	add	r3, r2
 800dcfa:	881b      	ldrh	r3, [r3, #0]
 800dcfc:	827b      	strh	r3, [r7, #18]
 800dcfe:	8a7b      	ldrh	r3, [r7, #18]
 800dd00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d01b      	beq.n	800dd40 <USB_ActivateEndpoint+0x180>
 800dd08:	687a      	ldr	r2, [r7, #4]
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	781b      	ldrb	r3, [r3, #0]
 800dd0e:	009b      	lsls	r3, r3, #2
 800dd10:	4413      	add	r3, r2
 800dd12:	881b      	ldrh	r3, [r3, #0]
 800dd14:	b29b      	uxth	r3, r3
 800dd16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dd1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dd1e:	823b      	strh	r3, [r7, #16]
 800dd20:	687a      	ldr	r2, [r7, #4]
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	781b      	ldrb	r3, [r3, #0]
 800dd26:	009b      	lsls	r3, r3, #2
 800dd28:	441a      	add	r2, r3
 800dd2a:	8a3b      	ldrh	r3, [r7, #16]
 800dd2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dd30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dd34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dd38:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800dd3c:	b29b      	uxth	r3, r3
 800dd3e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	78db      	ldrb	r3, [r3, #3]
 800dd44:	2b01      	cmp	r3, #1
 800dd46:	d020      	beq.n	800dd8a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800dd48:	687a      	ldr	r2, [r7, #4]
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	781b      	ldrb	r3, [r3, #0]
 800dd4e:	009b      	lsls	r3, r3, #2
 800dd50:	4413      	add	r3, r2
 800dd52:	881b      	ldrh	r3, [r3, #0]
 800dd54:	b29b      	uxth	r3, r3
 800dd56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dd5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dd5e:	81bb      	strh	r3, [r7, #12]
 800dd60:	89bb      	ldrh	r3, [r7, #12]
 800dd62:	f083 0320 	eor.w	r3, r3, #32
 800dd66:	81bb      	strh	r3, [r7, #12]
 800dd68:	687a      	ldr	r2, [r7, #4]
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	781b      	ldrb	r3, [r3, #0]
 800dd6e:	009b      	lsls	r3, r3, #2
 800dd70:	441a      	add	r2, r3
 800dd72:	89bb      	ldrh	r3, [r7, #12]
 800dd74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dd78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dd7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dd80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd84:	b29b      	uxth	r3, r3
 800dd86:	8013      	strh	r3, [r2, #0]
 800dd88:	e3f9      	b.n	800e57e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800dd8a:	687a      	ldr	r2, [r7, #4]
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	781b      	ldrb	r3, [r3, #0]
 800dd90:	009b      	lsls	r3, r3, #2
 800dd92:	4413      	add	r3, r2
 800dd94:	881b      	ldrh	r3, [r3, #0]
 800dd96:	b29b      	uxth	r3, r3
 800dd98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dd9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dda0:	81fb      	strh	r3, [r7, #14]
 800dda2:	687a      	ldr	r2, [r7, #4]
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	781b      	ldrb	r3, [r3, #0]
 800dda8:	009b      	lsls	r3, r3, #2
 800ddaa:	441a      	add	r2, r3
 800ddac:	89fb      	ldrh	r3, [r7, #14]
 800ddae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ddb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ddb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ddba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ddbe:	b29b      	uxth	r3, r3
 800ddc0:	8013      	strh	r3, [r2, #0]
 800ddc2:	e3dc      	b.n	800e57e <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	633b      	str	r3, [r7, #48]	@ 0x30
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ddce:	b29b      	uxth	r3, r3
 800ddd0:	461a      	mov	r2, r3
 800ddd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddd4:	4413      	add	r3, r2
 800ddd6:	633b      	str	r3, [r7, #48]	@ 0x30
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	781b      	ldrb	r3, [r3, #0]
 800dddc:	00da      	lsls	r2, r3, #3
 800ddde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dde0:	4413      	add	r3, r2
 800dde2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800dde6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	88db      	ldrh	r3, [r3, #6]
 800ddec:	085b      	lsrs	r3, r3, #1
 800ddee:	b29b      	uxth	r3, r3
 800ddf0:	005b      	lsls	r3, r3, #1
 800ddf2:	b29a      	uxth	r2, r3
 800ddf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddf6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800de02:	b29b      	uxth	r3, r3
 800de04:	461a      	mov	r2, r3
 800de06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de08:	4413      	add	r3, r2
 800de0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	781b      	ldrb	r3, [r3, #0]
 800de10:	00da      	lsls	r2, r3, #3
 800de12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de14:	4413      	add	r3, r2
 800de16:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800de1a:	627b      	str	r3, [r7, #36]	@ 0x24
 800de1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de1e:	881b      	ldrh	r3, [r3, #0]
 800de20:	b29b      	uxth	r3, r3
 800de22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800de26:	b29a      	uxth	r2, r3
 800de28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de2a:	801a      	strh	r2, [r3, #0]
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	691b      	ldr	r3, [r3, #16]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d10a      	bne.n	800de4a <USB_ActivateEndpoint+0x28a>
 800de34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de36:	881b      	ldrh	r3, [r3, #0]
 800de38:	b29b      	uxth	r3, r3
 800de3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de42:	b29a      	uxth	r2, r3
 800de44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de46:	801a      	strh	r2, [r3, #0]
 800de48:	e041      	b.n	800dece <USB_ActivateEndpoint+0x30e>
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	691b      	ldr	r3, [r3, #16]
 800de4e:	2b3e      	cmp	r3, #62	@ 0x3e
 800de50:	d81c      	bhi.n	800de8c <USB_ActivateEndpoint+0x2cc>
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	691b      	ldr	r3, [r3, #16]
 800de56:	085b      	lsrs	r3, r3, #1
 800de58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	691b      	ldr	r3, [r3, #16]
 800de60:	f003 0301 	and.w	r3, r3, #1
 800de64:	2b00      	cmp	r3, #0
 800de66:	d004      	beq.n	800de72 <USB_ActivateEndpoint+0x2b2>
 800de68:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800de6c:	3301      	adds	r3, #1
 800de6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800de72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de74:	881b      	ldrh	r3, [r3, #0]
 800de76:	b29a      	uxth	r2, r3
 800de78:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800de7c:	b29b      	uxth	r3, r3
 800de7e:	029b      	lsls	r3, r3, #10
 800de80:	b29b      	uxth	r3, r3
 800de82:	4313      	orrs	r3, r2
 800de84:	b29a      	uxth	r2, r3
 800de86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de88:	801a      	strh	r2, [r3, #0]
 800de8a:	e020      	b.n	800dece <USB_ActivateEndpoint+0x30e>
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	691b      	ldr	r3, [r3, #16]
 800de90:	095b      	lsrs	r3, r3, #5
 800de92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	691b      	ldr	r3, [r3, #16]
 800de9a:	f003 031f 	and.w	r3, r3, #31
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d104      	bne.n	800deac <USB_ActivateEndpoint+0x2ec>
 800dea2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dea6:	3b01      	subs	r3, #1
 800dea8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800deac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deae:	881b      	ldrh	r3, [r3, #0]
 800deb0:	b29a      	uxth	r2, r3
 800deb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800deb6:	b29b      	uxth	r3, r3
 800deb8:	029b      	lsls	r3, r3, #10
 800deba:	b29b      	uxth	r3, r3
 800debc:	4313      	orrs	r3, r2
 800debe:	b29b      	uxth	r3, r3
 800dec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dec8:	b29a      	uxth	r2, r3
 800deca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800decc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dece:	687a      	ldr	r2, [r7, #4]
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	009b      	lsls	r3, r3, #2
 800ded6:	4413      	add	r3, r2
 800ded8:	881b      	ldrh	r3, [r3, #0]
 800deda:	847b      	strh	r3, [r7, #34]	@ 0x22
 800dedc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dede:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d01b      	beq.n	800df1e <USB_ActivateEndpoint+0x35e>
 800dee6:	687a      	ldr	r2, [r7, #4]
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	781b      	ldrb	r3, [r3, #0]
 800deec:	009b      	lsls	r3, r3, #2
 800deee:	4413      	add	r3, r2
 800def0:	881b      	ldrh	r3, [r3, #0]
 800def2:	b29b      	uxth	r3, r3
 800def4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800def8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800defc:	843b      	strh	r3, [r7, #32]
 800defe:	687a      	ldr	r2, [r7, #4]
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	781b      	ldrb	r3, [r3, #0]
 800df04:	009b      	lsls	r3, r3, #2
 800df06:	441a      	add	r2, r3
 800df08:	8c3b      	ldrh	r3, [r7, #32]
 800df0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800df0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800df12:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800df16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df1a:	b29b      	uxth	r3, r3
 800df1c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	781b      	ldrb	r3, [r3, #0]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d124      	bne.n	800df70 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800df26:	687a      	ldr	r2, [r7, #4]
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	781b      	ldrb	r3, [r3, #0]
 800df2c:	009b      	lsls	r3, r3, #2
 800df2e:	4413      	add	r3, r2
 800df30:	881b      	ldrh	r3, [r3, #0]
 800df32:	b29b      	uxth	r3, r3
 800df34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800df38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800df3c:	83bb      	strh	r3, [r7, #28]
 800df3e:	8bbb      	ldrh	r3, [r7, #28]
 800df40:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800df44:	83bb      	strh	r3, [r7, #28]
 800df46:	8bbb      	ldrh	r3, [r7, #28]
 800df48:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800df4c:	83bb      	strh	r3, [r7, #28]
 800df4e:	687a      	ldr	r2, [r7, #4]
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	781b      	ldrb	r3, [r3, #0]
 800df54:	009b      	lsls	r3, r3, #2
 800df56:	441a      	add	r2, r3
 800df58:	8bbb      	ldrh	r3, [r7, #28]
 800df5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800df5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800df62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800df66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df6a:	b29b      	uxth	r3, r3
 800df6c:	8013      	strh	r3, [r2, #0]
 800df6e:	e306      	b.n	800e57e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800df70:	687a      	ldr	r2, [r7, #4]
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	781b      	ldrb	r3, [r3, #0]
 800df76:	009b      	lsls	r3, r3, #2
 800df78:	4413      	add	r3, r2
 800df7a:	881b      	ldrh	r3, [r3, #0]
 800df7c:	b29b      	uxth	r3, r3
 800df7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800df82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800df86:	83fb      	strh	r3, [r7, #30]
 800df88:	8bfb      	ldrh	r3, [r7, #30]
 800df8a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800df8e:	83fb      	strh	r3, [r7, #30]
 800df90:	687a      	ldr	r2, [r7, #4]
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	781b      	ldrb	r3, [r3, #0]
 800df96:	009b      	lsls	r3, r3, #2
 800df98:	441a      	add	r2, r3
 800df9a:	8bfb      	ldrh	r3, [r7, #30]
 800df9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dfa0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dfa4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dfa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dfac:	b29b      	uxth	r3, r3
 800dfae:	8013      	strh	r3, [r2, #0]
 800dfb0:	e2e5      	b.n	800e57e <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	78db      	ldrb	r3, [r3, #3]
 800dfb6:	2b02      	cmp	r3, #2
 800dfb8:	d11e      	bne.n	800dff8 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800dfba:	687a      	ldr	r2, [r7, #4]
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	781b      	ldrb	r3, [r3, #0]
 800dfc0:	009b      	lsls	r3, r3, #2
 800dfc2:	4413      	add	r3, r2
 800dfc4:	881b      	ldrh	r3, [r3, #0]
 800dfc6:	b29b      	uxth	r3, r3
 800dfc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dfcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dfd0:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800dfd4:	687a      	ldr	r2, [r7, #4]
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	781b      	ldrb	r3, [r3, #0]
 800dfda:	009b      	lsls	r3, r3, #2
 800dfdc:	441a      	add	r2, r3
 800dfde:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800dfe2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dfe6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dfea:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800dfee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dff2:	b29b      	uxth	r3, r3
 800dff4:	8013      	strh	r3, [r2, #0]
 800dff6:	e01d      	b.n	800e034 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800dff8:	687a      	ldr	r2, [r7, #4]
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	781b      	ldrb	r3, [r3, #0]
 800dffe:	009b      	lsls	r3, r3, #2
 800e000:	4413      	add	r3, r2
 800e002:	881b      	ldrh	r3, [r3, #0]
 800e004:	b29b      	uxth	r3, r3
 800e006:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800e00a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e00e:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800e012:	687a      	ldr	r2, [r7, #4]
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	781b      	ldrb	r3, [r3, #0]
 800e018:	009b      	lsls	r3, r3, #2
 800e01a:	441a      	add	r2, r3
 800e01c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800e020:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e024:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e028:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e02c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e030:	b29b      	uxth	r3, r3
 800e032:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e03e:	b29b      	uxth	r3, r3
 800e040:	461a      	mov	r2, r3
 800e042:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e044:	4413      	add	r3, r2
 800e046:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	781b      	ldrb	r3, [r3, #0]
 800e04c:	00da      	lsls	r2, r3, #3
 800e04e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e050:	4413      	add	r3, r2
 800e052:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e056:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	891b      	ldrh	r3, [r3, #8]
 800e05c:	085b      	lsrs	r3, r3, #1
 800e05e:	b29b      	uxth	r3, r3
 800e060:	005b      	lsls	r3, r3, #1
 800e062:	b29a      	uxth	r2, r3
 800e064:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e066:	801a      	strh	r2, [r3, #0]
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	677b      	str	r3, [r7, #116]	@ 0x74
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e072:	b29b      	uxth	r3, r3
 800e074:	461a      	mov	r2, r3
 800e076:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e078:	4413      	add	r3, r2
 800e07a:	677b      	str	r3, [r7, #116]	@ 0x74
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	781b      	ldrb	r3, [r3, #0]
 800e080:	00da      	lsls	r2, r3, #3
 800e082:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e084:	4413      	add	r3, r2
 800e086:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800e08a:	673b      	str	r3, [r7, #112]	@ 0x70
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	895b      	ldrh	r3, [r3, #10]
 800e090:	085b      	lsrs	r3, r3, #1
 800e092:	b29b      	uxth	r3, r3
 800e094:	005b      	lsls	r3, r3, #1
 800e096:	b29a      	uxth	r2, r3
 800e098:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e09a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	785b      	ldrb	r3, [r3, #1]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	f040 81af 	bne.w	800e404 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e0a6:	687a      	ldr	r2, [r7, #4]
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	781b      	ldrb	r3, [r3, #0]
 800e0ac:	009b      	lsls	r3, r3, #2
 800e0ae:	4413      	add	r3, r2
 800e0b0:	881b      	ldrh	r3, [r3, #0]
 800e0b2:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800e0b6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800e0ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d01d      	beq.n	800e0fe <USB_ActivateEndpoint+0x53e>
 800e0c2:	687a      	ldr	r2, [r7, #4]
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	781b      	ldrb	r3, [r3, #0]
 800e0c8:	009b      	lsls	r3, r3, #2
 800e0ca:	4413      	add	r3, r2
 800e0cc:	881b      	ldrh	r3, [r3, #0]
 800e0ce:	b29b      	uxth	r3, r3
 800e0d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e0d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e0d8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800e0dc:	687a      	ldr	r2, [r7, #4]
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	781b      	ldrb	r3, [r3, #0]
 800e0e2:	009b      	lsls	r3, r3, #2
 800e0e4:	441a      	add	r2, r3
 800e0e6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800e0ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e0ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e0f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e0f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0fa:	b29b      	uxth	r3, r3
 800e0fc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e0fe:	687a      	ldr	r2, [r7, #4]
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	781b      	ldrb	r3, [r3, #0]
 800e104:	009b      	lsls	r3, r3, #2
 800e106:	4413      	add	r3, r2
 800e108:	881b      	ldrh	r3, [r3, #0]
 800e10a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800e10e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800e112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e116:	2b00      	cmp	r3, #0
 800e118:	d01d      	beq.n	800e156 <USB_ActivateEndpoint+0x596>
 800e11a:	687a      	ldr	r2, [r7, #4]
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	781b      	ldrb	r3, [r3, #0]
 800e120:	009b      	lsls	r3, r3, #2
 800e122:	4413      	add	r3, r2
 800e124:	881b      	ldrh	r3, [r3, #0]
 800e126:	b29b      	uxth	r3, r3
 800e128:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e12c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e130:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800e134:	687a      	ldr	r2, [r7, #4]
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	781b      	ldrb	r3, [r3, #0]
 800e13a:	009b      	lsls	r3, r3, #2
 800e13c:	441a      	add	r2, r3
 800e13e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800e142:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e146:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e14a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e14e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e152:	b29b      	uxth	r3, r3
 800e154:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	785b      	ldrb	r3, [r3, #1]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d16b      	bne.n	800e236 <USB_ActivateEndpoint+0x676>
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e168:	b29b      	uxth	r3, r3
 800e16a:	461a      	mov	r2, r3
 800e16c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e16e:	4413      	add	r3, r2
 800e170:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	781b      	ldrb	r3, [r3, #0]
 800e176:	00da      	lsls	r2, r3, #3
 800e178:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e17a:	4413      	add	r3, r2
 800e17c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e180:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e182:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e184:	881b      	ldrh	r3, [r3, #0]
 800e186:	b29b      	uxth	r3, r3
 800e188:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e18c:	b29a      	uxth	r2, r3
 800e18e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e190:	801a      	strh	r2, [r3, #0]
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	691b      	ldr	r3, [r3, #16]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d10a      	bne.n	800e1b0 <USB_ActivateEndpoint+0x5f0>
 800e19a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e19c:	881b      	ldrh	r3, [r3, #0]
 800e19e:	b29b      	uxth	r3, r3
 800e1a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e1a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e1a8:	b29a      	uxth	r2, r3
 800e1aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e1ac:	801a      	strh	r2, [r3, #0]
 800e1ae:	e05d      	b.n	800e26c <USB_ActivateEndpoint+0x6ac>
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	691b      	ldr	r3, [r3, #16]
 800e1b4:	2b3e      	cmp	r3, #62	@ 0x3e
 800e1b6:	d81c      	bhi.n	800e1f2 <USB_ActivateEndpoint+0x632>
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	691b      	ldr	r3, [r3, #16]
 800e1bc:	085b      	lsrs	r3, r3, #1
 800e1be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	691b      	ldr	r3, [r3, #16]
 800e1c6:	f003 0301 	and.w	r3, r3, #1
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d004      	beq.n	800e1d8 <USB_ActivateEndpoint+0x618>
 800e1ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e1d2:	3301      	adds	r3, #1
 800e1d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e1d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e1da:	881b      	ldrh	r3, [r3, #0]
 800e1dc:	b29a      	uxth	r2, r3
 800e1de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e1e2:	b29b      	uxth	r3, r3
 800e1e4:	029b      	lsls	r3, r3, #10
 800e1e6:	b29b      	uxth	r3, r3
 800e1e8:	4313      	orrs	r3, r2
 800e1ea:	b29a      	uxth	r2, r3
 800e1ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e1ee:	801a      	strh	r2, [r3, #0]
 800e1f0:	e03c      	b.n	800e26c <USB_ActivateEndpoint+0x6ac>
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	691b      	ldr	r3, [r3, #16]
 800e1f6:	095b      	lsrs	r3, r3, #5
 800e1f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	691b      	ldr	r3, [r3, #16]
 800e200:	f003 031f 	and.w	r3, r3, #31
 800e204:	2b00      	cmp	r3, #0
 800e206:	d104      	bne.n	800e212 <USB_ActivateEndpoint+0x652>
 800e208:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e20c:	3b01      	subs	r3, #1
 800e20e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e212:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e214:	881b      	ldrh	r3, [r3, #0]
 800e216:	b29a      	uxth	r2, r3
 800e218:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e21c:	b29b      	uxth	r3, r3
 800e21e:	029b      	lsls	r3, r3, #10
 800e220:	b29b      	uxth	r3, r3
 800e222:	4313      	orrs	r3, r2
 800e224:	b29b      	uxth	r3, r3
 800e226:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e22a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e22e:	b29a      	uxth	r2, r3
 800e230:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e232:	801a      	strh	r2, [r3, #0]
 800e234:	e01a      	b.n	800e26c <USB_ActivateEndpoint+0x6ac>
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	785b      	ldrb	r3, [r3, #1]
 800e23a:	2b01      	cmp	r3, #1
 800e23c:	d116      	bne.n	800e26c <USB_ActivateEndpoint+0x6ac>
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	657b      	str	r3, [r7, #84]	@ 0x54
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e248:	b29b      	uxth	r3, r3
 800e24a:	461a      	mov	r2, r3
 800e24c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e24e:	4413      	add	r3, r2
 800e250:	657b      	str	r3, [r7, #84]	@ 0x54
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	781b      	ldrb	r3, [r3, #0]
 800e256:	00da      	lsls	r2, r3, #3
 800e258:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e25a:	4413      	add	r3, r2
 800e25c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e260:	653b      	str	r3, [r7, #80]	@ 0x50
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	691b      	ldr	r3, [r3, #16]
 800e266:	b29a      	uxth	r2, r3
 800e268:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e26a:	801a      	strh	r2, [r3, #0]
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	647b      	str	r3, [r7, #68]	@ 0x44
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	785b      	ldrb	r3, [r3, #1]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d16b      	bne.n	800e350 <USB_ActivateEndpoint+0x790>
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e282:	b29b      	uxth	r3, r3
 800e284:	461a      	mov	r2, r3
 800e286:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e288:	4413      	add	r3, r2
 800e28a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	781b      	ldrb	r3, [r3, #0]
 800e290:	00da      	lsls	r2, r3, #3
 800e292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e294:	4413      	add	r3, r2
 800e296:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e29a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e29e:	881b      	ldrh	r3, [r3, #0]
 800e2a0:	b29b      	uxth	r3, r3
 800e2a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e2a6:	b29a      	uxth	r2, r3
 800e2a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2aa:	801a      	strh	r2, [r3, #0]
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	691b      	ldr	r3, [r3, #16]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d10a      	bne.n	800e2ca <USB_ActivateEndpoint+0x70a>
 800e2b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2b6:	881b      	ldrh	r3, [r3, #0]
 800e2b8:	b29b      	uxth	r3, r3
 800e2ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e2be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e2c2:	b29a      	uxth	r2, r3
 800e2c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2c6:	801a      	strh	r2, [r3, #0]
 800e2c8:	e05b      	b.n	800e382 <USB_ActivateEndpoint+0x7c2>
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	691b      	ldr	r3, [r3, #16]
 800e2ce:	2b3e      	cmp	r3, #62	@ 0x3e
 800e2d0:	d81c      	bhi.n	800e30c <USB_ActivateEndpoint+0x74c>
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	691b      	ldr	r3, [r3, #16]
 800e2d6:	085b      	lsrs	r3, r3, #1
 800e2d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	691b      	ldr	r3, [r3, #16]
 800e2e0:	f003 0301 	and.w	r3, r3, #1
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d004      	beq.n	800e2f2 <USB_ActivateEndpoint+0x732>
 800e2e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e2ec:	3301      	adds	r3, #1
 800e2ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e2f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2f4:	881b      	ldrh	r3, [r3, #0]
 800e2f6:	b29a      	uxth	r2, r3
 800e2f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e2fc:	b29b      	uxth	r3, r3
 800e2fe:	029b      	lsls	r3, r3, #10
 800e300:	b29b      	uxth	r3, r3
 800e302:	4313      	orrs	r3, r2
 800e304:	b29a      	uxth	r2, r3
 800e306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e308:	801a      	strh	r2, [r3, #0]
 800e30a:	e03a      	b.n	800e382 <USB_ActivateEndpoint+0x7c2>
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	691b      	ldr	r3, [r3, #16]
 800e310:	095b      	lsrs	r3, r3, #5
 800e312:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	691b      	ldr	r3, [r3, #16]
 800e31a:	f003 031f 	and.w	r3, r3, #31
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d104      	bne.n	800e32c <USB_ActivateEndpoint+0x76c>
 800e322:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e326:	3b01      	subs	r3, #1
 800e328:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e32c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e32e:	881b      	ldrh	r3, [r3, #0]
 800e330:	b29a      	uxth	r2, r3
 800e332:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e336:	b29b      	uxth	r3, r3
 800e338:	029b      	lsls	r3, r3, #10
 800e33a:	b29b      	uxth	r3, r3
 800e33c:	4313      	orrs	r3, r2
 800e33e:	b29b      	uxth	r3, r3
 800e340:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e344:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e348:	b29a      	uxth	r2, r3
 800e34a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e34c:	801a      	strh	r2, [r3, #0]
 800e34e:	e018      	b.n	800e382 <USB_ActivateEndpoint+0x7c2>
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	785b      	ldrb	r3, [r3, #1]
 800e354:	2b01      	cmp	r3, #1
 800e356:	d114      	bne.n	800e382 <USB_ActivateEndpoint+0x7c2>
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e35e:	b29b      	uxth	r3, r3
 800e360:	461a      	mov	r2, r3
 800e362:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e364:	4413      	add	r3, r2
 800e366:	647b      	str	r3, [r7, #68]	@ 0x44
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	781b      	ldrb	r3, [r3, #0]
 800e36c:	00da      	lsls	r2, r3, #3
 800e36e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e370:	4413      	add	r3, r2
 800e372:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e376:	643b      	str	r3, [r7, #64]	@ 0x40
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	691b      	ldr	r3, [r3, #16]
 800e37c:	b29a      	uxth	r2, r3
 800e37e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e380:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e382:	687a      	ldr	r2, [r7, #4]
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	781b      	ldrb	r3, [r3, #0]
 800e388:	009b      	lsls	r3, r3, #2
 800e38a:	4413      	add	r3, r2
 800e38c:	881b      	ldrh	r3, [r3, #0]
 800e38e:	b29b      	uxth	r3, r3
 800e390:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e394:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e398:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e39a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e39c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e3a0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e3a2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e3a4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e3a8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e3aa:	687a      	ldr	r2, [r7, #4]
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	781b      	ldrb	r3, [r3, #0]
 800e3b0:	009b      	lsls	r3, r3, #2
 800e3b2:	441a      	add	r2, r3
 800e3b4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e3b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e3ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e3be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e3c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3c6:	b29b      	uxth	r3, r3
 800e3c8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e3ca:	687a      	ldr	r2, [r7, #4]
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	781b      	ldrb	r3, [r3, #0]
 800e3d0:	009b      	lsls	r3, r3, #2
 800e3d2:	4413      	add	r3, r2
 800e3d4:	881b      	ldrh	r3, [r3, #0]
 800e3d6:	b29b      	uxth	r3, r3
 800e3d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e3dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e3e0:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800e3e2:	687a      	ldr	r2, [r7, #4]
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	781b      	ldrb	r3, [r3, #0]
 800e3e8:	009b      	lsls	r3, r3, #2
 800e3ea:	441a      	add	r2, r3
 800e3ec:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800e3ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e3f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e3f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e3fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3fe:	b29b      	uxth	r3, r3
 800e400:	8013      	strh	r3, [r2, #0]
 800e402:	e0bc      	b.n	800e57e <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e404:	687a      	ldr	r2, [r7, #4]
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	781b      	ldrb	r3, [r3, #0]
 800e40a:	009b      	lsls	r3, r3, #2
 800e40c:	4413      	add	r3, r2
 800e40e:	881b      	ldrh	r3, [r3, #0]
 800e410:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800e414:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e418:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d01d      	beq.n	800e45c <USB_ActivateEndpoint+0x89c>
 800e420:	687a      	ldr	r2, [r7, #4]
 800e422:	683b      	ldr	r3, [r7, #0]
 800e424:	781b      	ldrb	r3, [r3, #0]
 800e426:	009b      	lsls	r3, r3, #2
 800e428:	4413      	add	r3, r2
 800e42a:	881b      	ldrh	r3, [r3, #0]
 800e42c:	b29b      	uxth	r3, r3
 800e42e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e432:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e436:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800e43a:	687a      	ldr	r2, [r7, #4]
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	781b      	ldrb	r3, [r3, #0]
 800e440:	009b      	lsls	r3, r3, #2
 800e442:	441a      	add	r2, r3
 800e444:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800e448:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e44c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e450:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e454:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e458:	b29b      	uxth	r3, r3
 800e45a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e45c:	687a      	ldr	r2, [r7, #4]
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	781b      	ldrb	r3, [r3, #0]
 800e462:	009b      	lsls	r3, r3, #2
 800e464:	4413      	add	r3, r2
 800e466:	881b      	ldrh	r3, [r3, #0]
 800e468:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800e46c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800e470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e474:	2b00      	cmp	r3, #0
 800e476:	d01d      	beq.n	800e4b4 <USB_ActivateEndpoint+0x8f4>
 800e478:	687a      	ldr	r2, [r7, #4]
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	781b      	ldrb	r3, [r3, #0]
 800e47e:	009b      	lsls	r3, r3, #2
 800e480:	4413      	add	r3, r2
 800e482:	881b      	ldrh	r3, [r3, #0]
 800e484:	b29b      	uxth	r3, r3
 800e486:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e48a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e48e:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800e492:	687a      	ldr	r2, [r7, #4]
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	781b      	ldrb	r3, [r3, #0]
 800e498:	009b      	lsls	r3, r3, #2
 800e49a:	441a      	add	r2, r3
 800e49c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800e4a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e4a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e4a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e4ac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e4b0:	b29b      	uxth	r3, r3
 800e4b2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	78db      	ldrb	r3, [r3, #3]
 800e4b8:	2b01      	cmp	r3, #1
 800e4ba:	d024      	beq.n	800e506 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e4bc:	687a      	ldr	r2, [r7, #4]
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	781b      	ldrb	r3, [r3, #0]
 800e4c2:	009b      	lsls	r3, r3, #2
 800e4c4:	4413      	add	r3, r2
 800e4c6:	881b      	ldrh	r3, [r3, #0]
 800e4c8:	b29b      	uxth	r3, r3
 800e4ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e4ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e4d2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800e4d6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800e4da:	f083 0320 	eor.w	r3, r3, #32
 800e4de:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800e4e2:	687a      	ldr	r2, [r7, #4]
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	781b      	ldrb	r3, [r3, #0]
 800e4e8:	009b      	lsls	r3, r3, #2
 800e4ea:	441a      	add	r2, r3
 800e4ec:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800e4f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e4f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e4f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e4fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e500:	b29b      	uxth	r3, r3
 800e502:	8013      	strh	r3, [r2, #0]
 800e504:	e01d      	b.n	800e542 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e506:	687a      	ldr	r2, [r7, #4]
 800e508:	683b      	ldr	r3, [r7, #0]
 800e50a:	781b      	ldrb	r3, [r3, #0]
 800e50c:	009b      	lsls	r3, r3, #2
 800e50e:	4413      	add	r3, r2
 800e510:	881b      	ldrh	r3, [r3, #0]
 800e512:	b29b      	uxth	r3, r3
 800e514:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e518:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e51c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800e520:	687a      	ldr	r2, [r7, #4]
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	781b      	ldrb	r3, [r3, #0]
 800e526:	009b      	lsls	r3, r3, #2
 800e528:	441a      	add	r2, r3
 800e52a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800e52e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e532:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e536:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e53a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e53e:	b29b      	uxth	r3, r3
 800e540:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e542:	687a      	ldr	r2, [r7, #4]
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	781b      	ldrb	r3, [r3, #0]
 800e548:	009b      	lsls	r3, r3, #2
 800e54a:	4413      	add	r3, r2
 800e54c:	881b      	ldrh	r3, [r3, #0]
 800e54e:	b29b      	uxth	r3, r3
 800e550:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e554:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e558:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800e55c:	687a      	ldr	r2, [r7, #4]
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	781b      	ldrb	r3, [r3, #0]
 800e562:	009b      	lsls	r3, r3, #2
 800e564:	441a      	add	r2, r3
 800e566:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800e56a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e56e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e572:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e576:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e57a:	b29b      	uxth	r3, r3
 800e57c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800e57e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800e582:	4618      	mov	r0, r3
 800e584:	379c      	adds	r7, #156	@ 0x9c
 800e586:	46bd      	mov	sp, r7
 800e588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58c:	4770      	bx	lr
 800e58e:	bf00      	nop

0800e590 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e590:	b480      	push	{r7}
 800e592:	b08d      	sub	sp, #52	@ 0x34
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
 800e598:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	7b1b      	ldrb	r3, [r3, #12]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	f040 808e 	bne.w	800e6c0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	785b      	ldrb	r3, [r3, #1]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d044      	beq.n	800e636 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e5ac:	687a      	ldr	r2, [r7, #4]
 800e5ae:	683b      	ldr	r3, [r7, #0]
 800e5b0:	781b      	ldrb	r3, [r3, #0]
 800e5b2:	009b      	lsls	r3, r3, #2
 800e5b4:	4413      	add	r3, r2
 800e5b6:	881b      	ldrh	r3, [r3, #0]
 800e5b8:	81bb      	strh	r3, [r7, #12]
 800e5ba:	89bb      	ldrh	r3, [r7, #12]
 800e5bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d01b      	beq.n	800e5fc <USB_DeactivateEndpoint+0x6c>
 800e5c4:	687a      	ldr	r2, [r7, #4]
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	781b      	ldrb	r3, [r3, #0]
 800e5ca:	009b      	lsls	r3, r3, #2
 800e5cc:	4413      	add	r3, r2
 800e5ce:	881b      	ldrh	r3, [r3, #0]
 800e5d0:	b29b      	uxth	r3, r3
 800e5d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e5d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e5da:	817b      	strh	r3, [r7, #10]
 800e5dc:	687a      	ldr	r2, [r7, #4]
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	781b      	ldrb	r3, [r3, #0]
 800e5e2:	009b      	lsls	r3, r3, #2
 800e5e4:	441a      	add	r2, r3
 800e5e6:	897b      	ldrh	r3, [r7, #10]
 800e5e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e5ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e5f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e5f4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e5f8:	b29b      	uxth	r3, r3
 800e5fa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e5fc:	687a      	ldr	r2, [r7, #4]
 800e5fe:	683b      	ldr	r3, [r7, #0]
 800e600:	781b      	ldrb	r3, [r3, #0]
 800e602:	009b      	lsls	r3, r3, #2
 800e604:	4413      	add	r3, r2
 800e606:	881b      	ldrh	r3, [r3, #0]
 800e608:	b29b      	uxth	r3, r3
 800e60a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e60e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e612:	813b      	strh	r3, [r7, #8]
 800e614:	687a      	ldr	r2, [r7, #4]
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	781b      	ldrb	r3, [r3, #0]
 800e61a:	009b      	lsls	r3, r3, #2
 800e61c:	441a      	add	r2, r3
 800e61e:	893b      	ldrh	r3, [r7, #8]
 800e620:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e624:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e628:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e62c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e630:	b29b      	uxth	r3, r3
 800e632:	8013      	strh	r3, [r2, #0]
 800e634:	e192      	b.n	800e95c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e636:	687a      	ldr	r2, [r7, #4]
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	781b      	ldrb	r3, [r3, #0]
 800e63c:	009b      	lsls	r3, r3, #2
 800e63e:	4413      	add	r3, r2
 800e640:	881b      	ldrh	r3, [r3, #0]
 800e642:	827b      	strh	r3, [r7, #18]
 800e644:	8a7b      	ldrh	r3, [r7, #18]
 800e646:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d01b      	beq.n	800e686 <USB_DeactivateEndpoint+0xf6>
 800e64e:	687a      	ldr	r2, [r7, #4]
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	781b      	ldrb	r3, [r3, #0]
 800e654:	009b      	lsls	r3, r3, #2
 800e656:	4413      	add	r3, r2
 800e658:	881b      	ldrh	r3, [r3, #0]
 800e65a:	b29b      	uxth	r3, r3
 800e65c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e660:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e664:	823b      	strh	r3, [r7, #16]
 800e666:	687a      	ldr	r2, [r7, #4]
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	781b      	ldrb	r3, [r3, #0]
 800e66c:	009b      	lsls	r3, r3, #2
 800e66e:	441a      	add	r2, r3
 800e670:	8a3b      	ldrh	r3, [r7, #16]
 800e672:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e676:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e67a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e67e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e682:	b29b      	uxth	r3, r3
 800e684:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e686:	687a      	ldr	r2, [r7, #4]
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	781b      	ldrb	r3, [r3, #0]
 800e68c:	009b      	lsls	r3, r3, #2
 800e68e:	4413      	add	r3, r2
 800e690:	881b      	ldrh	r3, [r3, #0]
 800e692:	b29b      	uxth	r3, r3
 800e694:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e698:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e69c:	81fb      	strh	r3, [r7, #14]
 800e69e:	687a      	ldr	r2, [r7, #4]
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	781b      	ldrb	r3, [r3, #0]
 800e6a4:	009b      	lsls	r3, r3, #2
 800e6a6:	441a      	add	r2, r3
 800e6a8:	89fb      	ldrh	r3, [r7, #14]
 800e6aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e6ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e6b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e6b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e6ba:	b29b      	uxth	r3, r3
 800e6bc:	8013      	strh	r3, [r2, #0]
 800e6be:	e14d      	b.n	800e95c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	785b      	ldrb	r3, [r3, #1]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	f040 80a5 	bne.w	800e814 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e6ca:	687a      	ldr	r2, [r7, #4]
 800e6cc:	683b      	ldr	r3, [r7, #0]
 800e6ce:	781b      	ldrb	r3, [r3, #0]
 800e6d0:	009b      	lsls	r3, r3, #2
 800e6d2:	4413      	add	r3, r2
 800e6d4:	881b      	ldrh	r3, [r3, #0]
 800e6d6:	843b      	strh	r3, [r7, #32]
 800e6d8:	8c3b      	ldrh	r3, [r7, #32]
 800e6da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d01b      	beq.n	800e71a <USB_DeactivateEndpoint+0x18a>
 800e6e2:	687a      	ldr	r2, [r7, #4]
 800e6e4:	683b      	ldr	r3, [r7, #0]
 800e6e6:	781b      	ldrb	r3, [r3, #0]
 800e6e8:	009b      	lsls	r3, r3, #2
 800e6ea:	4413      	add	r3, r2
 800e6ec:	881b      	ldrh	r3, [r3, #0]
 800e6ee:	b29b      	uxth	r3, r3
 800e6f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e6f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e6f8:	83fb      	strh	r3, [r7, #30]
 800e6fa:	687a      	ldr	r2, [r7, #4]
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	781b      	ldrb	r3, [r3, #0]
 800e700:	009b      	lsls	r3, r3, #2
 800e702:	441a      	add	r2, r3
 800e704:	8bfb      	ldrh	r3, [r7, #30]
 800e706:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e70a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e70e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e716:	b29b      	uxth	r3, r3
 800e718:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e71a:	687a      	ldr	r2, [r7, #4]
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	781b      	ldrb	r3, [r3, #0]
 800e720:	009b      	lsls	r3, r3, #2
 800e722:	4413      	add	r3, r2
 800e724:	881b      	ldrh	r3, [r3, #0]
 800e726:	83bb      	strh	r3, [r7, #28]
 800e728:	8bbb      	ldrh	r3, [r7, #28]
 800e72a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d01b      	beq.n	800e76a <USB_DeactivateEndpoint+0x1da>
 800e732:	687a      	ldr	r2, [r7, #4]
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	781b      	ldrb	r3, [r3, #0]
 800e738:	009b      	lsls	r3, r3, #2
 800e73a:	4413      	add	r3, r2
 800e73c:	881b      	ldrh	r3, [r3, #0]
 800e73e:	b29b      	uxth	r3, r3
 800e740:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e744:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e748:	837b      	strh	r3, [r7, #26]
 800e74a:	687a      	ldr	r2, [r7, #4]
 800e74c:	683b      	ldr	r3, [r7, #0]
 800e74e:	781b      	ldrb	r3, [r3, #0]
 800e750:	009b      	lsls	r3, r3, #2
 800e752:	441a      	add	r2, r3
 800e754:	8b7b      	ldrh	r3, [r7, #26]
 800e756:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e75a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e75e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e762:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e766:	b29b      	uxth	r3, r3
 800e768:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800e76a:	687a      	ldr	r2, [r7, #4]
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	781b      	ldrb	r3, [r3, #0]
 800e770:	009b      	lsls	r3, r3, #2
 800e772:	4413      	add	r3, r2
 800e774:	881b      	ldrh	r3, [r3, #0]
 800e776:	b29b      	uxth	r3, r3
 800e778:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e77c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e780:	833b      	strh	r3, [r7, #24]
 800e782:	687a      	ldr	r2, [r7, #4]
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	781b      	ldrb	r3, [r3, #0]
 800e788:	009b      	lsls	r3, r3, #2
 800e78a:	441a      	add	r2, r3
 800e78c:	8b3b      	ldrh	r3, [r7, #24]
 800e78e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e792:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e796:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e79a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e79e:	b29b      	uxth	r3, r3
 800e7a0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e7a2:	687a      	ldr	r2, [r7, #4]
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	781b      	ldrb	r3, [r3, #0]
 800e7a8:	009b      	lsls	r3, r3, #2
 800e7aa:	4413      	add	r3, r2
 800e7ac:	881b      	ldrh	r3, [r3, #0]
 800e7ae:	b29b      	uxth	r3, r3
 800e7b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e7b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e7b8:	82fb      	strh	r3, [r7, #22]
 800e7ba:	687a      	ldr	r2, [r7, #4]
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	781b      	ldrb	r3, [r3, #0]
 800e7c0:	009b      	lsls	r3, r3, #2
 800e7c2:	441a      	add	r2, r3
 800e7c4:	8afb      	ldrh	r3, [r7, #22]
 800e7c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e7ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e7ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e7d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e7d6:	b29b      	uxth	r3, r3
 800e7d8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e7da:	687a      	ldr	r2, [r7, #4]
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	781b      	ldrb	r3, [r3, #0]
 800e7e0:	009b      	lsls	r3, r3, #2
 800e7e2:	4413      	add	r3, r2
 800e7e4:	881b      	ldrh	r3, [r3, #0]
 800e7e6:	b29b      	uxth	r3, r3
 800e7e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e7ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e7f0:	82bb      	strh	r3, [r7, #20]
 800e7f2:	687a      	ldr	r2, [r7, #4]
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	781b      	ldrb	r3, [r3, #0]
 800e7f8:	009b      	lsls	r3, r3, #2
 800e7fa:	441a      	add	r2, r3
 800e7fc:	8abb      	ldrh	r3, [r7, #20]
 800e7fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e802:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e806:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e80a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e80e:	b29b      	uxth	r3, r3
 800e810:	8013      	strh	r3, [r2, #0]
 800e812:	e0a3      	b.n	800e95c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e814:	687a      	ldr	r2, [r7, #4]
 800e816:	683b      	ldr	r3, [r7, #0]
 800e818:	781b      	ldrb	r3, [r3, #0]
 800e81a:	009b      	lsls	r3, r3, #2
 800e81c:	4413      	add	r3, r2
 800e81e:	881b      	ldrh	r3, [r3, #0]
 800e820:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800e822:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e824:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d01b      	beq.n	800e864 <USB_DeactivateEndpoint+0x2d4>
 800e82c:	687a      	ldr	r2, [r7, #4]
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	781b      	ldrb	r3, [r3, #0]
 800e832:	009b      	lsls	r3, r3, #2
 800e834:	4413      	add	r3, r2
 800e836:	881b      	ldrh	r3, [r3, #0]
 800e838:	b29b      	uxth	r3, r3
 800e83a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e83e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e842:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800e844:	687a      	ldr	r2, [r7, #4]
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	781b      	ldrb	r3, [r3, #0]
 800e84a:	009b      	lsls	r3, r3, #2
 800e84c:	441a      	add	r2, r3
 800e84e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800e850:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e854:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e858:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e85c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e860:	b29b      	uxth	r3, r3
 800e862:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e864:	687a      	ldr	r2, [r7, #4]
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	781b      	ldrb	r3, [r3, #0]
 800e86a:	009b      	lsls	r3, r3, #2
 800e86c:	4413      	add	r3, r2
 800e86e:	881b      	ldrh	r3, [r3, #0]
 800e870:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800e872:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d01b      	beq.n	800e8b4 <USB_DeactivateEndpoint+0x324>
 800e87c:	687a      	ldr	r2, [r7, #4]
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	781b      	ldrb	r3, [r3, #0]
 800e882:	009b      	lsls	r3, r3, #2
 800e884:	4413      	add	r3, r2
 800e886:	881b      	ldrh	r3, [r3, #0]
 800e888:	b29b      	uxth	r3, r3
 800e88a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e88e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e892:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e894:	687a      	ldr	r2, [r7, #4]
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	781b      	ldrb	r3, [r3, #0]
 800e89a:	009b      	lsls	r3, r3, #2
 800e89c:	441a      	add	r2, r3
 800e89e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e8a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e8a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e8a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e8ac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e8b0:	b29b      	uxth	r3, r3
 800e8b2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800e8b4:	687a      	ldr	r2, [r7, #4]
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	781b      	ldrb	r3, [r3, #0]
 800e8ba:	009b      	lsls	r3, r3, #2
 800e8bc:	4413      	add	r3, r2
 800e8be:	881b      	ldrh	r3, [r3, #0]
 800e8c0:	b29b      	uxth	r3, r3
 800e8c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e8c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e8ca:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e8cc:	687a      	ldr	r2, [r7, #4]
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	781b      	ldrb	r3, [r3, #0]
 800e8d2:	009b      	lsls	r3, r3, #2
 800e8d4:	441a      	add	r2, r3
 800e8d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e8d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e8dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e8e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e8e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e8e8:	b29b      	uxth	r3, r3
 800e8ea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e8ec:	687a      	ldr	r2, [r7, #4]
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	781b      	ldrb	r3, [r3, #0]
 800e8f2:	009b      	lsls	r3, r3, #2
 800e8f4:	4413      	add	r3, r2
 800e8f6:	881b      	ldrh	r3, [r3, #0]
 800e8f8:	b29b      	uxth	r3, r3
 800e8fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e8fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e902:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800e904:	687a      	ldr	r2, [r7, #4]
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	781b      	ldrb	r3, [r3, #0]
 800e90a:	009b      	lsls	r3, r3, #2
 800e90c:	441a      	add	r2, r3
 800e90e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e910:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e914:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e918:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e91c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e920:	b29b      	uxth	r3, r3
 800e922:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e924:	687a      	ldr	r2, [r7, #4]
 800e926:	683b      	ldr	r3, [r7, #0]
 800e928:	781b      	ldrb	r3, [r3, #0]
 800e92a:	009b      	lsls	r3, r3, #2
 800e92c:	4413      	add	r3, r2
 800e92e:	881b      	ldrh	r3, [r3, #0]
 800e930:	b29b      	uxth	r3, r3
 800e932:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e93a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800e93c:	687a      	ldr	r2, [r7, #4]
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	781b      	ldrb	r3, [r3, #0]
 800e942:	009b      	lsls	r3, r3, #2
 800e944:	441a      	add	r2, r3
 800e946:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e948:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e94c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e950:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e954:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e958:	b29b      	uxth	r3, r3
 800e95a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800e95c:	2300      	movs	r3, #0
}
 800e95e:	4618      	mov	r0, r3
 800e960:	3734      	adds	r7, #52	@ 0x34
 800e962:	46bd      	mov	sp, r7
 800e964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e968:	4770      	bx	lr

0800e96a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e96a:	b580      	push	{r7, lr}
 800e96c:	b0ac      	sub	sp, #176	@ 0xb0
 800e96e:	af00      	add	r7, sp, #0
 800e970:	6078      	str	r0, [r7, #4]
 800e972:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	785b      	ldrb	r3, [r3, #1]
 800e978:	2b01      	cmp	r3, #1
 800e97a:	f040 84ca 	bne.w	800f312 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	699a      	ldr	r2, [r3, #24]
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	691b      	ldr	r3, [r3, #16]
 800e986:	429a      	cmp	r2, r3
 800e988:	d904      	bls.n	800e994 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	691b      	ldr	r3, [r3, #16]
 800e98e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e992:	e003      	b.n	800e99c <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	699b      	ldr	r3, [r3, #24]
 800e998:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	7b1b      	ldrb	r3, [r3, #12]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d122      	bne.n	800e9ea <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	6959      	ldr	r1, [r3, #20]
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	88da      	ldrh	r2, [r3, #6]
 800e9ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e9b0:	b29b      	uxth	r3, r3
 800e9b2:	6878      	ldr	r0, [r7, #4]
 800e9b4:	f000 febd 	bl	800f732 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	613b      	str	r3, [r7, #16]
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e9c2:	b29b      	uxth	r3, r3
 800e9c4:	461a      	mov	r2, r3
 800e9c6:	693b      	ldr	r3, [r7, #16]
 800e9c8:	4413      	add	r3, r2
 800e9ca:	613b      	str	r3, [r7, #16]
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	781b      	ldrb	r3, [r3, #0]
 800e9d0:	00da      	lsls	r2, r3, #3
 800e9d2:	693b      	ldr	r3, [r7, #16]
 800e9d4:	4413      	add	r3, r2
 800e9d6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e9da:	60fb      	str	r3, [r7, #12]
 800e9dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e9e0:	b29a      	uxth	r2, r3
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	801a      	strh	r2, [r3, #0]
 800e9e6:	f000 bc6f 	b.w	800f2c8 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	78db      	ldrb	r3, [r3, #3]
 800e9ee:	2b02      	cmp	r3, #2
 800e9f0:	f040 831e 	bne.w	800f030 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	6a1a      	ldr	r2, [r3, #32]
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	691b      	ldr	r3, [r3, #16]
 800e9fc:	429a      	cmp	r2, r3
 800e9fe:	f240 82cf 	bls.w	800efa0 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ea02:	687a      	ldr	r2, [r7, #4]
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	781b      	ldrb	r3, [r3, #0]
 800ea08:	009b      	lsls	r3, r3, #2
 800ea0a:	4413      	add	r3, r2
 800ea0c:	881b      	ldrh	r3, [r3, #0]
 800ea0e:	b29b      	uxth	r3, r3
 800ea10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ea14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ea18:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800ea1c:	687a      	ldr	r2, [r7, #4]
 800ea1e:	683b      	ldr	r3, [r7, #0]
 800ea20:	781b      	ldrb	r3, [r3, #0]
 800ea22:	009b      	lsls	r3, r3, #2
 800ea24:	441a      	add	r2, r3
 800ea26:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ea2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ea2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ea32:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ea36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ea3a:	b29b      	uxth	r3, r3
 800ea3c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	6a1a      	ldr	r2, [r3, #32]
 800ea42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ea46:	1ad2      	subs	r2, r2, r3
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ea4c:	687a      	ldr	r2, [r7, #4]
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	781b      	ldrb	r3, [r3, #0]
 800ea52:	009b      	lsls	r3, r3, #2
 800ea54:	4413      	add	r3, r2
 800ea56:	881b      	ldrh	r3, [r3, #0]
 800ea58:	b29b      	uxth	r3, r3
 800ea5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	f000 814f 	beq.w	800ed02 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	633b      	str	r3, [r7, #48]	@ 0x30
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	785b      	ldrb	r3, [r3, #1]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d16b      	bne.n	800eb48 <USB_EPStartXfer+0x1de>
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ea7a:	b29b      	uxth	r3, r3
 800ea7c:	461a      	mov	r2, r3
 800ea7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea80:	4413      	add	r3, r2
 800ea82:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	781b      	ldrb	r3, [r3, #0]
 800ea88:	00da      	lsls	r2, r3, #3
 800ea8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea8c:	4413      	add	r3, r2
 800ea8e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ea92:	627b      	str	r3, [r7, #36]	@ 0x24
 800ea94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea96:	881b      	ldrh	r3, [r3, #0]
 800ea98:	b29b      	uxth	r3, r3
 800ea9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ea9e:	b29a      	uxth	r2, r3
 800eaa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaa2:	801a      	strh	r2, [r3, #0]
 800eaa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d10a      	bne.n	800eac2 <USB_EPStartXfer+0x158>
 800eaac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaae:	881b      	ldrh	r3, [r3, #0]
 800eab0:	b29b      	uxth	r3, r3
 800eab2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eab6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eaba:	b29a      	uxth	r2, r3
 800eabc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eabe:	801a      	strh	r2, [r3, #0]
 800eac0:	e05b      	b.n	800eb7a <USB_EPStartXfer+0x210>
 800eac2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eac6:	2b3e      	cmp	r3, #62	@ 0x3e
 800eac8:	d81c      	bhi.n	800eb04 <USB_EPStartXfer+0x19a>
 800eaca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eace:	085b      	lsrs	r3, r3, #1
 800ead0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ead4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ead8:	f003 0301 	and.w	r3, r3, #1
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d004      	beq.n	800eaea <USB_EPStartXfer+0x180>
 800eae0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eae4:	3301      	adds	r3, #1
 800eae6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800eaea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaec:	881b      	ldrh	r3, [r3, #0]
 800eaee:	b29a      	uxth	r2, r3
 800eaf0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eaf4:	b29b      	uxth	r3, r3
 800eaf6:	029b      	lsls	r3, r3, #10
 800eaf8:	b29b      	uxth	r3, r3
 800eafa:	4313      	orrs	r3, r2
 800eafc:	b29a      	uxth	r2, r3
 800eafe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb00:	801a      	strh	r2, [r3, #0]
 800eb02:	e03a      	b.n	800eb7a <USB_EPStartXfer+0x210>
 800eb04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eb08:	095b      	lsrs	r3, r3, #5
 800eb0a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800eb0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eb12:	f003 031f 	and.w	r3, r3, #31
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d104      	bne.n	800eb24 <USB_EPStartXfer+0x1ba>
 800eb1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eb1e:	3b01      	subs	r3, #1
 800eb20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800eb24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb26:	881b      	ldrh	r3, [r3, #0]
 800eb28:	b29a      	uxth	r2, r3
 800eb2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eb2e:	b29b      	uxth	r3, r3
 800eb30:	029b      	lsls	r3, r3, #10
 800eb32:	b29b      	uxth	r3, r3
 800eb34:	4313      	orrs	r3, r2
 800eb36:	b29b      	uxth	r3, r3
 800eb38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eb3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eb40:	b29a      	uxth	r2, r3
 800eb42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb44:	801a      	strh	r2, [r3, #0]
 800eb46:	e018      	b.n	800eb7a <USB_EPStartXfer+0x210>
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	785b      	ldrb	r3, [r3, #1]
 800eb4c:	2b01      	cmp	r3, #1
 800eb4e:	d114      	bne.n	800eb7a <USB_EPStartXfer+0x210>
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800eb56:	b29b      	uxth	r3, r3
 800eb58:	461a      	mov	r2, r3
 800eb5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb5c:	4413      	add	r3, r2
 800eb5e:	633b      	str	r3, [r7, #48]	@ 0x30
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	781b      	ldrb	r3, [r3, #0]
 800eb64:	00da      	lsls	r2, r3, #3
 800eb66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb68:	4413      	add	r3, r2
 800eb6a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800eb6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eb70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eb74:	b29a      	uxth	r2, r3
 800eb76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb78:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	895b      	ldrh	r3, [r3, #10]
 800eb7e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	6959      	ldr	r1, [r3, #20]
 800eb86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eb8a:	b29b      	uxth	r3, r3
 800eb8c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800eb90:	6878      	ldr	r0, [r7, #4]
 800eb92:	f000 fdce 	bl	800f732 <USB_WritePMA>
            ep->xfer_buff += len;
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	695a      	ldr	r2, [r3, #20]
 800eb9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eb9e:	441a      	add	r2, r3
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	6a1a      	ldr	r2, [r3, #32]
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	691b      	ldr	r3, [r3, #16]
 800ebac:	429a      	cmp	r2, r3
 800ebae:	d907      	bls.n	800ebc0 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	6a1a      	ldr	r2, [r3, #32]
 800ebb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ebb8:	1ad2      	subs	r2, r2, r3
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	621a      	str	r2, [r3, #32]
 800ebbe:	e006      	b.n	800ebce <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	6a1b      	ldr	r3, [r3, #32]
 800ebc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	2200      	movs	r2, #0
 800ebcc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	785b      	ldrb	r3, [r3, #1]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d16b      	bne.n	800ecae <USB_EPStartXfer+0x344>
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	61bb      	str	r3, [r7, #24]
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ebe0:	b29b      	uxth	r3, r3
 800ebe2:	461a      	mov	r2, r3
 800ebe4:	69bb      	ldr	r3, [r7, #24]
 800ebe6:	4413      	add	r3, r2
 800ebe8:	61bb      	str	r3, [r7, #24]
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	781b      	ldrb	r3, [r3, #0]
 800ebee:	00da      	lsls	r2, r3, #3
 800ebf0:	69bb      	ldr	r3, [r7, #24]
 800ebf2:	4413      	add	r3, r2
 800ebf4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ebf8:	617b      	str	r3, [r7, #20]
 800ebfa:	697b      	ldr	r3, [r7, #20]
 800ebfc:	881b      	ldrh	r3, [r3, #0]
 800ebfe:	b29b      	uxth	r3, r3
 800ec00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ec04:	b29a      	uxth	r2, r3
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	801a      	strh	r2, [r3, #0]
 800ec0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d10a      	bne.n	800ec28 <USB_EPStartXfer+0x2be>
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	881b      	ldrh	r3, [r3, #0]
 800ec16:	b29b      	uxth	r3, r3
 800ec18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ec1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ec20:	b29a      	uxth	r2, r3
 800ec22:	697b      	ldr	r3, [r7, #20]
 800ec24:	801a      	strh	r2, [r3, #0]
 800ec26:	e05d      	b.n	800ece4 <USB_EPStartXfer+0x37a>
 800ec28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ec2c:	2b3e      	cmp	r3, #62	@ 0x3e
 800ec2e:	d81c      	bhi.n	800ec6a <USB_EPStartXfer+0x300>
 800ec30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ec34:	085b      	lsrs	r3, r3, #1
 800ec36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ec3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ec3e:	f003 0301 	and.w	r3, r3, #1
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d004      	beq.n	800ec50 <USB_EPStartXfer+0x2e6>
 800ec46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ec4a:	3301      	adds	r3, #1
 800ec4c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ec50:	697b      	ldr	r3, [r7, #20]
 800ec52:	881b      	ldrh	r3, [r3, #0]
 800ec54:	b29a      	uxth	r2, r3
 800ec56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ec5a:	b29b      	uxth	r3, r3
 800ec5c:	029b      	lsls	r3, r3, #10
 800ec5e:	b29b      	uxth	r3, r3
 800ec60:	4313      	orrs	r3, r2
 800ec62:	b29a      	uxth	r2, r3
 800ec64:	697b      	ldr	r3, [r7, #20]
 800ec66:	801a      	strh	r2, [r3, #0]
 800ec68:	e03c      	b.n	800ece4 <USB_EPStartXfer+0x37a>
 800ec6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ec6e:	095b      	lsrs	r3, r3, #5
 800ec70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ec74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ec78:	f003 031f 	and.w	r3, r3, #31
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d104      	bne.n	800ec8a <USB_EPStartXfer+0x320>
 800ec80:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ec84:	3b01      	subs	r3, #1
 800ec86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	881b      	ldrh	r3, [r3, #0]
 800ec8e:	b29a      	uxth	r2, r3
 800ec90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ec94:	b29b      	uxth	r3, r3
 800ec96:	029b      	lsls	r3, r3, #10
 800ec98:	b29b      	uxth	r3, r3
 800ec9a:	4313      	orrs	r3, r2
 800ec9c:	b29b      	uxth	r3, r3
 800ec9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eca6:	b29a      	uxth	r2, r3
 800eca8:	697b      	ldr	r3, [r7, #20]
 800ecaa:	801a      	strh	r2, [r3, #0]
 800ecac:	e01a      	b.n	800ece4 <USB_EPStartXfer+0x37a>
 800ecae:	683b      	ldr	r3, [r7, #0]
 800ecb0:	785b      	ldrb	r3, [r3, #1]
 800ecb2:	2b01      	cmp	r3, #1
 800ecb4:	d116      	bne.n	800ece4 <USB_EPStartXfer+0x37a>
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	623b      	str	r3, [r7, #32]
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ecc0:	b29b      	uxth	r3, r3
 800ecc2:	461a      	mov	r2, r3
 800ecc4:	6a3b      	ldr	r3, [r7, #32]
 800ecc6:	4413      	add	r3, r2
 800ecc8:	623b      	str	r3, [r7, #32]
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	781b      	ldrb	r3, [r3, #0]
 800ecce:	00da      	lsls	r2, r3, #3
 800ecd0:	6a3b      	ldr	r3, [r7, #32]
 800ecd2:	4413      	add	r3, r2
 800ecd4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ecd8:	61fb      	str	r3, [r7, #28]
 800ecda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ecde:	b29a      	uxth	r2, r3
 800ece0:	69fb      	ldr	r3, [r7, #28]
 800ece2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ece4:	683b      	ldr	r3, [r7, #0]
 800ece6:	891b      	ldrh	r3, [r3, #8]
 800ece8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	6959      	ldr	r1, [r3, #20]
 800ecf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ecf4:	b29b      	uxth	r3, r3
 800ecf6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ecfa:	6878      	ldr	r0, [r7, #4]
 800ecfc:	f000 fd19 	bl	800f732 <USB_WritePMA>
 800ed00:	e2e2      	b.n	800f2c8 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	785b      	ldrb	r3, [r3, #1]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d16b      	bne.n	800ede2 <USB_EPStartXfer+0x478>
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ed14:	b29b      	uxth	r3, r3
 800ed16:	461a      	mov	r2, r3
 800ed18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ed1a:	4413      	add	r3, r2
 800ed1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	781b      	ldrb	r3, [r3, #0]
 800ed22:	00da      	lsls	r2, r3, #3
 800ed24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ed26:	4413      	add	r3, r2
 800ed28:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ed2c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ed2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed30:	881b      	ldrh	r3, [r3, #0]
 800ed32:	b29b      	uxth	r3, r3
 800ed34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ed38:	b29a      	uxth	r2, r3
 800ed3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed3c:	801a      	strh	r2, [r3, #0]
 800ed3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d10a      	bne.n	800ed5c <USB_EPStartXfer+0x3f2>
 800ed46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed48:	881b      	ldrh	r3, [r3, #0]
 800ed4a:	b29b      	uxth	r3, r3
 800ed4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ed50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ed54:	b29a      	uxth	r2, r3
 800ed56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed58:	801a      	strh	r2, [r3, #0]
 800ed5a:	e05d      	b.n	800ee18 <USB_EPStartXfer+0x4ae>
 800ed5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ed60:	2b3e      	cmp	r3, #62	@ 0x3e
 800ed62:	d81c      	bhi.n	800ed9e <USB_EPStartXfer+0x434>
 800ed64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ed68:	085b      	lsrs	r3, r3, #1
 800ed6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ed6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ed72:	f003 0301 	and.w	r3, r3, #1
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d004      	beq.n	800ed84 <USB_EPStartXfer+0x41a>
 800ed7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ed7e:	3301      	adds	r3, #1
 800ed80:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ed84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed86:	881b      	ldrh	r3, [r3, #0]
 800ed88:	b29a      	uxth	r2, r3
 800ed8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ed8e:	b29b      	uxth	r3, r3
 800ed90:	029b      	lsls	r3, r3, #10
 800ed92:	b29b      	uxth	r3, r3
 800ed94:	4313      	orrs	r3, r2
 800ed96:	b29a      	uxth	r2, r3
 800ed98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed9a:	801a      	strh	r2, [r3, #0]
 800ed9c:	e03c      	b.n	800ee18 <USB_EPStartXfer+0x4ae>
 800ed9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eda2:	095b      	lsrs	r3, r3, #5
 800eda4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800eda8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800edac:	f003 031f 	and.w	r3, r3, #31
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d104      	bne.n	800edbe <USB_EPStartXfer+0x454>
 800edb4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800edb8:	3b01      	subs	r3, #1
 800edba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800edbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800edc0:	881b      	ldrh	r3, [r3, #0]
 800edc2:	b29a      	uxth	r2, r3
 800edc4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800edc8:	b29b      	uxth	r3, r3
 800edca:	029b      	lsls	r3, r3, #10
 800edcc:	b29b      	uxth	r3, r3
 800edce:	4313      	orrs	r3, r2
 800edd0:	b29b      	uxth	r3, r3
 800edd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800edd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800edda:	b29a      	uxth	r2, r3
 800eddc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800edde:	801a      	strh	r2, [r3, #0]
 800ede0:	e01a      	b.n	800ee18 <USB_EPStartXfer+0x4ae>
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	785b      	ldrb	r3, [r3, #1]
 800ede6:	2b01      	cmp	r3, #1
 800ede8:	d116      	bne.n	800ee18 <USB_EPStartXfer+0x4ae>
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	653b      	str	r3, [r7, #80]	@ 0x50
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800edf4:	b29b      	uxth	r3, r3
 800edf6:	461a      	mov	r2, r3
 800edf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800edfa:	4413      	add	r3, r2
 800edfc:	653b      	str	r3, [r7, #80]	@ 0x50
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	781b      	ldrb	r3, [r3, #0]
 800ee02:	00da      	lsls	r2, r3, #3
 800ee04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee06:	4413      	add	r3, r2
 800ee08:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ee0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ee0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ee12:	b29a      	uxth	r2, r3
 800ee14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ee16:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	891b      	ldrh	r3, [r3, #8]
 800ee1c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	6959      	ldr	r1, [r3, #20]
 800ee24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ee28:	b29b      	uxth	r3, r3
 800ee2a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	f000 fc7f 	bl	800f732 <USB_WritePMA>
            ep->xfer_buff += len;
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	695a      	ldr	r2, [r3, #20]
 800ee38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ee3c:	441a      	add	r2, r3
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	6a1a      	ldr	r2, [r3, #32]
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	691b      	ldr	r3, [r3, #16]
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	d907      	bls.n	800ee5e <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	6a1a      	ldr	r2, [r3, #32]
 800ee52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ee56:	1ad2      	subs	r2, r2, r3
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	621a      	str	r2, [r3, #32]
 800ee5c:	e006      	b.n	800ee6c <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	6a1b      	ldr	r3, [r3, #32]
 800ee62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	2200      	movs	r2, #0
 800ee6a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	785b      	ldrb	r3, [r3, #1]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d16b      	bne.n	800ef50 <USB_EPStartXfer+0x5e6>
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ee82:	b29b      	uxth	r3, r3
 800ee84:	461a      	mov	r2, r3
 800ee86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee88:	4413      	add	r3, r2
 800ee8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	781b      	ldrb	r3, [r3, #0]
 800ee90:	00da      	lsls	r2, r3, #3
 800ee92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee94:	4413      	add	r3, r2
 800ee96:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ee9a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee9e:	881b      	ldrh	r3, [r3, #0]
 800eea0:	b29b      	uxth	r3, r3
 800eea2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800eea6:	b29a      	uxth	r2, r3
 800eea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eeaa:	801a      	strh	r2, [r3, #0]
 800eeac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d10a      	bne.n	800eeca <USB_EPStartXfer+0x560>
 800eeb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eeb6:	881b      	ldrh	r3, [r3, #0]
 800eeb8:	b29b      	uxth	r3, r3
 800eeba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eebe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eec2:	b29a      	uxth	r2, r3
 800eec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eec6:	801a      	strh	r2, [r3, #0]
 800eec8:	e05b      	b.n	800ef82 <USB_EPStartXfer+0x618>
 800eeca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eece:	2b3e      	cmp	r3, #62	@ 0x3e
 800eed0:	d81c      	bhi.n	800ef0c <USB_EPStartXfer+0x5a2>
 800eed2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eed6:	085b      	lsrs	r3, r3, #1
 800eed8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800eedc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eee0:	f003 0301 	and.w	r3, r3, #1
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d004      	beq.n	800eef2 <USB_EPStartXfer+0x588>
 800eee8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800eeec:	3301      	adds	r3, #1
 800eeee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800eef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eef4:	881b      	ldrh	r3, [r3, #0]
 800eef6:	b29a      	uxth	r2, r3
 800eef8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800eefc:	b29b      	uxth	r3, r3
 800eefe:	029b      	lsls	r3, r3, #10
 800ef00:	b29b      	uxth	r3, r3
 800ef02:	4313      	orrs	r3, r2
 800ef04:	b29a      	uxth	r2, r3
 800ef06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef08:	801a      	strh	r2, [r3, #0]
 800ef0a:	e03a      	b.n	800ef82 <USB_EPStartXfer+0x618>
 800ef0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ef10:	095b      	lsrs	r3, r3, #5
 800ef12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ef16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ef1a:	f003 031f 	and.w	r3, r3, #31
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d104      	bne.n	800ef2c <USB_EPStartXfer+0x5c2>
 800ef22:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ef26:	3b01      	subs	r3, #1
 800ef28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ef2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef2e:	881b      	ldrh	r3, [r3, #0]
 800ef30:	b29a      	uxth	r2, r3
 800ef32:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ef36:	b29b      	uxth	r3, r3
 800ef38:	029b      	lsls	r3, r3, #10
 800ef3a:	b29b      	uxth	r3, r3
 800ef3c:	4313      	orrs	r3, r2
 800ef3e:	b29b      	uxth	r3, r3
 800ef40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ef44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ef48:	b29a      	uxth	r2, r3
 800ef4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef4c:	801a      	strh	r2, [r3, #0]
 800ef4e:	e018      	b.n	800ef82 <USB_EPStartXfer+0x618>
 800ef50:	683b      	ldr	r3, [r7, #0]
 800ef52:	785b      	ldrb	r3, [r3, #1]
 800ef54:	2b01      	cmp	r3, #1
 800ef56:	d114      	bne.n	800ef82 <USB_EPStartXfer+0x618>
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ef5e:	b29b      	uxth	r3, r3
 800ef60:	461a      	mov	r2, r3
 800ef62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef64:	4413      	add	r3, r2
 800ef66:	643b      	str	r3, [r7, #64]	@ 0x40
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	781b      	ldrb	r3, [r3, #0]
 800ef6c:	00da      	lsls	r2, r3, #3
 800ef6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef70:	4413      	add	r3, r2
 800ef72:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ef76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ef78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ef7c:	b29a      	uxth	r2, r3
 800ef7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef80:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ef82:	683b      	ldr	r3, [r7, #0]
 800ef84:	895b      	ldrh	r3, [r3, #10]
 800ef86:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ef8a:	683b      	ldr	r3, [r7, #0]
 800ef8c:	6959      	ldr	r1, [r3, #20]
 800ef8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ef92:	b29b      	uxth	r3, r3
 800ef94:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ef98:	6878      	ldr	r0, [r7, #4]
 800ef9a:	f000 fbca 	bl	800f732 <USB_WritePMA>
 800ef9e:	e193      	b.n	800f2c8 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	6a1b      	ldr	r3, [r3, #32]
 800efa4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800efa8:	687a      	ldr	r2, [r7, #4]
 800efaa:	683b      	ldr	r3, [r7, #0]
 800efac:	781b      	ldrb	r3, [r3, #0]
 800efae:	009b      	lsls	r3, r3, #2
 800efb0:	4413      	add	r3, r2
 800efb2:	881b      	ldrh	r3, [r3, #0]
 800efb4:	b29b      	uxth	r3, r3
 800efb6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800efba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800efbe:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800efc2:	687a      	ldr	r2, [r7, #4]
 800efc4:	683b      	ldr	r3, [r7, #0]
 800efc6:	781b      	ldrb	r3, [r3, #0]
 800efc8:	009b      	lsls	r3, r3, #2
 800efca:	441a      	add	r2, r3
 800efcc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800efd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800efd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800efd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800efdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800efe0:	b29b      	uxth	r3, r3
 800efe2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800efee:	b29b      	uxth	r3, r3
 800eff0:	461a      	mov	r2, r3
 800eff2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eff4:	4413      	add	r3, r2
 800eff6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	781b      	ldrb	r3, [r3, #0]
 800effc:	00da      	lsls	r2, r3, #3
 800effe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f000:	4413      	add	r3, r2
 800f002:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f006:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f008:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f00c:	b29a      	uxth	r2, r3
 800f00e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f010:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	891b      	ldrh	r3, [r3, #8]
 800f016:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	6959      	ldr	r1, [r3, #20]
 800f01e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f022:	b29b      	uxth	r3, r3
 800f024:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800f028:	6878      	ldr	r0, [r7, #4]
 800f02a:	f000 fb82 	bl	800f732 <USB_WritePMA>
 800f02e:	e14b      	b.n	800f2c8 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800f030:	683b      	ldr	r3, [r7, #0]
 800f032:	6a1a      	ldr	r2, [r3, #32]
 800f034:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f038:	1ad2      	subs	r2, r2, r3
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f03e:	687a      	ldr	r2, [r7, #4]
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	781b      	ldrb	r3, [r3, #0]
 800f044:	009b      	lsls	r3, r3, #2
 800f046:	4413      	add	r3, r2
 800f048:	881b      	ldrh	r3, [r3, #0]
 800f04a:	b29b      	uxth	r3, r3
 800f04c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f050:	2b00      	cmp	r3, #0
 800f052:	f000 809a 	beq.w	800f18a <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	673b      	str	r3, [r7, #112]	@ 0x70
 800f05a:	683b      	ldr	r3, [r7, #0]
 800f05c:	785b      	ldrb	r3, [r3, #1]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d16b      	bne.n	800f13a <USB_EPStartXfer+0x7d0>
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f06c:	b29b      	uxth	r3, r3
 800f06e:	461a      	mov	r2, r3
 800f070:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f072:	4413      	add	r3, r2
 800f074:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f076:	683b      	ldr	r3, [r7, #0]
 800f078:	781b      	ldrb	r3, [r3, #0]
 800f07a:	00da      	lsls	r2, r3, #3
 800f07c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f07e:	4413      	add	r3, r2
 800f080:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f084:	667b      	str	r3, [r7, #100]	@ 0x64
 800f086:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f088:	881b      	ldrh	r3, [r3, #0]
 800f08a:	b29b      	uxth	r3, r3
 800f08c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f090:	b29a      	uxth	r2, r3
 800f092:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f094:	801a      	strh	r2, [r3, #0]
 800f096:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d10a      	bne.n	800f0b4 <USB_EPStartXfer+0x74a>
 800f09e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f0a0:	881b      	ldrh	r3, [r3, #0]
 800f0a2:	b29b      	uxth	r3, r3
 800f0a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f0a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f0ac:	b29a      	uxth	r2, r3
 800f0ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f0b0:	801a      	strh	r2, [r3, #0]
 800f0b2:	e05b      	b.n	800f16c <USB_EPStartXfer+0x802>
 800f0b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f0b8:	2b3e      	cmp	r3, #62	@ 0x3e
 800f0ba:	d81c      	bhi.n	800f0f6 <USB_EPStartXfer+0x78c>
 800f0bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f0c0:	085b      	lsrs	r3, r3, #1
 800f0c2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f0c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f0ca:	f003 0301 	and.w	r3, r3, #1
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d004      	beq.n	800f0dc <USB_EPStartXfer+0x772>
 800f0d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f0d6:	3301      	adds	r3, #1
 800f0d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f0dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f0de:	881b      	ldrh	r3, [r3, #0]
 800f0e0:	b29a      	uxth	r2, r3
 800f0e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f0e6:	b29b      	uxth	r3, r3
 800f0e8:	029b      	lsls	r3, r3, #10
 800f0ea:	b29b      	uxth	r3, r3
 800f0ec:	4313      	orrs	r3, r2
 800f0ee:	b29a      	uxth	r2, r3
 800f0f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f0f2:	801a      	strh	r2, [r3, #0]
 800f0f4:	e03a      	b.n	800f16c <USB_EPStartXfer+0x802>
 800f0f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f0fa:	095b      	lsrs	r3, r3, #5
 800f0fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f100:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f104:	f003 031f 	and.w	r3, r3, #31
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d104      	bne.n	800f116 <USB_EPStartXfer+0x7ac>
 800f10c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f110:	3b01      	subs	r3, #1
 800f112:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f116:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f118:	881b      	ldrh	r3, [r3, #0]
 800f11a:	b29a      	uxth	r2, r3
 800f11c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f120:	b29b      	uxth	r3, r3
 800f122:	029b      	lsls	r3, r3, #10
 800f124:	b29b      	uxth	r3, r3
 800f126:	4313      	orrs	r3, r2
 800f128:	b29b      	uxth	r3, r3
 800f12a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f12e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f132:	b29a      	uxth	r2, r3
 800f134:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f136:	801a      	strh	r2, [r3, #0]
 800f138:	e018      	b.n	800f16c <USB_EPStartXfer+0x802>
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	785b      	ldrb	r3, [r3, #1]
 800f13e:	2b01      	cmp	r3, #1
 800f140:	d114      	bne.n	800f16c <USB_EPStartXfer+0x802>
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f148:	b29b      	uxth	r3, r3
 800f14a:	461a      	mov	r2, r3
 800f14c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f14e:	4413      	add	r3, r2
 800f150:	673b      	str	r3, [r7, #112]	@ 0x70
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	781b      	ldrb	r3, [r3, #0]
 800f156:	00da      	lsls	r2, r3, #3
 800f158:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f15a:	4413      	add	r3, r2
 800f15c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f160:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f162:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f166:	b29a      	uxth	r2, r3
 800f168:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f16a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	895b      	ldrh	r3, [r3, #10]
 800f170:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f174:	683b      	ldr	r3, [r7, #0]
 800f176:	6959      	ldr	r1, [r3, #20]
 800f178:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f17c:	b29b      	uxth	r3, r3
 800f17e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800f182:	6878      	ldr	r0, [r7, #4]
 800f184:	f000 fad5 	bl	800f732 <USB_WritePMA>
 800f188:	e09e      	b.n	800f2c8 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	785b      	ldrb	r3, [r3, #1]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d16b      	bne.n	800f26a <USB_EPStartXfer+0x900>
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f19c:	b29b      	uxth	r3, r3
 800f19e:	461a      	mov	r2, r3
 800f1a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f1a2:	4413      	add	r3, r2
 800f1a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f1a6:	683b      	ldr	r3, [r7, #0]
 800f1a8:	781b      	ldrb	r3, [r3, #0]
 800f1aa:	00da      	lsls	r2, r3, #3
 800f1ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f1ae:	4413      	add	r3, r2
 800f1b0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f1b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f1b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f1b8:	881b      	ldrh	r3, [r3, #0]
 800f1ba:	b29b      	uxth	r3, r3
 800f1bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f1c0:	b29a      	uxth	r2, r3
 800f1c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f1c4:	801a      	strh	r2, [r3, #0]
 800f1c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d10a      	bne.n	800f1e4 <USB_EPStartXfer+0x87a>
 800f1ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f1d0:	881b      	ldrh	r3, [r3, #0]
 800f1d2:	b29b      	uxth	r3, r3
 800f1d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f1d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f1dc:	b29a      	uxth	r2, r3
 800f1de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f1e0:	801a      	strh	r2, [r3, #0]
 800f1e2:	e063      	b.n	800f2ac <USB_EPStartXfer+0x942>
 800f1e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f1e8:	2b3e      	cmp	r3, #62	@ 0x3e
 800f1ea:	d81c      	bhi.n	800f226 <USB_EPStartXfer+0x8bc>
 800f1ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f1f0:	085b      	lsrs	r3, r3, #1
 800f1f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f1f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f1fa:	f003 0301 	and.w	r3, r3, #1
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d004      	beq.n	800f20c <USB_EPStartXfer+0x8a2>
 800f202:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f206:	3301      	adds	r3, #1
 800f208:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f20c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f20e:	881b      	ldrh	r3, [r3, #0]
 800f210:	b29a      	uxth	r2, r3
 800f212:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f216:	b29b      	uxth	r3, r3
 800f218:	029b      	lsls	r3, r3, #10
 800f21a:	b29b      	uxth	r3, r3
 800f21c:	4313      	orrs	r3, r2
 800f21e:	b29a      	uxth	r2, r3
 800f220:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f222:	801a      	strh	r2, [r3, #0]
 800f224:	e042      	b.n	800f2ac <USB_EPStartXfer+0x942>
 800f226:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f22a:	095b      	lsrs	r3, r3, #5
 800f22c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f230:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f234:	f003 031f 	and.w	r3, r3, #31
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d104      	bne.n	800f246 <USB_EPStartXfer+0x8dc>
 800f23c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f240:	3b01      	subs	r3, #1
 800f242:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f246:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f248:	881b      	ldrh	r3, [r3, #0]
 800f24a:	b29a      	uxth	r2, r3
 800f24c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f250:	b29b      	uxth	r3, r3
 800f252:	029b      	lsls	r3, r3, #10
 800f254:	b29b      	uxth	r3, r3
 800f256:	4313      	orrs	r3, r2
 800f258:	b29b      	uxth	r3, r3
 800f25a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f25e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f262:	b29a      	uxth	r2, r3
 800f264:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f266:	801a      	strh	r2, [r3, #0]
 800f268:	e020      	b.n	800f2ac <USB_EPStartXfer+0x942>
 800f26a:	683b      	ldr	r3, [r7, #0]
 800f26c:	785b      	ldrb	r3, [r3, #1]
 800f26e:	2b01      	cmp	r3, #1
 800f270:	d11c      	bne.n	800f2ac <USB_EPStartXfer+0x942>
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f27e:	b29b      	uxth	r3, r3
 800f280:	461a      	mov	r2, r3
 800f282:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f286:	4413      	add	r3, r2
 800f288:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	781b      	ldrb	r3, [r3, #0]
 800f290:	00da      	lsls	r2, r3, #3
 800f292:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f296:	4413      	add	r3, r2
 800f298:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f29c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f2a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f2a4:	b29a      	uxth	r2, r3
 800f2a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f2aa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800f2ac:	683b      	ldr	r3, [r7, #0]
 800f2ae:	891b      	ldrh	r3, [r3, #8]
 800f2b0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	6959      	ldr	r1, [r3, #20]
 800f2b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f2bc:	b29b      	uxth	r3, r3
 800f2be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800f2c2:	6878      	ldr	r0, [r7, #4]
 800f2c4:	f000 fa35 	bl	800f732 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800f2c8:	687a      	ldr	r2, [r7, #4]
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	781b      	ldrb	r3, [r3, #0]
 800f2ce:	009b      	lsls	r3, r3, #2
 800f2d0:	4413      	add	r3, r2
 800f2d2:	881b      	ldrh	r3, [r3, #0]
 800f2d4:	b29b      	uxth	r3, r3
 800f2d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f2da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f2de:	817b      	strh	r3, [r7, #10]
 800f2e0:	897b      	ldrh	r3, [r7, #10]
 800f2e2:	f083 0310 	eor.w	r3, r3, #16
 800f2e6:	817b      	strh	r3, [r7, #10]
 800f2e8:	897b      	ldrh	r3, [r7, #10]
 800f2ea:	f083 0320 	eor.w	r3, r3, #32
 800f2ee:	817b      	strh	r3, [r7, #10]
 800f2f0:	687a      	ldr	r2, [r7, #4]
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	781b      	ldrb	r3, [r3, #0]
 800f2f6:	009b      	lsls	r3, r3, #2
 800f2f8:	441a      	add	r2, r3
 800f2fa:	897b      	ldrh	r3, [r7, #10]
 800f2fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f300:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f304:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f308:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f30c:	b29b      	uxth	r3, r3
 800f30e:	8013      	strh	r3, [r2, #0]
 800f310:	e0d5      	b.n	800f4be <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	7b1b      	ldrb	r3, [r3, #12]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d156      	bne.n	800f3c8 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800f31a:	683b      	ldr	r3, [r7, #0]
 800f31c:	699b      	ldr	r3, [r3, #24]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d122      	bne.n	800f368 <USB_EPStartXfer+0x9fe>
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	78db      	ldrb	r3, [r3, #3]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d11e      	bne.n	800f368 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800f32a:	687a      	ldr	r2, [r7, #4]
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	781b      	ldrb	r3, [r3, #0]
 800f330:	009b      	lsls	r3, r3, #2
 800f332:	4413      	add	r3, r2
 800f334:	881b      	ldrh	r3, [r3, #0]
 800f336:	b29b      	uxth	r3, r3
 800f338:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f33c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f340:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800f344:	687a      	ldr	r2, [r7, #4]
 800f346:	683b      	ldr	r3, [r7, #0]
 800f348:	781b      	ldrb	r3, [r3, #0]
 800f34a:	009b      	lsls	r3, r3, #2
 800f34c:	441a      	add	r2, r3
 800f34e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800f352:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f356:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f35a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800f35e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f362:	b29b      	uxth	r3, r3
 800f364:	8013      	strh	r3, [r2, #0]
 800f366:	e01d      	b.n	800f3a4 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800f368:	687a      	ldr	r2, [r7, #4]
 800f36a:	683b      	ldr	r3, [r7, #0]
 800f36c:	781b      	ldrb	r3, [r3, #0]
 800f36e:	009b      	lsls	r3, r3, #2
 800f370:	4413      	add	r3, r2
 800f372:	881b      	ldrh	r3, [r3, #0]
 800f374:	b29b      	uxth	r3, r3
 800f376:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800f37a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f37e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800f382:	687a      	ldr	r2, [r7, #4]
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	781b      	ldrb	r3, [r3, #0]
 800f388:	009b      	lsls	r3, r3, #2
 800f38a:	441a      	add	r2, r3
 800f38c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800f390:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f394:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f398:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f39c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f3a0:	b29b      	uxth	r3, r3
 800f3a2:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	699a      	ldr	r2, [r3, #24]
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	691b      	ldr	r3, [r3, #16]
 800f3ac:	429a      	cmp	r2, r3
 800f3ae:	d907      	bls.n	800f3c0 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800f3b0:	683b      	ldr	r3, [r7, #0]
 800f3b2:	699a      	ldr	r2, [r3, #24]
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	691b      	ldr	r3, [r3, #16]
 800f3b8:	1ad2      	subs	r2, r2, r3
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	619a      	str	r2, [r3, #24]
 800f3be:	e054      	b.n	800f46a <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	619a      	str	r2, [r3, #24]
 800f3c6:	e050      	b.n	800f46a <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	78db      	ldrb	r3, [r3, #3]
 800f3cc:	2b02      	cmp	r3, #2
 800f3ce:	d142      	bne.n	800f456 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	69db      	ldr	r3, [r3, #28]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d048      	beq.n	800f46a <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800f3d8:	687a      	ldr	r2, [r7, #4]
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	781b      	ldrb	r3, [r3, #0]
 800f3de:	009b      	lsls	r3, r3, #2
 800f3e0:	4413      	add	r3, r2
 800f3e2:	881b      	ldrh	r3, [r3, #0]
 800f3e4:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f3e8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800f3ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d005      	beq.n	800f400 <USB_EPStartXfer+0xa96>
 800f3f4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800f3f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d10b      	bne.n	800f418 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f400:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800f404:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d12e      	bne.n	800f46a <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f40c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800f410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f414:	2b00      	cmp	r3, #0
 800f416:	d128      	bne.n	800f46a <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800f418:	687a      	ldr	r2, [r7, #4]
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	781b      	ldrb	r3, [r3, #0]
 800f41e:	009b      	lsls	r3, r3, #2
 800f420:	4413      	add	r3, r2
 800f422:	881b      	ldrh	r3, [r3, #0]
 800f424:	b29b      	uxth	r3, r3
 800f426:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f42a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f42e:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800f432:	687a      	ldr	r2, [r7, #4]
 800f434:	683b      	ldr	r3, [r7, #0]
 800f436:	781b      	ldrb	r3, [r3, #0]
 800f438:	009b      	lsls	r3, r3, #2
 800f43a:	441a      	add	r2, r3
 800f43c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800f440:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f444:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f448:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f44c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f450:	b29b      	uxth	r3, r3
 800f452:	8013      	strh	r3, [r2, #0]
 800f454:	e009      	b.n	800f46a <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	78db      	ldrb	r3, [r3, #3]
 800f45a:	2b01      	cmp	r3, #1
 800f45c:	d103      	bne.n	800f466 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	2200      	movs	r2, #0
 800f462:	619a      	str	r2, [r3, #24]
 800f464:	e001      	b.n	800f46a <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800f466:	2301      	movs	r3, #1
 800f468:	e02a      	b.n	800f4c0 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f46a:	687a      	ldr	r2, [r7, #4]
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	781b      	ldrb	r3, [r3, #0]
 800f470:	009b      	lsls	r3, r3, #2
 800f472:	4413      	add	r3, r2
 800f474:	881b      	ldrh	r3, [r3, #0]
 800f476:	b29b      	uxth	r3, r3
 800f478:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f47c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f480:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800f484:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f488:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f48c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800f490:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f494:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800f498:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800f49c:	687a      	ldr	r2, [r7, #4]
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	781b      	ldrb	r3, [r3, #0]
 800f4a2:	009b      	lsls	r3, r3, #2
 800f4a4:	441a      	add	r2, r3
 800f4a6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f4aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f4ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f4b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f4b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f4ba:	b29b      	uxth	r3, r3
 800f4bc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f4be:	2300      	movs	r3, #0
}
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	37b0      	adds	r7, #176	@ 0xb0
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd80      	pop	{r7, pc}

0800f4c8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f4c8:	b480      	push	{r7}
 800f4ca:	b085      	sub	sp, #20
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
 800f4d0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	785b      	ldrb	r3, [r3, #1]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d020      	beq.n	800f51c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800f4da:	687a      	ldr	r2, [r7, #4]
 800f4dc:	683b      	ldr	r3, [r7, #0]
 800f4de:	781b      	ldrb	r3, [r3, #0]
 800f4e0:	009b      	lsls	r3, r3, #2
 800f4e2:	4413      	add	r3, r2
 800f4e4:	881b      	ldrh	r3, [r3, #0]
 800f4e6:	b29b      	uxth	r3, r3
 800f4e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f4ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f4f0:	81bb      	strh	r3, [r7, #12]
 800f4f2:	89bb      	ldrh	r3, [r7, #12]
 800f4f4:	f083 0310 	eor.w	r3, r3, #16
 800f4f8:	81bb      	strh	r3, [r7, #12]
 800f4fa:	687a      	ldr	r2, [r7, #4]
 800f4fc:	683b      	ldr	r3, [r7, #0]
 800f4fe:	781b      	ldrb	r3, [r3, #0]
 800f500:	009b      	lsls	r3, r3, #2
 800f502:	441a      	add	r2, r3
 800f504:	89bb      	ldrh	r3, [r7, #12]
 800f506:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f50a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f50e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f516:	b29b      	uxth	r3, r3
 800f518:	8013      	strh	r3, [r2, #0]
 800f51a:	e01f      	b.n	800f55c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800f51c:	687a      	ldr	r2, [r7, #4]
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	781b      	ldrb	r3, [r3, #0]
 800f522:	009b      	lsls	r3, r3, #2
 800f524:	4413      	add	r3, r2
 800f526:	881b      	ldrh	r3, [r3, #0]
 800f528:	b29b      	uxth	r3, r3
 800f52a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f52e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f532:	81fb      	strh	r3, [r7, #14]
 800f534:	89fb      	ldrh	r3, [r7, #14]
 800f536:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f53a:	81fb      	strh	r3, [r7, #14]
 800f53c:	687a      	ldr	r2, [r7, #4]
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	781b      	ldrb	r3, [r3, #0]
 800f542:	009b      	lsls	r3, r3, #2
 800f544:	441a      	add	r2, r3
 800f546:	89fb      	ldrh	r3, [r7, #14]
 800f548:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f54c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f550:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f554:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f558:	b29b      	uxth	r3, r3
 800f55a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f55c:	2300      	movs	r3, #0
}
 800f55e:	4618      	mov	r0, r3
 800f560:	3714      	adds	r7, #20
 800f562:	46bd      	mov	sp, r7
 800f564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f568:	4770      	bx	lr

0800f56a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f56a:	b480      	push	{r7}
 800f56c:	b087      	sub	sp, #28
 800f56e:	af00      	add	r7, sp, #0
 800f570:	6078      	str	r0, [r7, #4]
 800f572:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800f574:	683b      	ldr	r3, [r7, #0]
 800f576:	785b      	ldrb	r3, [r3, #1]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d04c      	beq.n	800f616 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f57c:	687a      	ldr	r2, [r7, #4]
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	781b      	ldrb	r3, [r3, #0]
 800f582:	009b      	lsls	r3, r3, #2
 800f584:	4413      	add	r3, r2
 800f586:	881b      	ldrh	r3, [r3, #0]
 800f588:	823b      	strh	r3, [r7, #16]
 800f58a:	8a3b      	ldrh	r3, [r7, #16]
 800f58c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f590:	2b00      	cmp	r3, #0
 800f592:	d01b      	beq.n	800f5cc <USB_EPClearStall+0x62>
 800f594:	687a      	ldr	r2, [r7, #4]
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	781b      	ldrb	r3, [r3, #0]
 800f59a:	009b      	lsls	r3, r3, #2
 800f59c:	4413      	add	r3, r2
 800f59e:	881b      	ldrh	r3, [r3, #0]
 800f5a0:	b29b      	uxth	r3, r3
 800f5a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f5a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f5aa:	81fb      	strh	r3, [r7, #14]
 800f5ac:	687a      	ldr	r2, [r7, #4]
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	781b      	ldrb	r3, [r3, #0]
 800f5b2:	009b      	lsls	r3, r3, #2
 800f5b4:	441a      	add	r2, r3
 800f5b6:	89fb      	ldrh	r3, [r7, #14]
 800f5b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f5bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f5c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f5c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f5c8:	b29b      	uxth	r3, r3
 800f5ca:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800f5cc:	683b      	ldr	r3, [r7, #0]
 800f5ce:	78db      	ldrb	r3, [r3, #3]
 800f5d0:	2b01      	cmp	r3, #1
 800f5d2:	d06c      	beq.n	800f6ae <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f5d4:	687a      	ldr	r2, [r7, #4]
 800f5d6:	683b      	ldr	r3, [r7, #0]
 800f5d8:	781b      	ldrb	r3, [r3, #0]
 800f5da:	009b      	lsls	r3, r3, #2
 800f5dc:	4413      	add	r3, r2
 800f5de:	881b      	ldrh	r3, [r3, #0]
 800f5e0:	b29b      	uxth	r3, r3
 800f5e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f5e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f5ea:	81bb      	strh	r3, [r7, #12]
 800f5ec:	89bb      	ldrh	r3, [r7, #12]
 800f5ee:	f083 0320 	eor.w	r3, r3, #32
 800f5f2:	81bb      	strh	r3, [r7, #12]
 800f5f4:	687a      	ldr	r2, [r7, #4]
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	781b      	ldrb	r3, [r3, #0]
 800f5fa:	009b      	lsls	r3, r3, #2
 800f5fc:	441a      	add	r2, r3
 800f5fe:	89bb      	ldrh	r3, [r7, #12]
 800f600:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f604:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f608:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f60c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f610:	b29b      	uxth	r3, r3
 800f612:	8013      	strh	r3, [r2, #0]
 800f614:	e04b      	b.n	800f6ae <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f616:	687a      	ldr	r2, [r7, #4]
 800f618:	683b      	ldr	r3, [r7, #0]
 800f61a:	781b      	ldrb	r3, [r3, #0]
 800f61c:	009b      	lsls	r3, r3, #2
 800f61e:	4413      	add	r3, r2
 800f620:	881b      	ldrh	r3, [r3, #0]
 800f622:	82fb      	strh	r3, [r7, #22]
 800f624:	8afb      	ldrh	r3, [r7, #22]
 800f626:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d01b      	beq.n	800f666 <USB_EPClearStall+0xfc>
 800f62e:	687a      	ldr	r2, [r7, #4]
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	781b      	ldrb	r3, [r3, #0]
 800f634:	009b      	lsls	r3, r3, #2
 800f636:	4413      	add	r3, r2
 800f638:	881b      	ldrh	r3, [r3, #0]
 800f63a:	b29b      	uxth	r3, r3
 800f63c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f640:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f644:	82bb      	strh	r3, [r7, #20]
 800f646:	687a      	ldr	r2, [r7, #4]
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	781b      	ldrb	r3, [r3, #0]
 800f64c:	009b      	lsls	r3, r3, #2
 800f64e:	441a      	add	r2, r3
 800f650:	8abb      	ldrh	r3, [r7, #20]
 800f652:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f656:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f65a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f65e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f662:	b29b      	uxth	r3, r3
 800f664:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f666:	687a      	ldr	r2, [r7, #4]
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	781b      	ldrb	r3, [r3, #0]
 800f66c:	009b      	lsls	r3, r3, #2
 800f66e:	4413      	add	r3, r2
 800f670:	881b      	ldrh	r3, [r3, #0]
 800f672:	b29b      	uxth	r3, r3
 800f674:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f678:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f67c:	827b      	strh	r3, [r7, #18]
 800f67e:	8a7b      	ldrh	r3, [r7, #18]
 800f680:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f684:	827b      	strh	r3, [r7, #18]
 800f686:	8a7b      	ldrh	r3, [r7, #18]
 800f688:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800f68c:	827b      	strh	r3, [r7, #18]
 800f68e:	687a      	ldr	r2, [r7, #4]
 800f690:	683b      	ldr	r3, [r7, #0]
 800f692:	781b      	ldrb	r3, [r3, #0]
 800f694:	009b      	lsls	r3, r3, #2
 800f696:	441a      	add	r2, r3
 800f698:	8a7b      	ldrh	r3, [r7, #18]
 800f69a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f69e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f6a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f6a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f6aa:	b29b      	uxth	r3, r3
 800f6ac:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f6ae:	2300      	movs	r3, #0
}
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	371c      	adds	r7, #28
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ba:	4770      	bx	lr

0800f6bc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800f6bc:	b480      	push	{r7}
 800f6be:	b083      	sub	sp, #12
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
 800f6c4:	460b      	mov	r3, r1
 800f6c6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800f6c8:	78fb      	ldrb	r3, [r7, #3]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d103      	bne.n	800f6d6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	2280      	movs	r2, #128	@ 0x80
 800f6d2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800f6d6:	2300      	movs	r3, #0
}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	370c      	adds	r7, #12
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e2:	4770      	bx	lr

0800f6e4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800f6e4:	b480      	push	{r7}
 800f6e6:	b083      	sub	sp, #12
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f6f2:	b29b      	uxth	r3, r3
 800f6f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f6f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f6fc:	b29a      	uxth	r2, r3
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800f704:	2300      	movs	r3, #0
}
 800f706:	4618      	mov	r0, r3
 800f708:	370c      	adds	r7, #12
 800f70a:	46bd      	mov	sp, r7
 800f70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f710:	4770      	bx	lr

0800f712 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800f712:	b480      	push	{r7}
 800f714:	b085      	sub	sp, #20
 800f716:	af00      	add	r7, sp, #0
 800f718:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800f720:	b29b      	uxth	r3, r3
 800f722:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800f724:	68fb      	ldr	r3, [r7, #12]
}
 800f726:	4618      	mov	r0, r3
 800f728:	3714      	adds	r7, #20
 800f72a:	46bd      	mov	sp, r7
 800f72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f730:	4770      	bx	lr

0800f732 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f732:	b480      	push	{r7}
 800f734:	b08b      	sub	sp, #44	@ 0x2c
 800f736:	af00      	add	r7, sp, #0
 800f738:	60f8      	str	r0, [r7, #12]
 800f73a:	60b9      	str	r1, [r7, #8]
 800f73c:	4611      	mov	r1, r2
 800f73e:	461a      	mov	r2, r3
 800f740:	460b      	mov	r3, r1
 800f742:	80fb      	strh	r3, [r7, #6]
 800f744:	4613      	mov	r3, r2
 800f746:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800f748:	88bb      	ldrh	r3, [r7, #4]
 800f74a:	3301      	adds	r3, #1
 800f74c:	085b      	lsrs	r3, r3, #1
 800f74e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800f754:	68bb      	ldr	r3, [r7, #8]
 800f756:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f758:	88fa      	ldrh	r2, [r7, #6]
 800f75a:	697b      	ldr	r3, [r7, #20]
 800f75c:	4413      	add	r3, r2
 800f75e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f762:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800f764:	69bb      	ldr	r3, [r7, #24]
 800f766:	627b      	str	r3, [r7, #36]	@ 0x24
 800f768:	e01b      	b.n	800f7a2 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800f76a:	69fb      	ldr	r3, [r7, #28]
 800f76c:	781b      	ldrb	r3, [r3, #0]
 800f76e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800f770:	69fb      	ldr	r3, [r7, #28]
 800f772:	3301      	adds	r3, #1
 800f774:	781b      	ldrb	r3, [r3, #0]
 800f776:	021b      	lsls	r3, r3, #8
 800f778:	b21a      	sxth	r2, r3
 800f77a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f77e:	4313      	orrs	r3, r2
 800f780:	b21b      	sxth	r3, r3
 800f782:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800f784:	6a3b      	ldr	r3, [r7, #32]
 800f786:	8a7a      	ldrh	r2, [r7, #18]
 800f788:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800f78a:	6a3b      	ldr	r3, [r7, #32]
 800f78c:	3302      	adds	r3, #2
 800f78e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800f790:	69fb      	ldr	r3, [r7, #28]
 800f792:	3301      	adds	r3, #1
 800f794:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800f796:	69fb      	ldr	r3, [r7, #28]
 800f798:	3301      	adds	r3, #1
 800f79a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800f79c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f79e:	3b01      	subs	r3, #1
 800f7a0:	627b      	str	r3, [r7, #36]	@ 0x24
 800f7a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d1e0      	bne.n	800f76a <USB_WritePMA+0x38>
  }
}
 800f7a8:	bf00      	nop
 800f7aa:	bf00      	nop
 800f7ac:	372c      	adds	r7, #44	@ 0x2c
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b4:	4770      	bx	lr

0800f7b6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f7b6:	b480      	push	{r7}
 800f7b8:	b08b      	sub	sp, #44	@ 0x2c
 800f7ba:	af00      	add	r7, sp, #0
 800f7bc:	60f8      	str	r0, [r7, #12]
 800f7be:	60b9      	str	r1, [r7, #8]
 800f7c0:	4611      	mov	r1, r2
 800f7c2:	461a      	mov	r2, r3
 800f7c4:	460b      	mov	r3, r1
 800f7c6:	80fb      	strh	r3, [r7, #6]
 800f7c8:	4613      	mov	r3, r2
 800f7ca:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800f7cc:	88bb      	ldrh	r3, [r7, #4]
 800f7ce:	085b      	lsrs	r3, r3, #1
 800f7d0:	b29b      	uxth	r3, r3
 800f7d2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800f7d8:	68bb      	ldr	r3, [r7, #8]
 800f7da:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f7dc:	88fa      	ldrh	r2, [r7, #6]
 800f7de:	697b      	ldr	r3, [r7, #20]
 800f7e0:	4413      	add	r3, r2
 800f7e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f7e6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800f7e8:	69bb      	ldr	r3, [r7, #24]
 800f7ea:	627b      	str	r3, [r7, #36]	@ 0x24
 800f7ec:	e018      	b.n	800f820 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800f7ee:	6a3b      	ldr	r3, [r7, #32]
 800f7f0:	881b      	ldrh	r3, [r3, #0]
 800f7f2:	b29b      	uxth	r3, r3
 800f7f4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800f7f6:	6a3b      	ldr	r3, [r7, #32]
 800f7f8:	3302      	adds	r3, #2
 800f7fa:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800f7fc:	693b      	ldr	r3, [r7, #16]
 800f7fe:	b2da      	uxtb	r2, r3
 800f800:	69fb      	ldr	r3, [r7, #28]
 800f802:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800f804:	69fb      	ldr	r3, [r7, #28]
 800f806:	3301      	adds	r3, #1
 800f808:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800f80a:	693b      	ldr	r3, [r7, #16]
 800f80c:	0a1b      	lsrs	r3, r3, #8
 800f80e:	b2da      	uxtb	r2, r3
 800f810:	69fb      	ldr	r3, [r7, #28]
 800f812:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800f814:	69fb      	ldr	r3, [r7, #28]
 800f816:	3301      	adds	r3, #1
 800f818:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800f81a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f81c:	3b01      	subs	r3, #1
 800f81e:	627b      	str	r3, [r7, #36]	@ 0x24
 800f820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f822:	2b00      	cmp	r3, #0
 800f824:	d1e3      	bne.n	800f7ee <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800f826:	88bb      	ldrh	r3, [r7, #4]
 800f828:	f003 0301 	and.w	r3, r3, #1
 800f82c:	b29b      	uxth	r3, r3
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d007      	beq.n	800f842 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800f832:	6a3b      	ldr	r3, [r7, #32]
 800f834:	881b      	ldrh	r3, [r3, #0]
 800f836:	b29b      	uxth	r3, r3
 800f838:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800f83a:	693b      	ldr	r3, [r7, #16]
 800f83c:	b2da      	uxtb	r2, r3
 800f83e:	69fb      	ldr	r3, [r7, #28]
 800f840:	701a      	strb	r2, [r3, #0]
  }
}
 800f842:	bf00      	nop
 800f844:	372c      	adds	r7, #44	@ 0x2c
 800f846:	46bd      	mov	sp, r7
 800f848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84c:	4770      	bx	lr

0800f84e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f84e:	b580      	push	{r7, lr}
 800f850:	b084      	sub	sp, #16
 800f852:	af00      	add	r7, sp, #0
 800f854:	6078      	str	r0, [r7, #4]
 800f856:	460b      	mov	r3, r1
 800f858:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f85a:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800f85e:	f002 f8a3 	bl	80119a8 <USBD_static_malloc>
 800f862:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d105      	bne.n	800f876 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	2200      	movs	r2, #0
 800f86e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800f872:	2302      	movs	r3, #2
 800f874:	e066      	b.n	800f944 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	68fa      	ldr	r2, [r7, #12]
 800f87a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	7c1b      	ldrb	r3, [r3, #16]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d119      	bne.n	800f8ba <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f886:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f88a:	2202      	movs	r2, #2
 800f88c:	2181      	movs	r1, #129	@ 0x81
 800f88e:	6878      	ldr	r0, [r7, #4]
 800f890:	f001 ff31 	bl	80116f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2201      	movs	r2, #1
 800f898:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f89a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f89e:	2202      	movs	r2, #2
 800f8a0:	2101      	movs	r1, #1
 800f8a2:	6878      	ldr	r0, [r7, #4]
 800f8a4:	f001 ff27 	bl	80116f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	2201      	movs	r2, #1
 800f8ac:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	2210      	movs	r2, #16
 800f8b4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800f8b8:	e016      	b.n	800f8e8 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f8ba:	2340      	movs	r3, #64	@ 0x40
 800f8bc:	2202      	movs	r2, #2
 800f8be:	2181      	movs	r1, #129	@ 0x81
 800f8c0:	6878      	ldr	r0, [r7, #4]
 800f8c2:	f001 ff18 	bl	80116f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	2201      	movs	r2, #1
 800f8ca:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f8cc:	2340      	movs	r3, #64	@ 0x40
 800f8ce:	2202      	movs	r2, #2
 800f8d0:	2101      	movs	r1, #1
 800f8d2:	6878      	ldr	r0, [r7, #4]
 800f8d4:	f001 ff0f 	bl	80116f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	2201      	movs	r2, #1
 800f8dc:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	2210      	movs	r2, #16
 800f8e4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f8e8:	2308      	movs	r3, #8
 800f8ea:	2203      	movs	r2, #3
 800f8ec:	2182      	movs	r1, #130	@ 0x82
 800f8ee:	6878      	ldr	r0, [r7, #4]
 800f8f0:	f001 ff01 	bl	80116f6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	2201      	movs	r2, #1
 800f8f8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	2200      	movs	r2, #0
 800f90a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	2200      	movs	r2, #0
 800f912:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	7c1b      	ldrb	r3, [r3, #16]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d109      	bne.n	800f932 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f924:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f928:	2101      	movs	r1, #1
 800f92a:	6878      	ldr	r0, [r7, #4]
 800f92c:	f001 ffd2 	bl	80118d4 <USBD_LL_PrepareReceive>
 800f930:	e007      	b.n	800f942 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f938:	2340      	movs	r3, #64	@ 0x40
 800f93a:	2101      	movs	r1, #1
 800f93c:	6878      	ldr	r0, [r7, #4]
 800f93e:	f001 ffc9 	bl	80118d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f942:	2300      	movs	r3, #0
}
 800f944:	4618      	mov	r0, r3
 800f946:	3710      	adds	r7, #16
 800f948:	46bd      	mov	sp, r7
 800f94a:	bd80      	pop	{r7, pc}

0800f94c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b082      	sub	sp, #8
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
 800f954:	460b      	mov	r3, r1
 800f956:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800f958:	2181      	movs	r1, #129	@ 0x81
 800f95a:	6878      	ldr	r0, [r7, #4]
 800f95c:	f001 fef1 	bl	8011742 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2200      	movs	r2, #0
 800f964:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f966:	2101      	movs	r1, #1
 800f968:	6878      	ldr	r0, [r7, #4]
 800f96a:	f001 feea 	bl	8011742 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	2200      	movs	r2, #0
 800f972:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800f976:	2182      	movs	r1, #130	@ 0x82
 800f978:	6878      	ldr	r0, [r7, #4]
 800f97a:	f001 fee2 	bl	8011742 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	2200      	movs	r2, #0
 800f982:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	2200      	movs	r2, #0
 800f98a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f994:	2b00      	cmp	r3, #0
 800f996:	d00e      	beq.n	800f9b6 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f99e:	685b      	ldr	r3, [r3, #4]
 800f9a0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	f002 f80b 	bl	80119c4 <USBD_static_free>
    pdev->pClassData = NULL;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f9b6:	2300      	movs	r3, #0
}
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	3708      	adds	r7, #8
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	bd80      	pop	{r7, pc}

0800f9c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b086      	sub	sp, #24
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
 800f9c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f9d0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f9da:	2300      	movs	r3, #0
 800f9dc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f9de:	693b      	ldr	r3, [r7, #16]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d101      	bne.n	800f9e8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800f9e4:	2303      	movs	r3, #3
 800f9e6:	e0af      	b.n	800fb48 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f9e8:	683b      	ldr	r3, [r7, #0]
 800f9ea:	781b      	ldrb	r3, [r3, #0]
 800f9ec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d03f      	beq.n	800fa74 <USBD_CDC_Setup+0xb4>
 800f9f4:	2b20      	cmp	r3, #32
 800f9f6:	f040 809f 	bne.w	800fb38 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f9fa:	683b      	ldr	r3, [r7, #0]
 800f9fc:	88db      	ldrh	r3, [r3, #6]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d02e      	beq.n	800fa60 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800fa02:	683b      	ldr	r3, [r7, #0]
 800fa04:	781b      	ldrb	r3, [r3, #0]
 800fa06:	b25b      	sxtb	r3, r3
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	da16      	bge.n	800fa3a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800fa12:	689b      	ldr	r3, [r3, #8]
 800fa14:	683a      	ldr	r2, [r7, #0]
 800fa16:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800fa18:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800fa1a:	683a      	ldr	r2, [r7, #0]
 800fa1c:	88d2      	ldrh	r2, [r2, #6]
 800fa1e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800fa20:	683b      	ldr	r3, [r7, #0]
 800fa22:	88db      	ldrh	r3, [r3, #6]
 800fa24:	2b07      	cmp	r3, #7
 800fa26:	bf28      	it	cs
 800fa28:	2307      	movcs	r3, #7
 800fa2a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800fa2c:	693b      	ldr	r3, [r7, #16]
 800fa2e:	89fa      	ldrh	r2, [r7, #14]
 800fa30:	4619      	mov	r1, r3
 800fa32:	6878      	ldr	r0, [r7, #4]
 800fa34:	f001 fa9d 	bl	8010f72 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800fa38:	e085      	b.n	800fb46 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800fa3a:	683b      	ldr	r3, [r7, #0]
 800fa3c:	785a      	ldrb	r2, [r3, #1]
 800fa3e:	693b      	ldr	r3, [r7, #16]
 800fa40:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	88db      	ldrh	r3, [r3, #6]
 800fa48:	b2da      	uxtb	r2, r3
 800fa4a:	693b      	ldr	r3, [r7, #16]
 800fa4c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800fa50:	6939      	ldr	r1, [r7, #16]
 800fa52:	683b      	ldr	r3, [r7, #0]
 800fa54:	88db      	ldrh	r3, [r3, #6]
 800fa56:	461a      	mov	r2, r3
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	f001 fab6 	bl	8010fca <USBD_CtlPrepareRx>
      break;
 800fa5e:	e072      	b.n	800fb46 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800fa66:	689b      	ldr	r3, [r3, #8]
 800fa68:	683a      	ldr	r2, [r7, #0]
 800fa6a:	7850      	ldrb	r0, [r2, #1]
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	6839      	ldr	r1, [r7, #0]
 800fa70:	4798      	blx	r3
      break;
 800fa72:	e068      	b.n	800fb46 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fa74:	683b      	ldr	r3, [r7, #0]
 800fa76:	785b      	ldrb	r3, [r3, #1]
 800fa78:	2b0b      	cmp	r3, #11
 800fa7a:	d852      	bhi.n	800fb22 <USBD_CDC_Setup+0x162>
 800fa7c:	a201      	add	r2, pc, #4	@ (adr r2, 800fa84 <USBD_CDC_Setup+0xc4>)
 800fa7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa82:	bf00      	nop
 800fa84:	0800fab5 	.word	0x0800fab5
 800fa88:	0800fb31 	.word	0x0800fb31
 800fa8c:	0800fb23 	.word	0x0800fb23
 800fa90:	0800fb23 	.word	0x0800fb23
 800fa94:	0800fb23 	.word	0x0800fb23
 800fa98:	0800fb23 	.word	0x0800fb23
 800fa9c:	0800fb23 	.word	0x0800fb23
 800faa0:	0800fb23 	.word	0x0800fb23
 800faa4:	0800fb23 	.word	0x0800fb23
 800faa8:	0800fb23 	.word	0x0800fb23
 800faac:	0800fadf 	.word	0x0800fadf
 800fab0:	0800fb09 	.word	0x0800fb09
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800faba:	b2db      	uxtb	r3, r3
 800fabc:	2b03      	cmp	r3, #3
 800fabe:	d107      	bne.n	800fad0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800fac0:	f107 030a 	add.w	r3, r7, #10
 800fac4:	2202      	movs	r2, #2
 800fac6:	4619      	mov	r1, r3
 800fac8:	6878      	ldr	r0, [r7, #4]
 800faca:	f001 fa52 	bl	8010f72 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800face:	e032      	b.n	800fb36 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800fad0:	6839      	ldr	r1, [r7, #0]
 800fad2:	6878      	ldr	r0, [r7, #4]
 800fad4:	f001 f9dc 	bl	8010e90 <USBD_CtlError>
            ret = USBD_FAIL;
 800fad8:	2303      	movs	r3, #3
 800fada:	75fb      	strb	r3, [r7, #23]
          break;
 800fadc:	e02b      	b.n	800fb36 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fae4:	b2db      	uxtb	r3, r3
 800fae6:	2b03      	cmp	r3, #3
 800fae8:	d107      	bne.n	800fafa <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800faea:	f107 030d 	add.w	r3, r7, #13
 800faee:	2201      	movs	r2, #1
 800faf0:	4619      	mov	r1, r3
 800faf2:	6878      	ldr	r0, [r7, #4]
 800faf4:	f001 fa3d 	bl	8010f72 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800faf8:	e01d      	b.n	800fb36 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800fafa:	6839      	ldr	r1, [r7, #0]
 800fafc:	6878      	ldr	r0, [r7, #4]
 800fafe:	f001 f9c7 	bl	8010e90 <USBD_CtlError>
            ret = USBD_FAIL;
 800fb02:	2303      	movs	r3, #3
 800fb04:	75fb      	strb	r3, [r7, #23]
          break;
 800fb06:	e016      	b.n	800fb36 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fb0e:	b2db      	uxtb	r3, r3
 800fb10:	2b03      	cmp	r3, #3
 800fb12:	d00f      	beq.n	800fb34 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800fb14:	6839      	ldr	r1, [r7, #0]
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	f001 f9ba 	bl	8010e90 <USBD_CtlError>
            ret = USBD_FAIL;
 800fb1c:	2303      	movs	r3, #3
 800fb1e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800fb20:	e008      	b.n	800fb34 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800fb22:	6839      	ldr	r1, [r7, #0]
 800fb24:	6878      	ldr	r0, [r7, #4]
 800fb26:	f001 f9b3 	bl	8010e90 <USBD_CtlError>
          ret = USBD_FAIL;
 800fb2a:	2303      	movs	r3, #3
 800fb2c:	75fb      	strb	r3, [r7, #23]
          break;
 800fb2e:	e002      	b.n	800fb36 <USBD_CDC_Setup+0x176>
          break;
 800fb30:	bf00      	nop
 800fb32:	e008      	b.n	800fb46 <USBD_CDC_Setup+0x186>
          break;
 800fb34:	bf00      	nop
      }
      break;
 800fb36:	e006      	b.n	800fb46 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800fb38:	6839      	ldr	r1, [r7, #0]
 800fb3a:	6878      	ldr	r0, [r7, #4]
 800fb3c:	f001 f9a8 	bl	8010e90 <USBD_CtlError>
      ret = USBD_FAIL;
 800fb40:	2303      	movs	r3, #3
 800fb42:	75fb      	strb	r3, [r7, #23]
      break;
 800fb44:	bf00      	nop
  }

  return (uint8_t)ret;
 800fb46:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb48:	4618      	mov	r0, r3
 800fb4a:	3718      	adds	r7, #24
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}

0800fb50 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b084      	sub	sp, #16
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
 800fb58:	460b      	mov	r3, r1
 800fb5a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fb62:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d101      	bne.n	800fb72 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800fb6e:	2303      	movs	r3, #3
 800fb70:	e04f      	b.n	800fc12 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fb78:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800fb7a:	78fa      	ldrb	r2, [r7, #3]
 800fb7c:	6879      	ldr	r1, [r7, #4]
 800fb7e:	4613      	mov	r3, r2
 800fb80:	009b      	lsls	r3, r3, #2
 800fb82:	4413      	add	r3, r2
 800fb84:	009b      	lsls	r3, r3, #2
 800fb86:	440b      	add	r3, r1
 800fb88:	3318      	adds	r3, #24
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d029      	beq.n	800fbe4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800fb90:	78fa      	ldrb	r2, [r7, #3]
 800fb92:	6879      	ldr	r1, [r7, #4]
 800fb94:	4613      	mov	r3, r2
 800fb96:	009b      	lsls	r3, r3, #2
 800fb98:	4413      	add	r3, r2
 800fb9a:	009b      	lsls	r3, r3, #2
 800fb9c:	440b      	add	r3, r1
 800fb9e:	3318      	adds	r3, #24
 800fba0:	681a      	ldr	r2, [r3, #0]
 800fba2:	78f9      	ldrb	r1, [r7, #3]
 800fba4:	68f8      	ldr	r0, [r7, #12]
 800fba6:	460b      	mov	r3, r1
 800fba8:	009b      	lsls	r3, r3, #2
 800fbaa:	440b      	add	r3, r1
 800fbac:	00db      	lsls	r3, r3, #3
 800fbae:	4403      	add	r3, r0
 800fbb0:	3320      	adds	r3, #32
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	fbb2 f1f3 	udiv	r1, r2, r3
 800fbb8:	fb01 f303 	mul.w	r3, r1, r3
 800fbbc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d110      	bne.n	800fbe4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800fbc2:	78fa      	ldrb	r2, [r7, #3]
 800fbc4:	6879      	ldr	r1, [r7, #4]
 800fbc6:	4613      	mov	r3, r2
 800fbc8:	009b      	lsls	r3, r3, #2
 800fbca:	4413      	add	r3, r2
 800fbcc:	009b      	lsls	r3, r3, #2
 800fbce:	440b      	add	r3, r1
 800fbd0:	3318      	adds	r3, #24
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800fbd6:	78f9      	ldrb	r1, [r7, #3]
 800fbd8:	2300      	movs	r3, #0
 800fbda:	2200      	movs	r2, #0
 800fbdc:	6878      	ldr	r0, [r7, #4]
 800fbde:	f001 fe58 	bl	8011892 <USBD_LL_Transmit>
 800fbe2:	e015      	b.n	800fc10 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800fbe4:	68bb      	ldr	r3, [r7, #8]
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800fbf2:	691b      	ldr	r3, [r3, #16]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d00b      	beq.n	800fc10 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800fbfe:	691b      	ldr	r3, [r3, #16]
 800fc00:	68ba      	ldr	r2, [r7, #8]
 800fc02:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800fc06:	68ba      	ldr	r2, [r7, #8]
 800fc08:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800fc0c:	78fa      	ldrb	r2, [r7, #3]
 800fc0e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800fc10:	2300      	movs	r3, #0
}
 800fc12:	4618      	mov	r0, r3
 800fc14:	3710      	adds	r7, #16
 800fc16:	46bd      	mov	sp, r7
 800fc18:	bd80      	pop	{r7, pc}

0800fc1a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fc1a:	b580      	push	{r7, lr}
 800fc1c:	b084      	sub	sp, #16
 800fc1e:	af00      	add	r7, sp, #0
 800fc20:	6078      	str	r0, [r7, #4]
 800fc22:	460b      	mov	r3, r1
 800fc24:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fc2c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d101      	bne.n	800fc3c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800fc38:	2303      	movs	r3, #3
 800fc3a:	e015      	b.n	800fc68 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800fc3c:	78fb      	ldrb	r3, [r7, #3]
 800fc3e:	4619      	mov	r1, r3
 800fc40:	6878      	ldr	r0, [r7, #4]
 800fc42:	f001 fe68 	bl	8011916 <USBD_LL_GetRxDataSize>
 800fc46:	4602      	mov	r2, r0
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800fc54:	68db      	ldr	r3, [r3, #12]
 800fc56:	68fa      	ldr	r2, [r7, #12]
 800fc58:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800fc5c:	68fa      	ldr	r2, [r7, #12]
 800fc5e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800fc62:	4611      	mov	r1, r2
 800fc64:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800fc66:	2300      	movs	r3, #0
}
 800fc68:	4618      	mov	r0, r3
 800fc6a:	3710      	adds	r7, #16
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	bd80      	pop	{r7, pc}

0800fc70 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b084      	sub	sp, #16
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fc7e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d101      	bne.n	800fc8a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800fc86:	2303      	movs	r3, #3
 800fc88:	e01a      	b.n	800fcc0 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d014      	beq.n	800fcbe <USBD_CDC_EP0_RxReady+0x4e>
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800fc9a:	2bff      	cmp	r3, #255	@ 0xff
 800fc9c:	d00f      	beq.n	800fcbe <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800fca4:	689b      	ldr	r3, [r3, #8]
 800fca6:	68fa      	ldr	r2, [r7, #12]
 800fca8:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800fcac:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800fcae:	68fa      	ldr	r2, [r7, #12]
 800fcb0:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800fcb4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	22ff      	movs	r2, #255	@ 0xff
 800fcba:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800fcbe:	2300      	movs	r3, #0
}
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	3710      	adds	r7, #16
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	bd80      	pop	{r7, pc}

0800fcc8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800fcc8:	b480      	push	{r7}
 800fcca:	b083      	sub	sp, #12
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	2243      	movs	r2, #67	@ 0x43
 800fcd4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800fcd6:	4b03      	ldr	r3, [pc, #12]	@ (800fce4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800fcd8:	4618      	mov	r0, r3
 800fcda:	370c      	adds	r7, #12
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce2:	4770      	bx	lr
 800fce4:	200000dc 	.word	0x200000dc

0800fce8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800fce8:	b480      	push	{r7}
 800fcea:	b083      	sub	sp, #12
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2243      	movs	r2, #67	@ 0x43
 800fcf4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800fcf6:	4b03      	ldr	r3, [pc, #12]	@ (800fd04 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	370c      	adds	r7, #12
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd02:	4770      	bx	lr
 800fd04:	20000098 	.word	0x20000098

0800fd08 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800fd08:	b480      	push	{r7}
 800fd0a:	b083      	sub	sp, #12
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	2243      	movs	r2, #67	@ 0x43
 800fd14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800fd16:	4b03      	ldr	r3, [pc, #12]	@ (800fd24 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800fd18:	4618      	mov	r0, r3
 800fd1a:	370c      	adds	r7, #12
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd22:	4770      	bx	lr
 800fd24:	20000120 	.word	0x20000120

0800fd28 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800fd28:	b480      	push	{r7}
 800fd2a:	b083      	sub	sp, #12
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	220a      	movs	r2, #10
 800fd34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800fd36:	4b03      	ldr	r3, [pc, #12]	@ (800fd44 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800fd38:	4618      	mov	r0, r3
 800fd3a:	370c      	adds	r7, #12
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd42:	4770      	bx	lr
 800fd44:	20000054 	.word	0x20000054

0800fd48 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800fd48:	b480      	push	{r7}
 800fd4a:	b083      	sub	sp, #12
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
 800fd50:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800fd52:	683b      	ldr	r3, [r7, #0]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d101      	bne.n	800fd5c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800fd58:	2303      	movs	r3, #3
 800fd5a:	e004      	b.n	800fd66 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	683a      	ldr	r2, [r7, #0]
 800fd60:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800fd64:	2300      	movs	r3, #0
}
 800fd66:	4618      	mov	r0, r3
 800fd68:	370c      	adds	r7, #12
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd70:	4770      	bx	lr

0800fd72 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800fd72:	b480      	push	{r7}
 800fd74:	b087      	sub	sp, #28
 800fd76:	af00      	add	r7, sp, #0
 800fd78:	60f8      	str	r0, [r7, #12]
 800fd7a:	60b9      	str	r1, [r7, #8]
 800fd7c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fd84:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800fd86:	697b      	ldr	r3, [r7, #20]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d101      	bne.n	800fd90 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800fd8c:	2303      	movs	r3, #3
 800fd8e:	e008      	b.n	800fda2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800fd90:	697b      	ldr	r3, [r7, #20]
 800fd92:	68ba      	ldr	r2, [r7, #8]
 800fd94:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800fd98:	697b      	ldr	r3, [r7, #20]
 800fd9a:	687a      	ldr	r2, [r7, #4]
 800fd9c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800fda0:	2300      	movs	r3, #0
}
 800fda2:	4618      	mov	r0, r3
 800fda4:	371c      	adds	r7, #28
 800fda6:	46bd      	mov	sp, r7
 800fda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdac:	4770      	bx	lr

0800fdae <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800fdae:	b480      	push	{r7}
 800fdb0:	b085      	sub	sp, #20
 800fdb2:	af00      	add	r7, sp, #0
 800fdb4:	6078      	str	r0, [r7, #4]
 800fdb6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fdbe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d101      	bne.n	800fdca <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800fdc6:	2303      	movs	r3, #3
 800fdc8:	e004      	b.n	800fdd4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	683a      	ldr	r2, [r7, #0]
 800fdce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800fdd2:	2300      	movs	r3, #0
}
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	3714      	adds	r7, #20
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdde:	4770      	bx	lr

0800fde0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b084      	sub	sp, #16
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fdee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d101      	bne.n	800fdfe <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800fdfa:	2303      	movs	r3, #3
 800fdfc:	e016      	b.n	800fe2c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	7c1b      	ldrb	r3, [r3, #16]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d109      	bne.n	800fe1a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fe0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fe10:	2101      	movs	r1, #1
 800fe12:	6878      	ldr	r0, [r7, #4]
 800fe14:	f001 fd5e 	bl	80118d4 <USBD_LL_PrepareReceive>
 800fe18:	e007      	b.n	800fe2a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fe20:	2340      	movs	r3, #64	@ 0x40
 800fe22:	2101      	movs	r1, #1
 800fe24:	6878      	ldr	r0, [r7, #4]
 800fe26:	f001 fd55 	bl	80118d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fe2a:	2300      	movs	r3, #0
}
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	3710      	adds	r7, #16
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}

0800fe34 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b086      	sub	sp, #24
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	60f8      	str	r0, [r7, #12]
 800fe3c:	60b9      	str	r1, [r7, #8]
 800fe3e:	4613      	mov	r3, r2
 800fe40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d101      	bne.n	800fe4c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800fe48:	2303      	movs	r3, #3
 800fe4a:	e01f      	b.n	800fe8c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	2200      	movs	r2, #0
 800fe50:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	2200      	movs	r2, #0
 800fe58:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	2200      	movs	r2, #0
 800fe60:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800fe64:	68bb      	ldr	r3, [r7, #8]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d003      	beq.n	800fe72 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	68ba      	ldr	r2, [r7, #8]
 800fe6e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	2201      	movs	r2, #1
 800fe76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	79fa      	ldrb	r2, [r7, #7]
 800fe7e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800fe80:	68f8      	ldr	r0, [r7, #12]
 800fe82:	f001 fbbd 	bl	8011600 <USBD_LL_Init>
 800fe86:	4603      	mov	r3, r0
 800fe88:	75fb      	strb	r3, [r7, #23]

  return ret;
 800fe8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	3718      	adds	r7, #24
 800fe90:	46bd      	mov	sp, r7
 800fe92:	bd80      	pop	{r7, pc}

0800fe94 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b084      	sub	sp, #16
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
 800fe9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fe9e:	2300      	movs	r3, #0
 800fea0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800fea2:	683b      	ldr	r3, [r7, #0]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d101      	bne.n	800feac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800fea8:	2303      	movs	r3, #3
 800feaa:	e016      	b.n	800feda <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	683a      	ldr	r2, [r7, #0]
 800feb0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800feba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800febc:	2b00      	cmp	r3, #0
 800febe:	d00b      	beq.n	800fed8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fec8:	f107 020e 	add.w	r2, r7, #14
 800fecc:	4610      	mov	r0, r2
 800fece:	4798      	blx	r3
 800fed0:	4602      	mov	r2, r0
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800fed8:	2300      	movs	r3, #0
}
 800feda:	4618      	mov	r0, r3
 800fedc:	3710      	adds	r7, #16
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd80      	pop	{r7, pc}

0800fee2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800fee2:	b580      	push	{r7, lr}
 800fee4:	b082      	sub	sp, #8
 800fee6:	af00      	add	r7, sp, #0
 800fee8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800feea:	6878      	ldr	r0, [r7, #4]
 800feec:	f001 fbe8 	bl	80116c0 <USBD_LL_Start>
 800fef0:	4603      	mov	r3, r0
}
 800fef2:	4618      	mov	r0, r3
 800fef4:	3708      	adds	r7, #8
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}

0800fefa <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800fefa:	b480      	push	{r7}
 800fefc:	b083      	sub	sp, #12
 800fefe:	af00      	add	r7, sp, #0
 800ff00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ff02:	2300      	movs	r3, #0
}
 800ff04:	4618      	mov	r0, r3
 800ff06:	370c      	adds	r7, #12
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0e:	4770      	bx	lr

0800ff10 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b084      	sub	sp, #16
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
 800ff18:	460b      	mov	r3, r1
 800ff1a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ff1c:	2303      	movs	r3, #3
 800ff1e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d009      	beq.n	800ff3e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	78fa      	ldrb	r2, [r7, #3]
 800ff34:	4611      	mov	r1, r2
 800ff36:	6878      	ldr	r0, [r7, #4]
 800ff38:	4798      	blx	r3
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ff3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff40:	4618      	mov	r0, r3
 800ff42:	3710      	adds	r7, #16
 800ff44:	46bd      	mov	sp, r7
 800ff46:	bd80      	pop	{r7, pc}

0800ff48 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b082      	sub	sp, #8
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
 800ff50:	460b      	mov	r3, r1
 800ff52:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d007      	beq.n	800ff6e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ff64:	685b      	ldr	r3, [r3, #4]
 800ff66:	78fa      	ldrb	r2, [r7, #3]
 800ff68:	4611      	mov	r1, r2
 800ff6a:	6878      	ldr	r0, [r7, #4]
 800ff6c:	4798      	blx	r3
  }

  return USBD_OK;
 800ff6e:	2300      	movs	r3, #0
}
 800ff70:	4618      	mov	r0, r3
 800ff72:	3708      	adds	r7, #8
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd80      	pop	{r7, pc}

0800ff78 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b084      	sub	sp, #16
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
 800ff80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ff88:	6839      	ldr	r1, [r7, #0]
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	f000 ff46 	bl	8010e1c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2201      	movs	r2, #1
 800ff94:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ff9e:	461a      	mov	r2, r3
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ffac:	f003 031f 	and.w	r3, r3, #31
 800ffb0:	2b02      	cmp	r3, #2
 800ffb2:	d01a      	beq.n	800ffea <USBD_LL_SetupStage+0x72>
 800ffb4:	2b02      	cmp	r3, #2
 800ffb6:	d822      	bhi.n	800fffe <USBD_LL_SetupStage+0x86>
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d002      	beq.n	800ffc2 <USBD_LL_SetupStage+0x4a>
 800ffbc:	2b01      	cmp	r3, #1
 800ffbe:	d00a      	beq.n	800ffd6 <USBD_LL_SetupStage+0x5e>
 800ffc0:	e01d      	b.n	800fffe <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ffc8:	4619      	mov	r1, r3
 800ffca:	6878      	ldr	r0, [r7, #4]
 800ffcc:	f000 f9ee 	bl	80103ac <USBD_StdDevReq>
 800ffd0:	4603      	mov	r3, r0
 800ffd2:	73fb      	strb	r3, [r7, #15]
      break;
 800ffd4:	e020      	b.n	8010018 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ffdc:	4619      	mov	r1, r3
 800ffde:	6878      	ldr	r0, [r7, #4]
 800ffe0:	f000 fa52 	bl	8010488 <USBD_StdItfReq>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	73fb      	strb	r3, [r7, #15]
      break;
 800ffe8:	e016      	b.n	8010018 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fff0:	4619      	mov	r1, r3
 800fff2:	6878      	ldr	r0, [r7, #4]
 800fff4:	f000 fa91 	bl	801051a <USBD_StdEPReq>
 800fff8:	4603      	mov	r3, r0
 800fffa:	73fb      	strb	r3, [r7, #15]
      break;
 800fffc:	e00c      	b.n	8010018 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010004:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010008:	b2db      	uxtb	r3, r3
 801000a:	4619      	mov	r1, r3
 801000c:	6878      	ldr	r0, [r7, #4]
 801000e:	f001 fbb7 	bl	8011780 <USBD_LL_StallEP>
 8010012:	4603      	mov	r3, r0
 8010014:	73fb      	strb	r3, [r7, #15]
      break;
 8010016:	bf00      	nop
  }

  return ret;
 8010018:	7bfb      	ldrb	r3, [r7, #15]
}
 801001a:	4618      	mov	r0, r3
 801001c:	3710      	adds	r7, #16
 801001e:	46bd      	mov	sp, r7
 8010020:	bd80      	pop	{r7, pc}

08010022 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010022:	b580      	push	{r7, lr}
 8010024:	b086      	sub	sp, #24
 8010026:	af00      	add	r7, sp, #0
 8010028:	60f8      	str	r0, [r7, #12]
 801002a:	460b      	mov	r3, r1
 801002c:	607a      	str	r2, [r7, #4]
 801002e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010030:	7afb      	ldrb	r3, [r7, #11]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d138      	bne.n	80100a8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 801003c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8010044:	2b03      	cmp	r3, #3
 8010046:	d14a      	bne.n	80100de <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8010048:	693b      	ldr	r3, [r7, #16]
 801004a:	689a      	ldr	r2, [r3, #8]
 801004c:	693b      	ldr	r3, [r7, #16]
 801004e:	68db      	ldr	r3, [r3, #12]
 8010050:	429a      	cmp	r2, r3
 8010052:	d913      	bls.n	801007c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010054:	693b      	ldr	r3, [r7, #16]
 8010056:	689a      	ldr	r2, [r3, #8]
 8010058:	693b      	ldr	r3, [r7, #16]
 801005a:	68db      	ldr	r3, [r3, #12]
 801005c:	1ad2      	subs	r2, r2, r3
 801005e:	693b      	ldr	r3, [r7, #16]
 8010060:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010062:	693b      	ldr	r3, [r7, #16]
 8010064:	68da      	ldr	r2, [r3, #12]
 8010066:	693b      	ldr	r3, [r7, #16]
 8010068:	689b      	ldr	r3, [r3, #8]
 801006a:	4293      	cmp	r3, r2
 801006c:	bf28      	it	cs
 801006e:	4613      	movcs	r3, r2
 8010070:	461a      	mov	r2, r3
 8010072:	6879      	ldr	r1, [r7, #4]
 8010074:	68f8      	ldr	r0, [r7, #12]
 8010076:	f000 ffc5 	bl	8011004 <USBD_CtlContinueRx>
 801007a:	e030      	b.n	80100de <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010082:	b2db      	uxtb	r3, r3
 8010084:	2b03      	cmp	r3, #3
 8010086:	d10b      	bne.n	80100a0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801008e:	691b      	ldr	r3, [r3, #16]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d005      	beq.n	80100a0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801009a:	691b      	ldr	r3, [r3, #16]
 801009c:	68f8      	ldr	r0, [r7, #12]
 801009e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80100a0:	68f8      	ldr	r0, [r7, #12]
 80100a2:	f000 ffc0 	bl	8011026 <USBD_CtlSendStatus>
 80100a6:	e01a      	b.n	80100de <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80100ae:	b2db      	uxtb	r3, r3
 80100b0:	2b03      	cmp	r3, #3
 80100b2:	d114      	bne.n	80100de <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80100ba:	699b      	ldr	r3, [r3, #24]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d00e      	beq.n	80100de <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80100c6:	699b      	ldr	r3, [r3, #24]
 80100c8:	7afa      	ldrb	r2, [r7, #11]
 80100ca:	4611      	mov	r1, r2
 80100cc:	68f8      	ldr	r0, [r7, #12]
 80100ce:	4798      	blx	r3
 80100d0:	4603      	mov	r3, r0
 80100d2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80100d4:	7dfb      	ldrb	r3, [r7, #23]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d001      	beq.n	80100de <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80100da:	7dfb      	ldrb	r3, [r7, #23]
 80100dc:	e000      	b.n	80100e0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80100de:	2300      	movs	r3, #0
}
 80100e0:	4618      	mov	r0, r3
 80100e2:	3718      	adds	r7, #24
 80100e4:	46bd      	mov	sp, r7
 80100e6:	bd80      	pop	{r7, pc}

080100e8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b086      	sub	sp, #24
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	60f8      	str	r0, [r7, #12]
 80100f0:	460b      	mov	r3, r1
 80100f2:	607a      	str	r2, [r7, #4]
 80100f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80100f6:	7afb      	ldrb	r3, [r7, #11]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d16b      	bne.n	80101d4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	3314      	adds	r3, #20
 8010100:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8010108:	2b02      	cmp	r3, #2
 801010a:	d156      	bne.n	80101ba <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 801010c:	693b      	ldr	r3, [r7, #16]
 801010e:	689a      	ldr	r2, [r3, #8]
 8010110:	693b      	ldr	r3, [r7, #16]
 8010112:	68db      	ldr	r3, [r3, #12]
 8010114:	429a      	cmp	r2, r3
 8010116:	d914      	bls.n	8010142 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010118:	693b      	ldr	r3, [r7, #16]
 801011a:	689a      	ldr	r2, [r3, #8]
 801011c:	693b      	ldr	r3, [r7, #16]
 801011e:	68db      	ldr	r3, [r3, #12]
 8010120:	1ad2      	subs	r2, r2, r3
 8010122:	693b      	ldr	r3, [r7, #16]
 8010124:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010126:	693b      	ldr	r3, [r7, #16]
 8010128:	689b      	ldr	r3, [r3, #8]
 801012a:	461a      	mov	r2, r3
 801012c:	6879      	ldr	r1, [r7, #4]
 801012e:	68f8      	ldr	r0, [r7, #12]
 8010130:	f000 ff3a 	bl	8010fa8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010134:	2300      	movs	r3, #0
 8010136:	2200      	movs	r2, #0
 8010138:	2100      	movs	r1, #0
 801013a:	68f8      	ldr	r0, [r7, #12]
 801013c:	f001 fbca 	bl	80118d4 <USBD_LL_PrepareReceive>
 8010140:	e03b      	b.n	80101ba <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010142:	693b      	ldr	r3, [r7, #16]
 8010144:	68da      	ldr	r2, [r3, #12]
 8010146:	693b      	ldr	r3, [r7, #16]
 8010148:	689b      	ldr	r3, [r3, #8]
 801014a:	429a      	cmp	r2, r3
 801014c:	d11c      	bne.n	8010188 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801014e:	693b      	ldr	r3, [r7, #16]
 8010150:	685a      	ldr	r2, [r3, #4]
 8010152:	693b      	ldr	r3, [r7, #16]
 8010154:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010156:	429a      	cmp	r2, r3
 8010158:	d316      	bcc.n	8010188 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801015a:	693b      	ldr	r3, [r7, #16]
 801015c:	685a      	ldr	r2, [r3, #4]
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010164:	429a      	cmp	r2, r3
 8010166:	d20f      	bcs.n	8010188 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010168:	2200      	movs	r2, #0
 801016a:	2100      	movs	r1, #0
 801016c:	68f8      	ldr	r0, [r7, #12]
 801016e:	f000 ff1b 	bl	8010fa8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	2200      	movs	r2, #0
 8010176:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801017a:	2300      	movs	r3, #0
 801017c:	2200      	movs	r2, #0
 801017e:	2100      	movs	r1, #0
 8010180:	68f8      	ldr	r0, [r7, #12]
 8010182:	f001 fba7 	bl	80118d4 <USBD_LL_PrepareReceive>
 8010186:	e018      	b.n	80101ba <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801018e:	b2db      	uxtb	r3, r3
 8010190:	2b03      	cmp	r3, #3
 8010192:	d10b      	bne.n	80101ac <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801019a:	68db      	ldr	r3, [r3, #12]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d005      	beq.n	80101ac <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80101a6:	68db      	ldr	r3, [r3, #12]
 80101a8:	68f8      	ldr	r0, [r7, #12]
 80101aa:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80101ac:	2180      	movs	r1, #128	@ 0x80
 80101ae:	68f8      	ldr	r0, [r7, #12]
 80101b0:	f001 fae6 	bl	8011780 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80101b4:	68f8      	ldr	r0, [r7, #12]
 80101b6:	f000 ff49 	bl	801104c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80101c0:	2b01      	cmp	r3, #1
 80101c2:	d122      	bne.n	801020a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80101c4:	68f8      	ldr	r0, [r7, #12]
 80101c6:	f7ff fe98 	bl	800fefa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	2200      	movs	r2, #0
 80101ce:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80101d2:	e01a      	b.n	801020a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80101da:	b2db      	uxtb	r3, r3
 80101dc:	2b03      	cmp	r3, #3
 80101de:	d114      	bne.n	801020a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80101e6:	695b      	ldr	r3, [r3, #20]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d00e      	beq.n	801020a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80101f2:	695b      	ldr	r3, [r3, #20]
 80101f4:	7afa      	ldrb	r2, [r7, #11]
 80101f6:	4611      	mov	r1, r2
 80101f8:	68f8      	ldr	r0, [r7, #12]
 80101fa:	4798      	blx	r3
 80101fc:	4603      	mov	r3, r0
 80101fe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010200:	7dfb      	ldrb	r3, [r7, #23]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d001      	beq.n	801020a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8010206:	7dfb      	ldrb	r3, [r7, #23]
 8010208:	e000      	b.n	801020c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801020a:	2300      	movs	r3, #0
}
 801020c:	4618      	mov	r0, r3
 801020e:	3718      	adds	r7, #24
 8010210:	46bd      	mov	sp, r7
 8010212:	bd80      	pop	{r7, pc}

08010214 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b082      	sub	sp, #8
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	2201      	movs	r2, #1
 8010220:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	2200      	movs	r2, #0
 8010228:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	2200      	movs	r2, #0
 8010230:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	2200      	movs	r2, #0
 8010236:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010240:	2b00      	cmp	r3, #0
 8010242:	d101      	bne.n	8010248 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8010244:	2303      	movs	r3, #3
 8010246:	e02f      	b.n	80102a8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801024e:	2b00      	cmp	r3, #0
 8010250:	d00f      	beq.n	8010272 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010258:	685b      	ldr	r3, [r3, #4]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d009      	beq.n	8010272 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010264:	685b      	ldr	r3, [r3, #4]
 8010266:	687a      	ldr	r2, [r7, #4]
 8010268:	6852      	ldr	r2, [r2, #4]
 801026a:	b2d2      	uxtb	r2, r2
 801026c:	4611      	mov	r1, r2
 801026e:	6878      	ldr	r0, [r7, #4]
 8010270:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010272:	2340      	movs	r3, #64	@ 0x40
 8010274:	2200      	movs	r2, #0
 8010276:	2100      	movs	r1, #0
 8010278:	6878      	ldr	r0, [r7, #4]
 801027a:	f001 fa3c 	bl	80116f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	2201      	movs	r2, #1
 8010282:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	2240      	movs	r2, #64	@ 0x40
 801028a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801028e:	2340      	movs	r3, #64	@ 0x40
 8010290:	2200      	movs	r2, #0
 8010292:	2180      	movs	r1, #128	@ 0x80
 8010294:	6878      	ldr	r0, [r7, #4]
 8010296:	f001 fa2e 	bl	80116f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	2201      	movs	r2, #1
 801029e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	2240      	movs	r2, #64	@ 0x40
 80102a4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80102a6:	2300      	movs	r3, #0
}
 80102a8:	4618      	mov	r0, r3
 80102aa:	3708      	adds	r7, #8
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bd80      	pop	{r7, pc}

080102b0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80102b0:	b480      	push	{r7}
 80102b2:	b083      	sub	sp, #12
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
 80102b8:	460b      	mov	r3, r1
 80102ba:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	78fa      	ldrb	r2, [r7, #3]
 80102c0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80102c2:	2300      	movs	r3, #0
}
 80102c4:	4618      	mov	r0, r3
 80102c6:	370c      	adds	r7, #12
 80102c8:	46bd      	mov	sp, r7
 80102ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ce:	4770      	bx	lr

080102d0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80102d0:	b480      	push	{r7}
 80102d2:	b083      	sub	sp, #12
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80102de:	b2da      	uxtb	r2, r3
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	2204      	movs	r2, #4
 80102ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80102ee:	2300      	movs	r3, #0
}
 80102f0:	4618      	mov	r0, r3
 80102f2:	370c      	adds	r7, #12
 80102f4:	46bd      	mov	sp, r7
 80102f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fa:	4770      	bx	lr

080102fc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80102fc:	b480      	push	{r7}
 80102fe:	b083      	sub	sp, #12
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801030a:	b2db      	uxtb	r3, r3
 801030c:	2b04      	cmp	r3, #4
 801030e:	d106      	bne.n	801031e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8010316:	b2da      	uxtb	r2, r3
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 801031e:	2300      	movs	r3, #0
}
 8010320:	4618      	mov	r0, r3
 8010322:	370c      	adds	r7, #12
 8010324:	46bd      	mov	sp, r7
 8010326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801032a:	4770      	bx	lr

0801032c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b082      	sub	sp, #8
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801033a:	2b00      	cmp	r3, #0
 801033c:	d101      	bne.n	8010342 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 801033e:	2303      	movs	r3, #3
 8010340:	e012      	b.n	8010368 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010348:	b2db      	uxtb	r3, r3
 801034a:	2b03      	cmp	r3, #3
 801034c:	d10b      	bne.n	8010366 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010354:	69db      	ldr	r3, [r3, #28]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d005      	beq.n	8010366 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010360:	69db      	ldr	r3, [r3, #28]
 8010362:	6878      	ldr	r0, [r7, #4]
 8010364:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010366:	2300      	movs	r3, #0
}
 8010368:	4618      	mov	r0, r3
 801036a:	3708      	adds	r7, #8
 801036c:	46bd      	mov	sp, r7
 801036e:	bd80      	pop	{r7, pc}

08010370 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010370:	b480      	push	{r7}
 8010372:	b087      	sub	sp, #28
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801037c:	697b      	ldr	r3, [r7, #20]
 801037e:	781b      	ldrb	r3, [r3, #0]
 8010380:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010382:	697b      	ldr	r3, [r7, #20]
 8010384:	3301      	adds	r3, #1
 8010386:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010388:	697b      	ldr	r3, [r7, #20]
 801038a:	781b      	ldrb	r3, [r3, #0]
 801038c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801038e:	8a3b      	ldrh	r3, [r7, #16]
 8010390:	021b      	lsls	r3, r3, #8
 8010392:	b21a      	sxth	r2, r3
 8010394:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010398:	4313      	orrs	r3, r2
 801039a:	b21b      	sxth	r3, r3
 801039c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801039e:	89fb      	ldrh	r3, [r7, #14]
}
 80103a0:	4618      	mov	r0, r3
 80103a2:	371c      	adds	r7, #28
 80103a4:	46bd      	mov	sp, r7
 80103a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103aa:	4770      	bx	lr

080103ac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b084      	sub	sp, #16
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
 80103b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80103b6:	2300      	movs	r3, #0
 80103b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80103ba:	683b      	ldr	r3, [r7, #0]
 80103bc:	781b      	ldrb	r3, [r3, #0]
 80103be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80103c2:	2b40      	cmp	r3, #64	@ 0x40
 80103c4:	d005      	beq.n	80103d2 <USBD_StdDevReq+0x26>
 80103c6:	2b40      	cmp	r3, #64	@ 0x40
 80103c8:	d853      	bhi.n	8010472 <USBD_StdDevReq+0xc6>
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d00b      	beq.n	80103e6 <USBD_StdDevReq+0x3a>
 80103ce:	2b20      	cmp	r3, #32
 80103d0:	d14f      	bne.n	8010472 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80103d8:	689b      	ldr	r3, [r3, #8]
 80103da:	6839      	ldr	r1, [r7, #0]
 80103dc:	6878      	ldr	r0, [r7, #4]
 80103de:	4798      	blx	r3
 80103e0:	4603      	mov	r3, r0
 80103e2:	73fb      	strb	r3, [r7, #15]
      break;
 80103e4:	e04a      	b.n	801047c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80103e6:	683b      	ldr	r3, [r7, #0]
 80103e8:	785b      	ldrb	r3, [r3, #1]
 80103ea:	2b09      	cmp	r3, #9
 80103ec:	d83b      	bhi.n	8010466 <USBD_StdDevReq+0xba>
 80103ee:	a201      	add	r2, pc, #4	@ (adr r2, 80103f4 <USBD_StdDevReq+0x48>)
 80103f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103f4:	08010449 	.word	0x08010449
 80103f8:	0801045d 	.word	0x0801045d
 80103fc:	08010467 	.word	0x08010467
 8010400:	08010453 	.word	0x08010453
 8010404:	08010467 	.word	0x08010467
 8010408:	08010427 	.word	0x08010427
 801040c:	0801041d 	.word	0x0801041d
 8010410:	08010467 	.word	0x08010467
 8010414:	0801043f 	.word	0x0801043f
 8010418:	08010431 	.word	0x08010431
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801041c:	6839      	ldr	r1, [r7, #0]
 801041e:	6878      	ldr	r0, [r7, #4]
 8010420:	f000 f9de 	bl	80107e0 <USBD_GetDescriptor>
          break;
 8010424:	e024      	b.n	8010470 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010426:	6839      	ldr	r1, [r7, #0]
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f000 fb6d 	bl	8010b08 <USBD_SetAddress>
          break;
 801042e:	e01f      	b.n	8010470 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010430:	6839      	ldr	r1, [r7, #0]
 8010432:	6878      	ldr	r0, [r7, #4]
 8010434:	f000 fbac 	bl	8010b90 <USBD_SetConfig>
 8010438:	4603      	mov	r3, r0
 801043a:	73fb      	strb	r3, [r7, #15]
          break;
 801043c:	e018      	b.n	8010470 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801043e:	6839      	ldr	r1, [r7, #0]
 8010440:	6878      	ldr	r0, [r7, #4]
 8010442:	f000 fc4b 	bl	8010cdc <USBD_GetConfig>
          break;
 8010446:	e013      	b.n	8010470 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010448:	6839      	ldr	r1, [r7, #0]
 801044a:	6878      	ldr	r0, [r7, #4]
 801044c:	f000 fc7c 	bl	8010d48 <USBD_GetStatus>
          break;
 8010450:	e00e      	b.n	8010470 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010452:	6839      	ldr	r1, [r7, #0]
 8010454:	6878      	ldr	r0, [r7, #4]
 8010456:	f000 fcab 	bl	8010db0 <USBD_SetFeature>
          break;
 801045a:	e009      	b.n	8010470 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801045c:	6839      	ldr	r1, [r7, #0]
 801045e:	6878      	ldr	r0, [r7, #4]
 8010460:	f000 fcba 	bl	8010dd8 <USBD_ClrFeature>
          break;
 8010464:	e004      	b.n	8010470 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8010466:	6839      	ldr	r1, [r7, #0]
 8010468:	6878      	ldr	r0, [r7, #4]
 801046a:	f000 fd11 	bl	8010e90 <USBD_CtlError>
          break;
 801046e:	bf00      	nop
      }
      break;
 8010470:	e004      	b.n	801047c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8010472:	6839      	ldr	r1, [r7, #0]
 8010474:	6878      	ldr	r0, [r7, #4]
 8010476:	f000 fd0b 	bl	8010e90 <USBD_CtlError>
      break;
 801047a:	bf00      	nop
  }

  return ret;
 801047c:	7bfb      	ldrb	r3, [r7, #15]
}
 801047e:	4618      	mov	r0, r3
 8010480:	3710      	adds	r7, #16
 8010482:	46bd      	mov	sp, r7
 8010484:	bd80      	pop	{r7, pc}
 8010486:	bf00      	nop

08010488 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b084      	sub	sp, #16
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
 8010490:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010492:	2300      	movs	r3, #0
 8010494:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010496:	683b      	ldr	r3, [r7, #0]
 8010498:	781b      	ldrb	r3, [r3, #0]
 801049a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801049e:	2b40      	cmp	r3, #64	@ 0x40
 80104a0:	d005      	beq.n	80104ae <USBD_StdItfReq+0x26>
 80104a2:	2b40      	cmp	r3, #64	@ 0x40
 80104a4:	d82f      	bhi.n	8010506 <USBD_StdItfReq+0x7e>
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d001      	beq.n	80104ae <USBD_StdItfReq+0x26>
 80104aa:	2b20      	cmp	r3, #32
 80104ac:	d12b      	bne.n	8010506 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80104b4:	b2db      	uxtb	r3, r3
 80104b6:	3b01      	subs	r3, #1
 80104b8:	2b02      	cmp	r3, #2
 80104ba:	d81d      	bhi.n	80104f8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80104bc:	683b      	ldr	r3, [r7, #0]
 80104be:	889b      	ldrh	r3, [r3, #4]
 80104c0:	b2db      	uxtb	r3, r3
 80104c2:	2b01      	cmp	r3, #1
 80104c4:	d813      	bhi.n	80104ee <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80104cc:	689b      	ldr	r3, [r3, #8]
 80104ce:	6839      	ldr	r1, [r7, #0]
 80104d0:	6878      	ldr	r0, [r7, #4]
 80104d2:	4798      	blx	r3
 80104d4:	4603      	mov	r3, r0
 80104d6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80104d8:	683b      	ldr	r3, [r7, #0]
 80104da:	88db      	ldrh	r3, [r3, #6]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d110      	bne.n	8010502 <USBD_StdItfReq+0x7a>
 80104e0:	7bfb      	ldrb	r3, [r7, #15]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d10d      	bne.n	8010502 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80104e6:	6878      	ldr	r0, [r7, #4]
 80104e8:	f000 fd9d 	bl	8011026 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80104ec:	e009      	b.n	8010502 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80104ee:	6839      	ldr	r1, [r7, #0]
 80104f0:	6878      	ldr	r0, [r7, #4]
 80104f2:	f000 fccd 	bl	8010e90 <USBD_CtlError>
          break;
 80104f6:	e004      	b.n	8010502 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80104f8:	6839      	ldr	r1, [r7, #0]
 80104fa:	6878      	ldr	r0, [r7, #4]
 80104fc:	f000 fcc8 	bl	8010e90 <USBD_CtlError>
          break;
 8010500:	e000      	b.n	8010504 <USBD_StdItfReq+0x7c>
          break;
 8010502:	bf00      	nop
      }
      break;
 8010504:	e004      	b.n	8010510 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8010506:	6839      	ldr	r1, [r7, #0]
 8010508:	6878      	ldr	r0, [r7, #4]
 801050a:	f000 fcc1 	bl	8010e90 <USBD_CtlError>
      break;
 801050e:	bf00      	nop
  }

  return ret;
 8010510:	7bfb      	ldrb	r3, [r7, #15]
}
 8010512:	4618      	mov	r0, r3
 8010514:	3710      	adds	r7, #16
 8010516:	46bd      	mov	sp, r7
 8010518:	bd80      	pop	{r7, pc}

0801051a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801051a:	b580      	push	{r7, lr}
 801051c:	b084      	sub	sp, #16
 801051e:	af00      	add	r7, sp, #0
 8010520:	6078      	str	r0, [r7, #4]
 8010522:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8010524:	2300      	movs	r3, #0
 8010526:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8010528:	683b      	ldr	r3, [r7, #0]
 801052a:	889b      	ldrh	r3, [r3, #4]
 801052c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801052e:	683b      	ldr	r3, [r7, #0]
 8010530:	781b      	ldrb	r3, [r3, #0]
 8010532:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010536:	2b40      	cmp	r3, #64	@ 0x40
 8010538:	d007      	beq.n	801054a <USBD_StdEPReq+0x30>
 801053a:	2b40      	cmp	r3, #64	@ 0x40
 801053c:	f200 8145 	bhi.w	80107ca <USBD_StdEPReq+0x2b0>
 8010540:	2b00      	cmp	r3, #0
 8010542:	d00c      	beq.n	801055e <USBD_StdEPReq+0x44>
 8010544:	2b20      	cmp	r3, #32
 8010546:	f040 8140 	bne.w	80107ca <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010550:	689b      	ldr	r3, [r3, #8]
 8010552:	6839      	ldr	r1, [r7, #0]
 8010554:	6878      	ldr	r0, [r7, #4]
 8010556:	4798      	blx	r3
 8010558:	4603      	mov	r3, r0
 801055a:	73fb      	strb	r3, [r7, #15]
      break;
 801055c:	e13a      	b.n	80107d4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801055e:	683b      	ldr	r3, [r7, #0]
 8010560:	785b      	ldrb	r3, [r3, #1]
 8010562:	2b03      	cmp	r3, #3
 8010564:	d007      	beq.n	8010576 <USBD_StdEPReq+0x5c>
 8010566:	2b03      	cmp	r3, #3
 8010568:	f300 8129 	bgt.w	80107be <USBD_StdEPReq+0x2a4>
 801056c:	2b00      	cmp	r3, #0
 801056e:	d07f      	beq.n	8010670 <USBD_StdEPReq+0x156>
 8010570:	2b01      	cmp	r3, #1
 8010572:	d03c      	beq.n	80105ee <USBD_StdEPReq+0xd4>
 8010574:	e123      	b.n	80107be <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801057c:	b2db      	uxtb	r3, r3
 801057e:	2b02      	cmp	r3, #2
 8010580:	d002      	beq.n	8010588 <USBD_StdEPReq+0x6e>
 8010582:	2b03      	cmp	r3, #3
 8010584:	d016      	beq.n	80105b4 <USBD_StdEPReq+0x9a>
 8010586:	e02c      	b.n	80105e2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010588:	7bbb      	ldrb	r3, [r7, #14]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d00d      	beq.n	80105aa <USBD_StdEPReq+0x90>
 801058e:	7bbb      	ldrb	r3, [r7, #14]
 8010590:	2b80      	cmp	r3, #128	@ 0x80
 8010592:	d00a      	beq.n	80105aa <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010594:	7bbb      	ldrb	r3, [r7, #14]
 8010596:	4619      	mov	r1, r3
 8010598:	6878      	ldr	r0, [r7, #4]
 801059a:	f001 f8f1 	bl	8011780 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801059e:	2180      	movs	r1, #128	@ 0x80
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	f001 f8ed 	bl	8011780 <USBD_LL_StallEP>
 80105a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80105a8:	e020      	b.n	80105ec <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80105aa:	6839      	ldr	r1, [r7, #0]
 80105ac:	6878      	ldr	r0, [r7, #4]
 80105ae:	f000 fc6f 	bl	8010e90 <USBD_CtlError>
              break;
 80105b2:	e01b      	b.n	80105ec <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80105b4:	683b      	ldr	r3, [r7, #0]
 80105b6:	885b      	ldrh	r3, [r3, #2]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d10e      	bne.n	80105da <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80105bc:	7bbb      	ldrb	r3, [r7, #14]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d00b      	beq.n	80105da <USBD_StdEPReq+0xc0>
 80105c2:	7bbb      	ldrb	r3, [r7, #14]
 80105c4:	2b80      	cmp	r3, #128	@ 0x80
 80105c6:	d008      	beq.n	80105da <USBD_StdEPReq+0xc0>
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	88db      	ldrh	r3, [r3, #6]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d104      	bne.n	80105da <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80105d0:	7bbb      	ldrb	r3, [r7, #14]
 80105d2:	4619      	mov	r1, r3
 80105d4:	6878      	ldr	r0, [r7, #4]
 80105d6:	f001 f8d3 	bl	8011780 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80105da:	6878      	ldr	r0, [r7, #4]
 80105dc:	f000 fd23 	bl	8011026 <USBD_CtlSendStatus>

              break;
 80105e0:	e004      	b.n	80105ec <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80105e2:	6839      	ldr	r1, [r7, #0]
 80105e4:	6878      	ldr	r0, [r7, #4]
 80105e6:	f000 fc53 	bl	8010e90 <USBD_CtlError>
              break;
 80105ea:	bf00      	nop
          }
          break;
 80105ec:	e0ec      	b.n	80107c8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80105f4:	b2db      	uxtb	r3, r3
 80105f6:	2b02      	cmp	r3, #2
 80105f8:	d002      	beq.n	8010600 <USBD_StdEPReq+0xe6>
 80105fa:	2b03      	cmp	r3, #3
 80105fc:	d016      	beq.n	801062c <USBD_StdEPReq+0x112>
 80105fe:	e030      	b.n	8010662 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010600:	7bbb      	ldrb	r3, [r7, #14]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d00d      	beq.n	8010622 <USBD_StdEPReq+0x108>
 8010606:	7bbb      	ldrb	r3, [r7, #14]
 8010608:	2b80      	cmp	r3, #128	@ 0x80
 801060a:	d00a      	beq.n	8010622 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801060c:	7bbb      	ldrb	r3, [r7, #14]
 801060e:	4619      	mov	r1, r3
 8010610:	6878      	ldr	r0, [r7, #4]
 8010612:	f001 f8b5 	bl	8011780 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010616:	2180      	movs	r1, #128	@ 0x80
 8010618:	6878      	ldr	r0, [r7, #4]
 801061a:	f001 f8b1 	bl	8011780 <USBD_LL_StallEP>
 801061e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010620:	e025      	b.n	801066e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8010622:	6839      	ldr	r1, [r7, #0]
 8010624:	6878      	ldr	r0, [r7, #4]
 8010626:	f000 fc33 	bl	8010e90 <USBD_CtlError>
              break;
 801062a:	e020      	b.n	801066e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	885b      	ldrh	r3, [r3, #2]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d11b      	bne.n	801066c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010634:	7bbb      	ldrb	r3, [r7, #14]
 8010636:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801063a:	2b00      	cmp	r3, #0
 801063c:	d004      	beq.n	8010648 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801063e:	7bbb      	ldrb	r3, [r7, #14]
 8010640:	4619      	mov	r1, r3
 8010642:	6878      	ldr	r0, [r7, #4]
 8010644:	f001 f8bb 	bl	80117be <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010648:	6878      	ldr	r0, [r7, #4]
 801064a:	f000 fcec 	bl	8011026 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010654:	689b      	ldr	r3, [r3, #8]
 8010656:	6839      	ldr	r1, [r7, #0]
 8010658:	6878      	ldr	r0, [r7, #4]
 801065a:	4798      	blx	r3
 801065c:	4603      	mov	r3, r0
 801065e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8010660:	e004      	b.n	801066c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8010662:	6839      	ldr	r1, [r7, #0]
 8010664:	6878      	ldr	r0, [r7, #4]
 8010666:	f000 fc13 	bl	8010e90 <USBD_CtlError>
              break;
 801066a:	e000      	b.n	801066e <USBD_StdEPReq+0x154>
              break;
 801066c:	bf00      	nop
          }
          break;
 801066e:	e0ab      	b.n	80107c8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010676:	b2db      	uxtb	r3, r3
 8010678:	2b02      	cmp	r3, #2
 801067a:	d002      	beq.n	8010682 <USBD_StdEPReq+0x168>
 801067c:	2b03      	cmp	r3, #3
 801067e:	d032      	beq.n	80106e6 <USBD_StdEPReq+0x1cc>
 8010680:	e097      	b.n	80107b2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010682:	7bbb      	ldrb	r3, [r7, #14]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d007      	beq.n	8010698 <USBD_StdEPReq+0x17e>
 8010688:	7bbb      	ldrb	r3, [r7, #14]
 801068a:	2b80      	cmp	r3, #128	@ 0x80
 801068c:	d004      	beq.n	8010698 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 801068e:	6839      	ldr	r1, [r7, #0]
 8010690:	6878      	ldr	r0, [r7, #4]
 8010692:	f000 fbfd 	bl	8010e90 <USBD_CtlError>
                break;
 8010696:	e091      	b.n	80107bc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010698:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801069c:	2b00      	cmp	r3, #0
 801069e:	da0b      	bge.n	80106b8 <USBD_StdEPReq+0x19e>
 80106a0:	7bbb      	ldrb	r3, [r7, #14]
 80106a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80106a6:	4613      	mov	r3, r2
 80106a8:	009b      	lsls	r3, r3, #2
 80106aa:	4413      	add	r3, r2
 80106ac:	009b      	lsls	r3, r3, #2
 80106ae:	3310      	adds	r3, #16
 80106b0:	687a      	ldr	r2, [r7, #4]
 80106b2:	4413      	add	r3, r2
 80106b4:	3304      	adds	r3, #4
 80106b6:	e00b      	b.n	80106d0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80106b8:	7bbb      	ldrb	r3, [r7, #14]
 80106ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80106be:	4613      	mov	r3, r2
 80106c0:	009b      	lsls	r3, r3, #2
 80106c2:	4413      	add	r3, r2
 80106c4:	009b      	lsls	r3, r3, #2
 80106c6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80106ca:	687a      	ldr	r2, [r7, #4]
 80106cc:	4413      	add	r3, r2
 80106ce:	3304      	adds	r3, #4
 80106d0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80106d2:	68bb      	ldr	r3, [r7, #8]
 80106d4:	2200      	movs	r2, #0
 80106d6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	2202      	movs	r2, #2
 80106dc:	4619      	mov	r1, r3
 80106de:	6878      	ldr	r0, [r7, #4]
 80106e0:	f000 fc47 	bl	8010f72 <USBD_CtlSendData>
              break;
 80106e4:	e06a      	b.n	80107bc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80106e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	da11      	bge.n	8010712 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80106ee:	7bbb      	ldrb	r3, [r7, #14]
 80106f0:	f003 020f 	and.w	r2, r3, #15
 80106f4:	6879      	ldr	r1, [r7, #4]
 80106f6:	4613      	mov	r3, r2
 80106f8:	009b      	lsls	r3, r3, #2
 80106fa:	4413      	add	r3, r2
 80106fc:	009b      	lsls	r3, r3, #2
 80106fe:	440b      	add	r3, r1
 8010700:	3324      	adds	r3, #36	@ 0x24
 8010702:	881b      	ldrh	r3, [r3, #0]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d117      	bne.n	8010738 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8010708:	6839      	ldr	r1, [r7, #0]
 801070a:	6878      	ldr	r0, [r7, #4]
 801070c:	f000 fbc0 	bl	8010e90 <USBD_CtlError>
                  break;
 8010710:	e054      	b.n	80107bc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010712:	7bbb      	ldrb	r3, [r7, #14]
 8010714:	f003 020f 	and.w	r2, r3, #15
 8010718:	6879      	ldr	r1, [r7, #4]
 801071a:	4613      	mov	r3, r2
 801071c:	009b      	lsls	r3, r3, #2
 801071e:	4413      	add	r3, r2
 8010720:	009b      	lsls	r3, r3, #2
 8010722:	440b      	add	r3, r1
 8010724:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010728:	881b      	ldrh	r3, [r3, #0]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d104      	bne.n	8010738 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801072e:	6839      	ldr	r1, [r7, #0]
 8010730:	6878      	ldr	r0, [r7, #4]
 8010732:	f000 fbad 	bl	8010e90 <USBD_CtlError>
                  break;
 8010736:	e041      	b.n	80107bc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010738:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801073c:	2b00      	cmp	r3, #0
 801073e:	da0b      	bge.n	8010758 <USBD_StdEPReq+0x23e>
 8010740:	7bbb      	ldrb	r3, [r7, #14]
 8010742:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010746:	4613      	mov	r3, r2
 8010748:	009b      	lsls	r3, r3, #2
 801074a:	4413      	add	r3, r2
 801074c:	009b      	lsls	r3, r3, #2
 801074e:	3310      	adds	r3, #16
 8010750:	687a      	ldr	r2, [r7, #4]
 8010752:	4413      	add	r3, r2
 8010754:	3304      	adds	r3, #4
 8010756:	e00b      	b.n	8010770 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010758:	7bbb      	ldrb	r3, [r7, #14]
 801075a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801075e:	4613      	mov	r3, r2
 8010760:	009b      	lsls	r3, r3, #2
 8010762:	4413      	add	r3, r2
 8010764:	009b      	lsls	r3, r3, #2
 8010766:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801076a:	687a      	ldr	r2, [r7, #4]
 801076c:	4413      	add	r3, r2
 801076e:	3304      	adds	r3, #4
 8010770:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010772:	7bbb      	ldrb	r3, [r7, #14]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d002      	beq.n	801077e <USBD_StdEPReq+0x264>
 8010778:	7bbb      	ldrb	r3, [r7, #14]
 801077a:	2b80      	cmp	r3, #128	@ 0x80
 801077c:	d103      	bne.n	8010786 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 801077e:	68bb      	ldr	r3, [r7, #8]
 8010780:	2200      	movs	r2, #0
 8010782:	601a      	str	r2, [r3, #0]
 8010784:	e00e      	b.n	80107a4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010786:	7bbb      	ldrb	r3, [r7, #14]
 8010788:	4619      	mov	r1, r3
 801078a:	6878      	ldr	r0, [r7, #4]
 801078c:	f001 f836 	bl	80117fc <USBD_LL_IsStallEP>
 8010790:	4603      	mov	r3, r0
 8010792:	2b00      	cmp	r3, #0
 8010794:	d003      	beq.n	801079e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8010796:	68bb      	ldr	r3, [r7, #8]
 8010798:	2201      	movs	r2, #1
 801079a:	601a      	str	r2, [r3, #0]
 801079c:	e002      	b.n	80107a4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	2200      	movs	r2, #0
 80107a2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80107a4:	68bb      	ldr	r3, [r7, #8]
 80107a6:	2202      	movs	r2, #2
 80107a8:	4619      	mov	r1, r3
 80107aa:	6878      	ldr	r0, [r7, #4]
 80107ac:	f000 fbe1 	bl	8010f72 <USBD_CtlSendData>
              break;
 80107b0:	e004      	b.n	80107bc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80107b2:	6839      	ldr	r1, [r7, #0]
 80107b4:	6878      	ldr	r0, [r7, #4]
 80107b6:	f000 fb6b 	bl	8010e90 <USBD_CtlError>
              break;
 80107ba:	bf00      	nop
          }
          break;
 80107bc:	e004      	b.n	80107c8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80107be:	6839      	ldr	r1, [r7, #0]
 80107c0:	6878      	ldr	r0, [r7, #4]
 80107c2:	f000 fb65 	bl	8010e90 <USBD_CtlError>
          break;
 80107c6:	bf00      	nop
      }
      break;
 80107c8:	e004      	b.n	80107d4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80107ca:	6839      	ldr	r1, [r7, #0]
 80107cc:	6878      	ldr	r0, [r7, #4]
 80107ce:	f000 fb5f 	bl	8010e90 <USBD_CtlError>
      break;
 80107d2:	bf00      	nop
  }

  return ret;
 80107d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80107d6:	4618      	mov	r0, r3
 80107d8:	3710      	adds	r7, #16
 80107da:	46bd      	mov	sp, r7
 80107dc:	bd80      	pop	{r7, pc}
	...

080107e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b084      	sub	sp, #16
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
 80107e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80107ea:	2300      	movs	r3, #0
 80107ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80107ee:	2300      	movs	r3, #0
 80107f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80107f2:	2300      	movs	r3, #0
 80107f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	885b      	ldrh	r3, [r3, #2]
 80107fa:	0a1b      	lsrs	r3, r3, #8
 80107fc:	b29b      	uxth	r3, r3
 80107fe:	3b01      	subs	r3, #1
 8010800:	2b0e      	cmp	r3, #14
 8010802:	f200 8152 	bhi.w	8010aaa <USBD_GetDescriptor+0x2ca>
 8010806:	a201      	add	r2, pc, #4	@ (adr r2, 801080c <USBD_GetDescriptor+0x2c>)
 8010808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801080c:	0801087d 	.word	0x0801087d
 8010810:	08010895 	.word	0x08010895
 8010814:	080108d5 	.word	0x080108d5
 8010818:	08010aab 	.word	0x08010aab
 801081c:	08010aab 	.word	0x08010aab
 8010820:	08010a4b 	.word	0x08010a4b
 8010824:	08010a77 	.word	0x08010a77
 8010828:	08010aab 	.word	0x08010aab
 801082c:	08010aab 	.word	0x08010aab
 8010830:	08010aab 	.word	0x08010aab
 8010834:	08010aab 	.word	0x08010aab
 8010838:	08010aab 	.word	0x08010aab
 801083c:	08010aab 	.word	0x08010aab
 8010840:	08010aab 	.word	0x08010aab
 8010844:	08010849 	.word	0x08010849
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801084e:	69db      	ldr	r3, [r3, #28]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d00b      	beq.n	801086c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801085a:	69db      	ldr	r3, [r3, #28]
 801085c:	687a      	ldr	r2, [r7, #4]
 801085e:	7c12      	ldrb	r2, [r2, #16]
 8010860:	f107 0108 	add.w	r1, r7, #8
 8010864:	4610      	mov	r0, r2
 8010866:	4798      	blx	r3
 8010868:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801086a:	e126      	b.n	8010aba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801086c:	6839      	ldr	r1, [r7, #0]
 801086e:	6878      	ldr	r0, [r7, #4]
 8010870:	f000 fb0e 	bl	8010e90 <USBD_CtlError>
        err++;
 8010874:	7afb      	ldrb	r3, [r7, #11]
 8010876:	3301      	adds	r3, #1
 8010878:	72fb      	strb	r3, [r7, #11]
      break;
 801087a:	e11e      	b.n	8010aba <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	687a      	ldr	r2, [r7, #4]
 8010886:	7c12      	ldrb	r2, [r2, #16]
 8010888:	f107 0108 	add.w	r1, r7, #8
 801088c:	4610      	mov	r0, r2
 801088e:	4798      	blx	r3
 8010890:	60f8      	str	r0, [r7, #12]
      break;
 8010892:	e112      	b.n	8010aba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	7c1b      	ldrb	r3, [r3, #16]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d10d      	bne.n	80108b8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80108a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80108a4:	f107 0208 	add.w	r2, r7, #8
 80108a8:	4610      	mov	r0, r2
 80108aa:	4798      	blx	r3
 80108ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	3301      	adds	r3, #1
 80108b2:	2202      	movs	r2, #2
 80108b4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80108b6:	e100      	b.n	8010aba <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80108be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108c0:	f107 0208 	add.w	r2, r7, #8
 80108c4:	4610      	mov	r0, r2
 80108c6:	4798      	blx	r3
 80108c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	3301      	adds	r3, #1
 80108ce:	2202      	movs	r2, #2
 80108d0:	701a      	strb	r2, [r3, #0]
      break;
 80108d2:	e0f2      	b.n	8010aba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80108d4:	683b      	ldr	r3, [r7, #0]
 80108d6:	885b      	ldrh	r3, [r3, #2]
 80108d8:	b2db      	uxtb	r3, r3
 80108da:	2b05      	cmp	r3, #5
 80108dc:	f200 80ac 	bhi.w	8010a38 <USBD_GetDescriptor+0x258>
 80108e0:	a201      	add	r2, pc, #4	@ (adr r2, 80108e8 <USBD_GetDescriptor+0x108>)
 80108e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108e6:	bf00      	nop
 80108e8:	08010901 	.word	0x08010901
 80108ec:	08010935 	.word	0x08010935
 80108f0:	08010969 	.word	0x08010969
 80108f4:	0801099d 	.word	0x0801099d
 80108f8:	080109d1 	.word	0x080109d1
 80108fc:	08010a05 	.word	0x08010a05
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010906:	685b      	ldr	r3, [r3, #4]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d00b      	beq.n	8010924 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010912:	685b      	ldr	r3, [r3, #4]
 8010914:	687a      	ldr	r2, [r7, #4]
 8010916:	7c12      	ldrb	r2, [r2, #16]
 8010918:	f107 0108 	add.w	r1, r7, #8
 801091c:	4610      	mov	r0, r2
 801091e:	4798      	blx	r3
 8010920:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010922:	e091      	b.n	8010a48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010924:	6839      	ldr	r1, [r7, #0]
 8010926:	6878      	ldr	r0, [r7, #4]
 8010928:	f000 fab2 	bl	8010e90 <USBD_CtlError>
            err++;
 801092c:	7afb      	ldrb	r3, [r7, #11]
 801092e:	3301      	adds	r3, #1
 8010930:	72fb      	strb	r3, [r7, #11]
          break;
 8010932:	e089      	b.n	8010a48 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801093a:	689b      	ldr	r3, [r3, #8]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d00b      	beq.n	8010958 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010946:	689b      	ldr	r3, [r3, #8]
 8010948:	687a      	ldr	r2, [r7, #4]
 801094a:	7c12      	ldrb	r2, [r2, #16]
 801094c:	f107 0108 	add.w	r1, r7, #8
 8010950:	4610      	mov	r0, r2
 8010952:	4798      	blx	r3
 8010954:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010956:	e077      	b.n	8010a48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010958:	6839      	ldr	r1, [r7, #0]
 801095a:	6878      	ldr	r0, [r7, #4]
 801095c:	f000 fa98 	bl	8010e90 <USBD_CtlError>
            err++;
 8010960:	7afb      	ldrb	r3, [r7, #11]
 8010962:	3301      	adds	r3, #1
 8010964:	72fb      	strb	r3, [r7, #11]
          break;
 8010966:	e06f      	b.n	8010a48 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801096e:	68db      	ldr	r3, [r3, #12]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d00b      	beq.n	801098c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801097a:	68db      	ldr	r3, [r3, #12]
 801097c:	687a      	ldr	r2, [r7, #4]
 801097e:	7c12      	ldrb	r2, [r2, #16]
 8010980:	f107 0108 	add.w	r1, r7, #8
 8010984:	4610      	mov	r0, r2
 8010986:	4798      	blx	r3
 8010988:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801098a:	e05d      	b.n	8010a48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801098c:	6839      	ldr	r1, [r7, #0]
 801098e:	6878      	ldr	r0, [r7, #4]
 8010990:	f000 fa7e 	bl	8010e90 <USBD_CtlError>
            err++;
 8010994:	7afb      	ldrb	r3, [r7, #11]
 8010996:	3301      	adds	r3, #1
 8010998:	72fb      	strb	r3, [r7, #11]
          break;
 801099a:	e055      	b.n	8010a48 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80109a2:	691b      	ldr	r3, [r3, #16]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d00b      	beq.n	80109c0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80109ae:	691b      	ldr	r3, [r3, #16]
 80109b0:	687a      	ldr	r2, [r7, #4]
 80109b2:	7c12      	ldrb	r2, [r2, #16]
 80109b4:	f107 0108 	add.w	r1, r7, #8
 80109b8:	4610      	mov	r0, r2
 80109ba:	4798      	blx	r3
 80109bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80109be:	e043      	b.n	8010a48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80109c0:	6839      	ldr	r1, [r7, #0]
 80109c2:	6878      	ldr	r0, [r7, #4]
 80109c4:	f000 fa64 	bl	8010e90 <USBD_CtlError>
            err++;
 80109c8:	7afb      	ldrb	r3, [r7, #11]
 80109ca:	3301      	adds	r3, #1
 80109cc:	72fb      	strb	r3, [r7, #11]
          break;
 80109ce:	e03b      	b.n	8010a48 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80109d6:	695b      	ldr	r3, [r3, #20]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d00b      	beq.n	80109f4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80109e2:	695b      	ldr	r3, [r3, #20]
 80109e4:	687a      	ldr	r2, [r7, #4]
 80109e6:	7c12      	ldrb	r2, [r2, #16]
 80109e8:	f107 0108 	add.w	r1, r7, #8
 80109ec:	4610      	mov	r0, r2
 80109ee:	4798      	blx	r3
 80109f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80109f2:	e029      	b.n	8010a48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80109f4:	6839      	ldr	r1, [r7, #0]
 80109f6:	6878      	ldr	r0, [r7, #4]
 80109f8:	f000 fa4a 	bl	8010e90 <USBD_CtlError>
            err++;
 80109fc:	7afb      	ldrb	r3, [r7, #11]
 80109fe:	3301      	adds	r3, #1
 8010a00:	72fb      	strb	r3, [r7, #11]
          break;
 8010a02:	e021      	b.n	8010a48 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010a0a:	699b      	ldr	r3, [r3, #24]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d00b      	beq.n	8010a28 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010a16:	699b      	ldr	r3, [r3, #24]
 8010a18:	687a      	ldr	r2, [r7, #4]
 8010a1a:	7c12      	ldrb	r2, [r2, #16]
 8010a1c:	f107 0108 	add.w	r1, r7, #8
 8010a20:	4610      	mov	r0, r2
 8010a22:	4798      	blx	r3
 8010a24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010a26:	e00f      	b.n	8010a48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010a28:	6839      	ldr	r1, [r7, #0]
 8010a2a:	6878      	ldr	r0, [r7, #4]
 8010a2c:	f000 fa30 	bl	8010e90 <USBD_CtlError>
            err++;
 8010a30:	7afb      	ldrb	r3, [r7, #11]
 8010a32:	3301      	adds	r3, #1
 8010a34:	72fb      	strb	r3, [r7, #11]
          break;
 8010a36:	e007      	b.n	8010a48 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010a38:	6839      	ldr	r1, [r7, #0]
 8010a3a:	6878      	ldr	r0, [r7, #4]
 8010a3c:	f000 fa28 	bl	8010e90 <USBD_CtlError>
          err++;
 8010a40:	7afb      	ldrb	r3, [r7, #11]
 8010a42:	3301      	adds	r3, #1
 8010a44:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8010a46:	bf00      	nop
      }
      break;
 8010a48:	e037      	b.n	8010aba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	7c1b      	ldrb	r3, [r3, #16]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d109      	bne.n	8010a66 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a5a:	f107 0208 	add.w	r2, r7, #8
 8010a5e:	4610      	mov	r0, r2
 8010a60:	4798      	blx	r3
 8010a62:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010a64:	e029      	b.n	8010aba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010a66:	6839      	ldr	r1, [r7, #0]
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	f000 fa11 	bl	8010e90 <USBD_CtlError>
        err++;
 8010a6e:	7afb      	ldrb	r3, [r7, #11]
 8010a70:	3301      	adds	r3, #1
 8010a72:	72fb      	strb	r3, [r7, #11]
      break;
 8010a74:	e021      	b.n	8010aba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	7c1b      	ldrb	r3, [r3, #16]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d10d      	bne.n	8010a9a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a86:	f107 0208 	add.w	r2, r7, #8
 8010a8a:	4610      	mov	r0, r2
 8010a8c:	4798      	blx	r3
 8010a8e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	3301      	adds	r3, #1
 8010a94:	2207      	movs	r2, #7
 8010a96:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010a98:	e00f      	b.n	8010aba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010a9a:	6839      	ldr	r1, [r7, #0]
 8010a9c:	6878      	ldr	r0, [r7, #4]
 8010a9e:	f000 f9f7 	bl	8010e90 <USBD_CtlError>
        err++;
 8010aa2:	7afb      	ldrb	r3, [r7, #11]
 8010aa4:	3301      	adds	r3, #1
 8010aa6:	72fb      	strb	r3, [r7, #11]
      break;
 8010aa8:	e007      	b.n	8010aba <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8010aaa:	6839      	ldr	r1, [r7, #0]
 8010aac:	6878      	ldr	r0, [r7, #4]
 8010aae:	f000 f9ef 	bl	8010e90 <USBD_CtlError>
      err++;
 8010ab2:	7afb      	ldrb	r3, [r7, #11]
 8010ab4:	3301      	adds	r3, #1
 8010ab6:	72fb      	strb	r3, [r7, #11]
      break;
 8010ab8:	bf00      	nop
  }

  if (err != 0U)
 8010aba:	7afb      	ldrb	r3, [r7, #11]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d11e      	bne.n	8010afe <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	88db      	ldrh	r3, [r3, #6]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d016      	beq.n	8010af6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8010ac8:	893b      	ldrh	r3, [r7, #8]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d00e      	beq.n	8010aec <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8010ace:	683b      	ldr	r3, [r7, #0]
 8010ad0:	88da      	ldrh	r2, [r3, #6]
 8010ad2:	893b      	ldrh	r3, [r7, #8]
 8010ad4:	4293      	cmp	r3, r2
 8010ad6:	bf28      	it	cs
 8010ad8:	4613      	movcs	r3, r2
 8010ada:	b29b      	uxth	r3, r3
 8010adc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010ade:	893b      	ldrh	r3, [r7, #8]
 8010ae0:	461a      	mov	r2, r3
 8010ae2:	68f9      	ldr	r1, [r7, #12]
 8010ae4:	6878      	ldr	r0, [r7, #4]
 8010ae6:	f000 fa44 	bl	8010f72 <USBD_CtlSendData>
 8010aea:	e009      	b.n	8010b00 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010aec:	6839      	ldr	r1, [r7, #0]
 8010aee:	6878      	ldr	r0, [r7, #4]
 8010af0:	f000 f9ce 	bl	8010e90 <USBD_CtlError>
 8010af4:	e004      	b.n	8010b00 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010af6:	6878      	ldr	r0, [r7, #4]
 8010af8:	f000 fa95 	bl	8011026 <USBD_CtlSendStatus>
 8010afc:	e000      	b.n	8010b00 <USBD_GetDescriptor+0x320>
    return;
 8010afe:	bf00      	nop
  }
}
 8010b00:	3710      	adds	r7, #16
 8010b02:	46bd      	mov	sp, r7
 8010b04:	bd80      	pop	{r7, pc}
 8010b06:	bf00      	nop

08010b08 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b084      	sub	sp, #16
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
 8010b10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010b12:	683b      	ldr	r3, [r7, #0]
 8010b14:	889b      	ldrh	r3, [r3, #4]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d131      	bne.n	8010b7e <USBD_SetAddress+0x76>
 8010b1a:	683b      	ldr	r3, [r7, #0]
 8010b1c:	88db      	ldrh	r3, [r3, #6]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d12d      	bne.n	8010b7e <USBD_SetAddress+0x76>
 8010b22:	683b      	ldr	r3, [r7, #0]
 8010b24:	885b      	ldrh	r3, [r3, #2]
 8010b26:	2b7f      	cmp	r3, #127	@ 0x7f
 8010b28:	d829      	bhi.n	8010b7e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010b2a:	683b      	ldr	r3, [r7, #0]
 8010b2c:	885b      	ldrh	r3, [r3, #2]
 8010b2e:	b2db      	uxtb	r3, r3
 8010b30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010b34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010b3c:	b2db      	uxtb	r3, r3
 8010b3e:	2b03      	cmp	r3, #3
 8010b40:	d104      	bne.n	8010b4c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010b42:	6839      	ldr	r1, [r7, #0]
 8010b44:	6878      	ldr	r0, [r7, #4]
 8010b46:	f000 f9a3 	bl	8010e90 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b4a:	e01d      	b.n	8010b88 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	7bfa      	ldrb	r2, [r7, #15]
 8010b50:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010b54:	7bfb      	ldrb	r3, [r7, #15]
 8010b56:	4619      	mov	r1, r3
 8010b58:	6878      	ldr	r0, [r7, #4]
 8010b5a:	f000 fe7b 	bl	8011854 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010b5e:	6878      	ldr	r0, [r7, #4]
 8010b60:	f000 fa61 	bl	8011026 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010b64:	7bfb      	ldrb	r3, [r7, #15]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d004      	beq.n	8010b74 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	2202      	movs	r2, #2
 8010b6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b72:	e009      	b.n	8010b88 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	2201      	movs	r2, #1
 8010b78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b7c:	e004      	b.n	8010b88 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010b7e:	6839      	ldr	r1, [r7, #0]
 8010b80:	6878      	ldr	r0, [r7, #4]
 8010b82:	f000 f985 	bl	8010e90 <USBD_CtlError>
  }
}
 8010b86:	bf00      	nop
 8010b88:	bf00      	nop
 8010b8a:	3710      	adds	r7, #16
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	bd80      	pop	{r7, pc}

08010b90 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b084      	sub	sp, #16
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
 8010b98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010b9e:	683b      	ldr	r3, [r7, #0]
 8010ba0:	885b      	ldrh	r3, [r3, #2]
 8010ba2:	b2da      	uxtb	r2, r3
 8010ba4:	4b4c      	ldr	r3, [pc, #304]	@ (8010cd8 <USBD_SetConfig+0x148>)
 8010ba6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010ba8:	4b4b      	ldr	r3, [pc, #300]	@ (8010cd8 <USBD_SetConfig+0x148>)
 8010baa:	781b      	ldrb	r3, [r3, #0]
 8010bac:	2b01      	cmp	r3, #1
 8010bae:	d905      	bls.n	8010bbc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010bb0:	6839      	ldr	r1, [r7, #0]
 8010bb2:	6878      	ldr	r0, [r7, #4]
 8010bb4:	f000 f96c 	bl	8010e90 <USBD_CtlError>
    return USBD_FAIL;
 8010bb8:	2303      	movs	r3, #3
 8010bba:	e088      	b.n	8010cce <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010bc2:	b2db      	uxtb	r3, r3
 8010bc4:	2b02      	cmp	r3, #2
 8010bc6:	d002      	beq.n	8010bce <USBD_SetConfig+0x3e>
 8010bc8:	2b03      	cmp	r3, #3
 8010bca:	d025      	beq.n	8010c18 <USBD_SetConfig+0x88>
 8010bcc:	e071      	b.n	8010cb2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010bce:	4b42      	ldr	r3, [pc, #264]	@ (8010cd8 <USBD_SetConfig+0x148>)
 8010bd0:	781b      	ldrb	r3, [r3, #0]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d01c      	beq.n	8010c10 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8010bd6:	4b40      	ldr	r3, [pc, #256]	@ (8010cd8 <USBD_SetConfig+0x148>)
 8010bd8:	781b      	ldrb	r3, [r3, #0]
 8010bda:	461a      	mov	r2, r3
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010be0:	4b3d      	ldr	r3, [pc, #244]	@ (8010cd8 <USBD_SetConfig+0x148>)
 8010be2:	781b      	ldrb	r3, [r3, #0]
 8010be4:	4619      	mov	r1, r3
 8010be6:	6878      	ldr	r0, [r7, #4]
 8010be8:	f7ff f992 	bl	800ff10 <USBD_SetClassConfig>
 8010bec:	4603      	mov	r3, r0
 8010bee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010bf0:	7bfb      	ldrb	r3, [r7, #15]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d004      	beq.n	8010c00 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8010bf6:	6839      	ldr	r1, [r7, #0]
 8010bf8:	6878      	ldr	r0, [r7, #4]
 8010bfa:	f000 f949 	bl	8010e90 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010bfe:	e065      	b.n	8010ccc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010c00:	6878      	ldr	r0, [r7, #4]
 8010c02:	f000 fa10 	bl	8011026 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	2203      	movs	r2, #3
 8010c0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010c0e:	e05d      	b.n	8010ccc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	f000 fa08 	bl	8011026 <USBD_CtlSendStatus>
      break;
 8010c16:	e059      	b.n	8010ccc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010c18:	4b2f      	ldr	r3, [pc, #188]	@ (8010cd8 <USBD_SetConfig+0x148>)
 8010c1a:	781b      	ldrb	r3, [r3, #0]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d112      	bne.n	8010c46 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	2202      	movs	r2, #2
 8010c24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8010c28:	4b2b      	ldr	r3, [pc, #172]	@ (8010cd8 <USBD_SetConfig+0x148>)
 8010c2a:	781b      	ldrb	r3, [r3, #0]
 8010c2c:	461a      	mov	r2, r3
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010c32:	4b29      	ldr	r3, [pc, #164]	@ (8010cd8 <USBD_SetConfig+0x148>)
 8010c34:	781b      	ldrb	r3, [r3, #0]
 8010c36:	4619      	mov	r1, r3
 8010c38:	6878      	ldr	r0, [r7, #4]
 8010c3a:	f7ff f985 	bl	800ff48 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010c3e:	6878      	ldr	r0, [r7, #4]
 8010c40:	f000 f9f1 	bl	8011026 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010c44:	e042      	b.n	8010ccc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8010c46:	4b24      	ldr	r3, [pc, #144]	@ (8010cd8 <USBD_SetConfig+0x148>)
 8010c48:	781b      	ldrb	r3, [r3, #0]
 8010c4a:	461a      	mov	r2, r3
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	685b      	ldr	r3, [r3, #4]
 8010c50:	429a      	cmp	r2, r3
 8010c52:	d02a      	beq.n	8010caa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	685b      	ldr	r3, [r3, #4]
 8010c58:	b2db      	uxtb	r3, r3
 8010c5a:	4619      	mov	r1, r3
 8010c5c:	6878      	ldr	r0, [r7, #4]
 8010c5e:	f7ff f973 	bl	800ff48 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010c62:	4b1d      	ldr	r3, [pc, #116]	@ (8010cd8 <USBD_SetConfig+0x148>)
 8010c64:	781b      	ldrb	r3, [r3, #0]
 8010c66:	461a      	mov	r2, r3
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8010cd8 <USBD_SetConfig+0x148>)
 8010c6e:	781b      	ldrb	r3, [r3, #0]
 8010c70:	4619      	mov	r1, r3
 8010c72:	6878      	ldr	r0, [r7, #4]
 8010c74:	f7ff f94c 	bl	800ff10 <USBD_SetClassConfig>
 8010c78:	4603      	mov	r3, r0
 8010c7a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010c7c:	7bfb      	ldrb	r3, [r7, #15]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d00f      	beq.n	8010ca2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8010c82:	6839      	ldr	r1, [r7, #0]
 8010c84:	6878      	ldr	r0, [r7, #4]
 8010c86:	f000 f903 	bl	8010e90 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	685b      	ldr	r3, [r3, #4]
 8010c8e:	b2db      	uxtb	r3, r3
 8010c90:	4619      	mov	r1, r3
 8010c92:	6878      	ldr	r0, [r7, #4]
 8010c94:	f7ff f958 	bl	800ff48 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	2202      	movs	r2, #2
 8010c9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010ca0:	e014      	b.n	8010ccc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010ca2:	6878      	ldr	r0, [r7, #4]
 8010ca4:	f000 f9bf 	bl	8011026 <USBD_CtlSendStatus>
      break;
 8010ca8:	e010      	b.n	8010ccc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8010caa:	6878      	ldr	r0, [r7, #4]
 8010cac:	f000 f9bb 	bl	8011026 <USBD_CtlSendStatus>
      break;
 8010cb0:	e00c      	b.n	8010ccc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8010cb2:	6839      	ldr	r1, [r7, #0]
 8010cb4:	6878      	ldr	r0, [r7, #4]
 8010cb6:	f000 f8eb 	bl	8010e90 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010cba:	4b07      	ldr	r3, [pc, #28]	@ (8010cd8 <USBD_SetConfig+0x148>)
 8010cbc:	781b      	ldrb	r3, [r3, #0]
 8010cbe:	4619      	mov	r1, r3
 8010cc0:	6878      	ldr	r0, [r7, #4]
 8010cc2:	f7ff f941 	bl	800ff48 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010cc6:	2303      	movs	r3, #3
 8010cc8:	73fb      	strb	r3, [r7, #15]
      break;
 8010cca:	bf00      	nop
  }

  return ret;
 8010ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cce:	4618      	mov	r0, r3
 8010cd0:	3710      	adds	r7, #16
 8010cd2:	46bd      	mov	sp, r7
 8010cd4:	bd80      	pop	{r7, pc}
 8010cd6:	bf00      	nop
 8010cd8:	20002b90 	.word	0x20002b90

08010cdc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b082      	sub	sp, #8
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
 8010ce4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	88db      	ldrh	r3, [r3, #6]
 8010cea:	2b01      	cmp	r3, #1
 8010cec:	d004      	beq.n	8010cf8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010cee:	6839      	ldr	r1, [r7, #0]
 8010cf0:	6878      	ldr	r0, [r7, #4]
 8010cf2:	f000 f8cd 	bl	8010e90 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010cf6:	e023      	b.n	8010d40 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010cfe:	b2db      	uxtb	r3, r3
 8010d00:	2b02      	cmp	r3, #2
 8010d02:	dc02      	bgt.n	8010d0a <USBD_GetConfig+0x2e>
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	dc03      	bgt.n	8010d10 <USBD_GetConfig+0x34>
 8010d08:	e015      	b.n	8010d36 <USBD_GetConfig+0x5a>
 8010d0a:	2b03      	cmp	r3, #3
 8010d0c:	d00b      	beq.n	8010d26 <USBD_GetConfig+0x4a>
 8010d0e:	e012      	b.n	8010d36 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	2200      	movs	r2, #0
 8010d14:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	3308      	adds	r3, #8
 8010d1a:	2201      	movs	r2, #1
 8010d1c:	4619      	mov	r1, r3
 8010d1e:	6878      	ldr	r0, [r7, #4]
 8010d20:	f000 f927 	bl	8010f72 <USBD_CtlSendData>
        break;
 8010d24:	e00c      	b.n	8010d40 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	3304      	adds	r3, #4
 8010d2a:	2201      	movs	r2, #1
 8010d2c:	4619      	mov	r1, r3
 8010d2e:	6878      	ldr	r0, [r7, #4]
 8010d30:	f000 f91f 	bl	8010f72 <USBD_CtlSendData>
        break;
 8010d34:	e004      	b.n	8010d40 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010d36:	6839      	ldr	r1, [r7, #0]
 8010d38:	6878      	ldr	r0, [r7, #4]
 8010d3a:	f000 f8a9 	bl	8010e90 <USBD_CtlError>
        break;
 8010d3e:	bf00      	nop
}
 8010d40:	bf00      	nop
 8010d42:	3708      	adds	r7, #8
 8010d44:	46bd      	mov	sp, r7
 8010d46:	bd80      	pop	{r7, pc}

08010d48 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b082      	sub	sp, #8
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	6078      	str	r0, [r7, #4]
 8010d50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010d58:	b2db      	uxtb	r3, r3
 8010d5a:	3b01      	subs	r3, #1
 8010d5c:	2b02      	cmp	r3, #2
 8010d5e:	d81e      	bhi.n	8010d9e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010d60:	683b      	ldr	r3, [r7, #0]
 8010d62:	88db      	ldrh	r3, [r3, #6]
 8010d64:	2b02      	cmp	r3, #2
 8010d66:	d004      	beq.n	8010d72 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010d68:	6839      	ldr	r1, [r7, #0]
 8010d6a:	6878      	ldr	r0, [r7, #4]
 8010d6c:	f000 f890 	bl	8010e90 <USBD_CtlError>
        break;
 8010d70:	e01a      	b.n	8010da8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	2201      	movs	r2, #1
 8010d76:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d005      	beq.n	8010d8e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	68db      	ldr	r3, [r3, #12]
 8010d86:	f043 0202 	orr.w	r2, r3, #2
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	330c      	adds	r3, #12
 8010d92:	2202      	movs	r2, #2
 8010d94:	4619      	mov	r1, r3
 8010d96:	6878      	ldr	r0, [r7, #4]
 8010d98:	f000 f8eb 	bl	8010f72 <USBD_CtlSendData>
      break;
 8010d9c:	e004      	b.n	8010da8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010d9e:	6839      	ldr	r1, [r7, #0]
 8010da0:	6878      	ldr	r0, [r7, #4]
 8010da2:	f000 f875 	bl	8010e90 <USBD_CtlError>
      break;
 8010da6:	bf00      	nop
  }
}
 8010da8:	bf00      	nop
 8010daa:	3708      	adds	r7, #8
 8010dac:	46bd      	mov	sp, r7
 8010dae:	bd80      	pop	{r7, pc}

08010db0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b082      	sub	sp, #8
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]
 8010db8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010dba:	683b      	ldr	r3, [r7, #0]
 8010dbc:	885b      	ldrh	r3, [r3, #2]
 8010dbe:	2b01      	cmp	r3, #1
 8010dc0:	d106      	bne.n	8010dd0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	2201      	movs	r2, #1
 8010dc6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010dca:	6878      	ldr	r0, [r7, #4]
 8010dcc:	f000 f92b 	bl	8011026 <USBD_CtlSendStatus>
  }
}
 8010dd0:	bf00      	nop
 8010dd2:	3708      	adds	r7, #8
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	bd80      	pop	{r7, pc}

08010dd8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b082      	sub	sp, #8
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	6078      	str	r0, [r7, #4]
 8010de0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010de8:	b2db      	uxtb	r3, r3
 8010dea:	3b01      	subs	r3, #1
 8010dec:	2b02      	cmp	r3, #2
 8010dee:	d80b      	bhi.n	8010e08 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010df0:	683b      	ldr	r3, [r7, #0]
 8010df2:	885b      	ldrh	r3, [r3, #2]
 8010df4:	2b01      	cmp	r3, #1
 8010df6:	d10c      	bne.n	8010e12 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010e00:	6878      	ldr	r0, [r7, #4]
 8010e02:	f000 f910 	bl	8011026 <USBD_CtlSendStatus>
      }
      break;
 8010e06:	e004      	b.n	8010e12 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010e08:	6839      	ldr	r1, [r7, #0]
 8010e0a:	6878      	ldr	r0, [r7, #4]
 8010e0c:	f000 f840 	bl	8010e90 <USBD_CtlError>
      break;
 8010e10:	e000      	b.n	8010e14 <USBD_ClrFeature+0x3c>
      break;
 8010e12:	bf00      	nop
  }
}
 8010e14:	bf00      	nop
 8010e16:	3708      	adds	r7, #8
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	bd80      	pop	{r7, pc}

08010e1c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	b084      	sub	sp, #16
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	6078      	str	r0, [r7, #4]
 8010e24:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010e26:	683b      	ldr	r3, [r7, #0]
 8010e28:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	781a      	ldrb	r2, [r3, #0]
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	3301      	adds	r3, #1
 8010e36:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	781a      	ldrb	r2, [r3, #0]
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	3301      	adds	r3, #1
 8010e44:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010e46:	68f8      	ldr	r0, [r7, #12]
 8010e48:	f7ff fa92 	bl	8010370 <SWAPBYTE>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	461a      	mov	r2, r3
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	3301      	adds	r3, #1
 8010e58:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	3301      	adds	r3, #1
 8010e5e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010e60:	68f8      	ldr	r0, [r7, #12]
 8010e62:	f7ff fa85 	bl	8010370 <SWAPBYTE>
 8010e66:	4603      	mov	r3, r0
 8010e68:	461a      	mov	r2, r3
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	3301      	adds	r3, #1
 8010e72:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	3301      	adds	r3, #1
 8010e78:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010e7a:	68f8      	ldr	r0, [r7, #12]
 8010e7c:	f7ff fa78 	bl	8010370 <SWAPBYTE>
 8010e80:	4603      	mov	r3, r0
 8010e82:	461a      	mov	r2, r3
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	80da      	strh	r2, [r3, #6]
}
 8010e88:	bf00      	nop
 8010e8a:	3710      	adds	r7, #16
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	bd80      	pop	{r7, pc}

08010e90 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b082      	sub	sp, #8
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
 8010e98:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010e9a:	2180      	movs	r1, #128	@ 0x80
 8010e9c:	6878      	ldr	r0, [r7, #4]
 8010e9e:	f000 fc6f 	bl	8011780 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010ea2:	2100      	movs	r1, #0
 8010ea4:	6878      	ldr	r0, [r7, #4]
 8010ea6:	f000 fc6b 	bl	8011780 <USBD_LL_StallEP>
}
 8010eaa:	bf00      	nop
 8010eac:	3708      	adds	r7, #8
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	bd80      	pop	{r7, pc}

08010eb2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010eb2:	b580      	push	{r7, lr}
 8010eb4:	b086      	sub	sp, #24
 8010eb6:	af00      	add	r7, sp, #0
 8010eb8:	60f8      	str	r0, [r7, #12]
 8010eba:	60b9      	str	r1, [r7, #8]
 8010ebc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d036      	beq.n	8010f36 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010ecc:	6938      	ldr	r0, [r7, #16]
 8010ece:	f000 f836 	bl	8010f3e <USBD_GetLen>
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	3301      	adds	r3, #1
 8010ed6:	b29b      	uxth	r3, r3
 8010ed8:	005b      	lsls	r3, r3, #1
 8010eda:	b29a      	uxth	r2, r3
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010ee0:	7dfb      	ldrb	r3, [r7, #23]
 8010ee2:	68ba      	ldr	r2, [r7, #8]
 8010ee4:	4413      	add	r3, r2
 8010ee6:	687a      	ldr	r2, [r7, #4]
 8010ee8:	7812      	ldrb	r2, [r2, #0]
 8010eea:	701a      	strb	r2, [r3, #0]
  idx++;
 8010eec:	7dfb      	ldrb	r3, [r7, #23]
 8010eee:	3301      	adds	r3, #1
 8010ef0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010ef2:	7dfb      	ldrb	r3, [r7, #23]
 8010ef4:	68ba      	ldr	r2, [r7, #8]
 8010ef6:	4413      	add	r3, r2
 8010ef8:	2203      	movs	r2, #3
 8010efa:	701a      	strb	r2, [r3, #0]
  idx++;
 8010efc:	7dfb      	ldrb	r3, [r7, #23]
 8010efe:	3301      	adds	r3, #1
 8010f00:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010f02:	e013      	b.n	8010f2c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010f04:	7dfb      	ldrb	r3, [r7, #23]
 8010f06:	68ba      	ldr	r2, [r7, #8]
 8010f08:	4413      	add	r3, r2
 8010f0a:	693a      	ldr	r2, [r7, #16]
 8010f0c:	7812      	ldrb	r2, [r2, #0]
 8010f0e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010f10:	693b      	ldr	r3, [r7, #16]
 8010f12:	3301      	adds	r3, #1
 8010f14:	613b      	str	r3, [r7, #16]
    idx++;
 8010f16:	7dfb      	ldrb	r3, [r7, #23]
 8010f18:	3301      	adds	r3, #1
 8010f1a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010f1c:	7dfb      	ldrb	r3, [r7, #23]
 8010f1e:	68ba      	ldr	r2, [r7, #8]
 8010f20:	4413      	add	r3, r2
 8010f22:	2200      	movs	r2, #0
 8010f24:	701a      	strb	r2, [r3, #0]
    idx++;
 8010f26:	7dfb      	ldrb	r3, [r7, #23]
 8010f28:	3301      	adds	r3, #1
 8010f2a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010f2c:	693b      	ldr	r3, [r7, #16]
 8010f2e:	781b      	ldrb	r3, [r3, #0]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d1e7      	bne.n	8010f04 <USBD_GetString+0x52>
 8010f34:	e000      	b.n	8010f38 <USBD_GetString+0x86>
    return;
 8010f36:	bf00      	nop
  }
}
 8010f38:	3718      	adds	r7, #24
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	bd80      	pop	{r7, pc}

08010f3e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010f3e:	b480      	push	{r7}
 8010f40:	b085      	sub	sp, #20
 8010f42:	af00      	add	r7, sp, #0
 8010f44:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010f46:	2300      	movs	r3, #0
 8010f48:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010f4e:	e005      	b.n	8010f5c <USBD_GetLen+0x1e>
  {
    len++;
 8010f50:	7bfb      	ldrb	r3, [r7, #15]
 8010f52:	3301      	adds	r3, #1
 8010f54:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010f56:	68bb      	ldr	r3, [r7, #8]
 8010f58:	3301      	adds	r3, #1
 8010f5a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010f5c:	68bb      	ldr	r3, [r7, #8]
 8010f5e:	781b      	ldrb	r3, [r3, #0]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d1f5      	bne.n	8010f50 <USBD_GetLen+0x12>
  }

  return len;
 8010f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f66:	4618      	mov	r0, r3
 8010f68:	3714      	adds	r7, #20
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f70:	4770      	bx	lr

08010f72 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010f72:	b580      	push	{r7, lr}
 8010f74:	b084      	sub	sp, #16
 8010f76:	af00      	add	r7, sp, #0
 8010f78:	60f8      	str	r0, [r7, #12]
 8010f7a:	60b9      	str	r1, [r7, #8]
 8010f7c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	2202      	movs	r2, #2
 8010f82:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	687a      	ldr	r2, [r7, #4]
 8010f8a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	687a      	ldr	r2, [r7, #4]
 8010f90:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	68ba      	ldr	r2, [r7, #8]
 8010f96:	2100      	movs	r1, #0
 8010f98:	68f8      	ldr	r0, [r7, #12]
 8010f9a:	f000 fc7a 	bl	8011892 <USBD_LL_Transmit>

  return USBD_OK;
 8010f9e:	2300      	movs	r3, #0
}
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	3710      	adds	r7, #16
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	bd80      	pop	{r7, pc}

08010fa8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010fa8:	b580      	push	{r7, lr}
 8010faa:	b084      	sub	sp, #16
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	60f8      	str	r0, [r7, #12]
 8010fb0:	60b9      	str	r1, [r7, #8]
 8010fb2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	68ba      	ldr	r2, [r7, #8]
 8010fb8:	2100      	movs	r1, #0
 8010fba:	68f8      	ldr	r0, [r7, #12]
 8010fbc:	f000 fc69 	bl	8011892 <USBD_LL_Transmit>

  return USBD_OK;
 8010fc0:	2300      	movs	r3, #0
}
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	3710      	adds	r7, #16
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	bd80      	pop	{r7, pc}

08010fca <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010fca:	b580      	push	{r7, lr}
 8010fcc:	b084      	sub	sp, #16
 8010fce:	af00      	add	r7, sp, #0
 8010fd0:	60f8      	str	r0, [r7, #12]
 8010fd2:	60b9      	str	r1, [r7, #8]
 8010fd4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	2203      	movs	r2, #3
 8010fda:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	687a      	ldr	r2, [r7, #4]
 8010fe2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	687a      	ldr	r2, [r7, #4]
 8010fea:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	68ba      	ldr	r2, [r7, #8]
 8010ff2:	2100      	movs	r1, #0
 8010ff4:	68f8      	ldr	r0, [r7, #12]
 8010ff6:	f000 fc6d 	bl	80118d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010ffa:	2300      	movs	r3, #0
}
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	3710      	adds	r7, #16
 8011000:	46bd      	mov	sp, r7
 8011002:	bd80      	pop	{r7, pc}

08011004 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011004:	b580      	push	{r7, lr}
 8011006:	b084      	sub	sp, #16
 8011008:	af00      	add	r7, sp, #0
 801100a:	60f8      	str	r0, [r7, #12]
 801100c:	60b9      	str	r1, [r7, #8]
 801100e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	68ba      	ldr	r2, [r7, #8]
 8011014:	2100      	movs	r1, #0
 8011016:	68f8      	ldr	r0, [r7, #12]
 8011018:	f000 fc5c 	bl	80118d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801101c:	2300      	movs	r3, #0
}
 801101e:	4618      	mov	r0, r3
 8011020:	3710      	adds	r7, #16
 8011022:	46bd      	mov	sp, r7
 8011024:	bd80      	pop	{r7, pc}

08011026 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011026:	b580      	push	{r7, lr}
 8011028:	b082      	sub	sp, #8
 801102a:	af00      	add	r7, sp, #0
 801102c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	2204      	movs	r2, #4
 8011032:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011036:	2300      	movs	r3, #0
 8011038:	2200      	movs	r2, #0
 801103a:	2100      	movs	r1, #0
 801103c:	6878      	ldr	r0, [r7, #4]
 801103e:	f000 fc28 	bl	8011892 <USBD_LL_Transmit>

  return USBD_OK;
 8011042:	2300      	movs	r3, #0
}
 8011044:	4618      	mov	r0, r3
 8011046:	3708      	adds	r7, #8
 8011048:	46bd      	mov	sp, r7
 801104a:	bd80      	pop	{r7, pc}

0801104c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801104c:	b580      	push	{r7, lr}
 801104e:	b082      	sub	sp, #8
 8011050:	af00      	add	r7, sp, #0
 8011052:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	2205      	movs	r2, #5
 8011058:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801105c:	2300      	movs	r3, #0
 801105e:	2200      	movs	r2, #0
 8011060:	2100      	movs	r1, #0
 8011062:	6878      	ldr	r0, [r7, #4]
 8011064:	f000 fc36 	bl	80118d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011068:	2300      	movs	r3, #0
}
 801106a:	4618      	mov	r0, r3
 801106c:	3708      	adds	r7, #8
 801106e:	46bd      	mov	sp, r7
 8011070:	bd80      	pop	{r7, pc}
	...

08011074 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8011074:	b580      	push	{r7, lr}
 8011076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8011078:	2200      	movs	r2, #0
 801107a:	4912      	ldr	r1, [pc, #72]	@ (80110c4 <MX_USB_Device_Init+0x50>)
 801107c:	4812      	ldr	r0, [pc, #72]	@ (80110c8 <MX_USB_Device_Init+0x54>)
 801107e:	f7fe fed9 	bl	800fe34 <USBD_Init>
 8011082:	4603      	mov	r3, r0
 8011084:	2b00      	cmp	r3, #0
 8011086:	d001      	beq.n	801108c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8011088:	f7f1 fc0c 	bl	80028a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 801108c:	490f      	ldr	r1, [pc, #60]	@ (80110cc <MX_USB_Device_Init+0x58>)
 801108e:	480e      	ldr	r0, [pc, #56]	@ (80110c8 <MX_USB_Device_Init+0x54>)
 8011090:	f7fe ff00 	bl	800fe94 <USBD_RegisterClass>
 8011094:	4603      	mov	r3, r0
 8011096:	2b00      	cmp	r3, #0
 8011098:	d001      	beq.n	801109e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 801109a:	f7f1 fc03 	bl	80028a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 801109e:	490c      	ldr	r1, [pc, #48]	@ (80110d0 <MX_USB_Device_Init+0x5c>)
 80110a0:	4809      	ldr	r0, [pc, #36]	@ (80110c8 <MX_USB_Device_Init+0x54>)
 80110a2:	f7fe fe51 	bl	800fd48 <USBD_CDC_RegisterInterface>
 80110a6:	4603      	mov	r3, r0
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d001      	beq.n	80110b0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80110ac:	f7f1 fbfa 	bl	80028a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80110b0:	4805      	ldr	r0, [pc, #20]	@ (80110c8 <MX_USB_Device_Init+0x54>)
 80110b2:	f7fe ff16 	bl	800fee2 <USBD_Start>
 80110b6:	4603      	mov	r3, r0
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d001      	beq.n	80110c0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80110bc:	f7f1 fbf2 	bl	80028a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80110c0:	bf00      	nop
 80110c2:	bd80      	pop	{r7, pc}
 80110c4:	20000178 	.word	0x20000178
 80110c8:	20002b94 	.word	0x20002b94
 80110cc:	20000060 	.word	0x20000060
 80110d0:	20000164 	.word	0x20000164

080110d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80110d4:	b580      	push	{r7, lr}
 80110d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80110d8:	2200      	movs	r2, #0
 80110da:	4905      	ldr	r1, [pc, #20]	@ (80110f0 <CDC_Init_FS+0x1c>)
 80110dc:	4805      	ldr	r0, [pc, #20]	@ (80110f4 <CDC_Init_FS+0x20>)
 80110de:	f7fe fe48 	bl	800fd72 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80110e2:	4905      	ldr	r1, [pc, #20]	@ (80110f8 <CDC_Init_FS+0x24>)
 80110e4:	4803      	ldr	r0, [pc, #12]	@ (80110f4 <CDC_Init_FS+0x20>)
 80110e6:	f7fe fe62 	bl	800fdae <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80110ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80110ec:	4618      	mov	r0, r3
 80110ee:	bd80      	pop	{r7, pc}
 80110f0:	20003264 	.word	0x20003264
 80110f4:	20002b94 	.word	0x20002b94
 80110f8:	20002e64 	.word	0x20002e64

080110fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80110fc:	b480      	push	{r7}
 80110fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011100:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011102:	4618      	mov	r0, r3
 8011104:	46bd      	mov	sp, r7
 8011106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110a:	4770      	bx	lr

0801110c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801110c:	b480      	push	{r7}
 801110e:	b083      	sub	sp, #12
 8011110:	af00      	add	r7, sp, #0
 8011112:	4603      	mov	r3, r0
 8011114:	6039      	str	r1, [r7, #0]
 8011116:	71fb      	strb	r3, [r7, #7]
 8011118:	4613      	mov	r3, r2
 801111a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801111c:	79fb      	ldrb	r3, [r7, #7]
 801111e:	2b23      	cmp	r3, #35	@ 0x23
 8011120:	d84a      	bhi.n	80111b8 <CDC_Control_FS+0xac>
 8011122:	a201      	add	r2, pc, #4	@ (adr r2, 8011128 <CDC_Control_FS+0x1c>)
 8011124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011128:	080111b9 	.word	0x080111b9
 801112c:	080111b9 	.word	0x080111b9
 8011130:	080111b9 	.word	0x080111b9
 8011134:	080111b9 	.word	0x080111b9
 8011138:	080111b9 	.word	0x080111b9
 801113c:	080111b9 	.word	0x080111b9
 8011140:	080111b9 	.word	0x080111b9
 8011144:	080111b9 	.word	0x080111b9
 8011148:	080111b9 	.word	0x080111b9
 801114c:	080111b9 	.word	0x080111b9
 8011150:	080111b9 	.word	0x080111b9
 8011154:	080111b9 	.word	0x080111b9
 8011158:	080111b9 	.word	0x080111b9
 801115c:	080111b9 	.word	0x080111b9
 8011160:	080111b9 	.word	0x080111b9
 8011164:	080111b9 	.word	0x080111b9
 8011168:	080111b9 	.word	0x080111b9
 801116c:	080111b9 	.word	0x080111b9
 8011170:	080111b9 	.word	0x080111b9
 8011174:	080111b9 	.word	0x080111b9
 8011178:	080111b9 	.word	0x080111b9
 801117c:	080111b9 	.word	0x080111b9
 8011180:	080111b9 	.word	0x080111b9
 8011184:	080111b9 	.word	0x080111b9
 8011188:	080111b9 	.word	0x080111b9
 801118c:	080111b9 	.word	0x080111b9
 8011190:	080111b9 	.word	0x080111b9
 8011194:	080111b9 	.word	0x080111b9
 8011198:	080111b9 	.word	0x080111b9
 801119c:	080111b9 	.word	0x080111b9
 80111a0:	080111b9 	.word	0x080111b9
 80111a4:	080111b9 	.word	0x080111b9
 80111a8:	080111b9 	.word	0x080111b9
 80111ac:	080111b9 	.word	0x080111b9
 80111b0:	080111b9 	.word	0x080111b9
 80111b4:	080111b9 	.word	0x080111b9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80111b8:	bf00      	nop
  }

  return (USBD_OK);
 80111ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80111bc:	4618      	mov	r0, r3
 80111be:	370c      	adds	r7, #12
 80111c0:	46bd      	mov	sp, r7
 80111c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c6:	4770      	bx	lr

080111c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b082      	sub	sp, #8
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
 80111d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80111d2:	6879      	ldr	r1, [r7, #4]
 80111d4:	4805      	ldr	r0, [pc, #20]	@ (80111ec <CDC_Receive_FS+0x24>)
 80111d6:	f7fe fdea 	bl	800fdae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80111da:	4804      	ldr	r0, [pc, #16]	@ (80111ec <CDC_Receive_FS+0x24>)
 80111dc:	f7fe fe00 	bl	800fde0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80111e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80111e2:	4618      	mov	r0, r3
 80111e4:	3708      	adds	r7, #8
 80111e6:	46bd      	mov	sp, r7
 80111e8:	bd80      	pop	{r7, pc}
 80111ea:	bf00      	nop
 80111ec:	20002b94 	.word	0x20002b94

080111f0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80111f0:	b480      	push	{r7}
 80111f2:	b087      	sub	sp, #28
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	60f8      	str	r0, [r7, #12]
 80111f8:	60b9      	str	r1, [r7, #8]
 80111fa:	4613      	mov	r3, r2
 80111fc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80111fe:	2300      	movs	r3, #0
 8011200:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011202:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011206:	4618      	mov	r0, r3
 8011208:	371c      	adds	r7, #28
 801120a:	46bd      	mov	sp, r7
 801120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011210:	4770      	bx	lr
	...

08011214 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011214:	b480      	push	{r7}
 8011216:	b083      	sub	sp, #12
 8011218:	af00      	add	r7, sp, #0
 801121a:	4603      	mov	r3, r0
 801121c:	6039      	str	r1, [r7, #0]
 801121e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	2212      	movs	r2, #18
 8011224:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8011226:	4b03      	ldr	r3, [pc, #12]	@ (8011234 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8011228:	4618      	mov	r0, r3
 801122a:	370c      	adds	r7, #12
 801122c:	46bd      	mov	sp, r7
 801122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011232:	4770      	bx	lr
 8011234:	20000198 	.word	0x20000198

08011238 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011238:	b480      	push	{r7}
 801123a:	b083      	sub	sp, #12
 801123c:	af00      	add	r7, sp, #0
 801123e:	4603      	mov	r3, r0
 8011240:	6039      	str	r1, [r7, #0]
 8011242:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011244:	683b      	ldr	r3, [r7, #0]
 8011246:	2204      	movs	r2, #4
 8011248:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801124a:	4b03      	ldr	r3, [pc, #12]	@ (8011258 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 801124c:	4618      	mov	r0, r3
 801124e:	370c      	adds	r7, #12
 8011250:	46bd      	mov	sp, r7
 8011252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011256:	4770      	bx	lr
 8011258:	200001ac 	.word	0x200001ac

0801125c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801125c:	b580      	push	{r7, lr}
 801125e:	b082      	sub	sp, #8
 8011260:	af00      	add	r7, sp, #0
 8011262:	4603      	mov	r3, r0
 8011264:	6039      	str	r1, [r7, #0]
 8011266:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011268:	79fb      	ldrb	r3, [r7, #7]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d105      	bne.n	801127a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801126e:	683a      	ldr	r2, [r7, #0]
 8011270:	4907      	ldr	r1, [pc, #28]	@ (8011290 <USBD_CDC_ProductStrDescriptor+0x34>)
 8011272:	4808      	ldr	r0, [pc, #32]	@ (8011294 <USBD_CDC_ProductStrDescriptor+0x38>)
 8011274:	f7ff fe1d 	bl	8010eb2 <USBD_GetString>
 8011278:	e004      	b.n	8011284 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801127a:	683a      	ldr	r2, [r7, #0]
 801127c:	4904      	ldr	r1, [pc, #16]	@ (8011290 <USBD_CDC_ProductStrDescriptor+0x34>)
 801127e:	4805      	ldr	r0, [pc, #20]	@ (8011294 <USBD_CDC_ProductStrDescriptor+0x38>)
 8011280:	f7ff fe17 	bl	8010eb2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011284:	4b02      	ldr	r3, [pc, #8]	@ (8011290 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8011286:	4618      	mov	r0, r3
 8011288:	3708      	adds	r7, #8
 801128a:	46bd      	mov	sp, r7
 801128c:	bd80      	pop	{r7, pc}
 801128e:	bf00      	nop
 8011290:	20003664 	.word	0x20003664
 8011294:	08016344 	.word	0x08016344

08011298 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011298:	b580      	push	{r7, lr}
 801129a:	b082      	sub	sp, #8
 801129c:	af00      	add	r7, sp, #0
 801129e:	4603      	mov	r3, r0
 80112a0:	6039      	str	r1, [r7, #0]
 80112a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80112a4:	683a      	ldr	r2, [r7, #0]
 80112a6:	4904      	ldr	r1, [pc, #16]	@ (80112b8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80112a8:	4804      	ldr	r0, [pc, #16]	@ (80112bc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80112aa:	f7ff fe02 	bl	8010eb2 <USBD_GetString>
  return USBD_StrDesc;
 80112ae:	4b02      	ldr	r3, [pc, #8]	@ (80112b8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80112b0:	4618      	mov	r0, r3
 80112b2:	3708      	adds	r7, #8
 80112b4:	46bd      	mov	sp, r7
 80112b6:	bd80      	pop	{r7, pc}
 80112b8:	20003664 	.word	0x20003664
 80112bc:	0801635c 	.word	0x0801635c

080112c0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80112c0:	b580      	push	{r7, lr}
 80112c2:	b082      	sub	sp, #8
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	4603      	mov	r3, r0
 80112c8:	6039      	str	r1, [r7, #0]
 80112ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80112cc:	683b      	ldr	r3, [r7, #0]
 80112ce:	221a      	movs	r2, #26
 80112d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80112d2:	f000 f843 	bl	801135c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80112d6:	4b02      	ldr	r3, [pc, #8]	@ (80112e0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80112d8:	4618      	mov	r0, r3
 80112da:	3708      	adds	r7, #8
 80112dc:	46bd      	mov	sp, r7
 80112de:	bd80      	pop	{r7, pc}
 80112e0:	200001b0 	.word	0x200001b0

080112e4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80112e4:	b580      	push	{r7, lr}
 80112e6:	b082      	sub	sp, #8
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	4603      	mov	r3, r0
 80112ec:	6039      	str	r1, [r7, #0]
 80112ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80112f0:	79fb      	ldrb	r3, [r7, #7]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d105      	bne.n	8011302 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80112f6:	683a      	ldr	r2, [r7, #0]
 80112f8:	4907      	ldr	r1, [pc, #28]	@ (8011318 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80112fa:	4808      	ldr	r0, [pc, #32]	@ (801131c <USBD_CDC_ConfigStrDescriptor+0x38>)
 80112fc:	f7ff fdd9 	bl	8010eb2 <USBD_GetString>
 8011300:	e004      	b.n	801130c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8011302:	683a      	ldr	r2, [r7, #0]
 8011304:	4904      	ldr	r1, [pc, #16]	@ (8011318 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8011306:	4805      	ldr	r0, [pc, #20]	@ (801131c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011308:	f7ff fdd3 	bl	8010eb2 <USBD_GetString>
  }
  return USBD_StrDesc;
 801130c:	4b02      	ldr	r3, [pc, #8]	@ (8011318 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 801130e:	4618      	mov	r0, r3
 8011310:	3708      	adds	r7, #8
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}
 8011316:	bf00      	nop
 8011318:	20003664 	.word	0x20003664
 801131c:	08016370 	.word	0x08016370

08011320 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011320:	b580      	push	{r7, lr}
 8011322:	b082      	sub	sp, #8
 8011324:	af00      	add	r7, sp, #0
 8011326:	4603      	mov	r3, r0
 8011328:	6039      	str	r1, [r7, #0]
 801132a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801132c:	79fb      	ldrb	r3, [r7, #7]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d105      	bne.n	801133e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8011332:	683a      	ldr	r2, [r7, #0]
 8011334:	4907      	ldr	r1, [pc, #28]	@ (8011354 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8011336:	4808      	ldr	r0, [pc, #32]	@ (8011358 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8011338:	f7ff fdbb 	bl	8010eb2 <USBD_GetString>
 801133c:	e004      	b.n	8011348 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801133e:	683a      	ldr	r2, [r7, #0]
 8011340:	4904      	ldr	r1, [pc, #16]	@ (8011354 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8011342:	4805      	ldr	r0, [pc, #20]	@ (8011358 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8011344:	f7ff fdb5 	bl	8010eb2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011348:	4b02      	ldr	r3, [pc, #8]	@ (8011354 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801134a:	4618      	mov	r0, r3
 801134c:	3708      	adds	r7, #8
 801134e:	46bd      	mov	sp, r7
 8011350:	bd80      	pop	{r7, pc}
 8011352:	bf00      	nop
 8011354:	20003664 	.word	0x20003664
 8011358:	0801637c 	.word	0x0801637c

0801135c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b084      	sub	sp, #16
 8011360:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011362:	4b0f      	ldr	r3, [pc, #60]	@ (80113a0 <Get_SerialNum+0x44>)
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011368:	4b0e      	ldr	r3, [pc, #56]	@ (80113a4 <Get_SerialNum+0x48>)
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801136e:	4b0e      	ldr	r3, [pc, #56]	@ (80113a8 <Get_SerialNum+0x4c>)
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011374:	68fa      	ldr	r2, [r7, #12]
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	4413      	add	r3, r2
 801137a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d009      	beq.n	8011396 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011382:	2208      	movs	r2, #8
 8011384:	4909      	ldr	r1, [pc, #36]	@ (80113ac <Get_SerialNum+0x50>)
 8011386:	68f8      	ldr	r0, [r7, #12]
 8011388:	f000 f814 	bl	80113b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801138c:	2204      	movs	r2, #4
 801138e:	4908      	ldr	r1, [pc, #32]	@ (80113b0 <Get_SerialNum+0x54>)
 8011390:	68b8      	ldr	r0, [r7, #8]
 8011392:	f000 f80f 	bl	80113b4 <IntToUnicode>
  }
}
 8011396:	bf00      	nop
 8011398:	3710      	adds	r7, #16
 801139a:	46bd      	mov	sp, r7
 801139c:	bd80      	pop	{r7, pc}
 801139e:	bf00      	nop
 80113a0:	1fff7590 	.word	0x1fff7590
 80113a4:	1fff7594 	.word	0x1fff7594
 80113a8:	1fff7598 	.word	0x1fff7598
 80113ac:	200001b2 	.word	0x200001b2
 80113b0:	200001c2 	.word	0x200001c2

080113b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80113b4:	b480      	push	{r7}
 80113b6:	b087      	sub	sp, #28
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	60f8      	str	r0, [r7, #12]
 80113bc:	60b9      	str	r1, [r7, #8]
 80113be:	4613      	mov	r3, r2
 80113c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80113c2:	2300      	movs	r3, #0
 80113c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80113c6:	2300      	movs	r3, #0
 80113c8:	75fb      	strb	r3, [r7, #23]
 80113ca:	e027      	b.n	801141c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	0f1b      	lsrs	r3, r3, #28
 80113d0:	2b09      	cmp	r3, #9
 80113d2:	d80b      	bhi.n	80113ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	0f1b      	lsrs	r3, r3, #28
 80113d8:	b2da      	uxtb	r2, r3
 80113da:	7dfb      	ldrb	r3, [r7, #23]
 80113dc:	005b      	lsls	r3, r3, #1
 80113de:	4619      	mov	r1, r3
 80113e0:	68bb      	ldr	r3, [r7, #8]
 80113e2:	440b      	add	r3, r1
 80113e4:	3230      	adds	r2, #48	@ 0x30
 80113e6:	b2d2      	uxtb	r2, r2
 80113e8:	701a      	strb	r2, [r3, #0]
 80113ea:	e00a      	b.n	8011402 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	0f1b      	lsrs	r3, r3, #28
 80113f0:	b2da      	uxtb	r2, r3
 80113f2:	7dfb      	ldrb	r3, [r7, #23]
 80113f4:	005b      	lsls	r3, r3, #1
 80113f6:	4619      	mov	r1, r3
 80113f8:	68bb      	ldr	r3, [r7, #8]
 80113fa:	440b      	add	r3, r1
 80113fc:	3237      	adds	r2, #55	@ 0x37
 80113fe:	b2d2      	uxtb	r2, r2
 8011400:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	011b      	lsls	r3, r3, #4
 8011406:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011408:	7dfb      	ldrb	r3, [r7, #23]
 801140a:	005b      	lsls	r3, r3, #1
 801140c:	3301      	adds	r3, #1
 801140e:	68ba      	ldr	r2, [r7, #8]
 8011410:	4413      	add	r3, r2
 8011412:	2200      	movs	r2, #0
 8011414:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011416:	7dfb      	ldrb	r3, [r7, #23]
 8011418:	3301      	adds	r3, #1
 801141a:	75fb      	strb	r3, [r7, #23]
 801141c:	7dfa      	ldrb	r2, [r7, #23]
 801141e:	79fb      	ldrb	r3, [r7, #7]
 8011420:	429a      	cmp	r2, r3
 8011422:	d3d3      	bcc.n	80113cc <IntToUnicode+0x18>
  }
}
 8011424:	bf00      	nop
 8011426:	bf00      	nop
 8011428:	371c      	adds	r7, #28
 801142a:	46bd      	mov	sp, r7
 801142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011430:	4770      	bx	lr
	...

08011434 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011434:	b580      	push	{r7, lr}
 8011436:	b098      	sub	sp, #96	@ 0x60
 8011438:	af00      	add	r7, sp, #0
 801143a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801143c:	f107 030c 	add.w	r3, r7, #12
 8011440:	2254      	movs	r2, #84	@ 0x54
 8011442:	2100      	movs	r1, #0
 8011444:	4618      	mov	r0, r3
 8011446:	f001 fb8f 	bl	8012b68 <memset>
  if(pcdHandle->Instance==USB)
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	4a15      	ldr	r2, [pc, #84]	@ (80114a4 <HAL_PCD_MspInit+0x70>)
 8011450:	4293      	cmp	r3, r2
 8011452:	d122      	bne.n	801149a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011454:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011458:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801145a:	2300      	movs	r3, #0
 801145c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801145e:	f107 030c 	add.w	r3, r7, #12
 8011462:	4618      	mov	r0, r3
 8011464:	f7f8 fe7e 	bl	800a164 <HAL_RCCEx_PeriphCLKConfig>
 8011468:	4603      	mov	r3, r0
 801146a:	2b00      	cmp	r3, #0
 801146c:	d001      	beq.n	8011472 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 801146e:	f7f1 fa19 	bl	80028a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8011472:	4b0d      	ldr	r3, [pc, #52]	@ (80114a8 <HAL_PCD_MspInit+0x74>)
 8011474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011476:	4a0c      	ldr	r2, [pc, #48]	@ (80114a8 <HAL_PCD_MspInit+0x74>)
 8011478:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801147c:	6593      	str	r3, [r2, #88]	@ 0x58
 801147e:	4b0a      	ldr	r3, [pc, #40]	@ (80114a8 <HAL_PCD_MspInit+0x74>)
 8011480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011482:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011486:	60bb      	str	r3, [r7, #8]
 8011488:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 801148a:	2200      	movs	r2, #0
 801148c:	2100      	movs	r1, #0
 801148e:	2014      	movs	r0, #20
 8011490:	f7f4 fef3 	bl	800627a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8011494:	2014      	movs	r0, #20
 8011496:	f7f4 ff0a 	bl	80062ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801149a:	bf00      	nop
 801149c:	3760      	adds	r7, #96	@ 0x60
 801149e:	46bd      	mov	sp, r7
 80114a0:	bd80      	pop	{r7, pc}
 80114a2:	bf00      	nop
 80114a4:	40005c00 	.word	0x40005c00
 80114a8:	40021000 	.word	0x40021000

080114ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b082      	sub	sp, #8
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80114c0:	4619      	mov	r1, r3
 80114c2:	4610      	mov	r0, r2
 80114c4:	f7fe fd58 	bl	800ff78 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80114c8:	bf00      	nop
 80114ca:	3708      	adds	r7, #8
 80114cc:	46bd      	mov	sp, r7
 80114ce:	bd80      	pop	{r7, pc}

080114d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b082      	sub	sp, #8
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
 80114d8:	460b      	mov	r3, r1
 80114da:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80114e2:	78fa      	ldrb	r2, [r7, #3]
 80114e4:	6879      	ldr	r1, [r7, #4]
 80114e6:	4613      	mov	r3, r2
 80114e8:	009b      	lsls	r3, r3, #2
 80114ea:	4413      	add	r3, r2
 80114ec:	00db      	lsls	r3, r3, #3
 80114ee:	440b      	add	r3, r1
 80114f0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80114f4:	681a      	ldr	r2, [r3, #0]
 80114f6:	78fb      	ldrb	r3, [r7, #3]
 80114f8:	4619      	mov	r1, r3
 80114fa:	f7fe fd92 	bl	8010022 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80114fe:	bf00      	nop
 8011500:	3708      	adds	r7, #8
 8011502:	46bd      	mov	sp, r7
 8011504:	bd80      	pop	{r7, pc}

08011506 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011506:	b580      	push	{r7, lr}
 8011508:	b082      	sub	sp, #8
 801150a:	af00      	add	r7, sp, #0
 801150c:	6078      	str	r0, [r7, #4]
 801150e:	460b      	mov	r3, r1
 8011510:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8011518:	78fa      	ldrb	r2, [r7, #3]
 801151a:	6879      	ldr	r1, [r7, #4]
 801151c:	4613      	mov	r3, r2
 801151e:	009b      	lsls	r3, r3, #2
 8011520:	4413      	add	r3, r2
 8011522:	00db      	lsls	r3, r3, #3
 8011524:	440b      	add	r3, r1
 8011526:	3324      	adds	r3, #36	@ 0x24
 8011528:	681a      	ldr	r2, [r3, #0]
 801152a:	78fb      	ldrb	r3, [r7, #3]
 801152c:	4619      	mov	r1, r3
 801152e:	f7fe fddb 	bl	80100e8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8011532:	bf00      	nop
 8011534:	3708      	adds	r7, #8
 8011536:	46bd      	mov	sp, r7
 8011538:	bd80      	pop	{r7, pc}

0801153a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801153a:	b580      	push	{r7, lr}
 801153c:	b082      	sub	sp, #8
 801153e:	af00      	add	r7, sp, #0
 8011540:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011548:	4618      	mov	r0, r3
 801154a:	f7fe feef 	bl	801032c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801154e:	bf00      	nop
 8011550:	3708      	adds	r7, #8
 8011552:	46bd      	mov	sp, r7
 8011554:	bd80      	pop	{r7, pc}

08011556 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011556:	b580      	push	{r7, lr}
 8011558:	b084      	sub	sp, #16
 801155a:	af00      	add	r7, sp, #0
 801155c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801155e:	2301      	movs	r3, #1
 8011560:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	795b      	ldrb	r3, [r3, #5]
 8011566:	2b02      	cmp	r3, #2
 8011568:	d001      	beq.n	801156e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801156a:	f7f1 f99b 	bl	80028a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011574:	7bfa      	ldrb	r2, [r7, #15]
 8011576:	4611      	mov	r1, r2
 8011578:	4618      	mov	r0, r3
 801157a:	f7fe fe99 	bl	80102b0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011584:	4618      	mov	r0, r3
 8011586:	f7fe fe45 	bl	8010214 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801158a:	bf00      	nop
 801158c:	3710      	adds	r7, #16
 801158e:	46bd      	mov	sp, r7
 8011590:	bd80      	pop	{r7, pc}
	...

08011594 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011594:	b580      	push	{r7, lr}
 8011596:	b082      	sub	sp, #8
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80115a2:	4618      	mov	r0, r3
 80115a4:	f7fe fe94 	bl	80102d0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	7a5b      	ldrb	r3, [r3, #9]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d005      	beq.n	80115bc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80115b0:	4b04      	ldr	r3, [pc, #16]	@ (80115c4 <HAL_PCD_SuspendCallback+0x30>)
 80115b2:	691b      	ldr	r3, [r3, #16]
 80115b4:	4a03      	ldr	r2, [pc, #12]	@ (80115c4 <HAL_PCD_SuspendCallback+0x30>)
 80115b6:	f043 0306 	orr.w	r3, r3, #6
 80115ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80115bc:	bf00      	nop
 80115be:	3708      	adds	r7, #8
 80115c0:	46bd      	mov	sp, r7
 80115c2:	bd80      	pop	{r7, pc}
 80115c4:	e000ed00 	.word	0xe000ed00

080115c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80115c8:	b580      	push	{r7, lr}
 80115ca:	b082      	sub	sp, #8
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	7a5b      	ldrb	r3, [r3, #9]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d007      	beq.n	80115e8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80115d8:	4b08      	ldr	r3, [pc, #32]	@ (80115fc <HAL_PCD_ResumeCallback+0x34>)
 80115da:	691b      	ldr	r3, [r3, #16]
 80115dc:	4a07      	ldr	r2, [pc, #28]	@ (80115fc <HAL_PCD_ResumeCallback+0x34>)
 80115de:	f023 0306 	bic.w	r3, r3, #6
 80115e2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80115e4:	f000 f9f8 	bl	80119d8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80115ee:	4618      	mov	r0, r3
 80115f0:	f7fe fe84 	bl	80102fc <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80115f4:	bf00      	nop
 80115f6:	3708      	adds	r7, #8
 80115f8:	46bd      	mov	sp, r7
 80115fa:	bd80      	pop	{r7, pc}
 80115fc:	e000ed00 	.word	0xe000ed00

08011600 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011600:	b580      	push	{r7, lr}
 8011602:	b082      	sub	sp, #8
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8011608:	4a2b      	ldr	r2, [pc, #172]	@ (80116b8 <USBD_LL_Init+0xb8>)
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	4a29      	ldr	r2, [pc, #164]	@ (80116b8 <USBD_LL_Init+0xb8>)
 8011614:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8011618:	4b27      	ldr	r3, [pc, #156]	@ (80116b8 <USBD_LL_Init+0xb8>)
 801161a:	4a28      	ldr	r2, [pc, #160]	@ (80116bc <USBD_LL_Init+0xbc>)
 801161c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801161e:	4b26      	ldr	r3, [pc, #152]	@ (80116b8 <USBD_LL_Init+0xb8>)
 8011620:	2208      	movs	r2, #8
 8011622:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8011624:	4b24      	ldr	r3, [pc, #144]	@ (80116b8 <USBD_LL_Init+0xb8>)
 8011626:	2202      	movs	r2, #2
 8011628:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801162a:	4b23      	ldr	r3, [pc, #140]	@ (80116b8 <USBD_LL_Init+0xb8>)
 801162c:	2202      	movs	r2, #2
 801162e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8011630:	4b21      	ldr	r3, [pc, #132]	@ (80116b8 <USBD_LL_Init+0xb8>)
 8011632:	2200      	movs	r2, #0
 8011634:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8011636:	4b20      	ldr	r3, [pc, #128]	@ (80116b8 <USBD_LL_Init+0xb8>)
 8011638:	2200      	movs	r2, #0
 801163a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801163c:	4b1e      	ldr	r3, [pc, #120]	@ (80116b8 <USBD_LL_Init+0xb8>)
 801163e:	2200      	movs	r2, #0
 8011640:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8011642:	4b1d      	ldr	r3, [pc, #116]	@ (80116b8 <USBD_LL_Init+0xb8>)
 8011644:	2200      	movs	r2, #0
 8011646:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8011648:	481b      	ldr	r0, [pc, #108]	@ (80116b8 <USBD_LL_Init+0xb8>)
 801164a:	f7f6 fa7b 	bl	8007b44 <HAL_PCD_Init>
 801164e:	4603      	mov	r3, r0
 8011650:	2b00      	cmp	r3, #0
 8011652:	d001      	beq.n	8011658 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8011654:	f7f1 f926 	bl	80028a4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801165e:	2318      	movs	r3, #24
 8011660:	2200      	movs	r2, #0
 8011662:	2100      	movs	r1, #0
 8011664:	f7f7 ff02 	bl	800946c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801166e:	2358      	movs	r3, #88	@ 0x58
 8011670:	2200      	movs	r2, #0
 8011672:	2180      	movs	r1, #128	@ 0x80
 8011674:	f7f7 fefa 	bl	800946c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801167e:	23c0      	movs	r3, #192	@ 0xc0
 8011680:	2200      	movs	r2, #0
 8011682:	2181      	movs	r1, #129	@ 0x81
 8011684:	f7f7 fef2 	bl	800946c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801168e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8011692:	2200      	movs	r2, #0
 8011694:	2101      	movs	r1, #1
 8011696:	f7f7 fee9 	bl	800946c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80116a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80116a4:	2200      	movs	r2, #0
 80116a6:	2182      	movs	r1, #130	@ 0x82
 80116a8:	f7f7 fee0 	bl	800946c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80116ac:	2300      	movs	r3, #0
}
 80116ae:	4618      	mov	r0, r3
 80116b0:	3708      	adds	r7, #8
 80116b2:	46bd      	mov	sp, r7
 80116b4:	bd80      	pop	{r7, pc}
 80116b6:	bf00      	nop
 80116b8:	20003864 	.word	0x20003864
 80116bc:	40005c00 	.word	0x40005c00

080116c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b084      	sub	sp, #16
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80116c8:	2300      	movs	r3, #0
 80116ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80116cc:	2300      	movs	r3, #0
 80116ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80116d6:	4618      	mov	r0, r3
 80116d8:	f7f6 fb02 	bl	8007ce0 <HAL_PCD_Start>
 80116dc:	4603      	mov	r3, r0
 80116de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80116e0:	7bfb      	ldrb	r3, [r7, #15]
 80116e2:	4618      	mov	r0, r3
 80116e4:	f000 f97e 	bl	80119e4 <USBD_Get_USB_Status>
 80116e8:	4603      	mov	r3, r0
 80116ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80116ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80116ee:	4618      	mov	r0, r3
 80116f0:	3710      	adds	r7, #16
 80116f2:	46bd      	mov	sp, r7
 80116f4:	bd80      	pop	{r7, pc}

080116f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80116f6:	b580      	push	{r7, lr}
 80116f8:	b084      	sub	sp, #16
 80116fa:	af00      	add	r7, sp, #0
 80116fc:	6078      	str	r0, [r7, #4]
 80116fe:	4608      	mov	r0, r1
 8011700:	4611      	mov	r1, r2
 8011702:	461a      	mov	r2, r3
 8011704:	4603      	mov	r3, r0
 8011706:	70fb      	strb	r3, [r7, #3]
 8011708:	460b      	mov	r3, r1
 801170a:	70bb      	strb	r3, [r7, #2]
 801170c:	4613      	mov	r3, r2
 801170e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011710:	2300      	movs	r3, #0
 8011712:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011714:	2300      	movs	r3, #0
 8011716:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801171e:	78bb      	ldrb	r3, [r7, #2]
 8011720:	883a      	ldrh	r2, [r7, #0]
 8011722:	78f9      	ldrb	r1, [r7, #3]
 8011724:	f7f6 fc49 	bl	8007fba <HAL_PCD_EP_Open>
 8011728:	4603      	mov	r3, r0
 801172a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801172c:	7bfb      	ldrb	r3, [r7, #15]
 801172e:	4618      	mov	r0, r3
 8011730:	f000 f958 	bl	80119e4 <USBD_Get_USB_Status>
 8011734:	4603      	mov	r3, r0
 8011736:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011738:	7bbb      	ldrb	r3, [r7, #14]
}
 801173a:	4618      	mov	r0, r3
 801173c:	3710      	adds	r7, #16
 801173e:	46bd      	mov	sp, r7
 8011740:	bd80      	pop	{r7, pc}

08011742 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011742:	b580      	push	{r7, lr}
 8011744:	b084      	sub	sp, #16
 8011746:	af00      	add	r7, sp, #0
 8011748:	6078      	str	r0, [r7, #4]
 801174a:	460b      	mov	r3, r1
 801174c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801174e:	2300      	movs	r3, #0
 8011750:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011752:	2300      	movs	r3, #0
 8011754:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801175c:	78fa      	ldrb	r2, [r7, #3]
 801175e:	4611      	mov	r1, r2
 8011760:	4618      	mov	r0, r3
 8011762:	f7f6 fc89 	bl	8008078 <HAL_PCD_EP_Close>
 8011766:	4603      	mov	r3, r0
 8011768:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801176a:	7bfb      	ldrb	r3, [r7, #15]
 801176c:	4618      	mov	r0, r3
 801176e:	f000 f939 	bl	80119e4 <USBD_Get_USB_Status>
 8011772:	4603      	mov	r3, r0
 8011774:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011776:	7bbb      	ldrb	r3, [r7, #14]
}
 8011778:	4618      	mov	r0, r3
 801177a:	3710      	adds	r7, #16
 801177c:	46bd      	mov	sp, r7
 801177e:	bd80      	pop	{r7, pc}

08011780 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011780:	b580      	push	{r7, lr}
 8011782:	b084      	sub	sp, #16
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]
 8011788:	460b      	mov	r3, r1
 801178a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801178c:	2300      	movs	r3, #0
 801178e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011790:	2300      	movs	r3, #0
 8011792:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801179a:	78fa      	ldrb	r2, [r7, #3]
 801179c:	4611      	mov	r1, r2
 801179e:	4618      	mov	r0, r3
 80117a0:	f7f6 fd32 	bl	8008208 <HAL_PCD_EP_SetStall>
 80117a4:	4603      	mov	r3, r0
 80117a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80117a8:	7bfb      	ldrb	r3, [r7, #15]
 80117aa:	4618      	mov	r0, r3
 80117ac:	f000 f91a 	bl	80119e4 <USBD_Get_USB_Status>
 80117b0:	4603      	mov	r3, r0
 80117b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80117b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80117b6:	4618      	mov	r0, r3
 80117b8:	3710      	adds	r7, #16
 80117ba:	46bd      	mov	sp, r7
 80117bc:	bd80      	pop	{r7, pc}

080117be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80117be:	b580      	push	{r7, lr}
 80117c0:	b084      	sub	sp, #16
 80117c2:	af00      	add	r7, sp, #0
 80117c4:	6078      	str	r0, [r7, #4]
 80117c6:	460b      	mov	r3, r1
 80117c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80117ca:	2300      	movs	r3, #0
 80117cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80117ce:	2300      	movs	r3, #0
 80117d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80117d8:	78fa      	ldrb	r2, [r7, #3]
 80117da:	4611      	mov	r1, r2
 80117dc:	4618      	mov	r0, r3
 80117de:	f7f6 fd65 	bl	80082ac <HAL_PCD_EP_ClrStall>
 80117e2:	4603      	mov	r3, r0
 80117e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80117e6:	7bfb      	ldrb	r3, [r7, #15]
 80117e8:	4618      	mov	r0, r3
 80117ea:	f000 f8fb 	bl	80119e4 <USBD_Get_USB_Status>
 80117ee:	4603      	mov	r3, r0
 80117f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80117f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80117f4:	4618      	mov	r0, r3
 80117f6:	3710      	adds	r7, #16
 80117f8:	46bd      	mov	sp, r7
 80117fa:	bd80      	pop	{r7, pc}

080117fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80117fc:	b480      	push	{r7}
 80117fe:	b085      	sub	sp, #20
 8011800:	af00      	add	r7, sp, #0
 8011802:	6078      	str	r0, [r7, #4]
 8011804:	460b      	mov	r3, r1
 8011806:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801180e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011810:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011814:	2b00      	cmp	r3, #0
 8011816:	da0b      	bge.n	8011830 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011818:	78fb      	ldrb	r3, [r7, #3]
 801181a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801181e:	68f9      	ldr	r1, [r7, #12]
 8011820:	4613      	mov	r3, r2
 8011822:	009b      	lsls	r3, r3, #2
 8011824:	4413      	add	r3, r2
 8011826:	00db      	lsls	r3, r3, #3
 8011828:	440b      	add	r3, r1
 801182a:	3312      	adds	r3, #18
 801182c:	781b      	ldrb	r3, [r3, #0]
 801182e:	e00b      	b.n	8011848 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011830:	78fb      	ldrb	r3, [r7, #3]
 8011832:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011836:	68f9      	ldr	r1, [r7, #12]
 8011838:	4613      	mov	r3, r2
 801183a:	009b      	lsls	r3, r3, #2
 801183c:	4413      	add	r3, r2
 801183e:	00db      	lsls	r3, r3, #3
 8011840:	440b      	add	r3, r1
 8011842:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8011846:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011848:	4618      	mov	r0, r3
 801184a:	3714      	adds	r7, #20
 801184c:	46bd      	mov	sp, r7
 801184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011852:	4770      	bx	lr

08011854 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b084      	sub	sp, #16
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
 801185c:	460b      	mov	r3, r1
 801185e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011860:	2300      	movs	r3, #0
 8011862:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011864:	2300      	movs	r3, #0
 8011866:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801186e:	78fa      	ldrb	r2, [r7, #3]
 8011870:	4611      	mov	r1, r2
 8011872:	4618      	mov	r0, r3
 8011874:	f7f6 fb7d 	bl	8007f72 <HAL_PCD_SetAddress>
 8011878:	4603      	mov	r3, r0
 801187a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801187c:	7bfb      	ldrb	r3, [r7, #15]
 801187e:	4618      	mov	r0, r3
 8011880:	f000 f8b0 	bl	80119e4 <USBD_Get_USB_Status>
 8011884:	4603      	mov	r3, r0
 8011886:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011888:	7bbb      	ldrb	r3, [r7, #14]
}
 801188a:	4618      	mov	r0, r3
 801188c:	3710      	adds	r7, #16
 801188e:	46bd      	mov	sp, r7
 8011890:	bd80      	pop	{r7, pc}

08011892 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011892:	b580      	push	{r7, lr}
 8011894:	b086      	sub	sp, #24
 8011896:	af00      	add	r7, sp, #0
 8011898:	60f8      	str	r0, [r7, #12]
 801189a:	607a      	str	r2, [r7, #4]
 801189c:	603b      	str	r3, [r7, #0]
 801189e:	460b      	mov	r3, r1
 80118a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80118a2:	2300      	movs	r3, #0
 80118a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80118a6:	2300      	movs	r3, #0
 80118a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80118b0:	7af9      	ldrb	r1, [r7, #11]
 80118b2:	683b      	ldr	r3, [r7, #0]
 80118b4:	687a      	ldr	r2, [r7, #4]
 80118b6:	f7f6 fc70 	bl	800819a <HAL_PCD_EP_Transmit>
 80118ba:	4603      	mov	r3, r0
 80118bc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80118be:	7dfb      	ldrb	r3, [r7, #23]
 80118c0:	4618      	mov	r0, r3
 80118c2:	f000 f88f 	bl	80119e4 <USBD_Get_USB_Status>
 80118c6:	4603      	mov	r3, r0
 80118c8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80118ca:	7dbb      	ldrb	r3, [r7, #22]
}
 80118cc:	4618      	mov	r0, r3
 80118ce:	3718      	adds	r7, #24
 80118d0:	46bd      	mov	sp, r7
 80118d2:	bd80      	pop	{r7, pc}

080118d4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b086      	sub	sp, #24
 80118d8:	af00      	add	r7, sp, #0
 80118da:	60f8      	str	r0, [r7, #12]
 80118dc:	607a      	str	r2, [r7, #4]
 80118de:	603b      	str	r3, [r7, #0]
 80118e0:	460b      	mov	r3, r1
 80118e2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80118e4:	2300      	movs	r3, #0
 80118e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80118e8:	2300      	movs	r3, #0
 80118ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80118f2:	7af9      	ldrb	r1, [r7, #11]
 80118f4:	683b      	ldr	r3, [r7, #0]
 80118f6:	687a      	ldr	r2, [r7, #4]
 80118f8:	f7f6 fc06 	bl	8008108 <HAL_PCD_EP_Receive>
 80118fc:	4603      	mov	r3, r0
 80118fe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011900:	7dfb      	ldrb	r3, [r7, #23]
 8011902:	4618      	mov	r0, r3
 8011904:	f000 f86e 	bl	80119e4 <USBD_Get_USB_Status>
 8011908:	4603      	mov	r3, r0
 801190a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801190c:	7dbb      	ldrb	r3, [r7, #22]
}
 801190e:	4618      	mov	r0, r3
 8011910:	3718      	adds	r7, #24
 8011912:	46bd      	mov	sp, r7
 8011914:	bd80      	pop	{r7, pc}

08011916 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011916:	b580      	push	{r7, lr}
 8011918:	b082      	sub	sp, #8
 801191a:	af00      	add	r7, sp, #0
 801191c:	6078      	str	r0, [r7, #4]
 801191e:	460b      	mov	r3, r1
 8011920:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8011928:	78fa      	ldrb	r2, [r7, #3]
 801192a:	4611      	mov	r1, r2
 801192c:	4618      	mov	r0, r3
 801192e:	f7f6 fc1c 	bl	800816a <HAL_PCD_EP_GetRxCount>
 8011932:	4603      	mov	r3, r0
}
 8011934:	4618      	mov	r0, r3
 8011936:	3708      	adds	r7, #8
 8011938:	46bd      	mov	sp, r7
 801193a:	bd80      	pop	{r7, pc}

0801193c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801193c:	b580      	push	{r7, lr}
 801193e:	b082      	sub	sp, #8
 8011940:	af00      	add	r7, sp, #0
 8011942:	6078      	str	r0, [r7, #4]
 8011944:	460b      	mov	r3, r1
 8011946:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8011948:	78fb      	ldrb	r3, [r7, #3]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d002      	beq.n	8011954 <HAL_PCDEx_LPM_Callback+0x18>
 801194e:	2b01      	cmp	r3, #1
 8011950:	d013      	beq.n	801197a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8011952:	e023      	b.n	801199c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	7a5b      	ldrb	r3, [r3, #9]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d007      	beq.n	801196c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801195c:	f000 f83c 	bl	80119d8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011960:	4b10      	ldr	r3, [pc, #64]	@ (80119a4 <HAL_PCDEx_LPM_Callback+0x68>)
 8011962:	691b      	ldr	r3, [r3, #16]
 8011964:	4a0f      	ldr	r2, [pc, #60]	@ (80119a4 <HAL_PCDEx_LPM_Callback+0x68>)
 8011966:	f023 0306 	bic.w	r3, r3, #6
 801196a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011972:	4618      	mov	r0, r3
 8011974:	f7fe fcc2 	bl	80102fc <USBD_LL_Resume>
    break;
 8011978:	e010      	b.n	801199c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011980:	4618      	mov	r0, r3
 8011982:	f7fe fca5 	bl	80102d0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	7a5b      	ldrb	r3, [r3, #9]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d005      	beq.n	801199a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801198e:	4b05      	ldr	r3, [pc, #20]	@ (80119a4 <HAL_PCDEx_LPM_Callback+0x68>)
 8011990:	691b      	ldr	r3, [r3, #16]
 8011992:	4a04      	ldr	r2, [pc, #16]	@ (80119a4 <HAL_PCDEx_LPM_Callback+0x68>)
 8011994:	f043 0306 	orr.w	r3, r3, #6
 8011998:	6113      	str	r3, [r2, #16]
    break;
 801199a:	bf00      	nop
}
 801199c:	bf00      	nop
 801199e:	3708      	adds	r7, #8
 80119a0:	46bd      	mov	sp, r7
 80119a2:	bd80      	pop	{r7, pc}
 80119a4:	e000ed00 	.word	0xe000ed00

080119a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80119a8:	b480      	push	{r7}
 80119aa:	b083      	sub	sp, #12
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80119b0:	4b03      	ldr	r3, [pc, #12]	@ (80119c0 <USBD_static_malloc+0x18>)
}
 80119b2:	4618      	mov	r0, r3
 80119b4:	370c      	adds	r7, #12
 80119b6:	46bd      	mov	sp, r7
 80119b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119bc:	4770      	bx	lr
 80119be:	bf00      	nop
 80119c0:	20003b40 	.word	0x20003b40

080119c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80119c4:	b480      	push	{r7}
 80119c6:	b083      	sub	sp, #12
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]

}
 80119cc:	bf00      	nop
 80119ce:	370c      	adds	r7, #12
 80119d0:	46bd      	mov	sp, r7
 80119d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d6:	4770      	bx	lr

080119d8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80119d8:	b580      	push	{r7, lr}
 80119da:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80119dc:	f7ef fe32 	bl	8001644 <SystemClock_Config>
}
 80119e0:	bf00      	nop
 80119e2:	bd80      	pop	{r7, pc}

080119e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80119e4:	b480      	push	{r7}
 80119e6:	b085      	sub	sp, #20
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	4603      	mov	r3, r0
 80119ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80119ee:	2300      	movs	r3, #0
 80119f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80119f2:	79fb      	ldrb	r3, [r7, #7]
 80119f4:	2b03      	cmp	r3, #3
 80119f6:	d817      	bhi.n	8011a28 <USBD_Get_USB_Status+0x44>
 80119f8:	a201      	add	r2, pc, #4	@ (adr r2, 8011a00 <USBD_Get_USB_Status+0x1c>)
 80119fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119fe:	bf00      	nop
 8011a00:	08011a11 	.word	0x08011a11
 8011a04:	08011a17 	.word	0x08011a17
 8011a08:	08011a1d 	.word	0x08011a1d
 8011a0c:	08011a23 	.word	0x08011a23
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011a10:	2300      	movs	r3, #0
 8011a12:	73fb      	strb	r3, [r7, #15]
    break;
 8011a14:	e00b      	b.n	8011a2e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011a16:	2303      	movs	r3, #3
 8011a18:	73fb      	strb	r3, [r7, #15]
    break;
 8011a1a:	e008      	b.n	8011a2e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011a1c:	2301      	movs	r3, #1
 8011a1e:	73fb      	strb	r3, [r7, #15]
    break;
 8011a20:	e005      	b.n	8011a2e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011a22:	2303      	movs	r3, #3
 8011a24:	73fb      	strb	r3, [r7, #15]
    break;
 8011a26:	e002      	b.n	8011a2e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011a28:	2303      	movs	r3, #3
 8011a2a:	73fb      	strb	r3, [r7, #15]
    break;
 8011a2c:	bf00      	nop
  }
  return usb_status;
 8011a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a30:	4618      	mov	r0, r3
 8011a32:	3714      	adds	r7, #20
 8011a34:	46bd      	mov	sp, r7
 8011a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a3a:	4770      	bx	lr

08011a3c <__cvt>:
 8011a3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011a40:	ec57 6b10 	vmov	r6, r7, d0
 8011a44:	2f00      	cmp	r7, #0
 8011a46:	460c      	mov	r4, r1
 8011a48:	4619      	mov	r1, r3
 8011a4a:	463b      	mov	r3, r7
 8011a4c:	bfbb      	ittet	lt
 8011a4e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8011a52:	461f      	movlt	r7, r3
 8011a54:	2300      	movge	r3, #0
 8011a56:	232d      	movlt	r3, #45	@ 0x2d
 8011a58:	700b      	strb	r3, [r1, #0]
 8011a5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011a5c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8011a60:	4691      	mov	r9, r2
 8011a62:	f023 0820 	bic.w	r8, r3, #32
 8011a66:	bfbc      	itt	lt
 8011a68:	4632      	movlt	r2, r6
 8011a6a:	4616      	movlt	r6, r2
 8011a6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011a70:	d005      	beq.n	8011a7e <__cvt+0x42>
 8011a72:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8011a76:	d100      	bne.n	8011a7a <__cvt+0x3e>
 8011a78:	3401      	adds	r4, #1
 8011a7a:	2102      	movs	r1, #2
 8011a7c:	e000      	b.n	8011a80 <__cvt+0x44>
 8011a7e:	2103      	movs	r1, #3
 8011a80:	ab03      	add	r3, sp, #12
 8011a82:	9301      	str	r3, [sp, #4]
 8011a84:	ab02      	add	r3, sp, #8
 8011a86:	9300      	str	r3, [sp, #0]
 8011a88:	ec47 6b10 	vmov	d0, r6, r7
 8011a8c:	4653      	mov	r3, sl
 8011a8e:	4622      	mov	r2, r4
 8011a90:	f001 f97a 	bl	8012d88 <_dtoa_r>
 8011a94:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8011a98:	4605      	mov	r5, r0
 8011a9a:	d119      	bne.n	8011ad0 <__cvt+0x94>
 8011a9c:	f019 0f01 	tst.w	r9, #1
 8011aa0:	d00e      	beq.n	8011ac0 <__cvt+0x84>
 8011aa2:	eb00 0904 	add.w	r9, r0, r4
 8011aa6:	2200      	movs	r2, #0
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	4630      	mov	r0, r6
 8011aac:	4639      	mov	r1, r7
 8011aae:	f7ef f833 	bl	8000b18 <__aeabi_dcmpeq>
 8011ab2:	b108      	cbz	r0, 8011ab8 <__cvt+0x7c>
 8011ab4:	f8cd 900c 	str.w	r9, [sp, #12]
 8011ab8:	2230      	movs	r2, #48	@ 0x30
 8011aba:	9b03      	ldr	r3, [sp, #12]
 8011abc:	454b      	cmp	r3, r9
 8011abe:	d31e      	bcc.n	8011afe <__cvt+0xc2>
 8011ac0:	9b03      	ldr	r3, [sp, #12]
 8011ac2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011ac4:	1b5b      	subs	r3, r3, r5
 8011ac6:	4628      	mov	r0, r5
 8011ac8:	6013      	str	r3, [r2, #0]
 8011aca:	b004      	add	sp, #16
 8011acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ad0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011ad4:	eb00 0904 	add.w	r9, r0, r4
 8011ad8:	d1e5      	bne.n	8011aa6 <__cvt+0x6a>
 8011ada:	7803      	ldrb	r3, [r0, #0]
 8011adc:	2b30      	cmp	r3, #48	@ 0x30
 8011ade:	d10a      	bne.n	8011af6 <__cvt+0xba>
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	4630      	mov	r0, r6
 8011ae6:	4639      	mov	r1, r7
 8011ae8:	f7ef f816 	bl	8000b18 <__aeabi_dcmpeq>
 8011aec:	b918      	cbnz	r0, 8011af6 <__cvt+0xba>
 8011aee:	f1c4 0401 	rsb	r4, r4, #1
 8011af2:	f8ca 4000 	str.w	r4, [sl]
 8011af6:	f8da 3000 	ldr.w	r3, [sl]
 8011afa:	4499      	add	r9, r3
 8011afc:	e7d3      	b.n	8011aa6 <__cvt+0x6a>
 8011afe:	1c59      	adds	r1, r3, #1
 8011b00:	9103      	str	r1, [sp, #12]
 8011b02:	701a      	strb	r2, [r3, #0]
 8011b04:	e7d9      	b.n	8011aba <__cvt+0x7e>

08011b06 <__exponent>:
 8011b06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011b08:	2900      	cmp	r1, #0
 8011b0a:	bfba      	itte	lt
 8011b0c:	4249      	neglt	r1, r1
 8011b0e:	232d      	movlt	r3, #45	@ 0x2d
 8011b10:	232b      	movge	r3, #43	@ 0x2b
 8011b12:	2909      	cmp	r1, #9
 8011b14:	7002      	strb	r2, [r0, #0]
 8011b16:	7043      	strb	r3, [r0, #1]
 8011b18:	dd29      	ble.n	8011b6e <__exponent+0x68>
 8011b1a:	f10d 0307 	add.w	r3, sp, #7
 8011b1e:	461d      	mov	r5, r3
 8011b20:	270a      	movs	r7, #10
 8011b22:	461a      	mov	r2, r3
 8011b24:	fbb1 f6f7 	udiv	r6, r1, r7
 8011b28:	fb07 1416 	mls	r4, r7, r6, r1
 8011b2c:	3430      	adds	r4, #48	@ 0x30
 8011b2e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011b32:	460c      	mov	r4, r1
 8011b34:	2c63      	cmp	r4, #99	@ 0x63
 8011b36:	f103 33ff 	add.w	r3, r3, #4294967295
 8011b3a:	4631      	mov	r1, r6
 8011b3c:	dcf1      	bgt.n	8011b22 <__exponent+0x1c>
 8011b3e:	3130      	adds	r1, #48	@ 0x30
 8011b40:	1e94      	subs	r4, r2, #2
 8011b42:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011b46:	1c41      	adds	r1, r0, #1
 8011b48:	4623      	mov	r3, r4
 8011b4a:	42ab      	cmp	r3, r5
 8011b4c:	d30a      	bcc.n	8011b64 <__exponent+0x5e>
 8011b4e:	f10d 0309 	add.w	r3, sp, #9
 8011b52:	1a9b      	subs	r3, r3, r2
 8011b54:	42ac      	cmp	r4, r5
 8011b56:	bf88      	it	hi
 8011b58:	2300      	movhi	r3, #0
 8011b5a:	3302      	adds	r3, #2
 8011b5c:	4403      	add	r3, r0
 8011b5e:	1a18      	subs	r0, r3, r0
 8011b60:	b003      	add	sp, #12
 8011b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b64:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011b68:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011b6c:	e7ed      	b.n	8011b4a <__exponent+0x44>
 8011b6e:	2330      	movs	r3, #48	@ 0x30
 8011b70:	3130      	adds	r1, #48	@ 0x30
 8011b72:	7083      	strb	r3, [r0, #2]
 8011b74:	70c1      	strb	r1, [r0, #3]
 8011b76:	1d03      	adds	r3, r0, #4
 8011b78:	e7f1      	b.n	8011b5e <__exponent+0x58>
	...

08011b7c <_printf_float>:
 8011b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b80:	b08d      	sub	sp, #52	@ 0x34
 8011b82:	460c      	mov	r4, r1
 8011b84:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011b88:	4616      	mov	r6, r2
 8011b8a:	461f      	mov	r7, r3
 8011b8c:	4605      	mov	r5, r0
 8011b8e:	f000 fff3 	bl	8012b78 <_localeconv_r>
 8011b92:	6803      	ldr	r3, [r0, #0]
 8011b94:	9304      	str	r3, [sp, #16]
 8011b96:	4618      	mov	r0, r3
 8011b98:	f7ee fb92 	bl	80002c0 <strlen>
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011ba0:	f8d8 3000 	ldr.w	r3, [r8]
 8011ba4:	9005      	str	r0, [sp, #20]
 8011ba6:	3307      	adds	r3, #7
 8011ba8:	f023 0307 	bic.w	r3, r3, #7
 8011bac:	f103 0208 	add.w	r2, r3, #8
 8011bb0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011bb4:	f8d4 b000 	ldr.w	fp, [r4]
 8011bb8:	f8c8 2000 	str.w	r2, [r8]
 8011bbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011bc0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8011bc4:	9307      	str	r3, [sp, #28]
 8011bc6:	f8cd 8018 	str.w	r8, [sp, #24]
 8011bca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8011bce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011bd2:	4b9c      	ldr	r3, [pc, #624]	@ (8011e44 <_printf_float+0x2c8>)
 8011bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8011bd8:	f7ee ffd0 	bl	8000b7c <__aeabi_dcmpun>
 8011bdc:	bb70      	cbnz	r0, 8011c3c <_printf_float+0xc0>
 8011bde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011be2:	4b98      	ldr	r3, [pc, #608]	@ (8011e44 <_printf_float+0x2c8>)
 8011be4:	f04f 32ff 	mov.w	r2, #4294967295
 8011be8:	f7ee ffaa 	bl	8000b40 <__aeabi_dcmple>
 8011bec:	bb30      	cbnz	r0, 8011c3c <_printf_float+0xc0>
 8011bee:	2200      	movs	r2, #0
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	4640      	mov	r0, r8
 8011bf4:	4649      	mov	r1, r9
 8011bf6:	f7ee ff99 	bl	8000b2c <__aeabi_dcmplt>
 8011bfa:	b110      	cbz	r0, 8011c02 <_printf_float+0x86>
 8011bfc:	232d      	movs	r3, #45	@ 0x2d
 8011bfe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011c02:	4a91      	ldr	r2, [pc, #580]	@ (8011e48 <_printf_float+0x2cc>)
 8011c04:	4b91      	ldr	r3, [pc, #580]	@ (8011e4c <_printf_float+0x2d0>)
 8011c06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011c0a:	bf94      	ite	ls
 8011c0c:	4690      	movls	r8, r2
 8011c0e:	4698      	movhi	r8, r3
 8011c10:	2303      	movs	r3, #3
 8011c12:	6123      	str	r3, [r4, #16]
 8011c14:	f02b 0304 	bic.w	r3, fp, #4
 8011c18:	6023      	str	r3, [r4, #0]
 8011c1a:	f04f 0900 	mov.w	r9, #0
 8011c1e:	9700      	str	r7, [sp, #0]
 8011c20:	4633      	mov	r3, r6
 8011c22:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011c24:	4621      	mov	r1, r4
 8011c26:	4628      	mov	r0, r5
 8011c28:	f000 f9d2 	bl	8011fd0 <_printf_common>
 8011c2c:	3001      	adds	r0, #1
 8011c2e:	f040 808d 	bne.w	8011d4c <_printf_float+0x1d0>
 8011c32:	f04f 30ff 	mov.w	r0, #4294967295
 8011c36:	b00d      	add	sp, #52	@ 0x34
 8011c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c3c:	4642      	mov	r2, r8
 8011c3e:	464b      	mov	r3, r9
 8011c40:	4640      	mov	r0, r8
 8011c42:	4649      	mov	r1, r9
 8011c44:	f7ee ff9a 	bl	8000b7c <__aeabi_dcmpun>
 8011c48:	b140      	cbz	r0, 8011c5c <_printf_float+0xe0>
 8011c4a:	464b      	mov	r3, r9
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	bfbc      	itt	lt
 8011c50:	232d      	movlt	r3, #45	@ 0x2d
 8011c52:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011c56:	4a7e      	ldr	r2, [pc, #504]	@ (8011e50 <_printf_float+0x2d4>)
 8011c58:	4b7e      	ldr	r3, [pc, #504]	@ (8011e54 <_printf_float+0x2d8>)
 8011c5a:	e7d4      	b.n	8011c06 <_printf_float+0x8a>
 8011c5c:	6863      	ldr	r3, [r4, #4]
 8011c5e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8011c62:	9206      	str	r2, [sp, #24]
 8011c64:	1c5a      	adds	r2, r3, #1
 8011c66:	d13b      	bne.n	8011ce0 <_printf_float+0x164>
 8011c68:	2306      	movs	r3, #6
 8011c6a:	6063      	str	r3, [r4, #4]
 8011c6c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8011c70:	2300      	movs	r3, #0
 8011c72:	6022      	str	r2, [r4, #0]
 8011c74:	9303      	str	r3, [sp, #12]
 8011c76:	ab0a      	add	r3, sp, #40	@ 0x28
 8011c78:	e9cd a301 	strd	sl, r3, [sp, #4]
 8011c7c:	ab09      	add	r3, sp, #36	@ 0x24
 8011c7e:	9300      	str	r3, [sp, #0]
 8011c80:	6861      	ldr	r1, [r4, #4]
 8011c82:	ec49 8b10 	vmov	d0, r8, r9
 8011c86:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011c8a:	4628      	mov	r0, r5
 8011c8c:	f7ff fed6 	bl	8011a3c <__cvt>
 8011c90:	9b06      	ldr	r3, [sp, #24]
 8011c92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011c94:	2b47      	cmp	r3, #71	@ 0x47
 8011c96:	4680      	mov	r8, r0
 8011c98:	d129      	bne.n	8011cee <_printf_float+0x172>
 8011c9a:	1cc8      	adds	r0, r1, #3
 8011c9c:	db02      	blt.n	8011ca4 <_printf_float+0x128>
 8011c9e:	6863      	ldr	r3, [r4, #4]
 8011ca0:	4299      	cmp	r1, r3
 8011ca2:	dd41      	ble.n	8011d28 <_printf_float+0x1ac>
 8011ca4:	f1aa 0a02 	sub.w	sl, sl, #2
 8011ca8:	fa5f fa8a 	uxtb.w	sl, sl
 8011cac:	3901      	subs	r1, #1
 8011cae:	4652      	mov	r2, sl
 8011cb0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011cb4:	9109      	str	r1, [sp, #36]	@ 0x24
 8011cb6:	f7ff ff26 	bl	8011b06 <__exponent>
 8011cba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011cbc:	1813      	adds	r3, r2, r0
 8011cbe:	2a01      	cmp	r2, #1
 8011cc0:	4681      	mov	r9, r0
 8011cc2:	6123      	str	r3, [r4, #16]
 8011cc4:	dc02      	bgt.n	8011ccc <_printf_float+0x150>
 8011cc6:	6822      	ldr	r2, [r4, #0]
 8011cc8:	07d2      	lsls	r2, r2, #31
 8011cca:	d501      	bpl.n	8011cd0 <_printf_float+0x154>
 8011ccc:	3301      	adds	r3, #1
 8011cce:	6123      	str	r3, [r4, #16]
 8011cd0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d0a2      	beq.n	8011c1e <_printf_float+0xa2>
 8011cd8:	232d      	movs	r3, #45	@ 0x2d
 8011cda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011cde:	e79e      	b.n	8011c1e <_printf_float+0xa2>
 8011ce0:	9a06      	ldr	r2, [sp, #24]
 8011ce2:	2a47      	cmp	r2, #71	@ 0x47
 8011ce4:	d1c2      	bne.n	8011c6c <_printf_float+0xf0>
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d1c0      	bne.n	8011c6c <_printf_float+0xf0>
 8011cea:	2301      	movs	r3, #1
 8011cec:	e7bd      	b.n	8011c6a <_printf_float+0xee>
 8011cee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011cf2:	d9db      	bls.n	8011cac <_printf_float+0x130>
 8011cf4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8011cf8:	d118      	bne.n	8011d2c <_printf_float+0x1b0>
 8011cfa:	2900      	cmp	r1, #0
 8011cfc:	6863      	ldr	r3, [r4, #4]
 8011cfe:	dd0b      	ble.n	8011d18 <_printf_float+0x19c>
 8011d00:	6121      	str	r1, [r4, #16]
 8011d02:	b913      	cbnz	r3, 8011d0a <_printf_float+0x18e>
 8011d04:	6822      	ldr	r2, [r4, #0]
 8011d06:	07d0      	lsls	r0, r2, #31
 8011d08:	d502      	bpl.n	8011d10 <_printf_float+0x194>
 8011d0a:	3301      	adds	r3, #1
 8011d0c:	440b      	add	r3, r1
 8011d0e:	6123      	str	r3, [r4, #16]
 8011d10:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011d12:	f04f 0900 	mov.w	r9, #0
 8011d16:	e7db      	b.n	8011cd0 <_printf_float+0x154>
 8011d18:	b913      	cbnz	r3, 8011d20 <_printf_float+0x1a4>
 8011d1a:	6822      	ldr	r2, [r4, #0]
 8011d1c:	07d2      	lsls	r2, r2, #31
 8011d1e:	d501      	bpl.n	8011d24 <_printf_float+0x1a8>
 8011d20:	3302      	adds	r3, #2
 8011d22:	e7f4      	b.n	8011d0e <_printf_float+0x192>
 8011d24:	2301      	movs	r3, #1
 8011d26:	e7f2      	b.n	8011d0e <_printf_float+0x192>
 8011d28:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8011d2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011d2e:	4299      	cmp	r1, r3
 8011d30:	db05      	blt.n	8011d3e <_printf_float+0x1c2>
 8011d32:	6823      	ldr	r3, [r4, #0]
 8011d34:	6121      	str	r1, [r4, #16]
 8011d36:	07d8      	lsls	r0, r3, #31
 8011d38:	d5ea      	bpl.n	8011d10 <_printf_float+0x194>
 8011d3a:	1c4b      	adds	r3, r1, #1
 8011d3c:	e7e7      	b.n	8011d0e <_printf_float+0x192>
 8011d3e:	2900      	cmp	r1, #0
 8011d40:	bfd4      	ite	le
 8011d42:	f1c1 0202 	rsble	r2, r1, #2
 8011d46:	2201      	movgt	r2, #1
 8011d48:	4413      	add	r3, r2
 8011d4a:	e7e0      	b.n	8011d0e <_printf_float+0x192>
 8011d4c:	6823      	ldr	r3, [r4, #0]
 8011d4e:	055a      	lsls	r2, r3, #21
 8011d50:	d407      	bmi.n	8011d62 <_printf_float+0x1e6>
 8011d52:	6923      	ldr	r3, [r4, #16]
 8011d54:	4642      	mov	r2, r8
 8011d56:	4631      	mov	r1, r6
 8011d58:	4628      	mov	r0, r5
 8011d5a:	47b8      	blx	r7
 8011d5c:	3001      	adds	r0, #1
 8011d5e:	d12b      	bne.n	8011db8 <_printf_float+0x23c>
 8011d60:	e767      	b.n	8011c32 <_printf_float+0xb6>
 8011d62:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011d66:	f240 80dd 	bls.w	8011f24 <_printf_float+0x3a8>
 8011d6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011d6e:	2200      	movs	r2, #0
 8011d70:	2300      	movs	r3, #0
 8011d72:	f7ee fed1 	bl	8000b18 <__aeabi_dcmpeq>
 8011d76:	2800      	cmp	r0, #0
 8011d78:	d033      	beq.n	8011de2 <_printf_float+0x266>
 8011d7a:	4a37      	ldr	r2, [pc, #220]	@ (8011e58 <_printf_float+0x2dc>)
 8011d7c:	2301      	movs	r3, #1
 8011d7e:	4631      	mov	r1, r6
 8011d80:	4628      	mov	r0, r5
 8011d82:	47b8      	blx	r7
 8011d84:	3001      	adds	r0, #1
 8011d86:	f43f af54 	beq.w	8011c32 <_printf_float+0xb6>
 8011d8a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011d8e:	4543      	cmp	r3, r8
 8011d90:	db02      	blt.n	8011d98 <_printf_float+0x21c>
 8011d92:	6823      	ldr	r3, [r4, #0]
 8011d94:	07d8      	lsls	r0, r3, #31
 8011d96:	d50f      	bpl.n	8011db8 <_printf_float+0x23c>
 8011d98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011d9c:	4631      	mov	r1, r6
 8011d9e:	4628      	mov	r0, r5
 8011da0:	47b8      	blx	r7
 8011da2:	3001      	adds	r0, #1
 8011da4:	f43f af45 	beq.w	8011c32 <_printf_float+0xb6>
 8011da8:	f04f 0900 	mov.w	r9, #0
 8011dac:	f108 38ff 	add.w	r8, r8, #4294967295
 8011db0:	f104 0a1a 	add.w	sl, r4, #26
 8011db4:	45c8      	cmp	r8, r9
 8011db6:	dc09      	bgt.n	8011dcc <_printf_float+0x250>
 8011db8:	6823      	ldr	r3, [r4, #0]
 8011dba:	079b      	lsls	r3, r3, #30
 8011dbc:	f100 8103 	bmi.w	8011fc6 <_printf_float+0x44a>
 8011dc0:	68e0      	ldr	r0, [r4, #12]
 8011dc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011dc4:	4298      	cmp	r0, r3
 8011dc6:	bfb8      	it	lt
 8011dc8:	4618      	movlt	r0, r3
 8011dca:	e734      	b.n	8011c36 <_printf_float+0xba>
 8011dcc:	2301      	movs	r3, #1
 8011dce:	4652      	mov	r2, sl
 8011dd0:	4631      	mov	r1, r6
 8011dd2:	4628      	mov	r0, r5
 8011dd4:	47b8      	blx	r7
 8011dd6:	3001      	adds	r0, #1
 8011dd8:	f43f af2b 	beq.w	8011c32 <_printf_float+0xb6>
 8011ddc:	f109 0901 	add.w	r9, r9, #1
 8011de0:	e7e8      	b.n	8011db4 <_printf_float+0x238>
 8011de2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	dc39      	bgt.n	8011e5c <_printf_float+0x2e0>
 8011de8:	4a1b      	ldr	r2, [pc, #108]	@ (8011e58 <_printf_float+0x2dc>)
 8011dea:	2301      	movs	r3, #1
 8011dec:	4631      	mov	r1, r6
 8011dee:	4628      	mov	r0, r5
 8011df0:	47b8      	blx	r7
 8011df2:	3001      	adds	r0, #1
 8011df4:	f43f af1d 	beq.w	8011c32 <_printf_float+0xb6>
 8011df8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011dfc:	ea59 0303 	orrs.w	r3, r9, r3
 8011e00:	d102      	bne.n	8011e08 <_printf_float+0x28c>
 8011e02:	6823      	ldr	r3, [r4, #0]
 8011e04:	07d9      	lsls	r1, r3, #31
 8011e06:	d5d7      	bpl.n	8011db8 <_printf_float+0x23c>
 8011e08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011e0c:	4631      	mov	r1, r6
 8011e0e:	4628      	mov	r0, r5
 8011e10:	47b8      	blx	r7
 8011e12:	3001      	adds	r0, #1
 8011e14:	f43f af0d 	beq.w	8011c32 <_printf_float+0xb6>
 8011e18:	f04f 0a00 	mov.w	sl, #0
 8011e1c:	f104 0b1a 	add.w	fp, r4, #26
 8011e20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e22:	425b      	negs	r3, r3
 8011e24:	4553      	cmp	r3, sl
 8011e26:	dc01      	bgt.n	8011e2c <_printf_float+0x2b0>
 8011e28:	464b      	mov	r3, r9
 8011e2a:	e793      	b.n	8011d54 <_printf_float+0x1d8>
 8011e2c:	2301      	movs	r3, #1
 8011e2e:	465a      	mov	r2, fp
 8011e30:	4631      	mov	r1, r6
 8011e32:	4628      	mov	r0, r5
 8011e34:	47b8      	blx	r7
 8011e36:	3001      	adds	r0, #1
 8011e38:	f43f aefb 	beq.w	8011c32 <_printf_float+0xb6>
 8011e3c:	f10a 0a01 	add.w	sl, sl, #1
 8011e40:	e7ee      	b.n	8011e20 <_printf_float+0x2a4>
 8011e42:	bf00      	nop
 8011e44:	7fefffff 	.word	0x7fefffff
 8011e48:	08023ec8 	.word	0x08023ec8
 8011e4c:	08023ecc 	.word	0x08023ecc
 8011e50:	08023ed0 	.word	0x08023ed0
 8011e54:	08023ed4 	.word	0x08023ed4
 8011e58:	08023ed8 	.word	0x08023ed8
 8011e5c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011e5e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011e62:	4553      	cmp	r3, sl
 8011e64:	bfa8      	it	ge
 8011e66:	4653      	movge	r3, sl
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	4699      	mov	r9, r3
 8011e6c:	dc36      	bgt.n	8011edc <_printf_float+0x360>
 8011e6e:	f04f 0b00 	mov.w	fp, #0
 8011e72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011e76:	f104 021a 	add.w	r2, r4, #26
 8011e7a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011e7c:	9306      	str	r3, [sp, #24]
 8011e7e:	eba3 0309 	sub.w	r3, r3, r9
 8011e82:	455b      	cmp	r3, fp
 8011e84:	dc31      	bgt.n	8011eea <_printf_float+0x36e>
 8011e86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e88:	459a      	cmp	sl, r3
 8011e8a:	dc3a      	bgt.n	8011f02 <_printf_float+0x386>
 8011e8c:	6823      	ldr	r3, [r4, #0]
 8011e8e:	07da      	lsls	r2, r3, #31
 8011e90:	d437      	bmi.n	8011f02 <_printf_float+0x386>
 8011e92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e94:	ebaa 0903 	sub.w	r9, sl, r3
 8011e98:	9b06      	ldr	r3, [sp, #24]
 8011e9a:	ebaa 0303 	sub.w	r3, sl, r3
 8011e9e:	4599      	cmp	r9, r3
 8011ea0:	bfa8      	it	ge
 8011ea2:	4699      	movge	r9, r3
 8011ea4:	f1b9 0f00 	cmp.w	r9, #0
 8011ea8:	dc33      	bgt.n	8011f12 <_printf_float+0x396>
 8011eaa:	f04f 0800 	mov.w	r8, #0
 8011eae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011eb2:	f104 0b1a 	add.w	fp, r4, #26
 8011eb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011eb8:	ebaa 0303 	sub.w	r3, sl, r3
 8011ebc:	eba3 0309 	sub.w	r3, r3, r9
 8011ec0:	4543      	cmp	r3, r8
 8011ec2:	f77f af79 	ble.w	8011db8 <_printf_float+0x23c>
 8011ec6:	2301      	movs	r3, #1
 8011ec8:	465a      	mov	r2, fp
 8011eca:	4631      	mov	r1, r6
 8011ecc:	4628      	mov	r0, r5
 8011ece:	47b8      	blx	r7
 8011ed0:	3001      	adds	r0, #1
 8011ed2:	f43f aeae 	beq.w	8011c32 <_printf_float+0xb6>
 8011ed6:	f108 0801 	add.w	r8, r8, #1
 8011eda:	e7ec      	b.n	8011eb6 <_printf_float+0x33a>
 8011edc:	4642      	mov	r2, r8
 8011ede:	4631      	mov	r1, r6
 8011ee0:	4628      	mov	r0, r5
 8011ee2:	47b8      	blx	r7
 8011ee4:	3001      	adds	r0, #1
 8011ee6:	d1c2      	bne.n	8011e6e <_printf_float+0x2f2>
 8011ee8:	e6a3      	b.n	8011c32 <_printf_float+0xb6>
 8011eea:	2301      	movs	r3, #1
 8011eec:	4631      	mov	r1, r6
 8011eee:	4628      	mov	r0, r5
 8011ef0:	9206      	str	r2, [sp, #24]
 8011ef2:	47b8      	blx	r7
 8011ef4:	3001      	adds	r0, #1
 8011ef6:	f43f ae9c 	beq.w	8011c32 <_printf_float+0xb6>
 8011efa:	9a06      	ldr	r2, [sp, #24]
 8011efc:	f10b 0b01 	add.w	fp, fp, #1
 8011f00:	e7bb      	b.n	8011e7a <_printf_float+0x2fe>
 8011f02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011f06:	4631      	mov	r1, r6
 8011f08:	4628      	mov	r0, r5
 8011f0a:	47b8      	blx	r7
 8011f0c:	3001      	adds	r0, #1
 8011f0e:	d1c0      	bne.n	8011e92 <_printf_float+0x316>
 8011f10:	e68f      	b.n	8011c32 <_printf_float+0xb6>
 8011f12:	9a06      	ldr	r2, [sp, #24]
 8011f14:	464b      	mov	r3, r9
 8011f16:	4442      	add	r2, r8
 8011f18:	4631      	mov	r1, r6
 8011f1a:	4628      	mov	r0, r5
 8011f1c:	47b8      	blx	r7
 8011f1e:	3001      	adds	r0, #1
 8011f20:	d1c3      	bne.n	8011eaa <_printf_float+0x32e>
 8011f22:	e686      	b.n	8011c32 <_printf_float+0xb6>
 8011f24:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011f28:	f1ba 0f01 	cmp.w	sl, #1
 8011f2c:	dc01      	bgt.n	8011f32 <_printf_float+0x3b6>
 8011f2e:	07db      	lsls	r3, r3, #31
 8011f30:	d536      	bpl.n	8011fa0 <_printf_float+0x424>
 8011f32:	2301      	movs	r3, #1
 8011f34:	4642      	mov	r2, r8
 8011f36:	4631      	mov	r1, r6
 8011f38:	4628      	mov	r0, r5
 8011f3a:	47b8      	blx	r7
 8011f3c:	3001      	adds	r0, #1
 8011f3e:	f43f ae78 	beq.w	8011c32 <_printf_float+0xb6>
 8011f42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011f46:	4631      	mov	r1, r6
 8011f48:	4628      	mov	r0, r5
 8011f4a:	47b8      	blx	r7
 8011f4c:	3001      	adds	r0, #1
 8011f4e:	f43f ae70 	beq.w	8011c32 <_printf_float+0xb6>
 8011f52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011f56:	2200      	movs	r2, #0
 8011f58:	2300      	movs	r3, #0
 8011f5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011f5e:	f7ee fddb 	bl	8000b18 <__aeabi_dcmpeq>
 8011f62:	b9c0      	cbnz	r0, 8011f96 <_printf_float+0x41a>
 8011f64:	4653      	mov	r3, sl
 8011f66:	f108 0201 	add.w	r2, r8, #1
 8011f6a:	4631      	mov	r1, r6
 8011f6c:	4628      	mov	r0, r5
 8011f6e:	47b8      	blx	r7
 8011f70:	3001      	adds	r0, #1
 8011f72:	d10c      	bne.n	8011f8e <_printf_float+0x412>
 8011f74:	e65d      	b.n	8011c32 <_printf_float+0xb6>
 8011f76:	2301      	movs	r3, #1
 8011f78:	465a      	mov	r2, fp
 8011f7a:	4631      	mov	r1, r6
 8011f7c:	4628      	mov	r0, r5
 8011f7e:	47b8      	blx	r7
 8011f80:	3001      	adds	r0, #1
 8011f82:	f43f ae56 	beq.w	8011c32 <_printf_float+0xb6>
 8011f86:	f108 0801 	add.w	r8, r8, #1
 8011f8a:	45d0      	cmp	r8, sl
 8011f8c:	dbf3      	blt.n	8011f76 <_printf_float+0x3fa>
 8011f8e:	464b      	mov	r3, r9
 8011f90:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011f94:	e6df      	b.n	8011d56 <_printf_float+0x1da>
 8011f96:	f04f 0800 	mov.w	r8, #0
 8011f9a:	f104 0b1a 	add.w	fp, r4, #26
 8011f9e:	e7f4      	b.n	8011f8a <_printf_float+0x40e>
 8011fa0:	2301      	movs	r3, #1
 8011fa2:	4642      	mov	r2, r8
 8011fa4:	e7e1      	b.n	8011f6a <_printf_float+0x3ee>
 8011fa6:	2301      	movs	r3, #1
 8011fa8:	464a      	mov	r2, r9
 8011faa:	4631      	mov	r1, r6
 8011fac:	4628      	mov	r0, r5
 8011fae:	47b8      	blx	r7
 8011fb0:	3001      	adds	r0, #1
 8011fb2:	f43f ae3e 	beq.w	8011c32 <_printf_float+0xb6>
 8011fb6:	f108 0801 	add.w	r8, r8, #1
 8011fba:	68e3      	ldr	r3, [r4, #12]
 8011fbc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011fbe:	1a5b      	subs	r3, r3, r1
 8011fc0:	4543      	cmp	r3, r8
 8011fc2:	dcf0      	bgt.n	8011fa6 <_printf_float+0x42a>
 8011fc4:	e6fc      	b.n	8011dc0 <_printf_float+0x244>
 8011fc6:	f04f 0800 	mov.w	r8, #0
 8011fca:	f104 0919 	add.w	r9, r4, #25
 8011fce:	e7f4      	b.n	8011fba <_printf_float+0x43e>

08011fd0 <_printf_common>:
 8011fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fd4:	4616      	mov	r6, r2
 8011fd6:	4698      	mov	r8, r3
 8011fd8:	688a      	ldr	r2, [r1, #8]
 8011fda:	690b      	ldr	r3, [r1, #16]
 8011fdc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011fe0:	4293      	cmp	r3, r2
 8011fe2:	bfb8      	it	lt
 8011fe4:	4613      	movlt	r3, r2
 8011fe6:	6033      	str	r3, [r6, #0]
 8011fe8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011fec:	4607      	mov	r7, r0
 8011fee:	460c      	mov	r4, r1
 8011ff0:	b10a      	cbz	r2, 8011ff6 <_printf_common+0x26>
 8011ff2:	3301      	adds	r3, #1
 8011ff4:	6033      	str	r3, [r6, #0]
 8011ff6:	6823      	ldr	r3, [r4, #0]
 8011ff8:	0699      	lsls	r1, r3, #26
 8011ffa:	bf42      	ittt	mi
 8011ffc:	6833      	ldrmi	r3, [r6, #0]
 8011ffe:	3302      	addmi	r3, #2
 8012000:	6033      	strmi	r3, [r6, #0]
 8012002:	6825      	ldr	r5, [r4, #0]
 8012004:	f015 0506 	ands.w	r5, r5, #6
 8012008:	d106      	bne.n	8012018 <_printf_common+0x48>
 801200a:	f104 0a19 	add.w	sl, r4, #25
 801200e:	68e3      	ldr	r3, [r4, #12]
 8012010:	6832      	ldr	r2, [r6, #0]
 8012012:	1a9b      	subs	r3, r3, r2
 8012014:	42ab      	cmp	r3, r5
 8012016:	dc26      	bgt.n	8012066 <_printf_common+0x96>
 8012018:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801201c:	6822      	ldr	r2, [r4, #0]
 801201e:	3b00      	subs	r3, #0
 8012020:	bf18      	it	ne
 8012022:	2301      	movne	r3, #1
 8012024:	0692      	lsls	r2, r2, #26
 8012026:	d42b      	bmi.n	8012080 <_printf_common+0xb0>
 8012028:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801202c:	4641      	mov	r1, r8
 801202e:	4638      	mov	r0, r7
 8012030:	47c8      	blx	r9
 8012032:	3001      	adds	r0, #1
 8012034:	d01e      	beq.n	8012074 <_printf_common+0xa4>
 8012036:	6823      	ldr	r3, [r4, #0]
 8012038:	6922      	ldr	r2, [r4, #16]
 801203a:	f003 0306 	and.w	r3, r3, #6
 801203e:	2b04      	cmp	r3, #4
 8012040:	bf02      	ittt	eq
 8012042:	68e5      	ldreq	r5, [r4, #12]
 8012044:	6833      	ldreq	r3, [r6, #0]
 8012046:	1aed      	subeq	r5, r5, r3
 8012048:	68a3      	ldr	r3, [r4, #8]
 801204a:	bf0c      	ite	eq
 801204c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012050:	2500      	movne	r5, #0
 8012052:	4293      	cmp	r3, r2
 8012054:	bfc4      	itt	gt
 8012056:	1a9b      	subgt	r3, r3, r2
 8012058:	18ed      	addgt	r5, r5, r3
 801205a:	2600      	movs	r6, #0
 801205c:	341a      	adds	r4, #26
 801205e:	42b5      	cmp	r5, r6
 8012060:	d11a      	bne.n	8012098 <_printf_common+0xc8>
 8012062:	2000      	movs	r0, #0
 8012064:	e008      	b.n	8012078 <_printf_common+0xa8>
 8012066:	2301      	movs	r3, #1
 8012068:	4652      	mov	r2, sl
 801206a:	4641      	mov	r1, r8
 801206c:	4638      	mov	r0, r7
 801206e:	47c8      	blx	r9
 8012070:	3001      	adds	r0, #1
 8012072:	d103      	bne.n	801207c <_printf_common+0xac>
 8012074:	f04f 30ff 	mov.w	r0, #4294967295
 8012078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801207c:	3501      	adds	r5, #1
 801207e:	e7c6      	b.n	801200e <_printf_common+0x3e>
 8012080:	18e1      	adds	r1, r4, r3
 8012082:	1c5a      	adds	r2, r3, #1
 8012084:	2030      	movs	r0, #48	@ 0x30
 8012086:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801208a:	4422      	add	r2, r4
 801208c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012090:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012094:	3302      	adds	r3, #2
 8012096:	e7c7      	b.n	8012028 <_printf_common+0x58>
 8012098:	2301      	movs	r3, #1
 801209a:	4622      	mov	r2, r4
 801209c:	4641      	mov	r1, r8
 801209e:	4638      	mov	r0, r7
 80120a0:	47c8      	blx	r9
 80120a2:	3001      	adds	r0, #1
 80120a4:	d0e6      	beq.n	8012074 <_printf_common+0xa4>
 80120a6:	3601      	adds	r6, #1
 80120a8:	e7d9      	b.n	801205e <_printf_common+0x8e>
	...

080120ac <_printf_i>:
 80120ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80120b0:	7e0f      	ldrb	r7, [r1, #24]
 80120b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80120b4:	2f78      	cmp	r7, #120	@ 0x78
 80120b6:	4691      	mov	r9, r2
 80120b8:	4680      	mov	r8, r0
 80120ba:	460c      	mov	r4, r1
 80120bc:	469a      	mov	sl, r3
 80120be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80120c2:	d807      	bhi.n	80120d4 <_printf_i+0x28>
 80120c4:	2f62      	cmp	r7, #98	@ 0x62
 80120c6:	d80a      	bhi.n	80120de <_printf_i+0x32>
 80120c8:	2f00      	cmp	r7, #0
 80120ca:	f000 80d2 	beq.w	8012272 <_printf_i+0x1c6>
 80120ce:	2f58      	cmp	r7, #88	@ 0x58
 80120d0:	f000 80b9 	beq.w	8012246 <_printf_i+0x19a>
 80120d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80120d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80120dc:	e03a      	b.n	8012154 <_printf_i+0xa8>
 80120de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80120e2:	2b15      	cmp	r3, #21
 80120e4:	d8f6      	bhi.n	80120d4 <_printf_i+0x28>
 80120e6:	a101      	add	r1, pc, #4	@ (adr r1, 80120ec <_printf_i+0x40>)
 80120e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80120ec:	08012145 	.word	0x08012145
 80120f0:	08012159 	.word	0x08012159
 80120f4:	080120d5 	.word	0x080120d5
 80120f8:	080120d5 	.word	0x080120d5
 80120fc:	080120d5 	.word	0x080120d5
 8012100:	080120d5 	.word	0x080120d5
 8012104:	08012159 	.word	0x08012159
 8012108:	080120d5 	.word	0x080120d5
 801210c:	080120d5 	.word	0x080120d5
 8012110:	080120d5 	.word	0x080120d5
 8012114:	080120d5 	.word	0x080120d5
 8012118:	08012259 	.word	0x08012259
 801211c:	08012183 	.word	0x08012183
 8012120:	08012213 	.word	0x08012213
 8012124:	080120d5 	.word	0x080120d5
 8012128:	080120d5 	.word	0x080120d5
 801212c:	0801227b 	.word	0x0801227b
 8012130:	080120d5 	.word	0x080120d5
 8012134:	08012183 	.word	0x08012183
 8012138:	080120d5 	.word	0x080120d5
 801213c:	080120d5 	.word	0x080120d5
 8012140:	0801221b 	.word	0x0801221b
 8012144:	6833      	ldr	r3, [r6, #0]
 8012146:	1d1a      	adds	r2, r3, #4
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	6032      	str	r2, [r6, #0]
 801214c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012150:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012154:	2301      	movs	r3, #1
 8012156:	e09d      	b.n	8012294 <_printf_i+0x1e8>
 8012158:	6833      	ldr	r3, [r6, #0]
 801215a:	6820      	ldr	r0, [r4, #0]
 801215c:	1d19      	adds	r1, r3, #4
 801215e:	6031      	str	r1, [r6, #0]
 8012160:	0606      	lsls	r6, r0, #24
 8012162:	d501      	bpl.n	8012168 <_printf_i+0xbc>
 8012164:	681d      	ldr	r5, [r3, #0]
 8012166:	e003      	b.n	8012170 <_printf_i+0xc4>
 8012168:	0645      	lsls	r5, r0, #25
 801216a:	d5fb      	bpl.n	8012164 <_printf_i+0xb8>
 801216c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012170:	2d00      	cmp	r5, #0
 8012172:	da03      	bge.n	801217c <_printf_i+0xd0>
 8012174:	232d      	movs	r3, #45	@ 0x2d
 8012176:	426d      	negs	r5, r5
 8012178:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801217c:	4859      	ldr	r0, [pc, #356]	@ (80122e4 <_printf_i+0x238>)
 801217e:	230a      	movs	r3, #10
 8012180:	e011      	b.n	80121a6 <_printf_i+0xfa>
 8012182:	6821      	ldr	r1, [r4, #0]
 8012184:	6833      	ldr	r3, [r6, #0]
 8012186:	0608      	lsls	r0, r1, #24
 8012188:	f853 5b04 	ldr.w	r5, [r3], #4
 801218c:	d402      	bmi.n	8012194 <_printf_i+0xe8>
 801218e:	0649      	lsls	r1, r1, #25
 8012190:	bf48      	it	mi
 8012192:	b2ad      	uxthmi	r5, r5
 8012194:	2f6f      	cmp	r7, #111	@ 0x6f
 8012196:	4853      	ldr	r0, [pc, #332]	@ (80122e4 <_printf_i+0x238>)
 8012198:	6033      	str	r3, [r6, #0]
 801219a:	bf14      	ite	ne
 801219c:	230a      	movne	r3, #10
 801219e:	2308      	moveq	r3, #8
 80121a0:	2100      	movs	r1, #0
 80121a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80121a6:	6866      	ldr	r6, [r4, #4]
 80121a8:	60a6      	str	r6, [r4, #8]
 80121aa:	2e00      	cmp	r6, #0
 80121ac:	bfa2      	ittt	ge
 80121ae:	6821      	ldrge	r1, [r4, #0]
 80121b0:	f021 0104 	bicge.w	r1, r1, #4
 80121b4:	6021      	strge	r1, [r4, #0]
 80121b6:	b90d      	cbnz	r5, 80121bc <_printf_i+0x110>
 80121b8:	2e00      	cmp	r6, #0
 80121ba:	d04b      	beq.n	8012254 <_printf_i+0x1a8>
 80121bc:	4616      	mov	r6, r2
 80121be:	fbb5 f1f3 	udiv	r1, r5, r3
 80121c2:	fb03 5711 	mls	r7, r3, r1, r5
 80121c6:	5dc7      	ldrb	r7, [r0, r7]
 80121c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80121cc:	462f      	mov	r7, r5
 80121ce:	42bb      	cmp	r3, r7
 80121d0:	460d      	mov	r5, r1
 80121d2:	d9f4      	bls.n	80121be <_printf_i+0x112>
 80121d4:	2b08      	cmp	r3, #8
 80121d6:	d10b      	bne.n	80121f0 <_printf_i+0x144>
 80121d8:	6823      	ldr	r3, [r4, #0]
 80121da:	07df      	lsls	r7, r3, #31
 80121dc:	d508      	bpl.n	80121f0 <_printf_i+0x144>
 80121de:	6923      	ldr	r3, [r4, #16]
 80121e0:	6861      	ldr	r1, [r4, #4]
 80121e2:	4299      	cmp	r1, r3
 80121e4:	bfde      	ittt	le
 80121e6:	2330      	movle	r3, #48	@ 0x30
 80121e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80121ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80121f0:	1b92      	subs	r2, r2, r6
 80121f2:	6122      	str	r2, [r4, #16]
 80121f4:	f8cd a000 	str.w	sl, [sp]
 80121f8:	464b      	mov	r3, r9
 80121fa:	aa03      	add	r2, sp, #12
 80121fc:	4621      	mov	r1, r4
 80121fe:	4640      	mov	r0, r8
 8012200:	f7ff fee6 	bl	8011fd0 <_printf_common>
 8012204:	3001      	adds	r0, #1
 8012206:	d14a      	bne.n	801229e <_printf_i+0x1f2>
 8012208:	f04f 30ff 	mov.w	r0, #4294967295
 801220c:	b004      	add	sp, #16
 801220e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012212:	6823      	ldr	r3, [r4, #0]
 8012214:	f043 0320 	orr.w	r3, r3, #32
 8012218:	6023      	str	r3, [r4, #0]
 801221a:	4833      	ldr	r0, [pc, #204]	@ (80122e8 <_printf_i+0x23c>)
 801221c:	2778      	movs	r7, #120	@ 0x78
 801221e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012222:	6823      	ldr	r3, [r4, #0]
 8012224:	6831      	ldr	r1, [r6, #0]
 8012226:	061f      	lsls	r7, r3, #24
 8012228:	f851 5b04 	ldr.w	r5, [r1], #4
 801222c:	d402      	bmi.n	8012234 <_printf_i+0x188>
 801222e:	065f      	lsls	r7, r3, #25
 8012230:	bf48      	it	mi
 8012232:	b2ad      	uxthmi	r5, r5
 8012234:	6031      	str	r1, [r6, #0]
 8012236:	07d9      	lsls	r1, r3, #31
 8012238:	bf44      	itt	mi
 801223a:	f043 0320 	orrmi.w	r3, r3, #32
 801223e:	6023      	strmi	r3, [r4, #0]
 8012240:	b11d      	cbz	r5, 801224a <_printf_i+0x19e>
 8012242:	2310      	movs	r3, #16
 8012244:	e7ac      	b.n	80121a0 <_printf_i+0xf4>
 8012246:	4827      	ldr	r0, [pc, #156]	@ (80122e4 <_printf_i+0x238>)
 8012248:	e7e9      	b.n	801221e <_printf_i+0x172>
 801224a:	6823      	ldr	r3, [r4, #0]
 801224c:	f023 0320 	bic.w	r3, r3, #32
 8012250:	6023      	str	r3, [r4, #0]
 8012252:	e7f6      	b.n	8012242 <_printf_i+0x196>
 8012254:	4616      	mov	r6, r2
 8012256:	e7bd      	b.n	80121d4 <_printf_i+0x128>
 8012258:	6833      	ldr	r3, [r6, #0]
 801225a:	6825      	ldr	r5, [r4, #0]
 801225c:	6961      	ldr	r1, [r4, #20]
 801225e:	1d18      	adds	r0, r3, #4
 8012260:	6030      	str	r0, [r6, #0]
 8012262:	062e      	lsls	r6, r5, #24
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	d501      	bpl.n	801226c <_printf_i+0x1c0>
 8012268:	6019      	str	r1, [r3, #0]
 801226a:	e002      	b.n	8012272 <_printf_i+0x1c6>
 801226c:	0668      	lsls	r0, r5, #25
 801226e:	d5fb      	bpl.n	8012268 <_printf_i+0x1bc>
 8012270:	8019      	strh	r1, [r3, #0]
 8012272:	2300      	movs	r3, #0
 8012274:	6123      	str	r3, [r4, #16]
 8012276:	4616      	mov	r6, r2
 8012278:	e7bc      	b.n	80121f4 <_printf_i+0x148>
 801227a:	6833      	ldr	r3, [r6, #0]
 801227c:	1d1a      	adds	r2, r3, #4
 801227e:	6032      	str	r2, [r6, #0]
 8012280:	681e      	ldr	r6, [r3, #0]
 8012282:	6862      	ldr	r2, [r4, #4]
 8012284:	2100      	movs	r1, #0
 8012286:	4630      	mov	r0, r6
 8012288:	f7ed ffca 	bl	8000220 <memchr>
 801228c:	b108      	cbz	r0, 8012292 <_printf_i+0x1e6>
 801228e:	1b80      	subs	r0, r0, r6
 8012290:	6060      	str	r0, [r4, #4]
 8012292:	6863      	ldr	r3, [r4, #4]
 8012294:	6123      	str	r3, [r4, #16]
 8012296:	2300      	movs	r3, #0
 8012298:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801229c:	e7aa      	b.n	80121f4 <_printf_i+0x148>
 801229e:	6923      	ldr	r3, [r4, #16]
 80122a0:	4632      	mov	r2, r6
 80122a2:	4649      	mov	r1, r9
 80122a4:	4640      	mov	r0, r8
 80122a6:	47d0      	blx	sl
 80122a8:	3001      	adds	r0, #1
 80122aa:	d0ad      	beq.n	8012208 <_printf_i+0x15c>
 80122ac:	6823      	ldr	r3, [r4, #0]
 80122ae:	079b      	lsls	r3, r3, #30
 80122b0:	d413      	bmi.n	80122da <_printf_i+0x22e>
 80122b2:	68e0      	ldr	r0, [r4, #12]
 80122b4:	9b03      	ldr	r3, [sp, #12]
 80122b6:	4298      	cmp	r0, r3
 80122b8:	bfb8      	it	lt
 80122ba:	4618      	movlt	r0, r3
 80122bc:	e7a6      	b.n	801220c <_printf_i+0x160>
 80122be:	2301      	movs	r3, #1
 80122c0:	4632      	mov	r2, r6
 80122c2:	4649      	mov	r1, r9
 80122c4:	4640      	mov	r0, r8
 80122c6:	47d0      	blx	sl
 80122c8:	3001      	adds	r0, #1
 80122ca:	d09d      	beq.n	8012208 <_printf_i+0x15c>
 80122cc:	3501      	adds	r5, #1
 80122ce:	68e3      	ldr	r3, [r4, #12]
 80122d0:	9903      	ldr	r1, [sp, #12]
 80122d2:	1a5b      	subs	r3, r3, r1
 80122d4:	42ab      	cmp	r3, r5
 80122d6:	dcf2      	bgt.n	80122be <_printf_i+0x212>
 80122d8:	e7eb      	b.n	80122b2 <_printf_i+0x206>
 80122da:	2500      	movs	r5, #0
 80122dc:	f104 0619 	add.w	r6, r4, #25
 80122e0:	e7f5      	b.n	80122ce <_printf_i+0x222>
 80122e2:	bf00      	nop
 80122e4:	08023eda 	.word	0x08023eda
 80122e8:	08023eeb 	.word	0x08023eeb

080122ec <_scanf_float>:
 80122ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122f0:	b087      	sub	sp, #28
 80122f2:	4617      	mov	r7, r2
 80122f4:	9303      	str	r3, [sp, #12]
 80122f6:	688b      	ldr	r3, [r1, #8]
 80122f8:	1e5a      	subs	r2, r3, #1
 80122fa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80122fe:	bf81      	itttt	hi
 8012300:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8012304:	eb03 0b05 	addhi.w	fp, r3, r5
 8012308:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801230c:	608b      	strhi	r3, [r1, #8]
 801230e:	680b      	ldr	r3, [r1, #0]
 8012310:	460a      	mov	r2, r1
 8012312:	f04f 0500 	mov.w	r5, #0
 8012316:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801231a:	f842 3b1c 	str.w	r3, [r2], #28
 801231e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8012322:	4680      	mov	r8, r0
 8012324:	460c      	mov	r4, r1
 8012326:	bf98      	it	ls
 8012328:	f04f 0b00 	movls.w	fp, #0
 801232c:	9201      	str	r2, [sp, #4]
 801232e:	4616      	mov	r6, r2
 8012330:	46aa      	mov	sl, r5
 8012332:	46a9      	mov	r9, r5
 8012334:	9502      	str	r5, [sp, #8]
 8012336:	68a2      	ldr	r2, [r4, #8]
 8012338:	b152      	cbz	r2, 8012350 <_scanf_float+0x64>
 801233a:	683b      	ldr	r3, [r7, #0]
 801233c:	781b      	ldrb	r3, [r3, #0]
 801233e:	2b4e      	cmp	r3, #78	@ 0x4e
 8012340:	d864      	bhi.n	801240c <_scanf_float+0x120>
 8012342:	2b40      	cmp	r3, #64	@ 0x40
 8012344:	d83c      	bhi.n	80123c0 <_scanf_float+0xd4>
 8012346:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801234a:	b2c8      	uxtb	r0, r1
 801234c:	280e      	cmp	r0, #14
 801234e:	d93a      	bls.n	80123c6 <_scanf_float+0xda>
 8012350:	f1b9 0f00 	cmp.w	r9, #0
 8012354:	d003      	beq.n	801235e <_scanf_float+0x72>
 8012356:	6823      	ldr	r3, [r4, #0]
 8012358:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801235c:	6023      	str	r3, [r4, #0]
 801235e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012362:	f1ba 0f01 	cmp.w	sl, #1
 8012366:	f200 8117 	bhi.w	8012598 <_scanf_float+0x2ac>
 801236a:	9b01      	ldr	r3, [sp, #4]
 801236c:	429e      	cmp	r6, r3
 801236e:	f200 8108 	bhi.w	8012582 <_scanf_float+0x296>
 8012372:	2001      	movs	r0, #1
 8012374:	b007      	add	sp, #28
 8012376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801237a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801237e:	2a0d      	cmp	r2, #13
 8012380:	d8e6      	bhi.n	8012350 <_scanf_float+0x64>
 8012382:	a101      	add	r1, pc, #4	@ (adr r1, 8012388 <_scanf_float+0x9c>)
 8012384:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012388:	080124cf 	.word	0x080124cf
 801238c:	08012351 	.word	0x08012351
 8012390:	08012351 	.word	0x08012351
 8012394:	08012351 	.word	0x08012351
 8012398:	0801252f 	.word	0x0801252f
 801239c:	08012507 	.word	0x08012507
 80123a0:	08012351 	.word	0x08012351
 80123a4:	08012351 	.word	0x08012351
 80123a8:	080124dd 	.word	0x080124dd
 80123ac:	08012351 	.word	0x08012351
 80123b0:	08012351 	.word	0x08012351
 80123b4:	08012351 	.word	0x08012351
 80123b8:	08012351 	.word	0x08012351
 80123bc:	08012495 	.word	0x08012495
 80123c0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80123c4:	e7db      	b.n	801237e <_scanf_float+0x92>
 80123c6:	290e      	cmp	r1, #14
 80123c8:	d8c2      	bhi.n	8012350 <_scanf_float+0x64>
 80123ca:	a001      	add	r0, pc, #4	@ (adr r0, 80123d0 <_scanf_float+0xe4>)
 80123cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80123d0:	08012485 	.word	0x08012485
 80123d4:	08012351 	.word	0x08012351
 80123d8:	08012485 	.word	0x08012485
 80123dc:	0801251b 	.word	0x0801251b
 80123e0:	08012351 	.word	0x08012351
 80123e4:	0801242d 	.word	0x0801242d
 80123e8:	0801246b 	.word	0x0801246b
 80123ec:	0801246b 	.word	0x0801246b
 80123f0:	0801246b 	.word	0x0801246b
 80123f4:	0801246b 	.word	0x0801246b
 80123f8:	0801246b 	.word	0x0801246b
 80123fc:	0801246b 	.word	0x0801246b
 8012400:	0801246b 	.word	0x0801246b
 8012404:	0801246b 	.word	0x0801246b
 8012408:	0801246b 	.word	0x0801246b
 801240c:	2b6e      	cmp	r3, #110	@ 0x6e
 801240e:	d809      	bhi.n	8012424 <_scanf_float+0x138>
 8012410:	2b60      	cmp	r3, #96	@ 0x60
 8012412:	d8b2      	bhi.n	801237a <_scanf_float+0x8e>
 8012414:	2b54      	cmp	r3, #84	@ 0x54
 8012416:	d07b      	beq.n	8012510 <_scanf_float+0x224>
 8012418:	2b59      	cmp	r3, #89	@ 0x59
 801241a:	d199      	bne.n	8012350 <_scanf_float+0x64>
 801241c:	2d07      	cmp	r5, #7
 801241e:	d197      	bne.n	8012350 <_scanf_float+0x64>
 8012420:	2508      	movs	r5, #8
 8012422:	e02c      	b.n	801247e <_scanf_float+0x192>
 8012424:	2b74      	cmp	r3, #116	@ 0x74
 8012426:	d073      	beq.n	8012510 <_scanf_float+0x224>
 8012428:	2b79      	cmp	r3, #121	@ 0x79
 801242a:	e7f6      	b.n	801241a <_scanf_float+0x12e>
 801242c:	6821      	ldr	r1, [r4, #0]
 801242e:	05c8      	lsls	r0, r1, #23
 8012430:	d51b      	bpl.n	801246a <_scanf_float+0x17e>
 8012432:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8012436:	6021      	str	r1, [r4, #0]
 8012438:	f109 0901 	add.w	r9, r9, #1
 801243c:	f1bb 0f00 	cmp.w	fp, #0
 8012440:	d003      	beq.n	801244a <_scanf_float+0x15e>
 8012442:	3201      	adds	r2, #1
 8012444:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012448:	60a2      	str	r2, [r4, #8]
 801244a:	68a3      	ldr	r3, [r4, #8]
 801244c:	3b01      	subs	r3, #1
 801244e:	60a3      	str	r3, [r4, #8]
 8012450:	6923      	ldr	r3, [r4, #16]
 8012452:	3301      	adds	r3, #1
 8012454:	6123      	str	r3, [r4, #16]
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	3b01      	subs	r3, #1
 801245a:	2b00      	cmp	r3, #0
 801245c:	607b      	str	r3, [r7, #4]
 801245e:	f340 8087 	ble.w	8012570 <_scanf_float+0x284>
 8012462:	683b      	ldr	r3, [r7, #0]
 8012464:	3301      	adds	r3, #1
 8012466:	603b      	str	r3, [r7, #0]
 8012468:	e765      	b.n	8012336 <_scanf_float+0x4a>
 801246a:	eb1a 0105 	adds.w	r1, sl, r5
 801246e:	f47f af6f 	bne.w	8012350 <_scanf_float+0x64>
 8012472:	6822      	ldr	r2, [r4, #0]
 8012474:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8012478:	6022      	str	r2, [r4, #0]
 801247a:	460d      	mov	r5, r1
 801247c:	468a      	mov	sl, r1
 801247e:	f806 3b01 	strb.w	r3, [r6], #1
 8012482:	e7e2      	b.n	801244a <_scanf_float+0x15e>
 8012484:	6822      	ldr	r2, [r4, #0]
 8012486:	0610      	lsls	r0, r2, #24
 8012488:	f57f af62 	bpl.w	8012350 <_scanf_float+0x64>
 801248c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8012490:	6022      	str	r2, [r4, #0]
 8012492:	e7f4      	b.n	801247e <_scanf_float+0x192>
 8012494:	f1ba 0f00 	cmp.w	sl, #0
 8012498:	d10e      	bne.n	80124b8 <_scanf_float+0x1cc>
 801249a:	f1b9 0f00 	cmp.w	r9, #0
 801249e:	d10e      	bne.n	80124be <_scanf_float+0x1d2>
 80124a0:	6822      	ldr	r2, [r4, #0]
 80124a2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80124a6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80124aa:	d108      	bne.n	80124be <_scanf_float+0x1d2>
 80124ac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80124b0:	6022      	str	r2, [r4, #0]
 80124b2:	f04f 0a01 	mov.w	sl, #1
 80124b6:	e7e2      	b.n	801247e <_scanf_float+0x192>
 80124b8:	f1ba 0f02 	cmp.w	sl, #2
 80124bc:	d055      	beq.n	801256a <_scanf_float+0x27e>
 80124be:	2d01      	cmp	r5, #1
 80124c0:	d002      	beq.n	80124c8 <_scanf_float+0x1dc>
 80124c2:	2d04      	cmp	r5, #4
 80124c4:	f47f af44 	bne.w	8012350 <_scanf_float+0x64>
 80124c8:	3501      	adds	r5, #1
 80124ca:	b2ed      	uxtb	r5, r5
 80124cc:	e7d7      	b.n	801247e <_scanf_float+0x192>
 80124ce:	f1ba 0f01 	cmp.w	sl, #1
 80124d2:	f47f af3d 	bne.w	8012350 <_scanf_float+0x64>
 80124d6:	f04f 0a02 	mov.w	sl, #2
 80124da:	e7d0      	b.n	801247e <_scanf_float+0x192>
 80124dc:	b97d      	cbnz	r5, 80124fe <_scanf_float+0x212>
 80124de:	f1b9 0f00 	cmp.w	r9, #0
 80124e2:	f47f af38 	bne.w	8012356 <_scanf_float+0x6a>
 80124e6:	6822      	ldr	r2, [r4, #0]
 80124e8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80124ec:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80124f0:	f040 8108 	bne.w	8012704 <_scanf_float+0x418>
 80124f4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80124f8:	6022      	str	r2, [r4, #0]
 80124fa:	2501      	movs	r5, #1
 80124fc:	e7bf      	b.n	801247e <_scanf_float+0x192>
 80124fe:	2d03      	cmp	r5, #3
 8012500:	d0e2      	beq.n	80124c8 <_scanf_float+0x1dc>
 8012502:	2d05      	cmp	r5, #5
 8012504:	e7de      	b.n	80124c4 <_scanf_float+0x1d8>
 8012506:	2d02      	cmp	r5, #2
 8012508:	f47f af22 	bne.w	8012350 <_scanf_float+0x64>
 801250c:	2503      	movs	r5, #3
 801250e:	e7b6      	b.n	801247e <_scanf_float+0x192>
 8012510:	2d06      	cmp	r5, #6
 8012512:	f47f af1d 	bne.w	8012350 <_scanf_float+0x64>
 8012516:	2507      	movs	r5, #7
 8012518:	e7b1      	b.n	801247e <_scanf_float+0x192>
 801251a:	6822      	ldr	r2, [r4, #0]
 801251c:	0591      	lsls	r1, r2, #22
 801251e:	f57f af17 	bpl.w	8012350 <_scanf_float+0x64>
 8012522:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8012526:	6022      	str	r2, [r4, #0]
 8012528:	f8cd 9008 	str.w	r9, [sp, #8]
 801252c:	e7a7      	b.n	801247e <_scanf_float+0x192>
 801252e:	6822      	ldr	r2, [r4, #0]
 8012530:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8012534:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8012538:	d006      	beq.n	8012548 <_scanf_float+0x25c>
 801253a:	0550      	lsls	r0, r2, #21
 801253c:	f57f af08 	bpl.w	8012350 <_scanf_float+0x64>
 8012540:	f1b9 0f00 	cmp.w	r9, #0
 8012544:	f000 80de 	beq.w	8012704 <_scanf_float+0x418>
 8012548:	0591      	lsls	r1, r2, #22
 801254a:	bf58      	it	pl
 801254c:	9902      	ldrpl	r1, [sp, #8]
 801254e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8012552:	bf58      	it	pl
 8012554:	eba9 0101 	subpl.w	r1, r9, r1
 8012558:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801255c:	bf58      	it	pl
 801255e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8012562:	6022      	str	r2, [r4, #0]
 8012564:	f04f 0900 	mov.w	r9, #0
 8012568:	e789      	b.n	801247e <_scanf_float+0x192>
 801256a:	f04f 0a03 	mov.w	sl, #3
 801256e:	e786      	b.n	801247e <_scanf_float+0x192>
 8012570:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012574:	4639      	mov	r1, r7
 8012576:	4640      	mov	r0, r8
 8012578:	4798      	blx	r3
 801257a:	2800      	cmp	r0, #0
 801257c:	f43f aedb 	beq.w	8012336 <_scanf_float+0x4a>
 8012580:	e6e6      	b.n	8012350 <_scanf_float+0x64>
 8012582:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012586:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801258a:	463a      	mov	r2, r7
 801258c:	4640      	mov	r0, r8
 801258e:	4798      	blx	r3
 8012590:	6923      	ldr	r3, [r4, #16]
 8012592:	3b01      	subs	r3, #1
 8012594:	6123      	str	r3, [r4, #16]
 8012596:	e6e8      	b.n	801236a <_scanf_float+0x7e>
 8012598:	1e6b      	subs	r3, r5, #1
 801259a:	2b06      	cmp	r3, #6
 801259c:	d824      	bhi.n	80125e8 <_scanf_float+0x2fc>
 801259e:	2d02      	cmp	r5, #2
 80125a0:	d836      	bhi.n	8012610 <_scanf_float+0x324>
 80125a2:	9b01      	ldr	r3, [sp, #4]
 80125a4:	429e      	cmp	r6, r3
 80125a6:	f67f aee4 	bls.w	8012372 <_scanf_float+0x86>
 80125aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80125ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80125b2:	463a      	mov	r2, r7
 80125b4:	4640      	mov	r0, r8
 80125b6:	4798      	blx	r3
 80125b8:	6923      	ldr	r3, [r4, #16]
 80125ba:	3b01      	subs	r3, #1
 80125bc:	6123      	str	r3, [r4, #16]
 80125be:	e7f0      	b.n	80125a2 <_scanf_float+0x2b6>
 80125c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80125c4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80125c8:	463a      	mov	r2, r7
 80125ca:	4640      	mov	r0, r8
 80125cc:	4798      	blx	r3
 80125ce:	6923      	ldr	r3, [r4, #16]
 80125d0:	3b01      	subs	r3, #1
 80125d2:	6123      	str	r3, [r4, #16]
 80125d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80125d8:	fa5f fa8a 	uxtb.w	sl, sl
 80125dc:	f1ba 0f02 	cmp.w	sl, #2
 80125e0:	d1ee      	bne.n	80125c0 <_scanf_float+0x2d4>
 80125e2:	3d03      	subs	r5, #3
 80125e4:	b2ed      	uxtb	r5, r5
 80125e6:	1b76      	subs	r6, r6, r5
 80125e8:	6823      	ldr	r3, [r4, #0]
 80125ea:	05da      	lsls	r2, r3, #23
 80125ec:	d530      	bpl.n	8012650 <_scanf_float+0x364>
 80125ee:	055b      	lsls	r3, r3, #21
 80125f0:	d511      	bpl.n	8012616 <_scanf_float+0x32a>
 80125f2:	9b01      	ldr	r3, [sp, #4]
 80125f4:	429e      	cmp	r6, r3
 80125f6:	f67f aebc 	bls.w	8012372 <_scanf_float+0x86>
 80125fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80125fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012602:	463a      	mov	r2, r7
 8012604:	4640      	mov	r0, r8
 8012606:	4798      	blx	r3
 8012608:	6923      	ldr	r3, [r4, #16]
 801260a:	3b01      	subs	r3, #1
 801260c:	6123      	str	r3, [r4, #16]
 801260e:	e7f0      	b.n	80125f2 <_scanf_float+0x306>
 8012610:	46aa      	mov	sl, r5
 8012612:	46b3      	mov	fp, r6
 8012614:	e7de      	b.n	80125d4 <_scanf_float+0x2e8>
 8012616:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801261a:	6923      	ldr	r3, [r4, #16]
 801261c:	2965      	cmp	r1, #101	@ 0x65
 801261e:	f103 33ff 	add.w	r3, r3, #4294967295
 8012622:	f106 35ff 	add.w	r5, r6, #4294967295
 8012626:	6123      	str	r3, [r4, #16]
 8012628:	d00c      	beq.n	8012644 <_scanf_float+0x358>
 801262a:	2945      	cmp	r1, #69	@ 0x45
 801262c:	d00a      	beq.n	8012644 <_scanf_float+0x358>
 801262e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012632:	463a      	mov	r2, r7
 8012634:	4640      	mov	r0, r8
 8012636:	4798      	blx	r3
 8012638:	6923      	ldr	r3, [r4, #16]
 801263a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801263e:	3b01      	subs	r3, #1
 8012640:	1eb5      	subs	r5, r6, #2
 8012642:	6123      	str	r3, [r4, #16]
 8012644:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012648:	463a      	mov	r2, r7
 801264a:	4640      	mov	r0, r8
 801264c:	4798      	blx	r3
 801264e:	462e      	mov	r6, r5
 8012650:	6822      	ldr	r2, [r4, #0]
 8012652:	f012 0210 	ands.w	r2, r2, #16
 8012656:	d001      	beq.n	801265c <_scanf_float+0x370>
 8012658:	2000      	movs	r0, #0
 801265a:	e68b      	b.n	8012374 <_scanf_float+0x88>
 801265c:	7032      	strb	r2, [r6, #0]
 801265e:	6823      	ldr	r3, [r4, #0]
 8012660:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8012664:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012668:	d11c      	bne.n	80126a4 <_scanf_float+0x3b8>
 801266a:	9b02      	ldr	r3, [sp, #8]
 801266c:	454b      	cmp	r3, r9
 801266e:	eba3 0209 	sub.w	r2, r3, r9
 8012672:	d123      	bne.n	80126bc <_scanf_float+0x3d0>
 8012674:	9901      	ldr	r1, [sp, #4]
 8012676:	2200      	movs	r2, #0
 8012678:	4640      	mov	r0, r8
 801267a:	f002 fcfd 	bl	8015078 <_strtod_r>
 801267e:	9b03      	ldr	r3, [sp, #12]
 8012680:	6821      	ldr	r1, [r4, #0]
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	f011 0f02 	tst.w	r1, #2
 8012688:	ec57 6b10 	vmov	r6, r7, d0
 801268c:	f103 0204 	add.w	r2, r3, #4
 8012690:	d01f      	beq.n	80126d2 <_scanf_float+0x3e6>
 8012692:	9903      	ldr	r1, [sp, #12]
 8012694:	600a      	str	r2, [r1, #0]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	e9c3 6700 	strd	r6, r7, [r3]
 801269c:	68e3      	ldr	r3, [r4, #12]
 801269e:	3301      	adds	r3, #1
 80126a0:	60e3      	str	r3, [r4, #12]
 80126a2:	e7d9      	b.n	8012658 <_scanf_float+0x36c>
 80126a4:	9b04      	ldr	r3, [sp, #16]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d0e4      	beq.n	8012674 <_scanf_float+0x388>
 80126aa:	9905      	ldr	r1, [sp, #20]
 80126ac:	230a      	movs	r3, #10
 80126ae:	3101      	adds	r1, #1
 80126b0:	4640      	mov	r0, r8
 80126b2:	f002 fd61 	bl	8015178 <_strtol_r>
 80126b6:	9b04      	ldr	r3, [sp, #16]
 80126b8:	9e05      	ldr	r6, [sp, #20]
 80126ba:	1ac2      	subs	r2, r0, r3
 80126bc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80126c0:	429e      	cmp	r6, r3
 80126c2:	bf28      	it	cs
 80126c4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80126c8:	4910      	ldr	r1, [pc, #64]	@ (801270c <_scanf_float+0x420>)
 80126ca:	4630      	mov	r0, r6
 80126cc:	f000 f954 	bl	8012978 <siprintf>
 80126d0:	e7d0      	b.n	8012674 <_scanf_float+0x388>
 80126d2:	f011 0f04 	tst.w	r1, #4
 80126d6:	9903      	ldr	r1, [sp, #12]
 80126d8:	600a      	str	r2, [r1, #0]
 80126da:	d1dc      	bne.n	8012696 <_scanf_float+0x3aa>
 80126dc:	681d      	ldr	r5, [r3, #0]
 80126de:	4632      	mov	r2, r6
 80126e0:	463b      	mov	r3, r7
 80126e2:	4630      	mov	r0, r6
 80126e4:	4639      	mov	r1, r7
 80126e6:	f7ee fa49 	bl	8000b7c <__aeabi_dcmpun>
 80126ea:	b128      	cbz	r0, 80126f8 <_scanf_float+0x40c>
 80126ec:	4808      	ldr	r0, [pc, #32]	@ (8012710 <_scanf_float+0x424>)
 80126ee:	f000 fabb 	bl	8012c68 <nanf>
 80126f2:	ed85 0a00 	vstr	s0, [r5]
 80126f6:	e7d1      	b.n	801269c <_scanf_float+0x3b0>
 80126f8:	4630      	mov	r0, r6
 80126fa:	4639      	mov	r1, r7
 80126fc:	f7ee fa9c 	bl	8000c38 <__aeabi_d2f>
 8012700:	6028      	str	r0, [r5, #0]
 8012702:	e7cb      	b.n	801269c <_scanf_float+0x3b0>
 8012704:	f04f 0900 	mov.w	r9, #0
 8012708:	e629      	b.n	801235e <_scanf_float+0x72>
 801270a:	bf00      	nop
 801270c:	08023efc 	.word	0x08023efc
 8012710:	08024295 	.word	0x08024295

08012714 <std>:
 8012714:	2300      	movs	r3, #0
 8012716:	b510      	push	{r4, lr}
 8012718:	4604      	mov	r4, r0
 801271a:	e9c0 3300 	strd	r3, r3, [r0]
 801271e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012722:	6083      	str	r3, [r0, #8]
 8012724:	8181      	strh	r1, [r0, #12]
 8012726:	6643      	str	r3, [r0, #100]	@ 0x64
 8012728:	81c2      	strh	r2, [r0, #14]
 801272a:	6183      	str	r3, [r0, #24]
 801272c:	4619      	mov	r1, r3
 801272e:	2208      	movs	r2, #8
 8012730:	305c      	adds	r0, #92	@ 0x5c
 8012732:	f000 fa19 	bl	8012b68 <memset>
 8012736:	4b0d      	ldr	r3, [pc, #52]	@ (801276c <std+0x58>)
 8012738:	6263      	str	r3, [r4, #36]	@ 0x24
 801273a:	4b0d      	ldr	r3, [pc, #52]	@ (8012770 <std+0x5c>)
 801273c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801273e:	4b0d      	ldr	r3, [pc, #52]	@ (8012774 <std+0x60>)
 8012740:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012742:	4b0d      	ldr	r3, [pc, #52]	@ (8012778 <std+0x64>)
 8012744:	6323      	str	r3, [r4, #48]	@ 0x30
 8012746:	4b0d      	ldr	r3, [pc, #52]	@ (801277c <std+0x68>)
 8012748:	6224      	str	r4, [r4, #32]
 801274a:	429c      	cmp	r4, r3
 801274c:	d006      	beq.n	801275c <std+0x48>
 801274e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012752:	4294      	cmp	r4, r2
 8012754:	d002      	beq.n	801275c <std+0x48>
 8012756:	33d0      	adds	r3, #208	@ 0xd0
 8012758:	429c      	cmp	r4, r3
 801275a:	d105      	bne.n	8012768 <std+0x54>
 801275c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012764:	f000 ba7c 	b.w	8012c60 <__retarget_lock_init_recursive>
 8012768:	bd10      	pop	{r4, pc}
 801276a:	bf00      	nop
 801276c:	080129b9 	.word	0x080129b9
 8012770:	080129db 	.word	0x080129db
 8012774:	08012a13 	.word	0x08012a13
 8012778:	08012a37 	.word	0x08012a37
 801277c:	20003d60 	.word	0x20003d60

08012780 <stdio_exit_handler>:
 8012780:	4a02      	ldr	r2, [pc, #8]	@ (801278c <stdio_exit_handler+0xc>)
 8012782:	4903      	ldr	r1, [pc, #12]	@ (8012790 <stdio_exit_handler+0x10>)
 8012784:	4803      	ldr	r0, [pc, #12]	@ (8012794 <stdio_exit_handler+0x14>)
 8012786:	f000 b869 	b.w	801285c <_fwalk_sglue>
 801278a:	bf00      	nop
 801278c:	200001cc 	.word	0x200001cc
 8012790:	080157b9 	.word	0x080157b9
 8012794:	200001dc 	.word	0x200001dc

08012798 <cleanup_stdio>:
 8012798:	6841      	ldr	r1, [r0, #4]
 801279a:	4b0c      	ldr	r3, [pc, #48]	@ (80127cc <cleanup_stdio+0x34>)
 801279c:	4299      	cmp	r1, r3
 801279e:	b510      	push	{r4, lr}
 80127a0:	4604      	mov	r4, r0
 80127a2:	d001      	beq.n	80127a8 <cleanup_stdio+0x10>
 80127a4:	f003 f808 	bl	80157b8 <_fflush_r>
 80127a8:	68a1      	ldr	r1, [r4, #8]
 80127aa:	4b09      	ldr	r3, [pc, #36]	@ (80127d0 <cleanup_stdio+0x38>)
 80127ac:	4299      	cmp	r1, r3
 80127ae:	d002      	beq.n	80127b6 <cleanup_stdio+0x1e>
 80127b0:	4620      	mov	r0, r4
 80127b2:	f003 f801 	bl	80157b8 <_fflush_r>
 80127b6:	68e1      	ldr	r1, [r4, #12]
 80127b8:	4b06      	ldr	r3, [pc, #24]	@ (80127d4 <cleanup_stdio+0x3c>)
 80127ba:	4299      	cmp	r1, r3
 80127bc:	d004      	beq.n	80127c8 <cleanup_stdio+0x30>
 80127be:	4620      	mov	r0, r4
 80127c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80127c4:	f002 bff8 	b.w	80157b8 <_fflush_r>
 80127c8:	bd10      	pop	{r4, pc}
 80127ca:	bf00      	nop
 80127cc:	20003d60 	.word	0x20003d60
 80127d0:	20003dc8 	.word	0x20003dc8
 80127d4:	20003e30 	.word	0x20003e30

080127d8 <global_stdio_init.part.0>:
 80127d8:	b510      	push	{r4, lr}
 80127da:	4b0b      	ldr	r3, [pc, #44]	@ (8012808 <global_stdio_init.part.0+0x30>)
 80127dc:	4c0b      	ldr	r4, [pc, #44]	@ (801280c <global_stdio_init.part.0+0x34>)
 80127de:	4a0c      	ldr	r2, [pc, #48]	@ (8012810 <global_stdio_init.part.0+0x38>)
 80127e0:	601a      	str	r2, [r3, #0]
 80127e2:	4620      	mov	r0, r4
 80127e4:	2200      	movs	r2, #0
 80127e6:	2104      	movs	r1, #4
 80127e8:	f7ff ff94 	bl	8012714 <std>
 80127ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80127f0:	2201      	movs	r2, #1
 80127f2:	2109      	movs	r1, #9
 80127f4:	f7ff ff8e 	bl	8012714 <std>
 80127f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80127fc:	2202      	movs	r2, #2
 80127fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012802:	2112      	movs	r1, #18
 8012804:	f7ff bf86 	b.w	8012714 <std>
 8012808:	20003e98 	.word	0x20003e98
 801280c:	20003d60 	.word	0x20003d60
 8012810:	08012781 	.word	0x08012781

08012814 <__sfp_lock_acquire>:
 8012814:	4801      	ldr	r0, [pc, #4]	@ (801281c <__sfp_lock_acquire+0x8>)
 8012816:	f000 ba24 	b.w	8012c62 <__retarget_lock_acquire_recursive>
 801281a:	bf00      	nop
 801281c:	20003ea1 	.word	0x20003ea1

08012820 <__sfp_lock_release>:
 8012820:	4801      	ldr	r0, [pc, #4]	@ (8012828 <__sfp_lock_release+0x8>)
 8012822:	f000 ba1f 	b.w	8012c64 <__retarget_lock_release_recursive>
 8012826:	bf00      	nop
 8012828:	20003ea1 	.word	0x20003ea1

0801282c <__sinit>:
 801282c:	b510      	push	{r4, lr}
 801282e:	4604      	mov	r4, r0
 8012830:	f7ff fff0 	bl	8012814 <__sfp_lock_acquire>
 8012834:	6a23      	ldr	r3, [r4, #32]
 8012836:	b11b      	cbz	r3, 8012840 <__sinit+0x14>
 8012838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801283c:	f7ff bff0 	b.w	8012820 <__sfp_lock_release>
 8012840:	4b04      	ldr	r3, [pc, #16]	@ (8012854 <__sinit+0x28>)
 8012842:	6223      	str	r3, [r4, #32]
 8012844:	4b04      	ldr	r3, [pc, #16]	@ (8012858 <__sinit+0x2c>)
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d1f5      	bne.n	8012838 <__sinit+0xc>
 801284c:	f7ff ffc4 	bl	80127d8 <global_stdio_init.part.0>
 8012850:	e7f2      	b.n	8012838 <__sinit+0xc>
 8012852:	bf00      	nop
 8012854:	08012799 	.word	0x08012799
 8012858:	20003e98 	.word	0x20003e98

0801285c <_fwalk_sglue>:
 801285c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012860:	4607      	mov	r7, r0
 8012862:	4688      	mov	r8, r1
 8012864:	4614      	mov	r4, r2
 8012866:	2600      	movs	r6, #0
 8012868:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801286c:	f1b9 0901 	subs.w	r9, r9, #1
 8012870:	d505      	bpl.n	801287e <_fwalk_sglue+0x22>
 8012872:	6824      	ldr	r4, [r4, #0]
 8012874:	2c00      	cmp	r4, #0
 8012876:	d1f7      	bne.n	8012868 <_fwalk_sglue+0xc>
 8012878:	4630      	mov	r0, r6
 801287a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801287e:	89ab      	ldrh	r3, [r5, #12]
 8012880:	2b01      	cmp	r3, #1
 8012882:	d907      	bls.n	8012894 <_fwalk_sglue+0x38>
 8012884:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012888:	3301      	adds	r3, #1
 801288a:	d003      	beq.n	8012894 <_fwalk_sglue+0x38>
 801288c:	4629      	mov	r1, r5
 801288e:	4638      	mov	r0, r7
 8012890:	47c0      	blx	r8
 8012892:	4306      	orrs	r6, r0
 8012894:	3568      	adds	r5, #104	@ 0x68
 8012896:	e7e9      	b.n	801286c <_fwalk_sglue+0x10>

08012898 <iprintf>:
 8012898:	b40f      	push	{r0, r1, r2, r3}
 801289a:	b507      	push	{r0, r1, r2, lr}
 801289c:	4906      	ldr	r1, [pc, #24]	@ (80128b8 <iprintf+0x20>)
 801289e:	ab04      	add	r3, sp, #16
 80128a0:	6808      	ldr	r0, [r1, #0]
 80128a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80128a6:	6881      	ldr	r1, [r0, #8]
 80128a8:	9301      	str	r3, [sp, #4]
 80128aa:	f002 fde9 	bl	8015480 <_vfiprintf_r>
 80128ae:	b003      	add	sp, #12
 80128b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80128b4:	b004      	add	sp, #16
 80128b6:	4770      	bx	lr
 80128b8:	200001d8 	.word	0x200001d8

080128bc <_puts_r>:
 80128bc:	6a03      	ldr	r3, [r0, #32]
 80128be:	b570      	push	{r4, r5, r6, lr}
 80128c0:	6884      	ldr	r4, [r0, #8]
 80128c2:	4605      	mov	r5, r0
 80128c4:	460e      	mov	r6, r1
 80128c6:	b90b      	cbnz	r3, 80128cc <_puts_r+0x10>
 80128c8:	f7ff ffb0 	bl	801282c <__sinit>
 80128cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80128ce:	07db      	lsls	r3, r3, #31
 80128d0:	d405      	bmi.n	80128de <_puts_r+0x22>
 80128d2:	89a3      	ldrh	r3, [r4, #12]
 80128d4:	0598      	lsls	r0, r3, #22
 80128d6:	d402      	bmi.n	80128de <_puts_r+0x22>
 80128d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80128da:	f000 f9c2 	bl	8012c62 <__retarget_lock_acquire_recursive>
 80128de:	89a3      	ldrh	r3, [r4, #12]
 80128e0:	0719      	lsls	r1, r3, #28
 80128e2:	d502      	bpl.n	80128ea <_puts_r+0x2e>
 80128e4:	6923      	ldr	r3, [r4, #16]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d135      	bne.n	8012956 <_puts_r+0x9a>
 80128ea:	4621      	mov	r1, r4
 80128ec:	4628      	mov	r0, r5
 80128ee:	f000 f8e5 	bl	8012abc <__swsetup_r>
 80128f2:	b380      	cbz	r0, 8012956 <_puts_r+0x9a>
 80128f4:	f04f 35ff 	mov.w	r5, #4294967295
 80128f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80128fa:	07da      	lsls	r2, r3, #31
 80128fc:	d405      	bmi.n	801290a <_puts_r+0x4e>
 80128fe:	89a3      	ldrh	r3, [r4, #12]
 8012900:	059b      	lsls	r3, r3, #22
 8012902:	d402      	bmi.n	801290a <_puts_r+0x4e>
 8012904:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012906:	f000 f9ad 	bl	8012c64 <__retarget_lock_release_recursive>
 801290a:	4628      	mov	r0, r5
 801290c:	bd70      	pop	{r4, r5, r6, pc}
 801290e:	2b00      	cmp	r3, #0
 8012910:	da04      	bge.n	801291c <_puts_r+0x60>
 8012912:	69a2      	ldr	r2, [r4, #24]
 8012914:	429a      	cmp	r2, r3
 8012916:	dc17      	bgt.n	8012948 <_puts_r+0x8c>
 8012918:	290a      	cmp	r1, #10
 801291a:	d015      	beq.n	8012948 <_puts_r+0x8c>
 801291c:	6823      	ldr	r3, [r4, #0]
 801291e:	1c5a      	adds	r2, r3, #1
 8012920:	6022      	str	r2, [r4, #0]
 8012922:	7019      	strb	r1, [r3, #0]
 8012924:	68a3      	ldr	r3, [r4, #8]
 8012926:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801292a:	3b01      	subs	r3, #1
 801292c:	60a3      	str	r3, [r4, #8]
 801292e:	2900      	cmp	r1, #0
 8012930:	d1ed      	bne.n	801290e <_puts_r+0x52>
 8012932:	2b00      	cmp	r3, #0
 8012934:	da11      	bge.n	801295a <_puts_r+0x9e>
 8012936:	4622      	mov	r2, r4
 8012938:	210a      	movs	r1, #10
 801293a:	4628      	mov	r0, r5
 801293c:	f000 f87f 	bl	8012a3e <__swbuf_r>
 8012940:	3001      	adds	r0, #1
 8012942:	d0d7      	beq.n	80128f4 <_puts_r+0x38>
 8012944:	250a      	movs	r5, #10
 8012946:	e7d7      	b.n	80128f8 <_puts_r+0x3c>
 8012948:	4622      	mov	r2, r4
 801294a:	4628      	mov	r0, r5
 801294c:	f000 f877 	bl	8012a3e <__swbuf_r>
 8012950:	3001      	adds	r0, #1
 8012952:	d1e7      	bne.n	8012924 <_puts_r+0x68>
 8012954:	e7ce      	b.n	80128f4 <_puts_r+0x38>
 8012956:	3e01      	subs	r6, #1
 8012958:	e7e4      	b.n	8012924 <_puts_r+0x68>
 801295a:	6823      	ldr	r3, [r4, #0]
 801295c:	1c5a      	adds	r2, r3, #1
 801295e:	6022      	str	r2, [r4, #0]
 8012960:	220a      	movs	r2, #10
 8012962:	701a      	strb	r2, [r3, #0]
 8012964:	e7ee      	b.n	8012944 <_puts_r+0x88>
	...

08012968 <puts>:
 8012968:	4b02      	ldr	r3, [pc, #8]	@ (8012974 <puts+0xc>)
 801296a:	4601      	mov	r1, r0
 801296c:	6818      	ldr	r0, [r3, #0]
 801296e:	f7ff bfa5 	b.w	80128bc <_puts_r>
 8012972:	bf00      	nop
 8012974:	200001d8 	.word	0x200001d8

08012978 <siprintf>:
 8012978:	b40e      	push	{r1, r2, r3}
 801297a:	b500      	push	{lr}
 801297c:	b09c      	sub	sp, #112	@ 0x70
 801297e:	ab1d      	add	r3, sp, #116	@ 0x74
 8012980:	9002      	str	r0, [sp, #8]
 8012982:	9006      	str	r0, [sp, #24]
 8012984:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012988:	4809      	ldr	r0, [pc, #36]	@ (80129b0 <siprintf+0x38>)
 801298a:	9107      	str	r1, [sp, #28]
 801298c:	9104      	str	r1, [sp, #16]
 801298e:	4909      	ldr	r1, [pc, #36]	@ (80129b4 <siprintf+0x3c>)
 8012990:	f853 2b04 	ldr.w	r2, [r3], #4
 8012994:	9105      	str	r1, [sp, #20]
 8012996:	6800      	ldr	r0, [r0, #0]
 8012998:	9301      	str	r3, [sp, #4]
 801299a:	a902      	add	r1, sp, #8
 801299c:	f002 fc4a 	bl	8015234 <_svfiprintf_r>
 80129a0:	9b02      	ldr	r3, [sp, #8]
 80129a2:	2200      	movs	r2, #0
 80129a4:	701a      	strb	r2, [r3, #0]
 80129a6:	b01c      	add	sp, #112	@ 0x70
 80129a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80129ac:	b003      	add	sp, #12
 80129ae:	4770      	bx	lr
 80129b0:	200001d8 	.word	0x200001d8
 80129b4:	ffff0208 	.word	0xffff0208

080129b8 <__sread>:
 80129b8:	b510      	push	{r4, lr}
 80129ba:	460c      	mov	r4, r1
 80129bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129c0:	f000 f900 	bl	8012bc4 <_read_r>
 80129c4:	2800      	cmp	r0, #0
 80129c6:	bfab      	itete	ge
 80129c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80129ca:	89a3      	ldrhlt	r3, [r4, #12]
 80129cc:	181b      	addge	r3, r3, r0
 80129ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80129d2:	bfac      	ite	ge
 80129d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80129d6:	81a3      	strhlt	r3, [r4, #12]
 80129d8:	bd10      	pop	{r4, pc}

080129da <__swrite>:
 80129da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129de:	461f      	mov	r7, r3
 80129e0:	898b      	ldrh	r3, [r1, #12]
 80129e2:	05db      	lsls	r3, r3, #23
 80129e4:	4605      	mov	r5, r0
 80129e6:	460c      	mov	r4, r1
 80129e8:	4616      	mov	r6, r2
 80129ea:	d505      	bpl.n	80129f8 <__swrite+0x1e>
 80129ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129f0:	2302      	movs	r3, #2
 80129f2:	2200      	movs	r2, #0
 80129f4:	f000 f8d4 	bl	8012ba0 <_lseek_r>
 80129f8:	89a3      	ldrh	r3, [r4, #12]
 80129fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80129fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012a02:	81a3      	strh	r3, [r4, #12]
 8012a04:	4632      	mov	r2, r6
 8012a06:	463b      	mov	r3, r7
 8012a08:	4628      	mov	r0, r5
 8012a0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a0e:	f000 b8eb 	b.w	8012be8 <_write_r>

08012a12 <__sseek>:
 8012a12:	b510      	push	{r4, lr}
 8012a14:	460c      	mov	r4, r1
 8012a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a1a:	f000 f8c1 	bl	8012ba0 <_lseek_r>
 8012a1e:	1c43      	adds	r3, r0, #1
 8012a20:	89a3      	ldrh	r3, [r4, #12]
 8012a22:	bf15      	itete	ne
 8012a24:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012a26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012a2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012a2e:	81a3      	strheq	r3, [r4, #12]
 8012a30:	bf18      	it	ne
 8012a32:	81a3      	strhne	r3, [r4, #12]
 8012a34:	bd10      	pop	{r4, pc}

08012a36 <__sclose>:
 8012a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a3a:	f000 b8a1 	b.w	8012b80 <_close_r>

08012a3e <__swbuf_r>:
 8012a3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a40:	460e      	mov	r6, r1
 8012a42:	4614      	mov	r4, r2
 8012a44:	4605      	mov	r5, r0
 8012a46:	b118      	cbz	r0, 8012a50 <__swbuf_r+0x12>
 8012a48:	6a03      	ldr	r3, [r0, #32]
 8012a4a:	b90b      	cbnz	r3, 8012a50 <__swbuf_r+0x12>
 8012a4c:	f7ff feee 	bl	801282c <__sinit>
 8012a50:	69a3      	ldr	r3, [r4, #24]
 8012a52:	60a3      	str	r3, [r4, #8]
 8012a54:	89a3      	ldrh	r3, [r4, #12]
 8012a56:	071a      	lsls	r2, r3, #28
 8012a58:	d501      	bpl.n	8012a5e <__swbuf_r+0x20>
 8012a5a:	6923      	ldr	r3, [r4, #16]
 8012a5c:	b943      	cbnz	r3, 8012a70 <__swbuf_r+0x32>
 8012a5e:	4621      	mov	r1, r4
 8012a60:	4628      	mov	r0, r5
 8012a62:	f000 f82b 	bl	8012abc <__swsetup_r>
 8012a66:	b118      	cbz	r0, 8012a70 <__swbuf_r+0x32>
 8012a68:	f04f 37ff 	mov.w	r7, #4294967295
 8012a6c:	4638      	mov	r0, r7
 8012a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a70:	6823      	ldr	r3, [r4, #0]
 8012a72:	6922      	ldr	r2, [r4, #16]
 8012a74:	1a98      	subs	r0, r3, r2
 8012a76:	6963      	ldr	r3, [r4, #20]
 8012a78:	b2f6      	uxtb	r6, r6
 8012a7a:	4283      	cmp	r3, r0
 8012a7c:	4637      	mov	r7, r6
 8012a7e:	dc05      	bgt.n	8012a8c <__swbuf_r+0x4e>
 8012a80:	4621      	mov	r1, r4
 8012a82:	4628      	mov	r0, r5
 8012a84:	f002 fe98 	bl	80157b8 <_fflush_r>
 8012a88:	2800      	cmp	r0, #0
 8012a8a:	d1ed      	bne.n	8012a68 <__swbuf_r+0x2a>
 8012a8c:	68a3      	ldr	r3, [r4, #8]
 8012a8e:	3b01      	subs	r3, #1
 8012a90:	60a3      	str	r3, [r4, #8]
 8012a92:	6823      	ldr	r3, [r4, #0]
 8012a94:	1c5a      	adds	r2, r3, #1
 8012a96:	6022      	str	r2, [r4, #0]
 8012a98:	701e      	strb	r6, [r3, #0]
 8012a9a:	6962      	ldr	r2, [r4, #20]
 8012a9c:	1c43      	adds	r3, r0, #1
 8012a9e:	429a      	cmp	r2, r3
 8012aa0:	d004      	beq.n	8012aac <__swbuf_r+0x6e>
 8012aa2:	89a3      	ldrh	r3, [r4, #12]
 8012aa4:	07db      	lsls	r3, r3, #31
 8012aa6:	d5e1      	bpl.n	8012a6c <__swbuf_r+0x2e>
 8012aa8:	2e0a      	cmp	r6, #10
 8012aaa:	d1df      	bne.n	8012a6c <__swbuf_r+0x2e>
 8012aac:	4621      	mov	r1, r4
 8012aae:	4628      	mov	r0, r5
 8012ab0:	f002 fe82 	bl	80157b8 <_fflush_r>
 8012ab4:	2800      	cmp	r0, #0
 8012ab6:	d0d9      	beq.n	8012a6c <__swbuf_r+0x2e>
 8012ab8:	e7d6      	b.n	8012a68 <__swbuf_r+0x2a>
	...

08012abc <__swsetup_r>:
 8012abc:	b538      	push	{r3, r4, r5, lr}
 8012abe:	4b29      	ldr	r3, [pc, #164]	@ (8012b64 <__swsetup_r+0xa8>)
 8012ac0:	4605      	mov	r5, r0
 8012ac2:	6818      	ldr	r0, [r3, #0]
 8012ac4:	460c      	mov	r4, r1
 8012ac6:	b118      	cbz	r0, 8012ad0 <__swsetup_r+0x14>
 8012ac8:	6a03      	ldr	r3, [r0, #32]
 8012aca:	b90b      	cbnz	r3, 8012ad0 <__swsetup_r+0x14>
 8012acc:	f7ff feae 	bl	801282c <__sinit>
 8012ad0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ad4:	0719      	lsls	r1, r3, #28
 8012ad6:	d422      	bmi.n	8012b1e <__swsetup_r+0x62>
 8012ad8:	06da      	lsls	r2, r3, #27
 8012ada:	d407      	bmi.n	8012aec <__swsetup_r+0x30>
 8012adc:	2209      	movs	r2, #9
 8012ade:	602a      	str	r2, [r5, #0]
 8012ae0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012ae4:	81a3      	strh	r3, [r4, #12]
 8012ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8012aea:	e033      	b.n	8012b54 <__swsetup_r+0x98>
 8012aec:	0758      	lsls	r0, r3, #29
 8012aee:	d512      	bpl.n	8012b16 <__swsetup_r+0x5a>
 8012af0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012af2:	b141      	cbz	r1, 8012b06 <__swsetup_r+0x4a>
 8012af4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012af8:	4299      	cmp	r1, r3
 8012afa:	d002      	beq.n	8012b02 <__swsetup_r+0x46>
 8012afc:	4628      	mov	r0, r5
 8012afe:	f000 ff07 	bl	8013910 <_free_r>
 8012b02:	2300      	movs	r3, #0
 8012b04:	6363      	str	r3, [r4, #52]	@ 0x34
 8012b06:	89a3      	ldrh	r3, [r4, #12]
 8012b08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012b0c:	81a3      	strh	r3, [r4, #12]
 8012b0e:	2300      	movs	r3, #0
 8012b10:	6063      	str	r3, [r4, #4]
 8012b12:	6923      	ldr	r3, [r4, #16]
 8012b14:	6023      	str	r3, [r4, #0]
 8012b16:	89a3      	ldrh	r3, [r4, #12]
 8012b18:	f043 0308 	orr.w	r3, r3, #8
 8012b1c:	81a3      	strh	r3, [r4, #12]
 8012b1e:	6923      	ldr	r3, [r4, #16]
 8012b20:	b94b      	cbnz	r3, 8012b36 <__swsetup_r+0x7a>
 8012b22:	89a3      	ldrh	r3, [r4, #12]
 8012b24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012b28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012b2c:	d003      	beq.n	8012b36 <__swsetup_r+0x7a>
 8012b2e:	4621      	mov	r1, r4
 8012b30:	4628      	mov	r0, r5
 8012b32:	f002 fe8f 	bl	8015854 <__smakebuf_r>
 8012b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b3a:	f013 0201 	ands.w	r2, r3, #1
 8012b3e:	d00a      	beq.n	8012b56 <__swsetup_r+0x9a>
 8012b40:	2200      	movs	r2, #0
 8012b42:	60a2      	str	r2, [r4, #8]
 8012b44:	6962      	ldr	r2, [r4, #20]
 8012b46:	4252      	negs	r2, r2
 8012b48:	61a2      	str	r2, [r4, #24]
 8012b4a:	6922      	ldr	r2, [r4, #16]
 8012b4c:	b942      	cbnz	r2, 8012b60 <__swsetup_r+0xa4>
 8012b4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012b52:	d1c5      	bne.n	8012ae0 <__swsetup_r+0x24>
 8012b54:	bd38      	pop	{r3, r4, r5, pc}
 8012b56:	0799      	lsls	r1, r3, #30
 8012b58:	bf58      	it	pl
 8012b5a:	6962      	ldrpl	r2, [r4, #20]
 8012b5c:	60a2      	str	r2, [r4, #8]
 8012b5e:	e7f4      	b.n	8012b4a <__swsetup_r+0x8e>
 8012b60:	2000      	movs	r0, #0
 8012b62:	e7f7      	b.n	8012b54 <__swsetup_r+0x98>
 8012b64:	200001d8 	.word	0x200001d8

08012b68 <memset>:
 8012b68:	4402      	add	r2, r0
 8012b6a:	4603      	mov	r3, r0
 8012b6c:	4293      	cmp	r3, r2
 8012b6e:	d100      	bne.n	8012b72 <memset+0xa>
 8012b70:	4770      	bx	lr
 8012b72:	f803 1b01 	strb.w	r1, [r3], #1
 8012b76:	e7f9      	b.n	8012b6c <memset+0x4>

08012b78 <_localeconv_r>:
 8012b78:	4800      	ldr	r0, [pc, #0]	@ (8012b7c <_localeconv_r+0x4>)
 8012b7a:	4770      	bx	lr
 8012b7c:	20000318 	.word	0x20000318

08012b80 <_close_r>:
 8012b80:	b538      	push	{r3, r4, r5, lr}
 8012b82:	4d06      	ldr	r5, [pc, #24]	@ (8012b9c <_close_r+0x1c>)
 8012b84:	2300      	movs	r3, #0
 8012b86:	4604      	mov	r4, r0
 8012b88:	4608      	mov	r0, r1
 8012b8a:	602b      	str	r3, [r5, #0]
 8012b8c:	f7f1 fa42 	bl	8004014 <_close>
 8012b90:	1c43      	adds	r3, r0, #1
 8012b92:	d102      	bne.n	8012b9a <_close_r+0x1a>
 8012b94:	682b      	ldr	r3, [r5, #0]
 8012b96:	b103      	cbz	r3, 8012b9a <_close_r+0x1a>
 8012b98:	6023      	str	r3, [r4, #0]
 8012b9a:	bd38      	pop	{r3, r4, r5, pc}
 8012b9c:	20003e9c 	.word	0x20003e9c

08012ba0 <_lseek_r>:
 8012ba0:	b538      	push	{r3, r4, r5, lr}
 8012ba2:	4d07      	ldr	r5, [pc, #28]	@ (8012bc0 <_lseek_r+0x20>)
 8012ba4:	4604      	mov	r4, r0
 8012ba6:	4608      	mov	r0, r1
 8012ba8:	4611      	mov	r1, r2
 8012baa:	2200      	movs	r2, #0
 8012bac:	602a      	str	r2, [r5, #0]
 8012bae:	461a      	mov	r2, r3
 8012bb0:	f7f1 fa57 	bl	8004062 <_lseek>
 8012bb4:	1c43      	adds	r3, r0, #1
 8012bb6:	d102      	bne.n	8012bbe <_lseek_r+0x1e>
 8012bb8:	682b      	ldr	r3, [r5, #0]
 8012bba:	b103      	cbz	r3, 8012bbe <_lseek_r+0x1e>
 8012bbc:	6023      	str	r3, [r4, #0]
 8012bbe:	bd38      	pop	{r3, r4, r5, pc}
 8012bc0:	20003e9c 	.word	0x20003e9c

08012bc4 <_read_r>:
 8012bc4:	b538      	push	{r3, r4, r5, lr}
 8012bc6:	4d07      	ldr	r5, [pc, #28]	@ (8012be4 <_read_r+0x20>)
 8012bc8:	4604      	mov	r4, r0
 8012bca:	4608      	mov	r0, r1
 8012bcc:	4611      	mov	r1, r2
 8012bce:	2200      	movs	r2, #0
 8012bd0:	602a      	str	r2, [r5, #0]
 8012bd2:	461a      	mov	r2, r3
 8012bd4:	f7f1 f9e5 	bl	8003fa2 <_read>
 8012bd8:	1c43      	adds	r3, r0, #1
 8012bda:	d102      	bne.n	8012be2 <_read_r+0x1e>
 8012bdc:	682b      	ldr	r3, [r5, #0]
 8012bde:	b103      	cbz	r3, 8012be2 <_read_r+0x1e>
 8012be0:	6023      	str	r3, [r4, #0]
 8012be2:	bd38      	pop	{r3, r4, r5, pc}
 8012be4:	20003e9c 	.word	0x20003e9c

08012be8 <_write_r>:
 8012be8:	b538      	push	{r3, r4, r5, lr}
 8012bea:	4d07      	ldr	r5, [pc, #28]	@ (8012c08 <_write_r+0x20>)
 8012bec:	4604      	mov	r4, r0
 8012bee:	4608      	mov	r0, r1
 8012bf0:	4611      	mov	r1, r2
 8012bf2:	2200      	movs	r2, #0
 8012bf4:	602a      	str	r2, [r5, #0]
 8012bf6:	461a      	mov	r2, r3
 8012bf8:	f7f1 f9f0 	bl	8003fdc <_write>
 8012bfc:	1c43      	adds	r3, r0, #1
 8012bfe:	d102      	bne.n	8012c06 <_write_r+0x1e>
 8012c00:	682b      	ldr	r3, [r5, #0]
 8012c02:	b103      	cbz	r3, 8012c06 <_write_r+0x1e>
 8012c04:	6023      	str	r3, [r4, #0]
 8012c06:	bd38      	pop	{r3, r4, r5, pc}
 8012c08:	20003e9c 	.word	0x20003e9c

08012c0c <__errno>:
 8012c0c:	4b01      	ldr	r3, [pc, #4]	@ (8012c14 <__errno+0x8>)
 8012c0e:	6818      	ldr	r0, [r3, #0]
 8012c10:	4770      	bx	lr
 8012c12:	bf00      	nop
 8012c14:	200001d8 	.word	0x200001d8

08012c18 <__libc_init_array>:
 8012c18:	b570      	push	{r4, r5, r6, lr}
 8012c1a:	4d0d      	ldr	r5, [pc, #52]	@ (8012c50 <__libc_init_array+0x38>)
 8012c1c:	4c0d      	ldr	r4, [pc, #52]	@ (8012c54 <__libc_init_array+0x3c>)
 8012c1e:	1b64      	subs	r4, r4, r5
 8012c20:	10a4      	asrs	r4, r4, #2
 8012c22:	2600      	movs	r6, #0
 8012c24:	42a6      	cmp	r6, r4
 8012c26:	d109      	bne.n	8012c3c <__libc_init_array+0x24>
 8012c28:	4d0b      	ldr	r5, [pc, #44]	@ (8012c58 <__libc_init_array+0x40>)
 8012c2a:	4c0c      	ldr	r4, [pc, #48]	@ (8012c5c <__libc_init_array+0x44>)
 8012c2c:	f003 fae2 	bl	80161f4 <_init>
 8012c30:	1b64      	subs	r4, r4, r5
 8012c32:	10a4      	asrs	r4, r4, #2
 8012c34:	2600      	movs	r6, #0
 8012c36:	42a6      	cmp	r6, r4
 8012c38:	d105      	bne.n	8012c46 <__libc_init_array+0x2e>
 8012c3a:	bd70      	pop	{r4, r5, r6, pc}
 8012c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012c40:	4798      	blx	r3
 8012c42:	3601      	adds	r6, #1
 8012c44:	e7ee      	b.n	8012c24 <__libc_init_array+0xc>
 8012c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8012c4a:	4798      	blx	r3
 8012c4c:	3601      	adds	r6, #1
 8012c4e:	e7f2      	b.n	8012c36 <__libc_init_array+0x1e>
 8012c50:	08024300 	.word	0x08024300
 8012c54:	08024300 	.word	0x08024300
 8012c58:	08024300 	.word	0x08024300
 8012c5c:	08024304 	.word	0x08024304

08012c60 <__retarget_lock_init_recursive>:
 8012c60:	4770      	bx	lr

08012c62 <__retarget_lock_acquire_recursive>:
 8012c62:	4770      	bx	lr

08012c64 <__retarget_lock_release_recursive>:
 8012c64:	4770      	bx	lr
	...

08012c68 <nanf>:
 8012c68:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8012c70 <nanf+0x8>
 8012c6c:	4770      	bx	lr
 8012c6e:	bf00      	nop
 8012c70:	7fc00000 	.word	0x7fc00000

08012c74 <quorem>:
 8012c74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c78:	6903      	ldr	r3, [r0, #16]
 8012c7a:	690c      	ldr	r4, [r1, #16]
 8012c7c:	42a3      	cmp	r3, r4
 8012c7e:	4607      	mov	r7, r0
 8012c80:	db7e      	blt.n	8012d80 <quorem+0x10c>
 8012c82:	3c01      	subs	r4, #1
 8012c84:	f101 0814 	add.w	r8, r1, #20
 8012c88:	00a3      	lsls	r3, r4, #2
 8012c8a:	f100 0514 	add.w	r5, r0, #20
 8012c8e:	9300      	str	r3, [sp, #0]
 8012c90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012c94:	9301      	str	r3, [sp, #4]
 8012c96:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012c9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012c9e:	3301      	adds	r3, #1
 8012ca0:	429a      	cmp	r2, r3
 8012ca2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012ca6:	fbb2 f6f3 	udiv	r6, r2, r3
 8012caa:	d32e      	bcc.n	8012d0a <quorem+0x96>
 8012cac:	f04f 0a00 	mov.w	sl, #0
 8012cb0:	46c4      	mov	ip, r8
 8012cb2:	46ae      	mov	lr, r5
 8012cb4:	46d3      	mov	fp, sl
 8012cb6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012cba:	b298      	uxth	r0, r3
 8012cbc:	fb06 a000 	mla	r0, r6, r0, sl
 8012cc0:	0c02      	lsrs	r2, r0, #16
 8012cc2:	0c1b      	lsrs	r3, r3, #16
 8012cc4:	fb06 2303 	mla	r3, r6, r3, r2
 8012cc8:	f8de 2000 	ldr.w	r2, [lr]
 8012ccc:	b280      	uxth	r0, r0
 8012cce:	b292      	uxth	r2, r2
 8012cd0:	1a12      	subs	r2, r2, r0
 8012cd2:	445a      	add	r2, fp
 8012cd4:	f8de 0000 	ldr.w	r0, [lr]
 8012cd8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012cdc:	b29b      	uxth	r3, r3
 8012cde:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012ce2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012ce6:	b292      	uxth	r2, r2
 8012ce8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012cec:	45e1      	cmp	r9, ip
 8012cee:	f84e 2b04 	str.w	r2, [lr], #4
 8012cf2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012cf6:	d2de      	bcs.n	8012cb6 <quorem+0x42>
 8012cf8:	9b00      	ldr	r3, [sp, #0]
 8012cfa:	58eb      	ldr	r3, [r5, r3]
 8012cfc:	b92b      	cbnz	r3, 8012d0a <quorem+0x96>
 8012cfe:	9b01      	ldr	r3, [sp, #4]
 8012d00:	3b04      	subs	r3, #4
 8012d02:	429d      	cmp	r5, r3
 8012d04:	461a      	mov	r2, r3
 8012d06:	d32f      	bcc.n	8012d68 <quorem+0xf4>
 8012d08:	613c      	str	r4, [r7, #16]
 8012d0a:	4638      	mov	r0, r7
 8012d0c:	f001 f9c4 	bl	8014098 <__mcmp>
 8012d10:	2800      	cmp	r0, #0
 8012d12:	db25      	blt.n	8012d60 <quorem+0xec>
 8012d14:	4629      	mov	r1, r5
 8012d16:	2000      	movs	r0, #0
 8012d18:	f858 2b04 	ldr.w	r2, [r8], #4
 8012d1c:	f8d1 c000 	ldr.w	ip, [r1]
 8012d20:	fa1f fe82 	uxth.w	lr, r2
 8012d24:	fa1f f38c 	uxth.w	r3, ip
 8012d28:	eba3 030e 	sub.w	r3, r3, lr
 8012d2c:	4403      	add	r3, r0
 8012d2e:	0c12      	lsrs	r2, r2, #16
 8012d30:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012d34:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012d38:	b29b      	uxth	r3, r3
 8012d3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012d3e:	45c1      	cmp	r9, r8
 8012d40:	f841 3b04 	str.w	r3, [r1], #4
 8012d44:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012d48:	d2e6      	bcs.n	8012d18 <quorem+0xa4>
 8012d4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012d4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012d52:	b922      	cbnz	r2, 8012d5e <quorem+0xea>
 8012d54:	3b04      	subs	r3, #4
 8012d56:	429d      	cmp	r5, r3
 8012d58:	461a      	mov	r2, r3
 8012d5a:	d30b      	bcc.n	8012d74 <quorem+0x100>
 8012d5c:	613c      	str	r4, [r7, #16]
 8012d5e:	3601      	adds	r6, #1
 8012d60:	4630      	mov	r0, r6
 8012d62:	b003      	add	sp, #12
 8012d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d68:	6812      	ldr	r2, [r2, #0]
 8012d6a:	3b04      	subs	r3, #4
 8012d6c:	2a00      	cmp	r2, #0
 8012d6e:	d1cb      	bne.n	8012d08 <quorem+0x94>
 8012d70:	3c01      	subs	r4, #1
 8012d72:	e7c6      	b.n	8012d02 <quorem+0x8e>
 8012d74:	6812      	ldr	r2, [r2, #0]
 8012d76:	3b04      	subs	r3, #4
 8012d78:	2a00      	cmp	r2, #0
 8012d7a:	d1ef      	bne.n	8012d5c <quorem+0xe8>
 8012d7c:	3c01      	subs	r4, #1
 8012d7e:	e7ea      	b.n	8012d56 <quorem+0xe2>
 8012d80:	2000      	movs	r0, #0
 8012d82:	e7ee      	b.n	8012d62 <quorem+0xee>
 8012d84:	0000      	movs	r0, r0
	...

08012d88 <_dtoa_r>:
 8012d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d8c:	69c7      	ldr	r7, [r0, #28]
 8012d8e:	b099      	sub	sp, #100	@ 0x64
 8012d90:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012d94:	ec55 4b10 	vmov	r4, r5, d0
 8012d98:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8012d9a:	9109      	str	r1, [sp, #36]	@ 0x24
 8012d9c:	4683      	mov	fp, r0
 8012d9e:	920e      	str	r2, [sp, #56]	@ 0x38
 8012da0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012da2:	b97f      	cbnz	r7, 8012dc4 <_dtoa_r+0x3c>
 8012da4:	2010      	movs	r0, #16
 8012da6:	f000 fdfd 	bl	80139a4 <malloc>
 8012daa:	4602      	mov	r2, r0
 8012dac:	f8cb 001c 	str.w	r0, [fp, #28]
 8012db0:	b920      	cbnz	r0, 8012dbc <_dtoa_r+0x34>
 8012db2:	4ba7      	ldr	r3, [pc, #668]	@ (8013050 <_dtoa_r+0x2c8>)
 8012db4:	21ef      	movs	r1, #239	@ 0xef
 8012db6:	48a7      	ldr	r0, [pc, #668]	@ (8013054 <_dtoa_r+0x2cc>)
 8012db8:	f002 fdfe 	bl	80159b8 <__assert_func>
 8012dbc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012dc0:	6007      	str	r7, [r0, #0]
 8012dc2:	60c7      	str	r7, [r0, #12]
 8012dc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012dc8:	6819      	ldr	r1, [r3, #0]
 8012dca:	b159      	cbz	r1, 8012de4 <_dtoa_r+0x5c>
 8012dcc:	685a      	ldr	r2, [r3, #4]
 8012dce:	604a      	str	r2, [r1, #4]
 8012dd0:	2301      	movs	r3, #1
 8012dd2:	4093      	lsls	r3, r2
 8012dd4:	608b      	str	r3, [r1, #8]
 8012dd6:	4658      	mov	r0, fp
 8012dd8:	f000 feda 	bl	8013b90 <_Bfree>
 8012ddc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012de0:	2200      	movs	r2, #0
 8012de2:	601a      	str	r2, [r3, #0]
 8012de4:	1e2b      	subs	r3, r5, #0
 8012de6:	bfb9      	ittee	lt
 8012de8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012dec:	9303      	strlt	r3, [sp, #12]
 8012dee:	2300      	movge	r3, #0
 8012df0:	6033      	strge	r3, [r6, #0]
 8012df2:	9f03      	ldr	r7, [sp, #12]
 8012df4:	4b98      	ldr	r3, [pc, #608]	@ (8013058 <_dtoa_r+0x2d0>)
 8012df6:	bfbc      	itt	lt
 8012df8:	2201      	movlt	r2, #1
 8012dfa:	6032      	strlt	r2, [r6, #0]
 8012dfc:	43bb      	bics	r3, r7
 8012dfe:	d112      	bne.n	8012e26 <_dtoa_r+0x9e>
 8012e00:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012e02:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012e06:	6013      	str	r3, [r2, #0]
 8012e08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012e0c:	4323      	orrs	r3, r4
 8012e0e:	f000 854d 	beq.w	80138ac <_dtoa_r+0xb24>
 8012e12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012e14:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801306c <_dtoa_r+0x2e4>
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	f000 854f 	beq.w	80138bc <_dtoa_r+0xb34>
 8012e1e:	f10a 0303 	add.w	r3, sl, #3
 8012e22:	f000 bd49 	b.w	80138b8 <_dtoa_r+0xb30>
 8012e26:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012e2a:	2200      	movs	r2, #0
 8012e2c:	ec51 0b17 	vmov	r0, r1, d7
 8012e30:	2300      	movs	r3, #0
 8012e32:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8012e36:	f7ed fe6f 	bl	8000b18 <__aeabi_dcmpeq>
 8012e3a:	4680      	mov	r8, r0
 8012e3c:	b158      	cbz	r0, 8012e56 <_dtoa_r+0xce>
 8012e3e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012e40:	2301      	movs	r3, #1
 8012e42:	6013      	str	r3, [r2, #0]
 8012e44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012e46:	b113      	cbz	r3, 8012e4e <_dtoa_r+0xc6>
 8012e48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012e4a:	4b84      	ldr	r3, [pc, #528]	@ (801305c <_dtoa_r+0x2d4>)
 8012e4c:	6013      	str	r3, [r2, #0]
 8012e4e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8013070 <_dtoa_r+0x2e8>
 8012e52:	f000 bd33 	b.w	80138bc <_dtoa_r+0xb34>
 8012e56:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012e5a:	aa16      	add	r2, sp, #88	@ 0x58
 8012e5c:	a917      	add	r1, sp, #92	@ 0x5c
 8012e5e:	4658      	mov	r0, fp
 8012e60:	f001 fa3a 	bl	80142d8 <__d2b>
 8012e64:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012e68:	4681      	mov	r9, r0
 8012e6a:	2e00      	cmp	r6, #0
 8012e6c:	d077      	beq.n	8012f5e <_dtoa_r+0x1d6>
 8012e6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012e70:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8012e74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012e78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012e7c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012e80:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8012e84:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012e88:	4619      	mov	r1, r3
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	4b74      	ldr	r3, [pc, #464]	@ (8013060 <_dtoa_r+0x2d8>)
 8012e8e:	f7ed fa23 	bl	80002d8 <__aeabi_dsub>
 8012e92:	a369      	add	r3, pc, #420	@ (adr r3, 8013038 <_dtoa_r+0x2b0>)
 8012e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e98:	f7ed fbd6 	bl	8000648 <__aeabi_dmul>
 8012e9c:	a368      	add	r3, pc, #416	@ (adr r3, 8013040 <_dtoa_r+0x2b8>)
 8012e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ea2:	f7ed fa1b 	bl	80002dc <__adddf3>
 8012ea6:	4604      	mov	r4, r0
 8012ea8:	4630      	mov	r0, r6
 8012eaa:	460d      	mov	r5, r1
 8012eac:	f7ed fb62 	bl	8000574 <__aeabi_i2d>
 8012eb0:	a365      	add	r3, pc, #404	@ (adr r3, 8013048 <_dtoa_r+0x2c0>)
 8012eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eb6:	f7ed fbc7 	bl	8000648 <__aeabi_dmul>
 8012eba:	4602      	mov	r2, r0
 8012ebc:	460b      	mov	r3, r1
 8012ebe:	4620      	mov	r0, r4
 8012ec0:	4629      	mov	r1, r5
 8012ec2:	f7ed fa0b 	bl	80002dc <__adddf3>
 8012ec6:	4604      	mov	r4, r0
 8012ec8:	460d      	mov	r5, r1
 8012eca:	f7ed fe6d 	bl	8000ba8 <__aeabi_d2iz>
 8012ece:	2200      	movs	r2, #0
 8012ed0:	4607      	mov	r7, r0
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	4620      	mov	r0, r4
 8012ed6:	4629      	mov	r1, r5
 8012ed8:	f7ed fe28 	bl	8000b2c <__aeabi_dcmplt>
 8012edc:	b140      	cbz	r0, 8012ef0 <_dtoa_r+0x168>
 8012ede:	4638      	mov	r0, r7
 8012ee0:	f7ed fb48 	bl	8000574 <__aeabi_i2d>
 8012ee4:	4622      	mov	r2, r4
 8012ee6:	462b      	mov	r3, r5
 8012ee8:	f7ed fe16 	bl	8000b18 <__aeabi_dcmpeq>
 8012eec:	b900      	cbnz	r0, 8012ef0 <_dtoa_r+0x168>
 8012eee:	3f01      	subs	r7, #1
 8012ef0:	2f16      	cmp	r7, #22
 8012ef2:	d851      	bhi.n	8012f98 <_dtoa_r+0x210>
 8012ef4:	4b5b      	ldr	r3, [pc, #364]	@ (8013064 <_dtoa_r+0x2dc>)
 8012ef6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012efe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012f02:	f7ed fe13 	bl	8000b2c <__aeabi_dcmplt>
 8012f06:	2800      	cmp	r0, #0
 8012f08:	d048      	beq.n	8012f9c <_dtoa_r+0x214>
 8012f0a:	3f01      	subs	r7, #1
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	9312      	str	r3, [sp, #72]	@ 0x48
 8012f10:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012f12:	1b9b      	subs	r3, r3, r6
 8012f14:	1e5a      	subs	r2, r3, #1
 8012f16:	bf44      	itt	mi
 8012f18:	f1c3 0801 	rsbmi	r8, r3, #1
 8012f1c:	2300      	movmi	r3, #0
 8012f1e:	9208      	str	r2, [sp, #32]
 8012f20:	bf54      	ite	pl
 8012f22:	f04f 0800 	movpl.w	r8, #0
 8012f26:	9308      	strmi	r3, [sp, #32]
 8012f28:	2f00      	cmp	r7, #0
 8012f2a:	db39      	blt.n	8012fa0 <_dtoa_r+0x218>
 8012f2c:	9b08      	ldr	r3, [sp, #32]
 8012f2e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8012f30:	443b      	add	r3, r7
 8012f32:	9308      	str	r3, [sp, #32]
 8012f34:	2300      	movs	r3, #0
 8012f36:	930a      	str	r3, [sp, #40]	@ 0x28
 8012f38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f3a:	2b09      	cmp	r3, #9
 8012f3c:	d864      	bhi.n	8013008 <_dtoa_r+0x280>
 8012f3e:	2b05      	cmp	r3, #5
 8012f40:	bfc4      	itt	gt
 8012f42:	3b04      	subgt	r3, #4
 8012f44:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8012f46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f48:	f1a3 0302 	sub.w	r3, r3, #2
 8012f4c:	bfcc      	ite	gt
 8012f4e:	2400      	movgt	r4, #0
 8012f50:	2401      	movle	r4, #1
 8012f52:	2b03      	cmp	r3, #3
 8012f54:	d863      	bhi.n	801301e <_dtoa_r+0x296>
 8012f56:	e8df f003 	tbb	[pc, r3]
 8012f5a:	372a      	.short	0x372a
 8012f5c:	5535      	.short	0x5535
 8012f5e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8012f62:	441e      	add	r6, r3
 8012f64:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012f68:	2b20      	cmp	r3, #32
 8012f6a:	bfc1      	itttt	gt
 8012f6c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012f70:	409f      	lslgt	r7, r3
 8012f72:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8012f76:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012f7a:	bfd6      	itet	le
 8012f7c:	f1c3 0320 	rsble	r3, r3, #32
 8012f80:	ea47 0003 	orrgt.w	r0, r7, r3
 8012f84:	fa04 f003 	lslle.w	r0, r4, r3
 8012f88:	f7ed fae4 	bl	8000554 <__aeabi_ui2d>
 8012f8c:	2201      	movs	r2, #1
 8012f8e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8012f92:	3e01      	subs	r6, #1
 8012f94:	9214      	str	r2, [sp, #80]	@ 0x50
 8012f96:	e777      	b.n	8012e88 <_dtoa_r+0x100>
 8012f98:	2301      	movs	r3, #1
 8012f9a:	e7b8      	b.n	8012f0e <_dtoa_r+0x186>
 8012f9c:	9012      	str	r0, [sp, #72]	@ 0x48
 8012f9e:	e7b7      	b.n	8012f10 <_dtoa_r+0x188>
 8012fa0:	427b      	negs	r3, r7
 8012fa2:	930a      	str	r3, [sp, #40]	@ 0x28
 8012fa4:	2300      	movs	r3, #0
 8012fa6:	eba8 0807 	sub.w	r8, r8, r7
 8012faa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012fac:	e7c4      	b.n	8012f38 <_dtoa_r+0x1b0>
 8012fae:	2300      	movs	r3, #0
 8012fb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012fb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	dc35      	bgt.n	8013024 <_dtoa_r+0x29c>
 8012fb8:	2301      	movs	r3, #1
 8012fba:	9300      	str	r3, [sp, #0]
 8012fbc:	9307      	str	r3, [sp, #28]
 8012fbe:	461a      	mov	r2, r3
 8012fc0:	920e      	str	r2, [sp, #56]	@ 0x38
 8012fc2:	e00b      	b.n	8012fdc <_dtoa_r+0x254>
 8012fc4:	2301      	movs	r3, #1
 8012fc6:	e7f3      	b.n	8012fb0 <_dtoa_r+0x228>
 8012fc8:	2300      	movs	r3, #0
 8012fca:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012fcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012fce:	18fb      	adds	r3, r7, r3
 8012fd0:	9300      	str	r3, [sp, #0]
 8012fd2:	3301      	adds	r3, #1
 8012fd4:	2b01      	cmp	r3, #1
 8012fd6:	9307      	str	r3, [sp, #28]
 8012fd8:	bfb8      	it	lt
 8012fda:	2301      	movlt	r3, #1
 8012fdc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8012fe0:	2100      	movs	r1, #0
 8012fe2:	2204      	movs	r2, #4
 8012fe4:	f102 0514 	add.w	r5, r2, #20
 8012fe8:	429d      	cmp	r5, r3
 8012fea:	d91f      	bls.n	801302c <_dtoa_r+0x2a4>
 8012fec:	6041      	str	r1, [r0, #4]
 8012fee:	4658      	mov	r0, fp
 8012ff0:	f000 fd8e 	bl	8013b10 <_Balloc>
 8012ff4:	4682      	mov	sl, r0
 8012ff6:	2800      	cmp	r0, #0
 8012ff8:	d13c      	bne.n	8013074 <_dtoa_r+0x2ec>
 8012ffa:	4b1b      	ldr	r3, [pc, #108]	@ (8013068 <_dtoa_r+0x2e0>)
 8012ffc:	4602      	mov	r2, r0
 8012ffe:	f240 11af 	movw	r1, #431	@ 0x1af
 8013002:	e6d8      	b.n	8012db6 <_dtoa_r+0x2e>
 8013004:	2301      	movs	r3, #1
 8013006:	e7e0      	b.n	8012fca <_dtoa_r+0x242>
 8013008:	2401      	movs	r4, #1
 801300a:	2300      	movs	r3, #0
 801300c:	9309      	str	r3, [sp, #36]	@ 0x24
 801300e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013010:	f04f 33ff 	mov.w	r3, #4294967295
 8013014:	9300      	str	r3, [sp, #0]
 8013016:	9307      	str	r3, [sp, #28]
 8013018:	2200      	movs	r2, #0
 801301a:	2312      	movs	r3, #18
 801301c:	e7d0      	b.n	8012fc0 <_dtoa_r+0x238>
 801301e:	2301      	movs	r3, #1
 8013020:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013022:	e7f5      	b.n	8013010 <_dtoa_r+0x288>
 8013024:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013026:	9300      	str	r3, [sp, #0]
 8013028:	9307      	str	r3, [sp, #28]
 801302a:	e7d7      	b.n	8012fdc <_dtoa_r+0x254>
 801302c:	3101      	adds	r1, #1
 801302e:	0052      	lsls	r2, r2, #1
 8013030:	e7d8      	b.n	8012fe4 <_dtoa_r+0x25c>
 8013032:	bf00      	nop
 8013034:	f3af 8000 	nop.w
 8013038:	636f4361 	.word	0x636f4361
 801303c:	3fd287a7 	.word	0x3fd287a7
 8013040:	8b60c8b3 	.word	0x8b60c8b3
 8013044:	3fc68a28 	.word	0x3fc68a28
 8013048:	509f79fb 	.word	0x509f79fb
 801304c:	3fd34413 	.word	0x3fd34413
 8013050:	08023f0e 	.word	0x08023f0e
 8013054:	08023f25 	.word	0x08023f25
 8013058:	7ff00000 	.word	0x7ff00000
 801305c:	08023ed9 	.word	0x08023ed9
 8013060:	3ff80000 	.word	0x3ff80000
 8013064:	08024020 	.word	0x08024020
 8013068:	08023f7d 	.word	0x08023f7d
 801306c:	08023f0a 	.word	0x08023f0a
 8013070:	08023ed8 	.word	0x08023ed8
 8013074:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013078:	6018      	str	r0, [r3, #0]
 801307a:	9b07      	ldr	r3, [sp, #28]
 801307c:	2b0e      	cmp	r3, #14
 801307e:	f200 80a4 	bhi.w	80131ca <_dtoa_r+0x442>
 8013082:	2c00      	cmp	r4, #0
 8013084:	f000 80a1 	beq.w	80131ca <_dtoa_r+0x442>
 8013088:	2f00      	cmp	r7, #0
 801308a:	dd33      	ble.n	80130f4 <_dtoa_r+0x36c>
 801308c:	4bad      	ldr	r3, [pc, #692]	@ (8013344 <_dtoa_r+0x5bc>)
 801308e:	f007 020f 	and.w	r2, r7, #15
 8013092:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013096:	ed93 7b00 	vldr	d7, [r3]
 801309a:	05f8      	lsls	r0, r7, #23
 801309c:	ed8d 7b04 	vstr	d7, [sp, #16]
 80130a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80130a4:	d516      	bpl.n	80130d4 <_dtoa_r+0x34c>
 80130a6:	4ba8      	ldr	r3, [pc, #672]	@ (8013348 <_dtoa_r+0x5c0>)
 80130a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80130ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80130b0:	f7ed fbf4 	bl	800089c <__aeabi_ddiv>
 80130b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80130b8:	f004 040f 	and.w	r4, r4, #15
 80130bc:	2603      	movs	r6, #3
 80130be:	4da2      	ldr	r5, [pc, #648]	@ (8013348 <_dtoa_r+0x5c0>)
 80130c0:	b954      	cbnz	r4, 80130d8 <_dtoa_r+0x350>
 80130c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80130c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80130ca:	f7ed fbe7 	bl	800089c <__aeabi_ddiv>
 80130ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80130d2:	e028      	b.n	8013126 <_dtoa_r+0x39e>
 80130d4:	2602      	movs	r6, #2
 80130d6:	e7f2      	b.n	80130be <_dtoa_r+0x336>
 80130d8:	07e1      	lsls	r1, r4, #31
 80130da:	d508      	bpl.n	80130ee <_dtoa_r+0x366>
 80130dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80130e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80130e4:	f7ed fab0 	bl	8000648 <__aeabi_dmul>
 80130e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80130ec:	3601      	adds	r6, #1
 80130ee:	1064      	asrs	r4, r4, #1
 80130f0:	3508      	adds	r5, #8
 80130f2:	e7e5      	b.n	80130c0 <_dtoa_r+0x338>
 80130f4:	f000 80d2 	beq.w	801329c <_dtoa_r+0x514>
 80130f8:	427c      	negs	r4, r7
 80130fa:	4b92      	ldr	r3, [pc, #584]	@ (8013344 <_dtoa_r+0x5bc>)
 80130fc:	4d92      	ldr	r5, [pc, #584]	@ (8013348 <_dtoa_r+0x5c0>)
 80130fe:	f004 020f 	and.w	r2, r4, #15
 8013102:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013106:	e9d3 2300 	ldrd	r2, r3, [r3]
 801310a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801310e:	f7ed fa9b 	bl	8000648 <__aeabi_dmul>
 8013112:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013116:	1124      	asrs	r4, r4, #4
 8013118:	2300      	movs	r3, #0
 801311a:	2602      	movs	r6, #2
 801311c:	2c00      	cmp	r4, #0
 801311e:	f040 80b2 	bne.w	8013286 <_dtoa_r+0x4fe>
 8013122:	2b00      	cmp	r3, #0
 8013124:	d1d3      	bne.n	80130ce <_dtoa_r+0x346>
 8013126:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013128:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801312c:	2b00      	cmp	r3, #0
 801312e:	f000 80b7 	beq.w	80132a0 <_dtoa_r+0x518>
 8013132:	4b86      	ldr	r3, [pc, #536]	@ (801334c <_dtoa_r+0x5c4>)
 8013134:	2200      	movs	r2, #0
 8013136:	4620      	mov	r0, r4
 8013138:	4629      	mov	r1, r5
 801313a:	f7ed fcf7 	bl	8000b2c <__aeabi_dcmplt>
 801313e:	2800      	cmp	r0, #0
 8013140:	f000 80ae 	beq.w	80132a0 <_dtoa_r+0x518>
 8013144:	9b07      	ldr	r3, [sp, #28]
 8013146:	2b00      	cmp	r3, #0
 8013148:	f000 80aa 	beq.w	80132a0 <_dtoa_r+0x518>
 801314c:	9b00      	ldr	r3, [sp, #0]
 801314e:	2b00      	cmp	r3, #0
 8013150:	dd37      	ble.n	80131c2 <_dtoa_r+0x43a>
 8013152:	1e7b      	subs	r3, r7, #1
 8013154:	9304      	str	r3, [sp, #16]
 8013156:	4620      	mov	r0, r4
 8013158:	4b7d      	ldr	r3, [pc, #500]	@ (8013350 <_dtoa_r+0x5c8>)
 801315a:	2200      	movs	r2, #0
 801315c:	4629      	mov	r1, r5
 801315e:	f7ed fa73 	bl	8000648 <__aeabi_dmul>
 8013162:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013166:	9c00      	ldr	r4, [sp, #0]
 8013168:	3601      	adds	r6, #1
 801316a:	4630      	mov	r0, r6
 801316c:	f7ed fa02 	bl	8000574 <__aeabi_i2d>
 8013170:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013174:	f7ed fa68 	bl	8000648 <__aeabi_dmul>
 8013178:	4b76      	ldr	r3, [pc, #472]	@ (8013354 <_dtoa_r+0x5cc>)
 801317a:	2200      	movs	r2, #0
 801317c:	f7ed f8ae 	bl	80002dc <__adddf3>
 8013180:	4605      	mov	r5, r0
 8013182:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8013186:	2c00      	cmp	r4, #0
 8013188:	f040 808d 	bne.w	80132a6 <_dtoa_r+0x51e>
 801318c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013190:	4b71      	ldr	r3, [pc, #452]	@ (8013358 <_dtoa_r+0x5d0>)
 8013192:	2200      	movs	r2, #0
 8013194:	f7ed f8a0 	bl	80002d8 <__aeabi_dsub>
 8013198:	4602      	mov	r2, r0
 801319a:	460b      	mov	r3, r1
 801319c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80131a0:	462a      	mov	r2, r5
 80131a2:	4633      	mov	r3, r6
 80131a4:	f7ed fce0 	bl	8000b68 <__aeabi_dcmpgt>
 80131a8:	2800      	cmp	r0, #0
 80131aa:	f040 828b 	bne.w	80136c4 <_dtoa_r+0x93c>
 80131ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80131b2:	462a      	mov	r2, r5
 80131b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80131b8:	f7ed fcb8 	bl	8000b2c <__aeabi_dcmplt>
 80131bc:	2800      	cmp	r0, #0
 80131be:	f040 8128 	bne.w	8013412 <_dtoa_r+0x68a>
 80131c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80131c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80131ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	f2c0 815a 	blt.w	8013486 <_dtoa_r+0x6fe>
 80131d2:	2f0e      	cmp	r7, #14
 80131d4:	f300 8157 	bgt.w	8013486 <_dtoa_r+0x6fe>
 80131d8:	4b5a      	ldr	r3, [pc, #360]	@ (8013344 <_dtoa_r+0x5bc>)
 80131da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80131de:	ed93 7b00 	vldr	d7, [r3]
 80131e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	ed8d 7b00 	vstr	d7, [sp]
 80131ea:	da03      	bge.n	80131f4 <_dtoa_r+0x46c>
 80131ec:	9b07      	ldr	r3, [sp, #28]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	f340 8101 	ble.w	80133f6 <_dtoa_r+0x66e>
 80131f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80131f8:	4656      	mov	r6, sl
 80131fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80131fe:	4620      	mov	r0, r4
 8013200:	4629      	mov	r1, r5
 8013202:	f7ed fb4b 	bl	800089c <__aeabi_ddiv>
 8013206:	f7ed fccf 	bl	8000ba8 <__aeabi_d2iz>
 801320a:	4680      	mov	r8, r0
 801320c:	f7ed f9b2 	bl	8000574 <__aeabi_i2d>
 8013210:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013214:	f7ed fa18 	bl	8000648 <__aeabi_dmul>
 8013218:	4602      	mov	r2, r0
 801321a:	460b      	mov	r3, r1
 801321c:	4620      	mov	r0, r4
 801321e:	4629      	mov	r1, r5
 8013220:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8013224:	f7ed f858 	bl	80002d8 <__aeabi_dsub>
 8013228:	f806 4b01 	strb.w	r4, [r6], #1
 801322c:	9d07      	ldr	r5, [sp, #28]
 801322e:	eba6 040a 	sub.w	r4, r6, sl
 8013232:	42a5      	cmp	r5, r4
 8013234:	4602      	mov	r2, r0
 8013236:	460b      	mov	r3, r1
 8013238:	f040 8117 	bne.w	801346a <_dtoa_r+0x6e2>
 801323c:	f7ed f84e 	bl	80002dc <__adddf3>
 8013240:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013244:	4604      	mov	r4, r0
 8013246:	460d      	mov	r5, r1
 8013248:	f7ed fc8e 	bl	8000b68 <__aeabi_dcmpgt>
 801324c:	2800      	cmp	r0, #0
 801324e:	f040 80f9 	bne.w	8013444 <_dtoa_r+0x6bc>
 8013252:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013256:	4620      	mov	r0, r4
 8013258:	4629      	mov	r1, r5
 801325a:	f7ed fc5d 	bl	8000b18 <__aeabi_dcmpeq>
 801325e:	b118      	cbz	r0, 8013268 <_dtoa_r+0x4e0>
 8013260:	f018 0f01 	tst.w	r8, #1
 8013264:	f040 80ee 	bne.w	8013444 <_dtoa_r+0x6bc>
 8013268:	4649      	mov	r1, r9
 801326a:	4658      	mov	r0, fp
 801326c:	f000 fc90 	bl	8013b90 <_Bfree>
 8013270:	2300      	movs	r3, #0
 8013272:	7033      	strb	r3, [r6, #0]
 8013274:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013276:	3701      	adds	r7, #1
 8013278:	601f      	str	r7, [r3, #0]
 801327a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801327c:	2b00      	cmp	r3, #0
 801327e:	f000 831d 	beq.w	80138bc <_dtoa_r+0xb34>
 8013282:	601e      	str	r6, [r3, #0]
 8013284:	e31a      	b.n	80138bc <_dtoa_r+0xb34>
 8013286:	07e2      	lsls	r2, r4, #31
 8013288:	d505      	bpl.n	8013296 <_dtoa_r+0x50e>
 801328a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801328e:	f7ed f9db 	bl	8000648 <__aeabi_dmul>
 8013292:	3601      	adds	r6, #1
 8013294:	2301      	movs	r3, #1
 8013296:	1064      	asrs	r4, r4, #1
 8013298:	3508      	adds	r5, #8
 801329a:	e73f      	b.n	801311c <_dtoa_r+0x394>
 801329c:	2602      	movs	r6, #2
 801329e:	e742      	b.n	8013126 <_dtoa_r+0x39e>
 80132a0:	9c07      	ldr	r4, [sp, #28]
 80132a2:	9704      	str	r7, [sp, #16]
 80132a4:	e761      	b.n	801316a <_dtoa_r+0x3e2>
 80132a6:	4b27      	ldr	r3, [pc, #156]	@ (8013344 <_dtoa_r+0x5bc>)
 80132a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80132aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80132ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80132b2:	4454      	add	r4, sl
 80132b4:	2900      	cmp	r1, #0
 80132b6:	d053      	beq.n	8013360 <_dtoa_r+0x5d8>
 80132b8:	4928      	ldr	r1, [pc, #160]	@ (801335c <_dtoa_r+0x5d4>)
 80132ba:	2000      	movs	r0, #0
 80132bc:	f7ed faee 	bl	800089c <__aeabi_ddiv>
 80132c0:	4633      	mov	r3, r6
 80132c2:	462a      	mov	r2, r5
 80132c4:	f7ed f808 	bl	80002d8 <__aeabi_dsub>
 80132c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80132cc:	4656      	mov	r6, sl
 80132ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80132d2:	f7ed fc69 	bl	8000ba8 <__aeabi_d2iz>
 80132d6:	4605      	mov	r5, r0
 80132d8:	f7ed f94c 	bl	8000574 <__aeabi_i2d>
 80132dc:	4602      	mov	r2, r0
 80132de:	460b      	mov	r3, r1
 80132e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80132e4:	f7ec fff8 	bl	80002d8 <__aeabi_dsub>
 80132e8:	3530      	adds	r5, #48	@ 0x30
 80132ea:	4602      	mov	r2, r0
 80132ec:	460b      	mov	r3, r1
 80132ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80132f2:	f806 5b01 	strb.w	r5, [r6], #1
 80132f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80132fa:	f7ed fc17 	bl	8000b2c <__aeabi_dcmplt>
 80132fe:	2800      	cmp	r0, #0
 8013300:	d171      	bne.n	80133e6 <_dtoa_r+0x65e>
 8013302:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013306:	4911      	ldr	r1, [pc, #68]	@ (801334c <_dtoa_r+0x5c4>)
 8013308:	2000      	movs	r0, #0
 801330a:	f7ec ffe5 	bl	80002d8 <__aeabi_dsub>
 801330e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013312:	f7ed fc0b 	bl	8000b2c <__aeabi_dcmplt>
 8013316:	2800      	cmp	r0, #0
 8013318:	f040 8095 	bne.w	8013446 <_dtoa_r+0x6be>
 801331c:	42a6      	cmp	r6, r4
 801331e:	f43f af50 	beq.w	80131c2 <_dtoa_r+0x43a>
 8013322:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013326:	4b0a      	ldr	r3, [pc, #40]	@ (8013350 <_dtoa_r+0x5c8>)
 8013328:	2200      	movs	r2, #0
 801332a:	f7ed f98d 	bl	8000648 <__aeabi_dmul>
 801332e:	4b08      	ldr	r3, [pc, #32]	@ (8013350 <_dtoa_r+0x5c8>)
 8013330:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013334:	2200      	movs	r2, #0
 8013336:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801333a:	f7ed f985 	bl	8000648 <__aeabi_dmul>
 801333e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013342:	e7c4      	b.n	80132ce <_dtoa_r+0x546>
 8013344:	08024020 	.word	0x08024020
 8013348:	08023ff8 	.word	0x08023ff8
 801334c:	3ff00000 	.word	0x3ff00000
 8013350:	40240000 	.word	0x40240000
 8013354:	401c0000 	.word	0x401c0000
 8013358:	40140000 	.word	0x40140000
 801335c:	3fe00000 	.word	0x3fe00000
 8013360:	4631      	mov	r1, r6
 8013362:	4628      	mov	r0, r5
 8013364:	f7ed f970 	bl	8000648 <__aeabi_dmul>
 8013368:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801336c:	9415      	str	r4, [sp, #84]	@ 0x54
 801336e:	4656      	mov	r6, sl
 8013370:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013374:	f7ed fc18 	bl	8000ba8 <__aeabi_d2iz>
 8013378:	4605      	mov	r5, r0
 801337a:	f7ed f8fb 	bl	8000574 <__aeabi_i2d>
 801337e:	4602      	mov	r2, r0
 8013380:	460b      	mov	r3, r1
 8013382:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013386:	f7ec ffa7 	bl	80002d8 <__aeabi_dsub>
 801338a:	3530      	adds	r5, #48	@ 0x30
 801338c:	f806 5b01 	strb.w	r5, [r6], #1
 8013390:	4602      	mov	r2, r0
 8013392:	460b      	mov	r3, r1
 8013394:	42a6      	cmp	r6, r4
 8013396:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801339a:	f04f 0200 	mov.w	r2, #0
 801339e:	d124      	bne.n	80133ea <_dtoa_r+0x662>
 80133a0:	4bac      	ldr	r3, [pc, #688]	@ (8013654 <_dtoa_r+0x8cc>)
 80133a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80133a6:	f7ec ff99 	bl	80002dc <__adddf3>
 80133aa:	4602      	mov	r2, r0
 80133ac:	460b      	mov	r3, r1
 80133ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80133b2:	f7ed fbd9 	bl	8000b68 <__aeabi_dcmpgt>
 80133b6:	2800      	cmp	r0, #0
 80133b8:	d145      	bne.n	8013446 <_dtoa_r+0x6be>
 80133ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80133be:	49a5      	ldr	r1, [pc, #660]	@ (8013654 <_dtoa_r+0x8cc>)
 80133c0:	2000      	movs	r0, #0
 80133c2:	f7ec ff89 	bl	80002d8 <__aeabi_dsub>
 80133c6:	4602      	mov	r2, r0
 80133c8:	460b      	mov	r3, r1
 80133ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80133ce:	f7ed fbad 	bl	8000b2c <__aeabi_dcmplt>
 80133d2:	2800      	cmp	r0, #0
 80133d4:	f43f aef5 	beq.w	80131c2 <_dtoa_r+0x43a>
 80133d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80133da:	1e73      	subs	r3, r6, #1
 80133dc:	9315      	str	r3, [sp, #84]	@ 0x54
 80133de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80133e2:	2b30      	cmp	r3, #48	@ 0x30
 80133e4:	d0f8      	beq.n	80133d8 <_dtoa_r+0x650>
 80133e6:	9f04      	ldr	r7, [sp, #16]
 80133e8:	e73e      	b.n	8013268 <_dtoa_r+0x4e0>
 80133ea:	4b9b      	ldr	r3, [pc, #620]	@ (8013658 <_dtoa_r+0x8d0>)
 80133ec:	f7ed f92c 	bl	8000648 <__aeabi_dmul>
 80133f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80133f4:	e7bc      	b.n	8013370 <_dtoa_r+0x5e8>
 80133f6:	d10c      	bne.n	8013412 <_dtoa_r+0x68a>
 80133f8:	4b98      	ldr	r3, [pc, #608]	@ (801365c <_dtoa_r+0x8d4>)
 80133fa:	2200      	movs	r2, #0
 80133fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013400:	f7ed f922 	bl	8000648 <__aeabi_dmul>
 8013404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013408:	f7ed fba4 	bl	8000b54 <__aeabi_dcmpge>
 801340c:	2800      	cmp	r0, #0
 801340e:	f000 8157 	beq.w	80136c0 <_dtoa_r+0x938>
 8013412:	2400      	movs	r4, #0
 8013414:	4625      	mov	r5, r4
 8013416:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013418:	43db      	mvns	r3, r3
 801341a:	9304      	str	r3, [sp, #16]
 801341c:	4656      	mov	r6, sl
 801341e:	2700      	movs	r7, #0
 8013420:	4621      	mov	r1, r4
 8013422:	4658      	mov	r0, fp
 8013424:	f000 fbb4 	bl	8013b90 <_Bfree>
 8013428:	2d00      	cmp	r5, #0
 801342a:	d0dc      	beq.n	80133e6 <_dtoa_r+0x65e>
 801342c:	b12f      	cbz	r7, 801343a <_dtoa_r+0x6b2>
 801342e:	42af      	cmp	r7, r5
 8013430:	d003      	beq.n	801343a <_dtoa_r+0x6b2>
 8013432:	4639      	mov	r1, r7
 8013434:	4658      	mov	r0, fp
 8013436:	f000 fbab 	bl	8013b90 <_Bfree>
 801343a:	4629      	mov	r1, r5
 801343c:	4658      	mov	r0, fp
 801343e:	f000 fba7 	bl	8013b90 <_Bfree>
 8013442:	e7d0      	b.n	80133e6 <_dtoa_r+0x65e>
 8013444:	9704      	str	r7, [sp, #16]
 8013446:	4633      	mov	r3, r6
 8013448:	461e      	mov	r6, r3
 801344a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801344e:	2a39      	cmp	r2, #57	@ 0x39
 8013450:	d107      	bne.n	8013462 <_dtoa_r+0x6da>
 8013452:	459a      	cmp	sl, r3
 8013454:	d1f8      	bne.n	8013448 <_dtoa_r+0x6c0>
 8013456:	9a04      	ldr	r2, [sp, #16]
 8013458:	3201      	adds	r2, #1
 801345a:	9204      	str	r2, [sp, #16]
 801345c:	2230      	movs	r2, #48	@ 0x30
 801345e:	f88a 2000 	strb.w	r2, [sl]
 8013462:	781a      	ldrb	r2, [r3, #0]
 8013464:	3201      	adds	r2, #1
 8013466:	701a      	strb	r2, [r3, #0]
 8013468:	e7bd      	b.n	80133e6 <_dtoa_r+0x65e>
 801346a:	4b7b      	ldr	r3, [pc, #492]	@ (8013658 <_dtoa_r+0x8d0>)
 801346c:	2200      	movs	r2, #0
 801346e:	f7ed f8eb 	bl	8000648 <__aeabi_dmul>
 8013472:	2200      	movs	r2, #0
 8013474:	2300      	movs	r3, #0
 8013476:	4604      	mov	r4, r0
 8013478:	460d      	mov	r5, r1
 801347a:	f7ed fb4d 	bl	8000b18 <__aeabi_dcmpeq>
 801347e:	2800      	cmp	r0, #0
 8013480:	f43f aebb 	beq.w	80131fa <_dtoa_r+0x472>
 8013484:	e6f0      	b.n	8013268 <_dtoa_r+0x4e0>
 8013486:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013488:	2a00      	cmp	r2, #0
 801348a:	f000 80db 	beq.w	8013644 <_dtoa_r+0x8bc>
 801348e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013490:	2a01      	cmp	r2, #1
 8013492:	f300 80bf 	bgt.w	8013614 <_dtoa_r+0x88c>
 8013496:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013498:	2a00      	cmp	r2, #0
 801349a:	f000 80b7 	beq.w	801360c <_dtoa_r+0x884>
 801349e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80134a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80134a4:	4646      	mov	r6, r8
 80134a6:	9a08      	ldr	r2, [sp, #32]
 80134a8:	2101      	movs	r1, #1
 80134aa:	441a      	add	r2, r3
 80134ac:	4658      	mov	r0, fp
 80134ae:	4498      	add	r8, r3
 80134b0:	9208      	str	r2, [sp, #32]
 80134b2:	f000 fc6b 	bl	8013d8c <__i2b>
 80134b6:	4605      	mov	r5, r0
 80134b8:	b15e      	cbz	r6, 80134d2 <_dtoa_r+0x74a>
 80134ba:	9b08      	ldr	r3, [sp, #32]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	dd08      	ble.n	80134d2 <_dtoa_r+0x74a>
 80134c0:	42b3      	cmp	r3, r6
 80134c2:	9a08      	ldr	r2, [sp, #32]
 80134c4:	bfa8      	it	ge
 80134c6:	4633      	movge	r3, r6
 80134c8:	eba8 0803 	sub.w	r8, r8, r3
 80134cc:	1af6      	subs	r6, r6, r3
 80134ce:	1ad3      	subs	r3, r2, r3
 80134d0:	9308      	str	r3, [sp, #32]
 80134d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80134d4:	b1f3      	cbz	r3, 8013514 <_dtoa_r+0x78c>
 80134d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80134d8:	2b00      	cmp	r3, #0
 80134da:	f000 80b7 	beq.w	801364c <_dtoa_r+0x8c4>
 80134de:	b18c      	cbz	r4, 8013504 <_dtoa_r+0x77c>
 80134e0:	4629      	mov	r1, r5
 80134e2:	4622      	mov	r2, r4
 80134e4:	4658      	mov	r0, fp
 80134e6:	f000 fd11 	bl	8013f0c <__pow5mult>
 80134ea:	464a      	mov	r2, r9
 80134ec:	4601      	mov	r1, r0
 80134ee:	4605      	mov	r5, r0
 80134f0:	4658      	mov	r0, fp
 80134f2:	f000 fc61 	bl	8013db8 <__multiply>
 80134f6:	4649      	mov	r1, r9
 80134f8:	9004      	str	r0, [sp, #16]
 80134fa:	4658      	mov	r0, fp
 80134fc:	f000 fb48 	bl	8013b90 <_Bfree>
 8013500:	9b04      	ldr	r3, [sp, #16]
 8013502:	4699      	mov	r9, r3
 8013504:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013506:	1b1a      	subs	r2, r3, r4
 8013508:	d004      	beq.n	8013514 <_dtoa_r+0x78c>
 801350a:	4649      	mov	r1, r9
 801350c:	4658      	mov	r0, fp
 801350e:	f000 fcfd 	bl	8013f0c <__pow5mult>
 8013512:	4681      	mov	r9, r0
 8013514:	2101      	movs	r1, #1
 8013516:	4658      	mov	r0, fp
 8013518:	f000 fc38 	bl	8013d8c <__i2b>
 801351c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801351e:	4604      	mov	r4, r0
 8013520:	2b00      	cmp	r3, #0
 8013522:	f000 81cf 	beq.w	80138c4 <_dtoa_r+0xb3c>
 8013526:	461a      	mov	r2, r3
 8013528:	4601      	mov	r1, r0
 801352a:	4658      	mov	r0, fp
 801352c:	f000 fcee 	bl	8013f0c <__pow5mult>
 8013530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013532:	2b01      	cmp	r3, #1
 8013534:	4604      	mov	r4, r0
 8013536:	f300 8095 	bgt.w	8013664 <_dtoa_r+0x8dc>
 801353a:	9b02      	ldr	r3, [sp, #8]
 801353c:	2b00      	cmp	r3, #0
 801353e:	f040 8087 	bne.w	8013650 <_dtoa_r+0x8c8>
 8013542:	9b03      	ldr	r3, [sp, #12]
 8013544:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013548:	2b00      	cmp	r3, #0
 801354a:	f040 8089 	bne.w	8013660 <_dtoa_r+0x8d8>
 801354e:	9b03      	ldr	r3, [sp, #12]
 8013550:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013554:	0d1b      	lsrs	r3, r3, #20
 8013556:	051b      	lsls	r3, r3, #20
 8013558:	b12b      	cbz	r3, 8013566 <_dtoa_r+0x7de>
 801355a:	9b08      	ldr	r3, [sp, #32]
 801355c:	3301      	adds	r3, #1
 801355e:	9308      	str	r3, [sp, #32]
 8013560:	f108 0801 	add.w	r8, r8, #1
 8013564:	2301      	movs	r3, #1
 8013566:	930a      	str	r3, [sp, #40]	@ 0x28
 8013568:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801356a:	2b00      	cmp	r3, #0
 801356c:	f000 81b0 	beq.w	80138d0 <_dtoa_r+0xb48>
 8013570:	6923      	ldr	r3, [r4, #16]
 8013572:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013576:	6918      	ldr	r0, [r3, #16]
 8013578:	f000 fbbc 	bl	8013cf4 <__hi0bits>
 801357c:	f1c0 0020 	rsb	r0, r0, #32
 8013580:	9b08      	ldr	r3, [sp, #32]
 8013582:	4418      	add	r0, r3
 8013584:	f010 001f 	ands.w	r0, r0, #31
 8013588:	d077      	beq.n	801367a <_dtoa_r+0x8f2>
 801358a:	f1c0 0320 	rsb	r3, r0, #32
 801358e:	2b04      	cmp	r3, #4
 8013590:	dd6b      	ble.n	801366a <_dtoa_r+0x8e2>
 8013592:	9b08      	ldr	r3, [sp, #32]
 8013594:	f1c0 001c 	rsb	r0, r0, #28
 8013598:	4403      	add	r3, r0
 801359a:	4480      	add	r8, r0
 801359c:	4406      	add	r6, r0
 801359e:	9308      	str	r3, [sp, #32]
 80135a0:	f1b8 0f00 	cmp.w	r8, #0
 80135a4:	dd05      	ble.n	80135b2 <_dtoa_r+0x82a>
 80135a6:	4649      	mov	r1, r9
 80135a8:	4642      	mov	r2, r8
 80135aa:	4658      	mov	r0, fp
 80135ac:	f000 fd08 	bl	8013fc0 <__lshift>
 80135b0:	4681      	mov	r9, r0
 80135b2:	9b08      	ldr	r3, [sp, #32]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	dd05      	ble.n	80135c4 <_dtoa_r+0x83c>
 80135b8:	4621      	mov	r1, r4
 80135ba:	461a      	mov	r2, r3
 80135bc:	4658      	mov	r0, fp
 80135be:	f000 fcff 	bl	8013fc0 <__lshift>
 80135c2:	4604      	mov	r4, r0
 80135c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d059      	beq.n	801367e <_dtoa_r+0x8f6>
 80135ca:	4621      	mov	r1, r4
 80135cc:	4648      	mov	r0, r9
 80135ce:	f000 fd63 	bl	8014098 <__mcmp>
 80135d2:	2800      	cmp	r0, #0
 80135d4:	da53      	bge.n	801367e <_dtoa_r+0x8f6>
 80135d6:	1e7b      	subs	r3, r7, #1
 80135d8:	9304      	str	r3, [sp, #16]
 80135da:	4649      	mov	r1, r9
 80135dc:	2300      	movs	r3, #0
 80135de:	220a      	movs	r2, #10
 80135e0:	4658      	mov	r0, fp
 80135e2:	f000 faf7 	bl	8013bd4 <__multadd>
 80135e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80135e8:	4681      	mov	r9, r0
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	f000 8172 	beq.w	80138d4 <_dtoa_r+0xb4c>
 80135f0:	2300      	movs	r3, #0
 80135f2:	4629      	mov	r1, r5
 80135f4:	220a      	movs	r2, #10
 80135f6:	4658      	mov	r0, fp
 80135f8:	f000 faec 	bl	8013bd4 <__multadd>
 80135fc:	9b00      	ldr	r3, [sp, #0]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	4605      	mov	r5, r0
 8013602:	dc67      	bgt.n	80136d4 <_dtoa_r+0x94c>
 8013604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013606:	2b02      	cmp	r3, #2
 8013608:	dc41      	bgt.n	801368e <_dtoa_r+0x906>
 801360a:	e063      	b.n	80136d4 <_dtoa_r+0x94c>
 801360c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801360e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8013612:	e746      	b.n	80134a2 <_dtoa_r+0x71a>
 8013614:	9b07      	ldr	r3, [sp, #28]
 8013616:	1e5c      	subs	r4, r3, #1
 8013618:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801361a:	42a3      	cmp	r3, r4
 801361c:	bfbf      	itttt	lt
 801361e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8013620:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8013622:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8013624:	1ae3      	sublt	r3, r4, r3
 8013626:	bfb4      	ite	lt
 8013628:	18d2      	addlt	r2, r2, r3
 801362a:	1b1c      	subge	r4, r3, r4
 801362c:	9b07      	ldr	r3, [sp, #28]
 801362e:	bfbc      	itt	lt
 8013630:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8013632:	2400      	movlt	r4, #0
 8013634:	2b00      	cmp	r3, #0
 8013636:	bfb5      	itete	lt
 8013638:	eba8 0603 	sublt.w	r6, r8, r3
 801363c:	9b07      	ldrge	r3, [sp, #28]
 801363e:	2300      	movlt	r3, #0
 8013640:	4646      	movge	r6, r8
 8013642:	e730      	b.n	80134a6 <_dtoa_r+0x71e>
 8013644:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013646:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8013648:	4646      	mov	r6, r8
 801364a:	e735      	b.n	80134b8 <_dtoa_r+0x730>
 801364c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801364e:	e75c      	b.n	801350a <_dtoa_r+0x782>
 8013650:	2300      	movs	r3, #0
 8013652:	e788      	b.n	8013566 <_dtoa_r+0x7de>
 8013654:	3fe00000 	.word	0x3fe00000
 8013658:	40240000 	.word	0x40240000
 801365c:	40140000 	.word	0x40140000
 8013660:	9b02      	ldr	r3, [sp, #8]
 8013662:	e780      	b.n	8013566 <_dtoa_r+0x7de>
 8013664:	2300      	movs	r3, #0
 8013666:	930a      	str	r3, [sp, #40]	@ 0x28
 8013668:	e782      	b.n	8013570 <_dtoa_r+0x7e8>
 801366a:	d099      	beq.n	80135a0 <_dtoa_r+0x818>
 801366c:	9a08      	ldr	r2, [sp, #32]
 801366e:	331c      	adds	r3, #28
 8013670:	441a      	add	r2, r3
 8013672:	4498      	add	r8, r3
 8013674:	441e      	add	r6, r3
 8013676:	9208      	str	r2, [sp, #32]
 8013678:	e792      	b.n	80135a0 <_dtoa_r+0x818>
 801367a:	4603      	mov	r3, r0
 801367c:	e7f6      	b.n	801366c <_dtoa_r+0x8e4>
 801367e:	9b07      	ldr	r3, [sp, #28]
 8013680:	9704      	str	r7, [sp, #16]
 8013682:	2b00      	cmp	r3, #0
 8013684:	dc20      	bgt.n	80136c8 <_dtoa_r+0x940>
 8013686:	9300      	str	r3, [sp, #0]
 8013688:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801368a:	2b02      	cmp	r3, #2
 801368c:	dd1e      	ble.n	80136cc <_dtoa_r+0x944>
 801368e:	9b00      	ldr	r3, [sp, #0]
 8013690:	2b00      	cmp	r3, #0
 8013692:	f47f aec0 	bne.w	8013416 <_dtoa_r+0x68e>
 8013696:	4621      	mov	r1, r4
 8013698:	2205      	movs	r2, #5
 801369a:	4658      	mov	r0, fp
 801369c:	f000 fa9a 	bl	8013bd4 <__multadd>
 80136a0:	4601      	mov	r1, r0
 80136a2:	4604      	mov	r4, r0
 80136a4:	4648      	mov	r0, r9
 80136a6:	f000 fcf7 	bl	8014098 <__mcmp>
 80136aa:	2800      	cmp	r0, #0
 80136ac:	f77f aeb3 	ble.w	8013416 <_dtoa_r+0x68e>
 80136b0:	4656      	mov	r6, sl
 80136b2:	2331      	movs	r3, #49	@ 0x31
 80136b4:	f806 3b01 	strb.w	r3, [r6], #1
 80136b8:	9b04      	ldr	r3, [sp, #16]
 80136ba:	3301      	adds	r3, #1
 80136bc:	9304      	str	r3, [sp, #16]
 80136be:	e6ae      	b.n	801341e <_dtoa_r+0x696>
 80136c0:	9c07      	ldr	r4, [sp, #28]
 80136c2:	9704      	str	r7, [sp, #16]
 80136c4:	4625      	mov	r5, r4
 80136c6:	e7f3      	b.n	80136b0 <_dtoa_r+0x928>
 80136c8:	9b07      	ldr	r3, [sp, #28]
 80136ca:	9300      	str	r3, [sp, #0]
 80136cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	f000 8104 	beq.w	80138dc <_dtoa_r+0xb54>
 80136d4:	2e00      	cmp	r6, #0
 80136d6:	dd05      	ble.n	80136e4 <_dtoa_r+0x95c>
 80136d8:	4629      	mov	r1, r5
 80136da:	4632      	mov	r2, r6
 80136dc:	4658      	mov	r0, fp
 80136de:	f000 fc6f 	bl	8013fc0 <__lshift>
 80136e2:	4605      	mov	r5, r0
 80136e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d05a      	beq.n	80137a0 <_dtoa_r+0xa18>
 80136ea:	6869      	ldr	r1, [r5, #4]
 80136ec:	4658      	mov	r0, fp
 80136ee:	f000 fa0f 	bl	8013b10 <_Balloc>
 80136f2:	4606      	mov	r6, r0
 80136f4:	b928      	cbnz	r0, 8013702 <_dtoa_r+0x97a>
 80136f6:	4b84      	ldr	r3, [pc, #528]	@ (8013908 <_dtoa_r+0xb80>)
 80136f8:	4602      	mov	r2, r0
 80136fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80136fe:	f7ff bb5a 	b.w	8012db6 <_dtoa_r+0x2e>
 8013702:	692a      	ldr	r2, [r5, #16]
 8013704:	3202      	adds	r2, #2
 8013706:	0092      	lsls	r2, r2, #2
 8013708:	f105 010c 	add.w	r1, r5, #12
 801370c:	300c      	adds	r0, #12
 801370e:	f002 f93b 	bl	8015988 <memcpy>
 8013712:	2201      	movs	r2, #1
 8013714:	4631      	mov	r1, r6
 8013716:	4658      	mov	r0, fp
 8013718:	f000 fc52 	bl	8013fc0 <__lshift>
 801371c:	f10a 0301 	add.w	r3, sl, #1
 8013720:	9307      	str	r3, [sp, #28]
 8013722:	9b00      	ldr	r3, [sp, #0]
 8013724:	4453      	add	r3, sl
 8013726:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013728:	9b02      	ldr	r3, [sp, #8]
 801372a:	f003 0301 	and.w	r3, r3, #1
 801372e:	462f      	mov	r7, r5
 8013730:	930a      	str	r3, [sp, #40]	@ 0x28
 8013732:	4605      	mov	r5, r0
 8013734:	9b07      	ldr	r3, [sp, #28]
 8013736:	4621      	mov	r1, r4
 8013738:	3b01      	subs	r3, #1
 801373a:	4648      	mov	r0, r9
 801373c:	9300      	str	r3, [sp, #0]
 801373e:	f7ff fa99 	bl	8012c74 <quorem>
 8013742:	4639      	mov	r1, r7
 8013744:	9002      	str	r0, [sp, #8]
 8013746:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801374a:	4648      	mov	r0, r9
 801374c:	f000 fca4 	bl	8014098 <__mcmp>
 8013750:	462a      	mov	r2, r5
 8013752:	9008      	str	r0, [sp, #32]
 8013754:	4621      	mov	r1, r4
 8013756:	4658      	mov	r0, fp
 8013758:	f000 fcba 	bl	80140d0 <__mdiff>
 801375c:	68c2      	ldr	r2, [r0, #12]
 801375e:	4606      	mov	r6, r0
 8013760:	bb02      	cbnz	r2, 80137a4 <_dtoa_r+0xa1c>
 8013762:	4601      	mov	r1, r0
 8013764:	4648      	mov	r0, r9
 8013766:	f000 fc97 	bl	8014098 <__mcmp>
 801376a:	4602      	mov	r2, r0
 801376c:	4631      	mov	r1, r6
 801376e:	4658      	mov	r0, fp
 8013770:	920e      	str	r2, [sp, #56]	@ 0x38
 8013772:	f000 fa0d 	bl	8013b90 <_Bfree>
 8013776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013778:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801377a:	9e07      	ldr	r6, [sp, #28]
 801377c:	ea43 0102 	orr.w	r1, r3, r2
 8013780:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013782:	4319      	orrs	r1, r3
 8013784:	d110      	bne.n	80137a8 <_dtoa_r+0xa20>
 8013786:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801378a:	d029      	beq.n	80137e0 <_dtoa_r+0xa58>
 801378c:	9b08      	ldr	r3, [sp, #32]
 801378e:	2b00      	cmp	r3, #0
 8013790:	dd02      	ble.n	8013798 <_dtoa_r+0xa10>
 8013792:	9b02      	ldr	r3, [sp, #8]
 8013794:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8013798:	9b00      	ldr	r3, [sp, #0]
 801379a:	f883 8000 	strb.w	r8, [r3]
 801379e:	e63f      	b.n	8013420 <_dtoa_r+0x698>
 80137a0:	4628      	mov	r0, r5
 80137a2:	e7bb      	b.n	801371c <_dtoa_r+0x994>
 80137a4:	2201      	movs	r2, #1
 80137a6:	e7e1      	b.n	801376c <_dtoa_r+0x9e4>
 80137a8:	9b08      	ldr	r3, [sp, #32]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	db04      	blt.n	80137b8 <_dtoa_r+0xa30>
 80137ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80137b0:	430b      	orrs	r3, r1
 80137b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80137b4:	430b      	orrs	r3, r1
 80137b6:	d120      	bne.n	80137fa <_dtoa_r+0xa72>
 80137b8:	2a00      	cmp	r2, #0
 80137ba:	dded      	ble.n	8013798 <_dtoa_r+0xa10>
 80137bc:	4649      	mov	r1, r9
 80137be:	2201      	movs	r2, #1
 80137c0:	4658      	mov	r0, fp
 80137c2:	f000 fbfd 	bl	8013fc0 <__lshift>
 80137c6:	4621      	mov	r1, r4
 80137c8:	4681      	mov	r9, r0
 80137ca:	f000 fc65 	bl	8014098 <__mcmp>
 80137ce:	2800      	cmp	r0, #0
 80137d0:	dc03      	bgt.n	80137da <_dtoa_r+0xa52>
 80137d2:	d1e1      	bne.n	8013798 <_dtoa_r+0xa10>
 80137d4:	f018 0f01 	tst.w	r8, #1
 80137d8:	d0de      	beq.n	8013798 <_dtoa_r+0xa10>
 80137da:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80137de:	d1d8      	bne.n	8013792 <_dtoa_r+0xa0a>
 80137e0:	9a00      	ldr	r2, [sp, #0]
 80137e2:	2339      	movs	r3, #57	@ 0x39
 80137e4:	7013      	strb	r3, [r2, #0]
 80137e6:	4633      	mov	r3, r6
 80137e8:	461e      	mov	r6, r3
 80137ea:	3b01      	subs	r3, #1
 80137ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80137f0:	2a39      	cmp	r2, #57	@ 0x39
 80137f2:	d052      	beq.n	801389a <_dtoa_r+0xb12>
 80137f4:	3201      	adds	r2, #1
 80137f6:	701a      	strb	r2, [r3, #0]
 80137f8:	e612      	b.n	8013420 <_dtoa_r+0x698>
 80137fa:	2a00      	cmp	r2, #0
 80137fc:	dd07      	ble.n	801380e <_dtoa_r+0xa86>
 80137fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8013802:	d0ed      	beq.n	80137e0 <_dtoa_r+0xa58>
 8013804:	9a00      	ldr	r2, [sp, #0]
 8013806:	f108 0301 	add.w	r3, r8, #1
 801380a:	7013      	strb	r3, [r2, #0]
 801380c:	e608      	b.n	8013420 <_dtoa_r+0x698>
 801380e:	9b07      	ldr	r3, [sp, #28]
 8013810:	9a07      	ldr	r2, [sp, #28]
 8013812:	f803 8c01 	strb.w	r8, [r3, #-1]
 8013816:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013818:	4293      	cmp	r3, r2
 801381a:	d028      	beq.n	801386e <_dtoa_r+0xae6>
 801381c:	4649      	mov	r1, r9
 801381e:	2300      	movs	r3, #0
 8013820:	220a      	movs	r2, #10
 8013822:	4658      	mov	r0, fp
 8013824:	f000 f9d6 	bl	8013bd4 <__multadd>
 8013828:	42af      	cmp	r7, r5
 801382a:	4681      	mov	r9, r0
 801382c:	f04f 0300 	mov.w	r3, #0
 8013830:	f04f 020a 	mov.w	r2, #10
 8013834:	4639      	mov	r1, r7
 8013836:	4658      	mov	r0, fp
 8013838:	d107      	bne.n	801384a <_dtoa_r+0xac2>
 801383a:	f000 f9cb 	bl	8013bd4 <__multadd>
 801383e:	4607      	mov	r7, r0
 8013840:	4605      	mov	r5, r0
 8013842:	9b07      	ldr	r3, [sp, #28]
 8013844:	3301      	adds	r3, #1
 8013846:	9307      	str	r3, [sp, #28]
 8013848:	e774      	b.n	8013734 <_dtoa_r+0x9ac>
 801384a:	f000 f9c3 	bl	8013bd4 <__multadd>
 801384e:	4629      	mov	r1, r5
 8013850:	4607      	mov	r7, r0
 8013852:	2300      	movs	r3, #0
 8013854:	220a      	movs	r2, #10
 8013856:	4658      	mov	r0, fp
 8013858:	f000 f9bc 	bl	8013bd4 <__multadd>
 801385c:	4605      	mov	r5, r0
 801385e:	e7f0      	b.n	8013842 <_dtoa_r+0xaba>
 8013860:	9b00      	ldr	r3, [sp, #0]
 8013862:	2b00      	cmp	r3, #0
 8013864:	bfcc      	ite	gt
 8013866:	461e      	movgt	r6, r3
 8013868:	2601      	movle	r6, #1
 801386a:	4456      	add	r6, sl
 801386c:	2700      	movs	r7, #0
 801386e:	4649      	mov	r1, r9
 8013870:	2201      	movs	r2, #1
 8013872:	4658      	mov	r0, fp
 8013874:	f000 fba4 	bl	8013fc0 <__lshift>
 8013878:	4621      	mov	r1, r4
 801387a:	4681      	mov	r9, r0
 801387c:	f000 fc0c 	bl	8014098 <__mcmp>
 8013880:	2800      	cmp	r0, #0
 8013882:	dcb0      	bgt.n	80137e6 <_dtoa_r+0xa5e>
 8013884:	d102      	bne.n	801388c <_dtoa_r+0xb04>
 8013886:	f018 0f01 	tst.w	r8, #1
 801388a:	d1ac      	bne.n	80137e6 <_dtoa_r+0xa5e>
 801388c:	4633      	mov	r3, r6
 801388e:	461e      	mov	r6, r3
 8013890:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013894:	2a30      	cmp	r2, #48	@ 0x30
 8013896:	d0fa      	beq.n	801388e <_dtoa_r+0xb06>
 8013898:	e5c2      	b.n	8013420 <_dtoa_r+0x698>
 801389a:	459a      	cmp	sl, r3
 801389c:	d1a4      	bne.n	80137e8 <_dtoa_r+0xa60>
 801389e:	9b04      	ldr	r3, [sp, #16]
 80138a0:	3301      	adds	r3, #1
 80138a2:	9304      	str	r3, [sp, #16]
 80138a4:	2331      	movs	r3, #49	@ 0x31
 80138a6:	f88a 3000 	strb.w	r3, [sl]
 80138aa:	e5b9      	b.n	8013420 <_dtoa_r+0x698>
 80138ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80138ae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801390c <_dtoa_r+0xb84>
 80138b2:	b11b      	cbz	r3, 80138bc <_dtoa_r+0xb34>
 80138b4:	f10a 0308 	add.w	r3, sl, #8
 80138b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80138ba:	6013      	str	r3, [r2, #0]
 80138bc:	4650      	mov	r0, sl
 80138be:	b019      	add	sp, #100	@ 0x64
 80138c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80138c6:	2b01      	cmp	r3, #1
 80138c8:	f77f ae37 	ble.w	801353a <_dtoa_r+0x7b2>
 80138cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80138ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80138d0:	2001      	movs	r0, #1
 80138d2:	e655      	b.n	8013580 <_dtoa_r+0x7f8>
 80138d4:	9b00      	ldr	r3, [sp, #0]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	f77f aed6 	ble.w	8013688 <_dtoa_r+0x900>
 80138dc:	4656      	mov	r6, sl
 80138de:	4621      	mov	r1, r4
 80138e0:	4648      	mov	r0, r9
 80138e2:	f7ff f9c7 	bl	8012c74 <quorem>
 80138e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80138ea:	f806 8b01 	strb.w	r8, [r6], #1
 80138ee:	9b00      	ldr	r3, [sp, #0]
 80138f0:	eba6 020a 	sub.w	r2, r6, sl
 80138f4:	4293      	cmp	r3, r2
 80138f6:	ddb3      	ble.n	8013860 <_dtoa_r+0xad8>
 80138f8:	4649      	mov	r1, r9
 80138fa:	2300      	movs	r3, #0
 80138fc:	220a      	movs	r2, #10
 80138fe:	4658      	mov	r0, fp
 8013900:	f000 f968 	bl	8013bd4 <__multadd>
 8013904:	4681      	mov	r9, r0
 8013906:	e7ea      	b.n	80138de <_dtoa_r+0xb56>
 8013908:	08023f7d 	.word	0x08023f7d
 801390c:	08023f01 	.word	0x08023f01

08013910 <_free_r>:
 8013910:	b538      	push	{r3, r4, r5, lr}
 8013912:	4605      	mov	r5, r0
 8013914:	2900      	cmp	r1, #0
 8013916:	d041      	beq.n	801399c <_free_r+0x8c>
 8013918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801391c:	1f0c      	subs	r4, r1, #4
 801391e:	2b00      	cmp	r3, #0
 8013920:	bfb8      	it	lt
 8013922:	18e4      	addlt	r4, r4, r3
 8013924:	f000 f8e8 	bl	8013af8 <__malloc_lock>
 8013928:	4a1d      	ldr	r2, [pc, #116]	@ (80139a0 <_free_r+0x90>)
 801392a:	6813      	ldr	r3, [r2, #0]
 801392c:	b933      	cbnz	r3, 801393c <_free_r+0x2c>
 801392e:	6063      	str	r3, [r4, #4]
 8013930:	6014      	str	r4, [r2, #0]
 8013932:	4628      	mov	r0, r5
 8013934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013938:	f000 b8e4 	b.w	8013b04 <__malloc_unlock>
 801393c:	42a3      	cmp	r3, r4
 801393e:	d908      	bls.n	8013952 <_free_r+0x42>
 8013940:	6820      	ldr	r0, [r4, #0]
 8013942:	1821      	adds	r1, r4, r0
 8013944:	428b      	cmp	r3, r1
 8013946:	bf01      	itttt	eq
 8013948:	6819      	ldreq	r1, [r3, #0]
 801394a:	685b      	ldreq	r3, [r3, #4]
 801394c:	1809      	addeq	r1, r1, r0
 801394e:	6021      	streq	r1, [r4, #0]
 8013950:	e7ed      	b.n	801392e <_free_r+0x1e>
 8013952:	461a      	mov	r2, r3
 8013954:	685b      	ldr	r3, [r3, #4]
 8013956:	b10b      	cbz	r3, 801395c <_free_r+0x4c>
 8013958:	42a3      	cmp	r3, r4
 801395a:	d9fa      	bls.n	8013952 <_free_r+0x42>
 801395c:	6811      	ldr	r1, [r2, #0]
 801395e:	1850      	adds	r0, r2, r1
 8013960:	42a0      	cmp	r0, r4
 8013962:	d10b      	bne.n	801397c <_free_r+0x6c>
 8013964:	6820      	ldr	r0, [r4, #0]
 8013966:	4401      	add	r1, r0
 8013968:	1850      	adds	r0, r2, r1
 801396a:	4283      	cmp	r3, r0
 801396c:	6011      	str	r1, [r2, #0]
 801396e:	d1e0      	bne.n	8013932 <_free_r+0x22>
 8013970:	6818      	ldr	r0, [r3, #0]
 8013972:	685b      	ldr	r3, [r3, #4]
 8013974:	6053      	str	r3, [r2, #4]
 8013976:	4408      	add	r0, r1
 8013978:	6010      	str	r0, [r2, #0]
 801397a:	e7da      	b.n	8013932 <_free_r+0x22>
 801397c:	d902      	bls.n	8013984 <_free_r+0x74>
 801397e:	230c      	movs	r3, #12
 8013980:	602b      	str	r3, [r5, #0]
 8013982:	e7d6      	b.n	8013932 <_free_r+0x22>
 8013984:	6820      	ldr	r0, [r4, #0]
 8013986:	1821      	adds	r1, r4, r0
 8013988:	428b      	cmp	r3, r1
 801398a:	bf04      	itt	eq
 801398c:	6819      	ldreq	r1, [r3, #0]
 801398e:	685b      	ldreq	r3, [r3, #4]
 8013990:	6063      	str	r3, [r4, #4]
 8013992:	bf04      	itt	eq
 8013994:	1809      	addeq	r1, r1, r0
 8013996:	6021      	streq	r1, [r4, #0]
 8013998:	6054      	str	r4, [r2, #4]
 801399a:	e7ca      	b.n	8013932 <_free_r+0x22>
 801399c:	bd38      	pop	{r3, r4, r5, pc}
 801399e:	bf00      	nop
 80139a0:	20003ea8 	.word	0x20003ea8

080139a4 <malloc>:
 80139a4:	4b02      	ldr	r3, [pc, #8]	@ (80139b0 <malloc+0xc>)
 80139a6:	4601      	mov	r1, r0
 80139a8:	6818      	ldr	r0, [r3, #0]
 80139aa:	f000 b825 	b.w	80139f8 <_malloc_r>
 80139ae:	bf00      	nop
 80139b0:	200001d8 	.word	0x200001d8

080139b4 <sbrk_aligned>:
 80139b4:	b570      	push	{r4, r5, r6, lr}
 80139b6:	4e0f      	ldr	r6, [pc, #60]	@ (80139f4 <sbrk_aligned+0x40>)
 80139b8:	460c      	mov	r4, r1
 80139ba:	6831      	ldr	r1, [r6, #0]
 80139bc:	4605      	mov	r5, r0
 80139be:	b911      	cbnz	r1, 80139c6 <sbrk_aligned+0x12>
 80139c0:	f001 ffd2 	bl	8015968 <_sbrk_r>
 80139c4:	6030      	str	r0, [r6, #0]
 80139c6:	4621      	mov	r1, r4
 80139c8:	4628      	mov	r0, r5
 80139ca:	f001 ffcd 	bl	8015968 <_sbrk_r>
 80139ce:	1c43      	adds	r3, r0, #1
 80139d0:	d103      	bne.n	80139da <sbrk_aligned+0x26>
 80139d2:	f04f 34ff 	mov.w	r4, #4294967295
 80139d6:	4620      	mov	r0, r4
 80139d8:	bd70      	pop	{r4, r5, r6, pc}
 80139da:	1cc4      	adds	r4, r0, #3
 80139dc:	f024 0403 	bic.w	r4, r4, #3
 80139e0:	42a0      	cmp	r0, r4
 80139e2:	d0f8      	beq.n	80139d6 <sbrk_aligned+0x22>
 80139e4:	1a21      	subs	r1, r4, r0
 80139e6:	4628      	mov	r0, r5
 80139e8:	f001 ffbe 	bl	8015968 <_sbrk_r>
 80139ec:	3001      	adds	r0, #1
 80139ee:	d1f2      	bne.n	80139d6 <sbrk_aligned+0x22>
 80139f0:	e7ef      	b.n	80139d2 <sbrk_aligned+0x1e>
 80139f2:	bf00      	nop
 80139f4:	20003ea4 	.word	0x20003ea4

080139f8 <_malloc_r>:
 80139f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80139fc:	1ccd      	adds	r5, r1, #3
 80139fe:	f025 0503 	bic.w	r5, r5, #3
 8013a02:	3508      	adds	r5, #8
 8013a04:	2d0c      	cmp	r5, #12
 8013a06:	bf38      	it	cc
 8013a08:	250c      	movcc	r5, #12
 8013a0a:	2d00      	cmp	r5, #0
 8013a0c:	4606      	mov	r6, r0
 8013a0e:	db01      	blt.n	8013a14 <_malloc_r+0x1c>
 8013a10:	42a9      	cmp	r1, r5
 8013a12:	d904      	bls.n	8013a1e <_malloc_r+0x26>
 8013a14:	230c      	movs	r3, #12
 8013a16:	6033      	str	r3, [r6, #0]
 8013a18:	2000      	movs	r0, #0
 8013a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013af4 <_malloc_r+0xfc>
 8013a22:	f000 f869 	bl	8013af8 <__malloc_lock>
 8013a26:	f8d8 3000 	ldr.w	r3, [r8]
 8013a2a:	461c      	mov	r4, r3
 8013a2c:	bb44      	cbnz	r4, 8013a80 <_malloc_r+0x88>
 8013a2e:	4629      	mov	r1, r5
 8013a30:	4630      	mov	r0, r6
 8013a32:	f7ff ffbf 	bl	80139b4 <sbrk_aligned>
 8013a36:	1c43      	adds	r3, r0, #1
 8013a38:	4604      	mov	r4, r0
 8013a3a:	d158      	bne.n	8013aee <_malloc_r+0xf6>
 8013a3c:	f8d8 4000 	ldr.w	r4, [r8]
 8013a40:	4627      	mov	r7, r4
 8013a42:	2f00      	cmp	r7, #0
 8013a44:	d143      	bne.n	8013ace <_malloc_r+0xd6>
 8013a46:	2c00      	cmp	r4, #0
 8013a48:	d04b      	beq.n	8013ae2 <_malloc_r+0xea>
 8013a4a:	6823      	ldr	r3, [r4, #0]
 8013a4c:	4639      	mov	r1, r7
 8013a4e:	4630      	mov	r0, r6
 8013a50:	eb04 0903 	add.w	r9, r4, r3
 8013a54:	f001 ff88 	bl	8015968 <_sbrk_r>
 8013a58:	4581      	cmp	r9, r0
 8013a5a:	d142      	bne.n	8013ae2 <_malloc_r+0xea>
 8013a5c:	6821      	ldr	r1, [r4, #0]
 8013a5e:	1a6d      	subs	r5, r5, r1
 8013a60:	4629      	mov	r1, r5
 8013a62:	4630      	mov	r0, r6
 8013a64:	f7ff ffa6 	bl	80139b4 <sbrk_aligned>
 8013a68:	3001      	adds	r0, #1
 8013a6a:	d03a      	beq.n	8013ae2 <_malloc_r+0xea>
 8013a6c:	6823      	ldr	r3, [r4, #0]
 8013a6e:	442b      	add	r3, r5
 8013a70:	6023      	str	r3, [r4, #0]
 8013a72:	f8d8 3000 	ldr.w	r3, [r8]
 8013a76:	685a      	ldr	r2, [r3, #4]
 8013a78:	bb62      	cbnz	r2, 8013ad4 <_malloc_r+0xdc>
 8013a7a:	f8c8 7000 	str.w	r7, [r8]
 8013a7e:	e00f      	b.n	8013aa0 <_malloc_r+0xa8>
 8013a80:	6822      	ldr	r2, [r4, #0]
 8013a82:	1b52      	subs	r2, r2, r5
 8013a84:	d420      	bmi.n	8013ac8 <_malloc_r+0xd0>
 8013a86:	2a0b      	cmp	r2, #11
 8013a88:	d917      	bls.n	8013aba <_malloc_r+0xc2>
 8013a8a:	1961      	adds	r1, r4, r5
 8013a8c:	42a3      	cmp	r3, r4
 8013a8e:	6025      	str	r5, [r4, #0]
 8013a90:	bf18      	it	ne
 8013a92:	6059      	strne	r1, [r3, #4]
 8013a94:	6863      	ldr	r3, [r4, #4]
 8013a96:	bf08      	it	eq
 8013a98:	f8c8 1000 	streq.w	r1, [r8]
 8013a9c:	5162      	str	r2, [r4, r5]
 8013a9e:	604b      	str	r3, [r1, #4]
 8013aa0:	4630      	mov	r0, r6
 8013aa2:	f000 f82f 	bl	8013b04 <__malloc_unlock>
 8013aa6:	f104 000b 	add.w	r0, r4, #11
 8013aaa:	1d23      	adds	r3, r4, #4
 8013aac:	f020 0007 	bic.w	r0, r0, #7
 8013ab0:	1ac2      	subs	r2, r0, r3
 8013ab2:	bf1c      	itt	ne
 8013ab4:	1a1b      	subne	r3, r3, r0
 8013ab6:	50a3      	strne	r3, [r4, r2]
 8013ab8:	e7af      	b.n	8013a1a <_malloc_r+0x22>
 8013aba:	6862      	ldr	r2, [r4, #4]
 8013abc:	42a3      	cmp	r3, r4
 8013abe:	bf0c      	ite	eq
 8013ac0:	f8c8 2000 	streq.w	r2, [r8]
 8013ac4:	605a      	strne	r2, [r3, #4]
 8013ac6:	e7eb      	b.n	8013aa0 <_malloc_r+0xa8>
 8013ac8:	4623      	mov	r3, r4
 8013aca:	6864      	ldr	r4, [r4, #4]
 8013acc:	e7ae      	b.n	8013a2c <_malloc_r+0x34>
 8013ace:	463c      	mov	r4, r7
 8013ad0:	687f      	ldr	r7, [r7, #4]
 8013ad2:	e7b6      	b.n	8013a42 <_malloc_r+0x4a>
 8013ad4:	461a      	mov	r2, r3
 8013ad6:	685b      	ldr	r3, [r3, #4]
 8013ad8:	42a3      	cmp	r3, r4
 8013ada:	d1fb      	bne.n	8013ad4 <_malloc_r+0xdc>
 8013adc:	2300      	movs	r3, #0
 8013ade:	6053      	str	r3, [r2, #4]
 8013ae0:	e7de      	b.n	8013aa0 <_malloc_r+0xa8>
 8013ae2:	230c      	movs	r3, #12
 8013ae4:	6033      	str	r3, [r6, #0]
 8013ae6:	4630      	mov	r0, r6
 8013ae8:	f000 f80c 	bl	8013b04 <__malloc_unlock>
 8013aec:	e794      	b.n	8013a18 <_malloc_r+0x20>
 8013aee:	6005      	str	r5, [r0, #0]
 8013af0:	e7d6      	b.n	8013aa0 <_malloc_r+0xa8>
 8013af2:	bf00      	nop
 8013af4:	20003ea8 	.word	0x20003ea8

08013af8 <__malloc_lock>:
 8013af8:	4801      	ldr	r0, [pc, #4]	@ (8013b00 <__malloc_lock+0x8>)
 8013afa:	f7ff b8b2 	b.w	8012c62 <__retarget_lock_acquire_recursive>
 8013afe:	bf00      	nop
 8013b00:	20003ea0 	.word	0x20003ea0

08013b04 <__malloc_unlock>:
 8013b04:	4801      	ldr	r0, [pc, #4]	@ (8013b0c <__malloc_unlock+0x8>)
 8013b06:	f7ff b8ad 	b.w	8012c64 <__retarget_lock_release_recursive>
 8013b0a:	bf00      	nop
 8013b0c:	20003ea0 	.word	0x20003ea0

08013b10 <_Balloc>:
 8013b10:	b570      	push	{r4, r5, r6, lr}
 8013b12:	69c6      	ldr	r6, [r0, #28]
 8013b14:	4604      	mov	r4, r0
 8013b16:	460d      	mov	r5, r1
 8013b18:	b976      	cbnz	r6, 8013b38 <_Balloc+0x28>
 8013b1a:	2010      	movs	r0, #16
 8013b1c:	f7ff ff42 	bl	80139a4 <malloc>
 8013b20:	4602      	mov	r2, r0
 8013b22:	61e0      	str	r0, [r4, #28]
 8013b24:	b920      	cbnz	r0, 8013b30 <_Balloc+0x20>
 8013b26:	4b18      	ldr	r3, [pc, #96]	@ (8013b88 <_Balloc+0x78>)
 8013b28:	4818      	ldr	r0, [pc, #96]	@ (8013b8c <_Balloc+0x7c>)
 8013b2a:	216b      	movs	r1, #107	@ 0x6b
 8013b2c:	f001 ff44 	bl	80159b8 <__assert_func>
 8013b30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013b34:	6006      	str	r6, [r0, #0]
 8013b36:	60c6      	str	r6, [r0, #12]
 8013b38:	69e6      	ldr	r6, [r4, #28]
 8013b3a:	68f3      	ldr	r3, [r6, #12]
 8013b3c:	b183      	cbz	r3, 8013b60 <_Balloc+0x50>
 8013b3e:	69e3      	ldr	r3, [r4, #28]
 8013b40:	68db      	ldr	r3, [r3, #12]
 8013b42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013b46:	b9b8      	cbnz	r0, 8013b78 <_Balloc+0x68>
 8013b48:	2101      	movs	r1, #1
 8013b4a:	fa01 f605 	lsl.w	r6, r1, r5
 8013b4e:	1d72      	adds	r2, r6, #5
 8013b50:	0092      	lsls	r2, r2, #2
 8013b52:	4620      	mov	r0, r4
 8013b54:	f001 ff4e 	bl	80159f4 <_calloc_r>
 8013b58:	b160      	cbz	r0, 8013b74 <_Balloc+0x64>
 8013b5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013b5e:	e00e      	b.n	8013b7e <_Balloc+0x6e>
 8013b60:	2221      	movs	r2, #33	@ 0x21
 8013b62:	2104      	movs	r1, #4
 8013b64:	4620      	mov	r0, r4
 8013b66:	f001 ff45 	bl	80159f4 <_calloc_r>
 8013b6a:	69e3      	ldr	r3, [r4, #28]
 8013b6c:	60f0      	str	r0, [r6, #12]
 8013b6e:	68db      	ldr	r3, [r3, #12]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d1e4      	bne.n	8013b3e <_Balloc+0x2e>
 8013b74:	2000      	movs	r0, #0
 8013b76:	bd70      	pop	{r4, r5, r6, pc}
 8013b78:	6802      	ldr	r2, [r0, #0]
 8013b7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013b7e:	2300      	movs	r3, #0
 8013b80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013b84:	e7f7      	b.n	8013b76 <_Balloc+0x66>
 8013b86:	bf00      	nop
 8013b88:	08023f0e 	.word	0x08023f0e
 8013b8c:	08023f8e 	.word	0x08023f8e

08013b90 <_Bfree>:
 8013b90:	b570      	push	{r4, r5, r6, lr}
 8013b92:	69c6      	ldr	r6, [r0, #28]
 8013b94:	4605      	mov	r5, r0
 8013b96:	460c      	mov	r4, r1
 8013b98:	b976      	cbnz	r6, 8013bb8 <_Bfree+0x28>
 8013b9a:	2010      	movs	r0, #16
 8013b9c:	f7ff ff02 	bl	80139a4 <malloc>
 8013ba0:	4602      	mov	r2, r0
 8013ba2:	61e8      	str	r0, [r5, #28]
 8013ba4:	b920      	cbnz	r0, 8013bb0 <_Bfree+0x20>
 8013ba6:	4b09      	ldr	r3, [pc, #36]	@ (8013bcc <_Bfree+0x3c>)
 8013ba8:	4809      	ldr	r0, [pc, #36]	@ (8013bd0 <_Bfree+0x40>)
 8013baa:	218f      	movs	r1, #143	@ 0x8f
 8013bac:	f001 ff04 	bl	80159b8 <__assert_func>
 8013bb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013bb4:	6006      	str	r6, [r0, #0]
 8013bb6:	60c6      	str	r6, [r0, #12]
 8013bb8:	b13c      	cbz	r4, 8013bca <_Bfree+0x3a>
 8013bba:	69eb      	ldr	r3, [r5, #28]
 8013bbc:	6862      	ldr	r2, [r4, #4]
 8013bbe:	68db      	ldr	r3, [r3, #12]
 8013bc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013bc4:	6021      	str	r1, [r4, #0]
 8013bc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013bca:	bd70      	pop	{r4, r5, r6, pc}
 8013bcc:	08023f0e 	.word	0x08023f0e
 8013bd0:	08023f8e 	.word	0x08023f8e

08013bd4 <__multadd>:
 8013bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bd8:	690d      	ldr	r5, [r1, #16]
 8013bda:	4607      	mov	r7, r0
 8013bdc:	460c      	mov	r4, r1
 8013bde:	461e      	mov	r6, r3
 8013be0:	f101 0c14 	add.w	ip, r1, #20
 8013be4:	2000      	movs	r0, #0
 8013be6:	f8dc 3000 	ldr.w	r3, [ip]
 8013bea:	b299      	uxth	r1, r3
 8013bec:	fb02 6101 	mla	r1, r2, r1, r6
 8013bf0:	0c1e      	lsrs	r6, r3, #16
 8013bf2:	0c0b      	lsrs	r3, r1, #16
 8013bf4:	fb02 3306 	mla	r3, r2, r6, r3
 8013bf8:	b289      	uxth	r1, r1
 8013bfa:	3001      	adds	r0, #1
 8013bfc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013c00:	4285      	cmp	r5, r0
 8013c02:	f84c 1b04 	str.w	r1, [ip], #4
 8013c06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013c0a:	dcec      	bgt.n	8013be6 <__multadd+0x12>
 8013c0c:	b30e      	cbz	r6, 8013c52 <__multadd+0x7e>
 8013c0e:	68a3      	ldr	r3, [r4, #8]
 8013c10:	42ab      	cmp	r3, r5
 8013c12:	dc19      	bgt.n	8013c48 <__multadd+0x74>
 8013c14:	6861      	ldr	r1, [r4, #4]
 8013c16:	4638      	mov	r0, r7
 8013c18:	3101      	adds	r1, #1
 8013c1a:	f7ff ff79 	bl	8013b10 <_Balloc>
 8013c1e:	4680      	mov	r8, r0
 8013c20:	b928      	cbnz	r0, 8013c2e <__multadd+0x5a>
 8013c22:	4602      	mov	r2, r0
 8013c24:	4b0c      	ldr	r3, [pc, #48]	@ (8013c58 <__multadd+0x84>)
 8013c26:	480d      	ldr	r0, [pc, #52]	@ (8013c5c <__multadd+0x88>)
 8013c28:	21ba      	movs	r1, #186	@ 0xba
 8013c2a:	f001 fec5 	bl	80159b8 <__assert_func>
 8013c2e:	6922      	ldr	r2, [r4, #16]
 8013c30:	3202      	adds	r2, #2
 8013c32:	f104 010c 	add.w	r1, r4, #12
 8013c36:	0092      	lsls	r2, r2, #2
 8013c38:	300c      	adds	r0, #12
 8013c3a:	f001 fea5 	bl	8015988 <memcpy>
 8013c3e:	4621      	mov	r1, r4
 8013c40:	4638      	mov	r0, r7
 8013c42:	f7ff ffa5 	bl	8013b90 <_Bfree>
 8013c46:	4644      	mov	r4, r8
 8013c48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013c4c:	3501      	adds	r5, #1
 8013c4e:	615e      	str	r6, [r3, #20]
 8013c50:	6125      	str	r5, [r4, #16]
 8013c52:	4620      	mov	r0, r4
 8013c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c58:	08023f7d 	.word	0x08023f7d
 8013c5c:	08023f8e 	.word	0x08023f8e

08013c60 <__s2b>:
 8013c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c64:	460c      	mov	r4, r1
 8013c66:	4615      	mov	r5, r2
 8013c68:	461f      	mov	r7, r3
 8013c6a:	2209      	movs	r2, #9
 8013c6c:	3308      	adds	r3, #8
 8013c6e:	4606      	mov	r6, r0
 8013c70:	fb93 f3f2 	sdiv	r3, r3, r2
 8013c74:	2100      	movs	r1, #0
 8013c76:	2201      	movs	r2, #1
 8013c78:	429a      	cmp	r2, r3
 8013c7a:	db09      	blt.n	8013c90 <__s2b+0x30>
 8013c7c:	4630      	mov	r0, r6
 8013c7e:	f7ff ff47 	bl	8013b10 <_Balloc>
 8013c82:	b940      	cbnz	r0, 8013c96 <__s2b+0x36>
 8013c84:	4602      	mov	r2, r0
 8013c86:	4b19      	ldr	r3, [pc, #100]	@ (8013cec <__s2b+0x8c>)
 8013c88:	4819      	ldr	r0, [pc, #100]	@ (8013cf0 <__s2b+0x90>)
 8013c8a:	21d3      	movs	r1, #211	@ 0xd3
 8013c8c:	f001 fe94 	bl	80159b8 <__assert_func>
 8013c90:	0052      	lsls	r2, r2, #1
 8013c92:	3101      	adds	r1, #1
 8013c94:	e7f0      	b.n	8013c78 <__s2b+0x18>
 8013c96:	9b08      	ldr	r3, [sp, #32]
 8013c98:	6143      	str	r3, [r0, #20]
 8013c9a:	2d09      	cmp	r5, #9
 8013c9c:	f04f 0301 	mov.w	r3, #1
 8013ca0:	6103      	str	r3, [r0, #16]
 8013ca2:	dd16      	ble.n	8013cd2 <__s2b+0x72>
 8013ca4:	f104 0909 	add.w	r9, r4, #9
 8013ca8:	46c8      	mov	r8, r9
 8013caa:	442c      	add	r4, r5
 8013cac:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013cb0:	4601      	mov	r1, r0
 8013cb2:	3b30      	subs	r3, #48	@ 0x30
 8013cb4:	220a      	movs	r2, #10
 8013cb6:	4630      	mov	r0, r6
 8013cb8:	f7ff ff8c 	bl	8013bd4 <__multadd>
 8013cbc:	45a0      	cmp	r8, r4
 8013cbe:	d1f5      	bne.n	8013cac <__s2b+0x4c>
 8013cc0:	f1a5 0408 	sub.w	r4, r5, #8
 8013cc4:	444c      	add	r4, r9
 8013cc6:	1b2d      	subs	r5, r5, r4
 8013cc8:	1963      	adds	r3, r4, r5
 8013cca:	42bb      	cmp	r3, r7
 8013ccc:	db04      	blt.n	8013cd8 <__s2b+0x78>
 8013cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cd2:	340a      	adds	r4, #10
 8013cd4:	2509      	movs	r5, #9
 8013cd6:	e7f6      	b.n	8013cc6 <__s2b+0x66>
 8013cd8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013cdc:	4601      	mov	r1, r0
 8013cde:	3b30      	subs	r3, #48	@ 0x30
 8013ce0:	220a      	movs	r2, #10
 8013ce2:	4630      	mov	r0, r6
 8013ce4:	f7ff ff76 	bl	8013bd4 <__multadd>
 8013ce8:	e7ee      	b.n	8013cc8 <__s2b+0x68>
 8013cea:	bf00      	nop
 8013cec:	08023f7d 	.word	0x08023f7d
 8013cf0:	08023f8e 	.word	0x08023f8e

08013cf4 <__hi0bits>:
 8013cf4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013cf8:	4603      	mov	r3, r0
 8013cfa:	bf36      	itet	cc
 8013cfc:	0403      	lslcc	r3, r0, #16
 8013cfe:	2000      	movcs	r0, #0
 8013d00:	2010      	movcc	r0, #16
 8013d02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013d06:	bf3c      	itt	cc
 8013d08:	021b      	lslcc	r3, r3, #8
 8013d0a:	3008      	addcc	r0, #8
 8013d0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013d10:	bf3c      	itt	cc
 8013d12:	011b      	lslcc	r3, r3, #4
 8013d14:	3004      	addcc	r0, #4
 8013d16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013d1a:	bf3c      	itt	cc
 8013d1c:	009b      	lslcc	r3, r3, #2
 8013d1e:	3002      	addcc	r0, #2
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	db05      	blt.n	8013d30 <__hi0bits+0x3c>
 8013d24:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013d28:	f100 0001 	add.w	r0, r0, #1
 8013d2c:	bf08      	it	eq
 8013d2e:	2020      	moveq	r0, #32
 8013d30:	4770      	bx	lr

08013d32 <__lo0bits>:
 8013d32:	6803      	ldr	r3, [r0, #0]
 8013d34:	4602      	mov	r2, r0
 8013d36:	f013 0007 	ands.w	r0, r3, #7
 8013d3a:	d00b      	beq.n	8013d54 <__lo0bits+0x22>
 8013d3c:	07d9      	lsls	r1, r3, #31
 8013d3e:	d421      	bmi.n	8013d84 <__lo0bits+0x52>
 8013d40:	0798      	lsls	r0, r3, #30
 8013d42:	bf49      	itett	mi
 8013d44:	085b      	lsrmi	r3, r3, #1
 8013d46:	089b      	lsrpl	r3, r3, #2
 8013d48:	2001      	movmi	r0, #1
 8013d4a:	6013      	strmi	r3, [r2, #0]
 8013d4c:	bf5c      	itt	pl
 8013d4e:	6013      	strpl	r3, [r2, #0]
 8013d50:	2002      	movpl	r0, #2
 8013d52:	4770      	bx	lr
 8013d54:	b299      	uxth	r1, r3
 8013d56:	b909      	cbnz	r1, 8013d5c <__lo0bits+0x2a>
 8013d58:	0c1b      	lsrs	r3, r3, #16
 8013d5a:	2010      	movs	r0, #16
 8013d5c:	b2d9      	uxtb	r1, r3
 8013d5e:	b909      	cbnz	r1, 8013d64 <__lo0bits+0x32>
 8013d60:	3008      	adds	r0, #8
 8013d62:	0a1b      	lsrs	r3, r3, #8
 8013d64:	0719      	lsls	r1, r3, #28
 8013d66:	bf04      	itt	eq
 8013d68:	091b      	lsreq	r3, r3, #4
 8013d6a:	3004      	addeq	r0, #4
 8013d6c:	0799      	lsls	r1, r3, #30
 8013d6e:	bf04      	itt	eq
 8013d70:	089b      	lsreq	r3, r3, #2
 8013d72:	3002      	addeq	r0, #2
 8013d74:	07d9      	lsls	r1, r3, #31
 8013d76:	d403      	bmi.n	8013d80 <__lo0bits+0x4e>
 8013d78:	085b      	lsrs	r3, r3, #1
 8013d7a:	f100 0001 	add.w	r0, r0, #1
 8013d7e:	d003      	beq.n	8013d88 <__lo0bits+0x56>
 8013d80:	6013      	str	r3, [r2, #0]
 8013d82:	4770      	bx	lr
 8013d84:	2000      	movs	r0, #0
 8013d86:	4770      	bx	lr
 8013d88:	2020      	movs	r0, #32
 8013d8a:	4770      	bx	lr

08013d8c <__i2b>:
 8013d8c:	b510      	push	{r4, lr}
 8013d8e:	460c      	mov	r4, r1
 8013d90:	2101      	movs	r1, #1
 8013d92:	f7ff febd 	bl	8013b10 <_Balloc>
 8013d96:	4602      	mov	r2, r0
 8013d98:	b928      	cbnz	r0, 8013da6 <__i2b+0x1a>
 8013d9a:	4b05      	ldr	r3, [pc, #20]	@ (8013db0 <__i2b+0x24>)
 8013d9c:	4805      	ldr	r0, [pc, #20]	@ (8013db4 <__i2b+0x28>)
 8013d9e:	f240 1145 	movw	r1, #325	@ 0x145
 8013da2:	f001 fe09 	bl	80159b8 <__assert_func>
 8013da6:	2301      	movs	r3, #1
 8013da8:	6144      	str	r4, [r0, #20]
 8013daa:	6103      	str	r3, [r0, #16]
 8013dac:	bd10      	pop	{r4, pc}
 8013dae:	bf00      	nop
 8013db0:	08023f7d 	.word	0x08023f7d
 8013db4:	08023f8e 	.word	0x08023f8e

08013db8 <__multiply>:
 8013db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dbc:	4614      	mov	r4, r2
 8013dbe:	690a      	ldr	r2, [r1, #16]
 8013dc0:	6923      	ldr	r3, [r4, #16]
 8013dc2:	429a      	cmp	r2, r3
 8013dc4:	bfa8      	it	ge
 8013dc6:	4623      	movge	r3, r4
 8013dc8:	460f      	mov	r7, r1
 8013dca:	bfa4      	itt	ge
 8013dcc:	460c      	movge	r4, r1
 8013dce:	461f      	movge	r7, r3
 8013dd0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013dd4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013dd8:	68a3      	ldr	r3, [r4, #8]
 8013dda:	6861      	ldr	r1, [r4, #4]
 8013ddc:	eb0a 0609 	add.w	r6, sl, r9
 8013de0:	42b3      	cmp	r3, r6
 8013de2:	b085      	sub	sp, #20
 8013de4:	bfb8      	it	lt
 8013de6:	3101      	addlt	r1, #1
 8013de8:	f7ff fe92 	bl	8013b10 <_Balloc>
 8013dec:	b930      	cbnz	r0, 8013dfc <__multiply+0x44>
 8013dee:	4602      	mov	r2, r0
 8013df0:	4b44      	ldr	r3, [pc, #272]	@ (8013f04 <__multiply+0x14c>)
 8013df2:	4845      	ldr	r0, [pc, #276]	@ (8013f08 <__multiply+0x150>)
 8013df4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013df8:	f001 fdde 	bl	80159b8 <__assert_func>
 8013dfc:	f100 0514 	add.w	r5, r0, #20
 8013e00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013e04:	462b      	mov	r3, r5
 8013e06:	2200      	movs	r2, #0
 8013e08:	4543      	cmp	r3, r8
 8013e0a:	d321      	bcc.n	8013e50 <__multiply+0x98>
 8013e0c:	f107 0114 	add.w	r1, r7, #20
 8013e10:	f104 0214 	add.w	r2, r4, #20
 8013e14:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013e18:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013e1c:	9302      	str	r3, [sp, #8]
 8013e1e:	1b13      	subs	r3, r2, r4
 8013e20:	3b15      	subs	r3, #21
 8013e22:	f023 0303 	bic.w	r3, r3, #3
 8013e26:	3304      	adds	r3, #4
 8013e28:	f104 0715 	add.w	r7, r4, #21
 8013e2c:	42ba      	cmp	r2, r7
 8013e2e:	bf38      	it	cc
 8013e30:	2304      	movcc	r3, #4
 8013e32:	9301      	str	r3, [sp, #4]
 8013e34:	9b02      	ldr	r3, [sp, #8]
 8013e36:	9103      	str	r1, [sp, #12]
 8013e38:	428b      	cmp	r3, r1
 8013e3a:	d80c      	bhi.n	8013e56 <__multiply+0x9e>
 8013e3c:	2e00      	cmp	r6, #0
 8013e3e:	dd03      	ble.n	8013e48 <__multiply+0x90>
 8013e40:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d05b      	beq.n	8013f00 <__multiply+0x148>
 8013e48:	6106      	str	r6, [r0, #16]
 8013e4a:	b005      	add	sp, #20
 8013e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e50:	f843 2b04 	str.w	r2, [r3], #4
 8013e54:	e7d8      	b.n	8013e08 <__multiply+0x50>
 8013e56:	f8b1 a000 	ldrh.w	sl, [r1]
 8013e5a:	f1ba 0f00 	cmp.w	sl, #0
 8013e5e:	d024      	beq.n	8013eaa <__multiply+0xf2>
 8013e60:	f104 0e14 	add.w	lr, r4, #20
 8013e64:	46a9      	mov	r9, r5
 8013e66:	f04f 0c00 	mov.w	ip, #0
 8013e6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013e6e:	f8d9 3000 	ldr.w	r3, [r9]
 8013e72:	fa1f fb87 	uxth.w	fp, r7
 8013e76:	b29b      	uxth	r3, r3
 8013e78:	fb0a 330b 	mla	r3, sl, fp, r3
 8013e7c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013e80:	f8d9 7000 	ldr.w	r7, [r9]
 8013e84:	4463      	add	r3, ip
 8013e86:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013e8a:	fb0a c70b 	mla	r7, sl, fp, ip
 8013e8e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013e92:	b29b      	uxth	r3, r3
 8013e94:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013e98:	4572      	cmp	r2, lr
 8013e9a:	f849 3b04 	str.w	r3, [r9], #4
 8013e9e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013ea2:	d8e2      	bhi.n	8013e6a <__multiply+0xb2>
 8013ea4:	9b01      	ldr	r3, [sp, #4]
 8013ea6:	f845 c003 	str.w	ip, [r5, r3]
 8013eaa:	9b03      	ldr	r3, [sp, #12]
 8013eac:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013eb0:	3104      	adds	r1, #4
 8013eb2:	f1b9 0f00 	cmp.w	r9, #0
 8013eb6:	d021      	beq.n	8013efc <__multiply+0x144>
 8013eb8:	682b      	ldr	r3, [r5, #0]
 8013eba:	f104 0c14 	add.w	ip, r4, #20
 8013ebe:	46ae      	mov	lr, r5
 8013ec0:	f04f 0a00 	mov.w	sl, #0
 8013ec4:	f8bc b000 	ldrh.w	fp, [ip]
 8013ec8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013ecc:	fb09 770b 	mla	r7, r9, fp, r7
 8013ed0:	4457      	add	r7, sl
 8013ed2:	b29b      	uxth	r3, r3
 8013ed4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013ed8:	f84e 3b04 	str.w	r3, [lr], #4
 8013edc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013ee0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013ee4:	f8be 3000 	ldrh.w	r3, [lr]
 8013ee8:	fb09 330a 	mla	r3, r9, sl, r3
 8013eec:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013ef0:	4562      	cmp	r2, ip
 8013ef2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013ef6:	d8e5      	bhi.n	8013ec4 <__multiply+0x10c>
 8013ef8:	9f01      	ldr	r7, [sp, #4]
 8013efa:	51eb      	str	r3, [r5, r7]
 8013efc:	3504      	adds	r5, #4
 8013efe:	e799      	b.n	8013e34 <__multiply+0x7c>
 8013f00:	3e01      	subs	r6, #1
 8013f02:	e79b      	b.n	8013e3c <__multiply+0x84>
 8013f04:	08023f7d 	.word	0x08023f7d
 8013f08:	08023f8e 	.word	0x08023f8e

08013f0c <__pow5mult>:
 8013f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f10:	4615      	mov	r5, r2
 8013f12:	f012 0203 	ands.w	r2, r2, #3
 8013f16:	4607      	mov	r7, r0
 8013f18:	460e      	mov	r6, r1
 8013f1a:	d007      	beq.n	8013f2c <__pow5mult+0x20>
 8013f1c:	4c25      	ldr	r4, [pc, #148]	@ (8013fb4 <__pow5mult+0xa8>)
 8013f1e:	3a01      	subs	r2, #1
 8013f20:	2300      	movs	r3, #0
 8013f22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013f26:	f7ff fe55 	bl	8013bd4 <__multadd>
 8013f2a:	4606      	mov	r6, r0
 8013f2c:	10ad      	asrs	r5, r5, #2
 8013f2e:	d03d      	beq.n	8013fac <__pow5mult+0xa0>
 8013f30:	69fc      	ldr	r4, [r7, #28]
 8013f32:	b97c      	cbnz	r4, 8013f54 <__pow5mult+0x48>
 8013f34:	2010      	movs	r0, #16
 8013f36:	f7ff fd35 	bl	80139a4 <malloc>
 8013f3a:	4602      	mov	r2, r0
 8013f3c:	61f8      	str	r0, [r7, #28]
 8013f3e:	b928      	cbnz	r0, 8013f4c <__pow5mult+0x40>
 8013f40:	4b1d      	ldr	r3, [pc, #116]	@ (8013fb8 <__pow5mult+0xac>)
 8013f42:	481e      	ldr	r0, [pc, #120]	@ (8013fbc <__pow5mult+0xb0>)
 8013f44:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013f48:	f001 fd36 	bl	80159b8 <__assert_func>
 8013f4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013f50:	6004      	str	r4, [r0, #0]
 8013f52:	60c4      	str	r4, [r0, #12]
 8013f54:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013f58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013f5c:	b94c      	cbnz	r4, 8013f72 <__pow5mult+0x66>
 8013f5e:	f240 2171 	movw	r1, #625	@ 0x271
 8013f62:	4638      	mov	r0, r7
 8013f64:	f7ff ff12 	bl	8013d8c <__i2b>
 8013f68:	2300      	movs	r3, #0
 8013f6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8013f6e:	4604      	mov	r4, r0
 8013f70:	6003      	str	r3, [r0, #0]
 8013f72:	f04f 0900 	mov.w	r9, #0
 8013f76:	07eb      	lsls	r3, r5, #31
 8013f78:	d50a      	bpl.n	8013f90 <__pow5mult+0x84>
 8013f7a:	4631      	mov	r1, r6
 8013f7c:	4622      	mov	r2, r4
 8013f7e:	4638      	mov	r0, r7
 8013f80:	f7ff ff1a 	bl	8013db8 <__multiply>
 8013f84:	4631      	mov	r1, r6
 8013f86:	4680      	mov	r8, r0
 8013f88:	4638      	mov	r0, r7
 8013f8a:	f7ff fe01 	bl	8013b90 <_Bfree>
 8013f8e:	4646      	mov	r6, r8
 8013f90:	106d      	asrs	r5, r5, #1
 8013f92:	d00b      	beq.n	8013fac <__pow5mult+0xa0>
 8013f94:	6820      	ldr	r0, [r4, #0]
 8013f96:	b938      	cbnz	r0, 8013fa8 <__pow5mult+0x9c>
 8013f98:	4622      	mov	r2, r4
 8013f9a:	4621      	mov	r1, r4
 8013f9c:	4638      	mov	r0, r7
 8013f9e:	f7ff ff0b 	bl	8013db8 <__multiply>
 8013fa2:	6020      	str	r0, [r4, #0]
 8013fa4:	f8c0 9000 	str.w	r9, [r0]
 8013fa8:	4604      	mov	r4, r0
 8013faa:	e7e4      	b.n	8013f76 <__pow5mult+0x6a>
 8013fac:	4630      	mov	r0, r6
 8013fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013fb2:	bf00      	nop
 8013fb4:	08023fe8 	.word	0x08023fe8
 8013fb8:	08023f0e 	.word	0x08023f0e
 8013fbc:	08023f8e 	.word	0x08023f8e

08013fc0 <__lshift>:
 8013fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013fc4:	460c      	mov	r4, r1
 8013fc6:	6849      	ldr	r1, [r1, #4]
 8013fc8:	6923      	ldr	r3, [r4, #16]
 8013fca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013fce:	68a3      	ldr	r3, [r4, #8]
 8013fd0:	4607      	mov	r7, r0
 8013fd2:	4691      	mov	r9, r2
 8013fd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013fd8:	f108 0601 	add.w	r6, r8, #1
 8013fdc:	42b3      	cmp	r3, r6
 8013fde:	db0b      	blt.n	8013ff8 <__lshift+0x38>
 8013fe0:	4638      	mov	r0, r7
 8013fe2:	f7ff fd95 	bl	8013b10 <_Balloc>
 8013fe6:	4605      	mov	r5, r0
 8013fe8:	b948      	cbnz	r0, 8013ffe <__lshift+0x3e>
 8013fea:	4602      	mov	r2, r0
 8013fec:	4b28      	ldr	r3, [pc, #160]	@ (8014090 <__lshift+0xd0>)
 8013fee:	4829      	ldr	r0, [pc, #164]	@ (8014094 <__lshift+0xd4>)
 8013ff0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013ff4:	f001 fce0 	bl	80159b8 <__assert_func>
 8013ff8:	3101      	adds	r1, #1
 8013ffa:	005b      	lsls	r3, r3, #1
 8013ffc:	e7ee      	b.n	8013fdc <__lshift+0x1c>
 8013ffe:	2300      	movs	r3, #0
 8014000:	f100 0114 	add.w	r1, r0, #20
 8014004:	f100 0210 	add.w	r2, r0, #16
 8014008:	4618      	mov	r0, r3
 801400a:	4553      	cmp	r3, sl
 801400c:	db33      	blt.n	8014076 <__lshift+0xb6>
 801400e:	6920      	ldr	r0, [r4, #16]
 8014010:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014014:	f104 0314 	add.w	r3, r4, #20
 8014018:	f019 091f 	ands.w	r9, r9, #31
 801401c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014020:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014024:	d02b      	beq.n	801407e <__lshift+0xbe>
 8014026:	f1c9 0e20 	rsb	lr, r9, #32
 801402a:	468a      	mov	sl, r1
 801402c:	2200      	movs	r2, #0
 801402e:	6818      	ldr	r0, [r3, #0]
 8014030:	fa00 f009 	lsl.w	r0, r0, r9
 8014034:	4310      	orrs	r0, r2
 8014036:	f84a 0b04 	str.w	r0, [sl], #4
 801403a:	f853 2b04 	ldr.w	r2, [r3], #4
 801403e:	459c      	cmp	ip, r3
 8014040:	fa22 f20e 	lsr.w	r2, r2, lr
 8014044:	d8f3      	bhi.n	801402e <__lshift+0x6e>
 8014046:	ebac 0304 	sub.w	r3, ip, r4
 801404a:	3b15      	subs	r3, #21
 801404c:	f023 0303 	bic.w	r3, r3, #3
 8014050:	3304      	adds	r3, #4
 8014052:	f104 0015 	add.w	r0, r4, #21
 8014056:	4584      	cmp	ip, r0
 8014058:	bf38      	it	cc
 801405a:	2304      	movcc	r3, #4
 801405c:	50ca      	str	r2, [r1, r3]
 801405e:	b10a      	cbz	r2, 8014064 <__lshift+0xa4>
 8014060:	f108 0602 	add.w	r6, r8, #2
 8014064:	3e01      	subs	r6, #1
 8014066:	4638      	mov	r0, r7
 8014068:	612e      	str	r6, [r5, #16]
 801406a:	4621      	mov	r1, r4
 801406c:	f7ff fd90 	bl	8013b90 <_Bfree>
 8014070:	4628      	mov	r0, r5
 8014072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014076:	f842 0f04 	str.w	r0, [r2, #4]!
 801407a:	3301      	adds	r3, #1
 801407c:	e7c5      	b.n	801400a <__lshift+0x4a>
 801407e:	3904      	subs	r1, #4
 8014080:	f853 2b04 	ldr.w	r2, [r3], #4
 8014084:	f841 2f04 	str.w	r2, [r1, #4]!
 8014088:	459c      	cmp	ip, r3
 801408a:	d8f9      	bhi.n	8014080 <__lshift+0xc0>
 801408c:	e7ea      	b.n	8014064 <__lshift+0xa4>
 801408e:	bf00      	nop
 8014090:	08023f7d 	.word	0x08023f7d
 8014094:	08023f8e 	.word	0x08023f8e

08014098 <__mcmp>:
 8014098:	690a      	ldr	r2, [r1, #16]
 801409a:	4603      	mov	r3, r0
 801409c:	6900      	ldr	r0, [r0, #16]
 801409e:	1a80      	subs	r0, r0, r2
 80140a0:	b530      	push	{r4, r5, lr}
 80140a2:	d10e      	bne.n	80140c2 <__mcmp+0x2a>
 80140a4:	3314      	adds	r3, #20
 80140a6:	3114      	adds	r1, #20
 80140a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80140ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80140b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80140b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80140b8:	4295      	cmp	r5, r2
 80140ba:	d003      	beq.n	80140c4 <__mcmp+0x2c>
 80140bc:	d205      	bcs.n	80140ca <__mcmp+0x32>
 80140be:	f04f 30ff 	mov.w	r0, #4294967295
 80140c2:	bd30      	pop	{r4, r5, pc}
 80140c4:	42a3      	cmp	r3, r4
 80140c6:	d3f3      	bcc.n	80140b0 <__mcmp+0x18>
 80140c8:	e7fb      	b.n	80140c2 <__mcmp+0x2a>
 80140ca:	2001      	movs	r0, #1
 80140cc:	e7f9      	b.n	80140c2 <__mcmp+0x2a>
	...

080140d0 <__mdiff>:
 80140d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140d4:	4689      	mov	r9, r1
 80140d6:	4606      	mov	r6, r0
 80140d8:	4611      	mov	r1, r2
 80140da:	4648      	mov	r0, r9
 80140dc:	4614      	mov	r4, r2
 80140de:	f7ff ffdb 	bl	8014098 <__mcmp>
 80140e2:	1e05      	subs	r5, r0, #0
 80140e4:	d112      	bne.n	801410c <__mdiff+0x3c>
 80140e6:	4629      	mov	r1, r5
 80140e8:	4630      	mov	r0, r6
 80140ea:	f7ff fd11 	bl	8013b10 <_Balloc>
 80140ee:	4602      	mov	r2, r0
 80140f0:	b928      	cbnz	r0, 80140fe <__mdiff+0x2e>
 80140f2:	4b3f      	ldr	r3, [pc, #252]	@ (80141f0 <__mdiff+0x120>)
 80140f4:	f240 2137 	movw	r1, #567	@ 0x237
 80140f8:	483e      	ldr	r0, [pc, #248]	@ (80141f4 <__mdiff+0x124>)
 80140fa:	f001 fc5d 	bl	80159b8 <__assert_func>
 80140fe:	2301      	movs	r3, #1
 8014100:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014104:	4610      	mov	r0, r2
 8014106:	b003      	add	sp, #12
 8014108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801410c:	bfbc      	itt	lt
 801410e:	464b      	movlt	r3, r9
 8014110:	46a1      	movlt	r9, r4
 8014112:	4630      	mov	r0, r6
 8014114:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014118:	bfba      	itte	lt
 801411a:	461c      	movlt	r4, r3
 801411c:	2501      	movlt	r5, #1
 801411e:	2500      	movge	r5, #0
 8014120:	f7ff fcf6 	bl	8013b10 <_Balloc>
 8014124:	4602      	mov	r2, r0
 8014126:	b918      	cbnz	r0, 8014130 <__mdiff+0x60>
 8014128:	4b31      	ldr	r3, [pc, #196]	@ (80141f0 <__mdiff+0x120>)
 801412a:	f240 2145 	movw	r1, #581	@ 0x245
 801412e:	e7e3      	b.n	80140f8 <__mdiff+0x28>
 8014130:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014134:	6926      	ldr	r6, [r4, #16]
 8014136:	60c5      	str	r5, [r0, #12]
 8014138:	f109 0310 	add.w	r3, r9, #16
 801413c:	f109 0514 	add.w	r5, r9, #20
 8014140:	f104 0e14 	add.w	lr, r4, #20
 8014144:	f100 0b14 	add.w	fp, r0, #20
 8014148:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801414c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014150:	9301      	str	r3, [sp, #4]
 8014152:	46d9      	mov	r9, fp
 8014154:	f04f 0c00 	mov.w	ip, #0
 8014158:	9b01      	ldr	r3, [sp, #4]
 801415a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801415e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014162:	9301      	str	r3, [sp, #4]
 8014164:	fa1f f38a 	uxth.w	r3, sl
 8014168:	4619      	mov	r1, r3
 801416a:	b283      	uxth	r3, r0
 801416c:	1acb      	subs	r3, r1, r3
 801416e:	0c00      	lsrs	r0, r0, #16
 8014170:	4463      	add	r3, ip
 8014172:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8014176:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801417a:	b29b      	uxth	r3, r3
 801417c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014180:	4576      	cmp	r6, lr
 8014182:	f849 3b04 	str.w	r3, [r9], #4
 8014186:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801418a:	d8e5      	bhi.n	8014158 <__mdiff+0x88>
 801418c:	1b33      	subs	r3, r6, r4
 801418e:	3b15      	subs	r3, #21
 8014190:	f023 0303 	bic.w	r3, r3, #3
 8014194:	3415      	adds	r4, #21
 8014196:	3304      	adds	r3, #4
 8014198:	42a6      	cmp	r6, r4
 801419a:	bf38      	it	cc
 801419c:	2304      	movcc	r3, #4
 801419e:	441d      	add	r5, r3
 80141a0:	445b      	add	r3, fp
 80141a2:	461e      	mov	r6, r3
 80141a4:	462c      	mov	r4, r5
 80141a6:	4544      	cmp	r4, r8
 80141a8:	d30e      	bcc.n	80141c8 <__mdiff+0xf8>
 80141aa:	f108 0103 	add.w	r1, r8, #3
 80141ae:	1b49      	subs	r1, r1, r5
 80141b0:	f021 0103 	bic.w	r1, r1, #3
 80141b4:	3d03      	subs	r5, #3
 80141b6:	45a8      	cmp	r8, r5
 80141b8:	bf38      	it	cc
 80141ba:	2100      	movcc	r1, #0
 80141bc:	440b      	add	r3, r1
 80141be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80141c2:	b191      	cbz	r1, 80141ea <__mdiff+0x11a>
 80141c4:	6117      	str	r7, [r2, #16]
 80141c6:	e79d      	b.n	8014104 <__mdiff+0x34>
 80141c8:	f854 1b04 	ldr.w	r1, [r4], #4
 80141cc:	46e6      	mov	lr, ip
 80141ce:	0c08      	lsrs	r0, r1, #16
 80141d0:	fa1c fc81 	uxtah	ip, ip, r1
 80141d4:	4471      	add	r1, lr
 80141d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80141da:	b289      	uxth	r1, r1
 80141dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80141e0:	f846 1b04 	str.w	r1, [r6], #4
 80141e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80141e8:	e7dd      	b.n	80141a6 <__mdiff+0xd6>
 80141ea:	3f01      	subs	r7, #1
 80141ec:	e7e7      	b.n	80141be <__mdiff+0xee>
 80141ee:	bf00      	nop
 80141f0:	08023f7d 	.word	0x08023f7d
 80141f4:	08023f8e 	.word	0x08023f8e

080141f8 <__ulp>:
 80141f8:	b082      	sub	sp, #8
 80141fa:	ed8d 0b00 	vstr	d0, [sp]
 80141fe:	9a01      	ldr	r2, [sp, #4]
 8014200:	4b0f      	ldr	r3, [pc, #60]	@ (8014240 <__ulp+0x48>)
 8014202:	4013      	ands	r3, r2
 8014204:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8014208:	2b00      	cmp	r3, #0
 801420a:	dc08      	bgt.n	801421e <__ulp+0x26>
 801420c:	425b      	negs	r3, r3
 801420e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8014212:	ea4f 5223 	mov.w	r2, r3, asr #20
 8014216:	da04      	bge.n	8014222 <__ulp+0x2a>
 8014218:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801421c:	4113      	asrs	r3, r2
 801421e:	2200      	movs	r2, #0
 8014220:	e008      	b.n	8014234 <__ulp+0x3c>
 8014222:	f1a2 0314 	sub.w	r3, r2, #20
 8014226:	2b1e      	cmp	r3, #30
 8014228:	bfda      	itte	le
 801422a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801422e:	40da      	lsrle	r2, r3
 8014230:	2201      	movgt	r2, #1
 8014232:	2300      	movs	r3, #0
 8014234:	4619      	mov	r1, r3
 8014236:	4610      	mov	r0, r2
 8014238:	ec41 0b10 	vmov	d0, r0, r1
 801423c:	b002      	add	sp, #8
 801423e:	4770      	bx	lr
 8014240:	7ff00000 	.word	0x7ff00000

08014244 <__b2d>:
 8014244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014248:	6906      	ldr	r6, [r0, #16]
 801424a:	f100 0814 	add.w	r8, r0, #20
 801424e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8014252:	1f37      	subs	r7, r6, #4
 8014254:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014258:	4610      	mov	r0, r2
 801425a:	f7ff fd4b 	bl	8013cf4 <__hi0bits>
 801425e:	f1c0 0320 	rsb	r3, r0, #32
 8014262:	280a      	cmp	r0, #10
 8014264:	600b      	str	r3, [r1, #0]
 8014266:	491b      	ldr	r1, [pc, #108]	@ (80142d4 <__b2d+0x90>)
 8014268:	dc15      	bgt.n	8014296 <__b2d+0x52>
 801426a:	f1c0 0c0b 	rsb	ip, r0, #11
 801426e:	fa22 f30c 	lsr.w	r3, r2, ip
 8014272:	45b8      	cmp	r8, r7
 8014274:	ea43 0501 	orr.w	r5, r3, r1
 8014278:	bf34      	ite	cc
 801427a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801427e:	2300      	movcs	r3, #0
 8014280:	3015      	adds	r0, #21
 8014282:	fa02 f000 	lsl.w	r0, r2, r0
 8014286:	fa23 f30c 	lsr.w	r3, r3, ip
 801428a:	4303      	orrs	r3, r0
 801428c:	461c      	mov	r4, r3
 801428e:	ec45 4b10 	vmov	d0, r4, r5
 8014292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014296:	45b8      	cmp	r8, r7
 8014298:	bf3a      	itte	cc
 801429a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801429e:	f1a6 0708 	subcc.w	r7, r6, #8
 80142a2:	2300      	movcs	r3, #0
 80142a4:	380b      	subs	r0, #11
 80142a6:	d012      	beq.n	80142ce <__b2d+0x8a>
 80142a8:	f1c0 0120 	rsb	r1, r0, #32
 80142ac:	fa23 f401 	lsr.w	r4, r3, r1
 80142b0:	4082      	lsls	r2, r0
 80142b2:	4322      	orrs	r2, r4
 80142b4:	4547      	cmp	r7, r8
 80142b6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80142ba:	bf8c      	ite	hi
 80142bc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80142c0:	2200      	movls	r2, #0
 80142c2:	4083      	lsls	r3, r0
 80142c4:	40ca      	lsrs	r2, r1
 80142c6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80142ca:	4313      	orrs	r3, r2
 80142cc:	e7de      	b.n	801428c <__b2d+0x48>
 80142ce:	ea42 0501 	orr.w	r5, r2, r1
 80142d2:	e7db      	b.n	801428c <__b2d+0x48>
 80142d4:	3ff00000 	.word	0x3ff00000

080142d8 <__d2b>:
 80142d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80142dc:	460f      	mov	r7, r1
 80142de:	2101      	movs	r1, #1
 80142e0:	ec59 8b10 	vmov	r8, r9, d0
 80142e4:	4616      	mov	r6, r2
 80142e6:	f7ff fc13 	bl	8013b10 <_Balloc>
 80142ea:	4604      	mov	r4, r0
 80142ec:	b930      	cbnz	r0, 80142fc <__d2b+0x24>
 80142ee:	4602      	mov	r2, r0
 80142f0:	4b23      	ldr	r3, [pc, #140]	@ (8014380 <__d2b+0xa8>)
 80142f2:	4824      	ldr	r0, [pc, #144]	@ (8014384 <__d2b+0xac>)
 80142f4:	f240 310f 	movw	r1, #783	@ 0x30f
 80142f8:	f001 fb5e 	bl	80159b8 <__assert_func>
 80142fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014300:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014304:	b10d      	cbz	r5, 801430a <__d2b+0x32>
 8014306:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801430a:	9301      	str	r3, [sp, #4]
 801430c:	f1b8 0300 	subs.w	r3, r8, #0
 8014310:	d023      	beq.n	801435a <__d2b+0x82>
 8014312:	4668      	mov	r0, sp
 8014314:	9300      	str	r3, [sp, #0]
 8014316:	f7ff fd0c 	bl	8013d32 <__lo0bits>
 801431a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801431e:	b1d0      	cbz	r0, 8014356 <__d2b+0x7e>
 8014320:	f1c0 0320 	rsb	r3, r0, #32
 8014324:	fa02 f303 	lsl.w	r3, r2, r3
 8014328:	430b      	orrs	r3, r1
 801432a:	40c2      	lsrs	r2, r0
 801432c:	6163      	str	r3, [r4, #20]
 801432e:	9201      	str	r2, [sp, #4]
 8014330:	9b01      	ldr	r3, [sp, #4]
 8014332:	61a3      	str	r3, [r4, #24]
 8014334:	2b00      	cmp	r3, #0
 8014336:	bf0c      	ite	eq
 8014338:	2201      	moveq	r2, #1
 801433a:	2202      	movne	r2, #2
 801433c:	6122      	str	r2, [r4, #16]
 801433e:	b1a5      	cbz	r5, 801436a <__d2b+0x92>
 8014340:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014344:	4405      	add	r5, r0
 8014346:	603d      	str	r5, [r7, #0]
 8014348:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801434c:	6030      	str	r0, [r6, #0]
 801434e:	4620      	mov	r0, r4
 8014350:	b003      	add	sp, #12
 8014352:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014356:	6161      	str	r1, [r4, #20]
 8014358:	e7ea      	b.n	8014330 <__d2b+0x58>
 801435a:	a801      	add	r0, sp, #4
 801435c:	f7ff fce9 	bl	8013d32 <__lo0bits>
 8014360:	9b01      	ldr	r3, [sp, #4]
 8014362:	6163      	str	r3, [r4, #20]
 8014364:	3020      	adds	r0, #32
 8014366:	2201      	movs	r2, #1
 8014368:	e7e8      	b.n	801433c <__d2b+0x64>
 801436a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801436e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8014372:	6038      	str	r0, [r7, #0]
 8014374:	6918      	ldr	r0, [r3, #16]
 8014376:	f7ff fcbd 	bl	8013cf4 <__hi0bits>
 801437a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801437e:	e7e5      	b.n	801434c <__d2b+0x74>
 8014380:	08023f7d 	.word	0x08023f7d
 8014384:	08023f8e 	.word	0x08023f8e

08014388 <__ratio>:
 8014388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801438c:	b085      	sub	sp, #20
 801438e:	e9cd 1000 	strd	r1, r0, [sp]
 8014392:	a902      	add	r1, sp, #8
 8014394:	f7ff ff56 	bl	8014244 <__b2d>
 8014398:	9800      	ldr	r0, [sp, #0]
 801439a:	a903      	add	r1, sp, #12
 801439c:	ec55 4b10 	vmov	r4, r5, d0
 80143a0:	f7ff ff50 	bl	8014244 <__b2d>
 80143a4:	9b01      	ldr	r3, [sp, #4]
 80143a6:	6919      	ldr	r1, [r3, #16]
 80143a8:	9b00      	ldr	r3, [sp, #0]
 80143aa:	691b      	ldr	r3, [r3, #16]
 80143ac:	1ac9      	subs	r1, r1, r3
 80143ae:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80143b2:	1a9b      	subs	r3, r3, r2
 80143b4:	ec5b ab10 	vmov	sl, fp, d0
 80143b8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80143bc:	2b00      	cmp	r3, #0
 80143be:	bfce      	itee	gt
 80143c0:	462a      	movgt	r2, r5
 80143c2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80143c6:	465a      	movle	r2, fp
 80143c8:	462f      	mov	r7, r5
 80143ca:	46d9      	mov	r9, fp
 80143cc:	bfcc      	ite	gt
 80143ce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80143d2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80143d6:	464b      	mov	r3, r9
 80143d8:	4652      	mov	r2, sl
 80143da:	4620      	mov	r0, r4
 80143dc:	4639      	mov	r1, r7
 80143de:	f7ec fa5d 	bl	800089c <__aeabi_ddiv>
 80143e2:	ec41 0b10 	vmov	d0, r0, r1
 80143e6:	b005      	add	sp, #20
 80143e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080143ec <__copybits>:
 80143ec:	3901      	subs	r1, #1
 80143ee:	b570      	push	{r4, r5, r6, lr}
 80143f0:	1149      	asrs	r1, r1, #5
 80143f2:	6914      	ldr	r4, [r2, #16]
 80143f4:	3101      	adds	r1, #1
 80143f6:	f102 0314 	add.w	r3, r2, #20
 80143fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80143fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014402:	1f05      	subs	r5, r0, #4
 8014404:	42a3      	cmp	r3, r4
 8014406:	d30c      	bcc.n	8014422 <__copybits+0x36>
 8014408:	1aa3      	subs	r3, r4, r2
 801440a:	3b11      	subs	r3, #17
 801440c:	f023 0303 	bic.w	r3, r3, #3
 8014410:	3211      	adds	r2, #17
 8014412:	42a2      	cmp	r2, r4
 8014414:	bf88      	it	hi
 8014416:	2300      	movhi	r3, #0
 8014418:	4418      	add	r0, r3
 801441a:	2300      	movs	r3, #0
 801441c:	4288      	cmp	r0, r1
 801441e:	d305      	bcc.n	801442c <__copybits+0x40>
 8014420:	bd70      	pop	{r4, r5, r6, pc}
 8014422:	f853 6b04 	ldr.w	r6, [r3], #4
 8014426:	f845 6f04 	str.w	r6, [r5, #4]!
 801442a:	e7eb      	b.n	8014404 <__copybits+0x18>
 801442c:	f840 3b04 	str.w	r3, [r0], #4
 8014430:	e7f4      	b.n	801441c <__copybits+0x30>

08014432 <__any_on>:
 8014432:	f100 0214 	add.w	r2, r0, #20
 8014436:	6900      	ldr	r0, [r0, #16]
 8014438:	114b      	asrs	r3, r1, #5
 801443a:	4298      	cmp	r0, r3
 801443c:	b510      	push	{r4, lr}
 801443e:	db11      	blt.n	8014464 <__any_on+0x32>
 8014440:	dd0a      	ble.n	8014458 <__any_on+0x26>
 8014442:	f011 011f 	ands.w	r1, r1, #31
 8014446:	d007      	beq.n	8014458 <__any_on+0x26>
 8014448:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801444c:	fa24 f001 	lsr.w	r0, r4, r1
 8014450:	fa00 f101 	lsl.w	r1, r0, r1
 8014454:	428c      	cmp	r4, r1
 8014456:	d10b      	bne.n	8014470 <__any_on+0x3e>
 8014458:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801445c:	4293      	cmp	r3, r2
 801445e:	d803      	bhi.n	8014468 <__any_on+0x36>
 8014460:	2000      	movs	r0, #0
 8014462:	bd10      	pop	{r4, pc}
 8014464:	4603      	mov	r3, r0
 8014466:	e7f7      	b.n	8014458 <__any_on+0x26>
 8014468:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801446c:	2900      	cmp	r1, #0
 801446e:	d0f5      	beq.n	801445c <__any_on+0x2a>
 8014470:	2001      	movs	r0, #1
 8014472:	e7f6      	b.n	8014462 <__any_on+0x30>

08014474 <sulp>:
 8014474:	b570      	push	{r4, r5, r6, lr}
 8014476:	4604      	mov	r4, r0
 8014478:	460d      	mov	r5, r1
 801447a:	ec45 4b10 	vmov	d0, r4, r5
 801447e:	4616      	mov	r6, r2
 8014480:	f7ff feba 	bl	80141f8 <__ulp>
 8014484:	ec51 0b10 	vmov	r0, r1, d0
 8014488:	b17e      	cbz	r6, 80144aa <sulp+0x36>
 801448a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801448e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8014492:	2b00      	cmp	r3, #0
 8014494:	dd09      	ble.n	80144aa <sulp+0x36>
 8014496:	051b      	lsls	r3, r3, #20
 8014498:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801449c:	2400      	movs	r4, #0
 801449e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80144a2:	4622      	mov	r2, r4
 80144a4:	462b      	mov	r3, r5
 80144a6:	f7ec f8cf 	bl	8000648 <__aeabi_dmul>
 80144aa:	ec41 0b10 	vmov	d0, r0, r1
 80144ae:	bd70      	pop	{r4, r5, r6, pc}

080144b0 <_strtod_l>:
 80144b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144b4:	b09f      	sub	sp, #124	@ 0x7c
 80144b6:	460c      	mov	r4, r1
 80144b8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80144ba:	2200      	movs	r2, #0
 80144bc:	921a      	str	r2, [sp, #104]	@ 0x68
 80144be:	9005      	str	r0, [sp, #20]
 80144c0:	f04f 0a00 	mov.w	sl, #0
 80144c4:	f04f 0b00 	mov.w	fp, #0
 80144c8:	460a      	mov	r2, r1
 80144ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80144cc:	7811      	ldrb	r1, [r2, #0]
 80144ce:	292b      	cmp	r1, #43	@ 0x2b
 80144d0:	d04a      	beq.n	8014568 <_strtod_l+0xb8>
 80144d2:	d838      	bhi.n	8014546 <_strtod_l+0x96>
 80144d4:	290d      	cmp	r1, #13
 80144d6:	d832      	bhi.n	801453e <_strtod_l+0x8e>
 80144d8:	2908      	cmp	r1, #8
 80144da:	d832      	bhi.n	8014542 <_strtod_l+0x92>
 80144dc:	2900      	cmp	r1, #0
 80144de:	d03b      	beq.n	8014558 <_strtod_l+0xa8>
 80144e0:	2200      	movs	r2, #0
 80144e2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80144e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80144e6:	782a      	ldrb	r2, [r5, #0]
 80144e8:	2a30      	cmp	r2, #48	@ 0x30
 80144ea:	f040 80b3 	bne.w	8014654 <_strtod_l+0x1a4>
 80144ee:	786a      	ldrb	r2, [r5, #1]
 80144f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80144f4:	2a58      	cmp	r2, #88	@ 0x58
 80144f6:	d16e      	bne.n	80145d6 <_strtod_l+0x126>
 80144f8:	9302      	str	r3, [sp, #8]
 80144fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80144fc:	9301      	str	r3, [sp, #4]
 80144fe:	ab1a      	add	r3, sp, #104	@ 0x68
 8014500:	9300      	str	r3, [sp, #0]
 8014502:	4a8e      	ldr	r2, [pc, #568]	@ (801473c <_strtod_l+0x28c>)
 8014504:	9805      	ldr	r0, [sp, #20]
 8014506:	ab1b      	add	r3, sp, #108	@ 0x6c
 8014508:	a919      	add	r1, sp, #100	@ 0x64
 801450a:	f001 faef 	bl	8015aec <__gethex>
 801450e:	f010 060f 	ands.w	r6, r0, #15
 8014512:	4604      	mov	r4, r0
 8014514:	d005      	beq.n	8014522 <_strtod_l+0x72>
 8014516:	2e06      	cmp	r6, #6
 8014518:	d128      	bne.n	801456c <_strtod_l+0xbc>
 801451a:	3501      	adds	r5, #1
 801451c:	2300      	movs	r3, #0
 801451e:	9519      	str	r5, [sp, #100]	@ 0x64
 8014520:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014522:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8014524:	2b00      	cmp	r3, #0
 8014526:	f040 858e 	bne.w	8015046 <_strtod_l+0xb96>
 801452a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801452c:	b1cb      	cbz	r3, 8014562 <_strtod_l+0xb2>
 801452e:	4652      	mov	r2, sl
 8014530:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8014534:	ec43 2b10 	vmov	d0, r2, r3
 8014538:	b01f      	add	sp, #124	@ 0x7c
 801453a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801453e:	2920      	cmp	r1, #32
 8014540:	d1ce      	bne.n	80144e0 <_strtod_l+0x30>
 8014542:	3201      	adds	r2, #1
 8014544:	e7c1      	b.n	80144ca <_strtod_l+0x1a>
 8014546:	292d      	cmp	r1, #45	@ 0x2d
 8014548:	d1ca      	bne.n	80144e0 <_strtod_l+0x30>
 801454a:	2101      	movs	r1, #1
 801454c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801454e:	1c51      	adds	r1, r2, #1
 8014550:	9119      	str	r1, [sp, #100]	@ 0x64
 8014552:	7852      	ldrb	r2, [r2, #1]
 8014554:	2a00      	cmp	r2, #0
 8014556:	d1c5      	bne.n	80144e4 <_strtod_l+0x34>
 8014558:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801455a:	9419      	str	r4, [sp, #100]	@ 0x64
 801455c:	2b00      	cmp	r3, #0
 801455e:	f040 8570 	bne.w	8015042 <_strtod_l+0xb92>
 8014562:	4652      	mov	r2, sl
 8014564:	465b      	mov	r3, fp
 8014566:	e7e5      	b.n	8014534 <_strtod_l+0x84>
 8014568:	2100      	movs	r1, #0
 801456a:	e7ef      	b.n	801454c <_strtod_l+0x9c>
 801456c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801456e:	b13a      	cbz	r2, 8014580 <_strtod_l+0xd0>
 8014570:	2135      	movs	r1, #53	@ 0x35
 8014572:	a81c      	add	r0, sp, #112	@ 0x70
 8014574:	f7ff ff3a 	bl	80143ec <__copybits>
 8014578:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801457a:	9805      	ldr	r0, [sp, #20]
 801457c:	f7ff fb08 	bl	8013b90 <_Bfree>
 8014580:	3e01      	subs	r6, #1
 8014582:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8014584:	2e04      	cmp	r6, #4
 8014586:	d806      	bhi.n	8014596 <_strtod_l+0xe6>
 8014588:	e8df f006 	tbb	[pc, r6]
 801458c:	201d0314 	.word	0x201d0314
 8014590:	14          	.byte	0x14
 8014591:	00          	.byte	0x00
 8014592:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8014596:	05e1      	lsls	r1, r4, #23
 8014598:	bf48      	it	mi
 801459a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801459e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80145a2:	0d1b      	lsrs	r3, r3, #20
 80145a4:	051b      	lsls	r3, r3, #20
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d1bb      	bne.n	8014522 <_strtod_l+0x72>
 80145aa:	f7fe fb2f 	bl	8012c0c <__errno>
 80145ae:	2322      	movs	r3, #34	@ 0x22
 80145b0:	6003      	str	r3, [r0, #0]
 80145b2:	e7b6      	b.n	8014522 <_strtod_l+0x72>
 80145b4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80145b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80145bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80145c0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80145c4:	e7e7      	b.n	8014596 <_strtod_l+0xe6>
 80145c6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8014744 <_strtod_l+0x294>
 80145ca:	e7e4      	b.n	8014596 <_strtod_l+0xe6>
 80145cc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80145d0:	f04f 3aff 	mov.w	sl, #4294967295
 80145d4:	e7df      	b.n	8014596 <_strtod_l+0xe6>
 80145d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80145d8:	1c5a      	adds	r2, r3, #1
 80145da:	9219      	str	r2, [sp, #100]	@ 0x64
 80145dc:	785b      	ldrb	r3, [r3, #1]
 80145de:	2b30      	cmp	r3, #48	@ 0x30
 80145e0:	d0f9      	beq.n	80145d6 <_strtod_l+0x126>
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d09d      	beq.n	8014522 <_strtod_l+0x72>
 80145e6:	2301      	movs	r3, #1
 80145e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80145ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80145ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80145ee:	2300      	movs	r3, #0
 80145f0:	9308      	str	r3, [sp, #32]
 80145f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80145f4:	461f      	mov	r7, r3
 80145f6:	220a      	movs	r2, #10
 80145f8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80145fa:	7805      	ldrb	r5, [r0, #0]
 80145fc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8014600:	b2d9      	uxtb	r1, r3
 8014602:	2909      	cmp	r1, #9
 8014604:	d928      	bls.n	8014658 <_strtod_l+0x1a8>
 8014606:	494e      	ldr	r1, [pc, #312]	@ (8014740 <_strtod_l+0x290>)
 8014608:	2201      	movs	r2, #1
 801460a:	f001 f979 	bl	8015900 <strncmp>
 801460e:	2800      	cmp	r0, #0
 8014610:	d032      	beq.n	8014678 <_strtod_l+0x1c8>
 8014612:	2000      	movs	r0, #0
 8014614:	462a      	mov	r2, r5
 8014616:	4681      	mov	r9, r0
 8014618:	463d      	mov	r5, r7
 801461a:	4603      	mov	r3, r0
 801461c:	2a65      	cmp	r2, #101	@ 0x65
 801461e:	d001      	beq.n	8014624 <_strtod_l+0x174>
 8014620:	2a45      	cmp	r2, #69	@ 0x45
 8014622:	d114      	bne.n	801464e <_strtod_l+0x19e>
 8014624:	b91d      	cbnz	r5, 801462e <_strtod_l+0x17e>
 8014626:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014628:	4302      	orrs	r2, r0
 801462a:	d095      	beq.n	8014558 <_strtod_l+0xa8>
 801462c:	2500      	movs	r5, #0
 801462e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8014630:	1c62      	adds	r2, r4, #1
 8014632:	9219      	str	r2, [sp, #100]	@ 0x64
 8014634:	7862      	ldrb	r2, [r4, #1]
 8014636:	2a2b      	cmp	r2, #43	@ 0x2b
 8014638:	d077      	beq.n	801472a <_strtod_l+0x27a>
 801463a:	2a2d      	cmp	r2, #45	@ 0x2d
 801463c:	d07b      	beq.n	8014736 <_strtod_l+0x286>
 801463e:	f04f 0c00 	mov.w	ip, #0
 8014642:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8014646:	2909      	cmp	r1, #9
 8014648:	f240 8082 	bls.w	8014750 <_strtod_l+0x2a0>
 801464c:	9419      	str	r4, [sp, #100]	@ 0x64
 801464e:	f04f 0800 	mov.w	r8, #0
 8014652:	e0a2      	b.n	801479a <_strtod_l+0x2ea>
 8014654:	2300      	movs	r3, #0
 8014656:	e7c7      	b.n	80145e8 <_strtod_l+0x138>
 8014658:	2f08      	cmp	r7, #8
 801465a:	bfd5      	itete	le
 801465c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801465e:	9908      	ldrgt	r1, [sp, #32]
 8014660:	fb02 3301 	mlale	r3, r2, r1, r3
 8014664:	fb02 3301 	mlagt	r3, r2, r1, r3
 8014668:	f100 0001 	add.w	r0, r0, #1
 801466c:	bfd4      	ite	le
 801466e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8014670:	9308      	strgt	r3, [sp, #32]
 8014672:	3701      	adds	r7, #1
 8014674:	9019      	str	r0, [sp, #100]	@ 0x64
 8014676:	e7bf      	b.n	80145f8 <_strtod_l+0x148>
 8014678:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801467a:	1c5a      	adds	r2, r3, #1
 801467c:	9219      	str	r2, [sp, #100]	@ 0x64
 801467e:	785a      	ldrb	r2, [r3, #1]
 8014680:	b37f      	cbz	r7, 80146e2 <_strtod_l+0x232>
 8014682:	4681      	mov	r9, r0
 8014684:	463d      	mov	r5, r7
 8014686:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801468a:	2b09      	cmp	r3, #9
 801468c:	d912      	bls.n	80146b4 <_strtod_l+0x204>
 801468e:	2301      	movs	r3, #1
 8014690:	e7c4      	b.n	801461c <_strtod_l+0x16c>
 8014692:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014694:	1c5a      	adds	r2, r3, #1
 8014696:	9219      	str	r2, [sp, #100]	@ 0x64
 8014698:	785a      	ldrb	r2, [r3, #1]
 801469a:	3001      	adds	r0, #1
 801469c:	2a30      	cmp	r2, #48	@ 0x30
 801469e:	d0f8      	beq.n	8014692 <_strtod_l+0x1e2>
 80146a0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80146a4:	2b08      	cmp	r3, #8
 80146a6:	f200 84d3 	bhi.w	8015050 <_strtod_l+0xba0>
 80146aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80146ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80146ae:	4681      	mov	r9, r0
 80146b0:	2000      	movs	r0, #0
 80146b2:	4605      	mov	r5, r0
 80146b4:	3a30      	subs	r2, #48	@ 0x30
 80146b6:	f100 0301 	add.w	r3, r0, #1
 80146ba:	d02a      	beq.n	8014712 <_strtod_l+0x262>
 80146bc:	4499      	add	r9, r3
 80146be:	eb00 0c05 	add.w	ip, r0, r5
 80146c2:	462b      	mov	r3, r5
 80146c4:	210a      	movs	r1, #10
 80146c6:	4563      	cmp	r3, ip
 80146c8:	d10d      	bne.n	80146e6 <_strtod_l+0x236>
 80146ca:	1c69      	adds	r1, r5, #1
 80146cc:	4401      	add	r1, r0
 80146ce:	4428      	add	r0, r5
 80146d0:	2808      	cmp	r0, #8
 80146d2:	dc16      	bgt.n	8014702 <_strtod_l+0x252>
 80146d4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80146d6:	230a      	movs	r3, #10
 80146d8:	fb03 2300 	mla	r3, r3, r0, r2
 80146dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80146de:	2300      	movs	r3, #0
 80146e0:	e018      	b.n	8014714 <_strtod_l+0x264>
 80146e2:	4638      	mov	r0, r7
 80146e4:	e7da      	b.n	801469c <_strtod_l+0x1ec>
 80146e6:	2b08      	cmp	r3, #8
 80146e8:	f103 0301 	add.w	r3, r3, #1
 80146ec:	dc03      	bgt.n	80146f6 <_strtod_l+0x246>
 80146ee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80146f0:	434e      	muls	r6, r1
 80146f2:	960a      	str	r6, [sp, #40]	@ 0x28
 80146f4:	e7e7      	b.n	80146c6 <_strtod_l+0x216>
 80146f6:	2b10      	cmp	r3, #16
 80146f8:	bfde      	ittt	le
 80146fa:	9e08      	ldrle	r6, [sp, #32]
 80146fc:	434e      	mulle	r6, r1
 80146fe:	9608      	strle	r6, [sp, #32]
 8014700:	e7e1      	b.n	80146c6 <_strtod_l+0x216>
 8014702:	280f      	cmp	r0, #15
 8014704:	dceb      	bgt.n	80146de <_strtod_l+0x22e>
 8014706:	9808      	ldr	r0, [sp, #32]
 8014708:	230a      	movs	r3, #10
 801470a:	fb03 2300 	mla	r3, r3, r0, r2
 801470e:	9308      	str	r3, [sp, #32]
 8014710:	e7e5      	b.n	80146de <_strtod_l+0x22e>
 8014712:	4629      	mov	r1, r5
 8014714:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8014716:	1c50      	adds	r0, r2, #1
 8014718:	9019      	str	r0, [sp, #100]	@ 0x64
 801471a:	7852      	ldrb	r2, [r2, #1]
 801471c:	4618      	mov	r0, r3
 801471e:	460d      	mov	r5, r1
 8014720:	e7b1      	b.n	8014686 <_strtod_l+0x1d6>
 8014722:	f04f 0900 	mov.w	r9, #0
 8014726:	2301      	movs	r3, #1
 8014728:	e77d      	b.n	8014626 <_strtod_l+0x176>
 801472a:	f04f 0c00 	mov.w	ip, #0
 801472e:	1ca2      	adds	r2, r4, #2
 8014730:	9219      	str	r2, [sp, #100]	@ 0x64
 8014732:	78a2      	ldrb	r2, [r4, #2]
 8014734:	e785      	b.n	8014642 <_strtod_l+0x192>
 8014736:	f04f 0c01 	mov.w	ip, #1
 801473a:	e7f8      	b.n	801472e <_strtod_l+0x27e>
 801473c:	08024100 	.word	0x08024100
 8014740:	080240e8 	.word	0x080240e8
 8014744:	7ff00000 	.word	0x7ff00000
 8014748:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801474a:	1c51      	adds	r1, r2, #1
 801474c:	9119      	str	r1, [sp, #100]	@ 0x64
 801474e:	7852      	ldrb	r2, [r2, #1]
 8014750:	2a30      	cmp	r2, #48	@ 0x30
 8014752:	d0f9      	beq.n	8014748 <_strtod_l+0x298>
 8014754:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8014758:	2908      	cmp	r1, #8
 801475a:	f63f af78 	bhi.w	801464e <_strtod_l+0x19e>
 801475e:	3a30      	subs	r2, #48	@ 0x30
 8014760:	920e      	str	r2, [sp, #56]	@ 0x38
 8014762:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8014764:	920f      	str	r2, [sp, #60]	@ 0x3c
 8014766:	f04f 080a 	mov.w	r8, #10
 801476a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801476c:	1c56      	adds	r6, r2, #1
 801476e:	9619      	str	r6, [sp, #100]	@ 0x64
 8014770:	7852      	ldrb	r2, [r2, #1]
 8014772:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8014776:	f1be 0f09 	cmp.w	lr, #9
 801477a:	d939      	bls.n	80147f0 <_strtod_l+0x340>
 801477c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801477e:	1a76      	subs	r6, r6, r1
 8014780:	2e08      	cmp	r6, #8
 8014782:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8014786:	dc03      	bgt.n	8014790 <_strtod_l+0x2e0>
 8014788:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801478a:	4588      	cmp	r8, r1
 801478c:	bfa8      	it	ge
 801478e:	4688      	movge	r8, r1
 8014790:	f1bc 0f00 	cmp.w	ip, #0
 8014794:	d001      	beq.n	801479a <_strtod_l+0x2ea>
 8014796:	f1c8 0800 	rsb	r8, r8, #0
 801479a:	2d00      	cmp	r5, #0
 801479c:	d14e      	bne.n	801483c <_strtod_l+0x38c>
 801479e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80147a0:	4308      	orrs	r0, r1
 80147a2:	f47f aebe 	bne.w	8014522 <_strtod_l+0x72>
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	f47f aed6 	bne.w	8014558 <_strtod_l+0xa8>
 80147ac:	2a69      	cmp	r2, #105	@ 0x69
 80147ae:	d028      	beq.n	8014802 <_strtod_l+0x352>
 80147b0:	dc25      	bgt.n	80147fe <_strtod_l+0x34e>
 80147b2:	2a49      	cmp	r2, #73	@ 0x49
 80147b4:	d025      	beq.n	8014802 <_strtod_l+0x352>
 80147b6:	2a4e      	cmp	r2, #78	@ 0x4e
 80147b8:	f47f aece 	bne.w	8014558 <_strtod_l+0xa8>
 80147bc:	499b      	ldr	r1, [pc, #620]	@ (8014a2c <_strtod_l+0x57c>)
 80147be:	a819      	add	r0, sp, #100	@ 0x64
 80147c0:	f001 fbb6 	bl	8015f30 <__match>
 80147c4:	2800      	cmp	r0, #0
 80147c6:	f43f aec7 	beq.w	8014558 <_strtod_l+0xa8>
 80147ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80147cc:	781b      	ldrb	r3, [r3, #0]
 80147ce:	2b28      	cmp	r3, #40	@ 0x28
 80147d0:	d12e      	bne.n	8014830 <_strtod_l+0x380>
 80147d2:	4997      	ldr	r1, [pc, #604]	@ (8014a30 <_strtod_l+0x580>)
 80147d4:	aa1c      	add	r2, sp, #112	@ 0x70
 80147d6:	a819      	add	r0, sp, #100	@ 0x64
 80147d8:	f001 fbbe 	bl	8015f58 <__hexnan>
 80147dc:	2805      	cmp	r0, #5
 80147de:	d127      	bne.n	8014830 <_strtod_l+0x380>
 80147e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80147e2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80147e6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80147ea:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80147ee:	e698      	b.n	8014522 <_strtod_l+0x72>
 80147f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80147f2:	fb08 2101 	mla	r1, r8, r1, r2
 80147f6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80147fa:	920e      	str	r2, [sp, #56]	@ 0x38
 80147fc:	e7b5      	b.n	801476a <_strtod_l+0x2ba>
 80147fe:	2a6e      	cmp	r2, #110	@ 0x6e
 8014800:	e7da      	b.n	80147b8 <_strtod_l+0x308>
 8014802:	498c      	ldr	r1, [pc, #560]	@ (8014a34 <_strtod_l+0x584>)
 8014804:	a819      	add	r0, sp, #100	@ 0x64
 8014806:	f001 fb93 	bl	8015f30 <__match>
 801480a:	2800      	cmp	r0, #0
 801480c:	f43f aea4 	beq.w	8014558 <_strtod_l+0xa8>
 8014810:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014812:	4989      	ldr	r1, [pc, #548]	@ (8014a38 <_strtod_l+0x588>)
 8014814:	3b01      	subs	r3, #1
 8014816:	a819      	add	r0, sp, #100	@ 0x64
 8014818:	9319      	str	r3, [sp, #100]	@ 0x64
 801481a:	f001 fb89 	bl	8015f30 <__match>
 801481e:	b910      	cbnz	r0, 8014826 <_strtod_l+0x376>
 8014820:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014822:	3301      	adds	r3, #1
 8014824:	9319      	str	r3, [sp, #100]	@ 0x64
 8014826:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8014a48 <_strtod_l+0x598>
 801482a:	f04f 0a00 	mov.w	sl, #0
 801482e:	e678      	b.n	8014522 <_strtod_l+0x72>
 8014830:	4882      	ldr	r0, [pc, #520]	@ (8014a3c <_strtod_l+0x58c>)
 8014832:	f001 f8b9 	bl	80159a8 <nan>
 8014836:	ec5b ab10 	vmov	sl, fp, d0
 801483a:	e672      	b.n	8014522 <_strtod_l+0x72>
 801483c:	eba8 0309 	sub.w	r3, r8, r9
 8014840:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8014842:	9309      	str	r3, [sp, #36]	@ 0x24
 8014844:	2f00      	cmp	r7, #0
 8014846:	bf08      	it	eq
 8014848:	462f      	moveq	r7, r5
 801484a:	2d10      	cmp	r5, #16
 801484c:	462c      	mov	r4, r5
 801484e:	bfa8      	it	ge
 8014850:	2410      	movge	r4, #16
 8014852:	f7eb fe7f 	bl	8000554 <__aeabi_ui2d>
 8014856:	2d09      	cmp	r5, #9
 8014858:	4682      	mov	sl, r0
 801485a:	468b      	mov	fp, r1
 801485c:	dc13      	bgt.n	8014886 <_strtod_l+0x3d6>
 801485e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014860:	2b00      	cmp	r3, #0
 8014862:	f43f ae5e 	beq.w	8014522 <_strtod_l+0x72>
 8014866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014868:	dd78      	ble.n	801495c <_strtod_l+0x4ac>
 801486a:	2b16      	cmp	r3, #22
 801486c:	dc5f      	bgt.n	801492e <_strtod_l+0x47e>
 801486e:	4974      	ldr	r1, [pc, #464]	@ (8014a40 <_strtod_l+0x590>)
 8014870:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014874:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014878:	4652      	mov	r2, sl
 801487a:	465b      	mov	r3, fp
 801487c:	f7eb fee4 	bl	8000648 <__aeabi_dmul>
 8014880:	4682      	mov	sl, r0
 8014882:	468b      	mov	fp, r1
 8014884:	e64d      	b.n	8014522 <_strtod_l+0x72>
 8014886:	4b6e      	ldr	r3, [pc, #440]	@ (8014a40 <_strtod_l+0x590>)
 8014888:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801488c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8014890:	f7eb feda 	bl	8000648 <__aeabi_dmul>
 8014894:	4682      	mov	sl, r0
 8014896:	9808      	ldr	r0, [sp, #32]
 8014898:	468b      	mov	fp, r1
 801489a:	f7eb fe5b 	bl	8000554 <__aeabi_ui2d>
 801489e:	4602      	mov	r2, r0
 80148a0:	460b      	mov	r3, r1
 80148a2:	4650      	mov	r0, sl
 80148a4:	4659      	mov	r1, fp
 80148a6:	f7eb fd19 	bl	80002dc <__adddf3>
 80148aa:	2d0f      	cmp	r5, #15
 80148ac:	4682      	mov	sl, r0
 80148ae:	468b      	mov	fp, r1
 80148b0:	ddd5      	ble.n	801485e <_strtod_l+0x3ae>
 80148b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80148b4:	1b2c      	subs	r4, r5, r4
 80148b6:	441c      	add	r4, r3
 80148b8:	2c00      	cmp	r4, #0
 80148ba:	f340 8096 	ble.w	80149ea <_strtod_l+0x53a>
 80148be:	f014 030f 	ands.w	r3, r4, #15
 80148c2:	d00a      	beq.n	80148da <_strtod_l+0x42a>
 80148c4:	495e      	ldr	r1, [pc, #376]	@ (8014a40 <_strtod_l+0x590>)
 80148c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80148ca:	4652      	mov	r2, sl
 80148cc:	465b      	mov	r3, fp
 80148ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80148d2:	f7eb feb9 	bl	8000648 <__aeabi_dmul>
 80148d6:	4682      	mov	sl, r0
 80148d8:	468b      	mov	fp, r1
 80148da:	f034 040f 	bics.w	r4, r4, #15
 80148de:	d073      	beq.n	80149c8 <_strtod_l+0x518>
 80148e0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80148e4:	dd48      	ble.n	8014978 <_strtod_l+0x4c8>
 80148e6:	2400      	movs	r4, #0
 80148e8:	46a0      	mov	r8, r4
 80148ea:	940a      	str	r4, [sp, #40]	@ 0x28
 80148ec:	46a1      	mov	r9, r4
 80148ee:	9a05      	ldr	r2, [sp, #20]
 80148f0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8014a48 <_strtod_l+0x598>
 80148f4:	2322      	movs	r3, #34	@ 0x22
 80148f6:	6013      	str	r3, [r2, #0]
 80148f8:	f04f 0a00 	mov.w	sl, #0
 80148fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80148fe:	2b00      	cmp	r3, #0
 8014900:	f43f ae0f 	beq.w	8014522 <_strtod_l+0x72>
 8014904:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8014906:	9805      	ldr	r0, [sp, #20]
 8014908:	f7ff f942 	bl	8013b90 <_Bfree>
 801490c:	9805      	ldr	r0, [sp, #20]
 801490e:	4649      	mov	r1, r9
 8014910:	f7ff f93e 	bl	8013b90 <_Bfree>
 8014914:	9805      	ldr	r0, [sp, #20]
 8014916:	4641      	mov	r1, r8
 8014918:	f7ff f93a 	bl	8013b90 <_Bfree>
 801491c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801491e:	9805      	ldr	r0, [sp, #20]
 8014920:	f7ff f936 	bl	8013b90 <_Bfree>
 8014924:	9805      	ldr	r0, [sp, #20]
 8014926:	4621      	mov	r1, r4
 8014928:	f7ff f932 	bl	8013b90 <_Bfree>
 801492c:	e5f9      	b.n	8014522 <_strtod_l+0x72>
 801492e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014930:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8014934:	4293      	cmp	r3, r2
 8014936:	dbbc      	blt.n	80148b2 <_strtod_l+0x402>
 8014938:	4c41      	ldr	r4, [pc, #260]	@ (8014a40 <_strtod_l+0x590>)
 801493a:	f1c5 050f 	rsb	r5, r5, #15
 801493e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8014942:	4652      	mov	r2, sl
 8014944:	465b      	mov	r3, fp
 8014946:	e9d1 0100 	ldrd	r0, r1, [r1]
 801494a:	f7eb fe7d 	bl	8000648 <__aeabi_dmul>
 801494e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014950:	1b5d      	subs	r5, r3, r5
 8014952:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8014956:	e9d4 2300 	ldrd	r2, r3, [r4]
 801495a:	e78f      	b.n	801487c <_strtod_l+0x3cc>
 801495c:	3316      	adds	r3, #22
 801495e:	dba8      	blt.n	80148b2 <_strtod_l+0x402>
 8014960:	4b37      	ldr	r3, [pc, #220]	@ (8014a40 <_strtod_l+0x590>)
 8014962:	eba9 0808 	sub.w	r8, r9, r8
 8014966:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801496a:	e9d8 2300 	ldrd	r2, r3, [r8]
 801496e:	4650      	mov	r0, sl
 8014970:	4659      	mov	r1, fp
 8014972:	f7eb ff93 	bl	800089c <__aeabi_ddiv>
 8014976:	e783      	b.n	8014880 <_strtod_l+0x3d0>
 8014978:	4b32      	ldr	r3, [pc, #200]	@ (8014a44 <_strtod_l+0x594>)
 801497a:	9308      	str	r3, [sp, #32]
 801497c:	2300      	movs	r3, #0
 801497e:	1124      	asrs	r4, r4, #4
 8014980:	4650      	mov	r0, sl
 8014982:	4659      	mov	r1, fp
 8014984:	461e      	mov	r6, r3
 8014986:	2c01      	cmp	r4, #1
 8014988:	dc21      	bgt.n	80149ce <_strtod_l+0x51e>
 801498a:	b10b      	cbz	r3, 8014990 <_strtod_l+0x4e0>
 801498c:	4682      	mov	sl, r0
 801498e:	468b      	mov	fp, r1
 8014990:	492c      	ldr	r1, [pc, #176]	@ (8014a44 <_strtod_l+0x594>)
 8014992:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8014996:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801499a:	4652      	mov	r2, sl
 801499c:	465b      	mov	r3, fp
 801499e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80149a2:	f7eb fe51 	bl	8000648 <__aeabi_dmul>
 80149a6:	4b28      	ldr	r3, [pc, #160]	@ (8014a48 <_strtod_l+0x598>)
 80149a8:	460a      	mov	r2, r1
 80149aa:	400b      	ands	r3, r1
 80149ac:	4927      	ldr	r1, [pc, #156]	@ (8014a4c <_strtod_l+0x59c>)
 80149ae:	428b      	cmp	r3, r1
 80149b0:	4682      	mov	sl, r0
 80149b2:	d898      	bhi.n	80148e6 <_strtod_l+0x436>
 80149b4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80149b8:	428b      	cmp	r3, r1
 80149ba:	bf86      	itte	hi
 80149bc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8014a50 <_strtod_l+0x5a0>
 80149c0:	f04f 3aff 	movhi.w	sl, #4294967295
 80149c4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80149c8:	2300      	movs	r3, #0
 80149ca:	9308      	str	r3, [sp, #32]
 80149cc:	e07a      	b.n	8014ac4 <_strtod_l+0x614>
 80149ce:	07e2      	lsls	r2, r4, #31
 80149d0:	d505      	bpl.n	80149de <_strtod_l+0x52e>
 80149d2:	9b08      	ldr	r3, [sp, #32]
 80149d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149d8:	f7eb fe36 	bl	8000648 <__aeabi_dmul>
 80149dc:	2301      	movs	r3, #1
 80149de:	9a08      	ldr	r2, [sp, #32]
 80149e0:	3208      	adds	r2, #8
 80149e2:	3601      	adds	r6, #1
 80149e4:	1064      	asrs	r4, r4, #1
 80149e6:	9208      	str	r2, [sp, #32]
 80149e8:	e7cd      	b.n	8014986 <_strtod_l+0x4d6>
 80149ea:	d0ed      	beq.n	80149c8 <_strtod_l+0x518>
 80149ec:	4264      	negs	r4, r4
 80149ee:	f014 020f 	ands.w	r2, r4, #15
 80149f2:	d00a      	beq.n	8014a0a <_strtod_l+0x55a>
 80149f4:	4b12      	ldr	r3, [pc, #72]	@ (8014a40 <_strtod_l+0x590>)
 80149f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80149fa:	4650      	mov	r0, sl
 80149fc:	4659      	mov	r1, fp
 80149fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a02:	f7eb ff4b 	bl	800089c <__aeabi_ddiv>
 8014a06:	4682      	mov	sl, r0
 8014a08:	468b      	mov	fp, r1
 8014a0a:	1124      	asrs	r4, r4, #4
 8014a0c:	d0dc      	beq.n	80149c8 <_strtod_l+0x518>
 8014a0e:	2c1f      	cmp	r4, #31
 8014a10:	dd20      	ble.n	8014a54 <_strtod_l+0x5a4>
 8014a12:	2400      	movs	r4, #0
 8014a14:	46a0      	mov	r8, r4
 8014a16:	940a      	str	r4, [sp, #40]	@ 0x28
 8014a18:	46a1      	mov	r9, r4
 8014a1a:	9a05      	ldr	r2, [sp, #20]
 8014a1c:	2322      	movs	r3, #34	@ 0x22
 8014a1e:	f04f 0a00 	mov.w	sl, #0
 8014a22:	f04f 0b00 	mov.w	fp, #0
 8014a26:	6013      	str	r3, [r2, #0]
 8014a28:	e768      	b.n	80148fc <_strtod_l+0x44c>
 8014a2a:	bf00      	nop
 8014a2c:	08023ed5 	.word	0x08023ed5
 8014a30:	080240ec 	.word	0x080240ec
 8014a34:	08023ecd 	.word	0x08023ecd
 8014a38:	08023f04 	.word	0x08023f04
 8014a3c:	08024295 	.word	0x08024295
 8014a40:	08024020 	.word	0x08024020
 8014a44:	08023ff8 	.word	0x08023ff8
 8014a48:	7ff00000 	.word	0x7ff00000
 8014a4c:	7ca00000 	.word	0x7ca00000
 8014a50:	7fefffff 	.word	0x7fefffff
 8014a54:	f014 0310 	ands.w	r3, r4, #16
 8014a58:	bf18      	it	ne
 8014a5a:	236a      	movne	r3, #106	@ 0x6a
 8014a5c:	4ea9      	ldr	r6, [pc, #676]	@ (8014d04 <_strtod_l+0x854>)
 8014a5e:	9308      	str	r3, [sp, #32]
 8014a60:	4650      	mov	r0, sl
 8014a62:	4659      	mov	r1, fp
 8014a64:	2300      	movs	r3, #0
 8014a66:	07e2      	lsls	r2, r4, #31
 8014a68:	d504      	bpl.n	8014a74 <_strtod_l+0x5c4>
 8014a6a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014a6e:	f7eb fdeb 	bl	8000648 <__aeabi_dmul>
 8014a72:	2301      	movs	r3, #1
 8014a74:	1064      	asrs	r4, r4, #1
 8014a76:	f106 0608 	add.w	r6, r6, #8
 8014a7a:	d1f4      	bne.n	8014a66 <_strtod_l+0x5b6>
 8014a7c:	b10b      	cbz	r3, 8014a82 <_strtod_l+0x5d2>
 8014a7e:	4682      	mov	sl, r0
 8014a80:	468b      	mov	fp, r1
 8014a82:	9b08      	ldr	r3, [sp, #32]
 8014a84:	b1b3      	cbz	r3, 8014ab4 <_strtod_l+0x604>
 8014a86:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8014a8a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	4659      	mov	r1, fp
 8014a92:	dd0f      	ble.n	8014ab4 <_strtod_l+0x604>
 8014a94:	2b1f      	cmp	r3, #31
 8014a96:	dd55      	ble.n	8014b44 <_strtod_l+0x694>
 8014a98:	2b34      	cmp	r3, #52	@ 0x34
 8014a9a:	bfde      	ittt	le
 8014a9c:	f04f 33ff 	movle.w	r3, #4294967295
 8014aa0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8014aa4:	4093      	lslle	r3, r2
 8014aa6:	f04f 0a00 	mov.w	sl, #0
 8014aaa:	bfcc      	ite	gt
 8014aac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8014ab0:	ea03 0b01 	andle.w	fp, r3, r1
 8014ab4:	2200      	movs	r2, #0
 8014ab6:	2300      	movs	r3, #0
 8014ab8:	4650      	mov	r0, sl
 8014aba:	4659      	mov	r1, fp
 8014abc:	f7ec f82c 	bl	8000b18 <__aeabi_dcmpeq>
 8014ac0:	2800      	cmp	r0, #0
 8014ac2:	d1a6      	bne.n	8014a12 <_strtod_l+0x562>
 8014ac4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014ac6:	9300      	str	r3, [sp, #0]
 8014ac8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014aca:	9805      	ldr	r0, [sp, #20]
 8014acc:	462b      	mov	r3, r5
 8014ace:	463a      	mov	r2, r7
 8014ad0:	f7ff f8c6 	bl	8013c60 <__s2b>
 8014ad4:	900a      	str	r0, [sp, #40]	@ 0x28
 8014ad6:	2800      	cmp	r0, #0
 8014ad8:	f43f af05 	beq.w	80148e6 <_strtod_l+0x436>
 8014adc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014ade:	2a00      	cmp	r2, #0
 8014ae0:	eba9 0308 	sub.w	r3, r9, r8
 8014ae4:	bfa8      	it	ge
 8014ae6:	2300      	movge	r3, #0
 8014ae8:	9312      	str	r3, [sp, #72]	@ 0x48
 8014aea:	2400      	movs	r4, #0
 8014aec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8014af0:	9316      	str	r3, [sp, #88]	@ 0x58
 8014af2:	46a0      	mov	r8, r4
 8014af4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014af6:	9805      	ldr	r0, [sp, #20]
 8014af8:	6859      	ldr	r1, [r3, #4]
 8014afa:	f7ff f809 	bl	8013b10 <_Balloc>
 8014afe:	4681      	mov	r9, r0
 8014b00:	2800      	cmp	r0, #0
 8014b02:	f43f aef4 	beq.w	80148ee <_strtod_l+0x43e>
 8014b06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014b08:	691a      	ldr	r2, [r3, #16]
 8014b0a:	3202      	adds	r2, #2
 8014b0c:	f103 010c 	add.w	r1, r3, #12
 8014b10:	0092      	lsls	r2, r2, #2
 8014b12:	300c      	adds	r0, #12
 8014b14:	f000 ff38 	bl	8015988 <memcpy>
 8014b18:	ec4b ab10 	vmov	d0, sl, fp
 8014b1c:	9805      	ldr	r0, [sp, #20]
 8014b1e:	aa1c      	add	r2, sp, #112	@ 0x70
 8014b20:	a91b      	add	r1, sp, #108	@ 0x6c
 8014b22:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8014b26:	f7ff fbd7 	bl	80142d8 <__d2b>
 8014b2a:	901a      	str	r0, [sp, #104]	@ 0x68
 8014b2c:	2800      	cmp	r0, #0
 8014b2e:	f43f aede 	beq.w	80148ee <_strtod_l+0x43e>
 8014b32:	9805      	ldr	r0, [sp, #20]
 8014b34:	2101      	movs	r1, #1
 8014b36:	f7ff f929 	bl	8013d8c <__i2b>
 8014b3a:	4680      	mov	r8, r0
 8014b3c:	b948      	cbnz	r0, 8014b52 <_strtod_l+0x6a2>
 8014b3e:	f04f 0800 	mov.w	r8, #0
 8014b42:	e6d4      	b.n	80148ee <_strtod_l+0x43e>
 8014b44:	f04f 32ff 	mov.w	r2, #4294967295
 8014b48:	fa02 f303 	lsl.w	r3, r2, r3
 8014b4c:	ea03 0a0a 	and.w	sl, r3, sl
 8014b50:	e7b0      	b.n	8014ab4 <_strtod_l+0x604>
 8014b52:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8014b54:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8014b56:	2d00      	cmp	r5, #0
 8014b58:	bfab      	itete	ge
 8014b5a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8014b5c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8014b5e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8014b60:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8014b62:	bfac      	ite	ge
 8014b64:	18ef      	addge	r7, r5, r3
 8014b66:	1b5e      	sublt	r6, r3, r5
 8014b68:	9b08      	ldr	r3, [sp, #32]
 8014b6a:	1aed      	subs	r5, r5, r3
 8014b6c:	4415      	add	r5, r2
 8014b6e:	4b66      	ldr	r3, [pc, #408]	@ (8014d08 <_strtod_l+0x858>)
 8014b70:	3d01      	subs	r5, #1
 8014b72:	429d      	cmp	r5, r3
 8014b74:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8014b78:	da50      	bge.n	8014c1c <_strtod_l+0x76c>
 8014b7a:	1b5b      	subs	r3, r3, r5
 8014b7c:	2b1f      	cmp	r3, #31
 8014b7e:	eba2 0203 	sub.w	r2, r2, r3
 8014b82:	f04f 0101 	mov.w	r1, #1
 8014b86:	dc3d      	bgt.n	8014c04 <_strtod_l+0x754>
 8014b88:	fa01 f303 	lsl.w	r3, r1, r3
 8014b8c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014b8e:	2300      	movs	r3, #0
 8014b90:	9310      	str	r3, [sp, #64]	@ 0x40
 8014b92:	18bd      	adds	r5, r7, r2
 8014b94:	9b08      	ldr	r3, [sp, #32]
 8014b96:	42af      	cmp	r7, r5
 8014b98:	4416      	add	r6, r2
 8014b9a:	441e      	add	r6, r3
 8014b9c:	463b      	mov	r3, r7
 8014b9e:	bfa8      	it	ge
 8014ba0:	462b      	movge	r3, r5
 8014ba2:	42b3      	cmp	r3, r6
 8014ba4:	bfa8      	it	ge
 8014ba6:	4633      	movge	r3, r6
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	bfc2      	ittt	gt
 8014bac:	1aed      	subgt	r5, r5, r3
 8014bae:	1af6      	subgt	r6, r6, r3
 8014bb0:	1aff      	subgt	r7, r7, r3
 8014bb2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	dd16      	ble.n	8014be6 <_strtod_l+0x736>
 8014bb8:	4641      	mov	r1, r8
 8014bba:	9805      	ldr	r0, [sp, #20]
 8014bbc:	461a      	mov	r2, r3
 8014bbe:	f7ff f9a5 	bl	8013f0c <__pow5mult>
 8014bc2:	4680      	mov	r8, r0
 8014bc4:	2800      	cmp	r0, #0
 8014bc6:	d0ba      	beq.n	8014b3e <_strtod_l+0x68e>
 8014bc8:	4601      	mov	r1, r0
 8014bca:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8014bcc:	9805      	ldr	r0, [sp, #20]
 8014bce:	f7ff f8f3 	bl	8013db8 <__multiply>
 8014bd2:	900e      	str	r0, [sp, #56]	@ 0x38
 8014bd4:	2800      	cmp	r0, #0
 8014bd6:	f43f ae8a 	beq.w	80148ee <_strtod_l+0x43e>
 8014bda:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8014bdc:	9805      	ldr	r0, [sp, #20]
 8014bde:	f7fe ffd7 	bl	8013b90 <_Bfree>
 8014be2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014be4:	931a      	str	r3, [sp, #104]	@ 0x68
 8014be6:	2d00      	cmp	r5, #0
 8014be8:	dc1d      	bgt.n	8014c26 <_strtod_l+0x776>
 8014bea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	dd23      	ble.n	8014c38 <_strtod_l+0x788>
 8014bf0:	4649      	mov	r1, r9
 8014bf2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8014bf4:	9805      	ldr	r0, [sp, #20]
 8014bf6:	f7ff f989 	bl	8013f0c <__pow5mult>
 8014bfa:	4681      	mov	r9, r0
 8014bfc:	b9e0      	cbnz	r0, 8014c38 <_strtod_l+0x788>
 8014bfe:	f04f 0900 	mov.w	r9, #0
 8014c02:	e674      	b.n	80148ee <_strtod_l+0x43e>
 8014c04:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8014c08:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8014c0c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8014c10:	35e2      	adds	r5, #226	@ 0xe2
 8014c12:	fa01 f305 	lsl.w	r3, r1, r5
 8014c16:	9310      	str	r3, [sp, #64]	@ 0x40
 8014c18:	9113      	str	r1, [sp, #76]	@ 0x4c
 8014c1a:	e7ba      	b.n	8014b92 <_strtod_l+0x6e2>
 8014c1c:	2300      	movs	r3, #0
 8014c1e:	9310      	str	r3, [sp, #64]	@ 0x40
 8014c20:	2301      	movs	r3, #1
 8014c22:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014c24:	e7b5      	b.n	8014b92 <_strtod_l+0x6e2>
 8014c26:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8014c28:	9805      	ldr	r0, [sp, #20]
 8014c2a:	462a      	mov	r2, r5
 8014c2c:	f7ff f9c8 	bl	8013fc0 <__lshift>
 8014c30:	901a      	str	r0, [sp, #104]	@ 0x68
 8014c32:	2800      	cmp	r0, #0
 8014c34:	d1d9      	bne.n	8014bea <_strtod_l+0x73a>
 8014c36:	e65a      	b.n	80148ee <_strtod_l+0x43e>
 8014c38:	2e00      	cmp	r6, #0
 8014c3a:	dd07      	ble.n	8014c4c <_strtod_l+0x79c>
 8014c3c:	4649      	mov	r1, r9
 8014c3e:	9805      	ldr	r0, [sp, #20]
 8014c40:	4632      	mov	r2, r6
 8014c42:	f7ff f9bd 	bl	8013fc0 <__lshift>
 8014c46:	4681      	mov	r9, r0
 8014c48:	2800      	cmp	r0, #0
 8014c4a:	d0d8      	beq.n	8014bfe <_strtod_l+0x74e>
 8014c4c:	2f00      	cmp	r7, #0
 8014c4e:	dd08      	ble.n	8014c62 <_strtod_l+0x7b2>
 8014c50:	4641      	mov	r1, r8
 8014c52:	9805      	ldr	r0, [sp, #20]
 8014c54:	463a      	mov	r2, r7
 8014c56:	f7ff f9b3 	bl	8013fc0 <__lshift>
 8014c5a:	4680      	mov	r8, r0
 8014c5c:	2800      	cmp	r0, #0
 8014c5e:	f43f ae46 	beq.w	80148ee <_strtod_l+0x43e>
 8014c62:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8014c64:	9805      	ldr	r0, [sp, #20]
 8014c66:	464a      	mov	r2, r9
 8014c68:	f7ff fa32 	bl	80140d0 <__mdiff>
 8014c6c:	4604      	mov	r4, r0
 8014c6e:	2800      	cmp	r0, #0
 8014c70:	f43f ae3d 	beq.w	80148ee <_strtod_l+0x43e>
 8014c74:	68c3      	ldr	r3, [r0, #12]
 8014c76:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014c78:	2300      	movs	r3, #0
 8014c7a:	60c3      	str	r3, [r0, #12]
 8014c7c:	4641      	mov	r1, r8
 8014c7e:	f7ff fa0b 	bl	8014098 <__mcmp>
 8014c82:	2800      	cmp	r0, #0
 8014c84:	da46      	bge.n	8014d14 <_strtod_l+0x864>
 8014c86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014c88:	ea53 030a 	orrs.w	r3, r3, sl
 8014c8c:	d16c      	bne.n	8014d68 <_strtod_l+0x8b8>
 8014c8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d168      	bne.n	8014d68 <_strtod_l+0x8b8>
 8014c96:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014c9a:	0d1b      	lsrs	r3, r3, #20
 8014c9c:	051b      	lsls	r3, r3, #20
 8014c9e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8014ca2:	d961      	bls.n	8014d68 <_strtod_l+0x8b8>
 8014ca4:	6963      	ldr	r3, [r4, #20]
 8014ca6:	b913      	cbnz	r3, 8014cae <_strtod_l+0x7fe>
 8014ca8:	6923      	ldr	r3, [r4, #16]
 8014caa:	2b01      	cmp	r3, #1
 8014cac:	dd5c      	ble.n	8014d68 <_strtod_l+0x8b8>
 8014cae:	4621      	mov	r1, r4
 8014cb0:	2201      	movs	r2, #1
 8014cb2:	9805      	ldr	r0, [sp, #20]
 8014cb4:	f7ff f984 	bl	8013fc0 <__lshift>
 8014cb8:	4641      	mov	r1, r8
 8014cba:	4604      	mov	r4, r0
 8014cbc:	f7ff f9ec 	bl	8014098 <__mcmp>
 8014cc0:	2800      	cmp	r0, #0
 8014cc2:	dd51      	ble.n	8014d68 <_strtod_l+0x8b8>
 8014cc4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014cc8:	9a08      	ldr	r2, [sp, #32]
 8014cca:	0d1b      	lsrs	r3, r3, #20
 8014ccc:	051b      	lsls	r3, r3, #20
 8014cce:	2a00      	cmp	r2, #0
 8014cd0:	d06b      	beq.n	8014daa <_strtod_l+0x8fa>
 8014cd2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8014cd6:	d868      	bhi.n	8014daa <_strtod_l+0x8fa>
 8014cd8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8014cdc:	f67f ae9d 	bls.w	8014a1a <_strtod_l+0x56a>
 8014ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8014d0c <_strtod_l+0x85c>)
 8014ce2:	4650      	mov	r0, sl
 8014ce4:	4659      	mov	r1, fp
 8014ce6:	2200      	movs	r2, #0
 8014ce8:	f7eb fcae 	bl	8000648 <__aeabi_dmul>
 8014cec:	4b08      	ldr	r3, [pc, #32]	@ (8014d10 <_strtod_l+0x860>)
 8014cee:	400b      	ands	r3, r1
 8014cf0:	4682      	mov	sl, r0
 8014cf2:	468b      	mov	fp, r1
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	f47f ae05 	bne.w	8014904 <_strtod_l+0x454>
 8014cfa:	9a05      	ldr	r2, [sp, #20]
 8014cfc:	2322      	movs	r3, #34	@ 0x22
 8014cfe:	6013      	str	r3, [r2, #0]
 8014d00:	e600      	b.n	8014904 <_strtod_l+0x454>
 8014d02:	bf00      	nop
 8014d04:	08024118 	.word	0x08024118
 8014d08:	fffffc02 	.word	0xfffffc02
 8014d0c:	39500000 	.word	0x39500000
 8014d10:	7ff00000 	.word	0x7ff00000
 8014d14:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8014d18:	d165      	bne.n	8014de6 <_strtod_l+0x936>
 8014d1a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014d1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014d20:	b35a      	cbz	r2, 8014d7a <_strtod_l+0x8ca>
 8014d22:	4a9f      	ldr	r2, [pc, #636]	@ (8014fa0 <_strtod_l+0xaf0>)
 8014d24:	4293      	cmp	r3, r2
 8014d26:	d12b      	bne.n	8014d80 <_strtod_l+0x8d0>
 8014d28:	9b08      	ldr	r3, [sp, #32]
 8014d2a:	4651      	mov	r1, sl
 8014d2c:	b303      	cbz	r3, 8014d70 <_strtod_l+0x8c0>
 8014d2e:	4b9d      	ldr	r3, [pc, #628]	@ (8014fa4 <_strtod_l+0xaf4>)
 8014d30:	465a      	mov	r2, fp
 8014d32:	4013      	ands	r3, r2
 8014d34:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8014d38:	f04f 32ff 	mov.w	r2, #4294967295
 8014d3c:	d81b      	bhi.n	8014d76 <_strtod_l+0x8c6>
 8014d3e:	0d1b      	lsrs	r3, r3, #20
 8014d40:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8014d44:	fa02 f303 	lsl.w	r3, r2, r3
 8014d48:	4299      	cmp	r1, r3
 8014d4a:	d119      	bne.n	8014d80 <_strtod_l+0x8d0>
 8014d4c:	4b96      	ldr	r3, [pc, #600]	@ (8014fa8 <_strtod_l+0xaf8>)
 8014d4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014d50:	429a      	cmp	r2, r3
 8014d52:	d102      	bne.n	8014d5a <_strtod_l+0x8aa>
 8014d54:	3101      	adds	r1, #1
 8014d56:	f43f adca 	beq.w	80148ee <_strtod_l+0x43e>
 8014d5a:	4b92      	ldr	r3, [pc, #584]	@ (8014fa4 <_strtod_l+0xaf4>)
 8014d5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014d5e:	401a      	ands	r2, r3
 8014d60:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8014d64:	f04f 0a00 	mov.w	sl, #0
 8014d68:	9b08      	ldr	r3, [sp, #32]
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d1b8      	bne.n	8014ce0 <_strtod_l+0x830>
 8014d6e:	e5c9      	b.n	8014904 <_strtod_l+0x454>
 8014d70:	f04f 33ff 	mov.w	r3, #4294967295
 8014d74:	e7e8      	b.n	8014d48 <_strtod_l+0x898>
 8014d76:	4613      	mov	r3, r2
 8014d78:	e7e6      	b.n	8014d48 <_strtod_l+0x898>
 8014d7a:	ea53 030a 	orrs.w	r3, r3, sl
 8014d7e:	d0a1      	beq.n	8014cc4 <_strtod_l+0x814>
 8014d80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014d82:	b1db      	cbz	r3, 8014dbc <_strtod_l+0x90c>
 8014d84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014d86:	4213      	tst	r3, r2
 8014d88:	d0ee      	beq.n	8014d68 <_strtod_l+0x8b8>
 8014d8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014d8c:	9a08      	ldr	r2, [sp, #32]
 8014d8e:	4650      	mov	r0, sl
 8014d90:	4659      	mov	r1, fp
 8014d92:	b1bb      	cbz	r3, 8014dc4 <_strtod_l+0x914>
 8014d94:	f7ff fb6e 	bl	8014474 <sulp>
 8014d98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014d9c:	ec53 2b10 	vmov	r2, r3, d0
 8014da0:	f7eb fa9c 	bl	80002dc <__adddf3>
 8014da4:	4682      	mov	sl, r0
 8014da6:	468b      	mov	fp, r1
 8014da8:	e7de      	b.n	8014d68 <_strtod_l+0x8b8>
 8014daa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8014dae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014db2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014db6:	f04f 3aff 	mov.w	sl, #4294967295
 8014dba:	e7d5      	b.n	8014d68 <_strtod_l+0x8b8>
 8014dbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8014dbe:	ea13 0f0a 	tst.w	r3, sl
 8014dc2:	e7e1      	b.n	8014d88 <_strtod_l+0x8d8>
 8014dc4:	f7ff fb56 	bl	8014474 <sulp>
 8014dc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014dcc:	ec53 2b10 	vmov	r2, r3, d0
 8014dd0:	f7eb fa82 	bl	80002d8 <__aeabi_dsub>
 8014dd4:	2200      	movs	r2, #0
 8014dd6:	2300      	movs	r3, #0
 8014dd8:	4682      	mov	sl, r0
 8014dda:	468b      	mov	fp, r1
 8014ddc:	f7eb fe9c 	bl	8000b18 <__aeabi_dcmpeq>
 8014de0:	2800      	cmp	r0, #0
 8014de2:	d0c1      	beq.n	8014d68 <_strtod_l+0x8b8>
 8014de4:	e619      	b.n	8014a1a <_strtod_l+0x56a>
 8014de6:	4641      	mov	r1, r8
 8014de8:	4620      	mov	r0, r4
 8014dea:	f7ff facd 	bl	8014388 <__ratio>
 8014dee:	ec57 6b10 	vmov	r6, r7, d0
 8014df2:	2200      	movs	r2, #0
 8014df4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8014df8:	4630      	mov	r0, r6
 8014dfa:	4639      	mov	r1, r7
 8014dfc:	f7eb fea0 	bl	8000b40 <__aeabi_dcmple>
 8014e00:	2800      	cmp	r0, #0
 8014e02:	d06f      	beq.n	8014ee4 <_strtod_l+0xa34>
 8014e04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d17a      	bne.n	8014f00 <_strtod_l+0xa50>
 8014e0a:	f1ba 0f00 	cmp.w	sl, #0
 8014e0e:	d158      	bne.n	8014ec2 <_strtod_l+0xa12>
 8014e10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014e12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d15a      	bne.n	8014ed0 <_strtod_l+0xa20>
 8014e1a:	4b64      	ldr	r3, [pc, #400]	@ (8014fac <_strtod_l+0xafc>)
 8014e1c:	2200      	movs	r2, #0
 8014e1e:	4630      	mov	r0, r6
 8014e20:	4639      	mov	r1, r7
 8014e22:	f7eb fe83 	bl	8000b2c <__aeabi_dcmplt>
 8014e26:	2800      	cmp	r0, #0
 8014e28:	d159      	bne.n	8014ede <_strtod_l+0xa2e>
 8014e2a:	4630      	mov	r0, r6
 8014e2c:	4639      	mov	r1, r7
 8014e2e:	4b60      	ldr	r3, [pc, #384]	@ (8014fb0 <_strtod_l+0xb00>)
 8014e30:	2200      	movs	r2, #0
 8014e32:	f7eb fc09 	bl	8000648 <__aeabi_dmul>
 8014e36:	4606      	mov	r6, r0
 8014e38:	460f      	mov	r7, r1
 8014e3a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8014e3e:	9606      	str	r6, [sp, #24]
 8014e40:	9307      	str	r3, [sp, #28]
 8014e42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014e46:	4d57      	ldr	r5, [pc, #348]	@ (8014fa4 <_strtod_l+0xaf4>)
 8014e48:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8014e4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014e4e:	401d      	ands	r5, r3
 8014e50:	4b58      	ldr	r3, [pc, #352]	@ (8014fb4 <_strtod_l+0xb04>)
 8014e52:	429d      	cmp	r5, r3
 8014e54:	f040 80b2 	bne.w	8014fbc <_strtod_l+0xb0c>
 8014e58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014e5a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8014e5e:	ec4b ab10 	vmov	d0, sl, fp
 8014e62:	f7ff f9c9 	bl	80141f8 <__ulp>
 8014e66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014e6a:	ec51 0b10 	vmov	r0, r1, d0
 8014e6e:	f7eb fbeb 	bl	8000648 <__aeabi_dmul>
 8014e72:	4652      	mov	r2, sl
 8014e74:	465b      	mov	r3, fp
 8014e76:	f7eb fa31 	bl	80002dc <__adddf3>
 8014e7a:	460b      	mov	r3, r1
 8014e7c:	4949      	ldr	r1, [pc, #292]	@ (8014fa4 <_strtod_l+0xaf4>)
 8014e7e:	4a4e      	ldr	r2, [pc, #312]	@ (8014fb8 <_strtod_l+0xb08>)
 8014e80:	4019      	ands	r1, r3
 8014e82:	4291      	cmp	r1, r2
 8014e84:	4682      	mov	sl, r0
 8014e86:	d942      	bls.n	8014f0e <_strtod_l+0xa5e>
 8014e88:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014e8a:	4b47      	ldr	r3, [pc, #284]	@ (8014fa8 <_strtod_l+0xaf8>)
 8014e8c:	429a      	cmp	r2, r3
 8014e8e:	d103      	bne.n	8014e98 <_strtod_l+0x9e8>
 8014e90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014e92:	3301      	adds	r3, #1
 8014e94:	f43f ad2b 	beq.w	80148ee <_strtod_l+0x43e>
 8014e98:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8014fa8 <_strtod_l+0xaf8>
 8014e9c:	f04f 3aff 	mov.w	sl, #4294967295
 8014ea0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8014ea2:	9805      	ldr	r0, [sp, #20]
 8014ea4:	f7fe fe74 	bl	8013b90 <_Bfree>
 8014ea8:	9805      	ldr	r0, [sp, #20]
 8014eaa:	4649      	mov	r1, r9
 8014eac:	f7fe fe70 	bl	8013b90 <_Bfree>
 8014eb0:	9805      	ldr	r0, [sp, #20]
 8014eb2:	4641      	mov	r1, r8
 8014eb4:	f7fe fe6c 	bl	8013b90 <_Bfree>
 8014eb8:	9805      	ldr	r0, [sp, #20]
 8014eba:	4621      	mov	r1, r4
 8014ebc:	f7fe fe68 	bl	8013b90 <_Bfree>
 8014ec0:	e618      	b.n	8014af4 <_strtod_l+0x644>
 8014ec2:	f1ba 0f01 	cmp.w	sl, #1
 8014ec6:	d103      	bne.n	8014ed0 <_strtod_l+0xa20>
 8014ec8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	f43f ada5 	beq.w	8014a1a <_strtod_l+0x56a>
 8014ed0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8014f80 <_strtod_l+0xad0>
 8014ed4:	4f35      	ldr	r7, [pc, #212]	@ (8014fac <_strtod_l+0xafc>)
 8014ed6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014eda:	2600      	movs	r6, #0
 8014edc:	e7b1      	b.n	8014e42 <_strtod_l+0x992>
 8014ede:	4f34      	ldr	r7, [pc, #208]	@ (8014fb0 <_strtod_l+0xb00>)
 8014ee0:	2600      	movs	r6, #0
 8014ee2:	e7aa      	b.n	8014e3a <_strtod_l+0x98a>
 8014ee4:	4b32      	ldr	r3, [pc, #200]	@ (8014fb0 <_strtod_l+0xb00>)
 8014ee6:	4630      	mov	r0, r6
 8014ee8:	4639      	mov	r1, r7
 8014eea:	2200      	movs	r2, #0
 8014eec:	f7eb fbac 	bl	8000648 <__aeabi_dmul>
 8014ef0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014ef2:	4606      	mov	r6, r0
 8014ef4:	460f      	mov	r7, r1
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d09f      	beq.n	8014e3a <_strtod_l+0x98a>
 8014efa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8014efe:	e7a0      	b.n	8014e42 <_strtod_l+0x992>
 8014f00:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8014f88 <_strtod_l+0xad8>
 8014f04:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014f08:	ec57 6b17 	vmov	r6, r7, d7
 8014f0c:	e799      	b.n	8014e42 <_strtod_l+0x992>
 8014f0e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8014f12:	9b08      	ldr	r3, [sp, #32]
 8014f14:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d1c1      	bne.n	8014ea0 <_strtod_l+0x9f0>
 8014f1c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014f20:	0d1b      	lsrs	r3, r3, #20
 8014f22:	051b      	lsls	r3, r3, #20
 8014f24:	429d      	cmp	r5, r3
 8014f26:	d1bb      	bne.n	8014ea0 <_strtod_l+0x9f0>
 8014f28:	4630      	mov	r0, r6
 8014f2a:	4639      	mov	r1, r7
 8014f2c:	f7eb feec 	bl	8000d08 <__aeabi_d2lz>
 8014f30:	f7eb fb5c 	bl	80005ec <__aeabi_l2d>
 8014f34:	4602      	mov	r2, r0
 8014f36:	460b      	mov	r3, r1
 8014f38:	4630      	mov	r0, r6
 8014f3a:	4639      	mov	r1, r7
 8014f3c:	f7eb f9cc 	bl	80002d8 <__aeabi_dsub>
 8014f40:	460b      	mov	r3, r1
 8014f42:	4602      	mov	r2, r0
 8014f44:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8014f48:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8014f4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014f4e:	ea46 060a 	orr.w	r6, r6, sl
 8014f52:	431e      	orrs	r6, r3
 8014f54:	d06f      	beq.n	8015036 <_strtod_l+0xb86>
 8014f56:	a30e      	add	r3, pc, #56	@ (adr r3, 8014f90 <_strtod_l+0xae0>)
 8014f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f5c:	f7eb fde6 	bl	8000b2c <__aeabi_dcmplt>
 8014f60:	2800      	cmp	r0, #0
 8014f62:	f47f accf 	bne.w	8014904 <_strtod_l+0x454>
 8014f66:	a30c      	add	r3, pc, #48	@ (adr r3, 8014f98 <_strtod_l+0xae8>)
 8014f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014f70:	f7eb fdfa 	bl	8000b68 <__aeabi_dcmpgt>
 8014f74:	2800      	cmp	r0, #0
 8014f76:	d093      	beq.n	8014ea0 <_strtod_l+0x9f0>
 8014f78:	e4c4      	b.n	8014904 <_strtod_l+0x454>
 8014f7a:	bf00      	nop
 8014f7c:	f3af 8000 	nop.w
 8014f80:	00000000 	.word	0x00000000
 8014f84:	bff00000 	.word	0xbff00000
 8014f88:	00000000 	.word	0x00000000
 8014f8c:	3ff00000 	.word	0x3ff00000
 8014f90:	94a03595 	.word	0x94a03595
 8014f94:	3fdfffff 	.word	0x3fdfffff
 8014f98:	35afe535 	.word	0x35afe535
 8014f9c:	3fe00000 	.word	0x3fe00000
 8014fa0:	000fffff 	.word	0x000fffff
 8014fa4:	7ff00000 	.word	0x7ff00000
 8014fa8:	7fefffff 	.word	0x7fefffff
 8014fac:	3ff00000 	.word	0x3ff00000
 8014fb0:	3fe00000 	.word	0x3fe00000
 8014fb4:	7fe00000 	.word	0x7fe00000
 8014fb8:	7c9fffff 	.word	0x7c9fffff
 8014fbc:	9b08      	ldr	r3, [sp, #32]
 8014fbe:	b323      	cbz	r3, 801500a <_strtod_l+0xb5a>
 8014fc0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8014fc4:	d821      	bhi.n	801500a <_strtod_l+0xb5a>
 8014fc6:	a328      	add	r3, pc, #160	@ (adr r3, 8015068 <_strtod_l+0xbb8>)
 8014fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fcc:	4630      	mov	r0, r6
 8014fce:	4639      	mov	r1, r7
 8014fd0:	f7eb fdb6 	bl	8000b40 <__aeabi_dcmple>
 8014fd4:	b1a0      	cbz	r0, 8015000 <_strtod_l+0xb50>
 8014fd6:	4639      	mov	r1, r7
 8014fd8:	4630      	mov	r0, r6
 8014fda:	f7eb fe0d 	bl	8000bf8 <__aeabi_d2uiz>
 8014fde:	2801      	cmp	r0, #1
 8014fe0:	bf38      	it	cc
 8014fe2:	2001      	movcc	r0, #1
 8014fe4:	f7eb fab6 	bl	8000554 <__aeabi_ui2d>
 8014fe8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014fea:	4606      	mov	r6, r0
 8014fec:	460f      	mov	r7, r1
 8014fee:	b9fb      	cbnz	r3, 8015030 <_strtod_l+0xb80>
 8014ff0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014ff4:	9014      	str	r0, [sp, #80]	@ 0x50
 8014ff6:	9315      	str	r3, [sp, #84]	@ 0x54
 8014ff8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8014ffc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8015000:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015002:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8015006:	1b5b      	subs	r3, r3, r5
 8015008:	9311      	str	r3, [sp, #68]	@ 0x44
 801500a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801500e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8015012:	f7ff f8f1 	bl	80141f8 <__ulp>
 8015016:	4650      	mov	r0, sl
 8015018:	ec53 2b10 	vmov	r2, r3, d0
 801501c:	4659      	mov	r1, fp
 801501e:	f7eb fb13 	bl	8000648 <__aeabi_dmul>
 8015022:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8015026:	f7eb f959 	bl	80002dc <__adddf3>
 801502a:	4682      	mov	sl, r0
 801502c:	468b      	mov	fp, r1
 801502e:	e770      	b.n	8014f12 <_strtod_l+0xa62>
 8015030:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8015034:	e7e0      	b.n	8014ff8 <_strtod_l+0xb48>
 8015036:	a30e      	add	r3, pc, #56	@ (adr r3, 8015070 <_strtod_l+0xbc0>)
 8015038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801503c:	f7eb fd76 	bl	8000b2c <__aeabi_dcmplt>
 8015040:	e798      	b.n	8014f74 <_strtod_l+0xac4>
 8015042:	2300      	movs	r3, #0
 8015044:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015046:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8015048:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801504a:	6013      	str	r3, [r2, #0]
 801504c:	f7ff ba6d 	b.w	801452a <_strtod_l+0x7a>
 8015050:	2a65      	cmp	r2, #101	@ 0x65
 8015052:	f43f ab66 	beq.w	8014722 <_strtod_l+0x272>
 8015056:	2a45      	cmp	r2, #69	@ 0x45
 8015058:	f43f ab63 	beq.w	8014722 <_strtod_l+0x272>
 801505c:	2301      	movs	r3, #1
 801505e:	f7ff bb9e 	b.w	801479e <_strtod_l+0x2ee>
 8015062:	bf00      	nop
 8015064:	f3af 8000 	nop.w
 8015068:	ffc00000 	.word	0xffc00000
 801506c:	41dfffff 	.word	0x41dfffff
 8015070:	94a03595 	.word	0x94a03595
 8015074:	3fcfffff 	.word	0x3fcfffff

08015078 <_strtod_r>:
 8015078:	4b01      	ldr	r3, [pc, #4]	@ (8015080 <_strtod_r+0x8>)
 801507a:	f7ff ba19 	b.w	80144b0 <_strtod_l>
 801507e:	bf00      	nop
 8015080:	20000228 	.word	0x20000228

08015084 <_strtol_l.constprop.0>:
 8015084:	2b24      	cmp	r3, #36	@ 0x24
 8015086:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801508a:	4686      	mov	lr, r0
 801508c:	4690      	mov	r8, r2
 801508e:	d801      	bhi.n	8015094 <_strtol_l.constprop.0+0x10>
 8015090:	2b01      	cmp	r3, #1
 8015092:	d106      	bne.n	80150a2 <_strtol_l.constprop.0+0x1e>
 8015094:	f7fd fdba 	bl	8012c0c <__errno>
 8015098:	2316      	movs	r3, #22
 801509a:	6003      	str	r3, [r0, #0]
 801509c:	2000      	movs	r0, #0
 801509e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150a2:	4834      	ldr	r0, [pc, #208]	@ (8015174 <_strtol_l.constprop.0+0xf0>)
 80150a4:	460d      	mov	r5, r1
 80150a6:	462a      	mov	r2, r5
 80150a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80150ac:	5d06      	ldrb	r6, [r0, r4]
 80150ae:	f016 0608 	ands.w	r6, r6, #8
 80150b2:	d1f8      	bne.n	80150a6 <_strtol_l.constprop.0+0x22>
 80150b4:	2c2d      	cmp	r4, #45	@ 0x2d
 80150b6:	d12d      	bne.n	8015114 <_strtol_l.constprop.0+0x90>
 80150b8:	782c      	ldrb	r4, [r5, #0]
 80150ba:	2601      	movs	r6, #1
 80150bc:	1c95      	adds	r5, r2, #2
 80150be:	f033 0210 	bics.w	r2, r3, #16
 80150c2:	d109      	bne.n	80150d8 <_strtol_l.constprop.0+0x54>
 80150c4:	2c30      	cmp	r4, #48	@ 0x30
 80150c6:	d12a      	bne.n	801511e <_strtol_l.constprop.0+0x9a>
 80150c8:	782a      	ldrb	r2, [r5, #0]
 80150ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80150ce:	2a58      	cmp	r2, #88	@ 0x58
 80150d0:	d125      	bne.n	801511e <_strtol_l.constprop.0+0x9a>
 80150d2:	786c      	ldrb	r4, [r5, #1]
 80150d4:	2310      	movs	r3, #16
 80150d6:	3502      	adds	r5, #2
 80150d8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80150dc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80150e0:	2200      	movs	r2, #0
 80150e2:	fbbc f9f3 	udiv	r9, ip, r3
 80150e6:	4610      	mov	r0, r2
 80150e8:	fb03 ca19 	mls	sl, r3, r9, ip
 80150ec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80150f0:	2f09      	cmp	r7, #9
 80150f2:	d81b      	bhi.n	801512c <_strtol_l.constprop.0+0xa8>
 80150f4:	463c      	mov	r4, r7
 80150f6:	42a3      	cmp	r3, r4
 80150f8:	dd27      	ble.n	801514a <_strtol_l.constprop.0+0xc6>
 80150fa:	1c57      	adds	r7, r2, #1
 80150fc:	d007      	beq.n	801510e <_strtol_l.constprop.0+0x8a>
 80150fe:	4581      	cmp	r9, r0
 8015100:	d320      	bcc.n	8015144 <_strtol_l.constprop.0+0xc0>
 8015102:	d101      	bne.n	8015108 <_strtol_l.constprop.0+0x84>
 8015104:	45a2      	cmp	sl, r4
 8015106:	db1d      	blt.n	8015144 <_strtol_l.constprop.0+0xc0>
 8015108:	fb00 4003 	mla	r0, r0, r3, r4
 801510c:	2201      	movs	r2, #1
 801510e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015112:	e7eb      	b.n	80150ec <_strtol_l.constprop.0+0x68>
 8015114:	2c2b      	cmp	r4, #43	@ 0x2b
 8015116:	bf04      	itt	eq
 8015118:	782c      	ldrbeq	r4, [r5, #0]
 801511a:	1c95      	addeq	r5, r2, #2
 801511c:	e7cf      	b.n	80150be <_strtol_l.constprop.0+0x3a>
 801511e:	2b00      	cmp	r3, #0
 8015120:	d1da      	bne.n	80150d8 <_strtol_l.constprop.0+0x54>
 8015122:	2c30      	cmp	r4, #48	@ 0x30
 8015124:	bf0c      	ite	eq
 8015126:	2308      	moveq	r3, #8
 8015128:	230a      	movne	r3, #10
 801512a:	e7d5      	b.n	80150d8 <_strtol_l.constprop.0+0x54>
 801512c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8015130:	2f19      	cmp	r7, #25
 8015132:	d801      	bhi.n	8015138 <_strtol_l.constprop.0+0xb4>
 8015134:	3c37      	subs	r4, #55	@ 0x37
 8015136:	e7de      	b.n	80150f6 <_strtol_l.constprop.0+0x72>
 8015138:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801513c:	2f19      	cmp	r7, #25
 801513e:	d804      	bhi.n	801514a <_strtol_l.constprop.0+0xc6>
 8015140:	3c57      	subs	r4, #87	@ 0x57
 8015142:	e7d8      	b.n	80150f6 <_strtol_l.constprop.0+0x72>
 8015144:	f04f 32ff 	mov.w	r2, #4294967295
 8015148:	e7e1      	b.n	801510e <_strtol_l.constprop.0+0x8a>
 801514a:	1c53      	adds	r3, r2, #1
 801514c:	d108      	bne.n	8015160 <_strtol_l.constprop.0+0xdc>
 801514e:	2322      	movs	r3, #34	@ 0x22
 8015150:	f8ce 3000 	str.w	r3, [lr]
 8015154:	4660      	mov	r0, ip
 8015156:	f1b8 0f00 	cmp.w	r8, #0
 801515a:	d0a0      	beq.n	801509e <_strtol_l.constprop.0+0x1a>
 801515c:	1e69      	subs	r1, r5, #1
 801515e:	e006      	b.n	801516e <_strtol_l.constprop.0+0xea>
 8015160:	b106      	cbz	r6, 8015164 <_strtol_l.constprop.0+0xe0>
 8015162:	4240      	negs	r0, r0
 8015164:	f1b8 0f00 	cmp.w	r8, #0
 8015168:	d099      	beq.n	801509e <_strtol_l.constprop.0+0x1a>
 801516a:	2a00      	cmp	r2, #0
 801516c:	d1f6      	bne.n	801515c <_strtol_l.constprop.0+0xd8>
 801516e:	f8c8 1000 	str.w	r1, [r8]
 8015172:	e794      	b.n	801509e <_strtol_l.constprop.0+0x1a>
 8015174:	08024141 	.word	0x08024141

08015178 <_strtol_r>:
 8015178:	f7ff bf84 	b.w	8015084 <_strtol_l.constprop.0>

0801517c <__ssputs_r>:
 801517c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015180:	688e      	ldr	r6, [r1, #8]
 8015182:	461f      	mov	r7, r3
 8015184:	42be      	cmp	r6, r7
 8015186:	680b      	ldr	r3, [r1, #0]
 8015188:	4682      	mov	sl, r0
 801518a:	460c      	mov	r4, r1
 801518c:	4690      	mov	r8, r2
 801518e:	d82d      	bhi.n	80151ec <__ssputs_r+0x70>
 8015190:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015194:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015198:	d026      	beq.n	80151e8 <__ssputs_r+0x6c>
 801519a:	6965      	ldr	r5, [r4, #20]
 801519c:	6909      	ldr	r1, [r1, #16]
 801519e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80151a2:	eba3 0901 	sub.w	r9, r3, r1
 80151a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80151aa:	1c7b      	adds	r3, r7, #1
 80151ac:	444b      	add	r3, r9
 80151ae:	106d      	asrs	r5, r5, #1
 80151b0:	429d      	cmp	r5, r3
 80151b2:	bf38      	it	cc
 80151b4:	461d      	movcc	r5, r3
 80151b6:	0553      	lsls	r3, r2, #21
 80151b8:	d527      	bpl.n	801520a <__ssputs_r+0x8e>
 80151ba:	4629      	mov	r1, r5
 80151bc:	f7fe fc1c 	bl	80139f8 <_malloc_r>
 80151c0:	4606      	mov	r6, r0
 80151c2:	b360      	cbz	r0, 801521e <__ssputs_r+0xa2>
 80151c4:	6921      	ldr	r1, [r4, #16]
 80151c6:	464a      	mov	r2, r9
 80151c8:	f000 fbde 	bl	8015988 <memcpy>
 80151cc:	89a3      	ldrh	r3, [r4, #12]
 80151ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80151d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80151d6:	81a3      	strh	r3, [r4, #12]
 80151d8:	6126      	str	r6, [r4, #16]
 80151da:	6165      	str	r5, [r4, #20]
 80151dc:	444e      	add	r6, r9
 80151de:	eba5 0509 	sub.w	r5, r5, r9
 80151e2:	6026      	str	r6, [r4, #0]
 80151e4:	60a5      	str	r5, [r4, #8]
 80151e6:	463e      	mov	r6, r7
 80151e8:	42be      	cmp	r6, r7
 80151ea:	d900      	bls.n	80151ee <__ssputs_r+0x72>
 80151ec:	463e      	mov	r6, r7
 80151ee:	6820      	ldr	r0, [r4, #0]
 80151f0:	4632      	mov	r2, r6
 80151f2:	4641      	mov	r1, r8
 80151f4:	f000 fb6a 	bl	80158cc <memmove>
 80151f8:	68a3      	ldr	r3, [r4, #8]
 80151fa:	1b9b      	subs	r3, r3, r6
 80151fc:	60a3      	str	r3, [r4, #8]
 80151fe:	6823      	ldr	r3, [r4, #0]
 8015200:	4433      	add	r3, r6
 8015202:	6023      	str	r3, [r4, #0]
 8015204:	2000      	movs	r0, #0
 8015206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801520a:	462a      	mov	r2, r5
 801520c:	f000 ff51 	bl	80160b2 <_realloc_r>
 8015210:	4606      	mov	r6, r0
 8015212:	2800      	cmp	r0, #0
 8015214:	d1e0      	bne.n	80151d8 <__ssputs_r+0x5c>
 8015216:	6921      	ldr	r1, [r4, #16]
 8015218:	4650      	mov	r0, sl
 801521a:	f7fe fb79 	bl	8013910 <_free_r>
 801521e:	230c      	movs	r3, #12
 8015220:	f8ca 3000 	str.w	r3, [sl]
 8015224:	89a3      	ldrh	r3, [r4, #12]
 8015226:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801522a:	81a3      	strh	r3, [r4, #12]
 801522c:	f04f 30ff 	mov.w	r0, #4294967295
 8015230:	e7e9      	b.n	8015206 <__ssputs_r+0x8a>
	...

08015234 <_svfiprintf_r>:
 8015234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015238:	4698      	mov	r8, r3
 801523a:	898b      	ldrh	r3, [r1, #12]
 801523c:	061b      	lsls	r3, r3, #24
 801523e:	b09d      	sub	sp, #116	@ 0x74
 8015240:	4607      	mov	r7, r0
 8015242:	460d      	mov	r5, r1
 8015244:	4614      	mov	r4, r2
 8015246:	d510      	bpl.n	801526a <_svfiprintf_r+0x36>
 8015248:	690b      	ldr	r3, [r1, #16]
 801524a:	b973      	cbnz	r3, 801526a <_svfiprintf_r+0x36>
 801524c:	2140      	movs	r1, #64	@ 0x40
 801524e:	f7fe fbd3 	bl	80139f8 <_malloc_r>
 8015252:	6028      	str	r0, [r5, #0]
 8015254:	6128      	str	r0, [r5, #16]
 8015256:	b930      	cbnz	r0, 8015266 <_svfiprintf_r+0x32>
 8015258:	230c      	movs	r3, #12
 801525a:	603b      	str	r3, [r7, #0]
 801525c:	f04f 30ff 	mov.w	r0, #4294967295
 8015260:	b01d      	add	sp, #116	@ 0x74
 8015262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015266:	2340      	movs	r3, #64	@ 0x40
 8015268:	616b      	str	r3, [r5, #20]
 801526a:	2300      	movs	r3, #0
 801526c:	9309      	str	r3, [sp, #36]	@ 0x24
 801526e:	2320      	movs	r3, #32
 8015270:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015274:	f8cd 800c 	str.w	r8, [sp, #12]
 8015278:	2330      	movs	r3, #48	@ 0x30
 801527a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015418 <_svfiprintf_r+0x1e4>
 801527e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015282:	f04f 0901 	mov.w	r9, #1
 8015286:	4623      	mov	r3, r4
 8015288:	469a      	mov	sl, r3
 801528a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801528e:	b10a      	cbz	r2, 8015294 <_svfiprintf_r+0x60>
 8015290:	2a25      	cmp	r2, #37	@ 0x25
 8015292:	d1f9      	bne.n	8015288 <_svfiprintf_r+0x54>
 8015294:	ebba 0b04 	subs.w	fp, sl, r4
 8015298:	d00b      	beq.n	80152b2 <_svfiprintf_r+0x7e>
 801529a:	465b      	mov	r3, fp
 801529c:	4622      	mov	r2, r4
 801529e:	4629      	mov	r1, r5
 80152a0:	4638      	mov	r0, r7
 80152a2:	f7ff ff6b 	bl	801517c <__ssputs_r>
 80152a6:	3001      	adds	r0, #1
 80152a8:	f000 80a7 	beq.w	80153fa <_svfiprintf_r+0x1c6>
 80152ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80152ae:	445a      	add	r2, fp
 80152b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80152b2:	f89a 3000 	ldrb.w	r3, [sl]
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	f000 809f 	beq.w	80153fa <_svfiprintf_r+0x1c6>
 80152bc:	2300      	movs	r3, #0
 80152be:	f04f 32ff 	mov.w	r2, #4294967295
 80152c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80152c6:	f10a 0a01 	add.w	sl, sl, #1
 80152ca:	9304      	str	r3, [sp, #16]
 80152cc:	9307      	str	r3, [sp, #28]
 80152ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80152d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80152d4:	4654      	mov	r4, sl
 80152d6:	2205      	movs	r2, #5
 80152d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80152dc:	484e      	ldr	r0, [pc, #312]	@ (8015418 <_svfiprintf_r+0x1e4>)
 80152de:	f7ea ff9f 	bl	8000220 <memchr>
 80152e2:	9a04      	ldr	r2, [sp, #16]
 80152e4:	b9d8      	cbnz	r0, 801531e <_svfiprintf_r+0xea>
 80152e6:	06d0      	lsls	r0, r2, #27
 80152e8:	bf44      	itt	mi
 80152ea:	2320      	movmi	r3, #32
 80152ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80152f0:	0711      	lsls	r1, r2, #28
 80152f2:	bf44      	itt	mi
 80152f4:	232b      	movmi	r3, #43	@ 0x2b
 80152f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80152fa:	f89a 3000 	ldrb.w	r3, [sl]
 80152fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8015300:	d015      	beq.n	801532e <_svfiprintf_r+0xfa>
 8015302:	9a07      	ldr	r2, [sp, #28]
 8015304:	4654      	mov	r4, sl
 8015306:	2000      	movs	r0, #0
 8015308:	f04f 0c0a 	mov.w	ip, #10
 801530c:	4621      	mov	r1, r4
 801530e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015312:	3b30      	subs	r3, #48	@ 0x30
 8015314:	2b09      	cmp	r3, #9
 8015316:	d94b      	bls.n	80153b0 <_svfiprintf_r+0x17c>
 8015318:	b1b0      	cbz	r0, 8015348 <_svfiprintf_r+0x114>
 801531a:	9207      	str	r2, [sp, #28]
 801531c:	e014      	b.n	8015348 <_svfiprintf_r+0x114>
 801531e:	eba0 0308 	sub.w	r3, r0, r8
 8015322:	fa09 f303 	lsl.w	r3, r9, r3
 8015326:	4313      	orrs	r3, r2
 8015328:	9304      	str	r3, [sp, #16]
 801532a:	46a2      	mov	sl, r4
 801532c:	e7d2      	b.n	80152d4 <_svfiprintf_r+0xa0>
 801532e:	9b03      	ldr	r3, [sp, #12]
 8015330:	1d19      	adds	r1, r3, #4
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	9103      	str	r1, [sp, #12]
 8015336:	2b00      	cmp	r3, #0
 8015338:	bfbb      	ittet	lt
 801533a:	425b      	neglt	r3, r3
 801533c:	f042 0202 	orrlt.w	r2, r2, #2
 8015340:	9307      	strge	r3, [sp, #28]
 8015342:	9307      	strlt	r3, [sp, #28]
 8015344:	bfb8      	it	lt
 8015346:	9204      	strlt	r2, [sp, #16]
 8015348:	7823      	ldrb	r3, [r4, #0]
 801534a:	2b2e      	cmp	r3, #46	@ 0x2e
 801534c:	d10a      	bne.n	8015364 <_svfiprintf_r+0x130>
 801534e:	7863      	ldrb	r3, [r4, #1]
 8015350:	2b2a      	cmp	r3, #42	@ 0x2a
 8015352:	d132      	bne.n	80153ba <_svfiprintf_r+0x186>
 8015354:	9b03      	ldr	r3, [sp, #12]
 8015356:	1d1a      	adds	r2, r3, #4
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	9203      	str	r2, [sp, #12]
 801535c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015360:	3402      	adds	r4, #2
 8015362:	9305      	str	r3, [sp, #20]
 8015364:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015428 <_svfiprintf_r+0x1f4>
 8015368:	7821      	ldrb	r1, [r4, #0]
 801536a:	2203      	movs	r2, #3
 801536c:	4650      	mov	r0, sl
 801536e:	f7ea ff57 	bl	8000220 <memchr>
 8015372:	b138      	cbz	r0, 8015384 <_svfiprintf_r+0x150>
 8015374:	9b04      	ldr	r3, [sp, #16]
 8015376:	eba0 000a 	sub.w	r0, r0, sl
 801537a:	2240      	movs	r2, #64	@ 0x40
 801537c:	4082      	lsls	r2, r0
 801537e:	4313      	orrs	r3, r2
 8015380:	3401      	adds	r4, #1
 8015382:	9304      	str	r3, [sp, #16]
 8015384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015388:	4824      	ldr	r0, [pc, #144]	@ (801541c <_svfiprintf_r+0x1e8>)
 801538a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801538e:	2206      	movs	r2, #6
 8015390:	f7ea ff46 	bl	8000220 <memchr>
 8015394:	2800      	cmp	r0, #0
 8015396:	d036      	beq.n	8015406 <_svfiprintf_r+0x1d2>
 8015398:	4b21      	ldr	r3, [pc, #132]	@ (8015420 <_svfiprintf_r+0x1ec>)
 801539a:	bb1b      	cbnz	r3, 80153e4 <_svfiprintf_r+0x1b0>
 801539c:	9b03      	ldr	r3, [sp, #12]
 801539e:	3307      	adds	r3, #7
 80153a0:	f023 0307 	bic.w	r3, r3, #7
 80153a4:	3308      	adds	r3, #8
 80153a6:	9303      	str	r3, [sp, #12]
 80153a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80153aa:	4433      	add	r3, r6
 80153ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80153ae:	e76a      	b.n	8015286 <_svfiprintf_r+0x52>
 80153b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80153b4:	460c      	mov	r4, r1
 80153b6:	2001      	movs	r0, #1
 80153b8:	e7a8      	b.n	801530c <_svfiprintf_r+0xd8>
 80153ba:	2300      	movs	r3, #0
 80153bc:	3401      	adds	r4, #1
 80153be:	9305      	str	r3, [sp, #20]
 80153c0:	4619      	mov	r1, r3
 80153c2:	f04f 0c0a 	mov.w	ip, #10
 80153c6:	4620      	mov	r0, r4
 80153c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80153cc:	3a30      	subs	r2, #48	@ 0x30
 80153ce:	2a09      	cmp	r2, #9
 80153d0:	d903      	bls.n	80153da <_svfiprintf_r+0x1a6>
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d0c6      	beq.n	8015364 <_svfiprintf_r+0x130>
 80153d6:	9105      	str	r1, [sp, #20]
 80153d8:	e7c4      	b.n	8015364 <_svfiprintf_r+0x130>
 80153da:	fb0c 2101 	mla	r1, ip, r1, r2
 80153de:	4604      	mov	r4, r0
 80153e0:	2301      	movs	r3, #1
 80153e2:	e7f0      	b.n	80153c6 <_svfiprintf_r+0x192>
 80153e4:	ab03      	add	r3, sp, #12
 80153e6:	9300      	str	r3, [sp, #0]
 80153e8:	462a      	mov	r2, r5
 80153ea:	4b0e      	ldr	r3, [pc, #56]	@ (8015424 <_svfiprintf_r+0x1f0>)
 80153ec:	a904      	add	r1, sp, #16
 80153ee:	4638      	mov	r0, r7
 80153f0:	f7fc fbc4 	bl	8011b7c <_printf_float>
 80153f4:	1c42      	adds	r2, r0, #1
 80153f6:	4606      	mov	r6, r0
 80153f8:	d1d6      	bne.n	80153a8 <_svfiprintf_r+0x174>
 80153fa:	89ab      	ldrh	r3, [r5, #12]
 80153fc:	065b      	lsls	r3, r3, #25
 80153fe:	f53f af2d 	bmi.w	801525c <_svfiprintf_r+0x28>
 8015402:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015404:	e72c      	b.n	8015260 <_svfiprintf_r+0x2c>
 8015406:	ab03      	add	r3, sp, #12
 8015408:	9300      	str	r3, [sp, #0]
 801540a:	462a      	mov	r2, r5
 801540c:	4b05      	ldr	r3, [pc, #20]	@ (8015424 <_svfiprintf_r+0x1f0>)
 801540e:	a904      	add	r1, sp, #16
 8015410:	4638      	mov	r0, r7
 8015412:	f7fc fe4b 	bl	80120ac <_printf_i>
 8015416:	e7ed      	b.n	80153f4 <_svfiprintf_r+0x1c0>
 8015418:	08024241 	.word	0x08024241
 801541c:	0802424b 	.word	0x0802424b
 8015420:	08011b7d 	.word	0x08011b7d
 8015424:	0801517d 	.word	0x0801517d
 8015428:	08024247 	.word	0x08024247

0801542c <__sfputc_r>:
 801542c:	6893      	ldr	r3, [r2, #8]
 801542e:	3b01      	subs	r3, #1
 8015430:	2b00      	cmp	r3, #0
 8015432:	b410      	push	{r4}
 8015434:	6093      	str	r3, [r2, #8]
 8015436:	da08      	bge.n	801544a <__sfputc_r+0x1e>
 8015438:	6994      	ldr	r4, [r2, #24]
 801543a:	42a3      	cmp	r3, r4
 801543c:	db01      	blt.n	8015442 <__sfputc_r+0x16>
 801543e:	290a      	cmp	r1, #10
 8015440:	d103      	bne.n	801544a <__sfputc_r+0x1e>
 8015442:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015446:	f7fd bafa 	b.w	8012a3e <__swbuf_r>
 801544a:	6813      	ldr	r3, [r2, #0]
 801544c:	1c58      	adds	r0, r3, #1
 801544e:	6010      	str	r0, [r2, #0]
 8015450:	7019      	strb	r1, [r3, #0]
 8015452:	4608      	mov	r0, r1
 8015454:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015458:	4770      	bx	lr

0801545a <__sfputs_r>:
 801545a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801545c:	4606      	mov	r6, r0
 801545e:	460f      	mov	r7, r1
 8015460:	4614      	mov	r4, r2
 8015462:	18d5      	adds	r5, r2, r3
 8015464:	42ac      	cmp	r4, r5
 8015466:	d101      	bne.n	801546c <__sfputs_r+0x12>
 8015468:	2000      	movs	r0, #0
 801546a:	e007      	b.n	801547c <__sfputs_r+0x22>
 801546c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015470:	463a      	mov	r2, r7
 8015472:	4630      	mov	r0, r6
 8015474:	f7ff ffda 	bl	801542c <__sfputc_r>
 8015478:	1c43      	adds	r3, r0, #1
 801547a:	d1f3      	bne.n	8015464 <__sfputs_r+0xa>
 801547c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015480 <_vfiprintf_r>:
 8015480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015484:	460d      	mov	r5, r1
 8015486:	b09d      	sub	sp, #116	@ 0x74
 8015488:	4614      	mov	r4, r2
 801548a:	4698      	mov	r8, r3
 801548c:	4606      	mov	r6, r0
 801548e:	b118      	cbz	r0, 8015498 <_vfiprintf_r+0x18>
 8015490:	6a03      	ldr	r3, [r0, #32]
 8015492:	b90b      	cbnz	r3, 8015498 <_vfiprintf_r+0x18>
 8015494:	f7fd f9ca 	bl	801282c <__sinit>
 8015498:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801549a:	07d9      	lsls	r1, r3, #31
 801549c:	d405      	bmi.n	80154aa <_vfiprintf_r+0x2a>
 801549e:	89ab      	ldrh	r3, [r5, #12]
 80154a0:	059a      	lsls	r2, r3, #22
 80154a2:	d402      	bmi.n	80154aa <_vfiprintf_r+0x2a>
 80154a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80154a6:	f7fd fbdc 	bl	8012c62 <__retarget_lock_acquire_recursive>
 80154aa:	89ab      	ldrh	r3, [r5, #12]
 80154ac:	071b      	lsls	r3, r3, #28
 80154ae:	d501      	bpl.n	80154b4 <_vfiprintf_r+0x34>
 80154b0:	692b      	ldr	r3, [r5, #16]
 80154b2:	b99b      	cbnz	r3, 80154dc <_vfiprintf_r+0x5c>
 80154b4:	4629      	mov	r1, r5
 80154b6:	4630      	mov	r0, r6
 80154b8:	f7fd fb00 	bl	8012abc <__swsetup_r>
 80154bc:	b170      	cbz	r0, 80154dc <_vfiprintf_r+0x5c>
 80154be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80154c0:	07dc      	lsls	r4, r3, #31
 80154c2:	d504      	bpl.n	80154ce <_vfiprintf_r+0x4e>
 80154c4:	f04f 30ff 	mov.w	r0, #4294967295
 80154c8:	b01d      	add	sp, #116	@ 0x74
 80154ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154ce:	89ab      	ldrh	r3, [r5, #12]
 80154d0:	0598      	lsls	r0, r3, #22
 80154d2:	d4f7      	bmi.n	80154c4 <_vfiprintf_r+0x44>
 80154d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80154d6:	f7fd fbc5 	bl	8012c64 <__retarget_lock_release_recursive>
 80154da:	e7f3      	b.n	80154c4 <_vfiprintf_r+0x44>
 80154dc:	2300      	movs	r3, #0
 80154de:	9309      	str	r3, [sp, #36]	@ 0x24
 80154e0:	2320      	movs	r3, #32
 80154e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80154e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80154ea:	2330      	movs	r3, #48	@ 0x30
 80154ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801569c <_vfiprintf_r+0x21c>
 80154f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80154f4:	f04f 0901 	mov.w	r9, #1
 80154f8:	4623      	mov	r3, r4
 80154fa:	469a      	mov	sl, r3
 80154fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015500:	b10a      	cbz	r2, 8015506 <_vfiprintf_r+0x86>
 8015502:	2a25      	cmp	r2, #37	@ 0x25
 8015504:	d1f9      	bne.n	80154fa <_vfiprintf_r+0x7a>
 8015506:	ebba 0b04 	subs.w	fp, sl, r4
 801550a:	d00b      	beq.n	8015524 <_vfiprintf_r+0xa4>
 801550c:	465b      	mov	r3, fp
 801550e:	4622      	mov	r2, r4
 8015510:	4629      	mov	r1, r5
 8015512:	4630      	mov	r0, r6
 8015514:	f7ff ffa1 	bl	801545a <__sfputs_r>
 8015518:	3001      	adds	r0, #1
 801551a:	f000 80a7 	beq.w	801566c <_vfiprintf_r+0x1ec>
 801551e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015520:	445a      	add	r2, fp
 8015522:	9209      	str	r2, [sp, #36]	@ 0x24
 8015524:	f89a 3000 	ldrb.w	r3, [sl]
 8015528:	2b00      	cmp	r3, #0
 801552a:	f000 809f 	beq.w	801566c <_vfiprintf_r+0x1ec>
 801552e:	2300      	movs	r3, #0
 8015530:	f04f 32ff 	mov.w	r2, #4294967295
 8015534:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015538:	f10a 0a01 	add.w	sl, sl, #1
 801553c:	9304      	str	r3, [sp, #16]
 801553e:	9307      	str	r3, [sp, #28]
 8015540:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015544:	931a      	str	r3, [sp, #104]	@ 0x68
 8015546:	4654      	mov	r4, sl
 8015548:	2205      	movs	r2, #5
 801554a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801554e:	4853      	ldr	r0, [pc, #332]	@ (801569c <_vfiprintf_r+0x21c>)
 8015550:	f7ea fe66 	bl	8000220 <memchr>
 8015554:	9a04      	ldr	r2, [sp, #16]
 8015556:	b9d8      	cbnz	r0, 8015590 <_vfiprintf_r+0x110>
 8015558:	06d1      	lsls	r1, r2, #27
 801555a:	bf44      	itt	mi
 801555c:	2320      	movmi	r3, #32
 801555e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015562:	0713      	lsls	r3, r2, #28
 8015564:	bf44      	itt	mi
 8015566:	232b      	movmi	r3, #43	@ 0x2b
 8015568:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801556c:	f89a 3000 	ldrb.w	r3, [sl]
 8015570:	2b2a      	cmp	r3, #42	@ 0x2a
 8015572:	d015      	beq.n	80155a0 <_vfiprintf_r+0x120>
 8015574:	9a07      	ldr	r2, [sp, #28]
 8015576:	4654      	mov	r4, sl
 8015578:	2000      	movs	r0, #0
 801557a:	f04f 0c0a 	mov.w	ip, #10
 801557e:	4621      	mov	r1, r4
 8015580:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015584:	3b30      	subs	r3, #48	@ 0x30
 8015586:	2b09      	cmp	r3, #9
 8015588:	d94b      	bls.n	8015622 <_vfiprintf_r+0x1a2>
 801558a:	b1b0      	cbz	r0, 80155ba <_vfiprintf_r+0x13a>
 801558c:	9207      	str	r2, [sp, #28]
 801558e:	e014      	b.n	80155ba <_vfiprintf_r+0x13a>
 8015590:	eba0 0308 	sub.w	r3, r0, r8
 8015594:	fa09 f303 	lsl.w	r3, r9, r3
 8015598:	4313      	orrs	r3, r2
 801559a:	9304      	str	r3, [sp, #16]
 801559c:	46a2      	mov	sl, r4
 801559e:	e7d2      	b.n	8015546 <_vfiprintf_r+0xc6>
 80155a0:	9b03      	ldr	r3, [sp, #12]
 80155a2:	1d19      	adds	r1, r3, #4
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	9103      	str	r1, [sp, #12]
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	bfbb      	ittet	lt
 80155ac:	425b      	neglt	r3, r3
 80155ae:	f042 0202 	orrlt.w	r2, r2, #2
 80155b2:	9307      	strge	r3, [sp, #28]
 80155b4:	9307      	strlt	r3, [sp, #28]
 80155b6:	bfb8      	it	lt
 80155b8:	9204      	strlt	r2, [sp, #16]
 80155ba:	7823      	ldrb	r3, [r4, #0]
 80155bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80155be:	d10a      	bne.n	80155d6 <_vfiprintf_r+0x156>
 80155c0:	7863      	ldrb	r3, [r4, #1]
 80155c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80155c4:	d132      	bne.n	801562c <_vfiprintf_r+0x1ac>
 80155c6:	9b03      	ldr	r3, [sp, #12]
 80155c8:	1d1a      	adds	r2, r3, #4
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	9203      	str	r2, [sp, #12]
 80155ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80155d2:	3402      	adds	r4, #2
 80155d4:	9305      	str	r3, [sp, #20]
 80155d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80156ac <_vfiprintf_r+0x22c>
 80155da:	7821      	ldrb	r1, [r4, #0]
 80155dc:	2203      	movs	r2, #3
 80155de:	4650      	mov	r0, sl
 80155e0:	f7ea fe1e 	bl	8000220 <memchr>
 80155e4:	b138      	cbz	r0, 80155f6 <_vfiprintf_r+0x176>
 80155e6:	9b04      	ldr	r3, [sp, #16]
 80155e8:	eba0 000a 	sub.w	r0, r0, sl
 80155ec:	2240      	movs	r2, #64	@ 0x40
 80155ee:	4082      	lsls	r2, r0
 80155f0:	4313      	orrs	r3, r2
 80155f2:	3401      	adds	r4, #1
 80155f4:	9304      	str	r3, [sp, #16]
 80155f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80155fa:	4829      	ldr	r0, [pc, #164]	@ (80156a0 <_vfiprintf_r+0x220>)
 80155fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015600:	2206      	movs	r2, #6
 8015602:	f7ea fe0d 	bl	8000220 <memchr>
 8015606:	2800      	cmp	r0, #0
 8015608:	d03f      	beq.n	801568a <_vfiprintf_r+0x20a>
 801560a:	4b26      	ldr	r3, [pc, #152]	@ (80156a4 <_vfiprintf_r+0x224>)
 801560c:	bb1b      	cbnz	r3, 8015656 <_vfiprintf_r+0x1d6>
 801560e:	9b03      	ldr	r3, [sp, #12]
 8015610:	3307      	adds	r3, #7
 8015612:	f023 0307 	bic.w	r3, r3, #7
 8015616:	3308      	adds	r3, #8
 8015618:	9303      	str	r3, [sp, #12]
 801561a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801561c:	443b      	add	r3, r7
 801561e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015620:	e76a      	b.n	80154f8 <_vfiprintf_r+0x78>
 8015622:	fb0c 3202 	mla	r2, ip, r2, r3
 8015626:	460c      	mov	r4, r1
 8015628:	2001      	movs	r0, #1
 801562a:	e7a8      	b.n	801557e <_vfiprintf_r+0xfe>
 801562c:	2300      	movs	r3, #0
 801562e:	3401      	adds	r4, #1
 8015630:	9305      	str	r3, [sp, #20]
 8015632:	4619      	mov	r1, r3
 8015634:	f04f 0c0a 	mov.w	ip, #10
 8015638:	4620      	mov	r0, r4
 801563a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801563e:	3a30      	subs	r2, #48	@ 0x30
 8015640:	2a09      	cmp	r2, #9
 8015642:	d903      	bls.n	801564c <_vfiprintf_r+0x1cc>
 8015644:	2b00      	cmp	r3, #0
 8015646:	d0c6      	beq.n	80155d6 <_vfiprintf_r+0x156>
 8015648:	9105      	str	r1, [sp, #20]
 801564a:	e7c4      	b.n	80155d6 <_vfiprintf_r+0x156>
 801564c:	fb0c 2101 	mla	r1, ip, r1, r2
 8015650:	4604      	mov	r4, r0
 8015652:	2301      	movs	r3, #1
 8015654:	e7f0      	b.n	8015638 <_vfiprintf_r+0x1b8>
 8015656:	ab03      	add	r3, sp, #12
 8015658:	9300      	str	r3, [sp, #0]
 801565a:	462a      	mov	r2, r5
 801565c:	4b12      	ldr	r3, [pc, #72]	@ (80156a8 <_vfiprintf_r+0x228>)
 801565e:	a904      	add	r1, sp, #16
 8015660:	4630      	mov	r0, r6
 8015662:	f7fc fa8b 	bl	8011b7c <_printf_float>
 8015666:	4607      	mov	r7, r0
 8015668:	1c78      	adds	r0, r7, #1
 801566a:	d1d6      	bne.n	801561a <_vfiprintf_r+0x19a>
 801566c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801566e:	07d9      	lsls	r1, r3, #31
 8015670:	d405      	bmi.n	801567e <_vfiprintf_r+0x1fe>
 8015672:	89ab      	ldrh	r3, [r5, #12]
 8015674:	059a      	lsls	r2, r3, #22
 8015676:	d402      	bmi.n	801567e <_vfiprintf_r+0x1fe>
 8015678:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801567a:	f7fd faf3 	bl	8012c64 <__retarget_lock_release_recursive>
 801567e:	89ab      	ldrh	r3, [r5, #12]
 8015680:	065b      	lsls	r3, r3, #25
 8015682:	f53f af1f 	bmi.w	80154c4 <_vfiprintf_r+0x44>
 8015686:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015688:	e71e      	b.n	80154c8 <_vfiprintf_r+0x48>
 801568a:	ab03      	add	r3, sp, #12
 801568c:	9300      	str	r3, [sp, #0]
 801568e:	462a      	mov	r2, r5
 8015690:	4b05      	ldr	r3, [pc, #20]	@ (80156a8 <_vfiprintf_r+0x228>)
 8015692:	a904      	add	r1, sp, #16
 8015694:	4630      	mov	r0, r6
 8015696:	f7fc fd09 	bl	80120ac <_printf_i>
 801569a:	e7e4      	b.n	8015666 <_vfiprintf_r+0x1e6>
 801569c:	08024241 	.word	0x08024241
 80156a0:	0802424b 	.word	0x0802424b
 80156a4:	08011b7d 	.word	0x08011b7d
 80156a8:	0801545b 	.word	0x0801545b
 80156ac:	08024247 	.word	0x08024247

080156b0 <__sflush_r>:
 80156b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80156b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156b8:	0716      	lsls	r6, r2, #28
 80156ba:	4605      	mov	r5, r0
 80156bc:	460c      	mov	r4, r1
 80156be:	d454      	bmi.n	801576a <__sflush_r+0xba>
 80156c0:	684b      	ldr	r3, [r1, #4]
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	dc02      	bgt.n	80156cc <__sflush_r+0x1c>
 80156c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	dd48      	ble.n	801575e <__sflush_r+0xae>
 80156cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80156ce:	2e00      	cmp	r6, #0
 80156d0:	d045      	beq.n	801575e <__sflush_r+0xae>
 80156d2:	2300      	movs	r3, #0
 80156d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80156d8:	682f      	ldr	r7, [r5, #0]
 80156da:	6a21      	ldr	r1, [r4, #32]
 80156dc:	602b      	str	r3, [r5, #0]
 80156de:	d030      	beq.n	8015742 <__sflush_r+0x92>
 80156e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80156e2:	89a3      	ldrh	r3, [r4, #12]
 80156e4:	0759      	lsls	r1, r3, #29
 80156e6:	d505      	bpl.n	80156f4 <__sflush_r+0x44>
 80156e8:	6863      	ldr	r3, [r4, #4]
 80156ea:	1ad2      	subs	r2, r2, r3
 80156ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80156ee:	b10b      	cbz	r3, 80156f4 <__sflush_r+0x44>
 80156f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80156f2:	1ad2      	subs	r2, r2, r3
 80156f4:	2300      	movs	r3, #0
 80156f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80156f8:	6a21      	ldr	r1, [r4, #32]
 80156fa:	4628      	mov	r0, r5
 80156fc:	47b0      	blx	r6
 80156fe:	1c43      	adds	r3, r0, #1
 8015700:	89a3      	ldrh	r3, [r4, #12]
 8015702:	d106      	bne.n	8015712 <__sflush_r+0x62>
 8015704:	6829      	ldr	r1, [r5, #0]
 8015706:	291d      	cmp	r1, #29
 8015708:	d82b      	bhi.n	8015762 <__sflush_r+0xb2>
 801570a:	4a2a      	ldr	r2, [pc, #168]	@ (80157b4 <__sflush_r+0x104>)
 801570c:	410a      	asrs	r2, r1
 801570e:	07d6      	lsls	r6, r2, #31
 8015710:	d427      	bmi.n	8015762 <__sflush_r+0xb2>
 8015712:	2200      	movs	r2, #0
 8015714:	6062      	str	r2, [r4, #4]
 8015716:	04d9      	lsls	r1, r3, #19
 8015718:	6922      	ldr	r2, [r4, #16]
 801571a:	6022      	str	r2, [r4, #0]
 801571c:	d504      	bpl.n	8015728 <__sflush_r+0x78>
 801571e:	1c42      	adds	r2, r0, #1
 8015720:	d101      	bne.n	8015726 <__sflush_r+0x76>
 8015722:	682b      	ldr	r3, [r5, #0]
 8015724:	b903      	cbnz	r3, 8015728 <__sflush_r+0x78>
 8015726:	6560      	str	r0, [r4, #84]	@ 0x54
 8015728:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801572a:	602f      	str	r7, [r5, #0]
 801572c:	b1b9      	cbz	r1, 801575e <__sflush_r+0xae>
 801572e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015732:	4299      	cmp	r1, r3
 8015734:	d002      	beq.n	801573c <__sflush_r+0x8c>
 8015736:	4628      	mov	r0, r5
 8015738:	f7fe f8ea 	bl	8013910 <_free_r>
 801573c:	2300      	movs	r3, #0
 801573e:	6363      	str	r3, [r4, #52]	@ 0x34
 8015740:	e00d      	b.n	801575e <__sflush_r+0xae>
 8015742:	2301      	movs	r3, #1
 8015744:	4628      	mov	r0, r5
 8015746:	47b0      	blx	r6
 8015748:	4602      	mov	r2, r0
 801574a:	1c50      	adds	r0, r2, #1
 801574c:	d1c9      	bne.n	80156e2 <__sflush_r+0x32>
 801574e:	682b      	ldr	r3, [r5, #0]
 8015750:	2b00      	cmp	r3, #0
 8015752:	d0c6      	beq.n	80156e2 <__sflush_r+0x32>
 8015754:	2b1d      	cmp	r3, #29
 8015756:	d001      	beq.n	801575c <__sflush_r+0xac>
 8015758:	2b16      	cmp	r3, #22
 801575a:	d11e      	bne.n	801579a <__sflush_r+0xea>
 801575c:	602f      	str	r7, [r5, #0]
 801575e:	2000      	movs	r0, #0
 8015760:	e022      	b.n	80157a8 <__sflush_r+0xf8>
 8015762:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015766:	b21b      	sxth	r3, r3
 8015768:	e01b      	b.n	80157a2 <__sflush_r+0xf2>
 801576a:	690f      	ldr	r7, [r1, #16]
 801576c:	2f00      	cmp	r7, #0
 801576e:	d0f6      	beq.n	801575e <__sflush_r+0xae>
 8015770:	0793      	lsls	r3, r2, #30
 8015772:	680e      	ldr	r6, [r1, #0]
 8015774:	bf08      	it	eq
 8015776:	694b      	ldreq	r3, [r1, #20]
 8015778:	600f      	str	r7, [r1, #0]
 801577a:	bf18      	it	ne
 801577c:	2300      	movne	r3, #0
 801577e:	eba6 0807 	sub.w	r8, r6, r7
 8015782:	608b      	str	r3, [r1, #8]
 8015784:	f1b8 0f00 	cmp.w	r8, #0
 8015788:	dde9      	ble.n	801575e <__sflush_r+0xae>
 801578a:	6a21      	ldr	r1, [r4, #32]
 801578c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801578e:	4643      	mov	r3, r8
 8015790:	463a      	mov	r2, r7
 8015792:	4628      	mov	r0, r5
 8015794:	47b0      	blx	r6
 8015796:	2800      	cmp	r0, #0
 8015798:	dc08      	bgt.n	80157ac <__sflush_r+0xfc>
 801579a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801579e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80157a2:	81a3      	strh	r3, [r4, #12]
 80157a4:	f04f 30ff 	mov.w	r0, #4294967295
 80157a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157ac:	4407      	add	r7, r0
 80157ae:	eba8 0800 	sub.w	r8, r8, r0
 80157b2:	e7e7      	b.n	8015784 <__sflush_r+0xd4>
 80157b4:	dfbffffe 	.word	0xdfbffffe

080157b8 <_fflush_r>:
 80157b8:	b538      	push	{r3, r4, r5, lr}
 80157ba:	690b      	ldr	r3, [r1, #16]
 80157bc:	4605      	mov	r5, r0
 80157be:	460c      	mov	r4, r1
 80157c0:	b913      	cbnz	r3, 80157c8 <_fflush_r+0x10>
 80157c2:	2500      	movs	r5, #0
 80157c4:	4628      	mov	r0, r5
 80157c6:	bd38      	pop	{r3, r4, r5, pc}
 80157c8:	b118      	cbz	r0, 80157d2 <_fflush_r+0x1a>
 80157ca:	6a03      	ldr	r3, [r0, #32]
 80157cc:	b90b      	cbnz	r3, 80157d2 <_fflush_r+0x1a>
 80157ce:	f7fd f82d 	bl	801282c <__sinit>
 80157d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d0f3      	beq.n	80157c2 <_fflush_r+0xa>
 80157da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80157dc:	07d0      	lsls	r0, r2, #31
 80157de:	d404      	bmi.n	80157ea <_fflush_r+0x32>
 80157e0:	0599      	lsls	r1, r3, #22
 80157e2:	d402      	bmi.n	80157ea <_fflush_r+0x32>
 80157e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80157e6:	f7fd fa3c 	bl	8012c62 <__retarget_lock_acquire_recursive>
 80157ea:	4628      	mov	r0, r5
 80157ec:	4621      	mov	r1, r4
 80157ee:	f7ff ff5f 	bl	80156b0 <__sflush_r>
 80157f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80157f4:	07da      	lsls	r2, r3, #31
 80157f6:	4605      	mov	r5, r0
 80157f8:	d4e4      	bmi.n	80157c4 <_fflush_r+0xc>
 80157fa:	89a3      	ldrh	r3, [r4, #12]
 80157fc:	059b      	lsls	r3, r3, #22
 80157fe:	d4e1      	bmi.n	80157c4 <_fflush_r+0xc>
 8015800:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015802:	f7fd fa2f 	bl	8012c64 <__retarget_lock_release_recursive>
 8015806:	e7dd      	b.n	80157c4 <_fflush_r+0xc>

08015808 <__swhatbuf_r>:
 8015808:	b570      	push	{r4, r5, r6, lr}
 801580a:	460c      	mov	r4, r1
 801580c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015810:	2900      	cmp	r1, #0
 8015812:	b096      	sub	sp, #88	@ 0x58
 8015814:	4615      	mov	r5, r2
 8015816:	461e      	mov	r6, r3
 8015818:	da0d      	bge.n	8015836 <__swhatbuf_r+0x2e>
 801581a:	89a3      	ldrh	r3, [r4, #12]
 801581c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015820:	f04f 0100 	mov.w	r1, #0
 8015824:	bf14      	ite	ne
 8015826:	2340      	movne	r3, #64	@ 0x40
 8015828:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801582c:	2000      	movs	r0, #0
 801582e:	6031      	str	r1, [r6, #0]
 8015830:	602b      	str	r3, [r5, #0]
 8015832:	b016      	add	sp, #88	@ 0x58
 8015834:	bd70      	pop	{r4, r5, r6, pc}
 8015836:	466a      	mov	r2, sp
 8015838:	f000 f874 	bl	8015924 <_fstat_r>
 801583c:	2800      	cmp	r0, #0
 801583e:	dbec      	blt.n	801581a <__swhatbuf_r+0x12>
 8015840:	9901      	ldr	r1, [sp, #4]
 8015842:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015846:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801584a:	4259      	negs	r1, r3
 801584c:	4159      	adcs	r1, r3
 801584e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015852:	e7eb      	b.n	801582c <__swhatbuf_r+0x24>

08015854 <__smakebuf_r>:
 8015854:	898b      	ldrh	r3, [r1, #12]
 8015856:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015858:	079d      	lsls	r5, r3, #30
 801585a:	4606      	mov	r6, r0
 801585c:	460c      	mov	r4, r1
 801585e:	d507      	bpl.n	8015870 <__smakebuf_r+0x1c>
 8015860:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015864:	6023      	str	r3, [r4, #0]
 8015866:	6123      	str	r3, [r4, #16]
 8015868:	2301      	movs	r3, #1
 801586a:	6163      	str	r3, [r4, #20]
 801586c:	b003      	add	sp, #12
 801586e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015870:	ab01      	add	r3, sp, #4
 8015872:	466a      	mov	r2, sp
 8015874:	f7ff ffc8 	bl	8015808 <__swhatbuf_r>
 8015878:	9f00      	ldr	r7, [sp, #0]
 801587a:	4605      	mov	r5, r0
 801587c:	4639      	mov	r1, r7
 801587e:	4630      	mov	r0, r6
 8015880:	f7fe f8ba 	bl	80139f8 <_malloc_r>
 8015884:	b948      	cbnz	r0, 801589a <__smakebuf_r+0x46>
 8015886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801588a:	059a      	lsls	r2, r3, #22
 801588c:	d4ee      	bmi.n	801586c <__smakebuf_r+0x18>
 801588e:	f023 0303 	bic.w	r3, r3, #3
 8015892:	f043 0302 	orr.w	r3, r3, #2
 8015896:	81a3      	strh	r3, [r4, #12]
 8015898:	e7e2      	b.n	8015860 <__smakebuf_r+0xc>
 801589a:	89a3      	ldrh	r3, [r4, #12]
 801589c:	6020      	str	r0, [r4, #0]
 801589e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80158a2:	81a3      	strh	r3, [r4, #12]
 80158a4:	9b01      	ldr	r3, [sp, #4]
 80158a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80158aa:	b15b      	cbz	r3, 80158c4 <__smakebuf_r+0x70>
 80158ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80158b0:	4630      	mov	r0, r6
 80158b2:	f000 f849 	bl	8015948 <_isatty_r>
 80158b6:	b128      	cbz	r0, 80158c4 <__smakebuf_r+0x70>
 80158b8:	89a3      	ldrh	r3, [r4, #12]
 80158ba:	f023 0303 	bic.w	r3, r3, #3
 80158be:	f043 0301 	orr.w	r3, r3, #1
 80158c2:	81a3      	strh	r3, [r4, #12]
 80158c4:	89a3      	ldrh	r3, [r4, #12]
 80158c6:	431d      	orrs	r5, r3
 80158c8:	81a5      	strh	r5, [r4, #12]
 80158ca:	e7cf      	b.n	801586c <__smakebuf_r+0x18>

080158cc <memmove>:
 80158cc:	4288      	cmp	r0, r1
 80158ce:	b510      	push	{r4, lr}
 80158d0:	eb01 0402 	add.w	r4, r1, r2
 80158d4:	d902      	bls.n	80158dc <memmove+0x10>
 80158d6:	4284      	cmp	r4, r0
 80158d8:	4623      	mov	r3, r4
 80158da:	d807      	bhi.n	80158ec <memmove+0x20>
 80158dc:	1e43      	subs	r3, r0, #1
 80158de:	42a1      	cmp	r1, r4
 80158e0:	d008      	beq.n	80158f4 <memmove+0x28>
 80158e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80158e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80158ea:	e7f8      	b.n	80158de <memmove+0x12>
 80158ec:	4402      	add	r2, r0
 80158ee:	4601      	mov	r1, r0
 80158f0:	428a      	cmp	r2, r1
 80158f2:	d100      	bne.n	80158f6 <memmove+0x2a>
 80158f4:	bd10      	pop	{r4, pc}
 80158f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80158fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80158fe:	e7f7      	b.n	80158f0 <memmove+0x24>

08015900 <strncmp>:
 8015900:	b510      	push	{r4, lr}
 8015902:	b16a      	cbz	r2, 8015920 <strncmp+0x20>
 8015904:	3901      	subs	r1, #1
 8015906:	1884      	adds	r4, r0, r2
 8015908:	f810 2b01 	ldrb.w	r2, [r0], #1
 801590c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8015910:	429a      	cmp	r2, r3
 8015912:	d103      	bne.n	801591c <strncmp+0x1c>
 8015914:	42a0      	cmp	r0, r4
 8015916:	d001      	beq.n	801591c <strncmp+0x1c>
 8015918:	2a00      	cmp	r2, #0
 801591a:	d1f5      	bne.n	8015908 <strncmp+0x8>
 801591c:	1ad0      	subs	r0, r2, r3
 801591e:	bd10      	pop	{r4, pc}
 8015920:	4610      	mov	r0, r2
 8015922:	e7fc      	b.n	801591e <strncmp+0x1e>

08015924 <_fstat_r>:
 8015924:	b538      	push	{r3, r4, r5, lr}
 8015926:	4d07      	ldr	r5, [pc, #28]	@ (8015944 <_fstat_r+0x20>)
 8015928:	2300      	movs	r3, #0
 801592a:	4604      	mov	r4, r0
 801592c:	4608      	mov	r0, r1
 801592e:	4611      	mov	r1, r2
 8015930:	602b      	str	r3, [r5, #0]
 8015932:	f7ee fb7b 	bl	800402c <_fstat>
 8015936:	1c43      	adds	r3, r0, #1
 8015938:	d102      	bne.n	8015940 <_fstat_r+0x1c>
 801593a:	682b      	ldr	r3, [r5, #0]
 801593c:	b103      	cbz	r3, 8015940 <_fstat_r+0x1c>
 801593e:	6023      	str	r3, [r4, #0]
 8015940:	bd38      	pop	{r3, r4, r5, pc}
 8015942:	bf00      	nop
 8015944:	20003e9c 	.word	0x20003e9c

08015948 <_isatty_r>:
 8015948:	b538      	push	{r3, r4, r5, lr}
 801594a:	4d06      	ldr	r5, [pc, #24]	@ (8015964 <_isatty_r+0x1c>)
 801594c:	2300      	movs	r3, #0
 801594e:	4604      	mov	r4, r0
 8015950:	4608      	mov	r0, r1
 8015952:	602b      	str	r3, [r5, #0]
 8015954:	f7ee fb7a 	bl	800404c <_isatty>
 8015958:	1c43      	adds	r3, r0, #1
 801595a:	d102      	bne.n	8015962 <_isatty_r+0x1a>
 801595c:	682b      	ldr	r3, [r5, #0]
 801595e:	b103      	cbz	r3, 8015962 <_isatty_r+0x1a>
 8015960:	6023      	str	r3, [r4, #0]
 8015962:	bd38      	pop	{r3, r4, r5, pc}
 8015964:	20003e9c 	.word	0x20003e9c

08015968 <_sbrk_r>:
 8015968:	b538      	push	{r3, r4, r5, lr}
 801596a:	4d06      	ldr	r5, [pc, #24]	@ (8015984 <_sbrk_r+0x1c>)
 801596c:	2300      	movs	r3, #0
 801596e:	4604      	mov	r4, r0
 8015970:	4608      	mov	r0, r1
 8015972:	602b      	str	r3, [r5, #0]
 8015974:	f7ee fb82 	bl	800407c <_sbrk>
 8015978:	1c43      	adds	r3, r0, #1
 801597a:	d102      	bne.n	8015982 <_sbrk_r+0x1a>
 801597c:	682b      	ldr	r3, [r5, #0]
 801597e:	b103      	cbz	r3, 8015982 <_sbrk_r+0x1a>
 8015980:	6023      	str	r3, [r4, #0]
 8015982:	bd38      	pop	{r3, r4, r5, pc}
 8015984:	20003e9c 	.word	0x20003e9c

08015988 <memcpy>:
 8015988:	440a      	add	r2, r1
 801598a:	4291      	cmp	r1, r2
 801598c:	f100 33ff 	add.w	r3, r0, #4294967295
 8015990:	d100      	bne.n	8015994 <memcpy+0xc>
 8015992:	4770      	bx	lr
 8015994:	b510      	push	{r4, lr}
 8015996:	f811 4b01 	ldrb.w	r4, [r1], #1
 801599a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801599e:	4291      	cmp	r1, r2
 80159a0:	d1f9      	bne.n	8015996 <memcpy+0xe>
 80159a2:	bd10      	pop	{r4, pc}
 80159a4:	0000      	movs	r0, r0
	...

080159a8 <nan>:
 80159a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80159b0 <nan+0x8>
 80159ac:	4770      	bx	lr
 80159ae:	bf00      	nop
 80159b0:	00000000 	.word	0x00000000
 80159b4:	7ff80000 	.word	0x7ff80000

080159b8 <__assert_func>:
 80159b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80159ba:	4614      	mov	r4, r2
 80159bc:	461a      	mov	r2, r3
 80159be:	4b09      	ldr	r3, [pc, #36]	@ (80159e4 <__assert_func+0x2c>)
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	4605      	mov	r5, r0
 80159c4:	68d8      	ldr	r0, [r3, #12]
 80159c6:	b954      	cbnz	r4, 80159de <__assert_func+0x26>
 80159c8:	4b07      	ldr	r3, [pc, #28]	@ (80159e8 <__assert_func+0x30>)
 80159ca:	461c      	mov	r4, r3
 80159cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80159d0:	9100      	str	r1, [sp, #0]
 80159d2:	462b      	mov	r3, r5
 80159d4:	4905      	ldr	r1, [pc, #20]	@ (80159ec <__assert_func+0x34>)
 80159d6:	f000 fba7 	bl	8016128 <fiprintf>
 80159da:	f000 fbb7 	bl	801614c <abort>
 80159de:	4b04      	ldr	r3, [pc, #16]	@ (80159f0 <__assert_func+0x38>)
 80159e0:	e7f4      	b.n	80159cc <__assert_func+0x14>
 80159e2:	bf00      	nop
 80159e4:	200001d8 	.word	0x200001d8
 80159e8:	08024295 	.word	0x08024295
 80159ec:	08024267 	.word	0x08024267
 80159f0:	0802425a 	.word	0x0802425a

080159f4 <_calloc_r>:
 80159f4:	b570      	push	{r4, r5, r6, lr}
 80159f6:	fba1 5402 	umull	r5, r4, r1, r2
 80159fa:	b93c      	cbnz	r4, 8015a0c <_calloc_r+0x18>
 80159fc:	4629      	mov	r1, r5
 80159fe:	f7fd fffb 	bl	80139f8 <_malloc_r>
 8015a02:	4606      	mov	r6, r0
 8015a04:	b928      	cbnz	r0, 8015a12 <_calloc_r+0x1e>
 8015a06:	2600      	movs	r6, #0
 8015a08:	4630      	mov	r0, r6
 8015a0a:	bd70      	pop	{r4, r5, r6, pc}
 8015a0c:	220c      	movs	r2, #12
 8015a0e:	6002      	str	r2, [r0, #0]
 8015a10:	e7f9      	b.n	8015a06 <_calloc_r+0x12>
 8015a12:	462a      	mov	r2, r5
 8015a14:	4621      	mov	r1, r4
 8015a16:	f7fd f8a7 	bl	8012b68 <memset>
 8015a1a:	e7f5      	b.n	8015a08 <_calloc_r+0x14>

08015a1c <rshift>:
 8015a1c:	6903      	ldr	r3, [r0, #16]
 8015a1e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015a22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015a26:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015a2a:	f100 0414 	add.w	r4, r0, #20
 8015a2e:	dd45      	ble.n	8015abc <rshift+0xa0>
 8015a30:	f011 011f 	ands.w	r1, r1, #31
 8015a34:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015a38:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015a3c:	d10c      	bne.n	8015a58 <rshift+0x3c>
 8015a3e:	f100 0710 	add.w	r7, r0, #16
 8015a42:	4629      	mov	r1, r5
 8015a44:	42b1      	cmp	r1, r6
 8015a46:	d334      	bcc.n	8015ab2 <rshift+0x96>
 8015a48:	1a9b      	subs	r3, r3, r2
 8015a4a:	009b      	lsls	r3, r3, #2
 8015a4c:	1eea      	subs	r2, r5, #3
 8015a4e:	4296      	cmp	r6, r2
 8015a50:	bf38      	it	cc
 8015a52:	2300      	movcc	r3, #0
 8015a54:	4423      	add	r3, r4
 8015a56:	e015      	b.n	8015a84 <rshift+0x68>
 8015a58:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015a5c:	f1c1 0820 	rsb	r8, r1, #32
 8015a60:	40cf      	lsrs	r7, r1
 8015a62:	f105 0e04 	add.w	lr, r5, #4
 8015a66:	46a1      	mov	r9, r4
 8015a68:	4576      	cmp	r6, lr
 8015a6a:	46f4      	mov	ip, lr
 8015a6c:	d815      	bhi.n	8015a9a <rshift+0x7e>
 8015a6e:	1a9a      	subs	r2, r3, r2
 8015a70:	0092      	lsls	r2, r2, #2
 8015a72:	3a04      	subs	r2, #4
 8015a74:	3501      	adds	r5, #1
 8015a76:	42ae      	cmp	r6, r5
 8015a78:	bf38      	it	cc
 8015a7a:	2200      	movcc	r2, #0
 8015a7c:	18a3      	adds	r3, r4, r2
 8015a7e:	50a7      	str	r7, [r4, r2]
 8015a80:	b107      	cbz	r7, 8015a84 <rshift+0x68>
 8015a82:	3304      	adds	r3, #4
 8015a84:	1b1a      	subs	r2, r3, r4
 8015a86:	42a3      	cmp	r3, r4
 8015a88:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015a8c:	bf08      	it	eq
 8015a8e:	2300      	moveq	r3, #0
 8015a90:	6102      	str	r2, [r0, #16]
 8015a92:	bf08      	it	eq
 8015a94:	6143      	streq	r3, [r0, #20]
 8015a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a9a:	f8dc c000 	ldr.w	ip, [ip]
 8015a9e:	fa0c fc08 	lsl.w	ip, ip, r8
 8015aa2:	ea4c 0707 	orr.w	r7, ip, r7
 8015aa6:	f849 7b04 	str.w	r7, [r9], #4
 8015aaa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015aae:	40cf      	lsrs	r7, r1
 8015ab0:	e7da      	b.n	8015a68 <rshift+0x4c>
 8015ab2:	f851 cb04 	ldr.w	ip, [r1], #4
 8015ab6:	f847 cf04 	str.w	ip, [r7, #4]!
 8015aba:	e7c3      	b.n	8015a44 <rshift+0x28>
 8015abc:	4623      	mov	r3, r4
 8015abe:	e7e1      	b.n	8015a84 <rshift+0x68>

08015ac0 <__hexdig_fun>:
 8015ac0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8015ac4:	2b09      	cmp	r3, #9
 8015ac6:	d802      	bhi.n	8015ace <__hexdig_fun+0xe>
 8015ac8:	3820      	subs	r0, #32
 8015aca:	b2c0      	uxtb	r0, r0
 8015acc:	4770      	bx	lr
 8015ace:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8015ad2:	2b05      	cmp	r3, #5
 8015ad4:	d801      	bhi.n	8015ada <__hexdig_fun+0x1a>
 8015ad6:	3847      	subs	r0, #71	@ 0x47
 8015ad8:	e7f7      	b.n	8015aca <__hexdig_fun+0xa>
 8015ada:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8015ade:	2b05      	cmp	r3, #5
 8015ae0:	d801      	bhi.n	8015ae6 <__hexdig_fun+0x26>
 8015ae2:	3827      	subs	r0, #39	@ 0x27
 8015ae4:	e7f1      	b.n	8015aca <__hexdig_fun+0xa>
 8015ae6:	2000      	movs	r0, #0
 8015ae8:	4770      	bx	lr
	...

08015aec <__gethex>:
 8015aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015af0:	b085      	sub	sp, #20
 8015af2:	468a      	mov	sl, r1
 8015af4:	9302      	str	r3, [sp, #8]
 8015af6:	680b      	ldr	r3, [r1, #0]
 8015af8:	9001      	str	r0, [sp, #4]
 8015afa:	4690      	mov	r8, r2
 8015afc:	1c9c      	adds	r4, r3, #2
 8015afe:	46a1      	mov	r9, r4
 8015b00:	f814 0b01 	ldrb.w	r0, [r4], #1
 8015b04:	2830      	cmp	r0, #48	@ 0x30
 8015b06:	d0fa      	beq.n	8015afe <__gethex+0x12>
 8015b08:	eba9 0303 	sub.w	r3, r9, r3
 8015b0c:	f1a3 0b02 	sub.w	fp, r3, #2
 8015b10:	f7ff ffd6 	bl	8015ac0 <__hexdig_fun>
 8015b14:	4605      	mov	r5, r0
 8015b16:	2800      	cmp	r0, #0
 8015b18:	d168      	bne.n	8015bec <__gethex+0x100>
 8015b1a:	49a0      	ldr	r1, [pc, #640]	@ (8015d9c <__gethex+0x2b0>)
 8015b1c:	2201      	movs	r2, #1
 8015b1e:	4648      	mov	r0, r9
 8015b20:	f7ff feee 	bl	8015900 <strncmp>
 8015b24:	4607      	mov	r7, r0
 8015b26:	2800      	cmp	r0, #0
 8015b28:	d167      	bne.n	8015bfa <__gethex+0x10e>
 8015b2a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8015b2e:	4626      	mov	r6, r4
 8015b30:	f7ff ffc6 	bl	8015ac0 <__hexdig_fun>
 8015b34:	2800      	cmp	r0, #0
 8015b36:	d062      	beq.n	8015bfe <__gethex+0x112>
 8015b38:	4623      	mov	r3, r4
 8015b3a:	7818      	ldrb	r0, [r3, #0]
 8015b3c:	2830      	cmp	r0, #48	@ 0x30
 8015b3e:	4699      	mov	r9, r3
 8015b40:	f103 0301 	add.w	r3, r3, #1
 8015b44:	d0f9      	beq.n	8015b3a <__gethex+0x4e>
 8015b46:	f7ff ffbb 	bl	8015ac0 <__hexdig_fun>
 8015b4a:	fab0 f580 	clz	r5, r0
 8015b4e:	096d      	lsrs	r5, r5, #5
 8015b50:	f04f 0b01 	mov.w	fp, #1
 8015b54:	464a      	mov	r2, r9
 8015b56:	4616      	mov	r6, r2
 8015b58:	3201      	adds	r2, #1
 8015b5a:	7830      	ldrb	r0, [r6, #0]
 8015b5c:	f7ff ffb0 	bl	8015ac0 <__hexdig_fun>
 8015b60:	2800      	cmp	r0, #0
 8015b62:	d1f8      	bne.n	8015b56 <__gethex+0x6a>
 8015b64:	498d      	ldr	r1, [pc, #564]	@ (8015d9c <__gethex+0x2b0>)
 8015b66:	2201      	movs	r2, #1
 8015b68:	4630      	mov	r0, r6
 8015b6a:	f7ff fec9 	bl	8015900 <strncmp>
 8015b6e:	2800      	cmp	r0, #0
 8015b70:	d13f      	bne.n	8015bf2 <__gethex+0x106>
 8015b72:	b944      	cbnz	r4, 8015b86 <__gethex+0x9a>
 8015b74:	1c74      	adds	r4, r6, #1
 8015b76:	4622      	mov	r2, r4
 8015b78:	4616      	mov	r6, r2
 8015b7a:	3201      	adds	r2, #1
 8015b7c:	7830      	ldrb	r0, [r6, #0]
 8015b7e:	f7ff ff9f 	bl	8015ac0 <__hexdig_fun>
 8015b82:	2800      	cmp	r0, #0
 8015b84:	d1f8      	bne.n	8015b78 <__gethex+0x8c>
 8015b86:	1ba4      	subs	r4, r4, r6
 8015b88:	00a7      	lsls	r7, r4, #2
 8015b8a:	7833      	ldrb	r3, [r6, #0]
 8015b8c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8015b90:	2b50      	cmp	r3, #80	@ 0x50
 8015b92:	d13e      	bne.n	8015c12 <__gethex+0x126>
 8015b94:	7873      	ldrb	r3, [r6, #1]
 8015b96:	2b2b      	cmp	r3, #43	@ 0x2b
 8015b98:	d033      	beq.n	8015c02 <__gethex+0x116>
 8015b9a:	2b2d      	cmp	r3, #45	@ 0x2d
 8015b9c:	d034      	beq.n	8015c08 <__gethex+0x11c>
 8015b9e:	1c71      	adds	r1, r6, #1
 8015ba0:	2400      	movs	r4, #0
 8015ba2:	7808      	ldrb	r0, [r1, #0]
 8015ba4:	f7ff ff8c 	bl	8015ac0 <__hexdig_fun>
 8015ba8:	1e43      	subs	r3, r0, #1
 8015baa:	b2db      	uxtb	r3, r3
 8015bac:	2b18      	cmp	r3, #24
 8015bae:	d830      	bhi.n	8015c12 <__gethex+0x126>
 8015bb0:	f1a0 0210 	sub.w	r2, r0, #16
 8015bb4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015bb8:	f7ff ff82 	bl	8015ac0 <__hexdig_fun>
 8015bbc:	f100 3cff 	add.w	ip, r0, #4294967295
 8015bc0:	fa5f fc8c 	uxtb.w	ip, ip
 8015bc4:	f1bc 0f18 	cmp.w	ip, #24
 8015bc8:	f04f 030a 	mov.w	r3, #10
 8015bcc:	d91e      	bls.n	8015c0c <__gethex+0x120>
 8015bce:	b104      	cbz	r4, 8015bd2 <__gethex+0xe6>
 8015bd0:	4252      	negs	r2, r2
 8015bd2:	4417      	add	r7, r2
 8015bd4:	f8ca 1000 	str.w	r1, [sl]
 8015bd8:	b1ed      	cbz	r5, 8015c16 <__gethex+0x12a>
 8015bda:	f1bb 0f00 	cmp.w	fp, #0
 8015bde:	bf0c      	ite	eq
 8015be0:	2506      	moveq	r5, #6
 8015be2:	2500      	movne	r5, #0
 8015be4:	4628      	mov	r0, r5
 8015be6:	b005      	add	sp, #20
 8015be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bec:	2500      	movs	r5, #0
 8015bee:	462c      	mov	r4, r5
 8015bf0:	e7b0      	b.n	8015b54 <__gethex+0x68>
 8015bf2:	2c00      	cmp	r4, #0
 8015bf4:	d1c7      	bne.n	8015b86 <__gethex+0x9a>
 8015bf6:	4627      	mov	r7, r4
 8015bf8:	e7c7      	b.n	8015b8a <__gethex+0x9e>
 8015bfa:	464e      	mov	r6, r9
 8015bfc:	462f      	mov	r7, r5
 8015bfe:	2501      	movs	r5, #1
 8015c00:	e7c3      	b.n	8015b8a <__gethex+0x9e>
 8015c02:	2400      	movs	r4, #0
 8015c04:	1cb1      	adds	r1, r6, #2
 8015c06:	e7cc      	b.n	8015ba2 <__gethex+0xb6>
 8015c08:	2401      	movs	r4, #1
 8015c0a:	e7fb      	b.n	8015c04 <__gethex+0x118>
 8015c0c:	fb03 0002 	mla	r0, r3, r2, r0
 8015c10:	e7ce      	b.n	8015bb0 <__gethex+0xc4>
 8015c12:	4631      	mov	r1, r6
 8015c14:	e7de      	b.n	8015bd4 <__gethex+0xe8>
 8015c16:	eba6 0309 	sub.w	r3, r6, r9
 8015c1a:	3b01      	subs	r3, #1
 8015c1c:	4629      	mov	r1, r5
 8015c1e:	2b07      	cmp	r3, #7
 8015c20:	dc0a      	bgt.n	8015c38 <__gethex+0x14c>
 8015c22:	9801      	ldr	r0, [sp, #4]
 8015c24:	f7fd ff74 	bl	8013b10 <_Balloc>
 8015c28:	4604      	mov	r4, r0
 8015c2a:	b940      	cbnz	r0, 8015c3e <__gethex+0x152>
 8015c2c:	4b5c      	ldr	r3, [pc, #368]	@ (8015da0 <__gethex+0x2b4>)
 8015c2e:	4602      	mov	r2, r0
 8015c30:	21e4      	movs	r1, #228	@ 0xe4
 8015c32:	485c      	ldr	r0, [pc, #368]	@ (8015da4 <__gethex+0x2b8>)
 8015c34:	f7ff fec0 	bl	80159b8 <__assert_func>
 8015c38:	3101      	adds	r1, #1
 8015c3a:	105b      	asrs	r3, r3, #1
 8015c3c:	e7ef      	b.n	8015c1e <__gethex+0x132>
 8015c3e:	f100 0a14 	add.w	sl, r0, #20
 8015c42:	2300      	movs	r3, #0
 8015c44:	4655      	mov	r5, sl
 8015c46:	469b      	mov	fp, r3
 8015c48:	45b1      	cmp	r9, r6
 8015c4a:	d337      	bcc.n	8015cbc <__gethex+0x1d0>
 8015c4c:	f845 bb04 	str.w	fp, [r5], #4
 8015c50:	eba5 050a 	sub.w	r5, r5, sl
 8015c54:	10ad      	asrs	r5, r5, #2
 8015c56:	6125      	str	r5, [r4, #16]
 8015c58:	4658      	mov	r0, fp
 8015c5a:	f7fe f84b 	bl	8013cf4 <__hi0bits>
 8015c5e:	016d      	lsls	r5, r5, #5
 8015c60:	f8d8 6000 	ldr.w	r6, [r8]
 8015c64:	1a2d      	subs	r5, r5, r0
 8015c66:	42b5      	cmp	r5, r6
 8015c68:	dd54      	ble.n	8015d14 <__gethex+0x228>
 8015c6a:	1bad      	subs	r5, r5, r6
 8015c6c:	4629      	mov	r1, r5
 8015c6e:	4620      	mov	r0, r4
 8015c70:	f7fe fbdf 	bl	8014432 <__any_on>
 8015c74:	4681      	mov	r9, r0
 8015c76:	b178      	cbz	r0, 8015c98 <__gethex+0x1ac>
 8015c78:	1e6b      	subs	r3, r5, #1
 8015c7a:	1159      	asrs	r1, r3, #5
 8015c7c:	f003 021f 	and.w	r2, r3, #31
 8015c80:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8015c84:	f04f 0901 	mov.w	r9, #1
 8015c88:	fa09 f202 	lsl.w	r2, r9, r2
 8015c8c:	420a      	tst	r2, r1
 8015c8e:	d003      	beq.n	8015c98 <__gethex+0x1ac>
 8015c90:	454b      	cmp	r3, r9
 8015c92:	dc36      	bgt.n	8015d02 <__gethex+0x216>
 8015c94:	f04f 0902 	mov.w	r9, #2
 8015c98:	4629      	mov	r1, r5
 8015c9a:	4620      	mov	r0, r4
 8015c9c:	f7ff febe 	bl	8015a1c <rshift>
 8015ca0:	442f      	add	r7, r5
 8015ca2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015ca6:	42bb      	cmp	r3, r7
 8015ca8:	da42      	bge.n	8015d30 <__gethex+0x244>
 8015caa:	9801      	ldr	r0, [sp, #4]
 8015cac:	4621      	mov	r1, r4
 8015cae:	f7fd ff6f 	bl	8013b90 <_Bfree>
 8015cb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015cb4:	2300      	movs	r3, #0
 8015cb6:	6013      	str	r3, [r2, #0]
 8015cb8:	25a3      	movs	r5, #163	@ 0xa3
 8015cba:	e793      	b.n	8015be4 <__gethex+0xf8>
 8015cbc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8015cc0:	2a2e      	cmp	r2, #46	@ 0x2e
 8015cc2:	d012      	beq.n	8015cea <__gethex+0x1fe>
 8015cc4:	2b20      	cmp	r3, #32
 8015cc6:	d104      	bne.n	8015cd2 <__gethex+0x1e6>
 8015cc8:	f845 bb04 	str.w	fp, [r5], #4
 8015ccc:	f04f 0b00 	mov.w	fp, #0
 8015cd0:	465b      	mov	r3, fp
 8015cd2:	7830      	ldrb	r0, [r6, #0]
 8015cd4:	9303      	str	r3, [sp, #12]
 8015cd6:	f7ff fef3 	bl	8015ac0 <__hexdig_fun>
 8015cda:	9b03      	ldr	r3, [sp, #12]
 8015cdc:	f000 000f 	and.w	r0, r0, #15
 8015ce0:	4098      	lsls	r0, r3
 8015ce2:	ea4b 0b00 	orr.w	fp, fp, r0
 8015ce6:	3304      	adds	r3, #4
 8015ce8:	e7ae      	b.n	8015c48 <__gethex+0x15c>
 8015cea:	45b1      	cmp	r9, r6
 8015cec:	d8ea      	bhi.n	8015cc4 <__gethex+0x1d8>
 8015cee:	492b      	ldr	r1, [pc, #172]	@ (8015d9c <__gethex+0x2b0>)
 8015cf0:	9303      	str	r3, [sp, #12]
 8015cf2:	2201      	movs	r2, #1
 8015cf4:	4630      	mov	r0, r6
 8015cf6:	f7ff fe03 	bl	8015900 <strncmp>
 8015cfa:	9b03      	ldr	r3, [sp, #12]
 8015cfc:	2800      	cmp	r0, #0
 8015cfe:	d1e1      	bne.n	8015cc4 <__gethex+0x1d8>
 8015d00:	e7a2      	b.n	8015c48 <__gethex+0x15c>
 8015d02:	1ea9      	subs	r1, r5, #2
 8015d04:	4620      	mov	r0, r4
 8015d06:	f7fe fb94 	bl	8014432 <__any_on>
 8015d0a:	2800      	cmp	r0, #0
 8015d0c:	d0c2      	beq.n	8015c94 <__gethex+0x1a8>
 8015d0e:	f04f 0903 	mov.w	r9, #3
 8015d12:	e7c1      	b.n	8015c98 <__gethex+0x1ac>
 8015d14:	da09      	bge.n	8015d2a <__gethex+0x23e>
 8015d16:	1b75      	subs	r5, r6, r5
 8015d18:	4621      	mov	r1, r4
 8015d1a:	9801      	ldr	r0, [sp, #4]
 8015d1c:	462a      	mov	r2, r5
 8015d1e:	f7fe f94f 	bl	8013fc0 <__lshift>
 8015d22:	1b7f      	subs	r7, r7, r5
 8015d24:	4604      	mov	r4, r0
 8015d26:	f100 0a14 	add.w	sl, r0, #20
 8015d2a:	f04f 0900 	mov.w	r9, #0
 8015d2e:	e7b8      	b.n	8015ca2 <__gethex+0x1b6>
 8015d30:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015d34:	42bd      	cmp	r5, r7
 8015d36:	dd6f      	ble.n	8015e18 <__gethex+0x32c>
 8015d38:	1bed      	subs	r5, r5, r7
 8015d3a:	42ae      	cmp	r6, r5
 8015d3c:	dc34      	bgt.n	8015da8 <__gethex+0x2bc>
 8015d3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015d42:	2b02      	cmp	r3, #2
 8015d44:	d022      	beq.n	8015d8c <__gethex+0x2a0>
 8015d46:	2b03      	cmp	r3, #3
 8015d48:	d024      	beq.n	8015d94 <__gethex+0x2a8>
 8015d4a:	2b01      	cmp	r3, #1
 8015d4c:	d115      	bne.n	8015d7a <__gethex+0x28e>
 8015d4e:	42ae      	cmp	r6, r5
 8015d50:	d113      	bne.n	8015d7a <__gethex+0x28e>
 8015d52:	2e01      	cmp	r6, #1
 8015d54:	d10b      	bne.n	8015d6e <__gethex+0x282>
 8015d56:	9a02      	ldr	r2, [sp, #8]
 8015d58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015d5c:	6013      	str	r3, [r2, #0]
 8015d5e:	2301      	movs	r3, #1
 8015d60:	6123      	str	r3, [r4, #16]
 8015d62:	f8ca 3000 	str.w	r3, [sl]
 8015d66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015d68:	2562      	movs	r5, #98	@ 0x62
 8015d6a:	601c      	str	r4, [r3, #0]
 8015d6c:	e73a      	b.n	8015be4 <__gethex+0xf8>
 8015d6e:	1e71      	subs	r1, r6, #1
 8015d70:	4620      	mov	r0, r4
 8015d72:	f7fe fb5e 	bl	8014432 <__any_on>
 8015d76:	2800      	cmp	r0, #0
 8015d78:	d1ed      	bne.n	8015d56 <__gethex+0x26a>
 8015d7a:	9801      	ldr	r0, [sp, #4]
 8015d7c:	4621      	mov	r1, r4
 8015d7e:	f7fd ff07 	bl	8013b90 <_Bfree>
 8015d82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015d84:	2300      	movs	r3, #0
 8015d86:	6013      	str	r3, [r2, #0]
 8015d88:	2550      	movs	r5, #80	@ 0x50
 8015d8a:	e72b      	b.n	8015be4 <__gethex+0xf8>
 8015d8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d1f3      	bne.n	8015d7a <__gethex+0x28e>
 8015d92:	e7e0      	b.n	8015d56 <__gethex+0x26a>
 8015d94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d1dd      	bne.n	8015d56 <__gethex+0x26a>
 8015d9a:	e7ee      	b.n	8015d7a <__gethex+0x28e>
 8015d9c:	080240e8 	.word	0x080240e8
 8015da0:	08023f7d 	.word	0x08023f7d
 8015da4:	08024296 	.word	0x08024296
 8015da8:	1e6f      	subs	r7, r5, #1
 8015daa:	f1b9 0f00 	cmp.w	r9, #0
 8015dae:	d130      	bne.n	8015e12 <__gethex+0x326>
 8015db0:	b127      	cbz	r7, 8015dbc <__gethex+0x2d0>
 8015db2:	4639      	mov	r1, r7
 8015db4:	4620      	mov	r0, r4
 8015db6:	f7fe fb3c 	bl	8014432 <__any_on>
 8015dba:	4681      	mov	r9, r0
 8015dbc:	117a      	asrs	r2, r7, #5
 8015dbe:	2301      	movs	r3, #1
 8015dc0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8015dc4:	f007 071f 	and.w	r7, r7, #31
 8015dc8:	40bb      	lsls	r3, r7
 8015dca:	4213      	tst	r3, r2
 8015dcc:	4629      	mov	r1, r5
 8015dce:	4620      	mov	r0, r4
 8015dd0:	bf18      	it	ne
 8015dd2:	f049 0902 	orrne.w	r9, r9, #2
 8015dd6:	f7ff fe21 	bl	8015a1c <rshift>
 8015dda:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8015dde:	1b76      	subs	r6, r6, r5
 8015de0:	2502      	movs	r5, #2
 8015de2:	f1b9 0f00 	cmp.w	r9, #0
 8015de6:	d047      	beq.n	8015e78 <__gethex+0x38c>
 8015de8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015dec:	2b02      	cmp	r3, #2
 8015dee:	d015      	beq.n	8015e1c <__gethex+0x330>
 8015df0:	2b03      	cmp	r3, #3
 8015df2:	d017      	beq.n	8015e24 <__gethex+0x338>
 8015df4:	2b01      	cmp	r3, #1
 8015df6:	d109      	bne.n	8015e0c <__gethex+0x320>
 8015df8:	f019 0f02 	tst.w	r9, #2
 8015dfc:	d006      	beq.n	8015e0c <__gethex+0x320>
 8015dfe:	f8da 3000 	ldr.w	r3, [sl]
 8015e02:	ea49 0903 	orr.w	r9, r9, r3
 8015e06:	f019 0f01 	tst.w	r9, #1
 8015e0a:	d10e      	bne.n	8015e2a <__gethex+0x33e>
 8015e0c:	f045 0510 	orr.w	r5, r5, #16
 8015e10:	e032      	b.n	8015e78 <__gethex+0x38c>
 8015e12:	f04f 0901 	mov.w	r9, #1
 8015e16:	e7d1      	b.n	8015dbc <__gethex+0x2d0>
 8015e18:	2501      	movs	r5, #1
 8015e1a:	e7e2      	b.n	8015de2 <__gethex+0x2f6>
 8015e1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015e1e:	f1c3 0301 	rsb	r3, r3, #1
 8015e22:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015e24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d0f0      	beq.n	8015e0c <__gethex+0x320>
 8015e2a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015e2e:	f104 0314 	add.w	r3, r4, #20
 8015e32:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015e36:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015e3a:	f04f 0c00 	mov.w	ip, #0
 8015e3e:	4618      	mov	r0, r3
 8015e40:	f853 2b04 	ldr.w	r2, [r3], #4
 8015e44:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015e48:	d01b      	beq.n	8015e82 <__gethex+0x396>
 8015e4a:	3201      	adds	r2, #1
 8015e4c:	6002      	str	r2, [r0, #0]
 8015e4e:	2d02      	cmp	r5, #2
 8015e50:	f104 0314 	add.w	r3, r4, #20
 8015e54:	d13c      	bne.n	8015ed0 <__gethex+0x3e4>
 8015e56:	f8d8 2000 	ldr.w	r2, [r8]
 8015e5a:	3a01      	subs	r2, #1
 8015e5c:	42b2      	cmp	r2, r6
 8015e5e:	d109      	bne.n	8015e74 <__gethex+0x388>
 8015e60:	1171      	asrs	r1, r6, #5
 8015e62:	2201      	movs	r2, #1
 8015e64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015e68:	f006 061f 	and.w	r6, r6, #31
 8015e6c:	fa02 f606 	lsl.w	r6, r2, r6
 8015e70:	421e      	tst	r6, r3
 8015e72:	d13a      	bne.n	8015eea <__gethex+0x3fe>
 8015e74:	f045 0520 	orr.w	r5, r5, #32
 8015e78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015e7a:	601c      	str	r4, [r3, #0]
 8015e7c:	9b02      	ldr	r3, [sp, #8]
 8015e7e:	601f      	str	r7, [r3, #0]
 8015e80:	e6b0      	b.n	8015be4 <__gethex+0xf8>
 8015e82:	4299      	cmp	r1, r3
 8015e84:	f843 cc04 	str.w	ip, [r3, #-4]
 8015e88:	d8d9      	bhi.n	8015e3e <__gethex+0x352>
 8015e8a:	68a3      	ldr	r3, [r4, #8]
 8015e8c:	459b      	cmp	fp, r3
 8015e8e:	db17      	blt.n	8015ec0 <__gethex+0x3d4>
 8015e90:	6861      	ldr	r1, [r4, #4]
 8015e92:	9801      	ldr	r0, [sp, #4]
 8015e94:	3101      	adds	r1, #1
 8015e96:	f7fd fe3b 	bl	8013b10 <_Balloc>
 8015e9a:	4681      	mov	r9, r0
 8015e9c:	b918      	cbnz	r0, 8015ea6 <__gethex+0x3ba>
 8015e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8015f08 <__gethex+0x41c>)
 8015ea0:	4602      	mov	r2, r0
 8015ea2:	2184      	movs	r1, #132	@ 0x84
 8015ea4:	e6c5      	b.n	8015c32 <__gethex+0x146>
 8015ea6:	6922      	ldr	r2, [r4, #16]
 8015ea8:	3202      	adds	r2, #2
 8015eaa:	f104 010c 	add.w	r1, r4, #12
 8015eae:	0092      	lsls	r2, r2, #2
 8015eb0:	300c      	adds	r0, #12
 8015eb2:	f7ff fd69 	bl	8015988 <memcpy>
 8015eb6:	4621      	mov	r1, r4
 8015eb8:	9801      	ldr	r0, [sp, #4]
 8015eba:	f7fd fe69 	bl	8013b90 <_Bfree>
 8015ebe:	464c      	mov	r4, r9
 8015ec0:	6923      	ldr	r3, [r4, #16]
 8015ec2:	1c5a      	adds	r2, r3, #1
 8015ec4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015ec8:	6122      	str	r2, [r4, #16]
 8015eca:	2201      	movs	r2, #1
 8015ecc:	615a      	str	r2, [r3, #20]
 8015ece:	e7be      	b.n	8015e4e <__gethex+0x362>
 8015ed0:	6922      	ldr	r2, [r4, #16]
 8015ed2:	455a      	cmp	r2, fp
 8015ed4:	dd0b      	ble.n	8015eee <__gethex+0x402>
 8015ed6:	2101      	movs	r1, #1
 8015ed8:	4620      	mov	r0, r4
 8015eda:	f7ff fd9f 	bl	8015a1c <rshift>
 8015ede:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015ee2:	3701      	adds	r7, #1
 8015ee4:	42bb      	cmp	r3, r7
 8015ee6:	f6ff aee0 	blt.w	8015caa <__gethex+0x1be>
 8015eea:	2501      	movs	r5, #1
 8015eec:	e7c2      	b.n	8015e74 <__gethex+0x388>
 8015eee:	f016 061f 	ands.w	r6, r6, #31
 8015ef2:	d0fa      	beq.n	8015eea <__gethex+0x3fe>
 8015ef4:	4453      	add	r3, sl
 8015ef6:	f1c6 0620 	rsb	r6, r6, #32
 8015efa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8015efe:	f7fd fef9 	bl	8013cf4 <__hi0bits>
 8015f02:	42b0      	cmp	r0, r6
 8015f04:	dbe7      	blt.n	8015ed6 <__gethex+0x3ea>
 8015f06:	e7f0      	b.n	8015eea <__gethex+0x3fe>
 8015f08:	08023f7d 	.word	0x08023f7d

08015f0c <L_shift>:
 8015f0c:	f1c2 0208 	rsb	r2, r2, #8
 8015f10:	0092      	lsls	r2, r2, #2
 8015f12:	b570      	push	{r4, r5, r6, lr}
 8015f14:	f1c2 0620 	rsb	r6, r2, #32
 8015f18:	6843      	ldr	r3, [r0, #4]
 8015f1a:	6804      	ldr	r4, [r0, #0]
 8015f1c:	fa03 f506 	lsl.w	r5, r3, r6
 8015f20:	432c      	orrs	r4, r5
 8015f22:	40d3      	lsrs	r3, r2
 8015f24:	6004      	str	r4, [r0, #0]
 8015f26:	f840 3f04 	str.w	r3, [r0, #4]!
 8015f2a:	4288      	cmp	r0, r1
 8015f2c:	d3f4      	bcc.n	8015f18 <L_shift+0xc>
 8015f2e:	bd70      	pop	{r4, r5, r6, pc}

08015f30 <__match>:
 8015f30:	b530      	push	{r4, r5, lr}
 8015f32:	6803      	ldr	r3, [r0, #0]
 8015f34:	3301      	adds	r3, #1
 8015f36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015f3a:	b914      	cbnz	r4, 8015f42 <__match+0x12>
 8015f3c:	6003      	str	r3, [r0, #0]
 8015f3e:	2001      	movs	r0, #1
 8015f40:	bd30      	pop	{r4, r5, pc}
 8015f42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015f46:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8015f4a:	2d19      	cmp	r5, #25
 8015f4c:	bf98      	it	ls
 8015f4e:	3220      	addls	r2, #32
 8015f50:	42a2      	cmp	r2, r4
 8015f52:	d0f0      	beq.n	8015f36 <__match+0x6>
 8015f54:	2000      	movs	r0, #0
 8015f56:	e7f3      	b.n	8015f40 <__match+0x10>

08015f58 <__hexnan>:
 8015f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f5c:	680b      	ldr	r3, [r1, #0]
 8015f5e:	6801      	ldr	r1, [r0, #0]
 8015f60:	115e      	asrs	r6, r3, #5
 8015f62:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015f66:	f013 031f 	ands.w	r3, r3, #31
 8015f6a:	b087      	sub	sp, #28
 8015f6c:	bf18      	it	ne
 8015f6e:	3604      	addne	r6, #4
 8015f70:	2500      	movs	r5, #0
 8015f72:	1f37      	subs	r7, r6, #4
 8015f74:	4682      	mov	sl, r0
 8015f76:	4690      	mov	r8, r2
 8015f78:	9301      	str	r3, [sp, #4]
 8015f7a:	f846 5c04 	str.w	r5, [r6, #-4]
 8015f7e:	46b9      	mov	r9, r7
 8015f80:	463c      	mov	r4, r7
 8015f82:	9502      	str	r5, [sp, #8]
 8015f84:	46ab      	mov	fp, r5
 8015f86:	784a      	ldrb	r2, [r1, #1]
 8015f88:	1c4b      	adds	r3, r1, #1
 8015f8a:	9303      	str	r3, [sp, #12]
 8015f8c:	b342      	cbz	r2, 8015fe0 <__hexnan+0x88>
 8015f8e:	4610      	mov	r0, r2
 8015f90:	9105      	str	r1, [sp, #20]
 8015f92:	9204      	str	r2, [sp, #16]
 8015f94:	f7ff fd94 	bl	8015ac0 <__hexdig_fun>
 8015f98:	2800      	cmp	r0, #0
 8015f9a:	d151      	bne.n	8016040 <__hexnan+0xe8>
 8015f9c:	9a04      	ldr	r2, [sp, #16]
 8015f9e:	9905      	ldr	r1, [sp, #20]
 8015fa0:	2a20      	cmp	r2, #32
 8015fa2:	d818      	bhi.n	8015fd6 <__hexnan+0x7e>
 8015fa4:	9b02      	ldr	r3, [sp, #8]
 8015fa6:	459b      	cmp	fp, r3
 8015fa8:	dd13      	ble.n	8015fd2 <__hexnan+0x7a>
 8015faa:	454c      	cmp	r4, r9
 8015fac:	d206      	bcs.n	8015fbc <__hexnan+0x64>
 8015fae:	2d07      	cmp	r5, #7
 8015fb0:	dc04      	bgt.n	8015fbc <__hexnan+0x64>
 8015fb2:	462a      	mov	r2, r5
 8015fb4:	4649      	mov	r1, r9
 8015fb6:	4620      	mov	r0, r4
 8015fb8:	f7ff ffa8 	bl	8015f0c <L_shift>
 8015fbc:	4544      	cmp	r4, r8
 8015fbe:	d952      	bls.n	8016066 <__hexnan+0x10e>
 8015fc0:	2300      	movs	r3, #0
 8015fc2:	f1a4 0904 	sub.w	r9, r4, #4
 8015fc6:	f844 3c04 	str.w	r3, [r4, #-4]
 8015fca:	f8cd b008 	str.w	fp, [sp, #8]
 8015fce:	464c      	mov	r4, r9
 8015fd0:	461d      	mov	r5, r3
 8015fd2:	9903      	ldr	r1, [sp, #12]
 8015fd4:	e7d7      	b.n	8015f86 <__hexnan+0x2e>
 8015fd6:	2a29      	cmp	r2, #41	@ 0x29
 8015fd8:	d157      	bne.n	801608a <__hexnan+0x132>
 8015fda:	3102      	adds	r1, #2
 8015fdc:	f8ca 1000 	str.w	r1, [sl]
 8015fe0:	f1bb 0f00 	cmp.w	fp, #0
 8015fe4:	d051      	beq.n	801608a <__hexnan+0x132>
 8015fe6:	454c      	cmp	r4, r9
 8015fe8:	d206      	bcs.n	8015ff8 <__hexnan+0xa0>
 8015fea:	2d07      	cmp	r5, #7
 8015fec:	dc04      	bgt.n	8015ff8 <__hexnan+0xa0>
 8015fee:	462a      	mov	r2, r5
 8015ff0:	4649      	mov	r1, r9
 8015ff2:	4620      	mov	r0, r4
 8015ff4:	f7ff ff8a 	bl	8015f0c <L_shift>
 8015ff8:	4544      	cmp	r4, r8
 8015ffa:	d936      	bls.n	801606a <__hexnan+0x112>
 8015ffc:	f1a8 0204 	sub.w	r2, r8, #4
 8016000:	4623      	mov	r3, r4
 8016002:	f853 1b04 	ldr.w	r1, [r3], #4
 8016006:	f842 1f04 	str.w	r1, [r2, #4]!
 801600a:	429f      	cmp	r7, r3
 801600c:	d2f9      	bcs.n	8016002 <__hexnan+0xaa>
 801600e:	1b3b      	subs	r3, r7, r4
 8016010:	f023 0303 	bic.w	r3, r3, #3
 8016014:	3304      	adds	r3, #4
 8016016:	3401      	adds	r4, #1
 8016018:	3e03      	subs	r6, #3
 801601a:	42b4      	cmp	r4, r6
 801601c:	bf88      	it	hi
 801601e:	2304      	movhi	r3, #4
 8016020:	4443      	add	r3, r8
 8016022:	2200      	movs	r2, #0
 8016024:	f843 2b04 	str.w	r2, [r3], #4
 8016028:	429f      	cmp	r7, r3
 801602a:	d2fb      	bcs.n	8016024 <__hexnan+0xcc>
 801602c:	683b      	ldr	r3, [r7, #0]
 801602e:	b91b      	cbnz	r3, 8016038 <__hexnan+0xe0>
 8016030:	4547      	cmp	r7, r8
 8016032:	d128      	bne.n	8016086 <__hexnan+0x12e>
 8016034:	2301      	movs	r3, #1
 8016036:	603b      	str	r3, [r7, #0]
 8016038:	2005      	movs	r0, #5
 801603a:	b007      	add	sp, #28
 801603c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016040:	3501      	adds	r5, #1
 8016042:	2d08      	cmp	r5, #8
 8016044:	f10b 0b01 	add.w	fp, fp, #1
 8016048:	dd06      	ble.n	8016058 <__hexnan+0x100>
 801604a:	4544      	cmp	r4, r8
 801604c:	d9c1      	bls.n	8015fd2 <__hexnan+0x7a>
 801604e:	2300      	movs	r3, #0
 8016050:	f844 3c04 	str.w	r3, [r4, #-4]
 8016054:	2501      	movs	r5, #1
 8016056:	3c04      	subs	r4, #4
 8016058:	6822      	ldr	r2, [r4, #0]
 801605a:	f000 000f 	and.w	r0, r0, #15
 801605e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016062:	6020      	str	r0, [r4, #0]
 8016064:	e7b5      	b.n	8015fd2 <__hexnan+0x7a>
 8016066:	2508      	movs	r5, #8
 8016068:	e7b3      	b.n	8015fd2 <__hexnan+0x7a>
 801606a:	9b01      	ldr	r3, [sp, #4]
 801606c:	2b00      	cmp	r3, #0
 801606e:	d0dd      	beq.n	801602c <__hexnan+0xd4>
 8016070:	f1c3 0320 	rsb	r3, r3, #32
 8016074:	f04f 32ff 	mov.w	r2, #4294967295
 8016078:	40da      	lsrs	r2, r3
 801607a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801607e:	4013      	ands	r3, r2
 8016080:	f846 3c04 	str.w	r3, [r6, #-4]
 8016084:	e7d2      	b.n	801602c <__hexnan+0xd4>
 8016086:	3f04      	subs	r7, #4
 8016088:	e7d0      	b.n	801602c <__hexnan+0xd4>
 801608a:	2004      	movs	r0, #4
 801608c:	e7d5      	b.n	801603a <__hexnan+0xe2>

0801608e <__ascii_mbtowc>:
 801608e:	b082      	sub	sp, #8
 8016090:	b901      	cbnz	r1, 8016094 <__ascii_mbtowc+0x6>
 8016092:	a901      	add	r1, sp, #4
 8016094:	b142      	cbz	r2, 80160a8 <__ascii_mbtowc+0x1a>
 8016096:	b14b      	cbz	r3, 80160ac <__ascii_mbtowc+0x1e>
 8016098:	7813      	ldrb	r3, [r2, #0]
 801609a:	600b      	str	r3, [r1, #0]
 801609c:	7812      	ldrb	r2, [r2, #0]
 801609e:	1e10      	subs	r0, r2, #0
 80160a0:	bf18      	it	ne
 80160a2:	2001      	movne	r0, #1
 80160a4:	b002      	add	sp, #8
 80160a6:	4770      	bx	lr
 80160a8:	4610      	mov	r0, r2
 80160aa:	e7fb      	b.n	80160a4 <__ascii_mbtowc+0x16>
 80160ac:	f06f 0001 	mvn.w	r0, #1
 80160b0:	e7f8      	b.n	80160a4 <__ascii_mbtowc+0x16>

080160b2 <_realloc_r>:
 80160b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160b6:	4680      	mov	r8, r0
 80160b8:	4615      	mov	r5, r2
 80160ba:	460c      	mov	r4, r1
 80160bc:	b921      	cbnz	r1, 80160c8 <_realloc_r+0x16>
 80160be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80160c2:	4611      	mov	r1, r2
 80160c4:	f7fd bc98 	b.w	80139f8 <_malloc_r>
 80160c8:	b92a      	cbnz	r2, 80160d6 <_realloc_r+0x24>
 80160ca:	f7fd fc21 	bl	8013910 <_free_r>
 80160ce:	2400      	movs	r4, #0
 80160d0:	4620      	mov	r0, r4
 80160d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160d6:	f000 f840 	bl	801615a <_malloc_usable_size_r>
 80160da:	4285      	cmp	r5, r0
 80160dc:	4606      	mov	r6, r0
 80160de:	d802      	bhi.n	80160e6 <_realloc_r+0x34>
 80160e0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80160e4:	d8f4      	bhi.n	80160d0 <_realloc_r+0x1e>
 80160e6:	4629      	mov	r1, r5
 80160e8:	4640      	mov	r0, r8
 80160ea:	f7fd fc85 	bl	80139f8 <_malloc_r>
 80160ee:	4607      	mov	r7, r0
 80160f0:	2800      	cmp	r0, #0
 80160f2:	d0ec      	beq.n	80160ce <_realloc_r+0x1c>
 80160f4:	42b5      	cmp	r5, r6
 80160f6:	462a      	mov	r2, r5
 80160f8:	4621      	mov	r1, r4
 80160fa:	bf28      	it	cs
 80160fc:	4632      	movcs	r2, r6
 80160fe:	f7ff fc43 	bl	8015988 <memcpy>
 8016102:	4621      	mov	r1, r4
 8016104:	4640      	mov	r0, r8
 8016106:	f7fd fc03 	bl	8013910 <_free_r>
 801610a:	463c      	mov	r4, r7
 801610c:	e7e0      	b.n	80160d0 <_realloc_r+0x1e>

0801610e <__ascii_wctomb>:
 801610e:	4603      	mov	r3, r0
 8016110:	4608      	mov	r0, r1
 8016112:	b141      	cbz	r1, 8016126 <__ascii_wctomb+0x18>
 8016114:	2aff      	cmp	r2, #255	@ 0xff
 8016116:	d904      	bls.n	8016122 <__ascii_wctomb+0x14>
 8016118:	228a      	movs	r2, #138	@ 0x8a
 801611a:	601a      	str	r2, [r3, #0]
 801611c:	f04f 30ff 	mov.w	r0, #4294967295
 8016120:	4770      	bx	lr
 8016122:	700a      	strb	r2, [r1, #0]
 8016124:	2001      	movs	r0, #1
 8016126:	4770      	bx	lr

08016128 <fiprintf>:
 8016128:	b40e      	push	{r1, r2, r3}
 801612a:	b503      	push	{r0, r1, lr}
 801612c:	4601      	mov	r1, r0
 801612e:	ab03      	add	r3, sp, #12
 8016130:	4805      	ldr	r0, [pc, #20]	@ (8016148 <fiprintf+0x20>)
 8016132:	f853 2b04 	ldr.w	r2, [r3], #4
 8016136:	6800      	ldr	r0, [r0, #0]
 8016138:	9301      	str	r3, [sp, #4]
 801613a:	f7ff f9a1 	bl	8015480 <_vfiprintf_r>
 801613e:	b002      	add	sp, #8
 8016140:	f85d eb04 	ldr.w	lr, [sp], #4
 8016144:	b003      	add	sp, #12
 8016146:	4770      	bx	lr
 8016148:	200001d8 	.word	0x200001d8

0801614c <abort>:
 801614c:	b508      	push	{r3, lr}
 801614e:	2006      	movs	r0, #6
 8016150:	f000 f834 	bl	80161bc <raise>
 8016154:	2001      	movs	r0, #1
 8016156:	f7ed ff19 	bl	8003f8c <_exit>

0801615a <_malloc_usable_size_r>:
 801615a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801615e:	1f18      	subs	r0, r3, #4
 8016160:	2b00      	cmp	r3, #0
 8016162:	bfbc      	itt	lt
 8016164:	580b      	ldrlt	r3, [r1, r0]
 8016166:	18c0      	addlt	r0, r0, r3
 8016168:	4770      	bx	lr

0801616a <_raise_r>:
 801616a:	291f      	cmp	r1, #31
 801616c:	b538      	push	{r3, r4, r5, lr}
 801616e:	4605      	mov	r5, r0
 8016170:	460c      	mov	r4, r1
 8016172:	d904      	bls.n	801617e <_raise_r+0x14>
 8016174:	2316      	movs	r3, #22
 8016176:	6003      	str	r3, [r0, #0]
 8016178:	f04f 30ff 	mov.w	r0, #4294967295
 801617c:	bd38      	pop	{r3, r4, r5, pc}
 801617e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8016180:	b112      	cbz	r2, 8016188 <_raise_r+0x1e>
 8016182:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016186:	b94b      	cbnz	r3, 801619c <_raise_r+0x32>
 8016188:	4628      	mov	r0, r5
 801618a:	f000 f831 	bl	80161f0 <_getpid_r>
 801618e:	4622      	mov	r2, r4
 8016190:	4601      	mov	r1, r0
 8016192:	4628      	mov	r0, r5
 8016194:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016198:	f000 b818 	b.w	80161cc <_kill_r>
 801619c:	2b01      	cmp	r3, #1
 801619e:	d00a      	beq.n	80161b6 <_raise_r+0x4c>
 80161a0:	1c59      	adds	r1, r3, #1
 80161a2:	d103      	bne.n	80161ac <_raise_r+0x42>
 80161a4:	2316      	movs	r3, #22
 80161a6:	6003      	str	r3, [r0, #0]
 80161a8:	2001      	movs	r0, #1
 80161aa:	e7e7      	b.n	801617c <_raise_r+0x12>
 80161ac:	2100      	movs	r1, #0
 80161ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80161b2:	4620      	mov	r0, r4
 80161b4:	4798      	blx	r3
 80161b6:	2000      	movs	r0, #0
 80161b8:	e7e0      	b.n	801617c <_raise_r+0x12>
	...

080161bc <raise>:
 80161bc:	4b02      	ldr	r3, [pc, #8]	@ (80161c8 <raise+0xc>)
 80161be:	4601      	mov	r1, r0
 80161c0:	6818      	ldr	r0, [r3, #0]
 80161c2:	f7ff bfd2 	b.w	801616a <_raise_r>
 80161c6:	bf00      	nop
 80161c8:	200001d8 	.word	0x200001d8

080161cc <_kill_r>:
 80161cc:	b538      	push	{r3, r4, r5, lr}
 80161ce:	4d07      	ldr	r5, [pc, #28]	@ (80161ec <_kill_r+0x20>)
 80161d0:	2300      	movs	r3, #0
 80161d2:	4604      	mov	r4, r0
 80161d4:	4608      	mov	r0, r1
 80161d6:	4611      	mov	r1, r2
 80161d8:	602b      	str	r3, [r5, #0]
 80161da:	f7ed fec7 	bl	8003f6c <_kill>
 80161de:	1c43      	adds	r3, r0, #1
 80161e0:	d102      	bne.n	80161e8 <_kill_r+0x1c>
 80161e2:	682b      	ldr	r3, [r5, #0]
 80161e4:	b103      	cbz	r3, 80161e8 <_kill_r+0x1c>
 80161e6:	6023      	str	r3, [r4, #0]
 80161e8:	bd38      	pop	{r3, r4, r5, pc}
 80161ea:	bf00      	nop
 80161ec:	20003e9c 	.word	0x20003e9c

080161f0 <_getpid_r>:
 80161f0:	f7ed beb4 	b.w	8003f5c <_getpid>

080161f4 <_init>:
 80161f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161f6:	bf00      	nop
 80161f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80161fa:	bc08      	pop	{r3}
 80161fc:	469e      	mov	lr, r3
 80161fe:	4770      	bx	lr

08016200 <_fini>:
 8016200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016202:	bf00      	nop
 8016204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016206:	bc08      	pop	{r3}
 8016208:	469e      	mov	lr, r3
 801620a:	4770      	bx	lr
